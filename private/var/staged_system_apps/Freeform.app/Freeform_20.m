void sub_101042250(uint64_t a1)
{
  sub_1010425A4(a1, &qword_1016A0058);
}

void sub_101042264()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    char v5 = 2;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v4 + 32);
      }
      v7 = v6;
      swift_getAtKeyPath();

      if (v8 != 2 && v5 == 2) {
        char v5 = v8 & 1;
      }
      ++v4;
    }
    while (v3 != v4);
    goto LABEL_14;
  }
  __break(1u);
}

void sub_101042408()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 2;
    float v6 = 0.0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v4 + 32);
      }
      char v8 = v7;
      swift_getAtKeyPath();

      if (v10 != 2)
      {
        if (v5 == 2)
        {
          unint64_t v5 = ((LODWORD(v9) | ((unint64_t)v10 << 32)) >> 32) & 1;
          float v6 = v9;
        }
        else if (v6 != v9)
        {
          LODWORD(v5) = 1;
        }
      }
      ++v4;
    }
    while (v3 != v4);
    goto LABEL_16;
  }
  __break(1u);
}

void sub_101042590(uint64_t a1)
{
}

void sub_1010425A4(uint64_t a1, unint64_t *a2)
{
  id v4 = [v2 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_18;
  }
LABEL_3:
  if (v6 >= 1)
  {
    int v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = v5 & 0xC000000000000001;
    unint64_t v23 = v5 & 0xC000000000000001;
    do
    {
      if (v10) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v5 + 8 * v9 + 32);
      }
      v12 = v11;
      swift_getAtKeyPath();
      if (v25)
      {
        if (v8)
        {
          sub_10050BF48(0, a2);
          uint64_t v13 = v6;
          id v14 = v25;
          int v15 = v7;
          unint64_t v16 = v5;
          uint64_t v17 = a1;
          id v18 = v8;
          id v19 = v14;
          id v20 = v18;
          char v21 = static NSObject.== infix(_:_:)();

          a1 = v17;
          unint64_t v5 = v16;

          BOOL v22 = (v21 & 1) == 0;
          uint64_t v6 = v13;
          unint64_t v10 = v23;
          if (v22) {
            int v7 = 1;
          }
          else {
            int v7 = v15;
          }
        }
        else
        {
          int v7 = v26;

          char v8 = v25;
        }
      }
      else
      {
      }
      ++v9;
    }
    while (v6 != v9);
    goto LABEL_18;
  }
  __break(1u);
}

void sub_1010427A4()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_18;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 2;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      char v8 = v7;
      swift_getAtKeyPath();

      if (v11 != 2)
      {
        if (v10 == v4) {
          int v9 = v6;
        }
        else {
          int v9 = 1;
        }
        if (v6 == 2)
        {
          uint64_t v4 = v10;
          int v6 = v11 & 1;
        }
        else
        {
          int v6 = v9;
        }
      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_18;
  }
  __break(1u);
}

void sub_101042918()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_22;
  }
LABEL_3:
  if (v3 >= 1)
  {
    unsigned __int8 v4 = 0;
    uint64_t v5 = 0;
    int v6 = 2;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      char v8 = v7;
      swift_getAtKeyPath();
      if ((v11 & 0xFF00) == 0x200)
      {
      }
      else
      {
        int v9 = v6;

        if (v4 == v11) {
          int v10 = v6;
        }
        else {
          int v10 = 1;
        }
        if (v6 == 2) {
          int v6 = HIBYTE(v11) & 1;
        }
        else {
          int v6 = v10;
        }
        if (v9 == 2) {
          unsigned __int8 v4 = v11;
        }
      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_101042A9C@<X0>(_WORD *a1@<X8>)
{
  return sub_101042ADC((uint64_t (*)(void))sub_100835D40, a1);
}

uint64_t sub_101042ABC@<X0>(_WORD *a1@<X8>)
{
  return sub_101042ADC((uint64_t (*)(void))sub_100835CF8, a1);
}

uint64_t sub_101042ADC@<X0>(uint64_t (*a1)(void)@<X4>, _WORD *a2@<X8>)
{
  swift_getKeyPath();
  LOWORD(a1) = a1();
  uint64_t result = swift_release();
  *a2 = (_WORD)a1;
  return result;
}

uint64_t sub_101042B30@<X0>(__int16 *a1@<X8>)
{
  return sub_101042B70((uint64_t (*)(void))sub_100836294, a1);
}

uint64_t sub_101042B50@<X0>(__int16 *a1@<X8>)
{
  return sub_101042B70((uint64_t (*)(void))sub_100836540, a1);
}

uint64_t sub_101042B70@<X0>(uint64_t (*a1)(void)@<X4>, __int16 *a2@<X8>)
{
  swift_getKeyPath();
  uint64_t v4 = a1();
  unsigned __int8 v6 = v5;
  int v7 = v5;
  uint64_t result = swift_release();
  if (v7 == 2) {
    __int16 v9 = 2;
  }
  else {
    __int16 v9 = (v4 != 0) | ((v6 & 1) << 8);
  }
  *a2 = v9;
  return result;
}

void sub_101042BEC()
{
  type metadata accessor for CRLWPShapeItem();
  id v1 = [v0 sortedBoardItemsOfClass:swift_getObjCClassFromMetadata()];
  type metadata accessor for CRLBoardItem(0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_19;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 2;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      char v8 = v7;
      if (swift_dynamicCastClass())
      {
        swift_getAtKeyPath();

        if (v10 == v4) {
          int v9 = v6;
        }
        else {
          int v9 = 1;
        }
        if (v6 == 2)
        {
          uint64_t v4 = v10;
          int v6 = 0;
        }
        else
        {
          int v6 = v9;
        }
      }
      else
      {
      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_19;
  }
  __break(1u);
}

void sub_101042D80()
{
  type metadata accessor for CRLWPShapeItem();
  id v1 = [v0 sortedBoardItemsOfClass:swift_getObjCClassFromMetadata()];
  type metadata accessor for CRLBoardItem(0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_22;
  }
LABEL_3:
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = 0;
    unsigned __int8 v7 = 2;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v2 + 8 * v6 + 32);
      }
      unsigned __int16 v11 = v10;
      if (swift_dynamicCastClass())
      {
        swift_getAtKeyPath();

        int v8 = v7;
        if (((v4 ^ v12) & (v7 != 2)) != 0) {
          int v9 = 1;
        }
        else {
          int v9 = v5;
        }
        if (v7 == 2)
        {
          unsigned __int8 v7 = v12;
          int v4 = v12;
        }
        else
        {
          int v4 = v7 & 1;
        }
        if (v8 == 2) {
          int v5 = 0;
        }
        else {
          int v5 = v9;
        }
      }
      else
      {
      }
      ++v6;
    }
    while (v3 != v6);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t CRLWPShapeEditor.toggleBoldface(_:)()
{
  swift_getKeyPath();
  sub_101042264();
  char v12 = v1;
  swift_release();
  id v2 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      int v8 = v7;
      uint64_t KeyPath = swift_getKeyPath();
      id v10 = sub_1008355F8();
      if (v10)
      {
        unsigned __int16 v11 = v10;
        sub_1010362AC(KeyPath, (v12 & 1) == 0, *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], (void (*)(void, uint64_t))sub_101038090, sub_100836830, (uint64_t (*)(void))sub_10083CC34);

        swift_release();
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

        swift_release();
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_101043198@<X0>(_WORD *a1@<X8>)
{
  return sub_101042ADC((uint64_t (*)(void))sub_100835D40, a1);
}

uint64_t CRLWPShapeEditor.toggleItalics(_:)()
{
  swift_getKeyPath();
  sub_101042264();
  char v12 = v1;
  swift_release();
  id v2 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      int v8 = v7;
      uint64_t KeyPath = swift_getKeyPath();
      id v10 = sub_1008355F8();
      if (v10)
      {
        unsigned __int16 v11 = v10;
        sub_1010362AC(KeyPath, (v12 & 1) == 0, *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], (void (*)(void, uint64_t))sub_1010382C8, sub_10083683C, (uint64_t (*)(void))sub_10083CE14);

        swift_release();
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

        swift_release();
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_10104344C@<X0>(_WORD *a1@<X8>)
{
  return sub_101042ADC((uint64_t (*)(void))sub_100835CF8, a1);
}

uint64_t CRLWPShapeEditor.toggleUnderline(_:)(uint64_t a1)
{
  return sub_1010435B8(a1, (uint64_t)&unk_1011C3DD0, (uint64_t)&unk_1011C3DF8, (void (*)(uint64_t, BOOL, void, void))sub_1010366F4);
}

uint64_t sub_1010434C0@<X0>(__int16 *a1@<X8>)
{
  return sub_101042B70((uint64_t (*)(void))sub_100836294, a1);
}

uint64_t sub_10104350C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    id v7 = (id)swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    id v7 = a1;
  }
  a4(v7);

  return sub_100522F00((uint64_t)v9, &qword_101672BF0);
}

uint64_t CRLWPShapeEditor.toggleStrikethrough(_:)(uint64_t a1)
{
  return sub_1010435B8(a1, (uint64_t)&unk_1011C3E18, (uint64_t)&unk_1011C3E40, (void (*)(uint64_t, BOOL, void, void))sub_101036B08);
}

uint64_t sub_1010435B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, BOOL, void, void))
{
  swift_getKeyPath();
  sub_101042264();
  char v6 = v5;
  swift_release();
  id v7 = [v4 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v8 + 8 * i + 32);
      }
      uint64_t v13 = v12;
      uint64_t KeyPath = swift_getKeyPath();
      int v15 = sub_1008355F8();
      if (v15)
      {
        unint64_t v16 = v15;
        a4(KeyPath, (v6 & 1) == 0, *(void *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

        swift_release();
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

        swift_release();
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_1010437E4@<X0>(__int16 *a1@<X8>)
{
  return sub_101042B70((uint64_t (*)(void))sub_100836540, a1);
}

uint64_t CRLWPShapeEditor.alignLeft(_:)(uint64_t a1)
{
  return sub_101043898(a1, 0);
}

uint64_t CRLWPShapeEditor.alignRight(_:)(uint64_t a1)
{
  return sub_101043898(a1, 1);
}

uint64_t CRLWPShapeEditor.alignCenter(_:)(uint64_t a1)
{
  return sub_101043898(a1, 2);
}

uint64_t CRLWPShapeEditor.alignJustified(_:)(uint64_t a1)
{
  return sub_101043898(a1, 3);
}

uint64_t sub_101043898(uint64_t a1, Swift::Int a2)
{
  id v4 = [v2 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * i + 32);
      }
      id v10 = v9;
      sub_10082E41C(a2);
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

void CRLWPShapeEditor.decreaseFontSizeByOne(_:)()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_21;
  }
LABEL_3:
  unint64_t v4 = v2 & 0xC000000000000001;
  uint64_t v5 = 4;
  unint64_t v24 = v2 & 0xC000000000000001;
  unint64_t v25 = v2;
  uint64_t v23 = v3;
  while (1)
  {
    if (v4) {
      uint64_t v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v6 = (char *)*(id *)(v2 + 8 * v5);
    }
    id v7 = v6;
    uint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    sub_10083B97C();
    if (!v9 || (id v10 = (char *)[v9 selectedTextRange]) == 0)
    {

      goto LABEL_5;
    }
    uint64_t v11 = *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
    uint64_t v12 = *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];

    uint64_t v13 = *(void **)(*(void *)&v7[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape]
                   + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
    if (!v13) {
      break;
    }
    id v14 = v13;
    sub_10090059C(v11, v12, v26);

    int v15 = (char *)v26[4];
    unint64_t v16 = (char *)v26[5];
    uint64_t v17 = (char *)v26[3];

    unint64_t v2 = (unint64_t)&unk_1011C3E60;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v19 = sub_10103EFE4(KeyPath, v17, v15, v16);
    LOBYTE(v16) = v20;
    swift_release();
    if (v16)
    {
      if (!*(void *)(v19 + 16)) {
        goto LABEL_19;
      }
      float v21 = *(float *)(v19 + 32);
      sub_1006F23FC(v19, 1);
    }
    else
    {
      float v21 = *(float *)&v19;
    }
    uint64_t v22 = swift_getKeyPath();
    sub_101036F20(v22, v11, v12, v21 + -1.0);

    swift_release();
    uint64_t v3 = v23;
    unint64_t v4 = v24;
    unint64_t v2 = v25;
LABEL_5:
    ++v5;
    if (v8 == v3) {
      goto LABEL_21;
    }
  }
  __break(1u);
}

void CRLWPShapeEditor.increaseFontSizeByOne(_:)()
{
  id v1 = [v0 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_21;
  }
LABEL_3:
  unint64_t v4 = v2 & 0xC000000000000001;
  uint64_t v5 = 4;
  unint64_t v24 = v2 & 0xC000000000000001;
  unint64_t v25 = v2;
  uint64_t v23 = v3;
  while (1)
  {
    if (v4) {
      uint64_t v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v6 = (char *)*(id *)(v2 + 8 * v5);
    }
    id v7 = v6;
    uint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    sub_10083B97C();
    if (!v9 || (id v10 = (char *)[v9 selectedTextRange]) == 0)
    {

      goto LABEL_5;
    }
    uint64_t v11 = *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
    uint64_t v12 = *(void *)&v10[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];

    uint64_t v13 = *(void **)(*(void *)&v7[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape]
                   + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
    if (!v13) {
      break;
    }
    id v14 = v13;
    sub_10090059C(v11, v12, v26);

    int v15 = (char *)v26[4];
    unint64_t v16 = (char *)v26[5];
    uint64_t v17 = (char *)v26[3];

    unint64_t v2 = (unint64_t)&unk_1011C3E60;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v19 = sub_10103EFE4(KeyPath, v17, v15, v16);
    LOBYTE(v16) = v20;
    swift_release();
    if (v16)
    {
      if (!*(void *)(v19 + 16)) {
        goto LABEL_19;
      }
      float v21 = *(float *)(v19 + 32);
      sub_1006F23FC(v19, 1);
    }
    else
    {
      float v21 = *(float *)&v19;
    }
    uint64_t v22 = swift_getKeyPath();
    sub_101036F20(v22, v11, v12, v21 + 1.0);

    swift_release();
    uint64_t v3 = v23;
    unint64_t v4 = v24;
    unint64_t v2 = v25;
LABEL_5:
    ++v5;
    if (v8 == v3) {
      goto LABEL_21;
    }
  }
  __break(1u);
}

uint64_t sub_101043E98(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v6 = a1;
  _bridgeAnyObjectToAny(_:)();
  uint64_t v7 = swift_unknownObjectRelease();
  a4(v7);

  return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&v9);
}

void CRLWPShapeEditor.addContextualMenuElements(to:at:)(void *a1)
{
  uint64_t v5 = v1;
  v44.super_class = (Class)CRLWPShapeEditor;
  [super addContextualMenuElementsToArray:a1];
  if (![v1 shouldAddAutosizeTextMenuItem]) {
    return;
  }
  v42 = sub_10104459C;
  uint64_t v43 = 0;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = *(void *)"";
  *(void *)&long long v41 = sub_1010445A0;
  *((void *)&v41 + 1) = &unk_101537FE8;
  uint64_t v7 = _Block_copy(&aBlock);
  swift_release();
  id v8 = [a1 indexOfObjectPassingTest:v7];
  _Block_release(v7);
  if (swift_isEscapingClosureAtFileLocation())
  {
    __break(1u);
  }
  else
  {
    if (v8 == (id)NSNotFound.getter()) {
      return;
    }
    id v9 = [a1 objectAtIndexedSubscript:v8];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10050BF48(0, &qword_101673A80);
    if ((swift_dynamicCast() & 1) == 0) {
      return;
    }
    sub_10050BF48(0, &qword_101683888);
    id v10 = self;
    id v11 = [v10 mainBundle];
    NSString v12 = String._bridgeToObjectiveC()();
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v11 localizedStringForKey:v12 value:v13 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    unint64_t v16 = self;
    id v17 = [v16 systemImageNamed:v15];

    long long aBlock = 0u;
    long long v41 = 0u;
    unint64_t v2 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
    id v18 = [v5 shrinkToFitControlState:_swiftEmptyArrayStorage];
    if (v18)
    {
      uint64_t v19 = v18;
      [v2 setState:[v18 stateValue]];
    }
    id v20 = [v10 mainBundle];
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v20 localizedStringForKey:v21 value:v22 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v24 = String._bridgeToObjectiveC()();
    id v25 = [v16 imageNamed:v24];

    long long aBlock = 0u;
    long long v41 = 0u;
    id v3 = (id)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
    unint64_t v4 = v39;
    id v26 = [v39 children:_swiftEmptyArrayStorage];
    sub_10050BF48(0, &qword_10167ADE0);
    unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long aBlock = v27;
    if (!(v27 >> 62))
    {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v29 = v3;
      id v30 = v2;
      uint64_t v31 = v28 + 2;
      if (!__OFADD__(v28, 2)) {
        goto LABEL_9;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
  }
  id v36 = v3;
  id v37 = v2;
  swift_bridgeObjectRetain();
  uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v31 = v38 + 2;
  if (__OFADD__(v38, 2)) {
    goto LABEL_17;
  }
LABEL_9:
  sub_101044AC0(v31);
  specialized Array._endMutation()();
  id v3 = v3;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_18:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v32 = v2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v4 menuByReplacingChildren:isa];

  id v35 = v34;
  [a1 replaceObjectAtIndex:v8 withObject:v35];
}

uint64_t sub_1010445A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  swift_unknownObjectRetain();
  LOBYTE(a4) = v7(v9, a3, a4);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v9);
  return a4 & 1;
}

uint64_t sub_1010446D4()
{
  id v1 = [v0 boardItems];
  type metadata accessor for CRLBoardItem(0);
  sub_101048308((unint64_t *)&qword_101676C20, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = self;
  sub_101035A78(v2);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned __int8 v5 = [v3 anyInfoIsTextBox:isa];

  if (v5) {
    goto LABEL_4;
  }
  sub_101035A78(v2);
  Class v6 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned __int8 v7 = [v3 anyInfoIsStickyNote:v6];

  if ((v7 & 1) != 0
    || (sub_101035A78(v2),
        Class v8 = Set._bridgeToObjectiveC()().super.isa,
        swift_bridgeObjectRelease(),
        unsigned __int8 v9 = [v3 anyInfoIsLine:v8],
        v8,
        (v9 & 1) != 0))
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_101035A78(v2);
    swift_bridgeObjectRelease();
    Class v11 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned int v12 = [v3 anyInfoIsConnectionLine:v11];

    return v12 ^ 1;
  }
}

uint64_t CRLWPShapeEditor.toggleShrinkToFit(_:)()
{
  swift_getKeyPath();
  sub_101042D80();
  char v1 = v0;
  uint64_t result = swift_release();
  if (v1 != 2)
  {
    return sub_100929A68((v1 & 1) == 0);
  }
  return result;
}

id sub_101044A20()
{
  swift_getKeyPath();
  sub_101042D80();
  __int16 v1 = v0;
  swift_release();
  if (v1 == 2) {
    return 0;
  }
  if ((v1 & 0x100) != 0) {
    return [objc_allocWithZone((Class)CRLPlatformControlState) initWithValue:2];
  }
  return [objc_allocWithZone((Class)CRLPlatformControlState) initWithValue:(v1 & 1) != 0];
}

uint64_t sub_101044AC0(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *__int16 v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *__int16 v1 = result;
  }
  return result;
}

void *sub_101044B80(uint64_t a1, char *a2)
{
  v90 = a2;
  uint64_t v67 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v67, v4);
  v66 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unsigned __int8 v7 = &_swiftEmptyArrayStorage;
  if (v6)
  {
    v56[1] = v2;
    v122 = &_swiftEmptyArrayStorage;
    sub_1006BB504(0, v6, 0);
    Class v8 = (unsigned __int8 *)(a1 + 48);
    unsigned __int8 v7 = v122;
    unint64_t v64 = (unint64_t)"rm.system.font.ultralight";
    unint64_t v65 = (unint64_t)"QuickAction.NewBoard";
    unint64_t v62 = (unint64_t)"rm.system.font.light";
    v63 = "rm.system.font.thin";
    unint64_t v60 = (unint64_t)"rm.system.font.medium";
    unint64_t v61 = (unint64_t)"rm.system.font.regular";
    v58 = "rm.system.font.bold";
    unint64_t v59 = (unint64_t)"rm.system.font.semibold";
    v57 = "rm.system.font.heavy";
    unsigned __int8 v9 = v90;
    do
    {
      int v10 = *v8;
      if (v10 != 255)
      {
        uint64_t v14 = 0x63697465766C6548;
        unint64_t v15 = 0xE900000000000061;
        if ((v10 & 1) == 0)
        {
          uint64_t v16 = *((void *)v8 - 2);
          unint64_t v17 = *((void *)v8 - 1);
          uint64_t v14 = 0xD000000000000029;
          unint64_t v15 = v65 | 0x8000000000000000;
          switch(v17)
          {
            case 0uLL:
              goto LABEL_29;
            case 1uLL:
              uint64_t v14 = 0xD000000000000023;
              unint64_t v18 = v64;
              goto LABEL_25;
            case 2uLL:
              v50 = v63;
              goto LABEL_28;
            case 3uLL:
              uint64_t v14 = 0xD000000000000026;
              unint64_t v18 = v62;
              goto LABEL_25;
            case 4uLL:
              uint64_t v14 = 0xD000000000000025;
              unint64_t v18 = v61;
              goto LABEL_25;
            case 5uLL:
              uint64_t v14 = 0xD000000000000027;
              unint64_t v18 = v60;
              goto LABEL_25;
            case 6uLL:
              uint64_t v14 = 0xD000000000000023;
              unint64_t v18 = v59;
LABEL_25:
              unint64_t v15 = v18 | 0x8000000000000000;
              sub_10051B3D8(v16, v17);
              goto LABEL_40;
            case 7uLL:
              v50 = v58;
              goto LABEL_28;
            case 8uLL:
              v50 = v57;
LABEL_28:
              unint64_t v15 = (unint64_t)v50 | 0x8000000000000000;
              uint64_t v14 = 0xD000000000000024;
LABEL_29:
              sub_10051B3D8(v16, v17);
              break;
            default:
              uint64_t v14 = *((void *)v8 - 2);
              unint64_t v15 = *((void *)v8 - 1);
              sub_10051B3D8(v16, v17);
              break;
          }
        }
        goto LABEL_40;
      }
      sub_10051B3EC((uint64_t)&v9[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v120, &qword_10168D670);
      sub_10051B3EC((uint64_t)v120, (uint64_t)v121, &qword_10168D670);
      if (sub_1005DF0EC((uint64_t)v121) == 1)
      {
        uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
        if (!v11)
        {
          __break(1u);
          JUMPOUT(0x1010452ECLL);
        }
        uint64_t v12 = (uint64_t)v66;
        (*(void (**)(void))(*(void *)v11 + 760))();
        NSString v13 = v9;
        swift_retain();
        sub_1005057FC(&qword_1016879C0);
        CRRegister.wrappedValue.getter();
        sub_10051B3EC((uint64_t)&v91, (uint64_t)v92, &qword_10168D670);
        sub_10104835C(v12, type metadata accessor for CRLWPShapeItemCRDTData);
        swift_release();
        sub_10051B3EC((uint64_t)v92, (uint64_t)&v93, &qword_10168D670);
        if (sub_1005DF0EC((uint64_t)&v93) == 1)
        {

          uint64_t v14 = 0x63697465766C6548;
          unint64_t v15 = 0xE900000000000061;
          unsigned __int8 v9 = v90;
          goto LABEL_40;
        }
        uint64_t v48 = v119;
        uint64_t v49 = v117;
        unsigned __int8 v47 = v118;
        uint64_t v46 = v115;
        unsigned __int8 v45 = v116;
        uint64_t v42 = v113;
        unsigned __int8 v44 = v114;
        uint64_t v43 = v111;
        unsigned __int8 v41 = v112;
        long long v39 = v104;
        long long v40 = v105;
        long long v37 = v106;
        long long v38 = v107;
        long long v35 = v108;
        long long v36 = v109;
        long long v34 = v110;
        uint64_t v33 = v102;
        unsigned __int8 v32 = v103;
        uint64_t v31 = v100;
        unsigned __int8 v30 = v101;
        char v19 = v99;
        char v29 = v98;
        int v28 = v96;
        char v27 = v97;
        uint64_t v14 = v93;
        unint64_t v15 = v94;
        int v25 = v95;
      }
      else
      {
        sub_10051B3EC((uint64_t)v120, (uint64_t)&v93, &qword_10168D670);
        uint64_t v86 = v117;
        uint64_t v87 = v119;
        int v85 = v118;
        uint64_t v84 = v115;
        int v83 = v116;
        v89 = v7;
        int v82 = v114;
        uint64_t v80 = v111;
        uint64_t v81 = v113;
        int v79 = v112;
        long long v77 = v105;
        long long v78 = v104;
        long long v75 = v107;
        long long v76 = v106;
        long long v73 = v109;
        long long v74 = v108;
        long long v71 = v110;
        uint64_t v72 = v102;
        int v70 = v103;
        uint64_t v69 = v100;
        int64_t v88 = v6;
        int v68 = v101;
        char v19 = v99;
        id v20 = v8;
        char v21 = v98;
        NSString v22 = v9;
        int v23 = v96;
        char v24 = v97;
        uint64_t v14 = v93;
        unint64_t v15 = v94;
        int v25 = v95;
        id v26 = v22;
        char v27 = v24;
        int v28 = v23;
        char v29 = v21;
        Class v8 = v20;
        unsigned __int8 v30 = v68;
        int64_t v6 = v88;
        unsigned __int8 v7 = v89;
        uint64_t v31 = v69;
        unsigned __int8 v32 = v70;
        uint64_t v33 = v72;
        long long v34 = v71;
        long long v36 = v73;
        long long v35 = v74;
        long long v38 = v75;
        long long v37 = v76;
        long long v40 = v77;
        long long v39 = v78;
        unsigned __int8 v41 = v79;
        uint64_t v43 = v80;
        uint64_t v42 = v81;
        unsigned __int8 v44 = v82;
        unsigned __int8 v45 = v83;
        uint64_t v46 = v84;
        unsigned __int8 v47 = v85;
        uint64_t v49 = v86;
        uint64_t v48 = v87;
      }
      uint64_t v93 = v14;
      unint64_t v94 = v15;
      unsigned __int8 v95 = v25;
      int v96 = v28;
      char v97 = v27;
      char v98 = v29;
      char v99 = v19;
      uint64_t v100 = v31;
      unsigned __int8 v101 = v30;
      uint64_t v102 = v33;
      unsigned __int8 v103 = v32;
      long long v104 = v39;
      long long v105 = v40;
      long long v106 = v37;
      long long v107 = v38;
      long long v108 = v35;
      long long v109 = v36;
      long long v110 = v34;
      uint64_t v111 = v43;
      unsigned __int8 v112 = v41;
      uint64_t v113 = v42;
      unsigned __int8 v114 = v44;
      uint64_t v115 = v46;
      unsigned __int8 v116 = v45;
      uint64_t v117 = v49;
      unsigned __int8 v118 = v47;
      uint64_t v119 = v48;
      sub_10051B3B0(v14, v15, v25);
      sub_101048218((uint64_t)v120);
      sub_10089B210((uint64_t)&v93);
      if (v25 != 255)
      {
        if ((v25 & 1) == 0)
        {
          unsigned __int8 v9 = v90;
          switch(v15)
          {
            case 0uLL:

              uint64_t v14 = 0xD000000000000029;
              unint64_t v15 = v65 | 0x8000000000000000;
              goto LABEL_40;
            case 1uLL:

              uint64_t v14 = 0xD000000000000023;
              unint64_t v15 = v64 | 0x8000000000000000;
              goto LABEL_40;
            case 2uLL:

              v51 = v63;
              goto LABEL_39;
            case 3uLL:

              uint64_t v14 = 0xD000000000000026;
              unint64_t v15 = v62 | 0x8000000000000000;
              goto LABEL_40;
            case 4uLL:

              uint64_t v14 = 0xD000000000000025;
              unint64_t v15 = v61 | 0x8000000000000000;
              goto LABEL_40;
            case 5uLL:

              uint64_t v14 = 0xD000000000000027;
              unint64_t v15 = v60 | 0x8000000000000000;
              goto LABEL_40;
            case 6uLL:

              uint64_t v14 = 0xD000000000000023;
              unint64_t v15 = v59 | 0x8000000000000000;
              goto LABEL_40;
            case 7uLL:

              v51 = v58;
              goto LABEL_39;
            case 8uLL:

              v51 = v57;
LABEL_39:
              unint64_t v15 = (unint64_t)v51 | 0x8000000000000000;
              uint64_t v14 = 0xD000000000000024;
              break;
            default:
              unsigned __int8 v9 = v90;

              break;
          }
          goto LABEL_40;
        }
        sub_10051AC88(v14, v15, v25);
      }
      unsigned __int8 v9 = v90;

      uint64_t v14 = 0x63697465766C6548;
      unint64_t v15 = 0xE900000000000061;
LABEL_40:
      v122 = v7;
      unint64_t v53 = v7[2];
      unint64_t v52 = v7[3];
      if (v53 >= v52 >> 1)
      {
        sub_1006BB504(v52 > 1, v53 + 1, 1);
        unsigned __int8 v9 = v90;
        unsigned __int8 v7 = v122;
      }
      v8 += 24;
      v7[2] = v53 + 1;
      v54 = &v7[2 * v53];
      v54[4] = v14;
      v54[5] = v15;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_101045334(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v20, v5);
  unsigned __int8 v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  unsigned __int8 v9 = &_swiftEmptyArrayStorage;
  if (!v8) {
    return (uint64_t)v9;
  }
  v17[1] = v2;
  int v28 = &_swiftEmptyArrayStorage;
  sub_1006BB644(0, v8, 0);
  unsigned __int8 v9 = v28;
  uint64_t v19 = a2;
  uint64_t v21 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  uint64_t v18 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  for (uint64_t i = (float *)(a1 + 36); ; i += 2)
  {
    if ((*(unsigned char *)i & 1) == 0)
    {
      float v13 = *(i - 1);
      goto LABEL_12;
    }
    sub_10051B3EC(v21, (uint64_t)v26, &qword_10168D670);
    sub_10051B3EC((uint64_t)v26, (uint64_t)v27, &qword_10168D670);
    uint64_t result = sub_1005DF0EC((uint64_t)v27);
    if (result != 1)
    {
      sub_10051B3EC((uint64_t)v26, (uint64_t)v24, &qword_10168D670);
LABEL_10:
      float v13 = *(float *)&v24[5];
      int v14 = v25;
      sub_101048218((uint64_t)v26);
      sub_10089B210((uint64_t)v24);
      if (v14) {
        float v13 = 18.0;
      }
      goto LABEL_12;
    }
    uint64_t v12 = *(void *)(v19 + v18);
    if (!v12) {
      break;
    }
    (*(void (**)(void))(*(void *)v12 + 760))();
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v22, (uint64_t)v23, &qword_10168D670);
    sub_10104835C((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v23, (uint64_t)v24, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)v24) != 1) {
      goto LABEL_10;
    }
    float v13 = 18.0;
LABEL_12:
    int v28 = v9;
    unint64_t v16 = v9[2];
    unint64_t v15 = v9[3];
    if (v16 >= v15 >> 1)
    {
      sub_1006BB644(v15 > 1, v16 + 1, 1);
      unsigned __int8 v9 = v28;
    }
    _OWORD v9[2] = v16 + 1;
    *((float *)v9 + v16 + 8) = v13;
    if (!--v8) {
      return (uint64_t)v9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_101045688(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v23, v5);
  uint64_t v22 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = &_swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v19 = v2;
  unsigned __int8 v30 = &_swiftEmptyArrayStorage;
  sub_1006BB624(0, v7, 0);
  int64_t v8 = v30;
  unsigned __int8 v9 = (unsigned __int8 *)(a1 + 32);
  uint64_t v24 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  uint64_t v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  uint64_t v21 = a2;
  while (1)
  {
    int v11 = *v9++;
    char v10 = v11;
    if (v11 == 2) {
      break;
    }
    char v15 = v10 & 1;
LABEL_13:
    unsigned __int8 v30 = v8;
    unint64_t v18 = v8[2];
    unint64_t v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      sub_1006BB624(v17 > 1, v18 + 1, 1);
      int64_t v8 = v30;
    }
    v8[2] = v18 + 1;
    *((unsigned char *)v8 + v18 + 32) = v15;
    if (!--v7) {
      return (uint64_t)v8;
    }
  }
  sub_10051B3EC(v24, (uint64_t)v28, &qword_10168D670);
  sub_10051B3EC((uint64_t)v28, (uint64_t)v29, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v29);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v28, (uint64_t)v27, &qword_10168D670);
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v21 + v20);
  if (v13)
  {
    uint64_t v14 = (uint64_t)v22;
    (*(void (**)(void))(*(void *)v13 + 760))();
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v25, (uint64_t)v26, &qword_10168D670);
    sub_10104835C(v14, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v26, (uint64_t)v27, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)v27) == 1)
    {
LABEL_11:
      char v15 = 0;
      goto LABEL_13;
    }
LABEL_10:
    int v16 = v27[25];
    sub_101048218((uint64_t)v28);
    sub_10089B210((uint64_t)v27);
    if (v16 != 2)
    {
      char v15 = v16 & 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1010459DC(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v23, v5);
  uint64_t v22 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = &_swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v19 = v2;
  unsigned __int8 v30 = &_swiftEmptyArrayStorage;
  sub_1006BB624(0, v7, 0);
  int64_t v8 = v30;
  unsigned __int8 v9 = (unsigned __int8 *)(a1 + 32);
  uint64_t v24 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  uint64_t v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  uint64_t v21 = a2;
  while (1)
  {
    int v11 = *v9++;
    char v10 = v11;
    if (v11 == 2) {
      break;
    }
    char v15 = v10 & 1;
LABEL_13:
    unsigned __int8 v30 = v8;
    unint64_t v18 = v8[2];
    unint64_t v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      sub_1006BB624(v17 > 1, v18 + 1, 1);
      int64_t v8 = v30;
    }
    v8[2] = v18 + 1;
    *((unsigned char *)v8 + v18 + 32) = v15;
    if (!--v7) {
      return (uint64_t)v8;
    }
  }
  sub_10051B3EC(v24, (uint64_t)v28, &qword_10168D670);
  sub_10051B3EC((uint64_t)v28, (uint64_t)v29, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v29);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v28, (uint64_t)v27, &qword_10168D670);
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v21 + v20);
  if (v13)
  {
    uint64_t v14 = (uint64_t)v22;
    (*(void (**)(void))(*(void *)v13 + 760))();
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v25, (uint64_t)v26, &qword_10168D670);
    sub_10104835C(v14, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v26, (uint64_t)v27, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)v27) == 1)
    {
LABEL_11:
      char v15 = 0;
      goto LABEL_13;
    }
LABEL_10:
    int v16 = v27[26];
    sub_101048218((uint64_t)v28);
    sub_10089B210((uint64_t)v27);
    if (v16 != 2)
    {
      char v15 = v16 & 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_101045D30(uint64_t a1, char *a2)
{
  long long v73 = a2;
  uint64_t v50 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v50, v4);
  uint64_t v49 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  int64_t v7 = &_swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  v48[1] = v2;
  long long v104 = &_swiftEmptyArrayStorage;
  sub_1006BB604(0, v6, 0);
  int64_t v7 = v104;
  for (uint64_t i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    int v9 = *i;
    if (v9 == 255) {
      break;
    }
    if (v9) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *((void *)i - 1);
    }
LABEL_18:
    long long v104 = v7;
    unint64_t v47 = v7[2];
    unint64_t v46 = v7[3];
    if (v47 >= v46 >> 1)
    {
      sub_1006BB604(v46 > 1, v47 + 1, 1);
      int64_t v7 = v104;
    }
    v7[2] = v47 + 1;
    v7[v47 + 4] = v14;
    if (!--v6) {
      return (uint64_t)v7;
    }
  }
  sub_10051B3EC((uint64_t)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v102, &qword_10168D670);
  sub_10051B3EC((uint64_t)v102, (uint64_t)v103, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v103);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v102, (uint64_t)&v76, &qword_10168D670);
    uint64_t v71 = v99;
    uint64_t v72 = v101;
    int v70 = v100;
    uint64_t v69 = v97;
    int v68 = v98;
    uint64_t v66 = v93;
    uint64_t v67 = v95;
    int v64 = v94;
    int v65 = v96;
    long long v62 = v87;
    long long v63 = v86;
    long long v61 = v88;
    long long v58 = v90;
    long long v59 = v89;
    long long v57 = v91;
    long long v54 = v92;
    uint64_t v55 = v84;
    uint64_t v60 = v82;
    int v56 = v83;
    int v52 = v81;
    int v53 = v85;
    char v15 = v80;
    int v16 = v78;
    id v17 = v73;
    char v18 = v79;
    long long v51 = v76;
    char v19 = v77;
    uint64_t v20 = v73;
    char v21 = v19;
    long long v22 = v51;
    char v23 = v18;
    int v24 = v16;
    unsigned __int8 v25 = v52;
    unsigned __int8 v26 = v53;
    uint64_t v27 = v55;
    long long v28 = v54;
    long long v30 = v57;
    long long v29 = v58;
    long long v31 = v59;
    long long v33 = v61;
    long long v32 = v62;
    long long v34 = v63;
    unsigned __int8 v36 = v64;
    unsigned __int8 v35 = v65;
    int v37 = v56;
    uint64_t v39 = v66;
    uint64_t v38 = v67;
    uint64_t v40 = v60;
    unsigned __int8 v41 = v68;
    uint64_t v42 = v69;
    unsigned __int8 v43 = v70;
    uint64_t v45 = v71;
    uint64_t v44 = v72;
LABEL_13:
    long long v76 = v22;
    char v77 = v21;
    int v78 = v24;
    char v79 = v23;
    char v80 = v15;
    unsigned __int8 v81 = v25;
    uint64_t v82 = v40;
    unsigned __int8 v83 = v37;
    uint64_t v84 = v27;
    unsigned __int8 v85 = v26;
    long long v86 = v34;
    long long v87 = v32;
    long long v88 = v33;
    long long v89 = v31;
    long long v90 = v29;
    long long v91 = v30;
    long long v92 = v28;
    uint64_t v93 = v39;
    unsigned __int8 v94 = v36;
    uint64_t v95 = v38;
    unsigned __int8 v96 = v35;
    uint64_t v97 = v42;
    unsigned __int8 v98 = v41;
    uint64_t v99 = v45;
    unsigned __int8 v100 = v43;
    uint64_t v101 = v44;
    sub_101048218((uint64_t)v102);
    sub_10089B210((uint64_t)&v76);

    if (v37 == 255)
    {
      uint64_t v14 = 0;
    }
    else if (v37)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = v40;
    }
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v11)
  {
    uint64_t v12 = (uint64_t)v49;
    (*(void (**)(void))(*(void *)v11 + 760))();
    uint64_t v13 = v73;
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v74, (uint64_t)v75, &qword_10168D670);
    sub_10104835C(v12, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v75, (uint64_t)&v76, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)&v76) == 1)
    {

      uint64_t v14 = 0;
      goto LABEL_18;
    }
    uint64_t v44 = v101;
    uint64_t v45 = v99;
    unsigned __int8 v43 = v100;
    uint64_t v42 = v97;
    unsigned __int8 v41 = v98;
    uint64_t v38 = v95;
    unsigned __int8 v35 = v96;
    uint64_t v39 = v93;
    unsigned __int8 v36 = v94;
    long long v34 = v86;
    long long v32 = v87;
    long long v33 = v88;
    long long v31 = v89;
    long long v29 = v90;
    long long v30 = v91;
    long long v28 = v92;
    uint64_t v27 = v84;
    unsigned __int8 v26 = v85;
    uint64_t v40 = v82;
    int v37 = v83;
    unsigned __int8 v25 = v81;
    char v15 = v80;
    int v24 = v78;
    id v17 = v73;
    char v23 = v79;
    long long v22 = v76;
    char v21 = v77;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1010461C8(uint64_t a1, char *a2)
{
  long long v73 = a2;
  uint64_t v50 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v50, v4);
  uint64_t v49 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  int64_t v7 = &_swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  v48[1] = v2;
  long long v104 = &_swiftEmptyArrayStorage;
  sub_1006BB5E4(0, v6, 0);
  int64_t v7 = v104;
  for (uint64_t i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    int v9 = *i;
    if (v9 == 255) {
      break;
    }
    if (v9) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *((void *)i - 1);
    }
LABEL_18:
    long long v104 = v7;
    unint64_t v47 = v7[2];
    unint64_t v46 = v7[3];
    if (v47 >= v46 >> 1)
    {
      sub_1006BB5E4(v46 > 1, v47 + 1, 1);
      int64_t v7 = v104;
    }
    v7[2] = v47 + 1;
    v7[v47 + 4] = v14;
    if (!--v6) {
      return (uint64_t)v7;
    }
  }
  sub_10051B3EC((uint64_t)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v102, &qword_10168D670);
  sub_10051B3EC((uint64_t)v102, (uint64_t)v103, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v103);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v102, (uint64_t)&v76, &qword_10168D670);
    uint64_t v71 = v99;
    uint64_t v72 = v101;
    int v70 = v100;
    uint64_t v69 = v97;
    int v68 = v98;
    uint64_t v66 = v93;
    uint64_t v67 = v95;
    int v64 = v94;
    int v65 = v96;
    long long v61 = v87;
    long long v62 = v86;
    long long v58 = v89;
    long long v59 = v88;
    long long v56 = v91;
    long long v57 = v90;
    long long v55 = v92;
    uint64_t v63 = v84;
    int v60 = v85;
    uint64_t v54 = v82;
    int v52 = v81;
    int v53 = v83;
    char v15 = v80;
    int v16 = v78;
    id v17 = v73;
    char v18 = v79;
    long long v51 = v76;
    char v19 = v77;
    uint64_t v20 = v73;
    long long v21 = v51;
    char v22 = v18;
    int v23 = v16;
    char v24 = v15;
    unsigned __int8 v25 = v52;
    unsigned __int8 v26 = v53;
    uint64_t v27 = v54;
    long long v29 = v55;
    long long v28 = v56;
    long long v31 = v57;
    long long v30 = v58;
    long long v32 = v59;
    long long v34 = v61;
    long long v33 = v62;
    unsigned __int8 v36 = v64;
    unsigned __int8 v35 = v65;
    uint64_t v38 = v66;
    uint64_t v37 = v67;
    int v39 = v60;
    unsigned __int8 v40 = v68;
    uint64_t v41 = v69;
    uint64_t v42 = v63;
    unsigned __int8 v43 = v70;
    uint64_t v45 = v71;
    uint64_t v44 = v72;
LABEL_13:
    long long v76 = v21;
    char v77 = v19;
    int v78 = v23;
    char v79 = v22;
    char v80 = v24;
    unsigned __int8 v81 = v25;
    uint64_t v82 = v27;
    unsigned __int8 v83 = v26;
    uint64_t v84 = v42;
    unsigned __int8 v85 = v39;
    long long v86 = v33;
    long long v87 = v34;
    long long v88 = v32;
    long long v89 = v30;
    long long v90 = v31;
    long long v91 = v28;
    long long v92 = v29;
    uint64_t v93 = v38;
    unsigned __int8 v94 = v36;
    uint64_t v95 = v37;
    unsigned __int8 v96 = v35;
    uint64_t v97 = v41;
    unsigned __int8 v98 = v40;
    uint64_t v99 = v45;
    unsigned __int8 v100 = v43;
    uint64_t v101 = v44;
    sub_101048218((uint64_t)v102);
    sub_10089B210((uint64_t)&v76);

    if (v39 == 255)
    {
      uint64_t v14 = 0;
    }
    else if (v39)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = v42;
    }
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v11)
  {
    uint64_t v12 = (uint64_t)v49;
    (*(void (**)(void))(*(void *)v11 + 760))();
    uint64_t v13 = v73;
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v74, (uint64_t)v75, &qword_10168D670);
    sub_10104835C(v12, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v75, (uint64_t)&v76, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)&v76) == 1)
    {

      uint64_t v14 = 0;
      goto LABEL_18;
    }
    uint64_t v44 = v101;
    uint64_t v45 = v99;
    unsigned __int8 v43 = v100;
    uint64_t v41 = v97;
    unsigned __int8 v40 = v98;
    uint64_t v37 = v95;
    unsigned __int8 v35 = v96;
    uint64_t v38 = v93;
    unsigned __int8 v36 = v94;
    long long v33 = v86;
    long long v34 = v87;
    long long v32 = v88;
    long long v30 = v89;
    long long v31 = v90;
    long long v28 = v91;
    long long v29 = v92;
    uint64_t v42 = v84;
    int v39 = v85;
    uint64_t v27 = v82;
    unsigned __int8 v26 = v83;
    unsigned __int8 v25 = v81;
    char v24 = v80;
    int v23 = v78;
    id v17 = v73;
    char v22 = v79;
    long long v21 = v76;
    char v19 = v77;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void *sub_101046658(uint64_t a1, char *a2)
{
  uint64_t v117 = a2;
  uint64_t v104 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v104, v4);
  unsigned __int8 v103 = (char *)v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v6)
  {
    v102[1] = v2;
    v167 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v8 = (void *)(a1 + 72);
    while (1)
    {
      uint64_t v18 = v8[7];
      uint64_t v127 = v6;
      if (v18)
      {
        uint64_t v125 = *(v8 - 5);
        uint64_t v19 = *(v8 - 3);
        uint64_t v118 = *(v8 - 4);
        uint64_t v21 = *(v8 - 1);
        uint64_t v192 = *(v8 - 2);
        uint64_t v20 = v192;
        char v22 = v8;
        uint64_t v23 = *v8;
        uint64_t v123 = v21;
        uint64_t v124 = v23;
        uint64_t v24 = v22[1];
        uint64_t v126 = v22[2];
        uint64_t v25 = v22[3];
        uint64_t v121 = v22[4];
        uint64_t v26 = v22[6];
        uint64_t v129 = v22[5];
        uint64_t v130 = v25;
        unsigned __int8 v116 = v22;
        uint64_t v27 = v22[8];
        id v128 = (id)sub_10050BF48(0, (unint64_t *)&qword_10168F9E0);
        int v168 = v19;
        char v169 = BYTE4(v19) & 1;
        uint64_t v170 = v20;
        uint64_t v171 = v21;
        uint64_t v172 = v23;
        uint64_t v173 = v24;
        uint64_t v28 = v126;
        uint64_t v174 = v126;
        uint64_t v29 = v129;
        uint64_t v30 = v130;
        uint64_t v175 = v130;
        uint64_t v31 = v121;
        uint64_t v176 = v121;
        uint64_t v177 = v129;
        uint64_t v178 = v26;
        uint64_t v179 = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v122 = v27;
        uint64_t v96 = v30;
        uint64_t v32 = v118;
        uint64_t v119 = v19;
        sub_10051B2E8(v125, v118, v19, v192, v123, v124, v24, v28, v96, v31, v29, v26, v18);
        uint64_t v115 = v24;
        uint64_t v33 = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v34 = sub_1007B0B84((uint64_t)&v168);
        uint64_t v120 = v26;
        if (v32)
        {
          uint64_t v35 = v123;
          uint64_t v36 = v119;
          if (qword_10166FB80 != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v37 = (id)static OS_os_log.persistence;
          uint64_t v38 = static os_log_type_t.info.getter();
          sub_100BAC898((uint64_t)v37, (uint64_t)&_mh_execute_header, v38, (uint64_t)"Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)&_swiftEmptyArrayStorage);

          id v128 = [objc_allocWithZone((Class)CRLColorFill) initWithColor:v34];
          uint64_t v98 = v33;
          uint64_t v39 = v124;
          uint64_t v40 = v125;
          uint64_t v41 = v36;
          uint64_t v42 = v36;
          uint64_t v43 = v115;
          uint64_t v44 = v126;
          sub_10051ABBC(v125, v32, v42, v192, v35, v124, v115, v126, v130, v98, v129, v120, v18);
          sub_10051ABBC(v40, v32, v41, v192, v35, v39, v43, v44, v130, v121, v129, v120, v18);
        }
        else
        {
          id v128 = [objc_allocWithZone((Class)CRLColorFill) initWithColor:v34];

          uint64_t v101 = v18;
          uint64_t v100 = v26;
          uint64_t v9 = v129;
          uint64_t v97 = v33;
          uint64_t v10 = v130;
          uint64_t v11 = v124;
          uint64_t v12 = v125;
          uint64_t v13 = v32;
          uint64_t v114 = v18;
          uint64_t v14 = v192;
          uint64_t v15 = v123;
          uint64_t v16 = v115;
          uint64_t v17 = v126;
          sub_10051ABBC(v125, v13, v119, v192, v123, v124, v115, v126, v130, v97, v129, v100, v101);
          sub_10051ABBC(v12, v118, v119, v14, v15, v11, v16, v17, v10, v121, v9, v120, v114);
        }
        uint64_t v6 = v127;
        int64_t v8 = v116;
        goto LABEL_5;
      }
      sub_10051B3EC((uint64_t)&v117[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v165, &qword_10168D670);
      sub_10051B3EC((uint64_t)v165, (uint64_t)v166, &qword_10168D670);
      uint64_t result = (void *)sub_1005DF0EC((uint64_t)v166);
      if (result != 1) {
        break;
      }
      uint64_t v45 = *(void *)&v117[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
      if (!v45)
      {
        __break(1u);
        return result;
      }
      uint64_t v46 = (uint64_t)v103;
      (*(void (**)(void))(*(void *)v45 + 760))();
      unint64_t v47 = v117;
      swift_retain();
      sub_1005057FC(&qword_1016879C0);
      CRRegister.wrappedValue.getter();
      sub_10051B3EC((uint64_t)&v131, (uint64_t)v132, &qword_10168D670);
      sub_10104835C(v46, type metadata accessor for CRLWPShapeItemCRDTData);
      swift_release();
      sub_10051B3EC((uint64_t)v132, (uint64_t)&v133, &qword_10168D670);
      if (sub_1005DF0EC((uint64_t)&v133) != 1)
      {
        uint64_t v69 = v162;
        unsigned __int8 v68 = v163;
        uint64_t v67 = v160;
        unsigned __int8 v66 = v161;
        uint64_t v65 = v158;
        unsigned __int8 v63 = v159;
        unsigned __int8 v64 = v157;
        uint64_t v122 = v144;
        uint64_t v123 = v143;
        uint64_t v119 = v164;
        uint64_t v120 = v145;
        uint64_t v77 = v146;
        uint64_t v78 = v147;
        uint64_t v74 = v148;
        uint64_t v70 = v149;
        uint64_t v76 = v150;
        uint64_t v73 = v151;
        uint64_t v75 = v152;
        uint64_t v71 = v153;
        uint64_t v72 = v154;
        uint64_t v61 = v155;
        long long v56 = v156;
        uint64_t v62 = v141;
        char v60 = v142;
        uint64_t v59 = v139;
        char v50 = v140;
        char v51 = v138;
        char v52 = v137;
        int v53 = v135;
        char v58 = v136;
        long long v57 = v133;
        LODWORD(v128) = v134;
        goto LABEL_17;
      }

LABEL_21:
      id v128 = [self blackColor];
LABEL_5:
      v8 += 14;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v6) {
        return v167;
      }
    }
    sub_10051B3EC((uint64_t)v165, (uint64_t)&v133, &qword_10168D670);
    uint64_t v115 = v162;
    LODWORD(v114) = v163;
    uint64_t v113 = v160;
    int v112 = v161;
    uint64_t v111 = v158;
    int v109 = v157;
    int v110 = v159;
    uint64_t v122 = v144;
    uint64_t v123 = v143;
    uint64_t v119 = v164;
    uint64_t v120 = v145;
    uint64_t v121 = v147;
    uint64_t v125 = v148;
    uint64_t v126 = v146;
    unsigned __int8 v116 = (void *)v149;
    uint64_t v118 = v150;
    uint64_t v192 = v151;
    uint64_t v124 = v152;
    uint64_t v129 = v154;
    uint64_t v130 = v153;
    uint64_t v107 = v141;
    uint64_t v108 = v155;
    char v48 = v142;
    uint64_t v49 = v139;
    char v50 = v140;
    char v51 = v138;
    char v52 = v137;
    int v53 = v135;
    char v54 = v136;
    long long v105 = v133;
    long long v106 = v156;
    LODWORD(v128) = v134;
    long long v55 = v117;
    long long v57 = v105;
    long long v56 = v106;
    char v58 = v54;
    uint64_t v59 = v49;
    char v60 = v48;
    uint64_t v62 = v107;
    uint64_t v61 = v108;
    unsigned __int8 v64 = v109;
    unsigned __int8 v63 = v110;
    uint64_t v65 = v111;
    unsigned __int8 v66 = v112;
    uint64_t v67 = v113;
    unsigned __int8 v68 = v114;
    uint64_t v69 = v115;
    uint64_t v70 = (uint64_t)v116;
    uint64_t v72 = v129;
    uint64_t v71 = v130;
    uint64_t v73 = v192;
    uint64_t v75 = v124;
    uint64_t v74 = v125;
    uint64_t v76 = v118;
    uint64_t v77 = v126;
    uint64_t v78 = v121;
LABEL_17:
    uint64_t v130 = v71;
    uint64_t v192 = v73;
    uint64_t v129 = v72;
    long long v133 = v57;
    unsigned __int8 v134 = v128;
    int v135 = v53;
    char v136 = v58;
    char v137 = v52;
    char v138 = v51;
    uint64_t v139 = v59;
    char v140 = v50;
    uint64_t v141 = v62;
    char v142 = v60;
    uint64_t v79 = v122;
    uint64_t v80 = v123;
    uint64_t v143 = v123;
    uint64_t v144 = v122;
    uint64_t v81 = v120;
    uint64_t v145 = v120;
    uint64_t v146 = v77;
    uint64_t v147 = v78;
    uint64_t v148 = v74;
    uint64_t v149 = v70;
    uint64_t v150 = v76;
    uint64_t v151 = v73;
    uint64_t v152 = v75;
    uint64_t v153 = v71;
    uint64_t v154 = v72;
    uint64_t v155 = v61;
    long long v156 = v56;
    unsigned __int8 v157 = v64;
    uint64_t v158 = v65;
    unsigned __int8 v159 = v63;
    uint64_t v160 = v67;
    unsigned __int8 v161 = v66;
    uint64_t v162 = v69;
    unsigned __int8 v163 = v68;
    uint64_t v115 = v56;
    uint64_t v164 = v119;
    uint64_t v124 = v75;
    uint64_t v99 = v75;
    uint64_t v82 = v61;
    uint64_t v125 = v74;
    uint64_t v126 = v77;
    uint64_t v83 = v78;
    sub_10051B2E8(v123, v122, v120, v77, v78, v74, v70, v76, v73, v99, v71, v72, v61);
    sub_101048218((uint64_t)v165);
    sub_10089B210((uint64_t)&v133);
    if (v82)
    {
      uint64_t v84 = v80;
      uint64_t v85 = v82;
      uint64_t v123 = v84;
      uint64_t v86 = v79;
      sub_10050BF48(0, (unint64_t *)&qword_10168F9E0);
      int v180 = v81;
      char v181 = BYTE4(v81) & 1;
      uint64_t v182 = v126;
      uint64_t v183 = v83;
      uint64_t v121 = v83;
      uint64_t v87 = v124;
      uint64_t v184 = v125;
      uint64_t v185 = v70;
      uint64_t v186 = v76;
      uint64_t v187 = v192;
      uint64_t v188 = v124;
      uint64_t v189 = v130;
      uint64_t v190 = v129;
      uint64_t v191 = v85;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v88 = sub_1007B0B84((uint64_t)&v180);
      uint64_t v89 = v79;
      uint64_t v90 = v87;
      uint64_t v6 = v127;
      if (v89)
      {
        long long v92 = v88;
        uint64_t v118 = v76;
        unsigned __int8 v116 = (void *)v70;
        uint64_t v93 = v126;
        if (qword_10166FB80 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v94 = (id)static OS_os_log.persistence;
        uint64_t v95 = static os_log_type_t.info.getter();
        sub_100BAC898((uint64_t)v94, (uint64_t)&_mh_execute_header, v95, (uint64_t)"Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)&_swiftEmptyArrayStorage);

        id v128 = [objc_allocWithZone((Class)CRLColorFill) initWithColor:v92];
        sub_10051ABBC(v123, v86, v120, v93, v121, v125, (uint64_t)v116, v118, v192, v124, v130, v129, v85);
      }
      else
      {
        long long v91 = v88;
        uint64_t v122 = v89;
        id v128 = [objc_allocWithZone((Class)CRLColorFill) initWithColor:v88];

        sub_10051ABBC(v123, v122, v81, v126, v121, v125, v70, v76, v192, v90, v130, v129, v85);
      }

      goto LABEL_5;
    }

    uint64_t v6 = v127;
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_101047144(uint64_t a1, char *a2)
{
  uint64_t v73 = a2;
  uint64_t v50 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v50, v4);
  uint64_t v49 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  int64_t v7 = &_swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  v48[1] = v2;
  uint64_t v104 = &_swiftEmptyArrayStorage;
  sub_1006BB5C4(0, v6, 0);
  int64_t v7 = v104;
  for (uint64_t i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    int v9 = *i;
    if (v9 == 255) {
      break;
    }
    if (v9) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = *((void *)i - 1);
    }
LABEL_18:
    uint64_t v104 = v7;
    unint64_t v47 = v7[2];
    unint64_t v46 = v7[3];
    if (v47 >= v46 >> 1)
    {
      sub_1006BB5C4(v46 > 1, v47 + 1, 1);
      int64_t v7 = v104;
    }
    v7[2] = v47 + 1;
    v7[v47 + 4] = v14;
    if (!--v6) {
      return (uint64_t)v7;
    }
  }
  sub_10051B3EC((uint64_t)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v102, &qword_10168D670);
  sub_10051B3EC((uint64_t)v102, (uint64_t)v103, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v103);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v102, (uint64_t)&v76, &qword_10168D670);
    uint64_t v71 = v99;
    uint64_t v72 = v101;
    int v70 = v100;
    uint64_t v67 = v95;
    uint64_t v68 = v97;
    int v64 = v96;
    uint64_t v69 = v93;
    int v65 = v94;
    int v66 = v98;
    long long v62 = v87;
    long long v63 = v86;
    long long v60 = v89;
    long long v61 = v88;
    long long v58 = v91;
    long long v59 = v90;
    long long v56 = v92;
    uint64_t v57 = v84;
    int v55 = v85;
    uint64_t v54 = v82;
    int v52 = v81;
    int v53 = v83;
    char v15 = v80;
    int v16 = v78;
    uint64_t v17 = v7;
    char v18 = v79;
    long long v51 = v76;
    id v19 = v73;
    char v20 = v77;
    uint64_t v21 = v73;
    char v22 = v20;
    long long v23 = v51;
    char v24 = v18;
    int64_t v7 = v17;
    unsigned __int8 v25 = v52;
    unsigned __int8 v26 = v53;
    uint64_t v27 = v54;
    unsigned __int8 v28 = v55;
    uint64_t v29 = v57;
    long long v30 = v56;
    long long v32 = v58;
    long long v31 = v59;
    long long v34 = v60;
    long long v33 = v61;
    long long v36 = v62;
    long long v35 = v63;
    unsigned __int8 v37 = v64;
    int v38 = v65;
    uint64_t v40 = v67;
    uint64_t v39 = v68;
    unsigned __int8 v41 = v66;
    unsigned __int8 v42 = v70;
    uint64_t v44 = v71;
    uint64_t v43 = v72;
    uint64_t v45 = v69;
LABEL_13:
    long long v76 = v23;
    char v77 = v22;
    int v78 = v16;
    char v79 = v24;
    char v80 = v15;
    unsigned __int8 v81 = v25;
    uint64_t v82 = v27;
    unsigned __int8 v83 = v26;
    uint64_t v84 = v29;
    unsigned __int8 v85 = v28;
    long long v86 = v35;
    long long v87 = v36;
    long long v88 = v33;
    long long v89 = v34;
    long long v90 = v31;
    long long v91 = v32;
    long long v92 = v30;
    uint64_t v93 = v45;
    unsigned __int8 v94 = v38;
    uint64_t v95 = v40;
    unsigned __int8 v96 = v37;
    uint64_t v97 = v39;
    unsigned __int8 v98 = v41;
    uint64_t v99 = v44;
    unsigned __int8 v100 = v42;
    uint64_t v101 = v43;
    sub_101048218((uint64_t)v102);
    sub_10089B210((uint64_t)&v76);

    if (v38 == 255)
    {
      uint64_t v14 = 4;
    }
    else if (v38)
    {
      uint64_t v14 = 4;
    }
    else
    {
      uint64_t v14 = v45;
    }
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v11)
  {
    uint64_t v12 = (uint64_t)v49;
    (*(void (**)(void))(*(void *)v11 + 760))();
    uint64_t v13 = v73;
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v74, (uint64_t)v75, &qword_10168D670);
    sub_10104835C(v12, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v75, (uint64_t)&v76, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)&v76) == 1)
    {

      uint64_t v14 = 4;
      goto LABEL_18;
    }
    uint64_t v43 = v101;
    uint64_t v44 = v99;
    unsigned __int8 v42 = v100;
    uint64_t v39 = v97;
    unsigned __int8 v41 = v98;
    uint64_t v40 = v95;
    unsigned __int8 v37 = v96;
    uint64_t v45 = v93;
    int v38 = v94;
    long long v35 = v86;
    long long v36 = v87;
    long long v33 = v88;
    long long v34 = v89;
    long long v31 = v90;
    long long v32 = v91;
    long long v30 = v92;
    uint64_t v29 = v84;
    unsigned __int8 v28 = v85;
    uint64_t v27 = v82;
    unsigned __int8 v26 = v83;
    unsigned __int8 v25 = v81;
    char v15 = v80;
    int v16 = v78;
    char v24 = v79;
    long long v23 = v76;
    id v19 = v73;
    char v22 = v77;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1010475E0(uint64_t a1, char *a2)
{
  uint64_t v51 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v51, v5);
  uint64_t v50 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = &_swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v49[1] = v2;
  uint64_t v104 = &_swiftEmptyArrayStorage;
  sub_1006BB5A4(0, v7, 0);
  int64_t v8 = v104;
  for (uint64_t i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    int v10 = *i;
    if (v10 == 255) {
      break;
    }
    if (v10) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = *((void *)i - 1);
    }
LABEL_18:
    uint64_t v104 = v8;
    unint64_t v48 = v8[2];
    unint64_t v47 = v8[3];
    if (v48 >= v47 >> 1)
    {
      sub_1006BB5A4(v47 > 1, v48 + 1, 1);
      int64_t v8 = v104;
    }
    v8[2] = v48 + 1;
    v8[v48 + 4] = v15;
    if (!--v7) {
      return (uint64_t)v8;
    }
  }
  sub_10051B3EC((uint64_t)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v102, &qword_10168D670);
  sub_10051B3EC((uint64_t)v102, (uint64_t)v103, &qword_10168D670);
  uint64_t result = sub_1005DF0EC((uint64_t)v103);
  if (result != 1)
  {
    sub_10051B3EC((uint64_t)v102, (uint64_t)&v76, &qword_10168D670);
    uint64_t v71 = v99;
    uint64_t v68 = v97;
    int v67 = v98;
    uint64_t v72 = v95;
    uint64_t v73 = v101;
    int v69 = v96;
    int v70 = v100;
    uint64_t v66 = v93;
    int v65 = v94;
    long long v63 = v87;
    long long v64 = v86;
    long long v61 = v89;
    long long v62 = v88;
    long long v59 = v91;
    long long v60 = v90;
    long long v57 = v92;
    uint64_t v58 = v84;
    int v56 = v85;
    uint64_t v55 = v82;
    int v53 = v81;
    int v54 = v83;
    char v16 = v80;
    int v17 = v78;
    char v18 = v8;
    char v19 = v79;
    long long v52 = v76;
    char v20 = v77;
    uint64_t v21 = a2;
    long long v22 = v52;
    char v23 = v19;
    int64_t v8 = v18;
    int v24 = v17;
    char v25 = v16;
    unsigned __int8 v26 = v53;
    unsigned __int8 v27 = v54;
    uint64_t v28 = v55;
    unsigned __int8 v29 = v56;
    uint64_t v30 = v58;
    long long v31 = v57;
    long long v33 = v59;
    long long v32 = v60;
    long long v35 = v61;
    long long v34 = v62;
    long long v37 = v63;
    long long v36 = v64;
    unsigned __int8 v38 = v65;
    uint64_t v39 = v66;
    unsigned __int8 v40 = v67;
    uint64_t v41 = v68;
    int v43 = v69;
    unsigned __int8 v42 = v70;
    uint64_t v44 = v71;
    uint64_t v45 = v72;
    uint64_t v46 = v73;
LABEL_13:
    long long v76 = v22;
    char v77 = v20;
    int v78 = v24;
    char v79 = v23;
    char v80 = v25;
    unsigned __int8 v81 = v26;
    uint64_t v82 = v28;
    unsigned __int8 v83 = v27;
    uint64_t v84 = v30;
    unsigned __int8 v85 = v29;
    long long v86 = v36;
    long long v87 = v37;
    long long v88 = v34;
    long long v89 = v35;
    long long v90 = v32;
    long long v91 = v33;
    long long v92 = v31;
    uint64_t v93 = v39;
    unsigned __int8 v94 = v38;
    uint64_t v95 = v45;
    unsigned __int8 v96 = v43;
    uint64_t v97 = v41;
    unsigned __int8 v98 = v40;
    uint64_t v99 = v44;
    unsigned __int8 v100 = v42;
    uint64_t v101 = v46;
    sub_101048218((uint64_t)v102);
    sub_10089B210((uint64_t)&v76);

    if (v43 == 255)
    {
      uint64_t v15 = -1;
    }
    else if (v43)
    {
      uint64_t v15 = -1;
    }
    else
    {
      uint64_t v15 = v45;
    }
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v12)
  {
    uint64_t v13 = (uint64_t)v50;
    (*(void (**)(void))(*(void *)v12 + 760))();
    uint64_t v14 = a2;
    swift_retain();
    sub_1005057FC(&qword_1016879C0);
    CRRegister.wrappedValue.getter();
    sub_10051B3EC((uint64_t)&v74, (uint64_t)v75, &qword_10168D670);
    sub_10104835C(v13, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release();
    sub_10051B3EC((uint64_t)v75, (uint64_t)&v76, &qword_10168D670);
    if (sub_1005DF0EC((uint64_t)&v76) == 1)
    {

      uint64_t v15 = -1;
      goto LABEL_18;
    }
    uint64_t v46 = v101;
    uint64_t v44 = v99;
    unsigned __int8 v42 = v100;
    uint64_t v41 = v97;
    unsigned __int8 v40 = v98;
    uint64_t v45 = v95;
    int v43 = v96;
    uint64_t v39 = v93;
    unsigned __int8 v38 = v94;
    long long v36 = v86;
    long long v37 = v87;
    long long v34 = v88;
    long long v35 = v89;
    long long v32 = v90;
    long long v33 = v91;
    long long v31 = v92;
    uint64_t v30 = v84;
    unsigned __int8 v29 = v85;
    uint64_t v28 = v82;
    unsigned __int8 v27 = v83;
    unsigned __int8 v26 = v81;
    char v25 = v80;
    int v24 = v78;
    char v23 = v79;
    long long v22 = v76;
    char v20 = v77;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void *sub_101047A78(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1006BB584(0, v2, 0);
    uint64_t result = &_swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned __int8 *)(a1 + 40);
    do
    {
      int v5 = *v4;
      if (v5 == 255)
      {
        char v6 = 0;
      }
      else if (v5)
      {
        char v6 = 3;
      }
      else
      {
        char v6 = *(v4 - 8);
      }
      int v9 = result;
      unint64_t v8 = result[2];
      unint64_t v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_1006BB584(v7 > 1, v8 + 1, 1);
        uint64_t result = v9;
      }
      result[2] = v8 + 1;
      *((unsigned char *)result + v8 + 32) = v6;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_101047B64(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1006BB564(0, v2, 0);
    uint64_t result = &_swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned char *)(a1 + 40);
    do
    {
      if (*v4) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = *((void *)v4 - 1);
      }
      unint64_t v8 = result;
      unint64_t v7 = result[2];
      unint64_t v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_1006BB564(v6 > 1, v7 + 1, 1);
        uint64_t result = v8;
      }
      result[2] = v7 + 1;
      result[v7 + 4] = v5;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_101047C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101047C44()
{
  return swift_release();
}

uint64_t sub_101047C50()
{
  return sub_10098B368();
}

double *sub_101047C78(uint64_t a1, void *a2)
{
  uint64_t v44 = a2;
  uint64_t v4 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v9);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  char v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v17)
  {
    v40[1] = v2;
    uint64_t v51 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v20 = *(void *)(v8 + 72);
    uint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    uint64_t v50 = v20;
    uint64_t v42 = v12;
    int v43 = v11;
    uint64_t v41 = v16;
    do
    {
      sub_100522E9C(v19, (uint64_t)v11, (uint64_t *)&unk_10167BE90);
      if ((*v49)(v11, 1, v12) == 1)
      {
        sub_100522F00((uint64_t)v11, (uint64_t *)&unk_10167BE90);
      }
      else
      {
        sub_1009197F0((uint64_t)v11, (uint64_t)v16);
        uint64_t v21 = (uint64_t *)&v16[*(int *)(v12 + 24)];
        uint64_t v22 = v21[1];
        uint64_t v46 = *v21;
        char v23 = v44;
        uint64_t v24 = sub_1009068B8(v46, v22);
        uint64_t v26 = v25;
        uint64_t v27 = (uint64_t)&v16[*(int *)(v12 + 20)];
        uint64_t v28 = v45;
        sub_100522E9C(v27, v45, &qword_101672E90);
        uint64_t v47 = v26;
        uint64_t v48 = v24;
        id v29 = [v23 stringEquivalentFromRange:v24, v26];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = type metadata accessor for URL();
        uint64_t v31 = *(void *)(v30 - 8);
        int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30);
        swift_bridgeObjectRetain();
        long long v34 = 0;
        if (v32 != 1)
        {
          uint64_t v35 = v45;
          URL._bridgeToObjectiveC()(v33);
          long long v34 = v36;
          (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v30);
        }
        id v37 = objc_allocWithZone((Class)CRLWPHyperlinkField);
        NSString v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v37 initWithURL:v34 range:v48 displayText:v47 uuidString:v38];

        char v16 = v41;
        sub_10104835C((uint64_t)v41, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        uint64_t v12 = v42;
        uint64_t v11 = v43;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v19 += v50;
      --v17;
    }
    while (v17);
    return v51;
  }
  return result;
}

double *sub_1010480A0(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1006BB564(0, v2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      if (*(unsigned char *)v4) {
        double v5 = 0.0;
      }
      else {
        double v5 = *(v4 - 1);
      }
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 2);
      unint64_t v6 = *((void *)result + 3);
      if (v7 >= v6 >> 1)
      {
        sub_1006BB564(v6 > 1, v7 + 1, 1);
        uint64_t result = v8;
      }
      *((void *)result + 2) = v7 + 1;
      result[v7 + 4] = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_101048170()
{
  return sub_1008F1B54();
}

uint64_t sub_101048178(uint64_t a1)
{
  swift_retain();
  sub_100918BCC(a1);

  return swift_release();
}

uint64_t sub_1010481D0()
{
  return 24;
}

uint64_t sub_1010481DC()
{
  return swift_release();
}

uint64_t sub_1010481E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return swift_retain();
}

__n128 sub_101048204(__n128 *a1, uint64_t a2)
{
  *(void *)a2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  return result;
}

uint64_t sub_101048218(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 208);
  sub_100786F64(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240));
  return a1;
}

uint64_t sub_10104829C()
{
  return 32;
}

uint64_t sub_1010482A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return swift_retain();
}

__n128 sub_1010482D0(__n128 *a1, uint64_t a2)
{
  *(void *)a2 = a1[1].n128_u64[1];
  __n128 result = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010482F4()
{
  return 32;
}

uint64_t sub_101048308(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10104835C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010483BC(uint64_t a1)
{
  sub_100522D7C(a1, (uint64_t)v10);
  sub_10050BF48(0, &qword_101673A80);
  if (swift_dynamicCast())
  {
    id v1 = [v9 identifier];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
    if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

void destroy for CRLSyncSaveResult(uint64_t a1)
{
}

uint64_t *initializeWithCopy for CRLSyncSaveResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = (void *)a2[2];
  unint64_t v6 = a2[3];
  char v7 = (void *)a2[4];
  sub_1008D0DA8(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  return a1;
}

uint64_t *assignWithCopy for CRLSyncSaveResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = (void *)a2[2];
  unint64_t v6 = a2[3];
  char v7 = (void *)a2[4];
  sub_1008D0DA8(*a2, v4, v5, v6, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v10 = (void *)a1[2];
  unint64_t v11 = a1[3];
  uint64_t v12 = (void *)a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  sub_1008D0CD8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for CRLSyncSaveResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v5 = (void *)a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = (void *)a1[4];
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  a1[4] = v3;
  sub_1008D0CD8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLSyncSaveResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CRLSyncSaveResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_1010486D0(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 62;
}

uint64_t sub_1010486DC(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1010486EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncSaveResult()
{
  return &type metadata for CRLSyncSaveResult;
}

char *sub_101048710(uint64_t a1, uint64_t a2)
{
  v29[1] = a2;
  uint64_t v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4, v5);
  unint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = sub_1005057FC(&qword_1016A86F8);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v29 - v18;
  uint64_t v20 = v2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_101056EAC(v20, (uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  uint64_t v21 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_101056EAC(v21, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
  CRStruct_6.delta(_:from:)();
  sub_101056F14((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14((uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  sub_101058058((uint64_t)v19, (uint64_t)v15);
  uint64_t v22 = sub_1005057FC(&qword_1016A86C8);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1, v22) == 1)
  {
    sub_1010580C0((uint64_t)v19);
    sub_1010580C0((uint64_t)v15);
    return 0;
  }
  else
  {
    if (qword_10166EE10 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for CRCodableVersion();
    sub_100556B74(v25, (uint64_t)qword_10171A2D8);
    sub_100523288(&qword_1016A86C0, &qword_1016A86C8);
    uint64_t v24 = v15;
    uint64_t v26 = v29[9];
    uint64_t v27 = PartialCRDT.deltaSerializedData(_:version:)();
    if (!v26) {
      uint64_t v24 = (char *)v27;
    }
    sub_1010580C0((uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v22);
  }
  return v24;
}

unint64_t sub_101048A8C()
{
  unint64_t v1 = v0[3];
  unint64_t result = sub_1002094A4();
  if (result >= v1)
  {
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    unint64_t v4 = v0[3];
    *(void *)(inited + 56) = &type metadata for UInt64;
    *(void *)(inited + 64) = &protocol witness table for UInt64;
    *(void *)(inited + 32) = v4;
    if (sub_1002094A4() < v4)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersion", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 68, (uint64_t)"Call to board computedMinRequiredVersion while current minRequiredVersion is higher than current: %{public}d", 108, 2u, inited);
      sub_1005598CC(inited, (uint64_t)"computedMinRequiredVersion", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 68);
    }
    swift_bridgeObjectRelease();
    v0[3] = 0x1000000000000;
    unint64_t v5 = v0[4];
    if (sub_1002094A4() >= v5) {
      v0[4] = sub_1010496F4();
    }
    unint64_t v6 = v0[5];
    unint64_t result = sub_1002094A4();
    if (result >= v6)
    {
      unint64_t result = sub_1010498D8();
      v0[5] = result;
    }
  }
  return result;
}

uint64_t sub_101048BEC(uint64_t a1)
{
  uint64_t v36 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v36, v2);
  unint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = (uint64_t)&qword_1016A86C8;
  uint64_t v10 = sub_1005057FC(&qword_1016A86C8);
  uint64_t v37 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_101058028(a1);
  sub_101058028(a1);
  sub_100523288(&qword_1016A86C0, &qword_1016A86C8);
  uint64_t v14 = v39;
  PartialCRDT.init(serializedData:)();
  if (v14)
  {
    sub_100EBB140(a1);
  }
  else
  {
    uint64_t v15 = a1;
    long long v33 = v8;
    long long v34 = v4;
    uint64_t v39 = v5;
    uint64_t v16 = v38;
    uint64_t v17 = v38 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess();
    sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    LODWORD(inited) = CRStruct_6.merge(delta:)();
    swift_endAccess();
    if (inited)
    {
      *(_OWORD *)(v16 + 24) = *(_OWORD *)v15;
      *(void *)(v16 + 40) = *(void *)(v15 + 16);
      sub_101048A8C();
      sub_100EBB140(v15);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v10);
    }
    else
    {
      LODWORD(v36) = inited;
      uint64_t v31 = v10;
      uint64_t v32 = v15;
      if (qword_10166FBA0 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v18 = (void *)static OS_os_log.realTimeSync;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
      uint64_t v19 = (uint64_t)v34;
      sub_101056EAC(v17, (uint64_t)v34, type metadata accessor for CRLBoardCRDTData);
      id v20 = v18;
      sub_1005057FC(&qword_101674550);
      uint64_t v21 = v33;
      CRRegister.wrappedValue.getter();
      sub_101056F14(v19, type metadata accessor for CRLBoardCRDTData);
      uint64_t v22 = UUID.uuidString.getter();
      uint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v39);
      *(void *)(inited + 56) = &type metadata for String;
      unint64_t v25 = sub_100528BE4();
      *(void *)(inited + 64) = v25;
      *(void *)(inited + 32) = v22;
      *(void *)(inited + 40) = v24;
      uint64_t v40 = v38;
      type metadata accessor for CRLBoardData(0);
      swift_retain();
      uint64_t v26 = String.init<A>(describing:)();
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 104) = v25;
      *(void *)(inited + 72) = v26;
      *(void *)(inited + 80) = v27;
      uint64_t v28 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v20, (uint64_t)&_mh_execute_header, v28, (uint64_t)"Delta failed to apply for %{public}@%{public}@", 46, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v31);
      sub_100EBB140(v32);
      LOBYTE(inited) = v36;
    }
  }
  return inited & 1;
}

uint64_t sub_1010490B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v51 = v3;
  uint64_t v52 = v4;
  uint64_t v57 = v2;
  uint64_t v58 = v5;
  uint64_t v56 = v6;
  uint64_t v8 = v7;
  uint64_t v54 = type metadata accessor for CRLBoardScenesCRDTData(0) - 8;
  __chkstk_darwin(v54, v9);
  int v53 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v50 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)v47 - v18;
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)v47 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)v47 - v25;
  long long v59 = (int *)type metadata accessor for CRLBoardCRDTData(0);
  *(void *)(v8 + v59[10]) = _swiftEmptyDictionarySingleton;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v26, v57, v11);
  v27(v23, (uint64_t)v26, v11);
  uint64_t v49 = v8;
  CRRegister.init(wrappedValue:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v47[1] = v12 + 8;
  uint64_t v55 = v28;
  v28(v26, v11);
  id v29 = v26;
  uint64_t v48 = v26;
  v27(v26, v56, v11);
  uint64_t v30 = v23;
  v27(v23, (uint64_t)v58, v11);
  uint64_t v31 = v8 + v59[5];
  v47[0] = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  *(void *)(v31 + *(int *)(v47[0] + 24)) = _swiftEmptyDictionarySingleton;
  uint64_t v32 = v19;
  v27(v19, (uint64_t)v29, v11);
  long long v33 = v50;
  v27(v50, (uint64_t)v19, v11);
  CRRegister.init(wrappedValue:)();
  long long v34 = v19;
  uint64_t v35 = v55;
  v55(v34, v11);
  v27(v32, (uint64_t)v30, v11);
  v27(v33, (uint64_t)v32, v11);
  CRRegister.init(wrappedValue:)();
  v35(v32, v11);
  v35(v30, v11);
  v35(v48, v11);
  uint64_t v36 = v59;
  uint64_t v37 = v49;
  v68[0] = v51;
  v68[1] = v52;
  CRRegister.init(wrappedValue:)();
  uint64_t v38 = v36;
  uint64_t v39 = v37 + v36[7];
  sub_10089B740(v65);
  sub_10051B3EC((uint64_t)v65, (uint64_t)v61, &qword_101685120);
  sub_101057EB8(v66);
  sub_10051B3EC((uint64_t)v66, (uint64_t)v62, &qword_101672438);
  sub_101057EB8(v67);
  sub_10051B3EC((uint64_t)v67, (uint64_t)v63, &qword_101672420);
  sub_101057EF0(v68);
  sub_10051B3EC((uint64_t)v68, (uint64_t)v64, &qword_101672448);
  sub_101051150((uint64_t)v61, (uint64_t)v61, (uint64_t)v61, (uint64_t)v62, (uint64_t)v63, (uint64_t)v64, v39);
  uint64_t v40 = v37 + v38[8];
  static Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v42 = v41;
  *(void *)(v40 + *(int *)(type metadata accessor for CRLSharedBoardMetadataCRDTData(0) + 28)) = _swiftEmptyDictionarySingleton;
  uint64_t v60 = v42;
  CRMaxRegister.init(wrappedValue:)();
  uint64_t v60 = v42;
  CRRegister.init(wrappedValue:)();
  LOBYTE(v60) = 1;
  CRRegister.init(wrappedValue:)();
  sub_1010539D0((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v43 = (uint64_t)v53;
  CROrderedSet.init()();
  uint64_t v44 = v54;
  CRDictionary.init()();
  sub_10066A668();
  sub_10066A6BC();
  CRDictionary.init()();
  *(void *)(v43 + *(int *)(v44 + 36)) = _swiftEmptyDictionarySingleton;
  uint64_t v45 = (void (*)(uint64_t, uint64_t))v55;
  v55(v58, v11);
  v45(v56, v11);
  v45(v57, v11);
  return sub_101057EF8(v43, v37 + v59[9]);
}

uint64_t sub_1010496F4()
{
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  unint64_t v2 = *(void *)(v0 + 24);
  *(void *)(inited + 56) = &type metadata for UInt64;
  *(void *)(inited + 64) = &protocol witness table for UInt64;
  *(void *)(inited + 32) = v2;
  if (sub_1002094A4() < v2)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 89, (uint64_t)"Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersion is higher than current: %{public}d", 129, 2u, inited);
    sub_1005598CC(inited, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 89);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_10117E810;
  unint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v3 + 56) = &type metadata for UInt64;
  *(void *)(v3 + 64) = &protocol witness table for UInt64;
  *(void *)(v3 + 32) = v4;
  if (sub_1002094A4() < v4)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 90, (uint64_t)"Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 144, 2u, v3);
    sub_1005598CC(v3, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 90);
  }
  swift_bridgeObjectRelease();
  return 0x2000400000000;
}

uint64_t sub_1010498D8()
{
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  unint64_t v2 = v0[3];
  *(void *)(inited + 56) = &type metadata for UInt64;
  *(void *)(inited + 64) = &protocol witness table for UInt64;
  *(void *)(inited + 32) = v2;
  if (sub_1002094A4() < v2)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 106, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersion is higher than current: %{public}d", 123, 2u, inited);
    sub_1005598CC(inited, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 106);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_10117E810;
  unint64_t v4 = v0[5];
  *(void *)(v3 + 56) = &type metadata for UInt64;
  *(void *)(v3 + 64) = &protocol witness table for UInt64;
  *(void *)(v3 + 32) = v4;
  if (sub_1002094A4() < v4)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 107, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 138, 2u, v3);
    sub_1005598CC(v3, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 107);
  }
  swift_bridgeObjectRelease();
  if (v0[5] >= 0x2000400000000uLL) {
    uint64_t v5 = v0[5];
  }
  else {
    uint64_t v5 = 0x2000400000000;
  }
  if (v0[4] == 0x2000400000000) {
    uint64_t v6 = v0[5];
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_10117E810;
  *(void *)(v7 + 56) = &type metadata for UInt64;
  *(void *)(v7 + 64) = &protocol witness table for UInt64;
  *(void *)(v7 + 32) = v6;
  swift_bridgeObjectRelease();
  return v6;
}

void sub_101049AF8(uint64_t a1)
{
  uint64_t v36 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v36, v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v26 - v14;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC8Freeform18CRLUUIDRemapHelper_shouldResetObjectUUIDs) == 1)
  {
    uint64_t v16 = v1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    uint64_t v34 = v16;
    swift_beginAccess();
    uint64_t v33 = a1;
    uint64_t v30 = type metadata accessor for CRLBoardCRDTData;
    sub_101056EAC(v16, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    uint64_t v35 = sub_1005057FC(&qword_101674550);
    CRRegister.wrappedValue.getter();
    sub_101056F14((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    sub_100A68D30((uint64_t)v11, (uint64_t)v15);
    uint64_t v28 = v2;
    uint64_t v17 = v8;
    uint64_t v18 = v8 + 8;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v11, v7);
    uint64_t v29 = v18;
    uint64_t v26 = v19;
    uint64_t v20 = v34;
    swift_beginAccess();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v31 = v17 + 16;
    uint64_t v32 = v21;
    v21(v11, v15, v7);
    CRRegister.wrappedValue.setter();
    v19(v15, v7);
    swift_endAccess();
    uint64_t v22 = v30;
    sub_101056EAC(v20, (uint64_t)v6, v30);
    CRRegister.wrappedValue.getter();
    sub_101056F14((uint64_t)v6, v22);
    sub_100A68D30((uint64_t)v11, (uint64_t)v15);
    uint64_t v27 = v7;
    uint64_t v23 = v26;
    v26(v11, v7);
    swift_beginAccess();
    v32(v11, v15, v7);
    CRRegister.wrappedValue.setter();
    v23(v15, v7);
    swift_endAccess();
    uint64_t v24 = v30;
    sub_101056EAC(v34, (uint64_t)v6, v30);
    type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    CRRegister.wrappedValue.getter();
    sub_101056F14((uint64_t)v6, v24);
    sub_100A68D30((uint64_t)v11, (uint64_t)v15);
    uint64_t v25 = v27;
    v23(v11, v27);
    swift_beginAccess();
    v32(v11, v15, v25);
    CRRegister.wrappedValue.setter();
    v23(v15, v25);
    swift_endAccess();
  }
}

uint64_t sub_101049F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  type metadata accessor for CRLBoardCRDTData(0);
  sub_1005057FC((uint64_t *)&unk_101683E40);
  char v11 = CROrderedSet.contains(_:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    v20[10] = a2;
    v20[11] = a3;
    type metadata accessor for CRLBoardScenesCRDTData(0);
    swift_bridgeObjectRetain();
    sub_1005057FC((uint64_t *)&unk_101699FC0);
    CRDictionary.subscript.setter();
  }
  else
  {
    if (qword_10166FAF8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v12 = (void *)static OS_os_log.crlScenes;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    id v14 = v12;
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v15;
    *(void *)(inited + 40) = v17;
    uint64_t v18 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v14, (uint64_t)&_mh_execute_header, v18, (uint64_t)"Scene rename failed for UUID %{public}", 38, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();
  }
  swift_endAccess();
  return v11 & 1;
}

uint64_t sub_10104A188()
{
  sub_101056F14(v0 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10104A214()
{
  return type metadata accessor for CRLBoardData(0);
}

uint64_t type metadata accessor for CRLBoardData(uint64_t a1)
{
  return sub_100512D5C(a1, qword_1016A8048);
}

uint64_t sub_10104A23C()
{
  uint64_t result = type metadata accessor for CRLBoardCRDTData(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRLBoardCRDTData(uint64_t a1)
{
  return sub_100512D5C(a1, qword_1016A8270);
}

uint64_t *sub_10104A30C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v61 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v61 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1005057FC(&qword_101674550);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    uint64_t v12 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    v8((uint64_t *)&v10[*(int *)(v12 + 20)], (uint64_t *)&v11[*(int *)(v12 + 20)], v7);
    *(void *)&v10[*(int *)(v12 + 24)] = *(void *)&v11[*(int *)(v12 + 24)];
    uint64_t v13 = a3[6];
    id v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1005057FC(&qword_101674450);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_1005057FC(&qword_101672458);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
    v21(&v18[inserted[5]], &v19[inserted[5]], v20);
    v21(&v18[inserted[6]], &v19[inserted[6]], v20);
    uint64_t v23 = inserted[7];
    uint64_t v24 = &v18[v23];
    uint64_t v25 = &v19[v23];
    uint64_t v26 = sub_1005057FC(&qword_101672440);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    uint64_t v27 = inserted[8];
    uint64_t v28 = &v18[v27];
    uint64_t v29 = &v19[v27];
    uint64_t v30 = sub_1005057FC(&qword_101672428);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    uint64_t v31 = inserted[9];
    uint64_t v32 = &v18[v31];
    uint64_t v33 = &v19[v31];
    uint64_t v34 = sub_1005057FC(&qword_101672450);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    *(void *)&v18[inserted[10]] = *(void *)&v19[inserted[10]];
    uint64_t v35 = a3[8];
    uint64_t v36 = (char *)a1 + v35;
    uint64_t v37 = (char *)a2 + v35;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1005057FC(&qword_101691F28);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    uint64_t v39 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
    uint64_t v40 = v39[5];
    uint64_t v41 = &v36[v40];
    uint64_t v42 = &v37[v40];
    uint64_t v43 = sub_1005057FC(&qword_10168B6F0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
    uint64_t v44 = v39[6];
    uint64_t v45 = &v36[v44];
    uint64_t v46 = &v37[v44];
    uint64_t v47 = sub_1005057FC((uint64_t *)&unk_101689310);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
    *(void *)&v36[v39[7]] = *(void *)&v37[v39[7]];
    uint64_t v48 = a3[9];
    uint64_t v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1005057FC((uint64_t *)&unk_101683E40);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
    uint64_t v52 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
    uint64_t v53 = v52[5];
    uint64_t v54 = &v49[v53];
    uint64_t v55 = &v50[v53];
    uint64_t v56 = sub_1005057FC((uint64_t *)&unk_101699FC0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
    uint64_t v57 = v52[6];
    uint64_t v58 = &v49[v57];
    long long v59 = &v50[v57];
    uint64_t v60 = sub_1005057FC(&qword_101699FD0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
    *(void *)&v49[v52[7]] = *(void *)&v50[v52[7]];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for CRLBoardRootContainerAffinityCRDTData(uint64_t a1)
{
  return sub_100512D5C(a1, qword_1016A83C0);
}

uint64_t type metadata accessor for CRLBoardInsertStyleData(uint64_t a1)
{
  return sub_100512D5C(a1, (uint64_t *)&unk_1016A8458);
}

uint64_t type metadata accessor for CRLSharedBoardMetadataCRDTData(uint64_t a1)
{
  return sub_100512D5C(a1, (uint64_t *)&unk_1016A8318);
}

uint64_t sub_10104A890(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101674550);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  v5(v6, v4);
  uint64_t v7 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v5(v6 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = sub_1005057FC(&qword_101674450);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = sub_1005057FC(&qword_101672458);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v12(v10 + inserted[5], v11);
  v12(v10 + inserted[6], v11);
  uint64_t v14 = v10 + inserted[7];
  uint64_t v15 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v10 + inserted[8];
  uint64_t v17 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v10 + inserted[9];
  uint64_t v19 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = a1 + a2[8];
  uint64_t v21 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v23 = v20 + *(int *)(v22 + 20);
  uint64_t v24 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  uint64_t v25 = v20 + *(int *)(v22 + 24);
  uint64_t v26 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = a1 + a2[9];
  uint64_t v28 = sub_1005057FC((uint64_t *)&unk_101683E40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  uint64_t v29 = type metadata accessor for CRLBoardScenesCRDTData(0);
  uint64_t v30 = v27 + *(int *)(v29 + 20);
  uint64_t v31 = sub_1005057FC((uint64_t *)&unk_101699FC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
  uint64_t v32 = v27 + *(int *)(v29 + 24);
  uint64_t v33 = sub_1005057FC(&qword_101699FD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10104ACD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(void *)(v9 + *(int *)(v11 + 24)) = *(void *)(v10 + *(int *)(v11 + 24));
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1005057FC(&qword_101674450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672458);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  uint64_t v22 = inserted[7];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  uint64_t v25 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  uint64_t v26 = inserted[8];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = inserted[9];
  uint64_t v31 = v17 + v30;
  uint64_t v32 = v18 + v30;
  uint64_t v33 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  *(void *)(v17 + inserted[10]) = *(void *)(v18 + inserted[10]);
  uint64_t v34 = a3[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
  uint64_t v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v39 = v38[5];
  uint64_t v40 = v35 + v39;
  uint64_t v41 = v36 + v39;
  uint64_t v42 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
  uint64_t v43 = v38[6];
  uint64_t v44 = v35 + v43;
  uint64_t v45 = v36 + v43;
  uint64_t v46 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
  *(void *)(v35 + v38[7]) = *(void *)(v36 + v38[7]);
  uint64_t v47 = a3[9];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  swift_bridgeObjectRetain();
  uint64_t v50 = sub_1005057FC((uint64_t *)&unk_101683E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  uint64_t v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  uint64_t v52 = v51[5];
  uint64_t v53 = v48 + v52;
  uint64_t v54 = v49 + v52;
  uint64_t v55 = sub_1005057FC((uint64_t *)&unk_101699FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
  uint64_t v56 = v51[6];
  uint64_t v57 = v48 + v56;
  uint64_t v58 = v49 + v56;
  uint64_t v59 = sub_1005057FC(&qword_101699FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
  *(void *)(v48 + v51[7]) = *(void *)(v49 + v51[7]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10104B1AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(void *)(v9 + *(int *)(v11 + 24)) = *(void *)(v10 + *(int *)(v11 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101674450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672458);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  uint64_t v22 = inserted[7];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  uint64_t v25 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = inserted[8];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  uint64_t v30 = inserted[9];
  uint64_t v31 = v17 + v30;
  uint64_t v32 = v18 + v30;
  uint64_t v33 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  *(void *)(v17 + inserted[10]) = *(void *)(v18 + inserted[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  uint64_t v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v39 = v38[5];
  uint64_t v40 = v35 + v39;
  uint64_t v41 = v36 + v39;
  uint64_t v42 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 24))(v40, v41, v42);
  uint64_t v43 = v38[6];
  uint64_t v44 = v35 + v43;
  uint64_t v45 = v36 + v43;
  uint64_t v46 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  *(void *)(v35 + v38[7]) = *(void *)(v36 + v38[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[9];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = sub_1005057FC((uint64_t *)&unk_101683E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 24))(v48, v49, v50);
  uint64_t v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  uint64_t v52 = v51[5];
  uint64_t v53 = v48 + v52;
  uint64_t v54 = v49 + v52;
  uint64_t v55 = sub_1005057FC((uint64_t *)&unk_101699FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 24))(v53, v54, v55);
  uint64_t v56 = v51[6];
  uint64_t v57 = v48 + v56;
  uint64_t v58 = v49 + v56;
  uint64_t v59 = sub_1005057FC(&qword_101699FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 24))(v57, v58, v59);
  *(void *)(v48 + v51[7]) = *(void *)(v49 + v51[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104B6B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(void *)(v9 + *(int *)(v11 + 24)) = *(void *)(v10 + *(int *)(v11 + 24));
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101674450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672458);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  uint64_t v22 = inserted[7];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  uint64_t v25 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  uint64_t v26 = inserted[8];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  uint64_t v30 = inserted[9];
  uint64_t v31 = v17 + v30;
  uint64_t v32 = v18 + v30;
  uint64_t v33 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  *(void *)(v17 + inserted[10]) = *(void *)(v18 + inserted[10]);
  uint64_t v34 = a3[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  uint64_t v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v39 = v38[5];
  uint64_t v40 = v35 + v39;
  uint64_t v41 = v36 + v39;
  uint64_t v42 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
  uint64_t v43 = v38[6];
  uint64_t v44 = v35 + v43;
  uint64_t v45 = v36 + v43;
  uint64_t v46 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
  *(void *)(v35 + v38[7]) = *(void *)(v36 + v38[7]);
  uint64_t v47 = a3[9];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = sub_1005057FC((uint64_t *)&unk_101683E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  uint64_t v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  uint64_t v52 = v51[5];
  uint64_t v53 = v48 + v52;
  uint64_t v54 = v49 + v52;
  uint64_t v55 = sub_1005057FC((uint64_t *)&unk_101699FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
  uint64_t v56 = v51[6];
  uint64_t v57 = v48 + v56;
  uint64_t v58 = v49 + v56;
  uint64_t v59 = sub_1005057FC(&qword_101699FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 32))(v57, v58, v59);
  *(void *)(v48 + v51[7]) = *(void *)(v49 + v51[7]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_10104BB74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(void *)(v9 + *(int *)(v11 + 24)) = *(void *)(v10 + *(int *)(v11 + 24));
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101674450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672458);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  uint64_t v22 = inserted[7];
  uint64_t v23 = v17 + v22;
  uint64_t v24 = v18 + v22;
  uint64_t v25 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  uint64_t v26 = inserted[8];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  uint64_t v30 = inserted[9];
  uint64_t v31 = v17 + v30;
  uint64_t v32 = v18 + v30;
  uint64_t v33 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
  *(void *)(v17 + inserted[10]) = *(void *)(v18 + inserted[10]);
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[8];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  uint64_t v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v39 = v38[5];
  uint64_t v40 = v35 + v39;
  uint64_t v41 = v36 + v39;
  uint64_t v42 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  uint64_t v43 = v38[6];
  uint64_t v44 = v35 + v43;
  uint64_t v45 = v36 + v43;
  uint64_t v46 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 40))(v44, v45, v46);
  *(void *)(v35 + v38[7]) = *(void *)(v36 + v38[7]);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[9];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = sub_1005057FC((uint64_t *)&unk_101683E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 40))(v48, v49, v50);
  uint64_t v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  uint64_t v52 = v51[5];
  uint64_t v53 = v48 + v52;
  uint64_t v54 = v49 + v52;
  uint64_t v55 = sub_1005057FC((uint64_t *)&unk_101699FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 40))(v53, v54, v55);
  uint64_t v56 = v51[6];
  uint64_t v57 = v48 + v56;
  uint64_t v58 = v49 + v56;
  uint64_t v59 = sub_1005057FC(&qword_101699FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 40))(v57, v58, v59);
  *(void *)(v48 + v51[7]) = *(void *)(v49 + v51[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104C058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104C06C);
}

uint64_t sub_10104C06C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_13:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_14;
  }
  uint64_t v14 = sub_1005057FC(&qword_101674450);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_13;
  }
  uint64_t inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  if (*(_DWORD *)(*(void *)(inserted - 8) + 84) == a2)
  {
    uint64_t v8 = inserted;
    uint64_t v12 = *(void *)(inserted - 8);
    uint64_t v13 = a3[7];
    goto LABEL_13;
  }
  uint64_t v16 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_13;
  }
  uint64_t v17 = type metadata accessor for CRLBoardScenesCRDTData(0);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_13;
  }
  unint64_t v19 = *(void *)(a1 + a3[10]);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

uint64_t sub_10104C2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104C2CC);
}

uint64_t sub_10104C2CC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_1005057FC(&qword_101674550);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = sub_1005057FC(&qword_101674450);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t inserted = type metadata accessor for CRLBoardInsertStyleData(0);
        if (*(_DWORD *)(*(void *)(inserted - 8) + 84) == a3)
        {
          uint64_t v10 = inserted;
          uint64_t v14 = *(void *)(inserted - 8);
          uint64_t v15 = a4[7];
        }
        else
        {
          uint64_t v18 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[8];
          }
          else
          {
            uint64_t result = type metadata accessor for CRLBoardScenesCRDTData(0);
            if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
            {
              *(void *)(a1 + a4[10]) = (a2 - 1);
              return result;
            }
            uint64_t v10 = result;
            uint64_t v14 = *(void *)(result - 8);
            uint64_t v15 = a4[9];
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10104C514()
{
  sub_10068E2A0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRLBoardRootContainerAffinityCRDTData(319);
    if (v1 <= 0x3F)
    {
      sub_1005DC400(319, &qword_101679A88);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRLBoardInsertStyleData(319);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRLSharedBoardMetadataCRDTData(319);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRLBoardScenesCRDTData(319);
            if (v5 <= 0x3F) {
              swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

uint64_t *sub_10104C6F0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1005057FC(&qword_101691F28);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1005057FC(&qword_10168B6F0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_1005057FC((uint64_t *)&unk_101689310);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10104C864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10104C96C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10104CA90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104CBC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10104CCE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101691F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1005057FC(&qword_10168B6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_1005057FC((uint64_t *)&unk_101689310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104CE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104CE1C);
}

uint64_t sub_10104CE1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101691F28);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_1005057FC(&qword_10168B6F0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_1005057FC((uint64_t *)&unk_101689310);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_10104CF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104CF9C);
}

uint64_t sub_10104CF9C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_1005057FC(&qword_101691F28);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_1005057FC(&qword_10168B6F0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = sub_1005057FC((uint64_t *)&unk_101689310);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10104D104()
{
  sub_10104D244();
  if (v0 <= 0x3F)
  {
    sub_1005DC400(319, (unint64_t *)&unk_1016A8330);
    if (v1 <= 0x3F)
    {
      sub_1005DC400(319, (unint64_t *)&qword_101675390);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10104D244()
{
  if (!qword_1016A8328)
  {
    unint64_t v0 = type metadata accessor for CRMaxRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1016A8328);
    }
  }
}

uint64_t *sub_10104D2AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1005057FC(&qword_101674550);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10104D3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101674550);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10104D44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10104D4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104D5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10104D658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104D708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104D71C);
}

uint64_t sub_10104D71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101674550);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10104D7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104D7F4);
}

uint64_t sub_10104D7F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1005057FC(&qword_101674550);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void sub_10104D8B4()
{
  sub_10068E2A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_10104D950(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1005057FC(&qword_101672458);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v9 = a3[7];
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1005057FC(&qword_101672440);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_1005057FC(&qword_101672428);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)a1 + v17;
    unint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_1005057FC(&qword_101672450);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10104DB4C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101672458);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[9];
  uint64_t v11 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10104DCD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672458);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10104DE80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672458);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104E038(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672458);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_10104E1E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672458);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1005057FC(&qword_101672440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_1005057FC(&qword_101672428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_1005057FC(&qword_101672450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104E390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104E3A4);
}

uint64_t sub_10104E3A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672458);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_1005057FC(&qword_101672440);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[7];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = sub_1005057FC(&qword_101672428);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_9;
  }
  uint64_t v15 = sub_1005057FC(&qword_101672450);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[10]);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t sub_10104E560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104E574);
}

uint64_t sub_10104E574(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_1005057FC(&qword_101672458);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_1005057FC(&qword_101672440);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[7];
    }
    else
    {
      uint64_t v16 = sub_1005057FC(&qword_101672428);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[8];
      }
      else
      {
        uint64_t result = sub_1005057FC(&qword_101672450);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[10]) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[9];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10104E72C()
{
  sub_10104E92C(319, &qword_1016A8468, &qword_101685120, &qword_1016A8470, (void (*)(void))sub_1009F31DC);
  if (v0 <= 0x3F)
  {
    sub_10104E92C(319, &qword_1016A8478, &qword_101672438, &qword_1016A8480, (void (*)(void))sub_1009F2E04);
    if (v1 <= 0x3F)
    {
      sub_10104E92C(319, &qword_1016A8488, &qword_101672420, &qword_1016A8490, (void (*)(void))sub_1009F2C80);
      if (v2 <= 0x3F)
      {
        sub_10104E92C(319, &qword_1016A8498, &qword_101672448, (unint64_t *)&unk_1016A84A0, (void (*)(void))sub_100FB20C0);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_10104E92C(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    sub_100522D34(a3);
    sub_10104E9B0(a4, a3, a5);
    unint64_t v9 = type metadata accessor for CRRegister();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_10104E9B0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100522D34(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10104EA28(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1005057FC((uint64_t *)&unk_101689310);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10104EB78(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101689310);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  v5(a1 + a2[8], v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10104EC64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10104ED64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104EE70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10104EF6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10104F070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10104F084);
}

uint64_t sub_10104F084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10104F148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10104F15C);
}

uint64_t sub_10104F15C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1005057FC((uint64_t *)&unk_101689310);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CRLUserBoardMetadataCRDTData(uint64_t a1)
{
  return sub_100512D5C(a1, qword_1016A8540);
}

void sub_10104F23C()
{
  sub_1005DC400(319, (unint64_t *)&qword_101675390);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10104F2F4(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8, v9);
  uint64_t v11 = &v16[-v10];
  uint64_t v12 = *a2;
  uint64_t v13 = *a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_101056EAC(v13, (uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  uint64_t v14 = v12 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_101056EAC(v14, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  LOBYTE(v14) = sub_101056788((uint64_t)v11, (uint64_t)v7);
  sub_101056F14((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14((uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  return v14 & 1;
}

uint64_t sub_10104F438()
{
  return 0;
}

uint64_t sub_10104F44C()
{
  uint64_t v1 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_101056EAC(v5, (uint64_t)v4, type metadata accessor for CRLBoardCRDTData);
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  return sub_101056F14((uint64_t)v4, type metadata accessor for CRLBoardCRDTData);
}

void sub_10104F528(uint64_t a1)
{
}

uint64_t sub_10104F540()
{
  *(void *)&xmmword_10171CFB0 = 97;
  *((void *)&xmmword_10171CFB0 + 1) = 0xE100000000000000;
  qword_10171CFC0 = swift_getKeyPath();
  unk_10171CFC8 = 98;
  *(void *)&xmmword_10171CFD0 = 0xE100000000000000;
  *((void *)&xmmword_10171CFD0 + 1) = swift_getKeyPath();
  unk_10171CFE0 = 99;
  qword_10171CFE8 = 0xE100000000000000;
  *(void *)&xmmword_10171CFF0 = swift_getKeyPath();
  *((void *)&xmmword_10171CFF0 + 1) = 100;
  qword_10171D000 = 0xE100000000000000;
  qword_10171D008 = swift_getKeyPath();
  unk_10171D010 = 101;
  qword_10171D018 = 0xE100000000000000;
  qword_10171D020 = swift_getKeyPath();
  unk_10171D028 = 102;
  *(void *)&xmmword_10171D030 = 0xE100000000000000;
  uint64_t result = swift_getKeyPath();
  *((void *)&xmmword_10171D030 + 1) = result;
  return result;
}

uint64_t sub_10104F5F8()
{
  uint64_t v0 = type metadata accessor for UUID();
  __chkstk_darwin(v0 - 8, v1);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v15 - v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - v8;
  UUID.init()();
  UUID.init()();
  UUID.init()();
  id v10 = [self mainBundle];
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v10 localizedStringForKey:v11 value:v12 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_1010490B8((uint64_t)v9, (uint64_t)v5);
}

uint64_t sub_10104F790@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v18 - v13;
  *(void *)(a3 + *(int *)(type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0) + 24)) = _swiftEmptyDictionarySingleton;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15(v14, a1, v6);
  v15(v10, (uint64_t)v14, v6);
  CRRegister.init(wrappedValue:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v14, v6);
  v15(v14, (uint64_t)a2, v6);
  v15(v10, (uint64_t)v14, v6);
  CRRegister.init(wrappedValue:)();
  v16(v14, v6);
  v16(a2, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v19, v6);
}

__n128 sub_10104F994@<Q0>(uint64_t a1@<X8>)
{
  if (qword_1016702C8 != -1) {
    swift_once();
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)&qword_10171D010;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_10171D020;
  long long v20 = xmmword_10171D030;
  long long v16 = xmmword_10171CFD0;
  *(_OWORD *)unint64_t v17 = *(_OWORD *)&qword_10171CFE0;
  *(_OWORD *)&v17[16] = xmmword_10171CFF0;
  long long v18 = *(_OWORD *)&qword_10171D000;
  *(_OWORD *)uint64_t v15 = xmmword_10171CFB0;
  *(_OWORD *)&v15[16] = *(_OWORD *)&qword_10171CFC0;
  uint64_t v2 = xmmword_10171CFB0;
  uint64_t v3 = unk_10171CFC8;
  uint64_t v4 = qword_10171CFE0;
  uint64_t v5 = *((void *)&xmmword_10171CFF0 + 1);
  uint64_t v6 = qword_10171D010;
  uint64_t v7 = unk_10171D028;
  long long v9 = *(_OWORD *)&v15[8];
  long long v10 = xmmword_10171CFD0;
  long long v11 = *(_OWORD *)&v17[8];
  long long v12 = *(_OWORD *)&qword_10171D000;
  long long v13 = *(_OWORD *)&v19[8];
  long long v14 = xmmword_10171D030;
  sub_101057F5C((uint64_t)v15);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v13;
  *(void *)(a1 + 120) = v7;
  __n128 result = (__n128)v14;
  *(_OWORD *)(a1 + 128) = v14;
  return result;
}

uint64_t sub_10104FAC0(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return static CRStruct_6.fieldKeys.getter(a1, v2);
}

uint64_t sub_10104FB2C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10104FB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 40);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_10104FB70())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_10104FB98(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0((unint64_t *)&unk_10169A0E0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRType.context.getter(a1, v2);
}

uint64_t sub_10104FC04()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.actionUndoingDifference(from:)();
}

uint64_t sub_10104FC88()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.apply(_:)();
}

uint64_t sub_10104FD04()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.hasDelta(from:)();
}

uint64_t sub_10104FD80()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.delta(_:from:)();
}

uint64_t sub_10104FE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_10104FE90()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.merge(delta:)();
}

uint64_t sub_10104FF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10104FF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101050014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_1010500A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_101050124()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.needToFinalizeTimestamps()();
}

uint64_t sub_101050190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_10105020C()
{
  sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.merge(_:)();
}

uint64_t sub_101050288()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t sub_101050308()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_101050398()
{
  return CRStruct_6.init(from:)();
}

uint64_t sub_101050418()
{
  return CRStruct_6.encode(to:)();
}

uint64_t sub_101050490(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);

  return CRStruct_6.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_10105050C()
{
  qword_10171D040 = 97;
  *(void *)algn_10171D048 = 0xE100000000000000;
  qword_10171D050 = swift_getKeyPath();
  unk_10171D058 = 98;
  qword_10171D060 = 0xE100000000000000;
  uint64_t result = swift_getKeyPath();
  qword_10171D068 = result;
  return result;
}

uint64_t sub_101050568@<X0>(void *a1@<X8>)
{
  if (qword_1016702D0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_10171D048;
  uint64_t v4 = qword_10171D050;
  uint64_t v3 = unk_10171D058;
  uint64_t v5 = qword_10171D060;
  uint64_t v6 = qword_10171D068;
  *a1 = qword_10171D040;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_101050608(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return static CRStruct_2.fieldKeys.getter(a1, v2);
}

uint64_t sub_101050674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  long long v9 = (char *)&v11 - v8;
  UUID.init()();
  UUID.init()();
  return sub_10104F790((uint64_t)v9, v5, a1);
}

uint64_t sub_101050724(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A8630, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRType.context.getter(a1, v2);
}

uint64_t sub_101050790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_101050814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.apply(_:)(a1, a2, v4);
}

uint64_t sub_101050890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_10105090C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_1010509A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_101050A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.merge(delta:)(a1, a2, v4);
}

uint64_t sub_101050A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101050B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101050BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_101050C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_101050CB0()
{
  sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t sub_101050D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_101050D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.merge(_:)(a1, a2, v4);
}

uint64_t sub_101050E14()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t sub_101050E94()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_101050F24()
{
  return CRStruct_2.init(from:)();
}

uint64_t sub_101050FA4()
{
  return CRStruct_2.encode(to:)();
}

uint64_t sub_10105101C(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86E8, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);

  return CRStruct_2.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_101051098()
{
  *(void *)&xmmword_10171D070 = 97;
  *((void *)&xmmword_10171D070 + 1) = 0xE100000000000000;
  qword_10171D080 = swift_getKeyPath();
  unk_10171D088 = 98;
  *(void *)&xmmword_10171D090 = 0xE100000000000000;
  *((void *)&xmmword_10171D090 + 1) = swift_getKeyPath();
  unk_10171D0A0 = 99;
  qword_10171D0A8 = 0xE100000000000000;
  *(void *)&xmmword_10171D0B0 = swift_getKeyPath();
  *((void *)&xmmword_10171D0B0 + 1) = 100;
  qword_10171D0C0 = 0xE100000000000000;
  qword_10171D0C8 = swift_getKeyPath();
  unk_10171D0D0 = 101;
  qword_10171D0D8 = 0xE100000000000000;
  qword_10171D0E0 = swift_getKeyPath();
  unk_10171D0E8 = 102;
  *(void *)&xmmword_10171D0F0 = 0xE100000000000000;
  uint64_t result = swift_getKeyPath();
  *((void *)&xmmword_10171D0F0 + 1) = result;
  return result;
}

uint64_t sub_101051150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_10089B740(v17);
  sub_10051B3EC((uint64_t)v17, (uint64_t)v20, &qword_101685120);
  sub_1005057FC(&qword_101685120);
  sub_10104E9B0(&qword_1016A8470, &qword_101685120, (void (*)(void))sub_1009F31DC);
  CRRegister.init(wrappedValue:)();
  uint64_t inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  sub_10051B3EC((uint64_t)v17, (uint64_t)v20, &qword_101685120);
  CRRegister.init(wrappedValue:)();
  sub_10051B3EC((uint64_t)v17, (uint64_t)v20, &qword_101685120);
  CRRegister.init(wrappedValue:)();
  sub_101057EB8(v18);
  sub_10051B3EC((uint64_t)v18, (uint64_t)v20, &qword_101672438);
  sub_1005057FC(&qword_101672438);
  sub_10104E9B0(&qword_1016A8480, &qword_101672438, (void (*)(void))sub_1009F2E04);
  CRRegister.init(wrappedValue:)();
  sub_101057EB8(v19);
  sub_10051B3EC((uint64_t)v19, (uint64_t)v20, &qword_101672420);
  sub_1005057FC(&qword_101672420);
  sub_10104E9B0(&qword_1016A8490, &qword_101672420, (void (*)(void))sub_1009F2C80);
  CRRegister.init(wrappedValue:)();
  sub_101057EF0(v20);
  sub_10051B3EC((uint64_t)v20, (uint64_t)v16, &qword_101672448);
  sub_1005057FC(&qword_101672448);
  sub_10104E9B0((unint64_t *)&unk_1016A84A0, &qword_101672448, (void (*)(void))sub_100FB20C0);
  CRRegister.init(wrappedValue:)();
  *(void *)(a7 + *(int *)(inserted + 40)) = _swiftEmptyDictionarySingleton;
  sub_10051B3EC(a1, (uint64_t)v16, &qword_101685120);
  sub_1005057FC(&qword_101672458);
  CRRegister.wrappedValue.setter();
  sub_10051B3EC(a2, (uint64_t)v16, &qword_101685120);
  CRRegister.wrappedValue.setter();
  sub_10051B3EC(a3, (uint64_t)v16, &qword_101685120);
  CRRegister.wrappedValue.setter();
  sub_10051B3EC(a4, (uint64_t)v16, &qword_101672438);
  sub_1005057FC(&qword_101672440);
  CRRegister.wrappedValue.setter();
  sub_10051B3EC(a5, (uint64_t)v16, &qword_101672420);
  sub_1005057FC(&qword_101672428);
  CRRegister.wrappedValue.setter();
  sub_10051B3EC(a6, (uint64_t)v16, &qword_101672448);
  sub_1005057FC(&qword_101672450);
  return CRRegister.wrappedValue.setter();
}

__n128 sub_1010514C0@<Q0>(uint64_t a1@<X8>)
{
  if (qword_1016702D8 != -1) {
    swift_once();
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)&qword_10171D0D0;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_10171D0E0;
  long long v20 = xmmword_10171D0F0;
  long long v16 = xmmword_10171D090;
  *(_OWORD *)unint64_t v17 = *(_OWORD *)&qword_10171D0A0;
  *(_OWORD *)&v17[16] = xmmword_10171D0B0;
  long long v18 = *(_OWORD *)&qword_10171D0C0;
  *(_OWORD *)uint64_t v15 = xmmword_10171D070;
  *(_OWORD *)&v15[16] = *(_OWORD *)&qword_10171D080;
  uint64_t v2 = xmmword_10171D070;
  uint64_t v3 = unk_10171D088;
  uint64_t v4 = qword_10171D0A0;
  uint64_t v5 = *((void *)&xmmword_10171D0B0 + 1);
  uint64_t v6 = qword_10171D0D0;
  uint64_t v7 = unk_10171D0E8;
  long long v9 = *(_OWORD *)&v15[8];
  long long v10 = xmmword_10171D090;
  long long v11 = *(_OWORD *)&v17[8];
  long long v12 = *(_OWORD *)&qword_10171D0C0;
  long long v13 = *(_OWORD *)&v19[8];
  long long v14 = xmmword_10171D0F0;
  sub_101057F5C((uint64_t)v15);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v13;
  *(void *)(a1 + 120) = v7;
  __n128 result = (__n128)v14;
  *(_OWORD *)(a1 + 128) = v14;
  return result;
}

uint64_t sub_1010515EC(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return static CRStruct_6.fieldKeys.getter(a1, v2);
}

uint64_t sub_101051658(uint64_t a1, uint64_t a2)
{
  __chkstk_darwin(a1, a2);
  uint64_t v3 = v2;
  sub_10089B740(v9);
  sub_10051B3EC((uint64_t)v9, (uint64_t)&v5, &qword_101685120);
  sub_101057EB8(v10);
  sub_10051B3EC((uint64_t)v10, (uint64_t)v6, &qword_101672438);
  sub_101057EB8(v11);
  sub_10051B3EC((uint64_t)v11, (uint64_t)v7, &qword_101672420);
  sub_101057EF0(v12);
  sub_10051B3EC((uint64_t)v12, (uint64_t)v8, &qword_101672448);
  return sub_101051150((uint64_t)&v5, (uint64_t)&v5, (uint64_t)&v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, v3);
}

uint64_t sub_101051734(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A85D0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRType.context.getter(a1, v2);
}

uint64_t sub_1010517A0()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.actionUndoingDifference(from:)();
}

uint64_t sub_101051824()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.apply(_:)();
}

uint64_t sub_1010518A0()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.hasDelta(from:)();
}

uint64_t sub_10105191C()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.delta(_:from:)();
}

uint64_t sub_1010519B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_101051A2C()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.merge(delta:)();
}

uint64_t sub_101051AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101051B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101051BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_101051C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_101051CC0()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.needToFinalizeTimestamps()();
}

uint64_t sub_101051D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_101051DA8()
{
  sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.merge(_:)();
}

uint64_t sub_101051E24()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t sub_101051EA4()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_101051F34()
{
  return CRStruct_6.init(from:)();
}

uint64_t sub_101051FB4()
{
  return CRStruct_6.encode(to:)();
}

uint64_t sub_10105202C(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);

  return CRStruct_6.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_1010520A8()
{
  qword_10171D100 = 97;
  *(void *)algn_10171D108 = 0xE100000000000000;
  qword_10171D110 = swift_getKeyPath();
  unk_10171D118 = 98;
  qword_10171D120 = 0xE100000000000000;
  qword_10171D128 = swift_getKeyPath();
  qword_10171D130 = 99;
  qword_10171D138 = 0xE100000000000000;
  uint64_t result = swift_getKeyPath();
  qword_10171D140 = result;
  return result;
}

uint64_t sub_10105211C@<X0>(void *a1@<X8>)
{
  if (qword_1016702E0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_10171D108;
  uint64_t v4 = qword_10171D110;
  uint64_t v3 = unk_10171D118;
  uint64_t v5 = qword_10171D120;
  uint64_t v6 = qword_10171D128;
  uint64_t v7 = qword_10171D130;
  uint64_t v8 = qword_10171D138;
  uint64_t v9 = qword_10171D140;
  *a1 = qword_10171D100;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_1010521E4(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return static CRStruct_3.fieldKeys.getter(a1, v2);
}

uint64_t sub_101052250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + *(int *)(a1 + 28)) = _swiftEmptyDictionarySingleton;
  CRMaxRegister.init(wrappedValue:)();
  CRRegister.init(wrappedValue:)();
  return CRRegister.init(wrappedValue:)();
}

uint64_t sub_101052318(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A8670, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRType.context.getter(a1, v2);
}

uint64_t sub_101052384()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.actionUndoingDifference(from:)();
}

uint64_t sub_101052408()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.apply(_:)();
}

uint64_t sub_101052484()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.hasDelta(from:)();
}

uint64_t sub_101052500()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.delta(_:from:)();
}

uint64_t sub_101052594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_101052610()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.merge(delta:)();
}

uint64_t sub_10105268C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101052710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101052794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_101052828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_1010528A4()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t sub_101052910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_10105298C()
{
  sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.merge(_:)();
}

uint64_t sub_101052A08()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t sub_101052A88()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_101052B18()
{
  return CRStruct_3.init(from:)();
}

uint64_t sub_101052B98()
{
  return CRStruct_3.encode(to:)();
}

uint64_t sub_101052C10(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A86E0, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);

  return CRStruct_3.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_101052C8C()
{
  qword_10171D148 = 97;
  unk_10171D150 = 0xE100000000000000;
  qword_10171D158 = swift_getKeyPath();
  unk_10171D160 = 98;
  qword_10171D168 = 0xE100000000000000;
  qword_10171D170 = swift_getKeyPath();
  qword_10171D178 = 99;
  qword_10171D180 = 0xE100000000000000;
  qword_10171D188 = swift_getKeyPath();
  unk_10171D190 = 100;
  qword_10171D198 = 0xE100000000000000;
  qword_10171D1A0 = swift_getKeyPath();
  qword_10171D1A8 = 101;
  qword_10171D1B0 = 0xE100000000000000;
  uint64_t result = swift_getKeyPath();
  qword_10171D1B8 = result;
  return result;
}

uint64_t sub_101052D2C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + *(int *)(type metadata accessor for CRLUserBoardMetadataCRDTData(0) + 36)) = _swiftEmptyDictionarySingleton;
  CRRegister.init(wrappedValue:)();
  CRRegister.init(wrappedValue:)();
  CRRegister.init(wrappedValue:)();
  CRRegister.init(wrappedValue:)();
  return CRRegister.init(wrappedValue:)();
}

uint64_t sub_101052E38@<X0>(void *a1@<X8>)
{
  if (qword_1016702E8 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_10171D150;
  uint64_t v4 = qword_10171D158;
  uint64_t v3 = unk_10171D160;
  uint64_t v5 = qword_10171D168;
  uint64_t v6 = qword_10171D170;
  uint64_t v7 = qword_10171D178;
  uint64_t v8 = qword_10171D180;
  uint64_t v10 = qword_10171D188;
  uint64_t v9 = unk_10171D190;
  uint64_t v11 = qword_10171D198;
  uint64_t v12 = qword_10171D1A0;
  uint64_t v13 = qword_10171D1A8;
  uint64_t v14 = qword_10171D1B0;
  uint64_t v15 = qword_10171D1B8;
  *a1 = qword_10171D148;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_101052F48(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return static CRStruct_5.fieldKeys.getter(a1, v2);
}

uint64_t sub_101052FB4@<X0>(uint64_t a1@<X8>)
{
  return sub_101052D2C(a1);
}

uint64_t sub_101052FCC(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0(&qword_1016A8598, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRType.context.getter(a1, v2);
}

uint64_t sub_101053038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_1010530BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.apply(_:)(a1, a2, v4);
}

uint64_t sub_101053138()
{
  sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.hasDelta(from:)();
}

uint64_t sub_1010531B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_101053248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_1010532C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.merge(delta:)(a1, a2, v4);
}

uint64_t sub_101053340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_1010533C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_101053448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_1010534DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_101053558()
{
  sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.needToFinalizeTimestamps()();
}

uint64_t sub_1010535C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_101053640()
{
  sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.merge(_:)();
}

uint64_t sub_1010536BC()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t sub_10105373C()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_1010537CC()
{
  return CRStruct_5.init(from:)();
}

uint64_t sub_10105384C()
{
  return CRStruct_5.encode(to:)();
}

uint64_t sub_1010538C4(uint64_t a1)
{
  uint64_t v2 = sub_1010539D0((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);

  return CRStruct_5.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_101053940()
{
  return sub_1010539D0(&qword_1016A8588, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_101053988()
{
  return sub_1010539D0(&qword_1016A8590, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_1010539D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101053A18()
{
  return sub_1010539D0(&qword_1016A8598, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_101053A60()
{
  return sub_100523288(&qword_1016A85A0, &qword_1016A85A8);
}

uint64_t sub_101053A9C()
{
  return sub_1010539D0(&qword_101683BA8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_101053AE4()
{
  return sub_1010539D0(&qword_1016A85B0, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_101053B2C()
{
  return sub_1010539D0(&qword_1016A85B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
}

uint64_t sub_101053B74()
{
  return sub_1010539D0(&qword_1016A85C0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053BBC()
{
  return sub_1010539D0(&qword_1016A85C8, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053C04()
{
  return sub_1010539D0(&qword_1016A85D0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053C4C()
{
  return sub_100523288(&qword_1016A85D8, &qword_1016A85E0);
}

uint64_t sub_101053C88()
{
  return sub_1010539D0(&qword_1016A85E8, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053CD0()
{
  return sub_1010539D0(&qword_1016A85F0, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053D18()
{
  return sub_100523288(&qword_1016A85F8, &qword_101672458);
}

uint64_t sub_101053D54()
{
  return sub_100523288(&qword_1016A8600, &qword_101672440);
}

uint64_t sub_101053D90()
{
  return sub_100523288(&qword_1016A8608, &qword_101672428);
}

uint64_t sub_101053DCC()
{
  return sub_100523288(&qword_1016A8610, &qword_101672450);
}

uint64_t sub_101053E08()
{
  return sub_1010539D0(&qword_1016A8618, (void (*)(uint64_t))type metadata accessor for CRLBoardInsertStyleData);
}

uint64_t sub_101053E50()
{
  return sub_1010539D0(&qword_1016A8620, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_101053E98()
{
  return sub_1010539D0(&qword_1016A8628, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_101053EE0()
{
  return sub_1010539D0(&qword_1016A8630, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_101053F28()
{
  return sub_100523288(&qword_1016A8638, &qword_1016A8640);
}

uint64_t sub_101053F64()
{
  return sub_1010539D0(&qword_1016A8648, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_101053FAC()
{
  return sub_1010539D0(&qword_1016A8650, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_101053FF4()
{
  return sub_1010539D0(&qword_1016A8658, (void (*)(uint64_t))type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t sub_10105403C()
{
  return sub_1010539D0(&qword_1016A8660, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_101054084()
{
  return sub_1010539D0(&qword_1016A8668, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_1010540CC()
{
  return sub_1010539D0(&qword_1016A8670, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_101054114()
{
  return sub_100523288(&qword_1016A8678, &qword_1016A8680);
}

uint64_t sub_101054150()
{
  return sub_1010539D0(&qword_1016A8688, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_101054198()
{
  return sub_1010539D0(&qword_1016A8690, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_1010541E0()
{
  return sub_100523288(&qword_1016A8698, &qword_101691F28);
}

uint64_t sub_10105421C()
{
  return sub_100523288(&qword_1016A86A0, &qword_10168B6F0);
}

uint64_t sub_101054258()
{
  return sub_1010539D0(&qword_1016A86A8, (void (*)(uint64_t))type metadata accessor for CRLSharedBoardMetadataCRDTData);
}

uint64_t sub_1010542A0()
{
  return sub_1010539D0(&qword_1016A86B0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_1010542E8()
{
  return sub_1010539D0(&qword_1016A86B8, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_101054330()
{
  return sub_1010539D0((unint64_t *)&unk_10169A0E0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_101054378()
{
  return sub_100523288(&qword_1016A86C0, &qword_1016A86C8);
}

uint64_t sub_1010543B4()
{
  return sub_1010539D0((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_1010543FC()
{
  return sub_1010539D0(&qword_1016A86D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_101054444()
{
  return sub_100523288(&qword_101679AC8, &qword_101674450);
}

uint64_t sub_101054480()
{
  return sub_1010539D0(&qword_101678980, (void (*)(uint64_t))type metadata accessor for CRLBoardScenesCRDTData);
}

uint64_t sub_1010544C8()
{
  return sub_1010539D0(&qword_1016A86D8, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
}

uint64_t sub_101054510(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  uint64_t v5 = __chkstk_darwin(v27, v4);
  uint64_t v29 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v28 = (uint64_t)&v26 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (char *)&v26 - v16;
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  CRRegister.wrappedValue.getter();
  char v18 = static UUID.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v14, v9);
  v19(v17, v9);
  uint64_t v20 = a1;
  uint64_t v21 = v28;
  sub_101056EAC(v20, v28, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  uint64_t v22 = a2;
  uint64_t v23 = v29;
  sub_101056EAC(v22, v29, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  if (v18)
  {
    CRRegister.wrappedValue.getter();
    CRRegister.wrappedValue.getter();
    char v24 = static UUID.== infix(_:_:)();
    v19(v14, v9);
    v19(v17, v9);
  }
  else
  {
    char v24 = 0;
  }
  sub_101056F14(v23, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  sub_101056F14(v21, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  return v24 & 1;
}

uint64_t sub_1010547AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v27 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v27 - v18;
  sub_1005057FC(&qword_101691F28);
  CRMaxRegister.wrappedValue.getter();
  double v20 = v28;
  CRMaxRegister.wrappedValue.getter();
  double v21 = v28;
  sub_101056EAC(a1, (uint64_t)v19, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_101056EAC(a2, (uint64_t)v16, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  if (v20 != v21)
  {
    sub_101056F14((uint64_t)v16, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_101056F14((uint64_t)v19, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_101056EAC(a1, (uint64_t)v12, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_101056EAC(a2, (uint64_t)v8, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    goto LABEL_5;
  }
  sub_1005057FC(&qword_10168B6F0);
  CRRegister.wrappedValue.getter();
  double v22 = v28;
  CRRegister.wrappedValue.getter();
  double v23 = v28;
  sub_101056F14((uint64_t)v16, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_101056F14((uint64_t)v19, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_101056EAC(a1, (uint64_t)v12, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_101056EAC(a2, (uint64_t)v8, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  if (v22 != v23)
  {
LABEL_5:
    char v25 = 0;
    goto LABEL_6;
  }
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.getter();
  char v24 = LOBYTE(v28);
  CRRegister.wrappedValue.getter();
  char v25 = v24 ^ LOBYTE(v28) ^ 1;
LABEL_6:
  sub_101056F14((uint64_t)v8, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_101056F14((uint64_t)v12, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  return v25 & 1;
}

uint64_t sub_101054A74(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v51, v4);
  uint64_t v55 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v54 = (uint64_t)&v50 - v8;
  __chkstk_darwin(v9, v10);
  uint64_t v52 = (uint64_t)&v50 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v53 = (uint64_t)&v50 - v14;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v50 - v17;
  __chkstk_darwin(v19, v20);
  double v22 = (char *)&v50 - v21;
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v50 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v50 - v29;
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.getter();
  int v31 = v65;
  CRRegister.wrappedValue.getter();
  int v32 = v64;
  sub_101056EAC(a1, (uint64_t)v30, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056EAC(a2, (uint64_t)v26, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v31 != v32)
  {
    sub_101056F14((uint64_t)v26, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_101056F14((uint64_t)v30, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_101056EAC(a1, (uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_101056EAC(a2, (uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
LABEL_4:
    sub_101056F14((uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_101056F14((uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
    uint64_t v35 = v53;
    sub_101056EAC(a1, v53, type metadata accessor for CRLUserBoardMetadataCRDTData);
    uint64_t v36 = v52;
    sub_101056EAC(a2, v52, type metadata accessor for CRLUserBoardMetadataCRDTData);
LABEL_5:
    sub_101056F14(v36, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_101056F14(v35, type metadata accessor for CRLUserBoardMetadataCRDTData);
    uint64_t v37 = a1;
    uint64_t v38 = v54;
    sub_101056EAC(v37, v54, type metadata accessor for CRLUserBoardMetadataCRDTData);
    uint64_t v39 = a2;
    uint64_t v40 = v55;
    sub_101056EAC(v39, v55, type metadata accessor for CRLUserBoardMetadataCRDTData);
    goto LABEL_6;
  }
  CRRegister.wrappedValue.getter();
  int v33 = v57;
  CRRegister.wrappedValue.getter();
  int v34 = v56;
  sub_101056F14((uint64_t)v26, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056F14((uint64_t)v30, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056EAC(a1, (uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056EAC(a2, (uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v33 != v34) {
    goto LABEL_4;
  }
  CRRegister.wrappedValue.getter();
  int v43 = v59;
  CRRegister.wrappedValue.getter();
  int v44 = v58;
  sub_101056F14((uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056F14((uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
  uint64_t v35 = v53;
  sub_101056EAC(a1, v53, type metadata accessor for CRLUserBoardMetadataCRDTData);
  uint64_t v36 = v52;
  sub_101056EAC(a2, v52, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v43 != v44) {
    goto LABEL_5;
  }
  CRRegister.wrappedValue.getter();
  int v45 = v61;
  CRRegister.wrappedValue.getter();
  int v46 = v60;
  sub_101056F14(v36, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056F14(v35, type metadata accessor for CRLUserBoardMetadataCRDTData);
  uint64_t v47 = a1;
  uint64_t v38 = v54;
  sub_101056EAC(v47, v54, type metadata accessor for CRLUserBoardMetadataCRDTData);
  uint64_t v48 = a2;
  uint64_t v40 = v55;
  sub_101056EAC(v48, v55, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v45 == v46)
  {
    CRRegister.wrappedValue.getter();
    char v49 = v63;
    CRRegister.wrappedValue.getter();
    char v41 = v49 ^ v62 ^ 1;
    goto LABEL_7;
  }
LABEL_6:
  char v41 = 0;
LABEL_7:
  sub_101056F14(v40, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_101056F14(v38, type metadata accessor for CRLUserBoardMetadataCRDTData);
  return v41 & 1;
}

uint64_t sub_101054F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  uint64_t v7 = __chkstk_darwin(inserted, v6);
  uint64_t v68 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v71 = (uint64_t)&v66 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v66 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  int v70 = (char *)&v66 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v75 = (uint64_t)&v66 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v74 = (uint64_t)&v66 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v73 = (uint64_t)&v66 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v72 = (uint64_t)&v66 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  int v34 = (char *)&v66 - v33;
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v66 - v36;
  sub_1005057FC(&qword_101672458);
  uint64_t v38 = v5;
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v98, &qword_101685120);
  uint64_t v39 = v4;
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v99, &qword_101685120);
  sub_10051B3EC((uint64_t)v98, (uint64_t)v100, &qword_101685120);
  BOOL v40 = sub_10089B950((uint64_t)v100) == 1;
  int v69 = v15;
  if (v40)
  {
    sub_10051B3EC((uint64_t)v99, (uint64_t)v83, &qword_101685120);
    if (sub_10089B950((uint64_t)v83) != 1)
    {
LABEL_6:
      sub_10051B3EC((uint64_t)v98, (uint64_t)v83, &qword_101685120);
      sub_10051B3EC((uint64_t)v99, (uint64_t)&v83[880], &qword_101685120);
      sub_101056F74((uint64_t)v83);
      uint64_t v41 = v5;
      sub_101056EAC(v5, (uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v39, (uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
LABEL_11:
      sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14((uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v47 = v39;
      uint64_t v49 = v74;
      uint64_t v45 = v75;
      uint64_t v46 = v72;
LABEL_15:
      sub_101056EAC(v41, v46, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v48 = v73;
      sub_101056EAC(v47, v73, type metadata accessor for CRLBoardInsertStyleData);
LABEL_16:
      sub_101056F14(v48, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14(v46, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v52 = (uint64_t)v69;
      uint64_t v51 = (uint64_t)v70;
LABEL_17:
      sub_101056EAC(v41, v49, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v47, v45, type metadata accessor for CRLBoardInsertStyleData);
LABEL_18:
      sub_101056F14(v45, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14(v49, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v53 = v71;
LABEL_19:
      sub_101056EAC(v41, v51, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v47, v52, type metadata accessor for CRLBoardInsertStyleData);
LABEL_20:
      sub_101056F14(v52, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14(v51, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v54 = v68;
LABEL_21:
      sub_101056EAC(v41, v53, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v47, v54, type metadata accessor for CRLBoardInsertStyleData);
LABEL_22:
      sub_101056F14(v54, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14(v53, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_23;
    }
    uint64_t v41 = v5;
    sub_101056EAC(v5, (uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056EAC(v39, (uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
  }
  else
  {
    sub_10051B3EC((uint64_t)v99, (uint64_t)v83, &qword_101685120);
    int v42 = sub_10089B950((uint64_t)v83);
    if (v42 == 1) {
      goto LABEL_6;
    }
    sub_10051B3EC((uint64_t)v98, (uint64_t)v86, &qword_101685120);
    memcpy(v96, v86, sizeof(v96));
    sub_10051B3EC((uint64_t)v99, (uint64_t)v87, &qword_101685120);
    memcpy(v97, v87, sizeof(v97));
    sub_10051B3EC((uint64_t)v98, (uint64_t)v82, &qword_101685120);
    sub_100EC3D4C((uint64_t)v82);
    char v43 = sub_100EC23D0(v96, (uint64_t)v97);
    sub_101057CC4((uint64_t)v99);
    sub_101057CC4((uint64_t)v98);
    sub_101057CC4((uint64_t)v98);
    uint64_t v41 = v38;
    sub_101056EAC(v38, (uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056EAC(v39, (uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
    if ((v43 & 1) == 0) {
      goto LABEL_11;
    }
  }
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v85, &qword_101685120);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v86, &qword_101685120);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v83, &qword_101685120);
  sub_10051B3EC((uint64_t)v86, (uint64_t)&v83[880], &qword_101685120);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v87, &qword_101685120);
  if (sub_10089B950((uint64_t)v87) == 1)
  {
    sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14((uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
    sub_10051B3EC((uint64_t)&v83[880], (uint64_t)v84, &qword_101685120);
    sub_10051B3EC((uint64_t)v84, (uint64_t)v82, &qword_101685120);
    int v44 = sub_10089B950((uint64_t)v82);
    uint64_t v45 = v75;
    if (v44 == 1)
    {
      sub_10051B3EC((uint64_t)v83, (uint64_t)v80, &qword_101685120);
      sub_101057CC4((uint64_t)v80);
      uint64_t v46 = v72;
      sub_101056EAC(v41, v72, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v47 = v39;
      uint64_t v48 = v73;
      sub_101056EAC(v39, v73, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_26;
    }
LABEL_14:
    uint64_t v47 = v39;
    uint64_t v49 = v74;
    uint64_t v46 = v72;
    memcpy(v82, v83, 0x6E0uLL);
    sub_101056F74((uint64_t)v82);
    goto LABEL_15;
  }
  sub_10051B3EC((uint64_t)v86, (uint64_t)v82, &qword_101685120);
  int v50 = sub_10089B950((uint64_t)v82);
  uint64_t v45 = v75;
  if (v50 == 1)
  {
    sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101685120);
    sub_100EC3D4C((uint64_t)v84);
    sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14((uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
    sub_101057CC4((uint64_t)v85);
    goto LABEL_14;
  }
  sub_10051B3EC((uint64_t)v85, (uint64_t)v78, &qword_101685120);
  memcpy(v94, v78, sizeof(v94));
  sub_10051B3EC((uint64_t)v86, (uint64_t)v79, &qword_101685120);
  memcpy(v95, v79, sizeof(v95));
  sub_10051B3EC((uint64_t)v85, (uint64_t)v80, &qword_101685120);
  sub_100EC3D4C((uint64_t)v80);
  char v57 = sub_100EC23D0(v94, (uint64_t)v95);
  sub_101057CC4((uint64_t)v86);
  sub_101057CC4((uint64_t)v85);
  sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056F14((uint64_t)v37, type metadata accessor for CRLBoardInsertStyleData);
  sub_10051B3EC((uint64_t)v83, (uint64_t)v84, &qword_101685120);
  sub_101057CC4((uint64_t)v84);
  uint64_t v46 = v72;
  sub_101056EAC(v41, v72, type metadata accessor for CRLBoardInsertStyleData);
  uint64_t v47 = v39;
  uint64_t v48 = v73;
  sub_101056EAC(v39, v73, type metadata accessor for CRLBoardInsertStyleData);
  uint64_t v49 = v74;
  if ((v57 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_26:
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v85, &qword_101685120);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v86, &qword_101685120);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v83, &qword_101685120);
  sub_10051B3EC((uint64_t)v86, (uint64_t)&v83[880], &qword_101685120);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v87, &qword_101685120);
  if (sub_10089B950((uint64_t)v87) == 1)
  {
    sub_101056F14(v48, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v46, type metadata accessor for CRLBoardInsertStyleData);
    sub_10051B3EC((uint64_t)&v83[880], (uint64_t)v84, &qword_101685120);
    sub_10051B3EC((uint64_t)v84, (uint64_t)v82, &qword_101685120);
    int v58 = sub_10089B950((uint64_t)v82);
    uint64_t v51 = (uint64_t)v70;
    uint64_t v49 = v74;
    uint64_t v45 = v75;
    if (v58 == 1)
    {
      sub_10051B3EC((uint64_t)v83, (uint64_t)v80, &qword_101685120);
      sub_101057CC4((uint64_t)v80);
      sub_101056EAC(v41, v49, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v47, v45, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v52 = (uint64_t)v69;
      goto LABEL_34;
    }
    uint64_t v52 = (uint64_t)v69;
LABEL_32:
    memcpy(v82, v83, 0x6E0uLL);
    sub_101056F74((uint64_t)v82);
    goto LABEL_17;
  }
  sub_10051B3EC((uint64_t)v86, (uint64_t)v82, &qword_101685120);
  int v59 = sub_10089B950((uint64_t)v82);
  uint64_t v49 = v74;
  uint64_t v45 = v75;
  uint64_t v52 = (uint64_t)v69;
  if (v59 == 1)
  {
    sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101685120);
    sub_100EC3D4C((uint64_t)v84);
    sub_101056F14(v73, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v72, type metadata accessor for CRLBoardInsertStyleData);
    sub_101057CC4((uint64_t)v85);
    uint64_t v51 = (uint64_t)v70;
    goto LABEL_32;
  }
  sub_10051B3EC((uint64_t)v85, (uint64_t)v78, &qword_101685120);
  memcpy(v92, v78, sizeof(v92));
  sub_10051B3EC((uint64_t)v86, (uint64_t)v79, &qword_101685120);
  memcpy(v93, v79, sizeof(v93));
  sub_10051B3EC((uint64_t)v85, (uint64_t)v80, &qword_101685120);
  sub_100EC3D4C((uint64_t)v80);
  char v60 = sub_100EC23D0(v92, (uint64_t)v93);
  sub_101057CC4((uint64_t)v86);
  sub_101057CC4((uint64_t)v85);
  sub_101056F14(v73, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056F14(v72, type metadata accessor for CRLBoardInsertStyleData);
  sub_10051B3EC((uint64_t)v83, (uint64_t)v84, &qword_101685120);
  sub_101057CC4((uint64_t)v84);
  sub_101056EAC(v41, v49, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056EAC(v47, v45, type metadata accessor for CRLBoardInsertStyleData);
  uint64_t v51 = (uint64_t)v70;
  if ((v60 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_34:
  sub_1005057FC(&qword_101672440);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v85, &qword_101672438);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v86, &qword_101672438);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v83, &qword_101672438);
  sub_10051B3EC((uint64_t)v86, (uint64_t)&v83[384], &qword_101672438);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v87, &qword_101672438);
  if (sub_100F471D4((uint64_t)v87) == 1)
  {
    sub_101056F14(v45, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v74, type metadata accessor for CRLBoardInsertStyleData);
    sub_10051B3EC((uint64_t)&v83[384], (uint64_t)v84, &qword_101672438);
    sub_10051B3EC((uint64_t)v84, (uint64_t)v82, &qword_101672438);
    if (sub_100F471D4((uint64_t)v82) == 1)
    {
      sub_10051B3EC((uint64_t)v83, (uint64_t)v80, &qword_101672438);
      sub_100F471EC((uint64_t)v80);
      sub_101056EAC(v41, v51, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056EAC(v47, v52, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_44;
    }
LABEL_39:
    uint64_t v53 = v71;
    memcpy(v82, v83, 0x300uLL);
    sub_101057AB8((uint64_t)v82);
    goto LABEL_19;
  }
  sub_10051B3EC((uint64_t)v86, (uint64_t)v82, &qword_101672438);
  if (sub_100F471D4((uint64_t)v82) == 1)
  {
    sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101672438);
    sub_100B421AC((uint64_t)v84);
    sub_101056F14(v75, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v74, type metadata accessor for CRLBoardInsertStyleData);
    sub_100F471EC((uint64_t)v85);
    goto LABEL_39;
  }
  sub_10051B3EC((uint64_t)v85, (uint64_t)v79, &qword_101672438);
  sub_10051B3EC((uint64_t)v86, (uint64_t)v80, &qword_101672438);
  memcpy(v90, v79, sizeof(v90));
  memcpy(v91, v80, sizeof(v91));
  sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101672438);
  sub_100B421AC((uint64_t)v84);
  if (sub_100F3B3C0((uint64_t)v90, (uint64_t)v91)) {
    char v61 = sub_100ED60AC(v79[47], v81);
  }
  else {
    char v61 = 0;
  }
  uint64_t v62 = v74;
  uint64_t v63 = v75;
  sub_100F471EC((uint64_t)v86);
  sub_100F471EC((uint64_t)v85);
  sub_101056F14(v63, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056F14(v62, type metadata accessor for CRLBoardInsertStyleData);
  sub_10051B3EC((uint64_t)v83, (uint64_t)v78, &qword_101672438);
  sub_100F471EC((uint64_t)v78);
  sub_101056EAC(v41, v51, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056EAC(v47, v52, type metadata accessor for CRLBoardInsertStyleData);
  uint64_t v53 = v71;
  if ((v61 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_44:
  sub_1005057FC(&qword_101672428);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v85, &qword_101672420);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v86, &qword_101672420);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v83, &qword_101672420);
  sub_10051B3EC((uint64_t)v86, (uint64_t)&v83[384], &qword_101672420);
  sub_10051B3EC((uint64_t)v85, (uint64_t)v87, &qword_101672420);
  if (sub_100F471D4((uint64_t)v87) == 1)
  {
    sub_101056F14(v52, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v51, type metadata accessor for CRLBoardInsertStyleData);
    sub_10051B3EC((uint64_t)&v83[384], (uint64_t)v84, &qword_101672420);
    sub_10051B3EC((uint64_t)v84, (uint64_t)v82, &qword_101672420);
    if (sub_100F471D4((uint64_t)v82) == 1)
    {
      sub_10051B3EC((uint64_t)v83, (uint64_t)v80, &qword_101672420);
      sub_100F471EC((uint64_t)v80);
      uint64_t v53 = v71;
      sub_101056EAC(v41, v71, type metadata accessor for CRLBoardInsertStyleData);
      uint64_t v54 = v68;
      sub_101056EAC(v47, v68, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_54;
    }
LABEL_49:
    uint64_t v53 = v71;
    uint64_t v54 = v68;
    memcpy(v82, v83, 0x300uLL);
    sub_101057AB8((uint64_t)v82);
    goto LABEL_21;
  }
  sub_10051B3EC((uint64_t)v86, (uint64_t)v82, &qword_101672420);
  if (sub_100F471D4((uint64_t)v82) == 1)
  {
    sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101672420);
    sub_100B421AC((uint64_t)v84);
    sub_101056F14(v52, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v51, type metadata accessor for CRLBoardInsertStyleData);
    sub_100F471EC((uint64_t)v85);
    goto LABEL_49;
  }
  sub_10051B3EC((uint64_t)v85, (uint64_t)v79, &qword_101672420);
  sub_10051B3EC((uint64_t)v86, (uint64_t)v80, &qword_101672420);
  memcpy(v88, v79, sizeof(v88));
  memcpy(v89, v80, sizeof(v89));
  sub_10051B3EC((uint64_t)v85, (uint64_t)v84, &qword_101672420);
  sub_100B421AC((uint64_t)v84);
  char v64 = sub_100F3B3C0((uint64_t)v88, (uint64_t)v89);
  uint64_t v53 = v71;
  if (v64) {
    char v65 = sub_100ED60AC(v79[47], v81);
  }
  else {
    char v65 = 0;
  }
  sub_100F471EC((uint64_t)v86);
  sub_100F471EC((uint64_t)v85);
  sub_101056F14(v52, type metadata accessor for CRLBoardInsertStyleData);
  sub_101056F14(v51, type metadata accessor for CRLBoardInsertStyleData);
  sub_10051B3EC((uint64_t)v83, (uint64_t)v78, &qword_101672420);
  sub_100F471EC((uint64_t)v78);
  sub_101056EAC(v41, v53, type metadata accessor for CRLBoardInsertStyleData);
  uint64_t v54 = v68;
  sub_101056EAC(v47, v68, type metadata accessor for CRLBoardInsertStyleData);
  if ((v65 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_54:
  sub_1005057FC(&qword_101672450);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v84, &qword_101672448);
  CRRegister.wrappedValue.getter();
  sub_10051B3EC((uint64_t)v83, (uint64_t)v85, &qword_101672448);
  sub_10051B3EC((uint64_t)v84, (uint64_t)v83, &qword_101672448);
  sub_10051B3EC((uint64_t)v85, (uint64_t)&v83[888], &qword_101672448);
  sub_10051B3EC((uint64_t)v84, (uint64_t)v86, &qword_101672448);
  if (sub_10089B950((uint64_t)v86) == 1)
  {
    sub_101056F14(v54, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v53, type metadata accessor for CRLBoardInsertStyleData);
    sub_10051B3EC((uint64_t)&v83[888], (uint64_t)v87, &qword_101672448);
    sub_10051B3EC((uint64_t)v87, (uint64_t)v82, &qword_101672448);
    if (sub_10089B950((uint64_t)v82) == 1)
    {
      sub_10051B3EC((uint64_t)v83, (uint64_t)v80, &qword_101672448);
      sub_100F46F18((uint64_t)v80);
      char v55 = 1;
      return v55 & 1;
    }
  }
  else
  {
    sub_10051B3EC((uint64_t)v85, (uint64_t)v80, &qword_101672448);
    if (sub_10089B950((uint64_t)v80) != 1)
    {
      sub_10051B3EC((uint64_t)v84, (uint64_t)v76, &qword_101672448);
      memcpy(v87, v76, sizeof(v87));
      sub_10051B3EC((uint64_t)v85, (uint64_t)v77, &qword_101672448);
      memcpy(v82, v77, 0x378uLL);
      sub_10051B3EC((uint64_t)v84, (uint64_t)v78, &qword_101672448);
      sub_100FB2AF0((uint64_t)v78);
      char v55 = sub_100FB24E4(v87, v82);
      sub_100F46F18((uint64_t)v85);
      sub_100F46F18((uint64_t)v84);
      sub_101056F14(v54, type metadata accessor for CRLBoardInsertStyleData);
      sub_101056F14(v53, type metadata accessor for CRLBoardInsertStyleData);
      sub_10051B3EC((uint64_t)v83, (uint64_t)v79, &qword_101672448);
      sub_100F46F18((uint64_t)v79);
      return v55 & 1;
    }
    sub_10051B3EC((uint64_t)v84, (uint64_t)v82, &qword_101672448);
    sub_100FB2AF0((uint64_t)v82);
    sub_101056F14(v54, type metadata accessor for CRLBoardInsertStyleData);
    sub_101056F14(v53, type metadata accessor for CRLBoardInsertStyleData);
    sub_100F46F18((uint64_t)v84);
  }
  memcpy(v82, v83, sizeof(v82));
  sub_101057520((uint64_t)v82);
LABEL_23:
  char v55 = 0;
  return v55 & 1;
}

uint64_t sub_101056788(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = type metadata accessor for CRLBoardCRDTData(0);
  uint64_t v5 = __chkstk_darwin(v65, v4);
  uint64_t v69 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v68 = (uint64_t)&v64 - v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v66 = (uint64_t)&v64 - v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v67 = (uint64_t)&v64 - v15;
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v72 = (uint64_t)&v64 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v73 = (uint64_t)&v64 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v71 = (uint64_t)&v64 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v70 = (uint64_t)&v64 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v31 = (char *)&v64 - v30;
  __chkstk_darwin(v29, v32);
  int v34 = (char *)&v64 - v33;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v38 = __chkstk_darwin(v35, v37);
  BOOL v40 = (char *)&v64 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v41);
  char v43 = (char *)&v64 - v42;
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  uint64_t v44 = a2;
  CRRegister.wrappedValue.getter();
  LOBYTE(a2) = static UUID.== infix(_:_:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v36 + 8);
  v45(v40, v35);
  v45(v43, v35);
  uint64_t v46 = v44;
  sub_101056EAC(a1, (uint64_t)v34, type metadata accessor for CRLBoardCRDTData);
  sub_101056EAC(v44, (uint64_t)v31, type metadata accessor for CRLBoardCRDTData);
  if ((a2 & 1) == 0)
  {
    sub_101056F14((uint64_t)v31, type metadata accessor for CRLBoardCRDTData);
    sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardCRDTData);
    uint64_t v49 = v70;
    sub_101056EAC(a1, v70, type metadata accessor for CRLBoardCRDTData);
    uint64_t v50 = v71;
    sub_101056EAC(v44, v71, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_7;
  }
  uint64_t v47 = (int *)v65;
  char v48 = sub_101054510((uint64_t)&v34[*(int *)(v65 + 20)], (uint64_t)&v31[*(int *)(v65 + 20)]);
  sub_101056F14((uint64_t)v31, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14((uint64_t)v34, type metadata accessor for CRLBoardCRDTData);
  uint64_t v49 = v70;
  sub_101056EAC(a1, v70, type metadata accessor for CRLBoardCRDTData);
  uint64_t v50 = v71;
  sub_101056EAC(v46, v71, type metadata accessor for CRLBoardCRDTData);
  if ((v48 & 1) == 0)
  {
LABEL_7:
    sub_101056F14(v50, type metadata accessor for CRLBoardCRDTData);
    sub_101056F14(v49, type metadata accessor for CRLBoardCRDTData);
    uint64_t v53 = v73;
    sub_101056EAC(a1, v73, type metadata accessor for CRLBoardCRDTData);
    uint64_t v54 = v72;
    sub_101056EAC(v46, v72, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_8;
  }
  sub_1005057FC(&qword_101674450);
  CRRegister.wrappedValue.getter();
  uint64_t v52 = v74;
  uint64_t v51 = v75;
  CRRegister.wrappedValue.getter();
  uint64_t v53 = v73;
  if (v52 == v74 && v51 == v75)
  {
    swift_bridgeObjectRelease_n();
    sub_101056F14(v50, type metadata accessor for CRLBoardCRDTData);
    sub_101056F14(v49, type metadata accessor for CRLBoardCRDTData);
    sub_101056EAC(a1, v53, type metadata accessor for CRLBoardCRDTData);
    uint64_t v54 = v72;
    sub_101056EAC(v46, v72, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_13;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_101056F14(v50, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14(v49, type metadata accessor for CRLBoardCRDTData);
  sub_101056EAC(a1, v53, type metadata accessor for CRLBoardCRDTData);
  uint64_t v54 = v72;
  sub_101056EAC(v46, v72, type metadata accessor for CRLBoardCRDTData);
  if ((v61 & 1) == 0)
  {
LABEL_8:
    sub_101056F14(v54, type metadata accessor for CRLBoardCRDTData);
    sub_101056F14(v53, type metadata accessor for CRLBoardCRDTData);
    uint64_t v55 = v67;
    sub_101056EAC(a1, v67, type metadata accessor for CRLBoardCRDTData);
    uint64_t v56 = v66;
    sub_101056EAC(v46, v66, type metadata accessor for CRLBoardCRDTData);
LABEL_9:
    sub_101056F14(v56, type metadata accessor for CRLBoardCRDTData);
    sub_101056F14(v55, type metadata accessor for CRLBoardCRDTData);
    uint64_t v57 = v68;
    sub_101056EAC(a1, v68, type metadata accessor for CRLBoardCRDTData);
    uint64_t v58 = v69;
    sub_101056EAC(v46, v69, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_10;
  }
LABEL_13:
  char v62 = sub_101054F80(v53 + v47[7], v54 + v47[7]);
  sub_101056F14(v54, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14(v53, type metadata accessor for CRLBoardCRDTData);
  uint64_t v55 = v67;
  sub_101056EAC(a1, v67, type metadata accessor for CRLBoardCRDTData);
  uint64_t v56 = v66;
  sub_101056EAC(v46, v66, type metadata accessor for CRLBoardCRDTData);
  if ((v62 & 1) == 0) {
    goto LABEL_9;
  }
  char v63 = sub_1010547AC(v55 + v47[8], v56 + v47[8]);
  sub_101056F14(v56, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14(v55, type metadata accessor for CRLBoardCRDTData);
  uint64_t v57 = v68;
  sub_101056EAC(a1, v68, type metadata accessor for CRLBoardCRDTData);
  uint64_t v58 = v69;
  sub_101056EAC(v46, v69, type metadata accessor for CRLBoardCRDTData);
  if (v63)
  {
    char v59 = sub_10066D238(v57 + v47[9], v58 + v47[9]);
    goto LABEL_11;
  }
LABEL_10:
  char v59 = 0;
LABEL_11:
  sub_101056F14(v58, type metadata accessor for CRLBoardCRDTData);
  sub_101056F14(v57, type metadata accessor for CRLBoardCRDTData);
  return v59 & 1;
}

uint64_t sub_101056EAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_101056F14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_101056F74(uint64_t a1)
{
  uint64_t v54 = *(void *)(a1 + 880);
  uint64_t v2 = *(void *)(a1 + 888);
  uint64_t v3 = *(void *)(a1 + 896);
  uint64_t v4 = *(void *)(a1 + 904);
  uint64_t v5 = *(void *)(a1 + 912);
  uint64_t v6 = *(void *)(a1 + 920);
  uint64_t v7 = *(void *)(a1 + 928);
  uint64_t v8 = *(void *)(a1 + 936);
  long long v53 = *(_OWORD *)(a1 + 944);
  long long v52 = *(_OWORD *)(a1 + 960);
  long long v51 = *(_OWORD *)(a1 + 976);
  long long v50 = *(_OWORD *)(a1 + 992);
  long long v49 = *(_OWORD *)(a1 + 1008);
  long long v48 = *(_OWORD *)(a1 + 1024);
  long long v47 = *(_OWORD *)(a1 + 1040);
  long long v46 = *(_OWORD *)(a1 + 1056);
  long long v45 = *(_OWORD *)(a1 + 1072);
  long long v44 = *(_OWORD *)(a1 + 1088);
  long long v43 = *(_OWORD *)(a1 + 1104);
  long long v42 = *(_OWORD *)(a1 + 1120);
  long long v41 = *(_OWORD *)(a1 + 1136);
  long long v40 = *(_OWORD *)(a1 + 1152);
  long long v39 = *(_OWORD *)(a1 + 1168);
  long long v38 = *(_OWORD *)(a1 + 1184);
  long long v37 = *(_OWORD *)(a1 + 1200);
  long long v36 = *(_OWORD *)(a1 + 1216);
  long long v35 = *(_OWORD *)(a1 + 1232);
  long long v34 = *(_OWORD *)(a1 + 1248);
  long long v33 = *(_OWORD *)(a1 + 1264);
  long long v32 = *(_OWORD *)(a1 + 1280);
  long long v31 = *(_OWORD *)(a1 + 1296);
  long long v30 = *(_OWORD *)(a1 + 1312);
  long long v29 = *(_OWORD *)(a1 + 1328);
  long long v28 = *(_OWORD *)(a1 + 1344);
  long long v27 = *(_OWORD *)(a1 + 1360);
  long long v26 = *(_OWORD *)(a1 + 1376);
  long long v25 = *(_OWORD *)(a1 + 480);
  long long v23 = *(_OWORD *)(a1 + 448);
  long long v24 = *(_OWORD *)(a1 + 464);
  long long v21 = *(_OWORD *)(a1 + 416);
  long long v22 = *(_OWORD *)(a1 + 432);
  long long v19 = *(_OWORD *)(a1 + 384);
  long long v20 = *(_OWORD *)(a1 + 400);
  long long v17 = *(_OWORD *)(a1 + 352);
  long long v18 = *(_OWORD *)(a1 + 368);
  long long v16 = *(_OWORD *)(a1 + 336);
  long long v15 = *(_OWORD *)(a1 + 320);
  long long v14 = *(_OWORD *)(a1 + 304);
  long long v13 = *(_OWORD *)(a1 + 288);
  long long v12 = *(_OWORD *)(a1 + 272);
  long long v11 = *(_OWORD *)(a1 + 256);
  long long v10 = *(_OWORD *)(a1 + 240);
  sub_10051B450(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    *(void *)(a1 + 496));
  sub_10051B450(v54, v2, v3, v4, v5, v6, v7, v8, v53, *((uint64_t *)&v53 + 1), v52, *((uint64_t *)&v52 + 1), v51, *((uint64_t *)&v51 + 1), v50, *((uint64_t *)&v50 + 1), v49, *((uint64_t *)&v49 + 1), v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26);
  return a1;
}

uint64_t sub_101057520(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 888);
  uint64_t v3 = *(void *)(a1 + 896);
  uint64_t v4 = *(void *)(a1 + 904);
  uint64_t v5 = *(void *)(a1 + 912);
  uint64_t v6 = *(void *)(a1 + 920);
  uint64_t v7 = *(void *)(a1 + 928);
  uint64_t v8 = *(void *)(a1 + 936);
  uint64_t v9 = *(void *)(a1 + 944);
  long long v53 = *(_OWORD *)(a1 + 968);
  long long v54 = *(_OWORD *)(a1 + 952);
  long long v51 = *(_OWORD *)(a1 + 1000);
  long long v52 = *(_OWORD *)(a1 + 984);
  long long v49 = *(_OWORD *)(a1 + 1032);
  long long v50 = *(_OWORD *)(a1 + 1016);
  long long v48 = *(_OWORD *)(a1 + 1048);
  long long v47 = *(_OWORD *)(a1 + 1064);
  long long v46 = *(_OWORD *)(a1 + 1080);
  long long v45 = *(_OWORD *)(a1 + 1096);
  long long v44 = *(_OWORD *)(a1 + 1112);
  long long v43 = *(_OWORD *)(a1 + 1128);
  long long v42 = *(_OWORD *)(a1 + 1144);
  long long v41 = *(_OWORD *)(a1 + 1160);
  long long v40 = *(_OWORD *)(a1 + 1176);
  long long v39 = *(_OWORD *)(a1 + 1192);
  long long v38 = *(_OWORD *)(a1 + 1208);
  long long v37 = *(_OWORD *)(a1 + 1224);
  long long v36 = *(_OWORD *)(a1 + 1240);
  long long v35 = *(_OWORD *)(a1 + 1256);
  long long v34 = *(_OWORD *)(a1 + 1272);
  long long v33 = *(_OWORD *)(a1 + 1288);
  long long v32 = *(_OWORD *)(a1 + 1304);
  long long v31 = *(_OWORD *)(a1 + 1320);
  long long v30 = *(_OWORD *)(a1 + 1336);
  long long v29 = *(_OWORD *)(a1 + 1352);
  long long v28 = *(_OWORD *)(a1 + 1368);
  long long v27 = *(_OWORD *)(a1 + 1384);
  long long v25 = *(_OWORD *)(a1 + 464);
  long long v26 = *(_OWORD *)(a1 + 480);
  long long v23 = *(_OWORD *)(a1 + 432);
  long long v24 = *(_OWORD *)(a1 + 448);
  long long v21 = *(_OWORD *)(a1 + 400);
  long long v22 = *(_OWORD *)(a1 + 416);
  long long v19 = *(_OWORD *)(a1 + 368);
  long long v20 = *(_OWORD *)(a1 + 384);
  long long v18 = *(_OWORD *)(a1 + 352);
  long long v17 = *(_OWORD *)(a1 + 336);
  long long v16 = *(_OWORD *)(a1 + 320);
  long long v15 = *(_OWORD *)(a1 + 304);
  long long v14 = *(_OWORD *)(a1 + 288);
  long long v13 = *(_OWORD *)(a1 + 272);
  long long v12 = *(_OWORD *)(a1 + 256);
  long long v11 = *(_OWORD *)(a1 + 240);
  sub_10051A794(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    *(void *)(a1 + 496));
  sub_10051A794(v2, v3, v4, v5, v6, v7, v8, v9, v54, *((uint64_t *)&v54 + 1), v53, *((uint64_t *)&v53 + 1), v52, *((uint64_t *)&v52 + 1), v51, *((uint64_t *)&v51 + 1), v50, *((uint64_t *)&v50 + 1), v49,
    *((uint64_t *)&v49 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27);
  return a1;
}

uint64_t sub_101057AB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 392);
  uint64_t v38 = *(void *)(a1 + 384);
  uint64_t v3 = *(void *)(a1 + 400);
  uint64_t v4 = *(void *)(a1 + 408);
  uint64_t v5 = *(void *)(a1 + 416);
  uint64_t v6 = *(void *)(a1 + 424);
  uint64_t v7 = *(void *)(a1 + 432);
  uint64_t v8 = *(void *)(a1 + 440);
  long long v36 = *(_OWORD *)(a1 + 464);
  long long v37 = *(_OWORD *)(a1 + 448);
  long long v34 = *(_OWORD *)(a1 + 496);
  long long v35 = *(_OWORD *)(a1 + 480);
  long long v32 = *(_OWORD *)(a1 + 528);
  long long v33 = *(_OWORD *)(a1 + 512);
  long long v30 = *(_OWORD *)(a1 + 560);
  long long v31 = *(_OWORD *)(a1 + 544);
  long long v28 = *(_OWORD *)(a1 + 592);
  long long v29 = *(_OWORD *)(a1 + 576);
  long long v26 = *(_OWORD *)(a1 + 624);
  long long v27 = *(_OWORD *)(a1 + 608);
  uint64_t v9 = *(void *)(a1 + 752);
  long long v24 = *(_OWORD *)(a1 + 656);
  long long v25 = *(_OWORD *)(a1 + 640);
  long long v22 = *(_OWORD *)(a1 + 688);
  long long v23 = *(_OWORD *)(a1 + 672);
  long long v20 = *(_OWORD *)(a1 + 720);
  long long v21 = *(_OWORD *)(a1 + 704);
  long long v19 = *(_OWORD *)(a1 + 736);
  long long v17 = *(_OWORD *)(a1 + 336);
  long long v18 = *(_OWORD *)(a1 + 352);
  long long v15 = *(_OWORD *)(a1 + 304);
  long long v16 = *(_OWORD *)(a1 + 320);
  long long v13 = *(_OWORD *)(a1 + 272);
  long long v14 = *(_OWORD *)(a1 + 288);
  long long v11 = *(_OWORD *)(a1 + 240);
  long long v12 = *(_OWORD *)(a1 + 256);
  sub_10051A434(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(void *)(a1 + 368));
  sub_10051A434(v38, v2, v3, v4, v5, v6, v7, v8, v37, *((uint64_t *)&v37 + 1), v36, *((uint64_t *)&v36 + 1), v35, *((uint64_t *)&v35 + 1), v34, *((uint64_t *)&v34 + 1), v33, *((uint64_t *)&v33 + 1), v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v9);
  return a1;
}

uint64_t sub_101057CC4(uint64_t a1)
{
  long long v18 = *(_OWORD *)(a1 + 480);
  long long v16 = *(_OWORD *)(a1 + 448);
  long long v17 = *(_OWORD *)(a1 + 464);
  long long v14 = *(_OWORD *)(a1 + 416);
  long long v15 = *(_OWORD *)(a1 + 432);
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 240);
  sub_10051B450(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(void *)(a1 + 496));
  return a1;
}

double sub_101057EB8(_OWORD *a1)
{
  double result = 0.0;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_101057EF0(void *a1)
{
}

uint64_t sub_101057EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardScenesCRDTData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_101057F5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_101058028(uint64_t a1)
{
  return a1;
}

uint64_t sub_101058058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_1016A86F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1010580C0(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_1016A86F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_101058128()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_101058168(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_101058188, v1, 0);
}

uint64_t sub_101058188()
{
  uint64_t v1 = *(void *)(v0[2] + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v1 + 48);
    while (2)
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      unint64_t v7 = (unint64_t)*v4 >> 62;
      v4 += 3;
      uint64_t v8 = 0;
      switch(v7)
      {
        case 1uLL:
          LODWORD(v8) = HIDWORD(v5) - v5;
          if (__OFSUB__(HIDWORD(v5), v5)) {
            goto LABEL_19;
          }
          uint64_t v8 = (int)v8;
LABEL_8:
          BOOL v12 = __OFADD__(v8, 24);
          uint64_t v13 = v8 + 24;
          if (v12) {
            goto LABEL_17;
          }
          BOOL v12 = __OFADD__(v3, v13);
          v3 += v13;
          if (v12) {
            goto LABEL_18;
          }
          if (--v2) {
            continue;
          }
          uint64_t v14 = v3 + 16;
          if (__OFADD__(v3, 16))
          {
            __break(1u);
LABEL_17:
            __break(1u);
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            JUMPOUT(0x10105830CLL);
          }
          return result;
        case 2uLL:
          uint64_t v11 = v5 + 16;
          uint64_t v10 = *(void *)(v5 + 16);
          uint64_t v9 = *(void *)(v11 + 8);
          BOOL v12 = __OFSUB__(v9, v10);
          uint64_t v8 = v9 - v10;
          if (!v12) {
            goto LABEL_8;
          }
          goto LABEL_20;
        case 3uLL:
          goto LABEL_8;
        default:
          uint64_t v8 = BYTE6(v6);
          goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v14 = 16;
  }
  uint64_t v15 = v0[3] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
  BOOL v16 = *(void *)(v15 + *(int *)(type metadata accessor for CRLRealTimeMessengerConfiguration() + 20)) < v14;
  uint64_t v17 = swift_task_alloc();
  v0[4] = v17;
  *(void *)uint64_t v17 = v0;
  *(void *)(v17 + 8) = sub_10105831C;
  uint64_t v19 = v0[2];
  uint64_t v18 = v0[3];
  *(unsigned char *)(v17 + 144) = v16;
  *(void *)(v17 + 24) = v19;
  *(void *)(v17 + 32) = v18;
  return _swift_task_switch(sub_10105CAFC, v18, 0);
}

uint64_t sub_10105831C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_101058410(uint64_t a1, uint64_t a2)
{
  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  return _swift_task_switch(sub_101058434, v2, 0);
}

uint64_t sub_101058434()
{
  uint64_t v1 = (void *)v0[45];
  uint64_t v2 = v1[2];
  if (v2)
  {
    if (qword_10166FBA0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v3 = (void *)static OS_os_log.realTimeSync;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    *(void *)(inited + 56) = &type metadata for UInt64;
    *(void *)(inited + 64) = &protocol witness table for UInt64;
    *(void *)(inited + 32) = v2;
    *(void *)(inited + 96) = &type metadata for UInt64;
    *(void *)(inited + 104) = &protocol witness table for UInt64;
    *(void *)(inited + 72) = 0;
    id v5 = v3;
    uint64_t v6 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v5, (uint64_t)&_mh_execute_header, v6, (uint64_t)"Received an encrypted message with version (%d) that is greater than the last supported version (%d) by this device. Dropping the message", 137, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    unint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v1[3];
    uint64_t v10 = v1[4];
    uint64_t v11 = (void *)swift_task_alloc();
    v0[48] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10105861C;
    return sub_1006F9708(v9, v10);
  }
}

uint64_t sub_10105861C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  id v5 = (void *)*v3;
  v5[49] = a1;
  v5[50] = a2;
  v5[51] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[47];
  if (v2) {
    unint64_t v7 = sub_101058B44;
  }
  else {
    unint64_t v7 = sub_101058754;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_101058754()
{
  uint64_t v1 = *(void *)(v0[47] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  type metadata accessor for CRLRealTimeMessage();
  unint64_t v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[49];
  if (*(unsigned char *)(v1 + 16) != 1)
  {
    sub_10105E770((unint64_t *)&unk_1016A8A60, (void (*)(uint64_t))type metadata accessor for CRLRealTimeMessage);
    swift_retain();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (!v2)
    {
      swift_release();
      uint64_t v6 = v0[43];
      goto LABEL_12;
    }
LABEL_5:
    sub_100510084(v0[49], v0[50]);
    swift_release();
    if (qword_10166FBA0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v7 = (void *)static OS_os_log.realTimeSync;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    swift_getErrorValue();
    uint64_t v9 = v0[34];
    uint64_t v10 = v0[35];
    id v11 = v7;
    uint64_t v12 = Error.publicDescription.getter(v9, v10);
    uint64_t v14 = v13;
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v15 = sub_100528BE4();
    *(void *)(inited + 64) = v15;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v14;
    swift_getErrorValue();
    uint64_t v16 = Error.fullDescription.getter(v0[37]);
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = v15;
    *(void *)(inited + 72) = v16;
    *(void *)(inited + 80) = v17;
    uint64_t v18 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v11, (uint64_t)&_mh_execute_header, v18, (uint64_t)"Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    swift_errorRelease();
    goto LABEL_8;
  }
  swift_retain();
  sub_100510D4C(v4, v3);
  uint64_t v5 = sub_100A160B4(v4, v3);
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v6 = v5;
  swift_release();
LABEL_12:
  v0[52] = v6;
  uint64_t v21 = v0[47] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[53] = Strong;
  if (Strong)
  {
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t ObjectType = swift_getObjectType();
    long long v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 32) + **(int **)(v23 + 32));
    long long v25 = (void *)swift_task_alloc();
    v0[54] = v25;
    void *v25 = v0;
    v25[1] = sub_101058D24;
    uint64_t v26 = v0[46];
    return v29(v6, v26, ObjectType, v23);
  }
  uint64_t v28 = v0[49];
  unint64_t v27 = v0[50];
  swift_release();
  sub_100510084(v28, v27);
LABEL_8:
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_101058B44()
{
  if (qword_10166FBA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (void *)static OS_os_log.realTimeSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  swift_getErrorValue();
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[35];
  id v5 = v1;
  uint64_t v6 = Error.publicDescription.getter(v3, v4);
  uint64_t v8 = v7;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v9 = sub_100528BE4();
  *(void *)(inited + 64) = v9;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  swift_getErrorValue();
  uint64_t v10 = Error.fullDescription.getter(v0[37]);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v9;
  *(void *)(inited + 72) = v10;
  *(void *)(inited + 80) = v11;
  uint64_t v12 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v5, (uint64_t)&_mh_execute_header, v12, (uint64_t)"Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_errorRelease();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_101058D24()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 376);
    uint64_t v4 = sub_101058EBC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 376);
    swift_unknownObjectRelease();
    uint64_t v4 = sub_101058E4C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_101058E4C()
{
  uint64_t v1 = v0[49];
  unint64_t v2 = v0[50];
  swift_release();
  sub_100510084(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_101058EBC()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  swift_release();
  sub_100510084(v2, v1);
  swift_unknownObjectRelease();
  if (qword_10166FBA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = (void *)static OS_os_log.realTimeSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  swift_getErrorValue();
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  id v7 = v3;
  uint64_t v8 = Error.publicDescription.getter(v5, v6);
  uint64_t v10 = v9;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v11 = sub_100528BE4();
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v10;
  swift_getErrorValue();
  uint64_t v12 = Error.fullDescription.getter(v0[37]);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v11;
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 80) = v13;
  uint64_t v14 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v7, (uint64_t)&_mh_execute_header, v14, (uint64_t)"Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_errorRelease();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1010590BC(uint64_t a1, uint64_t a2)
{
  v3[70] = v2;
  v3[69] = a2;
  v3[68] = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  v3[71] = v4;
  v3[72] = *(void *)(v4 - 8);
  v3[73] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  v3[74] = v5;
  v3[75] = *(void *)(v5 - 8);
  v3[76] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  v3[77] = v6;
  v3[78] = *(void *)(v6 - 8);
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchTime();
  v3[81] = v7;
  v3[82] = *(void *)(v7 - 8);
  v3[83] = swift_task_alloc();
  v3[84] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v3[85] = v8;
  v3[86] = *(void *)(v8 - 8);
  v3[87] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GroupSessionMessenger.DeliveryMode();
  v3[88] = v9;
  v3[89] = *(void *)(v9 - 8);
  v3[90] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v3[91] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[92] = v11;
  v3[93] = *(void *)(v11 + 64);
  v3[94] = swift_task_alloc();
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  return _swift_task_switch(sub_1010593F0, v2, 0);
}

uint64_t sub_1010593F0()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = v0[92];
  uint64_t v3 = v0[91];
  uint64_t v4 = v0[70];
  uint64_t v5 = v0[68];
  uint64_t v6 = OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  v0[97] = OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v7(v1, v5 + v6, v3);
  uint64_t v8 = (uint64_t *)(v4 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(*v8 + 16))
  {
    uint64_t v10 = v0[96];
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_100955FC8(v10);
    if (v12)
    {
      uint64_t v13 = v0[96];
      uint64_t v14 = v0[92];
      uint64_t v15 = v0[91];
      uint64_t v16 = v0[68];
      uint64_t v17 = *(void *)(*(void *)(v9 + 56) + 8 * v11);
      v0[98] = v17;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      uint64_t v18 = *(void *)(v17 + 24);
      uint64_t ObjectType = swift_getObjectType();
      long long v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
      swift_retain();
      swift_unknownObjectRetain();
      v20(v16, ObjectType, v18);
      swift_unknownObjectRelease();
      uint64_t v53 = *(void *)(v17 + 24);
      uint64_t v54 = swift_getObjectType();
      uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 16);
      swift_unknownObjectRetain();
      char v56 = v55(v54, v53);
      swift_unknownObjectRelease();
      if (v56)
      {
        uint64_t v57 = *(void *)(v17 + 16);
        v0[99] = v57;
        uint64_t v58 = *(void *)(v17 + 24);
        swift_unknownObjectRetain();
        char v59 = (void *)swift_task_alloc();
        v0[100] = v59;
        *char v59 = v0;
        v59[1] = sub_10105A3E4;
        uint64_t v36 = v0[69];
        uint64_t v37 = v57;
        uint64_t v38 = v58;
        goto LABEL_15;
      }
      swift_release_n();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = v0[90];
  uint64_t v22 = v0[89];
  uint64_t v23 = v0[88];
  uint64_t v24 = v0[70];
  unsigned __int8 v83 = *(void (**)(uint64_t, uint64_t))(v0[92] + 8);
  v83(v0[96], v0[91]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v24 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration, v23);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v25 == enum case for GroupSessionMessenger.DeliveryMode.reliable(_:))
  {
    type metadata accessor for CRLContiguousChunkedRealTimeMessageBuffer();
    swift_allocObject();
    uint64_t v26 = swift_retain();
    uint64_t v29 = sub_10080A550(v26);
    uint64_t v30 = &off_101515E90;
  }
  else
  {
    if (v25 != enum case for GroupSessionMessenger.DeliveryMode.unreliable(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    type metadata accessor for CRLUnorderedChunkedRealTimeMessageBuffer();
    swift_allocObject();
    uint64_t v27 = swift_retain();
    uint64_t v29 = sub_100BDE4B4(v27);
    swift_release();
    uint64_t v30 = &off_101527D38;
  }
  uint64_t v84 = v30;
  v0[102] = v29;
  uint64_t v31 = swift_getObjectType();
  long long v32 = (uint64_t (*)(uint64_t, _UNKNOWN **))v84[2];
  swift_unknownObjectRetain();
  uint64_t v33 = v29;
  char v34 = v32(v31, v84);
  swift_unknownObjectRelease();
  if (v34)
  {
    long long v35 = (void *)swift_task_alloc();
    v0[103] = v35;
    *long long v35 = v0;
    v35[1] = sub_10105A634;
    uint64_t v36 = v0[69];
    uint64_t v37 = v33;
    uint64_t v38 = (uint64_t)v84;
LABEL_15:
    return sub_10105B818(v37, v38, v36);
  }
  uint64_t v80 = v0[95];
  uint64_t v70 = v0[94];
  uint64_t v71 = v0[92];
  uint64_t v81 = v0[91];
  uint64_t v39 = v0[87];
  uint64_t v40 = v0[86];
  uint64_t v69 = v7;
  uint64_t v41 = v0[85];
  uint64_t v61 = v0[83];
  uint64_t v62 = v0[84];
  uint64_t v63 = v0[82];
  uint64_t v67 = v33;
  uint64_t v77 = v0[81];
  uint64_t v65 = (void *)v0[80];
  uint64_t v66 = (void *)v0[79];
  uint64_t v42 = v0[78];
  uint64_t v64 = v0[77];
  uint64_t v75 = v0[75];
  uint64_t v76 = v0[74];
  uint64_t v72 = v0[73];
  uint64_t v73 = v0[72];
  uint64_t v74 = v0[71];
  uint64_t v68 = v0[76];
  sub_10105E5B0();
  v0[66] = _swiftEmptyArrayStorage;
  sub_10105E770(&qword_1016A8A78, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1005057FC(&qword_1016A8A80);
  sub_100636834(&qword_1016A8A88, &qword_1016A8A80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v79 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  swift_getObjectType();
  static DispatchTime.now()();
  type metadata accessor for CRLRealTimeMessengerConfiguration();
  DispatchTime.advanced(by:)();
  uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v82(v61, v77);
  (*(void (**)(void *, void, uint64_t))(v42 + 104))(v65, enum case for DispatchTimeInterval.never(_:), v64);
  void *v66 = 0;
  uint64_t v43 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v44 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v66, v43, v44);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  long long v45 = *(void (**)(void *, uint64_t))(v42 + 8);
  v45(v66, v64);
  v45(v65, v64);
  v82(v62, v77);
  long long v46 = (void (*)(uint64_t, _UNKNOWN **))v84[1];
  int v78 = v46;
  swift_unknownObjectRetain();
  v46(v31, v84);
  swift_unknownObjectRelease();
  static DispatchQoS.userInitiated.getter();
  uint64_t v47 = swift_allocObject();
  swift_weakInit();
  v69(v70, v80, v81);
  unint64_t v48 = (*(unsigned __int8 *)(v71 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v47;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v71 + 32))(v49 + v48, v70, v81);
  v0[43] = sub_10105E6F4;
  v0[44] = v49;
  v0[39] = _NSConcreteStackBlock;
  v0[40] = *(void *)"";
  v0[41] = sub_100679958;
  v0[42] = &unk_1015381F8;
  long long v50 = _Block_copy(v0 + 39);
  swift_retain();
  sub_10105B750();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v50);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v68, v76);
  swift_release();
  swift_release();
  type metadata accessor for CRLChunkedMessageBufferWrapper();
  long long v51 = (void *)swift_allocObject();
  v51[2] = v67;
  v51[3] = v84;
  v51[4] = v79;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  v78(v31, v84);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v85 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  sub_1009740F4((uint64_t)v51, v70, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v85;
  swift_bridgeObjectRelease();
  v83(v70, v81);
  swift_endAccess();
  OS_dispatch_source.resume()();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  v83(v80, v81);
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v60 = (uint64_t (*)(void))v0[1];
  return v60();
}

uint64_t sub_10105A3E4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 560);
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v4 = sub_10105A864;
  }
  else {
    uint64_t v4 = sub_10105A52C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105A52C()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105A634()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 832) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 560);
  if (v0) {
    uint64_t v4 = sub_10105AE7C;
  }
  else {
    uint64_t v4 = sub_10105A760;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105A760()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105A864()
{
  swift_release_n();
  *(void *)(v0 + 536) = *(void *)(v0 + 808);
  swift_errorRetain();
  sub_1005057FC(&qword_101672BD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    switch(*(unsigned char *)(v0 + 840))
    {
      case 1:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v10 = (id)static OS_os_log.realTimeSync;
        uint64_t v11 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)"Attempting to append a real-time message chunk to an already complete buffer. This is a logic error", 99, 2, (uint64_t)_swiftEmptyArrayStorage);

        break;
      case 2:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        uint64_t v12 = *(void *)(v0 + 544);
        swift_beginAccess();
        uint64_t v13 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
        id v3 = v13;
        uint64_t v15 = UUID.uuidString.getter();
        uint64_t v17 = v16;
        *(void *)(inited + 56) = &type metadata for String;
        *(void *)(inited + 64) = sub_100528BE4();
        *(void *)(inited + 32) = v15;
        *(void *)(inited + 40) = v17;
        __int16 v18 = *(_WORD *)(v12 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
        *(void *)(inited + 96) = &type metadata for UInt16;
        *(void *)(inited + 104) = &protocol witness table for UInt16;
        *(_WORD *)(inited + 72) = v18;
        uint64_t v19 = static os_log_type_t.error.getter();
        long long v20 = "Cannot append a real-time message chunk with invalid encryption state to the buffer. Chunk chainID %@, chunk index %d";
        uint64_t v21 = (uint64_t)v3;
        uint64_t v22 = 117;
        goto LABEL_18;
      case 3:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        uint64_t v23 = *(void *)(v0 + 544);
        swift_beginAccess();
        uint64_t v24 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
        id v3 = v24;
        uint64_t v25 = UUID.uuidString.getter();
        uint64_t v27 = v26;
        *(void *)(inited + 56) = &type metadata for String;
        *(void *)(inited + 64) = sub_100528BE4();
        *(void *)(inited + 32) = v25;
        *(void *)(inited + 40) = v27;
        __int16 v28 = *(_WORD *)(v23 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
        *(void *)(inited + 96) = &type metadata for UInt16;
        *(void *)(inited + 104) = &protocol witness table for UInt16;
        *(_WORD *)(inited + 72) = v28;
        uint64_t v19 = static os_log_type_t.default.getter();
        long long v20 = "Cannot append an out of order real-time message chunk to the buffer. This message will be dropped. Chunk c"
              "hainID %@, chunk index %d";
        uint64_t v21 = (uint64_t)v3;
        uint64_t v22 = 131;
LABEL_18:
        sub_100BAC898(v21, (uint64_t)&_mh_execute_header, v19, (uint64_t)v20, v22, 2, inited);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        goto LABEL_19;
      default:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v1 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v2 = swift_initStackObject();
        *(_OWORD *)(v2 + 16) = xmmword_10117E810;
        id v3 = v1;
        uint64_t v4 = UUID.uuidString.getter();
        uint64_t v6 = v5;
        *(void *)(v2 + 56) = &type metadata for String;
        *(void *)(v2 + 64) = sub_100528BE4();
        *(void *)(v2 + 32) = v4;
        *(void *)(v2 + 40) = v6;
        uint64_t v7 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v3, (uint64_t)&_mh_execute_header, v7, (uint64_t)"Encountered a logic error. Trying to append a chunked message to buffer with a different identifier. Chunk chainID %@", 117, 2, v2);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
LABEL_19:
        swift_arrayDestroy();

        break;
    }
  }
  else
  {
    swift_errorRelease();
    if (qword_10166FBA0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v8 = (id)static OS_os_log.realTimeSync;
    uint64_t v9 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v8, (uint64_t)&_mh_execute_header, v9, (uint64_t)"Encountered an error while handling a real-time chunked message", 63, 2, (uint64_t)_swiftEmptyArrayStorage);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_10105AE7C()
{
  swift_unknownObjectRelease();
  *(void *)(v0 + 536) = *(void *)(v0 + 832);
  swift_errorRetain();
  sub_1005057FC(&qword_101672BD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    switch(*(unsigned char *)(v0 + 840))
    {
      case 1:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v10 = (id)static OS_os_log.realTimeSync;
        uint64_t v11 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)"Attempting to append a real-time message chunk to an already complete buffer. This is a logic error", 99, 2, (uint64_t)_swiftEmptyArrayStorage);

        break;
      case 2:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        uint64_t v12 = *(void *)(v0 + 544);
        swift_beginAccess();
        uint64_t v13 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
        id v3 = v13;
        uint64_t v15 = UUID.uuidString.getter();
        uint64_t v17 = v16;
        *(void *)(inited + 56) = &type metadata for String;
        *(void *)(inited + 64) = sub_100528BE4();
        *(void *)(inited + 32) = v15;
        *(void *)(inited + 40) = v17;
        __int16 v18 = *(_WORD *)(v12 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
        *(void *)(inited + 96) = &type metadata for UInt16;
        *(void *)(inited + 104) = &protocol witness table for UInt16;
        *(_WORD *)(inited + 72) = v18;
        uint64_t v19 = static os_log_type_t.error.getter();
        long long v20 = "Cannot append a real-time message chunk with invalid encryption state to the buffer. Chunk chainID %@, chunk index %d";
        uint64_t v21 = (uint64_t)v3;
        uint64_t v22 = 117;
        goto LABEL_18;
      case 3:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        uint64_t v23 = *(void *)(v0 + 544);
        swift_beginAccess();
        uint64_t v24 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
        id v3 = v24;
        uint64_t v25 = UUID.uuidString.getter();
        uint64_t v27 = v26;
        *(void *)(inited + 56) = &type metadata for String;
        *(void *)(inited + 64) = sub_100528BE4();
        *(void *)(inited + 32) = v25;
        *(void *)(inited + 40) = v27;
        __int16 v28 = *(_WORD *)(v23 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
        *(void *)(inited + 96) = &type metadata for UInt16;
        *(void *)(inited + 104) = &protocol witness table for UInt16;
        *(_WORD *)(inited + 72) = v28;
        uint64_t v19 = static os_log_type_t.default.getter();
        long long v20 = "Cannot append an out of order real-time message chunk to the buffer. This message will be dropped. Chunk c"
              "hainID %@, chunk index %d";
        uint64_t v21 = (uint64_t)v3;
        uint64_t v22 = 131;
LABEL_18:
        sub_100BAC898(v21, (uint64_t)&_mh_execute_header, v19, (uint64_t)v20, v22, 2, inited);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        goto LABEL_19;
      default:
        if (qword_10166FBA0 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v1 = (void *)static OS_os_log.realTimeSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v2 = swift_initStackObject();
        *(_OWORD *)(v2 + 16) = xmmword_10117E810;
        id v3 = v1;
        uint64_t v4 = UUID.uuidString.getter();
        uint64_t v6 = v5;
        *(void *)(v2 + 56) = &type metadata for String;
        *(void *)(v2 + 64) = sub_100528BE4();
        *(void *)(v2 + 32) = v4;
        *(void *)(v2 + 40) = v6;
        uint64_t v7 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v3, (uint64_t)&_mh_execute_header, v7, (uint64_t)"Encountered a logic error. Trying to append a chunked message to buffer with a different identifier. Chunk chainID %@", 117, 2, v2);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
LABEL_19:
        swift_arrayDestroy();

        break;
    }
  }
  else
  {
    swift_errorRelease();
    if (qword_10166FBA0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v8 = (id)static OS_os_log.realTimeSync;
    uint64_t v9 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v8, (uint64_t)&_mh_execute_header, v9, (uint64_t)"Encountered an error while handling a real-time chunked message", 63, 2, (uint64_t)_swiftEmptyArrayStorage);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_10105B490(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  uint64_t v7 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v7 - 8, v8);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
    unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v15 = (char *)swift_allocObject();
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 4) = v12;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v15[v14], (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    sub_1005912D0((uint64_t)v10, (uint64_t)&unk_1016A8A98, (uint64_t)v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_10105B688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return _swift_task_switch(sub_10105B6A8, a4, 0);
}

uint64_t sub_10105B6A8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess();
  sub_10095BB90(v1);
  swift_endAccess();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10105B750()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10105B818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_10105B8EC, v3, 0);
}

uint64_t sub_10105B8EC()
{
  uint64_t v1 = v0[11];
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1) & 1) == 0)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_processCompletedBuffer(_:sender:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLRealTimeMessengerImplementation.swift", 108, 2, 292, (uint64_t)"Received an incomplete buffer", 29, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_processCompletedBuffer(_:sender:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLRealTimeMessengerImplementation.swift", 108, 2, 292);
  }
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(ObjectType, v4);
  unint64_t v7 = v6;
  v0[18] = v5;
  v0[19] = v6;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v36(ObjectType, v4);
  uint64_t v8 = v3 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers;
  swift_beginAccess();
  uint64_t v9 = v0[17];
  uint64_t v35 = v5;
  uint64_t v39 = ObjectType;
  if (*(void *)(*(void *)v8 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100955FC8(v9);
    uint64_t v10 = v0[17];
    uint64_t v12 = v0[14];
    uint64_t v11 = v0[15];
    if (v13)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      char v34 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v34(v10, v12);
      swift_unknownObjectRetain();
      swift_release();
      swift_getObjectType();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      char v34 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v34(v10, v12);
    }
  }
  else
  {
    char v34 = *(void (**)(uint64_t, uint64_t))(v0[15] + 8);
    v34(v9, v0[14]);
  }
  unint64_t v14 = v36;
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[14];
  uint64_t v37 = v0[13];
  uint64_t v17 = v0[11];
  v14(v39, v17);
  swift_beginAccess();
  sub_10095BB90(v15);
  v34(v15, v16);
  swift_endAccess();
  swift_release();
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v39, v17);
  uint64_t v19 = *(void *)(v37 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  if (v18)
  {
    type metadata accessor for CRLEncryptedRealTimeMessage();
    if (*(unsigned char *)(v19 + 16) == 1)
    {
      swift_retain();
      sub_100510D4C(v35, v7);
      long long v20 = sub_101021B48(v35, v7);
      swift_release();
    }
    else
    {
      sub_10105E770(&qword_1016815C8, (void (*)(uint64_t))type metadata accessor for CRLEncryptedRealTimeMessage);
      swift_retain();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      long long v20 = (void *)v0[9];
    }
    v0[20] = v20;
    uint64_t v24 = (void *)swift_task_alloc();
    v0[21] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10105BFE0;
    uint64_t v25 = v0[13];
    v24[46] = v0[12];
    v24[47] = v25;
    v24[45] = v20;
    return _swift_task_switch(sub_101058434, v25, 0);
  }
  else
  {
    type metadata accessor for CRLRealTimeMessage();
    if (*(unsigned char *)(v19 + 16) == 1)
    {
      uint64_t v22 = v35;
      unint64_t v21 = v7;
      sub_100510D4C(v35, v7);
      swift_retain();
      uint64_t v23 = sub_100A160B4(v35, v7);
      swift_release();
    }
    else
    {
      sub_10105E770((unint64_t *)&unk_1016A8A60, (void (*)(uint64_t))type metadata accessor for CRLRealTimeMessage);
      swift_retain();
      uint64_t v22 = v35;
      unint64_t v21 = v7;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t v23 = v0[8];
    }
    v0[22] = v23;
    uint64_t v26 = v0[13] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[23] = Strong;
    if (Strong)
    {
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v29 = swift_getObjectType();
      uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 32) + **(int **)(v28 + 32));
      uint64_t v30 = (void *)swift_task_alloc();
      v0[24] = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_10105C170;
      uint64_t v31 = v0[12];
      return v38(v23, v31, v29, v28);
    }
    else
    {
      swift_release();
      sub_100510084(v22, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      long long v32 = (uint64_t (*)(void))v0[1];
      return v32();
    }
  }
}

uint64_t sub_10105BFE0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  return _swift_task_switch(sub_10105C0F0, v1, 0);
}

uint64_t sub_10105C0F0()
{
  sub_100510084(v0[18], v0[19]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10105C170()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = sub_10105C31C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    swift_unknownObjectRelease();
    uint64_t v4 = sub_10105C298;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105C298()
{
  uint64_t v1 = v0[18];
  unint64_t v2 = v0[19];
  swift_release();
  sub_100510084(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10105C31C()
{
  uint64_t v2 = v0[18];
  unint64_t v1 = v0[19];
  swift_release();
  sub_100510084(v2, v1);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10105C3B0(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_10105C3D0, v1, 0);
}

uint64_t sub_10105C3D0()
{
  uint64_t v1 = *(void *)(v0[4] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  v0[2] = v0[3];
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    swift_retain();
    uint64_t v2 = sub_100A151C8();
  }
  else
  {
    type metadata accessor for CRLRealTimeMessage();
    sub_10105E770(&qword_1016815D8, (void (*)(uint64_t))type metadata accessor for CRLRealTimeMessage);
    swift_retain();
    uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  swift_release();
  v0[5] = v5;
  v0[6] = v4;
  unint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_10105C574;
  return sub_1006F91A4(v4, v5);
}

uint64_t sub_10105C574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[8] = a1;
  v5[9] = a2;
  v5[10] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[4];
  if (v2) {
    uint64_t v7 = sub_10105C830;
  }
  else {
    uint64_t v7 = sub_10105C6AC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10105C6AC()
{
  uint64_t v2 = v0[8];
  unint64_t v1 = v0[9];
  type metadata accessor for CRLEncryptedRealTimeMessage();
  uint64_t v3 = (void *)swift_allocObject();
  v0[11] = v3;
  v3[2] = 0;
  v3[3] = v2;
  v3[4] = v1;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_12;
      }
      uint64_t v5 = HIDWORD(v2) - (int)v2;
LABEL_6:
      sub_100510D4C(v2, v1);
LABEL_7:
      if (__OFADD__(v5, 24))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x10105C820);
      }
      uint64_t v8 = v0[4] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
      BOOL v9 = *(void *)(v8 + *(int *)(type metadata accessor for CRLRealTimeMessengerConfiguration() + 20)) < v5 + 24;
      uint64_t v10 = swift_task_alloc();
      v0[12] = v10;
      *(void *)uint64_t v10 = v0;
      *(void *)(v10 + 8) = sub_10105C894;
      uint64_t v11 = v0[4];
      *(unsigned char *)(v10 + 144) = v9;
      *(void *)(v10 + 24) = v4;
      *(void *)(v10 + 32) = v11;
      return _swift_task_switch(sub_10105D564, v11, 0);
    case 2uLL:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v1);
      goto LABEL_7;
  }
}

uint64_t sub_10105C830()
{
  sub_100510084(v0[6], v0[5]);
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10105C894()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_10105CA4C;
  }
  else {
    uint64_t v4 = sub_10105C9C0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105C9C0()
{
  uint64_t v1 = v0[8];
  unint64_t v2 = v0[9];
  unint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  swift_release();
  sub_100510084(v1, v2);
  sub_100510084(v3, v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10105CA4C()
{
  uint64_t v1 = v0[8];
  unint64_t v2 = v0[9];
  unint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  swift_release();
  sub_100510084(v1, v2);
  sub_100510084(v3, v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10105CAD8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 144) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  return _swift_task_switch(sub_10105CAFC, v2, 0);
}

uint64_t sub_10105CAFC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(unsigned char *)(v0 + 144))
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
    *(void *)(v0 + 16) = *(void *)(v0 + 24);
    if (*(unsigned char *)(v2 + 16) == 1)
    {
      swift_retain();
      uint64_t v3 = sub_100A151C8();
    }
    else
    {
      type metadata accessor for CRLRealTimeMessage();
      sub_10105E770(&qword_1016815D8, (void (*)(uint64_t))type metadata accessor for CRLRealTimeMessage);
      swift_retain();
      uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    }
    uint64_t v15 = v3;
    unint64_t v16 = v4;
    swift_release();
    uint64_t v17 = *(void *)(v0 + 32);
    *(void *)(v0 + 64) = v16;
    *(void *)(v0 + 72) = v15;
    uint64_t v18 = v17 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
    uint64_t v19 = type metadata accessor for CRLRealTimeMessengerConfiguration();
    uint64_t v20 = *(void *)(v18 + *(int *)(v19 + 20));
    uint64_t v21 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        LODWORD(v21) = HIDWORD(v15) - v15;
        if (__OFSUB__(HIDWORD(v15), v15)) {
          goto LABEL_36;
        }
        uint64_t v21 = (int)v21;
        goto LABEL_14;
      case 2uLL:
        uint64_t v23 = *(void *)(v15 + 16);
        uint64_t v22 = *(void *)(v15 + 24);
        BOOL v24 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v24) {
          goto LABEL_14;
        }
        goto LABEL_37;
      case 3uLL:
        goto LABEL_14;
      default:
        uint64_t v21 = BYTE6(v16);
LABEL_14:
        uint64_t v25 = v20 * *(unsigned __int16 *)(v18 + *(int *)(v19 + 24));
        if ((v20 * (unsigned __int128)*(unsigned __int16 *)(v18 + *(int *)(v19 + 24))) >> 64 != v25 >> 63) {
          goto LABEL_35;
        }
        if (v25 < v21)
        {
          sub_1007DC5DC();
          swift_allocError();
          *uint64_t v26 = 2;
          swift_willThrow();
          sub_100510084(*(void *)(v0 + 72), *(void *)(v0 + 64));
          uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_28;
        }
        unint64_t v27 = sub_1008D4DD8(v15, v16, 0, v20);
        *(void *)(v0 + 80) = v27;
        if (v27 >> 62) {
          goto LABEL_38;
        }
        uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        *(void *)(v0 + 88) = v29;
        if (!v29) {
          goto LABEL_26;
        }
        break;
    }
LABEL_19:
    uint64_t v30 = 0;
    *(void *)(v0 + 96) = OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
    while (1)
    {
      uint64_t v31 = *(void *)(v0 + 80);
      if ((v31 & 0xC000000000000001) != 0)
      {
        uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v32 = *(void *)(v31 + 8 * v30 + 32);
        swift_retain();
      }
      *(void *)(v0 + 104) = v32;
      *(void *)(v0 + 112) = v30 + 1;
      if (__OFADD__(v30, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 88) = v39;
        if (!v39)
        {
LABEL_26:
          uint64_t v34 = *(void *)(v0 + 72);
          unint64_t v35 = *(void *)(v0 + 64);
          swift_bridgeObjectRelease();
          sub_100510084(v34, v35);
          goto LABEL_27;
        }
        goto LABEL_19;
      }
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      *(void *)(v0 + 120) = Strong;
      if (Strong) {
        break;
      }
      swift_release();
      uint64_t v30 = *(void *)(v0 + 112);
      if (v30 == *(void *)(v0 + 88)) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = *(void *)(*(void *)(v0 + 32) + *(void *)(v0 + 96) + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 24) + **(int **)(v36 + 24));
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_10105D140;
    uint64_t v10 = v32;
    uint64_t v11 = ObjectType;
    uint64_t v12 = v36;
    uint64_t v13 = v41;
    return v13(v10, v11, v12);
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 40) = v6;
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v8 = swift_getObjectType();
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
    BOOL v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v9;
    *BOOL v9 = v0;
    v9[1] = sub_10105D004;
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v11 = v8;
    uint64_t v12 = v7;
    uint64_t v13 = v40;
    return v13(v10, v11, v12);
  }
LABEL_27:
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_28:
  return v28();
}

uint64_t sub_10105D004()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_10105D4DC, v3, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    unint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10105D140()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v4 = sub_10105D470;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_unknownObjectRelease();
    unint64_t v4 = sub_10105D290;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105D290()
{
  while (1)
  {
    swift_release();
    uint64_t v1 = v0[14];
    if (v1 == v0[11]) {
      break;
    }
    uint64_t v2 = v0[10];
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v4 = result;
    }
    else
    {
      uint64_t v4 = *(void *)(v2 + 8 * v1 + 32);
      uint64_t result = swift_retain();
    }
    v0[13] = v4;
    v0[14] = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[15] = Strong;
    if (Strong)
    {
      uint64_t v9 = *(void *)(v0[4] + v0[12] + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
      uint64_t v11 = (void *)swift_task_alloc();
      v0[16] = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_10105D140;
      return v12(v4, ObjectType, v9);
    }
  }
  uint64_t v6 = v0[9];
  unint64_t v7 = v0[8];
  swift_bridgeObjectRelease();
  sub_100510084(v6, v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10105D470()
{
  swift_release();
  sub_100510084(v0[9], v0[8]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10105D4DC()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10105D540(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 144) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  return _swift_task_switch(sub_10105D564, v2, 0);
}

uint64_t sub_10105D564()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(unsigned char *)(v0 + 144))
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
    *(void *)(v0 + 16) = *(void *)(v0 + 24);
    if (*(unsigned char *)(v2 + 16) == 1)
    {
      swift_retain();
      uint64_t v3 = sub_1010212B4();
    }
    else
    {
      type metadata accessor for CRLEncryptedRealTimeMessage();
      sub_10105E770(&qword_1016815D0, (void (*)(uint64_t))type metadata accessor for CRLEncryptedRealTimeMessage);
      swift_retain();
      uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    }
    uint64_t v15 = v3;
    unint64_t v16 = v4;
    swift_release();
    uint64_t v17 = *(void *)(v0 + 32);
    *(void *)(v0 + 64) = v16;
    *(void *)(v0 + 72) = v15;
    uint64_t v18 = v17 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
    uint64_t v19 = type metadata accessor for CRLRealTimeMessengerConfiguration();
    uint64_t v20 = *(void *)(v18 + *(int *)(v19 + 20));
    uint64_t v21 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        LODWORD(v21) = HIDWORD(v15) - v15;
        if (__OFSUB__(HIDWORD(v15), v15)) {
          goto LABEL_36;
        }
        uint64_t v21 = (int)v21;
        goto LABEL_14;
      case 2uLL:
        uint64_t v23 = *(void *)(v15 + 16);
        uint64_t v22 = *(void *)(v15 + 24);
        BOOL v24 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v24) {
          goto LABEL_14;
        }
        goto LABEL_37;
      case 3uLL:
        goto LABEL_14;
      default:
        uint64_t v21 = BYTE6(v16);
LABEL_14:
        uint64_t v25 = v20 * *(unsigned __int16 *)(v18 + *(int *)(v19 + 24));
        if ((v20 * (unsigned __int128)*(unsigned __int16 *)(v18 + *(int *)(v19 + 24))) >> 64 != v25 >> 63) {
          goto LABEL_35;
        }
        if (v25 < v21)
        {
          sub_1007DC5DC();
          swift_allocError();
          *uint64_t v26 = 2;
          swift_willThrow();
          sub_100510084(*(void *)(v0 + 72), *(void *)(v0 + 64));
          uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_28;
        }
        unint64_t v27 = sub_1008D4DD8(v15, v16, 1, v20);
        *(void *)(v0 + 80) = v27;
        if (v27 >> 62) {
          goto LABEL_38;
        }
        uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        *(void *)(v0 + 88) = v29;
        if (!v29) {
          goto LABEL_26;
        }
        break;
    }
LABEL_19:
    uint64_t v30 = 0;
    *(void *)(v0 + 96) = OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
    while (1)
    {
      uint64_t v31 = *(void *)(v0 + 80);
      if ((v31 & 0xC000000000000001) != 0)
      {
        uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v32 = *(void *)(v31 + 8 * v30 + 32);
        swift_retain();
      }
      *(void *)(v0 + 104) = v32;
      *(void *)(v0 + 112) = v30 + 1;
      if (__OFADD__(v30, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 88) = v39;
        if (!v39)
        {
LABEL_26:
          uint64_t v34 = *(void *)(v0 + 72);
          unint64_t v35 = *(void *)(v0 + 64);
          swift_bridgeObjectRelease();
          sub_100510084(v34, v35);
          goto LABEL_27;
        }
        goto LABEL_19;
      }
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      *(void *)(v0 + 120) = Strong;
      if (Strong) {
        break;
      }
      swift_release();
      uint64_t v30 = *(void *)(v0 + 112);
      if (v30 == *(void *)(v0 + 88)) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = *(void *)(*(void *)(v0 + 32) + *(void *)(v0 + 96) + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 24) + **(int **)(v36 + 24));
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_10105DBA8;
    uint64_t v10 = v32;
    uint64_t v11 = ObjectType;
    uint64_t v12 = v36;
    uint64_t v13 = v41;
    return v13(v10, v11, v12);
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 40) = v6;
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v8 = swift_getObjectType();
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10105DA6C;
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v11 = v8;
    uint64_t v12 = v7;
    uint64_t v13 = v40;
    return v13(v10, v11, v12);
  }
LABEL_27:
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_28:
  return v28();
}

uint64_t sub_10105DA6C()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_10105EA38, v3, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    unint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10105DBA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v4 = sub_10105EA34;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_unknownObjectRelease();
    unint64_t v4 = sub_10105DCF8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10105DCF8()
{
  while (1)
  {
    swift_release();
    uint64_t v1 = v0[14];
    if (v1 == v0[11]) {
      break;
    }
    uint64_t v2 = v0[10];
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v4 = result;
    }
    else
    {
      uint64_t v4 = *(void *)(v2 + 8 * v1 + 32);
      uint64_t result = swift_retain();
    }
    v0[13] = v4;
    v0[14] = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[15] = Strong;
    if (Strong)
    {
      uint64_t v9 = *(void *)(v0[4] + v0[12] + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
      uint64_t v11 = (void *)swift_task_alloc();
      v0[16] = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_10105DBA8;
      return v12(v4, ObjectType, v9);
    }
  }
  uint64_t v6 = v0[9];
  unint64_t v7 = v0[8];
  swift_bridgeObjectRelease();
  sub_100510084(v6, v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10105DED8()
{
  sub_10105E974(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration);
  sub_100523398(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t sub_10105DF58()
{
  return type metadata accessor for CRLRealTimeMessengerImplementation();
}

uint64_t type metadata accessor for CRLRealTimeMessengerImplementation()
{
  uint64_t result = qword_1016A8748;
  if (!qword_1016A8748) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10105DFAC()
{
  uint64_t result = type metadata accessor for CRLRealTimeMessengerConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRLRealTimeMessengerImplementation.RealTimeMessageCoder()
{
  return self;
}

uint64_t sub_10105E09C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100528488;
  return _swift_task_switch(sub_101058188, v4, 0);
}

uint64_t sub_10105E14C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100528D08;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(sub_10105C3D0, v4, 0);
}

uint64_t sub_10105E1FC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLChunkedMessageBufferWrapper()
{
  return self;
}

uint64_t sub_10105E260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  type metadata accessor for CRLRealTimeMessengerImplementation();
  uint64_t v17 = swift_allocObject();

  return sub_10105E304(a1, a2, a3, a4, a5, v17, a7, a8, a9, a10);
}

uint64_t sub_10105E304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v24[1] = a4;
  uint64_t v13 = type metadata accessor for GroupSessionMessenger.DeliveryMode();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v18 = a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  *(void *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers) = _swiftEmptyDictionarySingleton;
  sub_10105E9D0(a1, a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration);
  uint64_t v19 = (void *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_dataEncryptor);
  *uint64_t v19 = a2;
  v19[1] = a9;
  *(void *)(v18 + 8) = a10;
  swift_unknownObjectWeakAssign();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v17, v13);
  if (v20 == enum case for GroupSessionMessenger.DeliveryMode.reliable(_:))
  {
    char v21 = 0;
LABEL_5:
    type metadata accessor for CRLRealTimeMessengerImplementation.RealTimeMessageCoder();
    uint64_t v22 = swift_allocObject();
    *(unsigned char *)(v22 + 16) = v21;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_unknownObjectRetain();
    *(void *)(v22 + 24) = PropertyListEncoder.init()();
    swift_retain();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    swift_release();
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    *(void *)(v22 + 32) = PropertyListDecoder.init()();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_10105E974(a1);
    *(void *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder) = v22;
    return a6;
  }
  if (v20 == enum case for GroupSessionMessenger.DeliveryMode.unreliable(_:))
  {
    char v21 = 1;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10105E5B0()
{
  unint64_t result = qword_1016A8A70;
  if (!qword_1016A8A70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016A8A70);
  }
  return result;
}

uint64_t sub_10105E5F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10105E628()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10105E6F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10105B490(v2, v3);
}

uint64_t sub_10105E758(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10105E768()
{
  return swift_release();
}

uint64_t sub_10105E770(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10105E7B8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10105E88C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528488;
  v5[5] = v3;
  v5[6] = v4;
  return _swift_task_switch(sub_10105B6A8, v3, 0);
}

uint64_t sub_10105E974(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLRealTimeMessengerConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10105E9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLRealTimeMessengerConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10105EA3C(uint64_t a1)
{
  uint64_t v48 = sub_1005057FC((uint64_t *)&unk_1016A8B60);
  uint64_t v3 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v4);
  uint64_t v47 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v7);
  long long v45 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  v37[1] = v1;
  long long v51 = _swiftEmptyArrayStorage;
  sub_1006BB644(0, v9, 0);
  uint64_t v10 = v51;
  uint64_t result = sub_10058EAB4(a1);
  uint64_t v13 = result;
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 64;
  uint64_t v43 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v41 = a1 + 64;
  uint64_t v42 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v38 = a1 + 80;
  int64_t v39 = v9;
  uint64_t v40 = v12;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v18 = (unint64_t)v13 >> 6;
    if ((*(void *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_24;
    }
    uint64_t v49 = v14;
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    uint64_t v20 = v19 + *(void *)(*(void *)v19 + 120);
    swift_beginAccess();
    char v21 = *v44;
    long long v50 = v10;
    uint64_t v22 = v45;
    uint64_t v23 = v20;
    uint64_t v24 = v46;
    v21(v45, v23, v46);
    sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
    swift_retain();
    uint64_t v25 = v47;
    Capsule<>.root.getter();
    (*v43)(v22, v24);
    uint64_t v26 = a1;
    uint64_t v27 = v48;
    uint64_t v28 = CRDictionary.count.getter();
    uint64_t v10 = v50;
    uint64_t v29 = v28;
    (*v42)(v25, v27);
    uint64_t result = swift_release();
    long long v51 = v10;
    a1 = v26;
    unint64_t v31 = *((void *)v10 + 2);
    unint64_t v30 = *((void *)v10 + 3);
    if (v31 >= v30 >> 1)
    {
      uint64_t result = sub_1006BB644(v30 > 1, v31 + 1, 1);
      uint64_t v10 = v51;
    }
    *((void *)v10 + 2) = v31 + 1;
    *((float *)v10 + v31 + 8) = (float)v29;
    int64_t v16 = 1 << *(unsigned char *)(a1 + 32);
    if (v13 >= v16) {
      goto LABEL_25;
    }
    uint64_t v15 = v41;
    uint64_t v32 = *(void *)(v41 + 8 * v18);
    if ((v32 & (1 << v13)) == 0) {
      goto LABEL_26;
    }
    LODWORD(v12) = v40;
    if (*(_DWORD *)(a1 + 36) != v40) {
      goto LABEL_27;
    }
    unint64_t v33 = v32 & (-2 << (v13 & 0x3F));
    if (v33)
    {
      int64_t v16 = __clz(__rbit64(v33)) | v13 & 0xFFFFFFFFFFFFFFC0;
      int64_t v17 = v39;
    }
    else
    {
      unint64_t v34 = v18 + 1;
      unint64_t v35 = (unint64_t)(v16 + 63) >> 6;
      int64_t v17 = v39;
      if (v18 + 1 < v35)
      {
        unint64_t v36 = *(void *)(v41 + 8 * v34);
        if (v36)
        {
LABEL_20:
          int64_t v16 = __clz(__rbit64(v36)) + (v34 << 6);
        }
        else
        {
          while (v35 - 2 != v18)
          {
            unint64_t v36 = *(void *)(v38 + 8 * v18++);
            if (v36)
            {
              unint64_t v34 = v18 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v14 = v49 + 1;
    uint64_t v13 = v16;
    if (v49 + 1 == v17) {
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

float sub_10105EE5C(float32x4_t *a1)
{
  uint64_t v1 = a1[1].i64[0];
  if (!v1)
  {
    float v4 = 0.0;
    return sqrtf(v4 / (float)(v1 - 1));
  }
  if (v1 == 1)
  {
    uint64_t v2 = 0;
    int32x2_t v3 = 0;
LABEL_8:
    uint64_t v7 = v1 - v2;
    uint64_t v8 = &a1[2].f32[v2];
    do
    {
      float v9 = *v8++;
      *(float *)v3.i32 = *(float *)v3.i32 + v9;
      --v7;
    }
    while (v7);
    goto LABEL_10;
  }
  uint64_t v2 = v1 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v5 = &a1[2].f32[1];
  int32x2_t v3 = 0;
  uint64_t v6 = v1 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    *(float *)v3.i32 = (float)(*(float *)v3.i32 + *(v5 - 1)) + *v5;
    v5 += 2;
    v6 -= 2;
  }
  while (v6);
  if (v1 != v2) {
    goto LABEL_8;
  }
LABEL_10:
  *(float *)v3.i32 = *(float *)v3.i32 / (float)v1;
  if ((unint64_t)v1 < 8)
  {
    uint64_t v10 = 0;
    float v4 = 0.0;
LABEL_15:
    uint64_t v18 = v1 - v10;
    uint64_t v19 = &a1[2].f32[v10];
    do
    {
      float v20 = *v19++;
      float v4 = v4 + (float)((float)(v20 - *(float *)v3.i32) * (float)(v20 - *(float *)v3.i32));
      --v18;
    }
    while (v18);
    return sqrtf(v4 / (float)(v1 - 1));
  }
  uint64_t v10 = v1 & 0x7FFFFFFFFFFFFFF8;
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(v3, 0);
  uint64_t v12 = a1 + 3;
  float v4 = 0.0;
  uint64_t v13 = v1 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v14 = vsubq_f32(v12[-1], v11);
    float32x4_t v15 = vsubq_f32(*v12, v11);
    float32x4_t v16 = vmulq_f32(v14, v14);
    float32x4_t v17 = vmulq_f32(v15, v15);
    float v4 = (float)((float)((float)((float)((float)((float)((float)(v4 + v16.f32[0]) + v16.f32[1]) + v16.f32[2])
                                       + v16.f32[3])
                               + v17.f32[0])
                       + v17.f32[1])
               + v17.f32[2])
       + v17.f32[3];
    v12 += 2;
    v13 -= 8;
  }
  while (v13);
  if (v1 != v10) {
    goto LABEL_15;
  }
  return sqrtf(v4 / (float)(v1 - 1));
}

uint64_t type metadata accessor for CRLAnalyticsFreehandDrawings()
{
  return self;
}

uint64_t sub_10105EFB8(uint64_t a1)
{
  uint64_t v48 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v2 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v3);
  uint64_t v47 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  uint64_t v46 = (char *)&v38 - v7;
  sub_1005057FC((uint64_t *)&unk_10169A250);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v9 = 0;
  uint64_t v49 = a1;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v39 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v43 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v44 = v2 + 16;
  uint64_t v42 = (void (**)(char *, uint64_t))(v2 + 8);
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v41 = result + 64;
  uint64_t v45 = result;
  float32x4_t v14 = (void (**)(char *, char *, uint64_t))(v2 + 16);
  float32x4_t v16 = v46;
  float32x4_t v15 = v47;
  uint64_t v17 = v48;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v50 = (v13 - 1) & v13;
  int64_t v51 = v9;
  for (unint64_t i = __clz(__rbit64(v13)) | (v9 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    unint64_t v55 = i;
    uint64_t v23 = 8 * i;
    uint64_t v24 = *(void *)(v49 + 56);
    uint64_t v56 = *(void *)(*(void *)(v49 + 48) + 8 * i);
    uint64_t v25 = *(void **)(v24 + 8 * i);
    uint64_t v26 = (char *)v25 + *(void *)(*v25 + 120);
    swift_beginAccess();
    uint64_t v27 = *v14;
    (*v14)(v16, v26, v17);
    int v54 = *((unsigned __int8 *)v25 + *(void *)(*v25 + 136));
    uint64_t v28 = v25[2];
    v27(v15, v16, v17);
    uint64_t v29 = (char *)v25 + *(void *)(*v25 + 128);
    long long v30 = *(_OWORD *)v29;
    long long v52 = *((_OWORD *)v29 + 1);
    long long v53 = v30;
    uint64_t v31 = *((void *)v29 + 4);
    sub_1005057FC((uint64_t *)&unk_1016A8B70);
    uint64_t v32 = (void *)swift_allocObject();
    *((unsigned char *)v32 + *(void *)(*v32 + 136)) = 0;
    v32[2] = v28;
    (*v43)((char *)v32 + *(void *)(*v32 + 120), v15, v17);
    *((unsigned char *)v32 + *(void *)(*v32 + 136)) = v54;
    unint64_t v33 = (char *)v32 + *(void *)(*v32 + 128);
    long long v34 = v52;
    *(_OWORD *)unint64_t v33 = v53;
    *((_OWORD *)v33 + 1) = v34;
    *((void *)v33 + 4) = v31;
    (*v42)(v16, v17);
    *(void *)(v41 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
    uint64_t result = v45;
    *(void *)(*(void *)(v45 + 48) + v23) = v56;
    *(void *)(*(void *)(result + 56) + v23) = v32;
    uint64_t v35 = *(void *)(result + 16);
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(result + 16) = v37;
    unint64_t v13 = v50;
    int64_t v9 = v51;
    if (v50) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_24;
    }
    if (v19 >= v40) {
      return result;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v19);
    int64_t v21 = v9 + 1;
    if (!v20)
    {
      int64_t v21 = v9 + 2;
      if (v9 + 2 >= v40) {
        return result;
      }
      unint64_t v20 = *(void *)(v39 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v9 + 3;
        if (v9 + 3 >= v40) {
          return result;
        }
        unint64_t v20 = *(void *)(v39 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v50 = (v20 - 1) & v20;
    int64_t v51 = v21;
  }
  uint64_t v22 = v9 + 4;
  if (v9 + 4 >= v40) {
    return result;
  }
  unint64_t v20 = *(void *)(v39 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v9 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v40) {
      return result;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10105F418(unint64_t a1, uint64_t a2)
{
  uint64_t v133 = a2;
  uint64_t v3 = type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v143 = (char *)v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v137 = a1;
  if (a1 >> 62)
  {
LABEL_90:
    swift_bridgeObjectRetain();
    uint64_t v129 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v132 = v129;
    if (v129 <= 0) {
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
    if (!v130) {
      goto LABEL_94;
    }
    uint64_t v6 = v130;
    unint64_t v7 = v137;
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      return;
    }
    swift_bridgeObjectRetain();
    unint64_t v7 = v137;
    uint64_t v132 = v6;
  }
  uint64_t v8 = 0;
  uint64_t v138 = v6;
  unint64_t v139 = v7 & 0xC000000000000001;
  unint64_t v135 = v7 + 32;
  PKInkType v140 = PKInkTypeMonoline;
  PKInkType v136 = PKInkTypePen;
  PKInkType v134 = PKInkTypePencil;
  v131[1] = PKInkTypeCrayon;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  while (1)
  {
    if (v139) {
      float32x4_t v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      float32x4_t v14 = (char *)*(id *)(v135 + 8 * v8);
    }
    float32x4_t v15 = v14;
    BOOL v16 = __OFADD__(v8, 1);
    uint64_t v17 = v8 + 1;
    if (v16)
    {
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v18 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems;
    int64_t v19 = *(double **)&v14[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems];
    if (!v19)
    {
      sub_100846AB0();
      int64_t v19 = *(double **)&v15[v18];
    }
    unint64_t v20 = (unint64_t)(v19 ? v19 : _swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 >> 62)
    {
      sub_1005057FC(&qword_101673060);
      uint64_t v21 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
      unint64_t v20 = v21;
    }
    else
    {
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      swift_bridgeObjectRelease();
      uint64_t v21 = v20;
    }
    id v141 = v15;
    uint64_t v142 = v17;
    if (v20 >> 62) {
      break;
    }
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22) {
      goto LABEL_19;
    }
LABEL_5:
    swift_bridgeObjectRelease_n();

    uint64_t v8 = v142;
    if (v142 == v138)
    {
      swift_bridgeObjectRelease();
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  if (!v22) {
    goto LABEL_5;
  }
LABEL_19:
  if (v22 < 1) {
    goto LABEL_89;
  }
  uint64_t v162 = 0;
  unint64_t v158 = v21 & 0xC000000000000001;
  uint64_t v144 = v22;
  uint64_t v145 = (double *)v20;
  while (2)
  {
    if (v158)
    {
      uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v23 = *(void *)(v20 + 8 * v162 + 32);
      swift_unknownObjectRetain();
    }
    type metadata accessor for CRLShapeItem();
    uint64_t v24 = (void *)swift_dynamicCastClass();
    if (!v24)
    {
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
    uint64_t v25 = v24;
    uint64_t v26 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v24) + 0x4C0);
    uint64_t v160 = v23;
    uint64_t v27 = swift_unknownObjectRetain();
    if ((v26(v27) & 1) == 0)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 158, (uint64_t)"Should only ask about being a fill for a freehand drawing on freehand drawing shapes.", 85, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 158);
    }
    uint64_t v28 = **(void **)((char *)v25 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    uint64_t v29 = swift_conformsToProtocol2();
    if (v29)
    {
      uint64_t v30 = v29;
      unsigned __int8 v159 = v25;
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
      swift_retain();
      uint64_t v32 = (uint64_t)v143;
      v31(v28, v30);
      swift_release();
      sub_1005057FC((uint64_t *)&unk_1016A8B50);
      CRRegister.wrappedValue.getter();
      uint64_t v33 = v164;
      uint64_t v34 = v165;
      uint64_t v35 = v166;
      uint64_t v36 = v167;
      uint64_t v37 = v170;
      uint64_t v161 = v169;
      uint64_t v38 = v172;
      uint64_t v154 = v171;
      uint64_t v155 = v168;
      uint64_t v39 = v174;
      uint64_t v153 = v173;
      id v40 = v175;
      uint64_t v156 = v176;
      uint64_t v157 = v163;
      uint64_t v41 = sub_100A59730(v32);
      if (v40)
      {
        sub_10050BF48(0, (unint64_t *)&qword_10168F9E0);
        uint64_t v42 = v33;
        int v178 = v34;
        uint64_t v149 = v34;
        uint64_t v150 = v36;
        char v179 = BYTE4(v34) & 1;
        uint64_t v151 = v35;
        uint64_t v180 = v35;
        uint64_t v181 = v36;
        uint64_t v43 = v154;
        uint64_t v44 = v155;
        uint64_t v182 = v155;
        uint64_t v183 = v161;
        uint64_t v147 = v39;
        uint64_t v148 = v37;
        uint64_t v184 = v37;
        uint64_t v185 = v154;
        uint64_t v45 = v153;
        uint64_t v186 = v38;
        uint64_t v187 = v153;
        uint64_t v188 = v39;
        id v189 = v40;
        swift_bridgeObjectRetain();
        uint64_t v146 = (uint64_t)v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_1007B0B84((uint64_t)&v178);
        uint64_t v152 = v42;
        uint64_t v47 = v159;
        if (v42)
        {
          if (qword_10166FB80 != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v48 = (id)static OS_os_log.persistence;
          uint64_t v49 = static os_log_type_t.info.getter();
          sub_100BAC898((uint64_t)v48, (uint64_t)&_mh_execute_header, v49, (uint64_t)"Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);
        }
        id v40 = [objc_allocWithZone((Class)CRLColorFill) initWithColor:v46];

        uint64_t v41 = sub_10051ABBC(v157, v152, v149, v151, v150, v44, v161, v148, v43, v38, v45, v147, v146);
      }
      else
      {
        uint64_t v47 = v159;
      }
      uint64_t v50 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v47) + 0x420);
      int64_t v51 = (void *)v50(v41);
      long long v52 = v51;
      if (v40)
      {
        if (v51)
        {
          if (([v51 isNullStroke] & 1) == 0)
          {
            sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 165, (uint64_t)"Should not have both fill and stroke.", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 165);
          }
          swift_unknownObjectRelease_n();
        }
        else
        {
          swift_unknownObjectRelease_n();
        }
        uint64_t v22 = v144;

        double v12 = v12 + 1.0;
        unint64_t v20 = (unint64_t)v145;
LABEL_22:
        if (v22 == ++v162) {
          goto LABEL_5;
        }
        continue;
      }
      if (v51)
      {
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 171, (uint64_t)"Should have a fill or a stroke.", 31, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 171);
      }
      uint64_t v53 = swift_unknownObjectRetain();
      int v54 = (void *)v50(v53);
      swift_unknownObjectRelease();
      unint64_t v20 = (unint64_t)v145;
      if (!v54)
      {
        swift_unknownObjectRelease_n();
        uint64_t v22 = v144;
        goto LABEL_22;
      }
      self;
      unint64_t v55 = (void *)swift_dynamicCastObjCClass();
      if (!v55)
      {
        swift_unknownObjectRelease_n();

        uint64_t v22 = v144;
        goto LABEL_22;
      }
      double v13 = v13 + 1.0;
      id v56 = [v55 inkType];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;
      if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
      {
LABEL_51:
        swift_bridgeObjectRelease_n();
        goto LABEL_55;
      }
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_55;
      }
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;
      if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65) {
        goto LABEL_51;
      }
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v66)
      {
LABEL_55:

        swift_unknownObjectRelease_n();
        double v11 = v11 + 1.0;
        uint64_t v22 = v144;
        goto LABEL_22;
      }
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = v68;
      if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v70)
      {
        swift_bridgeObjectRelease_n();
LABEL_63:
        swift_unknownObjectRelease_n();

        double v10 = v10 + 1.0;
        uint64_t v22 = v144;
        goto LABEL_22;
      }
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v71) {
        goto LABEL_63;
      }
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v74 = v73;
      if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v74 == v75)
      {

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_68;
      }
      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v76) {
LABEL_68:
      }
        double v9 = v9 + 1.0;
      uint64_t v22 = v144;
      goto LABEL_22;
    }
    break;
  }
  __break(1u);
LABEL_94:
  swift_bridgeObjectRelease();
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
LABEL_74:
  double v77 = v12 / (double)v132;
  double v78 = v13 / (double)v132;
  double v79 = v11 / (double)v132;
  double v80 = v10 / (double)v132;
  double v81 = v9 / (double)v132;
  unint64_t v82 = sub_100A39814((uint64_t)_swiftEmptyArrayStorage);
  id v83 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v78];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v82;
  sub_100973904((uint64_t)v83, 0xD000000000000020, 0x800000010129F210, isUniquelyReferenced_nonNull_native);
  uint64_t v85 = v163;
  swift_bridgeObjectRelease();
  id v86 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v77];
  char v87 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v85;
  sub_100973904((uint64_t)v86, 0xD00000000000001ELL, 0x800000010129F240, v87);
  uint64_t v88 = v163;
  swift_bridgeObjectRelease();
  id v89 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v79];
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v88;
  sub_100973904((uint64_t)v89, 0xD000000000000023, 0x800000010129F260, v90);
  uint64_t v91 = v163;
  swift_bridgeObjectRelease();
  id v92 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v80];
  char v93 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v91;
  sub_100973904((uint64_t)v92, 0xD000000000000026, 0x800000010129F290, v93);
  uint64_t v94 = v163;
  swift_bridgeObjectRelease();
  id v95 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v81];
  char v96 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v94;
  sub_100973904((uint64_t)v95, 0xD000000000000026, 0x800000010129F2C0, v96);
  uint64_t v97 = (void *)v163;
  swift_bridgeObjectRelease();
  uint64_t v177 = _swiftEmptyDictionarySingleton;
  uint64_t v98 = swift_beginAccess();
  __chkstk_darwin(v98, v99);
  swift_retain();
  uint64_t v100 = swift_bridgeObjectRetain();
  sub_1006B4754(v100, (void (*)(uint64_t, uint64_t))sub_100D1E3D4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v101 = sub_10105EFB8((uint64_t)v177);
  swift_bridgeObjectRelease();
  uint64_t v102 = (float32x4_t *)sub_10105EA3C(v101);
  swift_release();
  unint64_t v103 = v102[1].u64[0];
  if (v103 >= 2)
  {
    float v104 = sub_10105EE5C(v102);
    goto LABEL_77;
  }
  float v104 = 0.0;
  float v105 = 0.0;
  if (v103)
  {
LABEL_77:
    if (v103 < 2)
    {
      uint64_t v106 = 0;
      float v105 = 0.0;
      goto LABEL_82;
    }
    uint64_t v106 = v103 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v107 = &v102[2].f32[1];
    float v105 = 0.0;
    uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      float v105 = (float)(v105 + *(v107 - 1)) + *v107;
      v107 += 2;
      v108 -= 2;
    }
    while (v108);
    if (v103 != v106)
    {
LABEL_82:
      unint64_t v109 = v103 - v106;
      int v110 = &v102[2].f32[v106];
      do
      {
        float v111 = *v110++;
        float v105 = v105 + v111;
        --v109;
      }
      while (v109);
    }
  }
  swift_bridgeObjectRelease();
  id v112 = objc_allocWithZone((Class)NSNumber);
  *(float *)&double v113 = v104;
  id v114 = [v112 initWithFloat:v113];
  char v115 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v177 = v97;
  sub_100973904((uint64_t)v114, 0xD000000000000018, 0x800000010129F2F0, v115);
  unsigned __int8 v116 = v177;
  swift_bridgeObjectRelease();
  id v117 = objc_allocWithZone((Class)NSNumber);
  *(float *)&double v118 = v105 / (float)(uint64_t)v103;
  id v119 = [v117 initWithFloat:v118];
  char v120 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v177 = v116;
  sub_100973904((uint64_t)v119, 0xD000000000000013, 0x800000010129F310, v120);
  uint64_t v121 = v177;
  swift_bridgeObjectRelease();
  if (qword_10166FA48 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v122 = (void *)static OS_os_log.crlAnalytics;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  *(void *)(inited + 56) = sub_1005057FC((uint64_t *)&unk_1016A8B40);
  *(void *)(inited + 64) = sub_100523288((unint64_t *)&qword_101689E80, (uint64_t *)&unk_1016A8B40);
  *(void *)(inited + 32) = v121;
  id v124 = v122;
  swift_bridgeObjectRetain();
  uint64_t v125 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v124, (uint64_t)&_mh_execute_header, v125, (uint64_t)"sendFreehandDrawingOnBoardOpenedAnalytics: payload: %@", 54, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v126 = self;
  NSString v127 = String._bridgeToObjectiveC()();
  sub_10050BF48(0, (unint64_t *)&qword_101672E50);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v126 sendEventInDomain:v127 lazily:1 eventPayload:isa];
}

void sub_101060540()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self systemImageNamed:v0];

  if (v1)
  {
    uint64_t v2 = sub_10051C358(0, 0, v1, 0);

    uint64_t v3 = self;
    id v4 = v2;
    id v5 = [v3 mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v5 localizedStringForKey:v6 value:v7 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 setAccessibilityLabel:v9];

    id v10 = v4;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v11];

    id v12 = v10;
    id v13 = [v12 accessibilityLabel];
    [v12 setLargeContentTitle:v13];

    sub_101060A70();
    if (v14)
    {
      UIMenuElementSize preferredElementSize = v14;
      sub_10050BF48(0, &qword_101673A80);
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      v19.value.super.Class isa = 0;
      v19.is_nil = 0;
      Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v16, (Swift::String_optional)0, v19, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v18).super.super.isa;
      [v12 setMenu:isa];
      [v12 setShowsMenuAsPrimaryAction:1];
      [v12 setPreferredMenuElementOrder:2];
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1010607E0(uint64_t a1, uint64_t a2)
{
  sub_100522D7C(a2, (uint64_t)&v19);
  type metadata accessor for CRLBoardItem(0);
  if (swift_dynamicCast())
  {
    uint64_t v4 = sub_1007FE0AC();
    if (v4)
    {
      char v5 = sub_1006E5050(v18, v4);
      swift_bridgeObjectRelease();
      if (v5)
      {
        if (sub_100520CB4(a1, a2))
        {
LABEL_18:

          return 1;
        }
        NSString v6 = *(char **)(a1 + OBJC_IVAR____TtC8Freeform15CRLChangeRecord_details);
        NSString v7 = &v6[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
        id v8 = v6;
        swift_beginAccess();
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v11) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v12) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v13) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v14) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v15) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
        uint64_t v9 = *(void *)v7;
        if (*(void *)(*(void *)v7 + 16))
        {
          uint64_t v10 = sub_1009563E8();
          if (v16)
          {
LABEL_17:
            sub_100557A70(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v19);
            sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);

            goto LABEL_18;
          }
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 1;
        sub_100522F00((uint64_t)&v19, (uint64_t *)&unk_1016725E0);
      }
    }
  }
  return 0;
}

void sub_101060A70()
{
  sub_10050BF48(0, (unint64_t *)&unk_1016787F0);
  id v1 = NSArray.init(arrayLiteral:)();
  id v2 = [*(id *)(v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController) currentEditors];
  sub_1005057FC((uint64_t *)&unk_1016838C0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_10050BF48(0, &qword_10167ADE0);
    id v7 = v1;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_12;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        NSString v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        NSString v6 = *(void **)(v3 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      if ([v6 respondsToSelector:"addContextualMenuElementsToArray:atPoint:"]) {
        [v6 addContextualMenuElementsToArray:v1 atPoint:0.0, 0.0];
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_12;
  }
  __break(1u);
}

BOOL sub_101060C38()
{
  sub_10050BF48(0, (unint64_t *)&unk_1016787F0);
  id v1 = NSArray.init(arrayLiteral:)();
  id v2 = [*(id *)(v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController) currentEditors];
  sub_1005057FC((uint64_t *)&unk_1016838C0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          id v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_14;
          }
        }
        else
        {
          id v7 = *(void **)(v3 + 8 * v5);
          swift_unknownObjectRetain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if ([v7 respondsToSelector:"addContextualMenuElementsToArray:atPoint:"]) {
          [v7 addContextualMenuElementsToArray:v1 atPoint:0.0, 0.0];
        }
        id v9 = v1;
        id v10 = [v9 count];

        swift_unknownObjectRelease();
        BOOL v11 = (uint64_t)v10 > 0;
        if ((uint64_t)v10 <= 0)
        {
          ++v5;
          if (v8 != v4) {
            continue;
          }
        }
        goto LABEL_17;
      }
    }
  }
  BOOL v11 = 0;
LABEL_17:

  swift_bridgeObjectRelease();
  return v11;
}

id sub_101060DF8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterEllipsisBuilder();
  [super dealloc];
}

uint64_t type metadata accessor for CRLiOSMiniFormatterEllipsisBuilder()
{
  return self;
}

void sub_101060E54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (static Selector.== infix(_:_:)() & 1) != 0 || (static Selector.== infix(_:_:)())
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      id v9 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
      id v10 = v9;

      if (v9)
      {
        id v11 = [v10 layerHost];

        if (v11)
        {
          if ([v11 respondsToSelector:"asiOSCVC"])
          {
            id v12 = [v11 asiOSCVC];
            swift_unknownObjectRelease();
            *(void *)(a3 + 24) = sub_10050BF48(0, (unint64_t *)&unk_10169FC40);
            *(void *)a3 = v12;
            return;
          }
          swift_unknownObjectRelease();
        }
      }
    }
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sub_100557A70(a2, (uint64_t)&v23);
    uint64_t v13 = *((void *)&v24 + 1);
    if (*((void *)&v24 + 1))
    {
      char v14 = sub_10050F848(&v23, *((uint64_t *)&v24 + 1));
      uint64_t v15 = *(void *)(v13 - 8);
      __n128 v16 = __chkstk_darwin(v14, v14);
      Swift::OpaquePointer v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v15 + 16))(v18, v16);
      uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&v23);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (objc_class *)type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
    v22.receiver = v3;
    v22.super_class = v20;
    [super targetForAction:a1 withSender:v19];
    swift_unknownObjectRelease();
    if (v21)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v23 = 0u;
      long long v24 = 0u;
    }
    sub_10052E248((uint64_t)&v23, a3);
  }
}

void sub_101061290(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4, void (*a5)(unint64_t, unint64_t))
{
  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
  [super a1:a2:a3];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = (void *)Strong;
    uint64_t v13 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
    id v14 = v13;

    if (v13)
    {
      uint64_t v15 = (char *)[v14 editingCoordinator];

      if (v15)
      {
        if (*(void *)&v15[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_suspendResumeCoordinator])
        {
          a5(0xD00000000000002CLL, 0x800000010129F3D0);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_1010613B8(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, SEL *a6, void (*a7)(unint64_t, unint64_t))
{
  id v12 = a3;
  id v13 = a4;
  swift_unknownObjectRetain();
  id v14 = a1;
  sub_101061290((uint64_t)v12, (uint64_t)v13, a5, a6, a7);

  swift_unknownObjectRelease();
}

uint64_t sub_10106146C()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 localizedStringForKey:v1 value:v2 table:0];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t sub_10106160C(uint64_t a1)
{
  uint64_t v59 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v59 - 8);
  __chkstk_darwin(v59, v3);
  uint64_t v58 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for PHPickerResult();
  __chkstk_darwin(v61, v5);
  int64_t v51 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  id v11 = (char *)v50 - v10;
  uint64_t v60 = *(void *)(a1 + 16);
  if (v60)
  {
    id v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v12 = v9 + 16;
    id v56 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v53 = *(void *)(v12 + 56);
    unint64_t v55 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v57 = v12;
    int v54 = (uint64_t (**)(char *, uint64_t))(v12 - 8);
    v50[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = 1;
    uint64_t v16 = v14;
    uint64_t v17 = v61;
    do
    {
      v56(v11, v14, v17);
      Swift::OpaquePointer v18 = (void *)PHPickerResult.itemProvider.getter();
      uint64_t v19 = v58;
      static UTType.movie.getter();
      UTType.identifier.getter();
      uint64_t v20 = *v55;
      (*v55)(v19, v59);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v22 = [v18 hasItemConformingToTypeIdentifier:v21];

      long long v23 = *v54;
      (*v54)(v11, v17);
      if (v22) {
        break;
      }
      v14 += v53;
    }
    while (v60 != v15++);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    uint64_t v27 = v16;
    uint64_t v28 = v51;
    do
    {
      if (__OFADD__(v26, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v52 = v26 + 1;
      v56(v28, v27, v61);
      uint64_t v29 = (void *)PHPickerResult.itemProvider.getter();
      uint64_t v30 = v58;
      static UTType.image.getter();
      UTType.identifier.getter();
      v20(v30, v59);
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v32 = [v29 hasItemConformingToTypeIdentifier:v31];

      uint64_t result = v23(v28, v61);
      if (v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      ++v26;
      v27 += v53;
    }
    while (v52 != v60);
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_13;
    }
  }
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"errorForFailedToInsert(results:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMediaBrowserStringProvider.swift", 96, 2, 32, (uint64_t)"Invalid photo picker results", 28, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"errorForFailedToInsert(results:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMediaBrowserStringProvider.swift", 96, 2, 32);
LABEL_13:
  id v33 = [self mainBundle];
  NSString v34 = String._bridgeToObjectiveC()();
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v33 localizedStringForKey:v34 value:v35 table:0];

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  sub_1005057FC(&qword_10168B3D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117DF40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v41;
  uint64_t v42 = sub_10106146C();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v42;
  *(void *)(inited + 56) = v43;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v44;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v37;
  *(void *)(inited + 104) = v39;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v45;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v37;
  *(void *)(inited + 152) = v39;
  swift_bridgeObjectRetain();
  sub_100A39A60(inited);
  id v46 = objc_allocWithZone((Class)NSError);
  NSString v47 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v49 = [v46 initWithDomain:v47 code:200 userInfo:isa];

  return (uint64_t)v49;
}

id sub_101061CC4(void *a1, void *a2)
{
  uint64_t v74 = a2;
  uint64_t v4 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_toolkit] = a1;
  id v9 = v2;
  id v76 = a1;
  id v10 = [v76 toolkitUIState];
  id v11 = [objc_allocWithZone((Class)PKToolPickerScribbleItem) init];
  uint64_t v73 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_scribble;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_scribble) = v11;
  uint64_t v12 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v12(v8, enum case for PKInkingTool.InkType.pen(_:), v4);
  uint64_t v13 = sub_1010647C0((uint64_t)v8, v10);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  uint64_t v72 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen) = v13;
  v12(v8, enum case for PKInkingTool.InkType.monoline(_:), v4);
  uint64_t v15 = sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  char v71 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline) = v15;
  v12(v8, enum case for PKInkingTool.InkType.marker(_:), v4);
  uint64_t v16 = sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  uint64_t v70 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker) = v16;
  id v17 = sub_101064970(v10);
  uint64_t v69 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser) = v17;
  id v68 = [objc_allocWithZone((Class)PKToolPickerLassoItem) init];
  id v18 = [objc_allocWithZone((Class)PKToolPickerRulerItem) init];
  uint64_t v67 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_ruler;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_ruler) = v18;
  v12(v8, enum case for PKInkingTool.InkType.pencil(_:), v4);
  uint64_t v19 = sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  uint64_t v66 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil) = v19;
  uint64_t v20 = sub_101064B28(v10);
  uint64_t v65 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill) = v20;
  v12(v8, enum case for PKInkingTool.InkType.crayon(_:), v4);
  uint64_t v21 = sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  uint64_t v64 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon) = v21;
  v12(v8, enum case for PKInkingTool.InkType.fountainPen(_:), v4);
  uint64_t v22 = sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  uint64_t v23 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen) = v22;
  v12(v8, enum case for PKInkingTool.InkType.watercolor(_:), v4);
  id v75 = v10;
  long long v24 = (void *)sub_1010647C0((uint64_t)v8, v10);
  v14(v8, v4);
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_watercolor) = v24;
  id v63 = v24;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_101188890;
  uint64_t v26 = *(void **)&v73[(void)v9];
  *(void *)(v25 + 32) = v26;
  uint64_t v27 = *(void **)&v72[(void)v9];
  *(void *)(v25 + 40) = v27;
  uint64_t v28 = *(void **)&v71[(void)v9];
  *(void *)(v25 + 48) = v28;
  uint64_t v29 = *(void **)&v70[(void)v9];
  *(void *)(v25 + 56) = v29;
  uint64_t v30 = v68;
  NSString v31 = *(void **)&v69[(void)v9];
  *(void *)(v25 + 64) = v31;
  *(void *)(v25 + 72) = v30;
  uint64_t v69 = *(char **)((char *)v9 + v67);
  *(void *)(v25 + 80) = v69;
  uint64_t v70 = *(char **)((char *)v9 + v66);
  *(void *)(v25 + 88) = v70;
  char v71 = *(char **)((char *)v9 + v65);
  *(void *)(v25 + 96) = v71;
  uint64_t v72 = *(char **)((char *)v9 + v64);
  *(void *)(v25 + 104) = v72;
  unsigned int v32 = *(void **)((char *)v9 + v23);
  *(void *)(v25 + 112) = v32;
  *(void *)(v25 + 120) = v24;
  aBlock[0] = v25;
  specialized Array._endMutation()();
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_items) = aBlock[0];
  uint64_t v73 = (char *)objc_allocWithZone((Class)PKToolPicker);
  sub_10050BF48(0, &qword_1016A8C48);
  id v33 = v26;
  id v34 = v27;
  id v35 = v28;
  id v36 = v29;
  id v37 = v31;
  id v38 = v30;
  uint64_t v39 = v69;
  id v40 = v70;
  uint64_t v41 = v71;
  uint64_t v42 = v72;
  id v43 = v32;
  id v44 = v63;
  swift_bridgeObjectRetain();
  uint64_t v45 = v74;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v47 = [v73 initWithToolItems:isa];

  uint64_t v48 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker;
  *(void *)((char *)v9 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker) = v47;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v49 = v47;
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v51 = [self defaultConfigurationForToolWithIdentifier:v50];
  if (v45)
  {
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v45;
    aBlock[4] = sub_100D536DC;
    aBlock[5] = v52;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    aBlock[2] = sub_100598AC4;
    aBlock[3] = &unk_101538350;
    uint64_t v53 = _Block_copy(aBlock);
    id v54 = v45;
    swift_release();
    [v51 setViewControllerProvider:v53];
    _Block_release(v53);
  }
  unint64_t v55 = self;
  NSString v56 = String._bridgeToObjectiveC()();
  [v55 insertCustomizedLassoToolWithToolIdentifier:v56 withToolConfiguration:v51 inToolPicker:v49 forcingIndexZero:0];

  uint64_t v57 = *(void **)((char *)v9 + v48);
  [v57 setStateAutosaveName:0];
  [v57 setColorUserInterfaceStyle:1];
  id v58 = v57;
  [v58 setShowsDrawingPolicyControls:1];

  uint64_t v59 = (objc_class *)type metadata accessor for CRLiOSPencilTrayPickerManager();
  v78.receiver = v9;
  v78.super_class = v59;
  id v60 = [super init];

  return v60;
}

uint64_t sub_101062434()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  id v10 = (char *)&v19 - v9;
  id v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v19 - v9, v1, v2);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v10, v2);
  if (v12 == enum case for PKInkingTool.InkType.pen(_:)) {
    return 1;
  }
  if (v12 == enum case for PKInkingTool.InkType.pencil(_:)) {
    return 2;
  }
  if (v12 == enum case for PKInkingTool.InkType.marker(_:)) {
    return 6;
  }
  if (v12 == enum case for PKInkingTool.InkType.monoline(_:)) {
    return 0;
  }
  if (v12 == enum case for PKInkingTool.InkType.fountainPen(_:)) {
    return 5;
  }
  if (v12 == enum case for PKInkingTool.InkType.watercolor(_:)) {
    return 4;
  }
  if (v12 == enum case for PKInkingTool.InkType.crayon(_:)) {
    return 3;
  }
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  v11(v7, v1, v2);
  uint64_t v15 = String.init<A>(describing:)();
  uint64_t v17 = v16;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v15;
  *(void *)(inited + 40) = v17;
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"freeformToolType", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 396, (uint64_t)"Unknown PKInkingTool.InkType (%{public}@). Falling back to pen.", 63, 2u, inited);
  sub_1005598CC(inited, (uint64_t)"freeformToolType", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 396);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  uint64_t v13 = 1;
  swift_arrayDestroy();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  return v13;
}

id sub_101062758(void *a1)
{
  type metadata accessor for CRLiOSPencilTrayPickerFillImageProvider();
  swift_initStaticObject();
  id v2 = [a1 color];
  id v3 = sub_101064E28(v2);

  return v3;
}

uint64_t sub_1010627BC()
{
  uint64_t v0 = sub_1005057FC(&qword_10169AB48);
  __chkstk_darwin(v0 - 8, v1);
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PKCustomTool();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKToolPicker.selectedTool.getter();
  sub_1005057FC((uint64_t *)&unk_10169AB50);
  char v9 = swift_dynamicCast();
  id v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v9)
  {
    v10(v3, 0, 1, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    if (PKCustomTool.customIdentifier.getter() == 0xD000000000000018 && v11 == 0x8000000101286E00)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return 1;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v12) {
      return 1;
    }
  }
  else
  {
    v10(v3, 1, 1, v4);
    sub_100522F00((uint64_t)v3, &qword_10169AB48);
  }
  return 0;
}

void sub_101062A08()
{
  uint64_t v1 = sub_1005057FC(&qword_10169AB48);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKCustomTool();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  char v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_toolkit), "currentTool"));
  id v11 = [v10 type];

  if ((sub_101062E28((uint64_t)v11) != 0xD000000000000018 || v12 != 0x8000000101286E00)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    long long v24 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker);
    id v33 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v24 setSelectedToolItemIdentifier:v33];
    uint64_t v25 = v33;

    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker);
  uint64_t v14 = PKToolPicker._tools.getter();
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v16 = v14 + 32;
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v18 = v6;
  uint64_t v19 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  v28[1] = v13;
  uint64_t v29 = v18;
  unsigned int v32 = (void (**)(char *, uint64_t))(v18 + 8);
  id v33 = "FromTray(sender:)";
  uint64_t v30 = v14;
  unint64_t v31 = 0x8000000101286E00;
  while (1)
  {
    sub_1005498A4(v16, (uint64_t)v34);
    sub_1005057FC((uint64_t *)&unk_10169AB50);
    char v20 = swift_dynamicCast();
    uint64_t v21 = *v17;
    if ((v20 & 1) == 0)
    {
      v21(v4, 1, 1, v5);
      sub_100522F00((uint64_t)v4, &qword_10169AB48);
      goto LABEL_7;
    }
    v21(v4, 0, 1, v5);
    (*v19)(v9, v4, v5);
    if (PKCustomTool.customIdentifier.getter() == 0xD000000000000018 && v22 == v31) {
      break;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_21;
    }
    (*v32)(v9, v5);
LABEL_7:
    v16 += 40;
    if (!--v15) {
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  v34[3] = v5;
  v34[4] = (uint64_t)&protocol witness table for PKCustomTool;
  uint64_t v26 = sub_1005767BC(v34);
  uint64_t v27 = v29 + 16;
  (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 16))(v26, v9, v5);
  PKToolPicker.selectedTool.setter();
  (*(void (**)(char *, uint64_t))(v27 - 8))(v9, v5);
}

uint64_t sub_101062E28(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PKToolPickerCustomItem.Configuration();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  id v11 = (char *)v21 - v10;
  switch(a1)
  {
    case 0:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline;
      goto LABEL_12;
    case 1:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen;
      goto LABEL_12;
    case 2:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil;
      goto LABEL_12;
    case 3:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon;
      goto LABEL_12;
    case 4:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_watercolor;
      goto LABEL_12;
    case 5:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen;
      goto LABEL_12;
    case 6:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker;
      goto LABEL_12;
    case 7:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill;
      goto LABEL_12;
    case 8:
      uint64_t v12 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser;
LABEL_12:
      id v17 = *(id *)(v1 + v12);
      break;
    case 9:
      id v13 = [self mainBundle];
      NSString v14 = String._bridgeToObjectiveC()();
      NSString v15 = String._bridgeToObjectiveC()();
      id v16 = [v13 localizedStringForKey:v14 value:v15 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      PKToolPickerCustomItem.Configuration.init(identifier:name:)();
      sub_10050BF48(0, &qword_1016A8C40);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v3);
      id v17 = (id)PKToolPickerCustomItem.init(configuration:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
      break;
    default:
      type metadata accessor for CRLFreehandDrawingToolType(0);
      v21[1] = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x101063124);
  }
  id v18 = [v17 identifier];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v19;
}

uint64_t sub_10106314C(void *a1)
{
  sub_101063448(a1);
  id v13 = v1;
  sub_10050BF48(0, &qword_1016A8C48);
  id v3 = v1;
  sub_1005057FC(&qword_1016A8C50);
  if (swift_dynamicCast())
  {
    sub_10053974C(&v10, (uint64_t)v14);
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    sub_10050F848(v14, v15);
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_100522F00((uint64_t)&v10, &qword_1016A8C58);
  }
  id v13 = v3;
  id v6 = v3;
  sub_1005057FC(&qword_1016A8C60);
  if (swift_dynamicCast())
  {
    sub_10053974C(&v10, (uint64_t)v14);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    sub_10050F848(v14, v15);
    (*(void (**)(void *, uint64_t, uint64_t))(v8 + 24))(a1, v7, v8);
    return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    return sub_100522F00((uint64_t)&v10, &qword_1016A8C68);
  }
}

id sub_101063308()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSPencilTrayPickerManager();
  return [super dealloc];
}

uint64_t sub_101063448(void *a1)
{
  sub_10050BF48(0, &qword_1016A8C48);
  id v3 = v1;
  sub_1005057FC(&qword_1016A8C70);
  if (swift_dynamicCast())
  {
    sub_10053974C(v14, (uint64_t)v16);
    uint64_t v4 = v17;
    uint64_t v5 = v18;
    sub_10050F848(v16, v17);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    if ((v7 & 1) == 0)
    {
      [a1 setCurrentToolSelection:v6];
      return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v16);
    }
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v16);
  }
  else
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_100522F00((uint64_t)v14, &qword_1016A8C78);
  }
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v10 = [v3 identifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v13;
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCurrentToolSelection(for:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 296, (uint64_t)"Could not find freeformToolType for the selected tool item: %@", 62, 2u, inited);
  sub_1005598CC(inited, (uint64_t)"updateCurrentToolSelection(for:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 296);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  return swift_arrayDestroy();
}

uint64_t sub_101063674()
{
  id v1 = [v0 identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0xD000000000000017 && v4 == 0x80000001012870C0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10106373C()
{
  return sub_101063674();
}

uint64_t sub_101063764()
{
  return 8;
}

uint64_t sub_101063770()
{
  return 9;
}

uint64_t sub_10106377C()
{
  uint64_t v0 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKInkingTool();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKToolPickerInkingItem.inkingTool.getter();
  PKInkingTool.inkType.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v10 = sub_101062434();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v10;
}

uint64_t sub_101063900()
{
  uint64_t v0 = type metadata accessor for PKInkingTool();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKToolPickerInkingItem.inkingTool.getter();
  uint64_t v5 = PKInkingTool.color.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

void sub_1010639D8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  id v18 = [objc_allocWithZone((Class)CRLColor) initWithUIColor:v6];

  id v7 = [v18 colorWithAlphaComponent:1.0];
  [a1 setColorForCurrentTool:v7];

  [v18 alphaComponent];
  double v9 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8))(a2);
  LOBYTE(v3) = v11;
  id v12 = [a1 currentTool];
  if ((v3 & 1) != 0 || v10 != 7)
  {
    self;
    uint64_t v13 = (void *)swift_dynamicCastObjCClass();
    if (v13) {
      goto LABEL_8;
    }
    uint64_t v14 = 426;
  }
  else
  {
    self;
    uint64_t v13 = (void *)swift_dynamicCastObjCClass();
    if (v13) {
      goto LABEL_8;
    }
    uint64_t v14 = 422;
  }

  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateColor(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, v14, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v17) = 2;
  uint64_t v15 = "invalid nil found when unwrapping value";
  uint64_t v16 = 39;
  sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateColor(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, v14);
LABEL_8:
  [v13 setOpacity:v9, v15, v16, v17];
}

double sub_101063C08(uint64_t a1, uint64_t a2)
{
  return sub_101064684(a1, a2, (uint64_t (*)(void))&type metadata accessor for PKInkingTool, (uint64_t (*)(uint64_t))&PKToolPickerInkingItem.inkingTool.getter, (double (*)(uint64_t))&PKInkingTool.width.getter);
}

void sub_101063C4C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  if ((v7 & 1) != 0 || v6 != 7)
  {
    id v10 = [a1 currentTool];
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      double v9 = (void *)v8;
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
      [v9 setUnscaledWidth:];
    }
    else
    {

      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateWidth(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 442, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateWidth(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 442);
    }
  }
}

id sub_101063DD8()
{
  id v1 = [*v0 color];

  return v1;
}

id sub_101063E10()
{
  return [*v0 width];
}

uint64_t sub_101063E20(void *a1)
{
  uint64_t v3 = type metadata accessor for PKEraserTool();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  char v7 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for PKEraserTool.EraserType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v14);
  uint64_t v16 = &v50[-v15];
  uint64_t v54 = v1;
  PKToolPickerEraserItem.eraserTool.getter();
  PKEraserTool.eraserType.getter();
  uint64_t v17 = *(void (**)(unsigned char *, void))(v4 + 8);
  unint64_t v55 = (void (*)(unsigned char *, uint64_t))v3;
  uint64_t v53 = v4 + 8;
  uint64_t v52 = v17;
  v17(v7, v3);
  id v18 = *(void (**)(unsigned char *))(v9 + 104);
  unsigned int v51 = enum case for PKEraserTool.EraserType.vector(_:);
  v18(v12);
  char v19 = static PKEraserTool.EraserType.== infix(_:_:)();
  uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  uint64_t v21 = v9 + 8;
  char v20 = v22;
  v22(v12, v8);
  id v58 = v16;
  NSString v56 = (void (*)(unsigned char *, void, uint64_t))v18;
  uint64_t v57 = v8;
  if (v19)
  {
    id v23 = [a1 toolkitUIState];
    [v23 setEraserToolErasesWholeObjects:1];
    long long v24 = v20;
    uint64_t v25 = a1;
  }
  else
  {
    ((void (*)(unsigned char *, void, uint64_t))v18)(v12, enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:), v8);
    char v26 = static PKEraserTool.EraserType.== infix(_:_:)();
    v20(v12, v8);
    long long v24 = v20;
    uint64_t v25 = a1;
    if ((v26 & 1) == 0) {
      goto LABEL_6;
    }
    id v23 = [a1 toolkitUIState];
    [v23 setEraserToolErasesWholeObjects:0];
  }

LABEL_6:
  uint64_t v59 = v21;
  [v25 setCurrentToolSelection:8];
  id v27 = [v25 currentTool];
  self;
  uint64_t v28 = swift_dynamicCastObjCClass();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    uint64_t v30 = v57;
    v56(v12, enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:), v57);
    unint64_t v31 = v58;
    char v32 = static PKEraserTool.EraserType.== infix(_:_:)();
    v24(v12, v30);
    if ((v32 & 1) == 0)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 369, (uint64_t)"Should only use pixel eraser for fixed width bitmap erase", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 369);
    }
    PKToolPickerEraserItem.eraserTool.getter();
    PKEraserTool.width.getter();
    double v34 = v33;
    v52(v7, v55);
    id v35 = [v25 toolkitUIState];
    sub_100D52BFC(v35, v34);
    double v37 = v36;

    [v29 setScaledWidthForSlicingEraser:v37];
    return ((uint64_t (*)(unsigned char *, uint64_t))v24)(v31, v30);
  }
  unint64_t v55 = v24;

  id v38 = [v25 currentTool];
  self;
  uint64_t v39 = swift_dynamicCastObjCClass();

  sub_1005057FC((uint64_t *)&unk_101672B40);
  if (!v39)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    id v49 = [v25 currentTool];
    *(void *)(inited + 56) = sub_10050BF48(0, &qword_10169AB78);
    *(void *)(inited + 64) = sub_101065870();
    *(void *)(inited + 32) = v49;
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 376, (uint64_t)"Unexpected tool for erase! %@", 29, 2u, inited);
    sub_1005598CC(inited, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 376);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();
    unint64_t v31 = v58;
    long long v24 = v55;
    uint64_t v30 = v57;
    return ((uint64_t (*)(unsigned char *, uint64_t))v24)(v31, v30);
  }
  uint64_t v40 = swift_initStackObject();
  *(_OWORD *)(v40 + 16) = xmmword_10117E810;
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  uint64_t v41 = v58;
  uint64_t v42 = v57;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v43 = v60;
  unint64_t v44 = v61;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v45 = sub_100528BE4();
  *(void *)(v40 + 32) = v43;
  *(void *)(v40 + 64) = v45;
  *(void *)(v40 + 40) = v44;
  v56(v12, v51, v42);
  char v46 = static PKEraserTool.EraserType.== infix(_:_:)();
  v55(v12, v42);
  if ((v46 & 1) == 0)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 374, (uint64_t)"Unknown eraser tool selection: %@", 33, 2u, v40);
    sub_1005598CC(v40, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 374);
  }
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();
  return ((uint64_t (*)(unsigned char *, uint64_t))v55)(v41, v42);
}

double sub_101064644(uint64_t a1, uint64_t a2)
{
  return sub_101064684(a1, a2, (uint64_t (*)(void))&type metadata accessor for PKEraserTool, (uint64_t (*)(uint64_t))&PKToolPickerEraserItem.eraserTool.getter, (double (*)(uint64_t))&PKEraserTool.width.getter);
}

double sub_101064684(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), double (*a5)(uint64_t))
{
  uint64_t v7 = a3(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  id v12 = (char *)&v16 - v11;
  uint64_t v13 = a4(v10);
  double v14 = a5(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  return v14;
}

uint64_t sub_101064778(void *a1)
{
  return sub_101063E20(a1);
}

uint64_t type metadata accessor for CRLiOSPencilTrayPickerManager()
{
  return self;
}

uint64_t sub_1010647C0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_101062434();
  [a2 opacityForToolType:v9];
  double v11 = v10;
  id v12 = [a2 colorForToolType:v9];
  id v13 = [v12 colorWithAlphaComponent:v11];

  id v14 = [v13 UIColor];
  [a2 strokeWidthForToolType:v9];
  sub_10050BF48(0, &qword_1016A8C88);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  return PKToolPickerInkingItem.init(type:color:width:identifier:)();
}

id sub_101064970(void *a1)
{
  uint64_t v2 = type metadata accessor for PKEraserTool.EraserType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  double v10 = (char *)&v15 - v9;
  unsigned int v11 = [a1 eraserToolErasesWholeObjects];
  id v12 = (unsigned int *)&enum case for PKEraserTool.EraserType.vector(_:);
  if (!v11) {
    id v12 = (unsigned int *)&enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v10, *v12, v2);
  id result = [a1 strokeWidthIndexForToolType:8];
  if ((unint64_t)result > 4)
  {
    __break(1u);
  }
  else
  {
    sub_10050BF48(0, &qword_1016A8C80);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
    uint64_t v14 = PKToolPickerEraserItem.init(type:width:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    return (id)v14;
  }
  return result;
}

uint64_t sub_101064B28(void *a1)
{
  uint64_t v2 = type metadata accessor for PKToolPickerCustomItem.Configuration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  double v10 = (char *)&v22 - v9;
  id v11 = [self mainBundle];
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v11 localizedStringForKey:v12 value:v13 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKToolPickerCustomItem.Configuration.init(identifier:name:)();
  PKToolPickerCustomItem.Configuration.imageProvider.setter();
  [a1 opacityForToolType:7];
  double v16 = v15;
  id v17 = [a1 colorForToolType:7];
  id v18 = [v17 colorWithAlphaComponent:v16];

  id v19 = [v18 UIColor];
  PKToolPickerCustomItem.Configuration.defaultColor.setter();
  PKToolPickerCustomItem.Configuration.allowsColorSelection.setter();
  sub_10050BF48(0, &qword_1016A8C40);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  uint64_t v20 = PKToolPickerCustomItem.init(configuration:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  return v20;
}

uint64_t sub_101064DD8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101064E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101064E20()
{
  return swift_release();
}

id sub_101064E28(void *a1)
{
  id v2 = (id)v1;
  uint64_t v3 = *(void *)(v1 + 24);
  long long aBlock = *(void ***)(v1 + 16);
  uint64_t v45 = v3;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0x657361422FLL;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v6 = self;
  id v7 = [v6 imageNamed:v5];

  uint64_t v8 = *((void *)v2 + 3);
  long long aBlock = (void **)*((void *)v2 + 2);
  uint64_t v45 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6B73614D7069542FLL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v42 = [v6 imageNamed:v10];

  uint64_t v11 = *((void *)v2 + 3);
  long long aBlock = (void **)*((void *)v2 + 2);
  uint64_t v45 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 0x746E6F437069542FLL;
  v12._object = (void *)0xEB0000000072756FLL;
  String.append(_:)(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v43 = [v6 imageNamed:v13];

  uint64_t v14 = *((void *)v2 + 3);
  long long aBlock = (void **)*((void *)v2 + 2);
  uint64_t v45 = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x73614D646E61422FLL;
  v15._object = (void *)0xE90000000000006BLL;
  String.append(_:)(v15);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v6 imageNamed:v16];

  uint64_t v18 = *((void *)v2 + 3);
  long long aBlock = (void **)*((void *)v2 + 2);
  uint64_t v45 = v18;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x6E6F43646E61422FLL;
  v19._object = (void *)0xEC00000072756F74;
  String.append(_:)(v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)[v6 imageNamed:v20];

  if (!v7) {
    goto LABEL_4;
  }
  id v22 = v7;
  [v22 size];
  id v40 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v23, v24];
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v22;
  v25[3] = a1;
  v25[4] = v42;
  v25[5] = v43;
  v25[6] = v17;
  v25[7] = isEscapingClosureAtFileLocation;
  v25[8] = v2;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_101065404;
  *(void *)(v26 + 24) = v25;
  uint64_t v48 = sub_101065428;
  uint64_t v49 = v26;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v45 = *(void *)"";
  char v46 = sub_10061B7E4;
  id v47 = &unk_1015383C8;
  uint64_t v39 = _Block_copy(&aBlock);
  id v27 = v22;
  swift_retain();
  id v28 = a1;
  id v42 = v42;
  id v29 = v43;
  id v30 = v17;
  id v31 = (id)isEscapingClosureAtFileLocation;
  swift_retain();
  swift_release();
  id v2 = [v40 imageWithActions:v39];

  _Block_release(v39);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_4:
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    uint64_t v33 = *((void *)v2 + 3);
    long long aBlock = (void **)*((void *)v2 + 2);
    uint64_t v45 = v33;
    swift_bridgeObjectRetain();
    v34._countAndFlagsBits = 0x657361422FLL;
    v34._object = (void *)0xE500000000000000;
    String.append(_:)(v34);
    id v35 = aBlock;
    uint64_t v36 = v45;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v35;
    *(void *)(inited + 40) = v36;
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"makeImage(color:width:)", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerImageProviding.swift", 106, 2, 59, (uint64_t)"Unable to load baseImage for tool %{public}@", 44, 2u, inited);
    LOBYTE(v38) = 2;
    sub_1005598CC(inited, (uint64_t)"makeImage(color:width:)", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerImageProviding.swift", 106, 2, 59);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();
    id v2 = [objc_allocWithZone((Class)UIImage) init:@"Unable to load baseImage for tool %{public}@" 44 v38];
  }
  return v2;
}

uint64_t sub_10106539C()
{
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_101065404()
{
  sub_101065430(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_101065418()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_101065428(uint64_t a1)
{
  return sub_10061B7BC(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_101065430(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  [a1 size];
  double v15 = v14;
  double v17 = v16;
  [a1 drawInRect:0.0, 0.0, v14, v16];
  id v18 = [a2 colorWithAlphaComponent:1.0];
  if (a3 && a4)
  {
    id v19 = a3;
    id v20 = a4;
    id v21 = [v19 imageWithTintColor:v18];
    [v21 drawInRect:0.0, 0.0, v15, v17];
    [v20 drawInRect:0.0, 0.0, v15, v17];
  }
  if (a5 && a6)
  {
    id v22 = a5;
    id v23 = a6;
    id v24 = [v22 imageWithTintColor:v18];
    [v24 size];
    double v26 = v25;
    double v27 = *(double *)(a7 + 32);
    [v24 size];
    double v29 = v28;
    [v24 drawInRect:0.0, v27, v28, v26];
    [v23 drawInRect:0.0, v27, v29, v26];
  }
  id v30 = [objc_allocWithZone((Class)UILabel) init];
  [v30 setClipsToBounds:0];
  id v31 = [self systemFontOfSize:8.0];
  [v30 setFont:v31];

  id v32 = [self secondaryLabelColor];
  [v30 setTextColor:v32];

  double v44 = 0.0;
  [a2 getWhite:0 alpha:&v44];
  double v33 = round(v44 * 100.0);
  if ((~*(void *)&v33 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v33 <= -1.0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if (v33 >= 256.0) {
    goto LABEL_16;
  }
  int v34 = (int)v33;
  if ((int)v33 < 0x64)
  {
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_10117E810;
    *(void *)(v36 + 56) = &type metadata for UInt8;
    *(void *)(v36 + 64) = &protocol witness table for UInt8;
    *(unsigned char *)(v36 + 32) = v34;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v35 = String._bridgeToObjectiveC()();
  }
  [v30 setText:v35];

  [v30 sizeToFit];
  [v30 frame];
  double v38 = v37;
  double v40 = v39;
  [a1 size];
  double v42 = v41;
  [v30 frame];
  [v30 drawTextInRect:(v42 - v43) * 0.5, *(double *)(a7 + 40), v38, v40];
}

unint64_t sub_101065870()
{
  unint64_t result = qword_10169AB80;
  if (!qword_10169AB80)
  {
    sub_10050BF48(255, &qword_10169AB78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10169AB80);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void sub_10106590C(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100008CCC() packedBacktraceString];
  sub_100008C48();
  sub_100008C60((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v6, v7, v8, v9, v10);
}

void sub_1010659AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101065A40()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to acquire a localized family name for: %@");
}

void sub_101065AD0()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Masquerading font with no localized name found: %@");
}

void sub_101065B60()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101065BF4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101065C88()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101065D1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need a file URL", v2, v3, v4, v5, v6);
}

void sub_101065DA4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = __error();
  strerror(*v2);
  sub_10000BD3C();
  sub_10000BCC4((void *)&_mh_execute_header, v3, v4, "Failed to update zip archive with no cache flag, error: %{public}s", v5, v6, v7, v8, v9);
}

void sub_101065E2C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = NSStringFromClass(v5);
  uint64_t v7 = [a3 domain];
  [a3 code];
  sub_10000BD24();
  sub_10000BD14();
  _os_log_error_impl(v8, v9, v10, v11, v12, 0x34u);
}

void sub_101065F1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't open the archive if it's already open.", v2, v3, v4, v5, v6);
}

void sub_101065FA4(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  [a2 code];
  sub_10000BD24();
  sub_10000BD14();
  _os_log_error_impl(v7, v8, v9, v10, v11, 0x2Au);
}

void sub_10106607C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 path];
  sub_10000BD3C();
  sub_10000BCC4((void *)&_mh_execute_header, v5, v6, "Failed to write to temporary zip file: %@", v7, v8, v9, v10, v11);
}

void sub_101066114(void *a1)
{
  id v1 = a1;
  uint64_t v7 = +[CRLAssertionHandler packedBacktraceString];
  sub_10000BD14();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x12u);
}

void sub_1010661D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d File should be opened.", v2, v3, v4, v5, v6);
}

void sub_10106625C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "File isn't open", v1, 2u);
}

void sub_1010662A0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = __error();
  strerror(*v2);
  sub_10000BD3C();
  sub_10000BCC4((void *)&_mh_execute_header, v3, v4, "Failed to update zip read channel with no cache flag, error: %{public}s", v5, v6, v7, v8, v9);
}

void sub_101066328(void *a1)
{
  id v1 = a1;
  uint64_t v2 = __error();
  strerror(*v2);
  sub_10000BD3C();
  sub_10000BCC4((void *)&_mh_execute_header, v3, v4, "Failed to create read channel with error: %{public}s", v5, v6, v7, v8, v9);
}

void sub_1010663B0()
{
  sub_10000DF44();
  sub_10000DF10(v1, v2, v3, 1.5047e-36);
  sub_10000DF28((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, v5);
}

void sub_1010663F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot initialize with a nil storage.", v2, v3, v4, v5, v6);
}

void sub_10106647C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLWPLayoutManager initWithStorage:owner:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutManager.mm";
  __int16 v6 = 1024;
  int v7 = 110;
  __int16 v8 = v0;
  uint8_t v9 = "_topicNumbers";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106652C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Autogrow with multiple columns is not supported", v2, v3, v4, v5, v6);
}

void sub_1010665B4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout manager mismatch", v2, v3, v4, v5, v6);
}

void sub_10106663C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for 'columnsArray'", v2, v3, v4, v5, v6);
}

void sub_1010666C4(void *a1, uint64_t a2, int a3, NSObject *a4)
{
  *(_DWORD *)a2 = 67110146;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(void *)(a2 + 10) = "+[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeigh"
                         "t:height:alreadyHasMargins:styleProvider:]";
  *(_WORD *)(a2 + 18) = 2082;
  *(void *)(a2 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutManager.mm";
  *(_WORD *)(a2 + 28) = 1024;
  *(_DWORD *)(a2 + 30) = 562;
  *(_WORD *)(a2 + 34) = 2114;
  *(void *)(a2 + 36) = a1;
  id v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d newColumnCount shouldn't be 0. %{public}@", (uint8_t *)a2, 0x2Cu);
}

void sub_101066770(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_101066834(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLSwappableAxesGeometry knobTagForStandardKnobTag:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSwappableAxesGeometry.m";
  __int16 v7 = 1024;
  int v8 = 88;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", (uint8_t *)v2, 0x22u);
}

void sub_1010668E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100008C48();
  sub_100008C60((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_101066984()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLDragAndDropCanvasHighlightDecorator beginHighlightingWithPath:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropCanvasHighlightDecorator.m";
  __int16 v6 = 1024;
  int v7 = 78;
  __int16 v8 = v0;
  uint8_t v9 = "mDragAndDropHighlightRenderable";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101066A34()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLDragAndDropCanvasHighlightDecorator endHighlighting]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropCanvasHighlightDecorator.m";
  __int16 v6 = 1024;
  int v7 = 95;
  __int16 v8 = v0;
  uint8_t v9 = "mDragAndDropHighlightRenderable";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101066AE4(int a1, NSObject *a2)
{
  v2[0] = 67110402;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[CRLBoardItemFactoryObjCHelper p_bezierAndStrokePathDataSubpathsByClippingBezier:andStrokePathData:toPath:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactoryObjCHelper.m";
  __int16 v7 = 1024;
  int v8 = 125;
  __int16 v9 = 2082;
  uint64_t v10 = "BOOLeanPathMap.elementCount";
  __int16 v11 = 2082;
  Swift::String v12 = "clippedPath.elementCount";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_101066BB0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't create an image pattern without an image", v2, v3, v4, v5, v6);
}

void sub_101066C38()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get lightness of a nil color", v2, v3, v4, v5, v6);
}

void sub_101066CC0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get lightness of a nil color", v2, v3, v4, v5, v6);
}

void sub_101066D48(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_101066D80()
{
  sub_100008C80();
  sub_100011FEC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Cu);
}

void sub_101066E2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_101066E64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_101066E9C()
{
  sub_100011FEC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0xCu);
}

void sub_101066F10()
{
  sub_100008C80();
  sub_100011FEC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
}

void sub_101066FAC()
{
  sub_100011FEC();
  _os_log_error_impl(v0, v1, v2, v3, v4, 8u);
}

void sub_101067028(int a1, NSObject *a2)
{
  v3[0] = 67109378;
  v3[1] = a1;
  __int16 v4 = 2114;
  id v5 = +[CRLAssertionHandler packedBacktraceString];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v3, 0x12u);
}

void sub_1010670CC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to remove out of bounds segment index: %lu");
}

void sub_101067154()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set title for out of bounds segment index: %lu");
}

void sub_1010671DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get title for out of bounds segment index: %lu");
}

void sub_101067264()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set image for out of bounds segment index: %lu");
}

void sub_1010672EC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get image for out of bounds segment index: %lu");
}

void sub_101067374()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set width of bounds segment index: %lu");
}

void sub_1010673FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get width for out of bounds segment index: %lu");
}

void sub_101067484()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set edge insets for out of bounds segment index: %lu");
}

void sub_10106750C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get edge insets for out of bounds segment index: %lu");
}

void sub_101067594()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set enabled state for out of bounds segment index: %lu");
}

void sub_10106761C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get enabled state for out of bounds segment index: %lu");
}

void sub_1010676A4()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Controls/CRLiOSMultipaneSegmentedControl.m";
  __int16 v4 = 1024;
  int v5 = 876;
  __int16 v6 = v0;
  __int16 v7 = "segment";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101067750(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  __int16 v6 = "-[CRLBezierHitTester addPath:filled:pathID:crawlingDistance:clippedToRect:]";
  __int16 v7 = 2082;
  int v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierHitTester.mm";
  __int16 v9 = 1024;
  int v10 = 178;
  __int16 v11 = 2048;
  uint64_t v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to add a path with pathID that already exists (%lu)", (uint8_t *)v4, 0x2Cu);
}

void sub_101067810()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Passing a crawlingDistance greater than the default may cause unexpected problems hit testing with some methods.", v2, v3, v4, v5, v6);
}

void sub_101067898()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to remove a path that is not in the hit tester.", v2, v3, v4, v5, v6);
}

void sub_101067920()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method was not designed for use with filled paths.", v2, v3, v4, v5, v6);
}

void sub_1010679A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathsCrossingPath:withSearchThreshold: does not support large crawling distances.", v2, v3, v4, v5, v6);
}

void sub_101067A30()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageRepSizingState initWithDesiredSize:provider:maskPath:wideGamutCanvas:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepSizingState.m";
  __int16 v6 = 1024;
  int v7 = 32;
  __int16 v8 = v0;
  __int16 v9 = "provider";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101067AE0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageRepSizingState generateSizedImage]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepSizingState.m";
  __int16 v6 = 1024;
  int v7 = 59;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong thread", v2, 0x22u);
}

void sub_101067B80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d storage is nil", v2, v3, v4, v5, v6);
}

void sub_101067C08()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d storage is nil", v2, v3, v4, v5, v6);
}

void sub_101067C90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to clip with null update rect", v2, v3, v4, v5, v6);
}

void sub_101067D18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid line fragment range", v2, v3, v4, v5, v6);
}

void sub_101067DA0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected color fill", v2, v3, v4, v5, v6);
}

void sub_101067E28()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invisibles mismatch", v2, v3, v4, v5, v6);
}

void sub_101067EB0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mismatched adornment counts", v2, v3, v4, v5, v6);
}

void sub_101067F38(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)uint64_t v4 = 2082;
  *(void *)&_DWORD v4[2] = "+[CRLPasteboard pasteboardWithUniqueName]_block_invoke";
  *(_WORD *)&v4[10] = 2082;
  *(void *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 185;
  *(_WORD *)&v4[26] = 2114;
  *(void *)&v4[28] = a1;
  sub_100008CEC((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pasteboard already exists with unique name %{public}@", v3, *(void *)v4, *(void *)&v4[8], *(void *)&v4[16], *(void *)&v4[24], *(_DWORD *)&v4[32]);
}

void sub_101067FE4(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to create pasteboard with name %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10106805C(void *a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)uint64_t v4 = 2082;
  *(void *)&_DWORD v4[2] = "-[CRLPasteboardUIPasteboard reloadPasteboardItemIndexCacheIfNeeded]";
  *(_WORD *)&v4[10] = 2082;
  *(void *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 849;
  *(_WORD *)&v4[26] = 2048;
  *(void *)&v4[28] = *a1;
  sub_100008CEC((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected pasteboard item count should be zero, was %tu.", v3, *(void *)v4, *(void *)&v4[8], *(void *)&v4[16], *(void *)&v4[24], *(_DWORD *)&v4[32]);
}

void sub_10106810C(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLDragAndDropInfo initWithPlatformDraggingInfo:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropInfo.m";
  __int16 v7 = 1024;
  int v8 = 63;
  __int16 v9 = 2082;
  int v10 = "_itemSource";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010681C8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106825C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010682F0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068384()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068418()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010684AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068540()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010685D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068668()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010686FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068790()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLFreehandDrawingPKSelectionManager that has already been torn down.", v2, v3, v4, v5, v6);
}

void sub_101068818()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLFreehandDrawingPKSelectionManager.", v2, v3, v4, v5, v6);
}

void sub_1010688A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not begin suppressing smart selection when it is already suppressed.", v2, v3, v4, v5, v6);
}

void sub_101068928()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not end suppressing smart selection when it is not suppressed.", v2, v3, v4, v5, v6);
}

void sub_1010689B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Drawing attachment has no drawing.", v2, v3, v4, v5, v6);
}

void sub_101068A38()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068ACC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101068B60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101068BE8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasCommandSelectionBehavior initWithCanvasEditor:type:selectionPath:selectionFlags:commitSelectionFlags:f"
       "orwardSelectionFlags:reverseSelectionFlags:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCanvasCommandSelectionBehavior.m";
  __int16 v6 = 1024;
  int v7 = 26;
  __int16 v8 = v0;
  __int16 v9 = "editor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101068C98()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasCommandSelectionBehavior initWithCanvasEditor:type:constructedInfos:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCanvasCommandSelectionBehavior.m";
  __int16 v6 = 1024;
  int v7 = 95;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Constructed infos should not be provided for this selection type", v2, 0x22u);
}

void sub_101068D38(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  __int16 v6 = "-[CRLPlatformControlState hash]";
  __int16 v7 = 2082;
  __int16 v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLPlatformControlState.m";
  __int16 v9 = 1024;
  int v10 = 65;
  __int16 v11 = 2048;
  uint64_t v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad value: %zd", (uint8_t *)v4, 0x2Cu);
}

void sub_101068DF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only vector images are supported", v2, v3, v4, v5, v6);
}

void sub_101068E80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil image is set", v2, v3, v4, v5, v6);
}

void sub_101068F08()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only vector images are supported", v2, v3, v4, v5, v6);
}

void sub_101068F90()
{
  sub_100008C80();
  sub_10000BCE4();
}

void sub_101069018()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't have an image to use", v2, v3, v4, v5, v6);
}

void sub_1010690A0(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100008CCC() packedBacktraceString];
  sub_100045670();
  sub_100008C60((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v6, v7, v8, v9, 2u);
}

void sub_101069148()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called i_common init twice on same object!", v2, v3, v4, v5, v6);
}

void sub_1010691D0(uint64_t a1, int a2)
{
  v5[0] = 67110146;
  v5[1] = a2;
  __int16 v6 = 2082;
  uint64_t v7 = "-[CRLBitmapImageProvider isValid]_block_invoke_2";
  __int16 v8 = 2082;
  sub_100008C94();
  int v9 = 174;
  __int16 v10 = v2;
  int v11 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't update validation failure type during validation! isValid? %i", (uint8_t *)v5, 0x28u);
}

void sub_101069290()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be drawing an invalid image provider", v2, v3, v4, v5, v6);
}

void sub_101069318(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010693C8()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLBitmapImageProvider cachedCGImageOfNearestSizeOrNULLPreferringSize:withContentsScaleProvider:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 230;
  __int16 v7 = v1;
  uint64_t v8 = "contentsScaleProvider";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_101069470(void *a1)
{
  id v1 = a1;
  os_log_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_101069520()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
}

void sub_1010695A8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_101069658()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get an image out of an invalid image provider.", v2, v3, v4, v5, v6);
}

void sub_1010696E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_101069790()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
}

void sub_101069818(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010698C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contents scale provider should be nil", v2, v3, v4, v5, v6);
}

void sub_101069950(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_101069A00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
}

void sub_101069A88()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never load full-sized image if we have been asked to load the largest safe image!", v2, v3, v4, v5, v6);
}

void sub_101069B10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never load largestSafeImage if we can load the full-sized image!", v2, v3, v4, v5, v6);
}

void sub_101069B98()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLBitmapImageProvider p_newImageOfSize:fromSource:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 1001;
  __int16 v7 = v1;
  uint64_t v8 = "sourceRef";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_101069C40(void *a1, uint64_t a2, int a3)
{
  sub_10000DF10((uint64_t)a1, a2, a3, 1.5047e-36);
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, 0x12u);
}

void sub_101069C98(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "void nextPivotAndBlackVectors(CGPoint, CGPoint, CGPoint &, CGPoint &)";
  __int16 v5 = 2082;
  int v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm";
  __int16 v7 = 1024;
  int v8 = 106;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected pivot and black points while tracing", (uint8_t *)v2, 0x22u);
}

void sub_101069D44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d iOS and QL do not support setting the guide color", v2, v3, v4, v5, v6);
}

void sub_101069DCC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "icc";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_101069E64()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "rep";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_101069EFC(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_101069FB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning alignment with no reps", v2, v3, v4, v5, v6);
}

void sub_10106A03C(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_10106A0F4()
{
  sub_10004F65C();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide state unexpected when begin alignment operation! %lu");
}

void sub_10106A184(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_10106A23C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106A2C4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "_alignmentFrameInRootByLayout";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
}

void sub_10106A35C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not end previous alignment operation before beginning new one", v2, v3, v4, v5, v6);
}

void sub_10106A3E4()
{
  sub_10004F65C();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide state unexpected when do second pass on begin generation! %lu");
}

void sub_10106A478(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  int v11 = a1;
  v22.origin.x = a3;
  v22.origin.y = a4;
  v22.size.width = a5;
  v22.size.height = a6;
  uint64_t v12 = NSStringFromCGRect(v22);
  v15[0] = 67110146;
  v15[1] = a2;
  __int16 v16 = 2082;
  sub_100008CC0();
  double v17 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m";
  __int16 v18 = 1024;
  int v19 = 800;
  __int16 v20 = 2112;
  uint64_t v21 = v13;
  sub_10004F630((void *)&_mh_execute_header, v11, v14, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad rect for snap rect! %@", (uint8_t *)v15);
}

void sub_10106A588()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106A610(int a1, NSObject *a2)
{
  id v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a1;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, a2, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_10106A6C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to do guide operation for an unsupported knob type", v2, v3, v4, v5, v6);
}

void sub_10106A74C(int a1, NSObject *a2)
{
  id v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a1;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, a2, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_10106A800()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106A888()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106A910()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106A998()
{
  sub_10004F65C();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Working on cancellation/cleanup when state doesn't expect it! %lu");
}

void sub_10106AA2C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected knob tag %zu");
}

void sub_10106AAC8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected edge type", v2, v3, v4, v5, v6);
}

void sub_10106AB50()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "value";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_10106ABE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_10106AC70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_10106ACF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_10106AD80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide must have an associated spacing.", v2, v3, v4, v5, v6);
}

void sub_10106AE08()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSCanvasDragInteractionDelegate dragInteraction:prefersFullSizePreviewsForSession:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSCanvasDragInteractionDelegate.m";
  __int16 v6 = 1024;
  int v7 = 131;
  __int16 v8 = v0;
  int v9 = "canvasDragItem";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106AEB8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSCanvasDragInteractionDelegate dragInteraction:sessionAllowsMoveOperation:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSCanvasDragInteractionDelegate.m";
  __int16 v6 = 1024;
  int v7 = 138;
  __int16 v8 = v0;
  int v9 = "canvasDragItem";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106AF68()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPDFImageProvider i_commonInit]";
  sub_10000BCE4();
  int v3 = 40;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called i_common init twice on same object!", v1, 0x22u);
}

void sub_10106AFFC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPDFImageProvider drawImageInContext:rect:]";
  sub_10000BCE4();
  int v3 = 103;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be drawing an invalid image provider", v1, 0x22u);
}

void sub_10106B090(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  __int16 v6 = [(id)sub_100008CCC() error];
  v7[0] = 67110146;
  v7[1] = a3;
  __int16 v8 = 2082;
  int v9 = "-[CRLMoviePosterImageGenerator p_copyCGImageUsingAssetReaderForTime:]";
  __int16 v10 = 2082;
  int v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  __int16 v12 = 1024;
  int v13 = 111;
  __int16 v14 = 2112;
  double v15 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to copy buffer when generating poster frame using AVAssetReader (error: %@). Falling back to AVAssetImageGenerator.", (uint8_t *)v7, 0x2Cu);
}

void sub_10106B180()
{
  sub_100008C80();
  int v3 = "-[CRLMoviePosterImageGenerator p_copyCGImageUsingAssetImageGeneratorForTime:error:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  __int16 v6 = 1024;
  int v7 = 165;
  __int16 v8 = v0;
  int v9 = "_assetImageGenerator";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106B230()
{
  sub_100008C80();
  int v3 = "-[CRLMoviePosterImageGenerator generateCGImageAsynchronouslyForTime:completionHandler:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  __int16 v6 = 1024;
  int v7 = 214;
  __int16 v8 = v0;
  int v9 = "handler";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106B2E0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLSwatchRenderingOperation provideSwatchForLaterDelivery:]";
  sub_10000BCE4();
  int v3 = 286;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have two swatches!", v1, 0x22u);
}

void sub_10106B374()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLSwatchRenderingOperation doWorkWithReadLock]";
  sub_10000BCE4();
  int v3 = 303;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses must override", v1, 0x22u);
}

void sub_10106B408()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  int v4 = 89;
  __int16 v5 = v0;
  __int16 v6 = "_categorySort != nil";
  sub_10004F630((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
}

void sub_10106B4A4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  int v4 = 86;
  __int16 v5 = v0;
  __int16 v6 = "_libraryURL != nil";
  sub_10004F630((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
}

void sub_10106B540()
{
  sub_100008D0C();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_10005A878();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shape library shape from result is nil: %@", v1);
}

void sub_10106B5D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106B65C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106B6E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10106B76C(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint8_t v6 = [sub_100008CCC() p_libraryURL];
  v8[0] = 67110146;
  v8[1] = a3;
  __int16 v9 = 2082;
  sub_100008CC0();
  __int16 v10 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_10005A878();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v3, v7, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No data found at search library URL: %@", (uint8_t *)v8);
}

void sub_10106B840(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  CFStringRef v3 = @"shape_library";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: Could not parse %@ with error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_10106B8CC()
{
  sub_100008C80();
  sub_100008CC0();
  CFStringRef v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_10005A878();
  int v4 = 311;
  __int16 v5 = 2112;
  CFStringRef v6 = @"shape_library";
  __int16 v7 = 2112;
  uint64_t v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error: Could not parse %@ with error: %@", v2, 0x36u);
}

void sub_10106B984()
{
  sub_100008D0C();
  sub_100008CC0();
  int v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_10005A878();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Found no categories in the shape librarian data: %@", v1);
}

void sub_10106BA18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shape Librarian data file did not have a keywordDelimiter.", v2, v3, v4, v5, v6);
}

void sub_10106BAA0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  int v4 = 391;
  __int16 v5 = v0;
  uint8_t v6 = "library";
  sub_10004F630((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_10106BB3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not properly clean up drag and drop!", v2, v3, v4, v5, v6);
}

void sub_10106BBC4()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106BC60()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106BCFC()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106BD98(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to get object from drop of native objects", v1, 2u);
}

void sub_10106BDDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never transition to state None. That's only for starting!", v2, v3, v4, v5, v6);
}

void sub_10106BE64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only receive promises from state Waiting.", v2, v3, v4, v5, v6);
}

void sub_10106BEEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only begin waiting for promises from state None.", v2, v3, v4, v5, v6);
}

void sub_10106BF74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only receive promises from state Waiting.", v2, v3, v4, v5, v6);
}

void sub_10106BFFC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not transition to a new state after we have completed a drag.", v2, v3, v4, v5, v6);
}

void sub_10106C084(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLTextInputResponder(ObjCExtension) forwardInvocation:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLTextInputResponder.m";
  __int16 v7 = 1024;
  int v8 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The OS undo gestures should not be sending us selectors we can't respond to!", (uint8_t *)v2, 0x22u);
}

void sub_10106C130()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C1B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C240()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C2C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C350()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C3D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C460()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C4E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
}

void sub_10106C570(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMetalShaderManager.m";
  __int16 v7 = 1024;
  int v8 = 57;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create library, error %@", (uint8_t *)v4, 0x2Cu);
}

void sub_10106C628()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106C6C0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106C758()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106C7F0(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  uint64_t v4 = [0 domain];
  int v5 = 138544130;
  uint8_t v6 = v3;
  __int16 v7 = 2114;
  int v8 = v4;
  __int16 v9 = 2048;
  id v10 = [0 code];
  __int16 v11 = 2112;
  uint64_t v12 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to register native object to item providererrorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v5, 0x2Au);
}

void sub_10106C8E4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10106C98C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]";
  sub_10000BCE4();
  int v3 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Somehow didn't end up with the same number of board items", v1, 0x22u);
}

void sub_10106CA20(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10106CAC8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106CB5C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106CBF0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106CC84()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoard"
       "Items:]_block_invoke_2";
  sub_10000BCE4();
  int v3 = 165;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requestedViewScale should never be negative.", v1, 0x22u);
}

void sub_10106CD18()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106CDAC(void *a1, uint8_t *buf, int a3, os_log_t log)
{
  *(_DWORD *)buf = 67109378;
  *((_DWORD *)buf + 1) = a3;
  *((_WORD *)buf + 4) = 2114;
  *(void *)(buf + 10) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
}

void sub_10106CE14()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Angle out of range", v2, v3, v4, v5, v6);
}

void sub_10106CE9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Angle out of range", v2, v3, v4, v5, v6);
}

void sub_10106CF24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLSizeExpandedToMatchAspectRatio() actually shrank the size", v2, v3, v4, v5, v6);
}

void sub_10106CFAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot give scale = 0 for CRLRoundedRectForScale!", v2, v3, v4, v5, v6);
}

void sub_10106D034()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot give scale = 0 for CRLRoundedRectForScale!", v2, v3, v4, v5, v6);
}

void sub_10106D0BC(uint8_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = [a3 registeredTypeIdentifiers];
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Content Identifiers: %@", a1, 0xCu);
}

void sub_10106D140(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [UTTypeRAWImage identifier];
  sub_10000BD3C();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Unable to load shared content of type %{public}@. Provided item is nil", v3, 0xCu);
}

void sub_10106D1EC(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  uint8_t v6 = NSStringFromClass(v5);
  uint64_t v7 = [a2 domain];
  [a2 code];
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v8, v9, "Error copying shared item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v10, v11, v12, v13, v14);
}

void sub_10106D2A0()
{
  sub_10000BD3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Image file representation: %@", v1, 0xCu);
}

void sub_10106D314(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  uint8_t v6 = NSStringFromClass(v5);
  uint64_t v13 = [*(id *)(*(void *)(*(void *)a1 + 8) + 40) domain];
  [*(id *)(*(void *)(*(void *)a1 + 8) + 40) code];
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error copying shared item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, 2u);
}

void sub_10106D418()
{
  sub_10000BD3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Image file copied to: %@", v1, 0xCu);
}

void sub_10106D48C()
{
  sub_10000BD3C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to resolve extension item to a supported type: %@", v1, 0xCu);
}

void sub_10106D500(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  uint8_t v6 = [a2 identifier];
  uint64_t v7 = [a3 localizedDescription];
  int v8 = 138543618;
  uint64_t v9 = v6;
  __int16 v10 = 2114;
  uint64_t v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to load shared content of type %{public}@ with error %{public}@", (uint8_t *)&v8, 0x16u);
}

void sub_10106D5D4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v7 = (objc_class *)sub_10006AA94();
  int v8 = NSStringFromClass(v7);
  uint64_t v9 = [a3 domain];
  int v10 = 138413314;
  uint64_t v11 = a1;
  __int16 v12 = 2114;
  uint64_t v13 = v8;
  __int16 v14 = 2114;
  double v15 = v9;
  __int16 v16 = 2048;
  id v17 = [a3 code];
  __int16 v18 = 2112;
  int v19 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to get filetype for URL (%@): errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x34u);
}

void sub_10106D6D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment failed", v2, v3, v4, v5, v6);
}

void sub_10106D75C(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint8_t v6 = [(id)sub_100008CCC() description];
  v7[0] = 67110146;
  v7[1] = a3;
  __int16 v8 = 2082;
  uint64_t v9 = "+[CRLBrushStrokeLoader p_clearOnDiskCache]";
  __int16 v10 = 2082;
  uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  __int16 v12 = 1024;
  int v13 = 231;
  __int16 v14 = 2114;
  double v15 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %{public}@", (uint8_t *)v7, 0x2Cu);
}

void sub_10106D84C()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLBrushStrokeLoader p_loadImageForBrush:intoStorage:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  __int16 v6 = 1024;
  int v7 = 346;
  __int16 v8 = v0;
  uint64_t v9 = "bounds";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106D8FC()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLBrushStrokeLoader p_loadImageForBrush:intoStorage:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  __int16 v6 = 1024;
  int v7 = 340;
  __int16 v8 = v0;
  uint64_t v9 = "paths";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106D9AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No sections", v2, v3, v4, v5, v6);
}

void sub_10106DA34(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLFreehandDrawingToolAbstractPathInsertion p_preexistingFreehandDrawingLayoutForInsertingShapeWithFrameInRoot:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolAbstractPathInsertion.m";
  __int16 v7 = 1024;
  int v8 = 212;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be able to get z-order index path for freehand drawing. Bailing early to avoid accidental overlaps.", (uint8_t *)v2, 0x22u);
}

void sub_10106DAE0(int a1, NSObject *a2)
{
  v2[0] = 67110402;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLFreehandDrawingToolAbstractPathInsertion p_updateOrCreateParentDrawingToBestMatch]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolAbstractPathInsertion.m";
  __int16 v7 = 1024;
  int v8 = 425;
  __int16 v9 = 2082;
  __int16 v10 = "closestDrawingLayout";
  __int16 v11 = 2082;
  __int16 v12 = "initialDrawingLayout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_10106DBAC(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  __int16 v11 = a1;
  v22.origin.x = a3;
  v22.origin.y = a4;
  v22.size.width = a5;
  v22.size.height = a6;
  __int16 v12 = NSStringFromCGRect(v22);
  v13[0] = 67110146;
  v13[1] = a2;
  __int16 v14 = 2082;
  double v15 = "-[CRLMultiselectResizeLayout computeLayoutGeometry]";
  __int16 v16 = 2082;
  id v17 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMultiselectResizeLayout.m";
  __int16 v18 = 1024;
  int v19 = 97;
  __int16 v20 = 2114;
  uint64_t v21 = v12;
  _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine proper layout geometry! Got %{public}@", (uint8_t *)v13, 0x2Cu);
}

void sub_10106DCC8(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLMultiselectResizeLayout reliedOnLayouts]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMultiselectResizeLayout.m";
  __int16 v7 = 1024;
  int v8 = 105;
  __int16 v9 = 2082;
  __int16 v10 = "self.layoutController";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10106DD84(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPShapeRep initWithLayout:canvas:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeRep.m";
  __int16 v7 = 1024;
  int v8 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad layout class", (uint8_t *)v2, 0x22u);
}

void sub_10106DE30(int a1, NSObject *a2)
{
  v2[0] = 67110402;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPShapeRep updateChildrenFromLayout]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeRep.m";
  __int16 v7 = 1024;
  int v8 = 180;
  __int16 v9 = 2082;
  __int16 v10 = "self.containedRep.layout";
  __int16 v11 = 2082;
  __int16 v12 = "self.layout.textLayout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_10106DEFC(void *a1, void *a2)
{
  __int16 v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  __int16 v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  int v7 = 138544130;
  int v8 = v5;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  __int16 v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating NSString from data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_10106DFF0(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLTextBoxingBoardItemProvider newBoardItemWithFactory:bakedSize:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLTextBoxingBoardItemProvider.m";
  __int16 v7 = 1024;
  int v8 = 95;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Either the plain text string or the rich text string should be non-nil", (uint8_t *)v2, 0x22u);
}

void sub_10106E09C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPLongPressGestureRecognizer touchesMoved:withEvent:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPLongPressGestureRecognizer.m";
  __int16 v7 = 1024;
  int v8 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Time travel should have had a non-zero value here", (uint8_t *)v2, 0x22u);
}

void sub_10106E148()
{
  sub_100008C80();
  __int16 v3 = "+[CRLShapeLibraryShape p_stringForKey:inBaseStringsTableWithName:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryShape.m";
  __int16 v6 = 1024;
  int v7 = 93;
  __int16 v8 = v0;
  __int16 v9 = "englishString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106E1F8()
{
  sub_100008C80();
  __int16 v3 = "-[CRLShapeLibraryShape positionInCategoryWithID:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryShape.m";
  __int16 v6 = 1024;
  int v7 = 150;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must pass a categoryID when fetching a shape library shape's position.", v2, 0x22u);
}

void sub_10106E298(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "-[CRLSandboxedURL initWithURL:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSandboxedURL.m";
  __int16 v8 = 1024;
  int v9 = 39;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sandboxed URL should not be initialized with a non-file URL. URL=%@", (uint8_t *)v3, 0x2Cu);
}

void sub_10106E354()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Copy should never be nil.", v2, v3, v4, v5, v6);
}

void sub_10106E3DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sanboxing access didn't transfer as expected to sandboxed URL copy.", v2, v3, v4, v5, v6);
}

void sub_10106E464()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Copy should never be nil.", v2, v3, v4, v5, v6);
}

void sub_10106E4EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sanboxing access didn't transfer as expected to sandboxed URL copy.", v2, v3, v4, v5, v6);
}

void sub_10106E574()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageCompatibilityChecker initWithImageData:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityChecker.m";
  __int16 v6 = 1024;
  int v7 = 40;
  __int16 v8 = v0;
  int v9 = "imageData != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10106E624()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageCompatibilityChecker checkCompatibilityUpToLevel:completionHandler:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityChecker.m";
  __int16 v6 = 1024;
  int v7 = 49;
  __int16 v8 = v0;
  int v9 = "maxDesiredCompatibilityLevel > CRLMediaCompatibilityLevelNone";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10106E6D4(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLStyledEditor copyStyle:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLStyledEditor.m";
  __int16 v7 = 1024;
  int v8 = 160;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only copy style with a single object selected", (uint8_t *)v2, 0x22u);
}

void sub_10106E780()
{
  sub_100008C80();
  __int16 v3 = "-[CRLCanvasImager initWithBoard:renderForWideGamut:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasImager.m";
  __int16 v6 = 1024;
  int v7 = 83;
  __int16 v8 = v0;
  int v9 = "board";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106E830()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not reuse an imager unless it has been explicitly marked as safe to reuse", v2, v3, v4, v5, v6);
}

void sub_10106E8B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call viewScale if scaledImageSize has been set.", v2, v3, v4, v5, v6);
}

void sub_10106E940()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d viewScale must be > 0.0", v2, v3, v4, v5, v6);
}

void sub_10106E9C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call contentsScale if scaledImageSize has been set.", v2, v3, v4, v5, v6);
}

void sub_10106EA50()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d contentsScale must be > 0.0", v2, v3, v4, v5, v6);
}

void sub_10106EAD8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call scaledImageSize if viewScale or contentsScale has been set.", v2, v3, v4, v5, v6);
}

void sub_10106EB60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d given a non-integral scaled image size", v2, v3, v4, v5, v6);
}

void sub_10106EBE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't make an image with 0 width or height", v2, v3, v4, v5, v6);
}

void sub_10106EC70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d given a non-integral maximum image size", v2, v3, v4, v5, v6);
}

void sub_10106ECF8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasImager newImage]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasImager.m";
  __int16 v6 = 1024;
  int v7 = 221;
  __int16 v8 = v0;
  int v9 = "board";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10106EDA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
}

void sub_10106EE30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
}

void sub_10106EEB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
}

void sub_10106EF40()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d both ratios in imager are zero!", v2, v3, v4, v5, v6);
}

void sub_10106EFC8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Using a specific scaled image size and max image size at the same time is unsupported.", v2, v3, v4, v5, v6);
}

void sub_10106F050()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be reusing context", v2, v3, v4, v5, v6);
}

void sub_10106F0D8(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[NSException(CRLAdditions) crl_raiseWithError:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSException_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 14;
  __int16 v9 = 2082;
  __int16 v10 = "error != nil";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v2, 0x2Cu);
}

void sub_10106F194(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "-[NSException(CRLAdditions) crl_error]";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSException_CRLAdditions.m";
  __int16 v8 = 1024;
  int v9 = 28;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected NSException value for CRLErrorExceptionUserInfoKey: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10106F250()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106F2E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106F378()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSPencilTrayColorWell toggleColorPickerPresentation]";
  sub_10000BCE4();
  int v3 = 110;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d PencilKit should handle dismissing other presented view controllers before we get here.", v1, 0x22u);
}

void sub_10106F40C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106F4A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106F534(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 310;
  __int16 v6 = v1;
  __int16 v7 = "viewController";
  __int16 v8 = v1;
  int v9 = "_colorPicker";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_10106F5F4()
{
  sub_100008C80();
  os_log_t v2 = "-[CRLiOSPencilTrayColorWell colorPickerViewControllerDidFinish:]";
  sub_10000BCE4();
  int v3 = 325;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color picker should not tell us it finished before telling us about the final color.", v1, 0x22u);
}

void sub_10106F688(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 322;
  __int16 v6 = v1;
  __int16 v7 = "viewController";
  __int16 v8 = v1;
  int v9 = "_colorPicker";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_10106F748(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLiOSPencilDownGestureRecognizer touchesBegan:withEvent:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSPencilDownGestureRecognizer.m";
  __int16 v7 = 1024;
  int v8 = 25;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only see pencil input to this gesture.", (uint8_t *)v2, 0x22u);
}

void sub_10106F7F4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Data causing exception: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10106F86C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  __int16 v5 = (objc_class *)objc_opt_class();
  __int16 v6 = NSStringFromClass(v5);
  __int16 v7 = [a3 domain];
  [a3 code];
  sub_1000857AC();
  sub_1000857E4((void *)&_mh_execute_header, v8, v9, "Unable to decode data %p: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v10, v11, v12, v13, v14);
}

void sub_10106F934(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  __int16 v5 = (objc_class *)objc_opt_class();
  __int16 v6 = NSStringFromClass(v5);
  __int16 v7 = [a3 domain];
  [a3 code];
  sub_1000857AC();
  sub_1000857E4((void *)&_mh_execute_header, v8, v9, "Error reading data from path %@, errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v10, v11, v12, v13, v14);
}

void sub_10106F9FC(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v11 = a1;
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  uint64_t v12 = NSStringFromCGRect(v21);
  v14[0] = 67110146;
  v14[1] = a2;
  __int16 v15 = 2082;
  sub_100008CC0();
  __int16 v16 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTransformLayout.m";
  __int16 v17 = 1024;
  int v18 = 96;
  __int16 v19 = 2114;
  uint64_t v20 = v13;
  _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine proper layout geometry! Got %{public}@", (uint8_t *)v14, 0x2Cu);
}

void sub_10106FB14()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106FBAC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106FC44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106FCDC(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  uint8_t v6 = "-[CRLImageCompatibilityConverter initWithImageData:desiredCompatibilityLevel:assetOwner:]";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 63;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image converter created without need for conversion (level %zd)", (uint8_t *)v4, 0x2Cu);
}

void sub_10106FD94()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10106FE2C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106FEC4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10106FF5C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  [a2 code];
  sub_1000886AC();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_101070044(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  [a2 code];
  sub_1000886AC();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_10107012C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  [a2 code];
  sub_1000886AC();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_101070214()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLTemporaryDirectory path]";
  sub_10000BCE4();
  int v3 = 71;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Directory has already been removed", v1, 0x22u);
}

void sub_1010702A8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLTemporaryDirectory removeDirectory]";
  sub_10000BCE4();
  int v3 = 92;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Directory has already been removed", v1, 0x22u);
}

void sub_10107033C(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to remove CRLTemporaryDirectory. Error: %@, path: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1010703C8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLTemporaryDirectory _createDirectoryWithSignature:subdirectory:error:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTemporaryDirectory.m";
  __int16 v6 = 1024;
  int v7 = 114;
  __int16 v8 = v0;
  uint64_t v9 = "secretSubdirectoryNameBase";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101070478()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected editor controller!", v2, v3, v4, v5, v6);
}

void sub_101070500()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Callers to -[CRLCanvasEditor maskWithShape:] must have a -[tag] method to specify the shape type to use for the image mask.", v2, v3, v4, v5, v6);
}

void sub_101070588()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas editor expects canvas selection!", v2, v3, v4, v5, v6);
}

void sub_101070610()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas editor expects canvas selection!", v2, v3, v4, v5, v6);
}

void sub_101070698()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a command group to be open.", v2, v3, v4, v5, v6);
}

void sub_101070720()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be given file promises in normal paste logic! App being copied from is misbehaving.", v2, v3, v4, v5, v6);
}

void sub_1010707A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d couldn't find selected info in all drawables!", v2, v3, v4, v5, v6);
}

void sub_101070830()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingsAttachment teardown]";
  sub_10000BCE4();
  int v3 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLFreehandDrawingsAttachment that has already been torn down.", v1, 0x22u);
}

void sub_1010708C4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingsAttachment dealloc]";
  sub_10000BCE4();
  int v3 = 58;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLFreehandDrawingsAttachment.", v1, 0x22u);
}

void sub_101070958(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLCanvasLayer setController:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayer.m";
  __int16 v7 = 1024;
  int v8 = 193;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't try to set canvasLayer's controller more than once", (uint8_t *)v2, 0x22u);
}

void sub_101070A04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We should flip around which constraints are enabled by default.", v2, v3, v4, v5, v6);
}

void sub_101070A8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101070B24()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101070BBC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101070C54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101070CDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to unhide Quick Select HUD but the HUD is not hidden.", v2, v3, v4, v5, v6);
}

void sub_101070D64(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 752;
  __int16 v6 = v1;
  __int16 v7 = "_hudHidingCount";
  __int16 v8 = v1;
  uint64_t v9 = "0";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_101070E24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101070EAC()
{
  +[CRLAssertionHandler packedBacktraceString];
  sub_1000A1314();
  sub_100045680((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v2, v3, v4, v5, v6);
}

uint64_t sub_101070F30()
{
  sub_100008C80();
  uint64_t v3 = "-[NSArray(CRLAdditions) crl_arrayByRemovingFirstObject]";
  sub_10000BCE4();
  int v4 = 239;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't remove the first object of an empty array!", v2, 0x22u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D1588);
  return 0;
}

uint64_t sub_101070FF8()
{
  sub_100008C80();
  uint64_t v3 = "-[NSArray(CRLAdditions) crl_onlyObject]";
  sub_10000BCE4();
  int v4 = 400;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d As this method returns the only object in the array, it only makes sense if the array has at most one object.", v2, 0x22u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D1680);
  return 0;
}

void sub_1010710C0(uint64_t a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a3;
  *((_WORD *)buf + 6) = 2082;
  *(void *)(buf + 14) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error opening file at path %s: %{public}s", buf, 0x16u);
}

void sub_101071118(void *a1, int a2)
{
  id v3 = a1;
  strerror(a2);
  sub_1000A364C((void *)&_mh_execute_header, v4, v5, "Error cleaning up dispatch channel: %{public}s", v6, v7, v8, v9, 2u);
}

void sub_1010711A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_10107122C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_1010712B4()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLFileIOChannel close]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m";
  __int16 v6 = 1024;
  int v7 = 259;
  __int16 v8 = v0;
  uint64_t v9 = "_channel";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101071364()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel file descriptor is closed", v2, v3, v4, v5, v6);
}

void sub_1010713EC(void *a1, void *a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  int v7 = 138544130;
  __int16 v8 = v2;
  __int16 v9 = 2114;
  uint64_t v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  uint8_t v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "F_FULLFSYNC failed, errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_1010714DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_101071564()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_1010715EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_101071674()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel file descriptor is closed", v2, v3, v4, v5, v6);
}

void sub_1010716FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_101071784()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_10107180C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPSmartField isEquivalentToObject:]";
  sub_10000BCE4();
  int v3 = 112;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect to have a UUIDString for other object.", v1, 0x22u);
}

void sub_1010718A0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPSmartField isEquivalentToObject:]";
  sub_10000BCE4();
  int v3 = 111;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect to have a UUIDString.", v1, 0x22u);
}

void sub_101071934()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010719C8(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPDragAndDropHelper.m";
  __int16 v7 = 1024;
  int v8 = 298;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d source selection %@ is not a range", (uint8_t *)v4, 0x2Cu);
}

void sub_101071A80()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071B14()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLWPDragAndDropHelper handleDragOperation:withDragInfo:atUnscaledPoint:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPDragAndDropHelper.m";
  __int16 v6 = 1024;
  int v7 = 235;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid drag selection", v2, 0x22u);
}

void sub_101071BB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071C48()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071CDC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071D70()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071E04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101071E98()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingLayout transformLayoutDidBeginDynamicOperation]";
  sub_10000BCE4();
  int v3 = 416;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only begin a transform dynamic operation when not in one already.", v1, 0x22u);
}

void sub_101071F2C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingLayout transformLayoutDidEndDynamicOperation]";
  sub_10000BCE4();
  int v3 = 422;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only end a transform dynamic operation when in one already.", v1, 0x22u);
}

void sub_101071FC0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072054()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010720E8(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLGroupRep recursivelyDrawInContext:keepingChildrenPassingTest:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupRep.m";
  __int16 v7 = 1024;
  int v8 = 93;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid group transform; bailing out on group",
    (uint8_t *)v2,
    0x22u);
}

void sub_101072194(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[UIResponder(CRLAdditions) crl_textInputSource]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/UIResponder_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 19;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Responder does not respond to _textInputSource.", (uint8_t *)v2, 0x22u);
}

void sub_101072240()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010722D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072368()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010723FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072490()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072524()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_10005A878();
  sub_100018060();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
}

void sub_1010725B8()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_10005A878();
  sub_100018060();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
}

void sub_10107264C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010726E0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072774()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-error provider has zero size.", v2, v3, v4, v5, v6);
}

void sub_1010727FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contentsScaleProvider should be nil", v2, v3, v4, v5, v6);
}

void sub_101072884()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bogus fill technique to apply to renderable", v2, v3, v4, v5, v6);
}

void sub_10107290C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying image fill with unsupported properties to CRLCanvasRenderable", v2, v3, v4, v5, v6);
}

void sub_101072994()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072A28()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072ABC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072B50(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint8_t v6 = [(id)sub_100008CCC() imageData];
  v9[0] = 67110146;
  v9[1] = a3;
  __int16 v10 = 2082;
  sub_100008CC0();
  __int16 v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_10005A878();
  int v12 = 734;
  __int16 v13 = 2112;
  uint64_t v14 = v7;
  sub_10004F630((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't draw CRLAsset with unknown image type: %@", (uint8_t *)v9);
}

void sub_101072C30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rectForFill must equal or contain the path bounds", v2, v3, v4, v5, v6);
}

void sub_101072CB8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072D4C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101072DE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image provider has error for image fill.", v2, v3, v4, v5, v6);
}

void sub_101072E68()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image provider for image fill could not be validated and is nil.", v2, v3, v4, v5, v6);
}

void sub_101072EF0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image fill has a null tint color.", v2, v3, v4, v5, v6);
}

void sub_101072F78()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_10005A878();
  sub_100018060();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
}

void sub_10107300C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scale math changed the scale", v2, v3, v4, v5, v6);
}

void sub_101073094()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't set shouldTouchesOutsideCancel after loading the view", v2, v3, v4, v5, v6);
}

void sub_10107311C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't have more than one cancel button", v2, v3, v4, v5, v6);
}

void sub_1010731A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't add a cancel button after loading the view", v2, v3, v4, v5, v6);
}

void sub_10107322C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = [(id)sub_100008CCC() packedBacktraceString];
  int v6 = 134218242;
  uint64_t v7 = a1;
  __int16 v8 = 2114;
  __int16 v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Dismiss view controller %p backtrace: >>%{public}@<<", (uint8_t *)&v6, 0x16u);
}

void sub_1010732EC(void *a1, char a2, NSObject *a3)
{
  if (a1)
  {
    __int16 v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v7 = @"Nil";
  }
  int v9 = a2 & 1;
  __int16 v10 = [a1 presentedViewController];
  if (v10)
  {
    uint64_t v3 = [a1 presentedViewController];
    int v12 = (objc_class *)objc_opt_class();
    NSStringFromClass(v12);
    __int16 v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    __int16 v11 = @"Nil";
  }
  __int16 v13 = [a1 presentedViewController];
  int v14 = 138544386;
  __int16 v15 = v7;
  __int16 v16 = 2050;
  __int16 v17 = a1;
  __int16 v18 = 1024;
  int v19 = v9;
  __int16 v20 = 2114;
  CGRect v21 = v11;
  __int16 v22 = 2050;
  id v23 = v13;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Dismiss view controller: <%{public}@: %{public}p>, animated=%d, presentedViewController=<%{public}@: %{public}p>", (uint8_t *)&v14, 0x30u);

  if (v10)
  {
  }
  if (a1) {
}
  }

void sub_101073454()
{
  sub_100008C80();
  id v4 = "-[CRLiOSRepNudgeGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 69;
  __int16 v7 = v1;
  __int16 v8 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_1010734FC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_1000BAD44((void *)&_mh_execute_header, a1, a3, "nudge reset", v3);
}

void sub_101073538(void *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = sub_100380B10(a2);
  int v6 = 138412290;
  __int16 v7 = v4;
  sub_1000BAD2C((void *)&_mh_execute_header, v3, v5, "set state to %@", (uint8_t *)&v6);
}

void sub_1010735D8(NSObject *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_1000BAD44((void *)&_mh_execute_header, a1, a3, "nudge failing during a scroll", v3);
}

void sub_101073614(uint8_t *a1, unsigned char *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000BAD44((void *)&_mh_execute_header, a3, (uint64_t)a3, "setting first swipe touch", a1);
}

void sub_10107364C(uint8_t *a1, unsigned char *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000BAD44((void *)&_mh_execute_header, a3, (uint64_t)a3, "swipe touch is hitting the rep to be nudged. failing.", a1);
}

void sub_101073684(uint8_t *a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4 = *(void *)(a2 + 80) + 1;
  *(_DWORD *)a1 = 134217984;
  *a3 = v4;
  sub_1000BAD2C((void *)&_mh_execute_header, a4, (uint64_t)a3, "adding another swipe touch (%tu)", a1);
}

void sub_1010736D8(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  int v6 = "-[CRLiOSRepNudgeGestureRecognizer touchesBegan:withEvent:]";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 124;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d non-zero (%lu) swipe touches when there should be zero", (uint8_t *)v4, 0x2Cu);
}

void sub_101073790(NSObject *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)os_log_t v3 = 0;
  sub_1000BAD44((void *)&_mh_execute_header, a1, a3, "changing anchor touch from swipe touch", v3);
}

void sub_1010737CC()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLiOSRepNudgeGestureRecognizer touchesBegan:withEvent:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 119;
  __int16 v7 = v1;
  int v8 = "_anchorTouch";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_101073874()
{
  sub_100008C80();
  os_log_t v2 = "-[CRLiOSRepNudgeGestureRecognizer touchesBegan:withEvent:]";
  sub_10000BCE4();
  int v3 = 113;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d anchor touch not null when first touch comes down", v1, 0x22u);
}

void sub_101073908(void *a1, CGFloat a2, CGFloat a3)
{
  __int16 v5 = a1;
  v10.x = a2;
  v10.y = a3;
  int v6 = NSStringFromCGPoint(v10);
  int v8 = 138412290;
  __int16 v9 = v6;
  sub_1000BAD2C((void *)&_mh_execute_header, v5, v7, "nudging by %@", (uint8_t *)&v8);
}

void sub_1010739B8()
{
  sub_100008C80();
  os_log_t v2 = "-[CRLiOSRepNudgeGestureRecognizer touchesEnded:withEvent:]";
  sub_10000BCE4();
  int v3 = 238;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d not in dynamic operation for nudge", v1, 0x22u);
}

void sub_101073A4C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  int v4 = 134217984;
  uint64_t v5 = v3;
  sub_1000BAD2C((void *)&_mh_execute_header, a2, a3, "touches ended with num swipe touches: %lu", (uint8_t *)&v4);
}

void sub_101073AC8(void *a1, void *a2)
{
  uint64_t v3 = a1;
  int v4 = sub_100380B10((unint64_t)[a2 state]);
  int v6 = 138412290;
  uint64_t v7 = v4;
  sub_1000BAD2C((void *)&_mh_execute_header, v3, v5, "operation ended with nudge in state %@", (uint8_t *)&v6);
}

void sub_101073B6C(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  int v4 = "+[CRLiOSScribbleInteractionSetupHelper setupScribbleEditingProvider:scribbleObserver:scribbleActive:]";
  __int16 v5 = 2082;
  int v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionSetupHelper.m";
  __int16 v7 = 1024;
  int v8 = 24;
  __int16 v9 = 2082;
  CGPoint v10 = "editingProvider.scribbleInteraction";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_101073C28(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  int v4 = "-[CRLImageDataHelper generateThumbnailImageDataWithCompletionHandler:]";
  __int16 v5 = 2082;
  int v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageDataHelper.m";
  __int16 v7 = 1024;
  int v8 = 52;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Needs to implement download-handling thumbnail creation!", (uint8_t *)v2, 0x22u);
}

void sub_101073CD4()
{
  sub_100008C80();
  os_log_t v2 = "+[CRLRulerUnits instance]";
  sub_10000BCE4();
  int v3 = 64;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to acquire CRLRulerUnits singleton from a secondary thread - this class is not thread safe.", v1, 0x22u);
}

void sub_101073D68()
{
  sub_100008C80();
  os_log_t v2 = "+[CRLRulerUnits formatterForRulerUnits:decimalPlaces:trailingZeros:lenient:]";
  sub_10000BCE4();
  int v3 = 264;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pica formatting not currently supported", v1, 0x22u);
}

void sub_101073DFC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  int v4 = "-[PKStroke(CRLAdditions) crl_strokeForTracingWithOutset:shouldIgnoreMask:]";
  __int16 v5 = 2082;
  int v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/PKStroke_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 153;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the scale on a PKStroke should not be 0", (uint8_t *)v2, 0x22u);
}

void sub_101073EA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown CRLGLDataBufferDataType!", v2, v3, v4, v5, v6);
}

void sub_101073F30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_101073FB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_101074040()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_1010740C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_101074150()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_1010741D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_101074260()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_1010742E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
}

void sub_101074370()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate buffer(s)!", v2, v3, v4, v5, v6);
}

void sub_1010743F8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We're GL_STATIC_DRAW but trying (and FAILING) to update the array after initial setup!", v1, 2u);
}

void sub_10107443C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bufferCount==0!", v2, v3, v4, v5, v6);
}

void sub_1010744C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d vertexCount==0!", v2, v3, v4, v5, v6);
}

void sub_10107454C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d no attributes!", v2, v3, v4, v5, v6);
}

void sub_1010745D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Element array count Sanity check", v2, v3, v4, v5, v6);
}

void sub_10107465C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate buffer!", v2, v3, v4, v5, v6);
}

void sub_1010746E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Too many vertices!", v2, v3, v4, v5, v6);
}

void sub_10107476C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mesh size is not at least 2x2!", v2, v3, v4, v5, v6);
}

void sub_1010747F4()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLGPUDataBuffer p_addTransparentBorderInsetToTextureRect:vertexRect:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m";
  __int16 v6 = 1024;
  int v7 = 1098;
  __int16 v8 = v0;
  __int16 v9 = "vertexRect";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010748A4()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLGPUDataBuffer p_addTransparentBorderInsetToTextureRect:vertexRect:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m";
  __int16 v6 = 1024;
  int v7 = 1097;
  __int16 v8 = v0;
  __int16 v9 = "textureRect";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101074954()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize metal buffers without a device!", v2, v3, v4, v5, v6);
}

void sub_1010749DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mesh size is not at least 2x2!", v2, v3, v4, v5, v6);
}

void sub_101074A64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only be called on a buffer that conforms to metal protocol!", v2, v3, v4, v5, v6);
}

void sub_101074AEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown attribute size!", v2, v3, v4, v5, v6);
}

void sub_101074B74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only be called from within update block!", v2, v3, v4, v5, v6);
}

void sub_101074BFC(uint64_t a1, int a2, NSObject *a3)
{
  if (a1)
  {
    int v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    uint8_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint8_t v6 = @"Nil";
  }
  v8[0] = 67110402;
  v8[1] = a2;
  __int16 v9 = 2082;
  CGPoint v10 = "+[CRLiOSWindowWrapper windowWrapperForView:assert:]";
  sub_10000BCE4();
  int v11 = 53;
  __int16 v12 = 2114;
  __int16 v13 = v6;
  __int16 v14 = 2050;
  uint64_t v15 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find scene wrapper for view <%{public}@: %{public}p>", (uint8_t *)v8, 0x36u);
  if (a1) {
}
  }

void sub_101074D00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101074D88()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d userInteraction should be enabled when _userInteractionEnabledCount = 0", v2, v3, v4, v5, v6);
}

void sub_101074E10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101074E98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called endIgnoringUserInteractionWithToken without matching beginIgnoringUserInteraction", v2, v3, v4, v5, v6);
}

void sub_101074F20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101074FA8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107503C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010750D0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101075164()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller for data that needs to be downloaded!", v2, v3, v4, v5, v6);
}

void sub_1010751EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller when movie isn't playable!", v2, v3, v4, v5, v6);
}

void sub_101075274()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010752FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101075384()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to tear down the player controller with inconsistent flag/dynamic time state", v2, v3, v4, v5, v6);
}

void sub_10107540C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101075494()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101075528()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
}

void sub_1010755B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A dynamic poster time change must be in progress", v2, v3, v4, v5, v6);
}

void sub_101075638()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
}

void sub_1010756C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mismatch between starting and ending dynamic visible poster time changes", v2, v3, v4, v5, v6);
}

void sub_101075748()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
}

void sub_1010757D0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Buffer size too small: %zu", v2, v3, v4, v5, v6);
}

void sub_101075864()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010758F8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107598C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  [a2 code];
  sub_1000886AC();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error reading from filter CRLStreamReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_101075A74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101075B08(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  [a2 code];
  sub_1000886AC();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error reading from source CRLReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_101075BF0()
{
  sub_100008C80();
  id v3 = "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m";
  __int16 v6 = 1024;
  int v7 = 281;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The source handler for the stream read channel should not be nil", v2, 0x22u);
}

void sub_101075C90()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101075D24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not calculate the stroked bounds of an empty path.", v2, v3, v4, v5, v6);
}

void sub_101075DAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth should not be negative.", v2, v3, v4, v5, v6);
}

void sub_101075E34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Couldn't get a gradient for this join, but this should have been caught upstream by skipping no-op segments.", v2, v3, v4, v5, v6);
}

void sub_101075EBC(int a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a1;
  __int16 v4 = 2082;
  uint64_t v5 = "void CRLGrowPathBoundsAtTFromTypeAndPoints(CRLPathBoundsApplierState *, CGFloat, CGPathElementType, CGPoint *)";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m";
  __int16 v8 = 1024;
  int v9 = 365;
  __int16 v10 = 1024;
  int v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid element type %d", (uint8_t *)v3, 0x28u);
}

void sub_101075F74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d path gradient can't handle moveTo element", v2, v3, v4, v5, v6);
}

void sub_101075FFC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[NSNotificationCenter(CRLAdditions) crl_addObserverForName:object:queue:usingBlock:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSNotificationCenter_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 17;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You should not add an observer for all notifications on the main thread because it's deadlock prone.", (uint8_t *)v2, 0x22u);
}

void sub_1010760A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Clip rects should never be null.", v2, v3, v4, v5, v6);
}

void sub_101076130()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010761C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't clean up", v2, v3, v4, v5, v6);
}

void sub_10107624C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect the stroke to be a CRLBrushStroke if drawing into a Metal layer or image.", v2, v3, v4, v5, v6);
}

void sub_1010762D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only need to clear out images.", v2, v3, v4, v5, v6);
}

void sub_10107635C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to drop nil color", v2, v3, v4, v5, v6);
}

void sub_1010763E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10107646C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101076500()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLFreehandDrawingShapeItem has invalid geometry size.", v2, v3, v4, v5, v6);
}

void sub_101076588()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't create CRLCommandSetInfoGeometry without a persistable object.", v2, v3, v4, v5, v6);
}

void sub_101076610()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010766A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should be checking the uncommitted point range if we are freehand drawing; it is the freehand drawing cache mechanism.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10107672C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010767C0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101076854(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 second];
  objc_opt_class();
  sub_1000E5054();
  id v6 = sub_1000E5034(v5);
  sub_1000E5068((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unable to perform comparison on %{public}@", v9, v10, v11, v12, v13);
}

void sub_10107692C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 first];
  objc_opt_class();
  sub_1000E5054();
  id v6 = sub_1000E5034(v5);
  sub_1000E5068((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unable to perform comparison on %{public}@", v9, v10, v11, v12, v13);
}

void sub_101076A04(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[UIGestureRecognizer(CRLGestureDispatcher) setGestureDelegate:]";
  __int16 v5 = 2082;
  id v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/UIGestureRecognizer+Text.m";
  __int16 v7 = 1024;
  int v8 = 84;
  __int16 v9 = 2082;
  uint64_t v10 = "grDelegate";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_101076AC0()
{
  sub_1000EDA20();
  +[CRLAssertionHandler packedBacktraceString];
  sub_1000A1314();
  sub_100045680((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v2, v3, v4, v5, v6);
}

uint64_t sub_101076B40()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth (%f) should be greater than zero.", v2, v3, v4, v5, 2u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4910);
  return 0;
}

uint64_t sub_101076C04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4950);
  return 0;
}

uint64_t sub_101076CCC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4A50);
  return 0;
}

uint64_t sub_101076D94()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4A10);
  return 0;
}

uint64_t sub_101076E5C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D49D0);
  return 0;
}

uint64_t sub_101076F24()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4990);
  return 0;
}

uint64_t sub_101076FEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a line when there is no current point.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4A90);
  return 0;
}

uint64_t sub_1010770A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4AD0);
  return 0;
}

uint64_t sub_101077164()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4B10);
  return 0;
}

uint64_t sub_101077220()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBezierPath received a NaN or inf value. Please investigate", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4B50);
  return 0;
}

uint64_t sub_1010772DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not get the current point of an empty path.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4BB8);
  return 0;
}

uint64_t sub_101077398()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not determine control point bounds for an empty path.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4BF8);
  return 0;
}

uint64_t sub_101077454()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath.m";
  sub_10005A878();
  int v5 = 1785;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Given index (%zd) must not be negative.", v3, 0x2Cu);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4CF8);
  return 0;
}

uint64_t sub_101077530()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Missing extra segments.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4DF8);
  return 0;
}

uint64_t sub_1010775EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4EF8);
  return 0;
}

uint64_t sub_1010776A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Point append range is out of range of available points.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4EB8);
  return 0;
}

uint64_t sub_101077764()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d angle2 should not be infinte or NaN (%f)", v2, v3, v4, v5, 2u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4F78);
  return 0;
}

uint64_t sub_101077828()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d angle1 should not be infinte or NaN (%f)", v2, v3, v4, v5, 2u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4F38);
  return 0;
}

uint64_t sub_1010778EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d buffer too small for path element string", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4FF8);
  return 0;
}

uint64_t sub_1010779A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled path element type", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D4FB8);
  return 0;
}

uint64_t sub_101077A64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something is wrong with this bezier path!", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D5078);
  return 0;
}

uint64_t sub_101077B20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bezier path string contained unknown elmt.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D5038);
  return 0;
}

uint64_t sub_101077BDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_head could not NSZoneRealloc. No memory (when reallocing sfr_head)", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D50B8);
  return 0;
}

uint64_t sub_101077C98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_head could not NSZoneRealloc. No memory (when reallocing sfr_elementLength)", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D50F8);
  return 0;
}

uint64_t sub_101077D54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_extraSegments could not NSZoneRealloc. No memory", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D5138);
  return 0;
}

uint64_t sub_101077E10()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014D5178);
  return 0;
}

void sub_101077ED8(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[UIDevice(CRLAdditions) crl_platformString]_block_invoke";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/UIDevice_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 46;
  __int16 v9 = 2082;
  uint64_t v10 = "s_platformString";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_101077F94()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
}

void sub_10107801C()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
}

void sub_1010780A4()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to get contents of copy cache directory: %@");
}

void sub_10107812C()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
}

void sub_1010781B4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107824C()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
}

void sub_1010782DC()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to duplicate items for fixing up.", v2, v3, v4, v5, v6);
}

void sub_10107836C()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should not ask for async providers for preferred type file promise!", v2, v3, v4, v5, v6);
}

void sub_1010783FC()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@");
}

void sub_101078484()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@");
}

void sub_10107850C()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should be only one rich or plain text board item provider when there is text on the pasteboard", v2, v3, v4, v5, v6);
}

void sub_10107859C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_10107864C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010786E4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_101078794()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107882C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010788DC()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asPDF is ignored when nativeOnly is specified", v2, v3, v4, v5, v6);
}

void sub_10107896C()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Request for property list for unsupported pasteboard type %@");
}

void sub_1010789F4()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating rich text string: %@");
}

void sub_101078A7C()
{
  sub_100008C80();
  sub_10005A878();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requestedViewScale should never be negative.", v2, v3, v4, v5, v6);
}

void sub_101078B0C()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected scanner to be at end from pasteboard state type \"%@\".");
}

void sub_101078B94()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected scanner to read integer from pasteboard state type \"%@\".");
}

void sub_101078C1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to recover from CoreGraphics and CRLBrushStroke failing to stroke.", v2, v3, v4, v5, v6);
}

void sub_101078CA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot offset path that is already smaller than the offset amount!", v2, v3, v4, v5, v6);
}

void sub_101078D2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If delta X is 0, we would divide by zero.", v2, v3, v4, v5, v6);
}

void sub_101078DB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The wrap path cannot be empty when calculating the convex hull.", v2, v3, v4, v5, v6);
}

void sub_101078E3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a path after, the first element after should be a curve or line.", v2, v3, v4, v5, v6);
}

void sub_101078EC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathByCreatingHoleInPathAtPoint doesn't know how to handle close elements.", v2, v3, v4, v5, v6);
}

void sub_101078F4C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a path before, the last element before +1 should be a curve or line.", v2, v3, v4, v5, v6);
}

void sub_101078FD4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathByCreatingHoleInPathAtPoint doesn't know how to handle close elements.", v2, v3, v4, v5, v6);
}

void sub_10107905C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d firstElementAfter should be at least 1.", v2, v3, v4, v5, v6);
}

void sub_1010790E4(uint8_t *buf, int a2, uint64_t a3, os_log_t log)
{
  *(_DWORD *)buf = 67110146;
  *((_DWORD *)buf + 1) = a2;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "-[CRLBezierPath(CRLAdditions) pathSplitAtSubpathBoundariesWithSoftElementLimit:hardElementLimit:]";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath_CRLAdditions.mm";
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 1147;
  *((_WORD *)buf + 17) = 2048;
  *(void *)(buf + 36) = a3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d elementCount (%zd) should be positive.", buf, 0x2Cu);
}

void sub_101079170()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to split a path with subpaths less than 2 elements at a time.", v2, v3, v4, v5, v6);
}

void sub_1010791F8(int a1, NSObject *a2, double a3)
{
  v3[0] = 67110146;
  v3[1] = a1;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLBezierPath(CRLAdditions) pointAlongPathAtPercentage:withFlattenedPath:andLength:atStartIndex:]";
  __int16 v6 = 2082;
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath_CRLAdditions.mm";
  __int16 v8 = 1024;
  int v9 = 1374;
  __int16 v10 = 2048;
  double v11 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to find point at percentage: %f", (uint8_t *)v3, 0x2Cu);
}

void sub_1010792B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d It is impossible to find pointAlongPathAtPercentage at any percentage of an empty path.", v2, v3, v4, v5, v6);
}

void sub_101079338()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not calculate the stroked bounds of an empty path.", v2, v3, v4, v5, v6);
}

void sub_1010793C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth should not be negative.", v2, v3, v4, v5, v6);
}

void sub_101079448()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should provide a threshold if not looking for the closest match.", v2, v3, v4, v5, v6);
}

void sub_1010794D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d isnan!", v2, v3, v4, v5, v6);
}

void sub_101079558()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No valid roots!", v2, v3, v4, v5, v6);
}

void sub_1010795E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected angle sign", v2, v3, v4, v5, v6);
}

void sub_101079668()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must provide a group info or nil as parent of a counter rotate info!", v2, v3, v4, v5, v6);
}

void sub_1010796F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", v2, v3, v4, v5, v6);
}

void sub_101079778()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", v2, v3, v4, v5, v6);
}

void sub_101079800()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_101079894()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101079928()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010799BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101079A50(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  uint64_t v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_101079B18()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101079BAC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101079C40(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLiOSConcreteScribbleCapableElement initWithEditingFrame:identifier:scribbleEditingBlock:scribbleElementIsFocu"
       "sedBlock:shouldDelayFocus:hitToleranceInsetsWithDefaultInsetsBlock:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSConcreteScribbleCapableElement.m";
  __int16 v7 = 1024;
  int v8 = 37;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Got empty editing frame", (uint8_t *)v2, 0x22u);
}

void sub_101079CEC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLShapeLibraryCollection shapeWithIdentifier:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryCollection.m";
  __int16 v7 = 1024;
  int v8 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -[CRLShapeLibraryCollection shapeWithIdentifier:] should not be called because CRLShapeLibraryCollection has no editable shapes", (uint8_t *)v2, 0x22u);
}

void sub_101079D98()
{
  sub_100008C80();
  __int16 v3 = "-[CRLFreehandDrawingToolPixelEraser p_endErasingAndFinalize:]_block_invoke";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolPixelEraser.m";
  __int16 v6 = 1024;
  int v7 = 178;
  __int16 v8 = v0;
  int v9 = "shapeStrokes";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101079E48()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingToolPixelEraser p_erasableAreaPathInUnscaledSpaceForErasingStrokePath:withVisibleRulerBezierPath:]";
  sub_10000BCE4();
  int v3 = 589;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Begin point from erasing stroke path should not be null.", v1, 0x22u);
}

void sub_101079EDC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingToolPixelEraser p_erasableAreaPathInUnscaledSpaceForErasingStrokePath:withVisibleRulerBezierPath:]";
  sub_10000BCE4();
  int v3 = 601;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subpathsFromSubtractedPath should never empty.", v1, 0x22u);
}

void sub_101079F70()
{
  sub_100008C80();
  int v3 = "-[CRLShapeSearchIndex addSearchResultWithIdentifier:forKeyword:priority:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchIndex.m";
  __int16 v6 = 1024;
  int v7 = 116;
  __int16 v8 = v0;
  int v9 = "keyword != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10107A020()
{
  sub_100008C80();
  int v3 = "-[CRLShapeSearchIndex addSearchResultWithIdentifier:forKeyword:priority:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchIndex.m";
  __int16 v6 = 1024;
  int v7 = 115;
  __int16 v8 = v0;
  int v9 = "identifier != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10107A0D0()
{
  sub_100008C80();
  int v3 = "-[CRLMaskResizeTracker initWithImageRep:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMaskResizeTracker.m";
  __int16 v6 = 1024;
  int v7 = 30;
  __int16 v8 = v0;
  int v9 = "imageRep != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10107A180(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "-[CRLMaskResizeTracker willBeginDynamicOperationForReps:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMaskResizeTracker.m";
  __int16 v8 = 1024;
  int v9 = 68;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected rep(s) for transformation %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10107A23C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMaskResizeTracker changeDynamicLayoutsForReps:]";
  sub_10000BCE4();
  int v3 = 80;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image mask editor not given correct reps for resize", v1, 0x22u);
}

void sub_10107A2D0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMaskResizeTracker commitChangesForReps:]";
  sub_10000BCE4();
  int v3 = 135;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image rep was moved to floating to manipulate it. This will probably do something bad for template objects.", v1, 0x22u);
}

void sub_10107A364(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "-[CRLBezierPathSource initWithBezierPath:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPathSource.m";
  __int16 v8 = 1024;
  int v9 = 31;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ignoring invalid bezier path %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10107A420(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLBezierPathSource p_setBezierPath:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPathSource.m";
  __int16 v7 = 1024;
  int v8 = 178;
  __int16 v9 = 2082;
  __int16 v10 = "path";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10107A4DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out of bounds error when appending a strokePointData object.", v2, v3, v4, v5, v6);
}

void sub_10107A564()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out of bounds error when appending a strokePointData object.", v2, v3, v4, v5, v6);
}

void sub_10107A5EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds endAtIndex parameter.", v2, v3, v4, v5, v6);
}

void sub_10107A674()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds startingAtIndex parameter.", v2, v3, v4, v5, v6);
}

void sub_10107A6FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly failed to generate B-Spline control points.", v2, v3, v4, v5, v6);
}

void sub_10107A784()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLPKStrokePathConverter strokePathsFromBezierPath:baseWidth:strokePathCompactData:inkType:isFountainPenInkV2:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
  __int16 v6 = 1024;
  int v7 = 647;
  __int16 v8 = v0;
  __int16 v9 = "newStrokePath";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10107A834()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not instantiate UTType for %@");
}

void sub_10107A8C8()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create UTType for %@");
}

void sub_10107A95C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[NSArray(CRLUTIUtilities) crl_UTTypes]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLUTIUtilities.m";
  __int16 v7 = 1024;
  int v8 = 139;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expecting an array of strings.", (uint8_t *)v2, 0x22u);
}

void sub_10107AA08(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLPencilKitInkStroke paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrd"
       "er:]_block_invoke";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitInkStroke.m";
  __int16 v7 = 1024;
  int v8 = 272;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to draw a CRLPencilKitInkStroke without its strokePathCompactData and maskPath.", (uint8_t *)v2, 0x22u);
}

void sub_10107AAB4(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLFakeProgress initWithMaxValue:numberOfStages:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLProgress.m";
  __int16 v7 = 1024;
  int v8 = 617;
  __int16 v9 = 2082;
  __int16 v10 = "numberOfStages > 0";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v2, 0x2Cu);
}

void sub_10107AB70()
{
  sub_100008C80();
  __int16 v3 = "-[CRLInstantAlphaBinaryBitmap initWithWidth:height:rowBytes:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.m";
  __int16 v6 = 1024;
  int v7 = 23;
  __int16 v8 = v0;
  __int16 v9 = "width > 0 && height > 0 && rowBytes >= width / 8";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10107AC20()
{
  sub_100008C80();
  __int16 v3 = "-[CRLInstantAlphaBinaryBitmap unionWithBitmap:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.m";
  __int16 v6 = 1024;
  int v7 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unionWithBitmap: sizes do not match", v2, 0x22u);
}

void sub_10107ACC0(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "-[CRLBasicShapeLibrary shapeFromSearchResult:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  __int16 v8 = 1024;
  int v9 = 83;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Basic shape from result is nil: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10107AD7C()
{
  sub_100008C80();
  __int16 v3 = "-[CRLBasicShapeLibrary p_baseName]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  __int16 v6 = 1024;
  int v7 = 95;
  __int16 v8 = v0;
  int v9 = "englishString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10107AE2C()
{
  sub_100008C80();
  __int16 v4 = "-[CRLBasicShapeLibrary p_shapeTypeAtIndex:]";
  __int16 v5 = v0;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  __int16 v7 = 1024;
  int v8 = 101;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  __int16 v11 = 2048;
  uint64_t v12 = 21;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Index for shape type is %lu, but must be less than kCRLShapeTypeCustom (%ld)", v3, 0x36u);
}

void sub_10107AEE8(double a1, double a2, double a3, double a4)
{
  NSStringFromCGRect(*(CGRect *)&a1);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v5, v6, "initial finalBounds %@", v7, v8, v9, v10, v11);
}

void sub_10107AF74(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "finalCenterScaled %@", v5, v6, v7, v8, v9);
}

void sub_10107B000(char a1, char a2, NSObject *a3)
{
  if (a1) {
    uint64_t v5 = @"YES";
  }
  else {
    uint64_t v5 = @"NO";
  }
  uint64_t v6 = v5;
  if (a2) {
    uint64_t v7 = @"YES";
  }
  else {
    uint64_t v7 = @"NO";
  }
  uint64_t v8 = v7;
  int v9 = 138412546;
  uint64_t v10 = v6;
  __int16 v11 = 2112;
  uint64_t v12 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "shouldPinHorizontally %@ shouldPinVertically %@", (uint8_t *)&v9, 0x16u);
}

void sub_10107B0F0(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform from center to anchor %@", v5, v6, v7, v8, v9);
}

void sub_10107B17C(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "dynamic transform %@", v5, v6, v7, v8, v9);
}

void sub_10107B208(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform with zoomOriginRelativeToViewAnchor subtracted %@", v5, v6, v7, v8, v9);
}

void sub_10107B294(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform with relativeScaleFactor %@", v5, v6, v7, v8, v9);
}

void sub_10107B320(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform with zoomOriginRelativeToViewAnchor %@", v5, v6, v7, v8, v9);
}

void sub_10107B3AC(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform with gesture offset %@", v5, v6, v7, v8, v9);
}

void sub_10107B438(__n128 *a1)
{
  sub_100121F44(a1, __stack_chk_guard);
  NSStringFromCGAffineTransform(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "transform from anchor to center %@", v5, v6, v7, v8, v9);
}

void sub_10107B4C4(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "viewCenterFromAnchorOffset %@", v5, v6, v7, v8, v9);
}

void sub_10107B550(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "viewAnchorPointInSuperlayer %@", v5, v6, v7, v8, v9);
}

void sub_10107B5DC(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "viewCenterInSuperlayer %@", v5, v6, v7, v8, v9);
}

void sub_10107B668(double a1, double a2, double a3, double a4)
{
  NSStringFromCGRect(*(CGRect *)&a1);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v5, v6, "canvasLayerBounds %@", v7, v8, v9, v10, v11);
}

void sub_10107B6F4(double a1, double a2)
{
  NSStringFromCGSize(*(CGSize *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_10000BD3C();
  sub_100121F24((void *)&_mh_execute_header, v3, v4, "delegate provided canvasCenterOffset %@", v5, v6, v7, v8, v9);
}

void sub_10107B780(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Cancelling zoom.", v1, 2u);
}

void sub_10107B7C4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Zoom is ending!", v1, 2u);
}

void sub_10107B808()
{
  sub_100008C80();
  id v2 = "-[CRLReadChannelInputStreamAdapter readToBuffer:size:]";
  sub_10000BCE4();
  int v3 = 116;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil read channels", v1, 0x22u);
}

void sub_10107B89C()
{
  sub_100008C80();
  id v2 = "-[CRLReadChannelInputStreamAdapter seekToOffset:]";
  sub_10000BCE4();
  int v3 = 155;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not a seekable stream", v1, 0x22u);
}

void sub_10107B930()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Bezier element type", v2, v3, v4, v5, v6);
}

void sub_10107B9B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d At least 2 points expected", v2, v3, v4, v5, v6);
}

void sub_10107BA40()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Undefined cubic control points", v2, v3, v4, v5, v6);
}

void sub_10107BAC8(int a1, uint8_t *buf, int a3, os_log_t log)
{
  *(_DWORD *)buf = 67110146;
  *((_DWORD *)buf + 1) = a3;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "-[CRLBezierPathSimplifier outputCurrentSolution]";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathSimplifier.mm";
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 374;
  *((_WORD *)buf + 17) = 1024;
  *((_DWORD *)buf + 9) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected solution element type: %d", buf, 0x28u);
}

void sub_10107BB50()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d At least 2 points expected before the tail", v2, v3, v4, v5, v6);
}

void sub_10107BBD8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10107BC44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected buffer position while reading extra fields.", v2, v3, v4, v5, v6);
}

void sub_10107BCCC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10107BD38(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = a2;
  [v2 count];
  sub_1000A364C((void *)&_mh_execute_header, v4, v5, "Failed to parse ZIP entry %tu. Will attempt to adjust offset forward.", v6, v7, v8, v9, 0);
}

void sub_10107BDCC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = a2;
  [v2 count];
  sub_1000A364C((void *)&_mh_execute_header, v4, v5, "Failed to parse ZIP entry %tu. Will attempt to adjust offset backward.", v6, v7, v8, v9, 0);
}

void sub_10107BE60(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10107BECC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Entry isn't part of this archive", v2, v3, v4, v5, v6);
}

void sub_10107BF54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Entry isn't part of this archive", v2, v3, v4, v5, v6);
}

void sub_10107BFDC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10107C04C(void *a1)
{
  id v1 = sub_10012EDF0(a1);
  sub_10012EDB8((uint64_t)v1, 1.5047e-36);
  sub_10012EDD0((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<");
}

void sub_10107C0A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C134()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C1C8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C25C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C2F0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C384()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C418()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107C4AC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasAlignmentGuide isAssociatedContentVisibleInUnscaledRect:]";
  sub_10000BCE4();
  int v3 = 105;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d isAssociatedContentVisibleInUnscaledRect isn't expecting a null rect ", v1, 0x22u);
}

void sub_10107C540()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasAlignmentGuide renderableWithICC:]";
  sub_10000BCE4();
  int v3 = 151;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render a guide where start == end", v1, 0x22u);
}

void sub_10107C5D4(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  uint8_t v6 = "-[CRLiOSCanvasPointerInteractionDelegate pointerInteraction:regionForRequest:defaultRegion:]";
  __int16 v7 = 2082;
  uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasPointerInteractionDelegate.m";
  __int16 v9 = 1024;
  int v10 = 126;
  __int16 v11 = 2112;
  uint64_t v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected lastCursorUpdatingSource type! %@", (uint8_t *)v4, 0x2Cu);
}

void sub_10107C694(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLiOSCanvasPointerInteractionDelegate pointerInteraction:styleForRegion:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasPointerInteractionDelegate.m";
  __int16 v7 = 1024;
  int v8 = 152;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid cursor without any data!", (uint8_t *)v2, 0x22u);
}

void sub_10107C740()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSFreehandDrawingHighlightManager teardown]";
  sub_10000BCE4();
  int v3 = 55;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLiOSFreehandDrawingHighlightManager that has already been torn down.", v1, 0x22u);
}

void sub_10107C7D4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSFreehandDrawingHighlightManager dealloc]";
  sub_10000BCE4();
  int v3 = 60;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLiOSFreehandDrawingHighlightManager.", v1, 0x22u);
}

void sub_10107C868()
{
  sub_100008C80();
  int v3 = "-[CRLiOSFreehandDrawingHighlightManager pulseAnimationDidStop:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingHighlightManager.m";
  __int16 v6 = 1024;
  int v7 = 283;
  __int16 v8 = v0;
  __int16 v9 = "_pulseArrayController";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10107C918()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tool type %lu does not support color");
}

void sub_10107C9A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown tool type %lu when generating stroke widths.");
}

void sub_10107CA28()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown tool type %lu when generating stroke widths.");
}

void sub_10107CAB0()
{
  sub_100137E54(__stack_chk_guard);
  sub_10004F65C();
  sub_100137E60();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get color for current tool (%zd)");
}

void sub_10107CB38()
{
  sub_100137E54(__stack_chk_guard);
  sub_10004F65C();
  sub_100137E60();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get opacity for current tool (%zd)");
}

void sub_10107CBC0()
{
  sub_100137E54(__stack_chk_guard);
  sub_10004F65C();
  sub_100137E60();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get width for current tool (%zd)");
}

void sub_10107CC48()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set color for given tool (%zd)");
}

void sub_10107CCD0()
{
  sub_100137E54(__stack_chk_guard);
  sub_10004F65C();
  sub_100137E60();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set opacity for tool (%zd)");
}

void sub_10107CD58()
{
  sub_100137E54(__stack_chk_guard);
  sub_10004F65C();
  sub_100137E60();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set width for tool (%zd)");
}

void sub_10107CDE0()
{
  sub_100008C80();
  int v3 = "-[CRLFreehandDrawingToolkitUIState strokeWidthIndexForToolType:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolkitUIState.m";
  __int16 v6 = 1024;
  int v7 = 676;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have at least one stroke width option.", v2, 0x22u);
}

void sub_10107CE80()
{
  sub_100008C80();
  uint64_t v2 = "+[CRLWPiOSStorageSpellChecker p_inputLanguageDidChangeNotification:]";
  sub_10000BCE4();
  int v3 = 74;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_10107CF14()
{
  sub_100008C80();
  int v3 = "-[CRLWPiOSStorageSpellChecker initWithStorage:selectionPath:orSearchCanvasDelegate:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Spelling/CRLWPiOSStorageSpellChecker.m";
  __int16 v6 = 1024;
  int v7 = 149;
  __int16 v8 = v0;
  __int16 v9 = "storage";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10107CFC4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPiOSStorageSpellChecker i_addSpellingAndGrammarMarksInRange:spellingResults:grammarResults:sync:]";
  sub_10000BCE4();
  int v3 = 177;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempt to spellcheck past end of string", v1, 0x22u);
}

void sub_10107D058()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No columns to lay out into", v2, v3, v4, v5, v6);
}

void sub_10107D0E0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107D17C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Column index mismatch", v2, v3, v4, v5, v6);
}

void sub_10107D204()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Too many layoutStates pushed", v2, v3, v4, v5, v6);
}

void sub_10107D28C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d stack size is invalid", v2, v3, v4, v5, v6);
}

void sub_10107D314()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.paragraphRange.length", v2, v3, v4, v5, v6);
}

void sub_10107D39C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad paragraphEnumerator", v2, v3, v4, v5, v6);
}

void sub_10107D424()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _typesetterCharIndex", v2, v3, v4, v5, v6);
}

void sub_10107D4AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We should not restore from our own object.", v2, v3, v4, v5, v6);
}

void sub_10107D534()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _pushedStates stack is empty", v2, v3, v4, v5, v6);
}

void sub_10107D5BC()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107D658()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d discrepancy computing anchored range", v2, v3, v4, v5, v6);
}

void sub_10107D6E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d anchoredCharIndex shouldn't go backwards", v2, v3, v4, v5, v6);
}

void sub_10107D768()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout failure, No old lines.", v2, v3, v4, v5, v6);
}

void sub_10107D7F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad lineHeightGuess", v2, v3, v4, v5, v6);
}

void sub_10107D878()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.column() in layoutColumn", v2, v3, v4, v5, v6);
}

void sub_10107D900()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107D99C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d failed to create a line fragment", v2, v3, v4, v5, v6);
}

void sub_10107DA24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad glyphCount", v2, v3, v4, v5, v6);
}

void sub_10107DAAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad line end", v2, v3, v4, v5, v6);
}

void sub_10107DB34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.charIndex", v2, v3, v4, v5, v6);
}

void sub_10107DBBC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d pIsLastColumn doesn't work on the body or TOC", v2, v3, v4, v5, v6);
}

void sub_10107DC44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad minHeight/maxHeight", v2, v3, v4, v5, v6);
}

void sub_10107DCCC()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107DD68()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107DE04()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107DEA0(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLSixChannelTilingLayer drawLayer:inContext:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSixChannelTilingLayer.m";
  __int16 v8 = 1024;
  int v9 = 223;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected delegate call for layer %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10107DF5C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSInsertPageViewController scribbleInteractionWillBeginWriting:]";
  sub_10000BCE4();
  int v3 = 391;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad state on _shouldIgnoreCancelBecauseOfWriting", v1, 0x22u);
}

void sub_10107DFF0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSInsertPageViewController scribbleInteractionDidFinishWriting:]";
  sub_10000BCE4();
  int v3 = 397;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad state on _shouldIgnoreCancelBecauseOfWriting", v1, 0x22u);
}

void sub_10107E084()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E118()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Line ref is already set", v2, v3, v4, v5, v6);
}

void sub_10107E1A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range", v2, v3, v4, v5, v6);
}

void sub_10107E228()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Missing hyphen line ref", v2, v3, v4, v5, v6);
}

void sub_10107E2B0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E344()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E3D8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E46C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E500()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d textSource failed to advance", v2, v3, v4, v5, v6);
}

void sub_10107E588()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d countOfComposedCharacters failed", v2, v3, v4, v5, v6);
}

void sub_10107E610()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E6A4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107E738()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range", v2, v3, v4, v5, v6);
}

void sub_10107E7C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No label font but we need to render something", v2, v3, v4, v5, v6);
}

void sub_10107E848()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Text position only applies to text and numbers.", v2, v3, v4, v5, v6);
}

void sub_10107E8D0(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  sub_100018074();
  sub_100008D20();
  int v6 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad character index: %d", (uint8_t *)v4, 0x28u);
}

void sub_10107E978()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107EA0C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad glyph count: %ld");
}

void sub_10107EA94()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected nil _textSource", v2, v3, v4, v5, v6);
}

void sub_10107EB1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No line refs", v2, v3, v4, v5, v6);
}

void sub_10107EBA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for line fragment", v2, v3, v4, v5, v6);
}

void sub_10107EC2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result", v2, v3, v4, v5, v6);
}

void sub_10107ECB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

uint64_t sub_10107ED48()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This routine supports left and right only.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014DA1E0);
  return 0;
}

uint64_t sub_10107EE04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014DA1A0);
  return 0;
}

void sub_10107EECC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find the CTRun for the tate chu yoko run.", v2, v3, v4, v5, v6);
}

void sub_10107EF54()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107EFE8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107F07C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10107F110()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _textHighlights positions", v2, v3, v4, v5, v6);
}

void sub_10107F198()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _textBackgrounds positions", v2, v3, v4, v5, v6);
}

void sub_10107F220()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _strikesthrough positions", v2, v3, v4, v5, v6);
}

void sub_10107F2A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _underlines positions", v2, v3, v4, v5, v6);
}

void sub_10107F330()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: adornments", v2, v3, v4, v5, v6);
}

void sub_10107F3B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: line vector", v2, v3, v4, v5, v6);
}

void sub_10107F440()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: hyphenated", v2, v3, v4, v5, v6);
}

void sub_10107F4C8()
{
  sub_10000DF44();
  sub_10000DF10(v1, v2, v3, 1.5047e-36);
  sub_10000DF28((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, v5);
}

void sub_10107F50C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Character index out of range", v2, v3, v4, v5, v6);
}

void sub_10107F594()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Specified range is out of range of string", v2, v3, v4, v5, v6);
}

void sub_10107F61C()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  __int16 v4 = 1024;
  int v5 = 1060;
  __int16 v6 = v0;
  uint8_t v7 = "replaceString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10107F6C8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Label format (%lu) not recognized.");
}

void sub_10107F754(int a1)
{
  v4[0] = 67110146;
  v4[1] = a1;
  __int16 v5 = 2082;
  sub_100008CC0();
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_10005A878();
  int v7 = 1220;
  __int16 v8 = v1;
  int v9 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Number format (%d) not recognized.", (uint8_t *)v4, 0x28u);
}

void sub_10107F804()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Label format (%lu) invalid for numeric list.");
}

void sub_10107F890()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for arabic numeral topic label <= 0", v2, v3, v4, v5, v6);
}

void sub_10107F918()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for roman numeral topic label <= 0", v2, v3, v4, v5, v6);
}

void sub_10107F9A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for circled number numeral topic label <= 0", v2, v3, v4, v5, v6);
}

void sub_10107FA28()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for arabic numeral topic label <= 0", v2, v3, v4, v5, v6);
}

void sub_10107FAB0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of bounds", v2, v3, v4, v5, v6);
}

void sub_10107FB38()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of bounds for algorithm", v2, v3, v4, v5, v6);
}

void sub_10107FBC0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of bounds", v2, v3, v4, v5, v6);
}

void sub_10107FC48()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Hebrew number out of bounds for algorithm", v2, v3, v4, v5, v6);
}

void sub_10107FCD0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
}

void sub_10107FD58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid surrogate pair", v2, v3, v4, v5, v6);
}

void sub_10107FDE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
}

void sub_10107FE68()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_10005A878();
  int v5 = 1693;
  __int16 v6 = v0;
  int v7 = v1;
  __int16 v8 = 2048;
  uint64_t v9 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid surrogate pair (single code point=0x%x, index=%lu)", v3, 0x32u);
}

void sub_10107FF18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index is out of bounds", v2, v3, v4, v5, v6);
}

void sub_10107FFA0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inDigit is larger than single digit", v2, v3, v4, v5, v6);
}

void sub_101080028()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inValue too large for ideographicNumberStringForSmallValue", v2, v3, v4, v5, v6);
}

void sub_1010800B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of range", v2, v3, v4, v5, v6);
}

void sub_101080138()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of range", v2, v3, v4, v5, v6);
}

void sub_1010801C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of range", v2, v3, v4, v5, v6);
}

void sub_101080248()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of range", v2, v3, v4, v5, v6);
}

void sub_1010802D0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLStyledRep shouldHideSelectionHighlightDueToRectangularPath]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLStyledRep.m";
  __int16 v6 = 1024;
  int v7 = 253;
  __int16 v8 = v0;
  uint64_t v9 = "wrapPath";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101080380()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLStyledRep dynamicShadowUpdateToValue:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLStyledRep.m";
  __int16 v6 = 1024;
  int v7 = 292;
  __int16 v8 = v0;
  uint64_t v9 = "shadow";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101080448(int a1, NSObject *a2, double a3)
{
  v3[0] = 67110146;
  v3[1] = a1;
  __int16 v4 = 2082;
  uint64_t v5 = "void CRLPKPointReductionFilter::setPointReductionFilterThresholdMultiplier(CGFloat)";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h";
  __int16 v8 = 1024;
  int v9 = 46;
  __int16 v10 = 2048;
  double v11 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected multiplier value < 0 (%f).", (uint8_t *)v3, 0x2Cu);
}

void sub_101080500()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d pt velocity is nan", v2, v3, v4, v5, v6);
}

void sub_101080588()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_101080610()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_101080698()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_101080720()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_1010807A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reference timestamp is needed to decompress points.", v2, v3, v4, v5, v6);
}

void sub_101080830()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The observed editor controller does not match the editor controller owned by self.interactiveCanvasController. You probably forgot to update observation in -setInteractiveCanvasController:", v2, v3, v4, v5, v6);
}

void sub_1010808B8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108094C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010809E0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080A74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080B08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080B9C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080C30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _lassoSelectionMenuInteraction should not be nil.", v2, v3, v4, v5, v6);
}

void sub_101080CB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _lassoSelectionMenuInteraction should not be nil.", v2, v3, v4, v5, v6);
}

void sub_101080D40()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080DD4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080E68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101080EFC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unlockedItems should not have more items than selectedItems.", v2, v3, v4, v5, v6);
}

void sub_101080F84()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101081018()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Freehand drawing mode should only accept CRLFreehandDrawingModeLassoSelectionEditMenuIdentifier now for lasso selection feature.", v2, v3, v4, v5, v6);
}

void sub_1010810A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot add line to subpath without move first", v2, v3, v4, v5, v6);
}

void sub_101081128()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot add line to subpath without move first", v2, v3, v4, v5, v6);
}

void sub_1010811B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot close subpath without a line or curve segment", v2, v3, v4, v5, v6);
}

void sub_101081238(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  int v7 = 138544130;
  __int16 v8 = v5;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  __int16 v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error coordinating reading URL for board item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_10108132C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010813C8(void *a1, NSObject *a2)
{
  if (a1)
  {
    uint64_t v5 = (objc_class *)objc_opt_class();
    NSStringFromClass(v5);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v4 = @"Nil";
  }
  BOOL v6 = a1 == 0;
  int v7 = [a1 filename];
  __int16 v8 = [a1 assetUUID];
  __int16 v9 = [v8 UUIDString];
  int v10 = 138543874;
  __int16 v11 = v4;
  __int16 v12 = 2112;
  __int16 v13 = v7;
  __int16 v14 = 2114;
  uint64_t v15 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to determine valid provider class for <%{public}@: filename=%@, assetUUID=%{public}@> ", (uint8_t *)&v10, 0x20u);

  if (!v6) {
}
  }

void sub_1010814EC()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101081588(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_101081650()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010816EC(void *a1, int a2)
{
  uint64_t v3 = a1;
  __error();
  v6[0] = 67110146;
  v6[1] = a2;
  __int16 v7 = 2082;
  __int16 v8 = "-[CRLImageProviderPool p_updateFileDescriptorLimit]";
  __int16 v9 = 2082;
  sub_100008C94();
  int v10 = 522;
  __int16 v11 = v4;
  int v12 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to get fd limit: getrlimit set errno to %d. Assuming limit of 256.", (uint8_t *)v6, 0x28u);
}

void sub_1010817BC(os_log_t log, double a2)
{
  int v2 = 134217984;
  double v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "createStageWithSteps: taking steps not a positive number: %g", (uint8_t *)&v2, 0xCu);
}

void sub_101081838()
{
  sub_100008C80();
  double v3 = "-[CRLWPSearch initWithString:options:hitBlock:storage:range:searchCanvasDelegate:]";
  __int16 v4 = v0;
  int v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSearch.m";
  __int16 v6 = 1024;
  int v7 = 27;
  __int16 v8 = v0;
  __int16 v9 = "storage";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010818E8()
{
  sub_100008C80();
  double v3 = "-[CRLWPSearch initWithString:options:hitBlock:storage:range:searchCanvasDelegate:]";
  __int16 v4 = v0;
  int v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSearch.m";
  __int16 v6 = 1024;
  int v7 = 26;
  __int16 v8 = v0;
  __int16 v9 = "string";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101081998()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to free transform with no reps", v2, v3, v4, v5, v6);
}

void sub_101081A20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLCanvasRepFreeTransformTracker: could not find a selected rep for the given layout", v2, v3, v4, v5, v6);
}

void sub_101081AA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mismatched rep count", v2, v3, v4, v5, v6);
}

void sub_101081B30()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasRepFreeTransformTracker applyNewBoundsToRep:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepFreeTransformTracker.m";
  __int16 v6 = 1024;
  int v7 = 534;
  __int16 v8 = v0;
  __int16 v9 = "cmd";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101081BE0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101081C74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101081D08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101081D9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking a torn-down editor controller for its current selection.", v2, v3, v4, v5, v6);
}

void sub_101081E24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101081EAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set the selection while the canvas is doing background layout!", v2, v3, v4, v5, v6);
}

void sub_101081F34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never set a nil selection path on the editor controller!", v2, v3, v4, v5, v6);
}

void sub_101081FBC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never set a selection on an editor controller that has already been torn down! It won't work.", v2, v3, v4, v5, v6);
}

void sub_101082044()
{
  sub_1000EDA20();
  id v2 = +[CRLAssertionHandler packedBacktraceString];
  int v4 = 67109378;
  int v5 = v1;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v0, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v4);
}

void sub_1010820F0()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Least specific selection MUST be a board selection. Selection path is malformed. %@");
}

void sub_101082180(void *a1, void *a2, NSObject *a3)
{
  uint8_t v6 = [a1 editingCoordinator];
  int v7 = [v6 mainBoard];
  __int16 v8 = [v7 id];
  __int16 v9 = [v8 UUIDString];
  uint64_t v10 = a1[2];
  __int16 v11 = [a2 UUIDDescription];
  int v12 = 138544130;
  __int16 v13 = v9;
  __int16 v14 = 2048;
  uint64_t v15 = a1;
  __int16 v16 = 2112;
  uint64_t v17 = v10;
  __int16 v18 = 2112;
  int v19 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%{public}@ %p %@ setSelectionPath: %@", (uint8_t *)&v12, 0x2Au);
}

void sub_1010822A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Intentionally crashing for reentrant setSelectionPath: call to avoid mangled state", v2, v3, v4, v5, v6);
}

void sub_101082328()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d re-entrant call to CRLEditorController", v2, v3, v4, v5, v6);
}

void sub_1010823B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101082438()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should send in a non-nil block to this method.", v2, v3, v4, v5, v6);
}

void sub_1010824C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101082548()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010825DC()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Editor %@ must be on the stack to retrieve its associated selection");
}

void sub_10108266C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010826F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082788()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't push the same editor twice", v2, v3, v4, v5, v6);
}

void sub_101082810(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10108287C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't pop an editor that isn't on the stack", v2, v3, v4, v5, v6);
}

void sub_101082904()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082998(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_101082A04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unbalanced endTransaction", v2, v3, v4, v5, v6);
}

void sub_101082A8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_101082AF8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082B8C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[CRLWPTab tabAlignmentFromString:isRTL:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPTabs.mm";
  __int16 v7 = 1024;
  int v8 = 154;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unrecognized tab alignment string. Returning kTabAlignmentLeft by default.", (uint8_t *)v2, 0x22u);
}

void sub_101082C38()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082CCC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082D60()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082DF4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082E88()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082F1C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101082FB0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101083044()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010830D8(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingRep.m";
  __int16 v7 = 1024;
  int v8 = 282;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to draw unknown layer (%@).", (uint8_t *)v4, 0x2Cu);
}

void sub_101083190()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101083224()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be drawing at least two shape reps here.", v2, v3, v4, v5, v6);
}

void sub_1010832AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101083340()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010833D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected nil freehandDrawingIDToPKStrokesMap returned from pkDrawingsForFreehandItemsDidChange", v2, v3, v4, v5, v6);
}

void sub_10108345C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010834E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not locate freehand drawing shapeItem for _strokeDataUUID given by trigger stroke", v2, v3, v4, v5, v6);
}

void sub_10108356C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d setupDrawingShapeItemUUIDToStrokeDataUUIDBidirectionalMap has already been called for this rep", v2, v3, v4, v5, v6);
}

void sub_1010835F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be drawing at least two shape reps here.", v2, v3, v4, v5, v6);
}

void sub_10108367C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get the concurrent queue when it isn't safe to do so.", v2, v3, v4, v5, v6);
}

void sub_101083704()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101083798()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108382C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010838C0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101083954()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to begin trifurcated render for a child rep for which it has already begun.", v2, v3, v4, v5, v6);
}

void sub_1010839DC()
{
  sub_1001ACDD8();
  sub_100008CC0();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_101083A80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to end trifurcated render for a child rep that did not begin it.", v2, v3, v4, v5, v6);
}

void sub_101083B08()
{
  sub_1001ACDD8();
  sub_100008CC0();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_101083BAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for the trifurcation container when rendering is not trifurcated.", v2, v3, v4, v5, v6);
}

void sub_101083C34()
{
  sub_1001ACDD8();
  sub_100008CC0();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_101083CD8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to add a six channel enabled child rep that is already added.", v2, v3, v4, v5, v6);
}

void sub_101083D60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didAddSixChannelEnabledChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
}

void sub_101083DE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to remove a six channel enabled child rep that was not added.", v2, v3, v4, v5, v6);
}

void sub_101083E70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didRemoveSixChannelEnabledChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
}

void sub_101083EF8()
{
  sub_1001ACDD8();
  sub_100008CC0();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_101083F9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to add a six channel suppressing child rep that is already added.", v2, v3, v4, v5, v6);
}

void sub_101084024()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didAddSixChannelSuppressingChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
}

void sub_1010840AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to remove a six channel suppressing child rep that was not added.", v2, v3, v4, v5, v6);
}

void sub_101084134()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didRemoveSixChannelSuppressingChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
}

void sub_1010841BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101084250()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010842E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101084378(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "void CRLNotifyCGAssertionAvoided()";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSafeCGWrappers.m";
  __int16 v7 = 1024;
  int v8 = 94;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A CG call was elided because of an invalid parameter.", (uint8_t *)v2, 0x22u);
}

void sub_101084424(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLFreehandDrawingTransformInfo editorClass]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTransformInfo.m";
  __int16 v7 = 1024;
  int v8 = 74;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", (uint8_t *)v2, 0x22u);
}

void sub_1010844D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to convert a PKStroke with no points. Using fallback values.", v2, v3, v4, v5, v6);
}

void sub_101084558()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds endingAtPointIndex parameter.", v2, v3, v4, v5, v6);
}

void sub_1010845E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds startingAtPointIndex parameter.", v2, v3, v4, v5, v6);
}

void sub_101084668(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "void _CRLPKControlPointsFromFlattenedPathApplier(std::vector<CGPoint> *, const CGPathElement *)";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCGPathUtility.mm";
  __int16 v7 = 1024;
  int v8 = 206;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If path includes kCGPathElementAddQuadCurveToPoint or kCGPathElementAddCurveToPoint it was not properly flattened.", (uint8_t *)v2, 0x22u);
}

void sub_101084714(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPCTTypesetterCache addTypesetterForParagraphIdentifier:typesetter:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCTTypesetterCache.mm";
  __int16 v7 = 1024;
  int v8 = 43;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d too many entries in our typesetter cache", (uint8_t *)v2, 0x22u);
}

void sub_1010847C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be adding animations after we've started showing them", v2, v3, v4, v5, v6);
}

void sub_101084848()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected animation started", v2, v3, v4, v5, v6);
}

void sub_1010848D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d animation stopped before starting", v2, v3, v4, v5, v6);
}

void sub_101084958()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected animation stopped", v2, v3, v4, v5, v6);
}

void sub_1010849E0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101084A7C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101084B18()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101084BB4()
{
  int v2 = 67109890;
  sub_1000EDA10();
  uint64_t v3 = "-[CRLCurvedShadowRenderHelper drawCurvedShadow:forImage:inContext:forUnscaledSize:withScaleFactor:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCurvedShadowRenderHelper.m";
  __int16 v6 = 1024;
  int v7 = 152;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CIContext to convert back to a CGImage. Skipping render.", (uint8_t *)&v2, 0x22u);
}

void sub_101084C58()
{
  int v2 = 67110146;
  sub_1000EDA10();
  uint64_t v3 = "-[CRLCurvedShadowRenderHelper drawCurvedShadow:forImage:inContext:forUnscaledSize:withScaleFactor:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCurvedShadowRenderHelper.m";
  __int16 v6 = 1024;
  sub_1000EDA2C();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scaleFactor (%f) should not be greater than 1.", (uint8_t *)&v2, 0x2Cu);
}

void sub_101084CFC()
{
  int v2 = 67110146;
  sub_1000EDA10();
  uint64_t v3 = "-[CRLCurvedShadowRenderHelper drawCurvedShadow:forImage:inContext:forUnscaledSize:withScaleFactor:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCurvedShadowRenderHelper.m";
  __int16 v6 = 1024;
  sub_1000EDA2C();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scaleFactor (%f) should be greater than 0.", (uint8_t *)&v2, 0x2Cu);
}

void sub_101084DA0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCADisplayLinkPlatformAdapter dealloc]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLinkPlatformAdapter.m";
  __int16 v6 = 1024;
  int v7 = 40;
  __int16 v8 = v0;
  __int16 v9 = "_displayLink";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101084E50()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
}

void sub_101084ED8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
}

void sub_101084F60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
}

void sub_101084FE8(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLCanvasAutoscroll p_startAutoscroll:unscaledPoint:unscaledDistancePastVisibleRect:unscaledInset:directions:repeatInterval:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasAutoscroll.m";
  __int16 v7 = 1024;
  int v8 = 170;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", (uint8_t *)v2, 0x22u);
}

void sub_101085094(uint64_t a1, void *a2, void *a3)
{
  __int16 v5 = a2;
  uint8_t v6 = (objc_class *)objc_opt_class();
  __int16 v7 = NSStringFromClass(v6);
  int v8 = [a3 domain];
  int v9 = 138413314;
  uint64_t v10 = a1;
  __int16 v11 = 2114;
  int v12 = v7;
  __int16 v13 = 2114;
  __int16 v14 = v8;
  __int16 v15 = 2048;
  id v16 = [a3 code];
  __int16 v17 = 2112;
  __int16 v18 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to get filetype for URL (%@): errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x34u);
}

void sub_10108519C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[NSURL(CRLAdditions) crl_urlFromUserProvidedTelephoneString:withDataDetector:]_block_invoke";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 292;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected phone number match from NSDataDetector", (uint8_t *)v2, 0x22u);
}

void sub_101085248(void *a1, void *a2, int a3)
{
  __int16 v5 = a1;
  v6[0] = 67110146;
  v6[1] = a3;
  __int16 v7 = 2082;
  int v8 = "+[NSURL(CRLAdditions) crl_URLWithStringDataOnPasteboard:itemSet:pasteboardType:]";
  __int16 v9 = 2082;
  uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m";
  __int16 v11 = 1024;
  int v12 = 323;
  __int16 v13 = 2048;
  id v14 = [a2 count];
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only pasting first item of %lu on pasteboard", (uint8_t *)v6, 0x2Cu);
}

void sub_101085330(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLiOSMultiSelectGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSMultiSelectGestureRecognizer.m";
  __int16 v7 = 1024;
  int v8 = 57;
  __int16 v9 = 2082;
  uint64_t v10 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010853EC(void *a1, unint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = sub_100380B10(a2);
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "enter state %@", v7, v8, v9, v10, 2u);
}

void sub_101085484()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "multi-select ending possible dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010854B8(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = sub_100380B10((unint64_t)[a2 state]);
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "multi-select reset from state %@", v7, v8, v9, v10, 2u);
}

void sub_101085554()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "multi-select failing during a scroll", v2, v3, v4, v5, v6);
}

void sub_101085588(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to not hitting selectable rep", v3);
}

void sub_1010855B8(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to existing dynop", v3);
}

void sub_1010855E8(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "beginning possible dynamic operation", v3);
}

void sub_101085618(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to multiple taps in touch", v3);
}

void sub_101085648()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "failing due to two touches on the same rep", v2, v3, v4, v5, v6);
}

void sub_10108567C(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "restoring original selection after touches cancelled", v3);
}

void sub_1010856AC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  uint64_t v7 = sub_100380B10((unint64_t)[a3 state]);
  int v8 = 138412546;
  uint64_t v9 = v6;
  __int16 v10 = 2112;
  __int16 v11 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "multi-select informed that %@ has taken control. now in state: %@", (uint8_t *)&v8, 0x16u);
}

void sub_101085788(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = sub_100380B10((unint64_t)[a2 state]);
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "operation did end in state %@", v7, v8, v9, v10, 2u);
}

void sub_101085824()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "recognizing multi-select due the repForSelecting changing in response to our selection change", v2, v3, v4, v5, v6);
}

void sub_101085858()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "recognizing multi-select due to extending the selection", v2, v3, v4, v5, v6);
}

void sub_10108588C()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "p_beginMultiSelect", v2, v3, v4, v5, v6);
}

void sub_1010858C0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasKnobTracker initWithRep:knob:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnobTracker.m";
  __int16 v6 = 1024;
  int v7 = 44;
  __int16 v8 = v0;
  uint64_t v9 = "knob";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101085970()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasKnobTracker initWithRep:knob:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnobTracker.m";
  __int16 v6 = 1024;
  int v7 = 43;
  __int16 v8 = v0;
  uint64_t v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101085A20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be trying to customize the touch types for this gesture!", v2, v3, v4, v5, v6);
}

void sub_101085AA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only expect a touch to begin when we are possible.", v2, v3, v4, v5, v6);
}

void sub_101085B30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only expect a single touch in this logic.", v2, v3, v4, v5, v6);
}

void sub_101085BB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have made a decision before touchesEnded", v2, v3, v4, v5, v6);
}

void sub_101085C40()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLiOSImageHUDViewController still ignoring keyboard on dealloc", v2, v3, v4, v5, v6);
}

void sub_101085CC8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101085D50()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101085DEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101085E74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101085EFC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101085F84()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101086020()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010860BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101086144()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only reset editing state if we have a single info selected", v2, v3, v4, v5, v6);
}

void sub_1010861CC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Listening to command notifications when we don't care!", v2, v3, v4, v5, v6);
}

void sub_101086254()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Listening to command notifications when we don't care!", v2, v3, v4, v5, v6);
}

void sub_1010862DC()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLPathEditor toggleSelectedNodeToType:]";
  __int16 v5 = v0;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLPathEditor.m";
  __int16 v7 = 1024;
  int v8 = 1343;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected node type %li", v3, 0x2Cu);
}

void sub_10108638C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLBasicShapeLibraryCollection shapeWithIdentifier:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryCollection.m";
  __int16 v7 = 1024;
  int v8 = 50;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -[CRLBasicShapeLibraryCollection shapeWithIdentifier:] should not be called because CRLBasicShapeLibraryCollection has no editable shapes", (uint8_t *)v2, 0x22u);
}

void sub_101086438()
{
  sub_100008D0C();
  sub_100008CC0();
  os_log_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  __int16 v3 = 1024;
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to set audio session category before starting playback (%@)", v1);
}

void sub_1010864D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The object shouldn't already be playing a movie when -objectWillBeginMoviePlayback is called.", v2, v3, v4, v5, v6);
}

void sub_101086558()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  __int16 v5 = 1024;
  int v6 = 58;
  __int16 v7 = v0;
  int v8 = "object";
  sub_10004F630((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_1010865FC()
{
  sub_100008D0C();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  __int16 v3 = 1024;
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to set audio session category after ending playback (%@)", v1);
}

void sub_101086694()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have a mode to use to reset the audio session.", v2, v3, v4, v5, v6);
}

void sub_10108671C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have a category to use to reset the audio session.", v2, v3, v4, v5, v6);
}

void sub_1010867A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The object should be playing a movie when -objectDidEndMoviePlayback is called.", v2, v3, v4, v5, v6);
}

void sub_10108682C()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  __int16 v5 = 1024;
  int v6 = 88;
  __int16 v7 = v0;
  int v8 = "object";
  sub_10004F630((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_1010868D0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101086964()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be <= end of storage", v2, v3, v4, v5, v6);
}

void sub_1010869EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should not be at the start of the text source", v2, v3, v4, v5, v6);
}

void sub_101086A74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be < NSNotFound", v2, v3, v4, v5, v6);
}

void sub_101086AFC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101086B90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be <= end of storage", v2, v3, v4, v5, v6);
}

void sub_101086C18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be < NSNotFound", v2, v3, v4, v5, v6);
}

void sub_101086CA0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101086D34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
}

void sub_101086DBC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
}

void sub_101086E44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101086ED8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
}

void sub_101086F60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
}

void sub_101086FE8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108707C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101087110()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad charIndex", v2, v3, v4, v5, v6);
}

void sub_101087198()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108722C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d paragraphStyle is not allowed to be nil", v2, v3, v4, v5, v6);
}

void sub_1010872B4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to resolve font name", v2, v3, v4, v5, v6);
}

void sub_10108733C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010873D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected input language code returned by the OS", v2, v3, v4, v5, v6);
}

void sub_101087458()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad text alignment (%lu).");
}

void sub_1010874E8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLHighlightController createLayerWithZOrder:contentsScaleForLayers:]";
  sub_10000BCE4();
  int v3 = 99;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _layer again", v1, 0x22u);
}

void sub_10108757C()
{
  sub_100008C80();
  int v3 = "-[CRLHighlightController p_buildLayersWithBackgroundForPath:withImage:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLHighlightController.m";
  __int16 v6 = 1024;
  int v7 = 218;
  __int16 v8 = v0;
  __int16 v9 = "_backgroundColor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108762C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLHighlightController p_buildLayersWithBackgroundForPath:withImage:]";
  sub_10000BCE4();
  int v3 = 209;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d viewScale must be set before calling this method!", v1, 0x22u);
}

void sub_1010876C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Fill tool can't have a width.", v2, v3, v4, v5, v6);
}

void sub_101087748()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Path insertion tool only knows how to be a monoline, pen, pencil, crayon, watercolor, fountainPen, marker, or fill tool.", v2, v3, v4, v5, v6);
}

void sub_1010877D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Fill tool can't have a width", v2, v3, v4, v5, v6);
}

void sub_101087858()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _dynamicFillPath should not be nil by the time -shapeGestureDetectedOnShapeDrawingTimerHelper: is called", v2, v3, v4, v5, v6);
}

void sub_1010878E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
}

void sub_101087968()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
}

void sub_1010879F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
}

void sub_101087A78()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101087B0C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101087BA0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101087C34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Clipping produced a zero-sized path", v2, v3, v4, v5, v6);
}

void sub_101087CBC()
{
  id v0 = +[CRLAssertionHandler packedBacktraceString];
  sub_1000A1314();
  sub_100045680((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v3, v4, v5, v6, v7);
}

void sub_101087D5C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101087DF0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find correct drawing to fill. Falling back to the bottom drawing.", v2, v3, v4, v5, v6);
}

void sub_101087E78()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be trying to get the stroke on this tool type.", v2, v3, v4, v5, v6);
}

void sub_101087F00(uint8_t *buf, int a2, uint64_t a3, os_log_t log)
{
  *(_DWORD *)buf = 67110146;
  *((_DWORD *)buf + 1) = a2;
  *((_WORD *)buf + 4) = 2082;
  *(void *)(buf + 10) = "+[CRLFreehandDrawingShapeTracingHelper unscaledOutlinePathFromFreehandDrawingShapeLayouts:unsc"
                          "aledOutset:viewScale:]";
  *((_WORD *)buf + 9) = 2082;
  *(void *)(buf + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeTracingHelper.m";
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 139;
  *((_WORD *)buf + 17) = 2048;
  *(void *)(buf + 36) = a3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to trace freehand drawing shape layouts (count: %zu).", buf, 0x2Cu);
}

void sub_101087F8C()
{
  sub_100008C80();
  uint64_t v2 = "-[TSUSparseArray maxIndexForCurrentDepth]";
  sub_10000BCE4();
  int v3 = 301;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not expecting a shiftedDepth larger than 32", v1, 0x22u);
}

void sub_101088020()
{
  sub_100008C80();
  uint64_t v2 = "-[TSUSparseArray increaseDepth]";
  sub_10000BCE4();
  int v3 = 335;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d TSUSparseArray - getting too deep", v1, 0x22u);
}

void sub_1010880B4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Ignored previous assertion failure ***", v1, 2u);
}

void sub_1010880F8(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace: >>%{public}@<<", (uint8_t *)&v3, 0xCu);
}

void sub_1010881A4(void *a1, uint64_t a2)
{
  int v3 = a1;
  int v4 = 134218242;
  intptr_t v5 = sub_1001D84F4();
  __int16 v6 = 2114;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace. Load address 0x%0llx, Backtrace:\n%{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_101088248()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010882DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088370()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088404()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088498()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mapping data providers to types is not allowed after pasteboard writing has started", v2, v3, v4, v5, v6);
}

void sub_101088520()
{
  sub_10000DF44();
  sub_1001DCC38(1.5049e-36, v1, v2, v3);
  *(void *)(v4 + 10) = "-[CRLPasteboardWriteAssistant pasteboardObject]";
  *(_WORD *)(v4 + 18) = v5;
  *(void *)(v4 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardWriteAssistant.mm";
  *(_WORD *)(v4 + 28) = 1024;
  sub_1001DCC24(v6, v4);
  _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pasteboard object has already been serialized. Call %{public}@ instead.", v7, 0x2Cu);
}

void sub_10108859C()
{
  sub_10000DF44();
  sub_1001DCC38(1.5049e-36, v1, v2, v3);
  *(void *)(v4 + 10) = "-[CRLPasteboardWriteAssistant serializeNativeDataForPasteboard:]";
  *(_WORD *)(v4 + 18) = v5;
  *(void *)(v4 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardWriteAssistant.mm";
  *(_WORD *)(v4 + 28) = 1024;
  sub_1001DCC24(v6, v4);
  _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %{public}@ needs to be invoked on the main thread for its implicit read lock", v7, 0x2Cu);
}

void sub_101088618()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No attempt was made to serialize native data", v2, v3, v4, v5, v6);
}

void sub_1010886A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No attempt was made to serialize native data", v2, v3, v4, v5, v6);
}

void sub_101088728(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "void CRLPasteboardAssertNSData(CRLPasteboard *__strong, NSData *__strong, NSString *__strong)";
  __int16 v6 = 2082;
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard_Internal.h";
  __int16 v8 = 1024;
  int v9 = 13;
  __int16 v10 = 2114;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Data for %{public}@ is too large for the pasteboard. It may be silently dropped.", (uint8_t *)v3, 0x2Cu);
}

void sub_1010887E4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPAdornmentRect initWithCharacterFillAdornmentState:]";
  sub_10000BCE4();
  int v3 = 65;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to create an adornment with a non-finite rect", v1, 0x22u);
}

void sub_101088878()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPAdornmentRect initWithCharacterStrokeAdornmentState:]";
  sub_10000BCE4();
  int v3 = 77;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to create an adornment with a non-finite rect", v1, 0x22u);
}

void sub_10108890C(void *a1, int a2, CGFloat a3, CGFloat a4)
{
  uint64_t v7 = a1;
  v16.width = a3;
  v16.height = a4;
  __int16 v8 = NSStringFromCGSize(v16);
  v10[0] = 67110146;
  v10[1] = a2;
  __int16 v11 = 2082;
  sub_100008CC0();
  int v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_10005A878();
  int v13 = 47;
  __int16 v14 = 2114;
  uint64_t v15 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be resampling an image to this size %{public}@ on a platform with memory limits!", (uint8_t *)v10, 0x2Cu);
}

void sub_101088A08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_101088A9C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageResamplingOperation setDesiredAlternateSizeIfConvertedToPNG:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_10005A878();
  int v6 = 66;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not provide a size that is larger than our default size!", v2, 0x22u);
}

void sub_101088B38()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088BCC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088C60()
{
  id v0 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v3, v4, v5, v6, 2u);
}

void sub_101088D08(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_10005A878();
  int v7 = 282;
  __int16 v8 = 2112;
  uint64_t v9 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.", (uint8_t *)v4, 0x2Cu);
}

void sub_101088DBC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101088E50()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageResamplingOperation performResampleOperationWithResampleOptions:bitmapContextOptions:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_10005A878();
  int v6 = 81;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not specify an alternate size if a precise size is required!", v2, 0x22u);
}

void sub_101088EEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize shader library with nil device.", v2, v3, v4, v5, v6);
}

void sub_101088F74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize shader library with nil bundle.", v2, v3, v4, v5, v6);
}

void sub_101088FFC()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create library, error %@");
}

void sub_101089084()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
}

void sub_10108910C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010891A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
}

void sub_101089228()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010892BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
}

void sub_101089344()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010893D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
}

void sub_101089460()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010894F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
}

void sub_10108957C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089610()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010896A4()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create pipeline reflection object, error %@");
}

void sub_10108972C()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create pipeline state, error %@");
}

void sub_1010897B4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089848()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010898DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089970()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't load shaders from nil library", v2, v3, v4, v5, v6);
}

void sub_1010899F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sampler state given but not used.", v2, v3, v4, v5, v6);
}

void sub_101089A80()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089B14()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089BA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to call teardown on the editor helper", v2, v3, v4, v5, v6);
}

void sub_101089C30()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't build an editor from the canvas editor with something that isn't a CRLBoardItemSelection (received %@)");
}

void sub_101089CB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown editor class", v2, v3, v4, v5, v6);
}

void sub_101089D40()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089DD4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the default selection should be pointing at the boardItems we're trying to insert", v2, v3, v4, v5, v6);
}

void sub_101089E5C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089EF0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101089F84(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  sub_100008CCC();
  uint8_t v6 = (objc_class *)objc_opt_class();
  int v7 = NSStringFromClass(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  __int16 v10 = 2082;
  sub_100008CC0();
  sub_100018074();
  int v11 = 1046;
  __int16 v12 = 2114;
  uint64_t v13 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Starting container had a parent info of an unexpected class %{public}@", (uint8_t *)v9, 0x2Cu);
}

void sub_10108A06C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
}

void sub_10108A0F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A188()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't ungroup without a command controller", v2, v3, v4, v5, v6);
}

void sub_10108A210()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A2A4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A338()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A3CC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A460()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Offset for index was too large.", v2, v3, v4, v5, v6);
}

void sub_10108A4E8()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't vend an empty command group: %@");
}

void sub_10108A570()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A60C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A6A8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108A744()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLWPStorageSanitizer filterText:removingAttachments:removingControlCharacters:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorageSanitizer.m";
  __int16 v6 = 1024;
  int v7 = 208;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Internal inconsistency in attributed string", v2, 0x22u);
}

void sub_10108A7E4()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLWPStorageSanitizer filterText:removingAttachments:removingControlCharacters:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorageSanitizer.m";
  __int16 v6 = 1024;
  int v7 = 103;
  __int16 v8 = v0;
  uint64_t v9 = "theStr";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108A894()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10108A928()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10108A9BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10108AA50()
{
  sub_1001FFC04();
  id v2 = v1;
  v11.x = sub_1001FFBF4();
  uint64_t v3 = NSStringFromCGPoint(v11);
  sub_1001FFBE0();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_1001FFBC0((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v6, v7, v8, v9, v10);
}

void sub_10108AB10()
{
  sub_1001FFC04();
  id v2 = v1;
  v11.x = sub_1001FFBF4();
  uint64_t v3 = NSStringFromCGPoint(v11);
  sub_1001FFBE0();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_1001FFBC0((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v6, v7, v8, v9, v10);
}

void sub_10108ABD0()
{
  sub_1001FFC04();
  id v2 = v1;
  v11.x = sub_1001FFBF4();
  uint64_t v3 = NSStringFromCGPoint(v11);
  sub_1001FFBE0();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_1001FFBC0((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v6, v7, v8, v9, v10);
}

void sub_10108AC90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite followButtonFrameInRenderable.", v2, v3, v4, v5, v6);
}

void sub_10108AD18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite sizeOverlayFrameInRenderable.", v2, v3, v4, v5, v6);
}

void sub_10108ADA0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite avatarFrameInRenderable.", v2, v3, v4, v5, v6);
}

void sub_10108AE28()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite standardHUDFrame.", v2, v3, v4, v5, v6);
}

void sub_10108AEB0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Retrieving cached path which is empty! Ignoring.", v2, v3, v4, v5, v6);
}

void sub_10108AF38()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d p_cachedAnchorPointIfAvailableForDirection should only be called when p_cachedPathIfAvailableForDirection is not nil for the same direction", v2, v3, v4, v5, v6);
}

void sub_10108AFC0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108B054()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108B0E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
}

void sub_10108B170()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSGestureDispatcherLogger logGesture:atUnscaledLocation:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSGestureDispatcherLogger.m";
  __int16 v6 = 1024;
  int v7 = 83;
  __int16 v8 = v0;
  uint64_t v9 = "singleGestureStateDictionary";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108B220()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
}

void sub_10108B2A8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSGestureDispatcherLogger logEndStateForGesture:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSGestureDispatcherLogger.m";
  __int16 v6 = 1024;
  int v7 = 98;
  __int16 v8 = v0;
  uint64_t v9 = "singleGestureStateDictionary";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108B358()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
}

void sub_10108B3E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B468()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B4F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B578()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B600()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B688()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B710()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B798()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B820()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B8A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108B930(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10108B9D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BA60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BAE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BB70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BBF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BC80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
}

void sub_10108BD08(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10108BDB0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108BE4C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method only knows how to count pages of shapes.", v2, v3, v4, v5, v6);
}

void sub_10108BED4()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108BF70()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108C00C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for control knob tracker", v2, v3, v4, v5, v6);
}

void sub_10108C094()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLShapeControlLayout only valid for control knob tracker", v2, v3, v4, v5, v6);
}

void sub_10108C11C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLShapeControlRep only valid for control knob tracker", v2, v3, v4, v5, v6);
}

void sub_10108C1A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ending knob when we didn't begin!", v2, v3, v4, v5, v6);
}

void sub_10108C22C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a nil observer with addObserver:", v2, v3, v4, v5, v6);
}

void sub_10108C2B4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a nil observer with addConsolidatedPKDrawingObserver:", v2, v3, v4, v5, v6);
}

void sub_10108C33C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLPKDrawingProvider that has already been torn down", v2, v3, v4, v5, v6);
}

void sub_10108C3C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLPKDrawingProvider", v2, v3, v4, v5, v6);
}

void sub_10108C44C(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "+[CRLSmartStroke classForName:]";
  __int16 v6 = 2082;
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSmartStroke.mm";
  __int16 v8 = 1024;
  int v9 = 64;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find Smart Stroke class for name: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_10108C508(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[CRLPasteboardObjectReadAssistantHelper contentDescriptionFromPasteboard:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardObjectReadAssistantHelper.m";
  __int16 v7 = 1024;
  int v8 = 18;
  __int16 v9 = 2082;
  __int16 v10 = "data";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10108C5C4(void *a1, void *a2)
{
  __int16 v3 = a1;
  __int16 v4 = (objc_class *)objc_opt_class();
  __int16 v5 = NSStringFromClass(v4);
  __int16 v6 = [a2 domain];
  int v7 = 138544130;
  int v8 = v5;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  __int16 v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to deserialize content description - Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_10108C6B8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to deserialize content description - property list format was unexpectedly %lu", (uint8_t *)&v3, 0xCu);
}

void sub_10108C734(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  __int16 v6 = (id *)sub_100008CCC();
  id WeakRetained = objc_loadWeakRetained(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  __int16 v10 = 2082;
  __int16 v11 = "-[CRLCountedObserver decrementCount]";
  __int16 v12 = 2082;
  __int16 v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m";
  __int16 v14 = 1024;
  int v15 = 59;
  __int16 v16 = 2112;
  id v17 = WeakRetained;
  sub_10004F630((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLCountedObserver - attempted to decrement past 0 for observer %@!", (uint8_t *)v9);
}

void sub_10108C818(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a2 = 67110146;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(void *)(a2 + 10) = "-[CRLChangeNotifier p_processChanges:preprocessing:]";
  *(_WORD *)(a2 + 18) = 2082;
  *(void *)(a2 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m";
  *(_WORD *)(a2 + 28) = 1024;
  *(_DWORD *)(a2 + 30) = 310;
  *(_WORD *)(a2 + 34) = 2112;
  *(void *)(a2 + 36) = a1;
  sub_10004F630((void *)&_mh_execute_header, a4, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Exception thrown during %@; some observers may not have been notified.",
    (uint8_t *)a2);
}

void sub_10108C8AC()
{
  sub_100008C80();
  id v5 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  __int16 v6 = v0;
  sub_100008C94();
  int v7 = 243;
  __int16 v8 = v1;
  __int16 v9 = "_objectObserversToCheckForRemovalAfterNotifications";
  sub_10004F630((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v4);
}

void sub_10108C94C()
{
  sub_100008C80();
  id v5 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  __int16 v6 = v0;
  sub_100008C94();
  int v7 = 242;
  __int16 v8 = v1;
  __int16 v9 = "_classObserversToCheckForRemovalAfterNotifications";
  sub_10004F630((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v4);
}

void sub_10108C9EC()
{
  sub_10004F65C();
  uint64_t v3 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  __int16 v4 = v0;
  sub_100008C94();
  sub_10004F648();
  sub_10004F630((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _currentlyNotifyingCount managed to get negative! %zi", v2);
}

void sub_10108CA88()
{
  sub_10004F65C();
  uint64_t v3 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  __int16 v4 = v0;
  sub_100008C94();
  sub_10004F648();
  sub_10004F630((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _currentlyNotifyingCount should be > 0! %zi", v2);
}

void sub_10108CB24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The source storage and/or the specified sub range are invalid.", v2, v3, v4, v5, v6);
}

void sub_10108CBAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d zero-length character", v2, v3, v4, v5, v6);
}

void sub_10108CC34()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to advance curCharIndex", v2, v3, v4, v5, v6);
}

void sub_10108CCBC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d zero-length character", v2, v3, v4, v5, v6);
}

void sub_10108CD44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d request for characters past end of string", v2, v3, v4, v5, v6);
}

void sub_10108CDCC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d request for characters past end of string (extendedString)", v2, v3, v4, v5, v6);
}

void sub_10108CE54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Callers to -[CRLShapeEditor intersectPaths:] must have a -[tag] method to specify what kind of intersection to perform.", v2, v3, v4, v5, v6);
}

void sub_10108CEDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Changing shapes is only supported from within an open command group.", v2, v3, v4, v5, v6);
}

void sub_10108CF64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change shape to a shape whose width and height are both nonzero.", v2, v3, v4, v5, v6);
}

void sub_10108CFEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change shape from a shape whose width or height is zero", v2, v3, v4, v5, v6);
}

void sub_10108D074(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[NSObject(CRLAdditions) crl_removeObserverForToken:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSObject_CRLAdditions.m";
  __int16 v8 = 1024;
  int v9 = 203;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to stop key-value observing on %@ using a token that it was not associated with", (uint8_t *)v3, 0x2Cu);
}

void sub_10108D130()
{
  sub_10021EC78();
  uint64_t v3 = "NSString *CRLAppBundleIdentifier()_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m";
  __int16 v6 = 1024;
  sub_10021EC64();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d App bundle identifier (%@) has unexpected prefix.", v2, 0x2Cu);
}

void sub_10108D1D8()
{
  sub_10021EC78();
  uint64_t v3 = "NSString *CRLAppGroupIdentifier()_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m";
  __int16 v6 = 1024;
  sub_10021EC64();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d App group identifier (%@) has unexpected prefix.", v2, 0x2Cu);
}

void sub_10108D280()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMultipleImporterHelper mediaCompatibilityCheckHasBeenHandledForImporter:]";
  sub_10000BCE4();
  int v3 = 55;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Importer compatibility check is being handled for an importer not in the list.", v1, 0x22u);
}

void sub_10108D314()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMultipleImporterHelper completeImportWithCompatibilityOnAllDevices:allowHEVCContent:]";
  sub_10000BCE4();
  int v3 = 61;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not attempt to complete compatibility logic if not all importers have provided a compatibility response!", v1, 0x22u);
}

void sub_10108D3A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d selection is past the end of storage", v2, v3, v4, v5, v6);
}

void sub_10108D430()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal nil parameter", v2, v3, v4, v5, v6);
}

void sub_10108D4B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal nil parameter", v2, v3, v4, v5, v6);
}

void sub_10108D540()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108D5D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call when layout has not been validated", v2, v3, v4, v5, v6);
}

void sub_10108D65C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal anchored range", v2, v3, v4, v5, v6);
}

void sub_10108D6E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d column transform hasn't been set yet.", v2, v3, v4, v5, v6);
}

void sub_10108D76C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for line fragment", v2, v3, v4, v5, v6);
}

void sub_10108D7F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108D888()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108D91C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10108D9B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d column has unexpected start", v2, v3, v4, v5, v6);
}

void sub_10108DA38()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ruby glyph range is meaningless without limitSelection", v2, v3, v4, v5, v6);
}

void sub_10108DAC0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10108DB48()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep content pile did not implement either CRLInteractiveCanvasRepLayerPile or CRLInteractiveCanvasRepContentPlatformViewPile: %@");
}

void sub_10108DBDC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLInteractiveCanvasRepContentSubviewUpdater p_mainThreadUpdateSubviewsFromRepContentPiles:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m";
  __int16 v6 = 1024;
  int v7 = 138;
  __int16 v8 = v0;
  int v9 = "contentLayers";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108DC8C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The topmost rep content subview should always contain layers", v2, v3, v4, v5, v6);
}

void sub_10108DD14()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should always be a rep content subview with layers on top.", v2, v3, v4, v5, v6);
}

void sub_10108DD9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout should have run at least once on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10108DE24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10108DEAC()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep content pile did not implement either CRLInteractiveCanvasRepLayerPile or CRLInteractiveCanvasRepContentPlatformViewPile: %@");
}

void sub_10108DF40()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reusing the subview for rep content layers must be allowed.", v2, v3, v4, v5, v6);
}

void sub_10108DFC8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10108E050()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLFreehandDrawingSnapToShapeHelper p_snapToShapeWithPKStrokes:isBezierPathFromOutlineFill:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingSnapToShapeHelper.m";
  __int16 v6 = 1024;
  int v7 = 80;
  __int16 v8 = v0;
  int v9 = "_icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108E100()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingSnapToShapeHelper unscaledPKStrokesBySnappingShapeItem:]";
  sub_10000BCE4();
  int v3 = 111;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a valid bezierPath", v1, 0x22u);
}

void sub_10108E194()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingSnapToShapeHelper p_freehandDrawingShapeTypeFromDrawingShapeItem:isShapeItemFromOutlineFill:]";
  sub_10000BCE4();
  int v3 = 307;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown pk shape type", v1, 0x22u);
}

void sub_10108E228(void *a1, int a2)
{
  int v3 = a1;
  __int16 v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_10108E2F0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSCanvasContextMenuInteractionDelegate contextMenuInteraction:configurationForMenuAtLocation:]";
  sub_10000BCE4();
  int v3 = 80;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected menuAppearance!", v1, 0x22u);
}

void sub_10108E384()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSCanvasContextMenuInteractionDelegate contextMenuInteraction:willDisplayMenuForConfiguration:animator:]";
  sub_10000BCE4();
  int v3 = 207;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told will display when already displayed", v1, 0x22u);
}

void sub_10108E418(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLBezierPath(CRLCanvasAdditions) boundsIncludingCRLStroke:]_block_invoke";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPath_CRLCanvasAdditions.m";
  __int16 v7 = 1024;
  int v8 = 45;
}

void sub_10108E4C4(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLDocumentModelEnumerator initWithEnumerator:flags:filter:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDocumentModelEnumerator.m";
  __int16 v7 = 1024;
  int v8 = 67;
  __int16 v9 = 2082;
  __int16 v10 = "enumerator";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10108E580()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
}

void sub_10108E608()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
}

void sub_10108E690(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = a2;
  [v2 delay];
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v6, v7, v8, v9, 2u);
}

void sub_10108E750(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = a2;
  [v2 delay];
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v6, v7, v8, v9, 2u);
}

void sub_10108E810()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
}

void sub_10108E898(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = a2;
  [v2 delay];
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v6, v7, v8, v9, 2u);
}

void sub_10108E958()
{
  sub_100008C80();
  sub_100008CC0();
  id v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSKnobDragGestureRecognizer.m";
  __int16 v4 = 1024;
  int v5 = 197;
  __int16 v6 = v0;
  uint64_t v7 = "_tracker";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108EA04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Our knob validator block expects to stop knob recognition before we have begun", v2, v3, v4, v5, v6);
}

void sub_10108EA8C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delayed knob tracking timer fired when we have no tracker!", v2, v3, v4, v5, v6);
}

void sub_10108EB14()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't have delayed knob tracking!", v2, v3, v4, v5, v6);
}

void sub_10108EB9C(void *a1)
{
  id v2 = a1;
  id v3 = [(id)sub_100008CCC() state];
  uint64_t v4 = sub_100380B10((unint64_t)v3);
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_100236B30((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d delay fired when knob GR in state %@", v7, v8, v9, v10, 2u);
}

void sub_10108EC74(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLHandwritingRecognitionStatusHelper p_recognitionStatusStringsForDrawing:]";
  __int16 v5 = 2082;
  uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLHandwritingRecognitionStatusHelper.m";
  __int16 v7 = 1024;
  int v8 = 193;
  __int16 v9 = 2082;
  uint64_t v10 = "drawing";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10108ED30()
{
  sub_100008C80();
  id v2 = "-[CRLiOSPencilTrayLassoEditingView toggleFillColorPickerPresentation]";
  sub_10000BCE4();
  int v3 = 237;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to toggle fill color picker presentation while its color well is hidden.", v1, 0x22u);
}

void sub_10108EDC4()
{
  sub_100008C80();
  id v2 = "-[CRLiOSPencilTrayLassoEditingView toggleStrokeColorPickerPresentation]";
  sub_10000BCE4();
  int v3 = 246;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to toggle stroke color picker presentation while its color well is hidden.", v1, 0x22u);
}

void sub_10108EE58()
{
  sub_100008C80();
  int v3 = "+[NSUUID(NSUUID_CRLAdditions) crl_uuidByCryptographicHashOfString:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSUUID_CRLAdditions.m";
  __int16 v6 = 1024;
  int v7 = 84;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d SHA256 hash should return 32(CC_SHA256_DIGEST_LENGTH) bytes.", v2, 0x22u);
}

void sub_10108EEF8()
{
  sub_100008C80();
  int v3 = "+[NSUUID(NSUUID_CRLAdditions) crl_uuidByCryptographicHashOfString:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSUUID_CRLAdditions.m";
  __int16 v6 = 1024;
  int v7 = 67;
  __int16 v8 = v0;
  __int16 v9 = "string";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10108EFA8()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad metrics for font %{public}@");
}

void sub_10108F030(int a1)
{
  v3[0] = 67110146;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFontMetricsCache.mm";
  __int16 v6 = 1024;
  int v7 = 54;
  __int16 v8 = v1;
  __int16 v9 = "font";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v3, 0x2Cu);
}

void sub_10108F0E8()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad underlinePosition info for %{public}@");
}

void sub_10108F170()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad underlineThickness info for %{public}@");
}

void sub_10108F1F8()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad xHeight info for %{public}@");
}

void sub_10108F280()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad verticalHeight info for %{public}@");
}

void sub_10108F308()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad spaceAfter for %{public}@");
}

void sub_10108F390()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leadingBelow for %{public}@");
}

void sub_10108F418()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leadingAbove for %{public}@");
}

void sub_10108F4A0()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad descent for %{public}@");
}

void sub_10108F528()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad ascent for %{public}@");
}

void sub_10108F5B0()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad attachmentHeight for %{public}@");
}

void sub_10108F638()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad spaceBefore for %{public}@");
}

void sub_10108F6C0(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLNonInteractiveInsertionContext preferredCenter]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInsertionContext.m";
  __int16 v7 = 1024;
  int v8 = 197;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The preferred center is not applicable for a noninteractive insertion context.", (uint8_t *)v2, 0x22u);
}

void sub_10108F76C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLiOSDocumentMode initWithBoardViewController:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentMode.m";
  __int16 v7 = 1024;
  int v8 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be initializing an abstract instance of CRLiOSDocumentMode.", (uint8_t *)v2, 0x22u);
}

void sub_10108F818(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[NSError(CRLAdditions) crl_errorWithCode:userInfo:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSError_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 39;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad error code", (uint8_t *)v2, 0x22u);
}

void sub_10108F8C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should create item source with at least one item provider!", v2, v3, v4, v5, v6);
}

void sub_10108F94C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "itemProviderError";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_10108F9E4(void *a1)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading image data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_10108FA8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "imageFillError";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_10108FB24(void *a1)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading rich text file. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_10108FBCC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint64_t v6 = [a2 domain];
  [a2 code];
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, 2u);
}

void sub_10108FCBC(void *a1)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading rich text data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_10108FD64(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint64_t v6 = [a2 domain];
  [a2 code];
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100088658();
  sub_10008868C((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, 2u);
}

void sub_10108FE54(void *a1)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error creating NSString from data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_10108FEFC(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  uint64_t v6 = "-[CRLiOSItemProviderItemSource loadImportedTextStringWithHandler:]_block_invoke_2";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 374;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  sub_10004F630((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a string out of data with UTI %@", (uint8_t *)v4);
}

void sub_10108FFAC(void *a1)
{
  id v4 = a1;
  __int16 v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading plain string data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_101090054(void *a1)
{
  id v4 = a1;
  __int16 v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Failed to deserialize the item provider team data with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_1010900FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  id v3 = "progress";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_101090194()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of item providers!", v2, v3, v4, v5, v6);
}

void sub_10109021C(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  sub_100008CCC();
  uint8_t v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = NSStringFromClass(v6);
  *(_DWORD *)uint64_t v10 = 67110146;
  *(_DWORD *)&_DWORD v10[2] = a3;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  *(_DWORD *)&v10[15] = 541;
  v10[17] = 2114;
  uint64_t v11 = v8;
  sub_10004F630((void *)&_mh_execute_header, v3, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Native object provided was not a pasteboard object! Got %{public}@", (uint8_t *)v10);
}

void sub_1010902F8(void *a1)
{
  id v4 = a1;
  id v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Failed to deserialize native data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_1010903A0(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No progress provided for UTI %@", (uint8_t *)v3);
}

void sub_101090438(void *a1)
{
  id v4 = a1;
  id v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading plain text data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_1010904E0(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@", (uint8_t *)v3);
}

void sub_101090578()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "stringError";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
}

void sub_101090610(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No progress provided for UTI %@", (uint8_t *)v3);
}

void sub_1010906A8(void *a1)
{
  id v4 = a1;
  id v5 = (objc_class *)sub_10006AA94();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  [(id)sub_100008CCC() domain];
  objc_claimAutoreleasedReturnValue();
  sub_1002469B8();
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error loading URL data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, v12);
}

void sub_101090750()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "url";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010907E8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "stringError";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
}

void sub_101090880(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v7 = (objc_class *)sub_10006AA94();
  uint64_t v8 = NSStringFromClass(v7);
  uint64_t v9 = [a3 domain];
  int v10 = 138413314;
  uint64_t v11 = a1;
  __int16 v12 = 2114;
  __int16 v13 = v8;
  __int16 v14 = 2114;
  int v15 = v9;
  __int16 v16 = 2048;
  id v17 = [a3 code];
  __int16 v18 = 2112;
  int v19 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error loading importable data from url (%@). Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x34u);
}

void sub_101090980()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of item providers!", v2, v3, v4, v5, v6);
}

void sub_101090A08(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  sub_100008CCC();
  uint8_t v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = NSStringFromClass(v6);
  v8[0] = 67110146;
  v8[1] = a3;
  __int16 v9 = 2082;
  int v10 = "id CRLCheckedProtocolCast(__strong id<NSObject>, NSUInteger, ...)";
  __int16 v11 = 2082;
  __int16 v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m";
  __int16 v13 = 1024;
  int v14 = 65;
  __int16 v15 = 2114;
  __int16 v16 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected object type %{public}@ in checked cast to multiple protocols", (uint8_t *)v8, 0x2Cu);
}

void sub_101090AFC(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLConnectionLineRep newTrackerForKnob:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLConnectionLineRep.m";
  __int16 v7 = 1024;
  int v8 = 250;
  __int16 v9 = 2082;
  int v10 = "knob";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_101090BB8(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  __int16 v5 = "+[CRLWPHyperlinkField newURLFromURLReference:]";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPHyperlinkField.mm";
  __int16 v8 = 1024;
  int v9 = 171;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create an NSURL from \"%@\"", (uint8_t *)v3, 0x2Cu);
}

void sub_101090C74()
{
  sub_100008C80();
  __int16 v3 = "-[CRLImageFaceAnalyzer initWithImageData:assetOwner:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageFaceAnalyzer.m";
  __int16 v6 = 1024;
  int v7 = 38;
  __int16 v8 = v0;
  int v9 = "imageData";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101090D24()
{
  sub_100008C80();
  __int16 v3 = "-[CRLImageFaceAnalyzer p_analyzeFaceRectsIfNeeded]_block_invoke";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageFaceAnalyzer.m";
  __int16 v6 = 1024;
  int v7 = 87;
  __int16 v8 = v0;
  int v9 = "bitmapProvider";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101090DD4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error detecting faces: %@", (uint8_t *)&v2, 0xCu);
}

void sub_101090E4C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLFreehandDrawingTool performActionWithInputPoint:isInitialPoint:isFinalPoint:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTool.m";
  __int16 v7 = 1024;
  int v8 = 55;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be already tracking or performing actions when receiving the initial point.", (uint8_t *)v2, 0x22u);
}

void sub_101090EF8()
{
  sub_100008C80();
  __int16 v3 = "-[CRLConnectionLineOrthogonalLayout getClippedHeadPortion]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLConnectionLineOrthogonalLayout.mm";
  __int16 v6 = 1024;
  int v7 = 179;
  __int16 v8 = v0;
  int v9 = "self.connectedTo";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101090FA8()
{
  sub_100008C80();
  __int16 v3 = "-[CRLConnectionLineOrthogonalLayout getClippedTailPortion]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLConnectionLineOrthogonalLayout.mm";
  __int16 v6 = 1024;
  int v7 = 192;
  __int16 v8 = v0;
  int v9 = "self.connectedFrom";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101091058(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "routePath should never search more than 300 nodes. Searched %i.", (uint8_t *)v2, 8u);
}

void sub_1010910D0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101091164(uint64_t a1, int a2)
{
  LODWORD(v4) = 67110146;
  HIDWORD(v4) = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d no ICC for this rep (%@); consider asking self.canvas instead",
    v4);
}

void sub_1010911F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclass should override this method", v2, v3, v4, v5, v6);
}

void sub_10109127C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d i_layerFrameInScaledCanvasIgnoringDragging is invalid in this state", v2, v3, v4, v5, v6);
}

void sub_101091304()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Connection line item should not be nil.", v2, v3, v4, v5, v6);
}

void sub_10109138C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should not be called if current rep is not connected to connection line.", v2, v3, v4, v5, v6);
}

void sub_101091414(uint64_t a1, int a2, NSObject *a3)
{
  if (a1)
  {
    int v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    uint8_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint8_t v6 = @"Nil";
  }
  v8[0] = 67110402;
  v8[1] = a2;
  sub_100236B24();
  int v9 = "-[CRLCanvasRep repForPreviewing]";
  sub_10000BCE4();
  int v10 = 1139;
  __int16 v11 = 2114;
  __int16 v12 = v6;
  __int16 v13 = 2050;
  uint64_t v14 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should have been a rep suitable for previewing <%{public}@: %{public}p>", (uint8_t *)v8, 0x36u);
  if (a1) {
}
  }

void sub_101091514()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find topmost rotated ancestor for counteracting the layer transform.", v2, v3, v4, v5, v6);
}

void sub_10109159C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This rep's clipRect should not be null.", v2, v3, v4, v5, v6);
}

void sub_101091624()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010916B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If something in a group has been selected, there should  be a group selection.", v2, v3, v4, v5, v6);
}

void sub_101091740()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect four collaborator sublayers", v2, v3, v4, v5, v6);
}

void sub_1010917C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -positionOfStandardKnob:forBounds: works for standard knobs only", v2, v3, v4, v5, v6);
}

void sub_101091850()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010918E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning dynamic operation on rep already being manipulated", v2, v3, v4, v5, v6);
}

void sub_10109196C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't have shadow renderable if shadow is not enabled", v2, v3, v4, v5, v6);
}

void sub_1010919F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101091A88()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d dynamic drag beginning outside of dynamic operation", v2, v3, v4, v5, v6);
}

void sub_101091B10()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101091BA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d dynamic rotate began outside of dynamic operation", v2, v3, v4, v5, v6);
}

void sub_101091C2C(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  sub_100008CCC();
  uint8_t v6 = (objc_class *)objc_opt_class();
  int v7 = NSStringFromClass(v6);
  v8[0] = 67110146;
  v8[1] = a3;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't know how to rotate a %@", (uint8_t *)v8, 0x2Cu);
}

void sub_101091D04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101091D98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d resize begins without being in dynamic operation", v2, v3, v4, v5, v6);
}

void sub_101091E20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't create CRLCommandSetInfoGeometry without a boardItem.", v2, v3, v4, v5, v6);
}

void sub_101091EA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d free transform begins without being in dynamic operation", v2, v3, v4, v5, v6);
}

void sub_101091F30()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101091FC4(uint64_t a1, int a2)
{
  LODWORD(v4) = 67110146;
  HIDWORD(v4) = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a preview drag image for infos %@", v4);
}

void sub_101092054()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPStorage(SpellCheck) rangeOfNumericalSuffixPrecedingCharIndex:forLocale:]";
  sub_10000BCE4();
  int v3 = 23;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid charIndex.", v1, 0x22u);
}

void sub_1010920E8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPStorage(SpellCheck) rangeOfNumericalSuffixPrecedingCharIndex:forLocale:]";
  sub_10000BCE4();
  int v3 = 19;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Locale string is too short.", v1, 0x22u);
}

void sub_10109217C()
{
  sub_100008C80();
  int v3 = "-[CRLPasteboardCopyAssistant initWithPasteboard:sourceContext:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardCopyAssistant.mm";
  __int16 v6 = 1024;
  int v7 = 19;
  __int16 v8 = v0;
  int v9 = "pasteboard";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10109222C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPasteboardCopyAssistant loadData]";
  sub_10000BCE4();
  int v3 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't attempt to copy before trying to load native data.", v1, 0x22u);
}

void sub_1010922C0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPasteboardCopyAssistant copyToPasteboardIsSmartCopy:]";
  sub_10000BCE4();
  int v3 = 41;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_101092354()
{
  sub_100008C80();
  int v3 = "-[CRLWPRep(DragAdditions) updateDragAndDropUIForPoint:dragInfo:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRep+DragAdditions.m";
  __int16 v6 = 1024;
  int v7 = 243;
  __int16 v8 = 2080;
  int v9 = "-[CRLWPRep(DragAdditions) updateDragAndDropUIForPoint:dragInfo:]";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If %s found model objects, one should be a storage.", v2, 0x2Cu);
}

void sub_101092400()
{
  sub_100008C80();
  int v3 = "-[CRLWPRep(DragAdditions) p_dragItemsForBeginningDragWithSelection:inlineRepBeingDragged:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRep+DragAdditions.m";
  __int16 v6 = 1024;
  int v7 = 395;
  __int16 v8 = v0;
  int v9 = "itemProvider";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010924B0()
{
  sub_100008C80();
  int v3 = "-[CRLDisplayLink setPaused:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLink.m";
  __int16 v6 = 1024;
  int v7 = 71;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't pause an invalid display link.", v2, 0x22u);
}

void sub_101092550()
{
  sub_100008C80();
  int v3 = "-[CRLDisplayLinkManager p_createPlatformAdapter]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLink.m";
  __int16 v6 = 1024;
  int v7 = 181;
  __int16 v8 = v0;
  int v9 = "_adapter";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101092600()
{
  sub_100008C80();
  int v3 = "-[CRLDisplayLinkManager p_destroyPlatformAdapter]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLink.m";
  __int16 v6 = 1024;
  int v7 = 186;
  __int16 v8 = v0;
  int v9 = "_adapter";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010926B0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109274C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010927E8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101092884()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupLayout childInfosForChildLayouts]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupLayout.m";
  __int16 v6 = 1024;
  int v7 = 133;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have same number of children!", v2, 0x22u);
}

void sub_101092924()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupLayout p_createDynamicCopies]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupLayout.m";
  __int16 v6 = 1024;
  int v7 = 773;
  __int16 v8 = v0;
  int v9 = "_dynamicLayoutGeometry";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010929D4()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupLayout p_destroyDynamicCopies]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupLayout.m";
  __int16 v6 = 1024;
  int v7 = 783;
  __int16 v8 = v0;
  int v9 = "_dynamicLayoutGeometry";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101092A84(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLCanvasHUDController p_showHUDAtPoint:inCanvasView:withNudge:size:anchorPoint:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasHUDController.m";
  __int16 v7 = 1024;
  int v8 = 211;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to move the CanvasHUD from one canvas to another while it is visible!", (uint8_t *)v2, 0x22u);
}

void sub_101092B30(void *a1, int a2, CGFloat a3, CGFloat a4)
{
  __int16 v7 = a1;
  v18.x = a3;
  v18.y = a4;
  int v8 = NSStringFromCGPoint(v18);
  v9[0] = 67110146;
  v9[1] = a2;
  __int16 v10 = 2082;
  __int16 v11 = "-[CRLCanvasHUDController p_showHUDAtPoint:inCanvasView:withNudge:size:anchorPoint:]";
  __int16 v12 = 2082;
  __int16 v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasHUDController.m";
  __int16 v14 = 1024;
  int v15 = 204;
  __int16 v16 = 2112;
  id v17 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Anchor point should be [0, 1]! Got %@", (uint8_t *)v9, 0x2Cu);
}

void sub_101092C34()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101092CD0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_101092D6C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101092E08()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
}

void sub_101092E90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
}

void sub_101092F18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
}

void sub_101092FA0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
}

void sub_101093028()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid preset", v2, v3, v4, v5, v6);
}

void sub_1010930B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
}

void sub_101093138()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
}

void sub_1010931C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
}

void sub_101093248()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010932DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093370()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for mask mode center of rotation when not in mask edit mode", v2, v3, v4, v5, v6);
}

void sub_1010933F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mode", v2, v3, v4, v5, v6);
}

void sub_101093480()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mask should never be reset in mask edit mode", v2, v3, v4, v5, v6);
}

void sub_101093508()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d maskWasApplied should not be called in mask edit mode", v2, v3, v4, v5, v6);
}

void sub_101093590()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageLayout.m";
  __int16 v4 = 1024;
  int v5 = 893;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d already editing mask in mode %ld", v2, 0x2Cu);
}

void sub_10109363C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010936D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d not in mask edit mode", v2, v3, v4, v5, v6);
}

void sub_101093758()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If image has masking path it must specify a path to stroke", v2, v3, v4, v5, v6);
}

void sub_1010937E0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093874(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 1176;
  __int16 v6 = v1;
  uint64_t v7 = "self.layoutState";
  __int16 v8 = v1;
  int v9 = "CRLCanvasLayoutDynamic";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_101093934(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 1174;
  __int16 v6 = v1;
  uint64_t v7 = "self.layoutState";
  __int16 v8 = v1;
  int v9 = "CRLCanvasLayoutStatic";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010939F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093A88()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093B1C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093BB0(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLinePathSource.m";
  __int16 v7 = 1024;
  int v8 = 46;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ignoring invalid bezier path %@", (uint8_t *)v4, 0x2Cu);
}

void sub_101093C68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093D00()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093D98()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101093E30(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[AVAssetExportSession(CRLAdditions) crl_exportSessionWithAsset:presetName:preserveFrameDuration:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/AVAssetExportSession_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have been able to request conversion to HEVC on hardware without encoding support!", (uint8_t *)v2, 0x22u);
}

void sub_101093EDC(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLMutableDropShadow setColor:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowMutableMethods.h";
  __int16 v7 = 1024;
  int v8 = 34;
  __int16 v9 = 2082;
  uint64_t v10 = "color";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_101093F98(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLiOSDocumentModeFreehandDrawingTransform modeWillBeginFromMode:forced:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentModeFreehandDrawingTransform.m";
  __int16 v7 = 1024;
  int v8 = 23;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Transform mode is a submode of freehand drawing mode and can only transition from a freehand drawing mode", (uint8_t *)v2, 0x22u);
}

void sub_101094044()
{
  sub_100008C80();
  __int16 v3 = "+[CRLConnectionLineAdjustmentHelper p_getUpdatedMagnetForClineItem:forHeadMagnet:withOriginalLayout:withIcc:newConnectedInfo:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLineAdjustmentHelper.m";
  __int16 v6 = 1024;
  int v7 = 132;
  __int16 v8 = v0;
  __int16 v9 = "originalLayout";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010940F4()
{
  sub_100008C80();
  __int16 v3 = "+[CRLConnectionLineAdjustmentHelper p_computeLayoutInfoGeometry:andPathSource:forConnectionLine:withBoardItemOwne"
       "r:]_block_invoke";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLineAdjustmentHelper.m";
  __int16 v6 = 1024;
  int v7 = 239;
  __int16 v8 = v0;
  __int16 v9 = "layout";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010941A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot show media replace UI with cross-container selection!", v2, v3, v4, v5, v6);
}

void sub_10109422C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing replace media UI when more than one image is selected!", v2, v3, v4, v5, v6);
}

void sub_1010942B4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The URL array must only contain one object.", v2, v3, v4, v5, v6);
}

void sub_10109433C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The data array must only contain one object.", v2, v3, v4, v5, v6);
}

void sub_1010943C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't replace media interactively without running completion blocks on the main queue.", v2, v3, v4, v5, v6);
}

void sub_10109444C(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_101094514(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLMediaReplacingHelper p_replaceCanvasElementInfo:withInfoFromInfoImporter:interactively:allowedTypes:actionSt"
       "ring:queue:completion:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m";
  __int16 v8 = 1024;
  int v9 = 254;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid single info to replace: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010945D0(int a1, NSObject *a2)
{
  v2[0] = 67110402;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLMediaReplacingHelper p_replaceCanvasElementInfo:withInfoFromInfoImporter:interactively:allowedTypes:actionSt"
       "ring:queue:completion:]_block_invoke_8";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m";
  __int16 v7 = 1024;
  int v8 = 445;
  __int16 v9 = 2082;
  __int16 v10 = "dispatch_get_main_queue()";
  __int16 v11 = 2082;
  __int16 v12 = "queue";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_10109469C()
{
  sub_100008C80();
  uint64_t v2 = "CRLCanvasKnobTag CRLCanvasKnobTagByRotating270Degrees(CRLCanvasKnobTag)";
  sub_10000BCE4();
  int v3 = 59;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", v1, 0x22u);
}

void sub_101094730()
{
  sub_100008C80();
  uint64_t v2 = "CRLCanvasKnobTag CRLCanvasKnobTagByRotating90Degrees(CRLCanvasKnobTag)";
  sub_10000BCE4();
  int v3 = 88;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", v1, 0x22u);
}

void sub_1010947C4()
{
  sub_100008C80();
  __int16 v4 = "CRLCanvasKnobTag CRLCanvasKnobTagWithFlip(CRLCanvasKnobTag)";
  __int16 v5 = v0;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m";
  __int16 v7 = 1024;
  int v8 = 238;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d don't know how to flip knob tag %tu", v3, 0x2Cu);
}

void sub_101094874()
{
  sub_100008C80();
  int v3 = "-[CRLCanvasKnob initWithType:position:radius:tag:onRep:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m";
  __int16 v6 = 1024;
  int v7 = 313;
  __int16 v8 = v0;
  __int16 v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_101094924()
{
  sub_100008C80();
  int v3 = "-[CRLiOSRepDragGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepDragGestureRecognizer.m";
  __int16 v6 = 1024;
  int v7 = 108;
  __int16 v8 = v0;
  __int16 v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010949D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should close group before resetting", v2, v3, v4, v5, v6);
}

void sub_101094A5C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = sub_100380B10((unint64_t)[a2 state]);
  sub_10000BD3C();
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "reset drag from state %@", v7, v8, v9, v10, v11);
}

void sub_101094AF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d drag failed to take control!", v2, v3, v4, v5, v6);
}

void sub_101094B7C(unint64_t a1, void *a2)
{
  if (a1 > 5) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = (uint64_t)*(&off_1014E7D50 + a1);
  }
  int v4 = 138412290;
  uint64_t v5 = v2;
  uint64_t v3 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "set drag state to %@", (uint8_t *)&v4, 0xCu);
}

void sub_101094C28()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "failing during a scroll", v2, v3, v4, v5, v6);
}

void sub_101094C5C()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "dragForDragging is not the repForSelecting, no dragging allowed", v2, v3, v4, v5, v6);
}

void sub_101094C90()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "freehand drawing toolkit preventing drag", v2, v3, v4, v5, v6);
}

void sub_101094CC4(void *a1, void *a2)
{
  id v3 = a1;
  [a2 count];
  sub_10000BD3C();
  sub_1001B94C4((void *)&_mh_execute_header, v4, v5, "%zi touches began", v6, v7, v8, v9, v10);
}

void sub_101094D4C()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "ignoring touch movement to defer to system drag gesture", v2, v3, v4, v5, v6);
}

void sub_101094D80(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = sub_100380B10((unint64_t)[a2 state]);
  sub_10000BD3C();
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "ending gesture with state: %@", v7, v8, v9, v10, v11);
}

void sub_101094E18(void *a1, void *a2)
{
  id v3 = a1;
  [a2 count];
  sub_10000BD3C();
  sub_1001B94C4((void *)&_mh_execute_header, v4, v5, "%zi touches ended", v6, v7, v8, v9, v10);
}

void sub_101094EA0()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "dragged too far during delay. failing.", v2, v3, v4, v5, v6);
}

void sub_101094ED4()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "delay elapsed", v2, v3, v4, v5, v6);
}

void sub_101094F08()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "beginning drag gesture", v2, v3, v4, v5, v6);
}

void sub_101094F3C()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "begin tracking drag", v2, v3, v4, v5, v6);
}

void sub_101094F70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d setting tracker points when there is no tracker", v2, v3, v4, v5, v6);
}

void sub_101094FF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Search reference selection path must contain the text selection if selection path is provided", v2, v3, v4, v5, v6);
}

void sub_101095080()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New selection is not the same class as the old selection.", v2, v3, v4, v5, v6);
}

void sub_101095108()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection path must be provided on initialization for any search reference that is asked for one.", v2, v3, v4, v5, v6);
}

void sub_101095190(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  id v6 = [a2 code];
  uint64_t v7 = [a2 domain];
  v8[0] = 67110658;
  v8[1] = a3;
  __int16 v9 = 2082;
  uint8_t v10 = "+[CRLManagedAccountUtilities loggedInUserHasManagedAppleID]";
  __int16 v11 = 2082;
  __int16 v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLManagedAccountUtilities.m";
  __int16 v13 = 1024;
  int v14 = 26;
  __int16 v15 = 2048;
  id v16 = v6;
  __int16 v17 = 2114;
  CGPoint v18 = v7;
  __int16 v19 = 2112;
  __int16 v20 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not determine if iCloud account is Managed Apple ID, error: %zd %{public}@ %@", (uint8_t *)v8, 0x40u);
}

void sub_1010952B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't end paragraph layout", v2, v3, v4, v5, v6);
}

void sub_101095338()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d paragraph must be set up before requesting typesetter", v2, v3, v4, v5, v6);
}

void sub_1010953C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil state in paragraph layout", v2, v3, v4, v5, v6);
}

void sub_101095448()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010954DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cached paragraph typesetter has wrong char count", v2, v3, v4, v5, v6);
}

void sub_101095564()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010955F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one style run", v2, v3, v4, v5, v6);
}

void sub_101095680()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Incorrect initial range", v2, v3, v4, v5, v6);
}

void sub_101095708()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d localRange.length must be >= 1", v2, v3, v4, v5, v6);
}

void sub_101095790()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101095824()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid local range", v2, v3, v4, v5, v6);
}

void sub_1010958AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create temporary string for _textBuffer", v2, v3, v4, v5, v6);
}

void sub_101095934()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010959C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid local range", v2, v3, v4, v5, v6);
}

void sub_101095A50()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101095AE4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101095B78()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101095C0C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid localRange parameter", v2, v3, v4, v5, v6);
}

void sub_101095C94()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Last line should reach the end of the paragraph", v2, v3, v4, v5, v6);
}

void sub_101095D1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad endCharIndex", v2, v3, v4, v5, v6);
}

void sub_101095DA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad lineRef count", v2, v3, v4, v5, v6);
}

void sub_101095E2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leading", v2, v3, v4, v5, v6);
}

void sub_101095EB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad start char index", v2, v3, v4, v5, v6);
}

void sub_101095F3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't skip glyph vectors with ruby", v2, v3, v4, v5, v6);
}

void sub_101095FC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d layoutLine called without paragraph being set up correctly", v2, v3, v4, v5, v6);
}

void sub_10109604C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPResolvePropertyForStyles should not return NSNull.", v2, v3, v4, v5, v6);
}

void sub_1010960D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101096168()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect label color, or paragraph color as the default.", v2, v3, v4, v5, v6);
}

void sub_1010961F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad localMaxCharIndex", v2, v3, v4, v5, v6);
}

void sub_101096278()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CTTypesetterCreateLine returned nil", v2, v3, v4, v5, v6);
}

void sub_101096300()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad line width", v2, v3, v4, v5, v6);
}

void sub_101096388()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad hyphenation result", v2, v3, v4, v5, v6);
}

void sub_101096410()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil lineRef", v2, v3, v4, v5, v6);
}

void sub_101096498()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil typesetter", v2, v3, v4, v5, v6);
}

void sub_101096520()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
  __int16 v4 = 1024;
  int v5 = 2878;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range length %ld.", v2, 0x2Cu);
}

void sub_1010965CC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d line fragment isn't from the current paragraph", v2, v3, v4, v5, v6);
}

void sub_101096654()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal list level", v2, v3, v4, v5, v6);
}

void sub_1010966DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad run index", v2, v3, v4, v5, v6);
}

void sub_101096764()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Negative lineRef start position", v2, v3, v4, v5, v6);
}

void sub_1010967EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Emphasis marks, no font.", v2, v3, v4, v5, v6);
}

void sub_101096874()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad runCount", v2, v3, v4, v5, v6);
}

void sub_1010968FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d break line has no thickness", v2, v3, v4, v5, v6);
}

void sub_101096984()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d line fragment isn't from the current paragraph", v2, v3, v4, v5, v6);
}

void sub_101096A0C()
{
  sub_100008C80();
  sub_1002A7E2C();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_101096A8C()
{
  sub_100008C80();
  sub_1002A7E2C();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
}

void sub_101096B0C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad strikethru value", v2, v3, v4, v5, v6);
}

void sub_101096B94()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad underline value", v2, v3, v4, v5, v6);
}

void sub_101096C1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad font", v2, v3, v4, v5, v6);
}

void sub_101096CA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad writing direction map.", v2, v3, v4, v5, v6);
}

void sub_101096D2C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLZipFileWriteChannel writeData:handler:]";
  sub_10000BCE4();
  int v3 = 40;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v1, 0x22u);
}

void sub_101096DC0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLZipFileWriteChannel flushWithCompletion:]";
  sub_10000BCE4();
  int v3 = 57;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Flushing ZIP write channel only adds a barrier.", v1, 0x22u);
}

void sub_101096E54(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPPadding initWithTopInset:leftInset:bottomInset:rightInset:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPPadding.mm";
  __int16 v7 = 1024;
  int v8 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal huge padding value", (uint8_t *)v2, 0x22u);
}

void sub_101096F00(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLCanvasLayoutController p_recreateLayoutsIfNeededToValidateLayouts:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutController.m";
  __int16 v7 = 1024;
  int v8 = 637;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be validating layouts that need recreating", (uint8_t *)v2, 0x22u);
}

void sub_101096FAC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097040()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010970D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097168()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010971FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097290()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097324()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010973B8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109744C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010974E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot insert newline with cross-container selection!", v2, v3, v4, v5, v6);
}

void sub_101097568()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot check that all images are supported types with cross-container selection!", v2, v3, v4, v5, v6);
}

void sub_1010975F0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097684()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot toggle mask edit mode with cross-container selection!", v2, v3, v4, v5, v6);
}

void sub_10109770C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010977A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097834()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010978C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v2, v3, v4, v5, v6);
}

void sub_101097950()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shape is not a line segment, but using line segment knob tracker", v2, v3, v4, v5, v6);
}

void sub_1010979D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for line segment knob tracker", v2, v3, v4, v5, v6);
}

void sub_101097A60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong rep class for line segment knob tracker", v2, v3, v4, v5, v6);
}

void sub_101097AE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob type for line segment resize", v2, v3, v4, v5, v6);
}

void sub_101097B70()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097C04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layouts must either override computeLayoutGeometry, or have a non-nil info to query for geometry", v2, v3, v4, v5, v6);
}

void sub_101097C8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097D20()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097DB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not begin a dynamic operation while already in one.", v2, v3, v4, v5, v6);
}

void sub_101097E3C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097ED0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097F64()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101097FF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not transfer layout geometry to info that's in the document!", v2, v3, v4, v5, v6);
}

void sub_101098080()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098114()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mode", v2, v3, v4, v5, v6);
}

void sub_10109819C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only be called when we have a dynamic info geometry to reset!", v2, v3, v4, v5, v6);
}

void sub_101098224()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should be called only when dragging in mask mode", v2, v3, v4, v5, v6);
}

void sub_1010982AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098340()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010983D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098468()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010984FC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLHyperlinkRegion initWithURL:bezierPath:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLHyperlinkRegion.m";
  __int16 v6 = 1024;
  int v7 = 30;
  __int16 v8 = v0;
  __int16 v9 = "aBezierPath != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_1010985AC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLHyperlinkRegion initWithURL:bezierPath:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLHyperlinkRegion.m";
  __int16 v6 = 1024;
  int v7 = 29;
  __int16 v8 = v0;
  __int16 v9 = "aURL != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10109865C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CVC should have been torn down before dealloc", v2, v3, v4, v5, v6);
}

void sub_1010986E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098778()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109880C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010988A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098934()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something has gone wrong.", v2, v3, v4, v5, v6);
}

void sub_1010989BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098A50()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about indirect touches!", v2, v3, v4, v5, v6);
}

void sub_101098AD8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about touches!", v2, v3, v4, v5, v6);
}

void sub_101098B60()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098BF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about indirect touches!", v2, v3, v4, v5, v6);
}

void sub_101098C7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about touches!", v2, v3, v4, v5, v6);
}

void sub_101098D04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101098D98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected context menu controller closing!", v2, v3, v4, v5, v6);
}

void sub_101098E20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected context menu controller updating!", v2, v3, v4, v5, v6);
}

void sub_101098EA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_101098F30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to enter Quick Select mode at an inappropriate time.", v2, v3, v4, v5, v6);
}

void sub_101098FB8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109904C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010990E0(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 2439;
  __int16 v6 = v1;
  int v7 = "alignmentController";
  __int16 v8 = v1;
  __int16 v9 = "mAlignmentController";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010991A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099234(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 2444;
  __int16 v6 = v1;
  int v7 = "alignmentController";
  __int16 v8 = v1;
  __int16 v9 = "mAlignmentController";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010992F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099388()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109941C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be started on the main thread,", v2, v3, v4, v5, v6);
}

void sub_1010994A4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099538()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be started on the main thread,", v2, v3, v4, v5, v6);
}

void sub_1010995C0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099654()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be ended on the main thread,", v2, v3, v4, v5, v6);
}

void sub_1010996DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099770()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven calls to begin/endPreventingDefaultPencilBehaviors!", v2, v3, v4, v5, v6);
}

void sub_1010997F8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109988C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099920()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMultiRepRotateTracker unscaledCenterForRotation]";
  sub_10000BCE4();
  int v3 = 45;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one tracker to ask for its center of rotation", v1, 0x22u);
}

void sub_1010999B4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMultiRepRotateTracker currentTotalAngleOfRotationInRadians]";
  sub_10000BCE4();
  int v3 = 58;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one tracker to ask for its total angle of rotation", v1, 0x22u);
}

void sub_101099A48()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099AE4()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCurvedShadow newShadowImageForRep:withSize:drawSelector:unflipped:]";
  sub_10000BCE4();
  int v3 = 217;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CGContext to render. Returning an empty image instead.", v1, 0x22u);
}

void sub_101099B78()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCurvedShadow newShadowImageForRep:withSize:drawSelector:unflipped:]";
  sub_10000BCE4();
  int v3 = 249;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CGContext to render. Returning empty image instead", v1, 0x22u);
}

void sub_101099C0C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099CA8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_101099D44(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[CRLCommandControllerObjCHelper fatalAssertOnNilCommand:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandControllerObjCHelper.m";
  __int16 v7 = 1024;
  int v8 = 17;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to enqueue nil command.", (uint8_t *)v2, 0x22u);
}

void sub_101099DF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index vector size is wrong", v2, v3, v4, v5, v6);
}

void sub_101099E80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected an even number of indexes", v2, v3, v4, v5, v6);
}

void sub_101099F08()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index vector size is wrong", v2, v3, v4, v5, v6);
}

void sub_101099F90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be trying to map NSNotFound", v2, v3, v4, v5, v6);
}

void sub_10109A018()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad affinity", v2, v3, v4, v5, v6);
}

void sub_10109A0A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be trying to map NSNotFound", v2, v3, v4, v5, v6);
}

void sub_10109A128()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asked to paste when we said we did not want to!", v2, v3, v4, v5, v6);
}

void sub_10109A1B0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10109A258(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_10109A300()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for subselection freehand drawings if we cannot copy subselection!", v2, v3, v4, v5, v6);
}

void sub_10109A388()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a layout so that we can calculate the geometries correctly", v2, v3, v4, v5, v6);
}

void sub_10109A410()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109A4A4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only call this if we have freehand drawings to insert!", v2, v3, v4, v5, v6);
}

void sub_10109A52C(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingEditor.m";
  __int16 v7 = 1024;
  int v8 = 619;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary directory for sharing drawings as images: %@", (uint8_t *)v4, 0x2Cu);
}

void sub_10109A5E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109A678()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109A70C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109A7A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for starPoints on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109A828()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for starRadius on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109A8B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109A938()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109A9C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109AA48()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
}

void sub_10109AAD0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch force is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10109AB58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch azimuth is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10109ABE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch altitudeAngle is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10109AC68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109ACFC(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  [a2 code];
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_10109ADB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109AE48()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLMovieItemImporter p_importBoardItemFromAssetConvertingIfNeededToRequiredCompatibilityLevel:allowHEVCContent:"
       "fromCompatibilityLevel:]";
  sub_10000BCE4();
  int v3 = 342;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method must not be called if the importer has been canceled.", v1, 0x22u);
}

void sub_10109AEDC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109AF70()
{
  sub_100008C80();
  uint64_t v2 = "+[CRLMovieItemImporter p_setMovieProperties:fromLoadedAsset:containsVideoTrack:]";
  sub_10000BCE4();
  int v3 = 502;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid duration received from avAsset on load, preventing us from setting up start and end time properly based on it.", v1, 0x22u);
}

void sub_10109B004(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  [a2 code];
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error creating asset wrapper: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_10109B0BC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [*a1 domain];
  [*a1 code];
  sub_1002E7E60();
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_10109B180()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109B214(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[NSProgress(NSProgress_CRLAdditions) crl_progressWithCRLProgress:totalUnitCount:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSProgress_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 70;
  __int16 v9 = 2082;
  uint64_t v10 = "progressObserver";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10109B2D0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSKeyboardMonitor p_scheduleKeyboardIsAnimatingInTimer]_block_invoke";
  sub_10000BCE4();
  int v3 = 278;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Had to force keyboard animating to NO, OS never finished telling us the keyboard came in or cancelled.", v1, 0x22u);
}

void sub_10109B364()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSKeyboardMonitor addModalKeyboardObserver:]";
  sub_10000BCE4();
  int v3 = 306;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d addModalKeyboardObserver attempt to add the same model observer.", v1, 0x22u);
}

void sub_10109B3F8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109B48C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109B520()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109B5B4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109B648(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  __int16 v17 = a1;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  CGPoint v18 = NSStringFromCGRect(v24);
  v25.origin.x = a6;
  v25.origin.y = a7;
  v25.size.width = a8;
  v25.size.height = a9;
  __int16 v19 = NSStringFromCGRect(v25);
  int v20 = 138543618;
  CGRect v21 = v18;
  __int16 v22 = 2114;
  id v23 = v19;
  _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "The OS lied about the keyboard frame for a null input view %{public}@. We ignored it and replaced it with %{public}@.", (uint8_t *)&v20, 0x16u);
}

void sub_10109B76C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFill applyToRenderable:withScale:]";
  sub_10000BCE4();
  int v3 = 72;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called -applyToRenderable:withScale: on a CRLFill that can't", v1, 0x22u);
}

void sub_10109B800()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFill fillType]";
  sub_10000BCE4();
  int v3 = 112;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses must override", v1, 0x22u);
}

void sub_10109B894(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  v7[0] = 67110146;
  v7[1] = a3;
  __int16 v8 = 2082;
  __int16 v9 = "-[CRLKeyboardMovementManipulator duplicateSelectionMovingByDelta:]";
  __int16 v10 = 2082;
  uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLKeyboardMovementManipulator.m";
  __int16 v12 = 1024;
  int v13 = 143;
  __int16 v14 = 2114;
  __int16 v15 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Editor (%{public}@) responds to copy: but not copyForKeyboardMovementDuplicationToPasteboard:. Falling back to canvas editor.", (uint8_t *)v7, 0x2Cu);
}

void sub_10109B98C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLColorFill initWithColor:]";
  sub_10000BCE4();
  int v3 = 145;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for color", v1, 0x22u);
}

void sub_10109BA20()
{
  sub_100008C80();
  int v3 = "-[CRLColorFill initWithUIColor:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLColorFill.m";
  __int16 v6 = 1024;
  int v7 = 170;
  __int16 v8 = v0;
  __int16 v9 = "uiColor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10109BAD0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLColorFill applyToRenderable:withScale:]";
  sub_10000BCE4();
  int v3 = 259;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying color fill with unsupported properties to CRLCanvasRenderable", v1, 0x22u);
}

void sub_10109BB64()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10109BBF8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10109BC8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10109BD20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
}

void sub_10109BDA8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
}

void sub_10109BE30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
}

void sub_10109BEB8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_10109BF4C()
{
  sub_100008C80();
  uint64_t v3 = "-[NSSet(CRLAdditions) crl_setByMappingObjectsUsingBlock:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSSet_CRLAdditions.m";
  __int16 v6 = 1024;
  int v7 = 95;
  __int16 v8 = v0;
  __int16 v9 = "block != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_10109BFFC()
{
  sub_100008C80();
  uint64_t v3 = "-[NSSet(CRLAdditions) crl_onlyObject]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSSet_CRLAdditions.m";
  __int16 v6 = 1024;
  int v7 = 126;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d As this method returns the only object in the set, it only makes sense if the set has at most one object.", v2, 0x22u);
}

void sub_10109C09C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasMutableInfoGeometry setPosition:]";
  sub_10000BCE4();
  int v3 = 475;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to set the position of a CRLCanvasInfoGeometry with a non-finite position", v1, 0x22u);
}

void sub_10109C130()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasMutableInfoGeometry setSize:]";
  sub_10000BCE4();
  int v3 = 483;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to set the size of a CRLCanvasInfoGeometry with NaNs", v1, 0x22u);
}

void sub_10109C1C4(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLiOSPreventScrollGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSPreventScrollGestureRecognizer.m";
  __int16 v7 = 1024;
  int v8 = 29;
  __int16 v9 = 2082;
  __int16 v10 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10109C280()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected to get a toolkit UI state from the document!", v2, v3, v4, v5, v6);
}

void sub_10109C308()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not add a freehand drawing toolkit observer that's already added.", v2, v3, v4, v5, v6);
}

void sub_10109C390()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C418()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not remove a freehand drawing toolkit observer that has not been added.", v2, v3, v4, v5, v6);
}

void sub_10109C4A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C528()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only try to begin drawing mode when it's allowed.", v2, v3, v4, v5, v6);
}

void sub_10109C5B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Transform mode can only begin when drawing mode is already active.", v2, v3, v4, v5, v6);
}

void sub_10109C638()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C6C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C748()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C7D0(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "+[CRLModelSearchController assertSearchTargetImplementsProperMethods:]";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLModelSearchController.m";
  __int16 v8 = 1024;
  int v9 = 229;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Search target %@ does not respond to one of the necessary protocol methods.", (uint8_t *)v3, 0x2Cu);
}

void sub_10109C88C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109C914()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find next root search target. Defaulting to 0.", v2, v3, v4, v5, v6);
}

void sub_10109C99C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d must have a valid search target at this point", v2, v3, v4, v5, v6);
}

void sub_10109CA24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find searchReference in current root search target range", v2, v3, v4, v5, v6);
}

void sub_10109CAAC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWrapSegments p_buildSegmentsForPath:]";
  sub_10000BCE4();
  int v3 = 101;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mSegments must be NULL when initializing", v1, 0x22u);
}

void sub_10109CB40()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWrapSegments p_buildSegmentsForPath:]";
  sub_10000BCE4();
  int v3 = 100;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot enumerate flattened segments for a non-flat path", v1, 0x22u);
}

void sub_10109CBD4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Couldn't find left edge char index", v2, v3, v4, v5, v6);
}

void sub_10109CC5C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index for right edge of selection", v2, v3, v4, v5, v6);
}

void sub_10109CCE4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad selection -- extends past end of storage", v2, v3, v4, v5, v6);
}

void sub_10109CD6C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Character index should be inside allowable selection range.", v2, v3, v4, v5, v6);
}

void sub_10109CDF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Precondition: caretIndex is either equal to the given charIndex or one past", v2, v3, v4, v5, v6);
}

void sub_10109CE7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
}

void sub_10109CF04()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109CF98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect no runs for a partitioned attachment line fragment", v2, v3, v4, v5, v6);
}

void sub_10109D020()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal direction", v2, v3, v4, v5, v6);
}

void sub_10109D0A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
}

void sub_10109D130()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
}

void sub_10109D1B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Result beyond selection range min.", v2, v3, v4, v5, v6);
}

void sub_10109D240()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Result beyond selection range max.", v2, v3, v4, v5, v6);
}

void sub_10109D2C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported direction", v2, v3, v4, v5, v6);
}

void sub_10109D350()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109D3E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Empty column in p_withLineIndexForCharIndex", v2, v3, v4, v5, v6);
}

void sub_10109D46C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
}

void sub_10109D4F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
}

void sub_10109D57C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported granularity", v2, v3, v4, v5, v6);
}

void sub_10109D604()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported horizontal line direction", v2, v3, v4, v5, v6);
}

void sub_10109D68C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "failed to find an appropriate line fragment", v1, 2u);
}

void sub_10109D6D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sentence movement in layout direction is not supported", v2, v3, v4, v5, v6);
}

void sub_10109D758()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
}

void sub_10109D7E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d composed character extends past storage boundary", v2, v3, v4, v5, v6);
}

void sub_10109D868()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be on last paragraph yet.", v2, v3, v4, v5, v6);
}

void sub_10109D8F0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109D984()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported direction: %lu");
}

void sub_10109DA10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected granularity", v2, v3, v4, v5, v6);
}

void sub_10109DA98()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109DB2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Column should not be nil", v2, v3, v4, v5, v6);
}

void sub_10109DBB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid selection type", v2, v3, v4, v5, v6);
}

void sub_10109DC3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d backwards should never be NULL!", v2, v3, v4, v5, v6);
}

void sub_10109DCC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to delete past end of storage", v2, v3, v4, v5, v6);
}

void sub_10109DD4C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
}

void sub_10109DDD4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d overlapping transposition ranges", v2, v3, v4, v5, v6);
}

void sub_10109DE5C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad range lengths", v2, v3, v4, v5, v6);
}

void sub_10109DEE4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad ranges", v2, v3, v4, v5, v6);
}

void sub_10109DF6C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
}

void sub_10109DFF4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109E088()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid selection type", v2, v3, v4, v5, v6);
}

void sub_10109E110()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld");
}

void sub_10109E19C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld");
}

void sub_10109E228()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109E2BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109E350()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld");
}

void sub_10109E3DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld");
}

void sub_10109E468()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid selection anchor", v2, v3, v4, v5, v6);
}

void sub_10109E4F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid selection anchor", v2, v3, v4, v5, v6);
}

void sub_10109E578()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLImageToolbarButtonItem setImage:]";
  sub_10000BCE4();
  int v3 = 58;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only symbol images are supported", v1, 0x22u);
}

void sub_10109E60C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLImageToolbarButtonItem setLandscapeImagePhone:]";
  sub_10000BCE4();
  int v3 = 68;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only symbol images are supported", v1, 0x22u);
}

void sub_10109E6A0()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error extracting attachment: %@");
}

void sub_10109E734()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error extracting attachment: %@");
}

void sub_10109E7C8()
{
  sub_100008C80();
  int v3 = "-[CRLiOSFreehandDrawingGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingGestureRecognizer.m";
  __int16 v6 = 1024;
  int v7 = 94;
  __int16 v8 = v0;
  int v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10109E878(void *a1, unint64_t a2)
{
  id v3 = a1;
  __int16 v4 = sub_100380B10(a2);
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "transitioning to state %{public}@", v7, v8, v9, v10, 2u);
}

void sub_10109E910()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "failing during an existing dynamic operation", v2, v3, v4, v5, v6);
}

void sub_10109E944(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing from not being allowed to begin", v3);
}

void sub_10109E974(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "hit a stylus-supporting knob. no drawing for us!", v3);
}

void sub_10109E9A4(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "ending for keyboard probably visible", v3);
}

void sub_10109E9D4(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "beginning delay timer for freehand drawing (using pencil while not already in the mode)", v3);
}

void sub_10109EA04(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "begin drawing immediately for pencil", v3);
}

void sub_10109EA34(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "starting non-pencil drawing immediately. beginning delay timer for committing to the gesture.", v3);
}

void sub_10109EA64(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "drawing toolkit preventing freehand for drag", v3);
}

void sub_10109EA94(unsigned char *a1, unsigned char *a2)
{
  sub_1001B94A8(a1, a2);
  sub_1000BAD44((void *)&_mh_execute_header, v2, (uint64_t)v2, "received additional touch", v3);
}

void sub_10109EAC4()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "deferring for context menu", v2, v3, v4, v5, v6);
}

void sub_10109EAF8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = sub_100380B10((unint64_t)[v2 state]);
  sub_1001B94C4((void *)&_mh_execute_header, v5, v6, "delay timer fired. GR in state %{public}@", v7, v8, v9, v10, 2u);
}

void sub_10109EB94()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "reset", v2, v3, v4, v5, v6);
}

void sub_10109EBC8()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "Pencil touch ending while still pending enough time/distance to actually begin drawing. Being recognized as a non-drawing tap.", v2, v3, v4, v5, v6);
}

void sub_10109EBFC()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "Finger touch ending while still in the possible state. This must have been a tap, so recognize.", v2, v3, v4, v5, v6);
}

void sub_10109EC30()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "ending successfully", v2, v3, v4, v5, v6);
}

void sub_10109EC64()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSFreehandDrawingGestureRecognizer p_cancelOrFailAndCleanUpChanges]";
  sub_10000BCE4();
  int v3 = 617;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot cancel/fail a GR that has already ended.", v1, 0x22u);
}

void sub_10109ECF8()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "ending with failure", v2, v3, v4, v5, v6);
}

void sub_10109ED2C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSFreehandDrawingGestureRecognizer p_beginDynamicDrawing]";
  sub_10000BCE4();
  int v3 = 676;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Freehand drawing GR did not successfully take control", v1, 0x22u);
}

void sub_10109EDC0()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "beginning dynamic drawing", v2, v3, v4, v5, v6);
}

void sub_10109EDF4()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "beginning drawing mode without drawing", v2, v3, v4, v5, v6);
}

void sub_10109EE28()
{
  sub_1001B94B8();
  sub_1001B948C((void *)&_mh_execute_header, v0, v1, "failing for scroll or zoom", v2, v3, v4, v5, v6);
}

void sub_10109EE5C(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100008C48();
  sub_10004F618((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);
}

void sub_10109EF08()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to take control with an unregistered TM %@");
}

void sub_10109EF90(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  v7[0] = 67110146;
  v7[1] = a3;
  __int16 v8 = 2082;
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM %@ would not give up control at the end of an operation", (uint8_t *)v7, 0x2Cu);
}

void sub_10109F070()
{
  sub_10000DF44();
  sub_10000DF10(v1, v2, v3, 1.5047e-36);
  sub_10004F618((void *)&_mh_execute_header, v6, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5);
}

void sub_10109F0B8()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to subclass something that is already subclassed %@");
}

void sub_10109F140()
{
  sub_10000DF44();
  *(_DWORD *)uint64_t v1 = 67110146;
  *(_DWORD *)(v1 + 4) = v2;
  *(_WORD *)(v1 + 8) = 2082;
  *(void *)(v1 + 10) = "+[CRLTrackerManipulatorCoordinator p_dynamicallySubclassGRForNotification:]";
  *(_WORD *)(v1 + 18) = 2082;
  *(void *)(v1 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLTrackerManipulatorCoordinator.m";
  *(_WORD *)(v1 + 28) = 1024;
  *(_DWORD *)(v1 + 30) = 198;
  *(_WORD *)(v1 + 34) = 2112;
  *(void *)(v1 + 36) = v3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No dynamic subclass for %@!", v4, 0x2Cu);
}

void sub_10109F1D4()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d removing dynamic subclass from GR %@ that doesn't have one!");
}

void sub_10109F25C(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9 = a1;
  v13.origin.x = a2;
  v13.origin.y = a3;
  v13.size.width = a4;
  v13.size.height = a5;
  uint64_t v10 = NSStringFromCGRect(v13);
  int v11 = 138412290;
  __int16 v12 = v10;
  _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Attempting to overlay an image with a bad frame: %@", (uint8_t *)&v11, 0xCu);
}

void sub_10109F32C(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLInstantAlphaImage initWithWidth:height:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.m";
  __int16 v7 = 1024;
  int v8 = 15;
  __int16 v9 = 2082;
  uint64_t v10 = "width > 0 && height > 0";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v2, 0x2Cu);
}

void sub_10109F3E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -teardown must be called before dealloc", v2, v3, v4, v5, v6);
}

void sub_10109F470()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d player controller should not be playing when it is told to teardown", v2, v3, v4, v5, v6);
}

void sub_10109F4F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109F580(uint64_t a1, id *a2, void *a3)
{
  id v4 = *a2;
  id v5 = a3;
  uint8_t v6 = [v4 error];
  __int16 v7 = (objc_class *)objc_opt_class();
  int v8 = NSStringFromClass(v7);
  __int16 v9 = [*a2 error];
  uint64_t v10 = [v9 domain];
  int v11 = [*a2 error];
  [v11 code];
  CGPoint v18 = [*a2 error];
  sub_1000857E4((void *)&_mh_execute_header, v12, v13, "CRLAVPlayerController %p: Player looper failed with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v14, v15, v16, v17, 2u);
}

void sub_10109F6D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scrubbed to time when not in a scrubbing operation", v2, v3, v4, v5, v6);
}

void sub_10109F75C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven begin/end scrubbing calls!", v2, v3, v4, v5, v6);
}

void sub_10109F7E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_10109F86C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109F900()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109F994()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109FA28(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  uint64_t v13 = [a3 domain];
  [a3 code];
  sub_1000857E4((void *)&_mh_execute_header, v7, v8, "CRLAVPlayerController %p: Playback did fail with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, 2u);
}

void sub_10109FB20()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109FBB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_10109FC48()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The player must be stopped in order to wait for all video frames to be output.", v2, v3, v4, v5, v6);
}

void sub_10109FCD0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Timed out while waiting for all video frames to display.", v2, v3, v4, v5, v6);
}

void sub_10109FD58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine item time because the item's timebase is NULL.", v2, v3, v4, v5, v6);
}

void sub_10109FDE0(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLAnimatedGIFLayer dealloc]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAnimatedGIFLayer.m";
  __int16 v7 = 1024;
  int v8 = 23;
  __int16 v9 = 2082;
  uint64_t v10 = "mController";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_10109FE9C()
{
  sub_100008C80();
  __int16 v3 = "-[CRLGestureDispatcher initWithInteractiveCanvasController:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLGestureDispatcher.m";
  __int16 v6 = 1024;
  int v7 = 161;
  __int16 v8 = v0;
  __int16 v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10109FF4C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLGestureDispatcher handleGesture:]";
  sub_10000BCE4();
  int v3 = 184;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d gestureTarget should not be nil, shouldReceiveTouch should have failed this gesture", v1, 0x22u);
}

void sub_10109FFE0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLGestureDispatcher handleGesture:withTarget:]";
  sub_10000BCE4();
  int v3 = 221;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d handleGesture:withTarget: can only be called from a target's handleGesture: method", v1, 0x22u);
}

void sub_1010A0074()
{
  v2[0] = 67110146;
  sub_1000EDA10();
  sub_100008CC0();
  int v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLStroke.m";
  sub_10005A878();
  int v4 = 46;
  __int16 v5 = v0;
  int v6 = 6;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pattern should have no more than CRL_MAX_STROKE_PATTERN (%d) elements", (uint8_t *)v2, 0x28u);
}

void sub_1010A011C()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, 2u);
}

void sub_1010A01C0()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
}

void sub_1010A0250()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
}

void sub_1010A02E0()
{
  sub_1000EDA10();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change cap style on a round-dash stroke.", v2, v3, v4, v5, 2u);
}

void sub_1010A036C()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_10005A878();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Actual stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
}

void sub_1010A03FC()
{
  sub_1000EDA10();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying stroke with unsupported properties to renderable", v2, v3, v4, v5, 2u);
}

void sub_1010A0488()
{
  sub_1000EDA10();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d don't try to apply this stroke to a shape renderable", v2, v3, v4, v5, 2u);
}

void sub_1010A0514()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A05A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong thread", v2, v3, v4, v5, v6);
}

void sub_1010A0630()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A06B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
}

void sub_1010A0740()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
}

void sub_1010A07C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
}

void sub_1010A0850()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
}

void sub_1010A08D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to edit an image already in mask edit mode, or without a mask", v2, v3, v4, v5, v6);
}

void sub_1010A0960()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to read outside the context's memory.", v2, v3, v4, v5, v6);
}

void sub_1010A09E8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0A7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d layout is in a not possible state, editing mask but not editing mask", v2, v3, v4, v5, v6);
}

void sub_1010A0B04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have a new mask geometry if changing only the mask", v2, v3, v4, v5, v6);
}

void sub_1010A0B8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0C20()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0CB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0D48()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0DDC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0E70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't draw sized image on the main thread while we are doing threaded layout and rendering if image has a shadow!", v2, v3, v4, v5, v6);
}

void sub_1010A0EF8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A0F8C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d maskPath is nil when it should not be", v2, v3, v4, v5, v6);
}

void sub_1010A1014()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A10A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Updating mask layer for a non-directly managed layer!", v2, v3, v4, v5, v6);
}

void sub_1010A1130()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A11B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d directly manages layer content changed when generated sized image", v2, v3, v4, v5, v6);
}

void sub_1010A1240()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d directly manages layer content changed when generated sized image", v2, v3, v4, v5, v6);
}

void sub_1010A12C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Background has already been removed from this image", v2, v3, v4, v5, v6);
}

void sub_1010A1350()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't receive an image or an error from CRLInstantAlphaHelper.removeBackgroundFromCGImage which should not happen", v2, v3, v4, v5, v6);
}

void sub_1010A13D8(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 2883;
  __int16 v6 = v1;
  int v7 = "newRBImage";
  __int16 v8 = v1;
  __int16 v9 = "NULL";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010A1498(void *a1, int a2)
{
  uint64_t v3 = a1;
  __int16 v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_1010A1560()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A15F4(void *a1, void *a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  int v7 = 138544130;
  __int16 v8 = v2;
  __int16 v9 = 2114;
  uint64_t v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  uint64_t v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_1010A16E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image provider for current image is invalid", v2, v3, v4, v5, v6);
}

void sub_1010A176C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image provider for current image is invalid", v2, v3, v4, v5, v6);
}

void sub_1010A17F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

uint64_t sub_1010A187C()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLImageProvider initWithImageData:]";
  __int16 v5 = v0;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageProvider.m";
  __int16 v7 = 1024;
  int v8 = 35;
  __int16 v9 = v0;
  uint64_t v10 = "imageData";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014EFC70);
  return 0;
}

uint64_t sub_1010A1960()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -naturalSize", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014EFCB0);
  return 0;
}

uint64_t sub_1010A1A1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -isValid", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014EFCF0);
  return 0;
}

uint64_t sub_1010A1AD8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -drawImageInContext:rect:", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014EFD30);
  return 0;
}

void sub_1010A1B94(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLShapeCollectionDataSource p_shapeCollectionAtIndex:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeCollectionDataSource.m";
  __int16 v7 = 1024;
  int v8 = 122;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to find a shape collection at an invalid index (NSNotFound).", (uint8_t *)v2, 0x22u);
}

void sub_1010A1C40()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLSelectionModelTranslator selectionPathForInfos:]";
  sub_10000BCE4();
  int v3 = 86;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot select a parent and child simultaneously!", v1, 0x22u);
}

void sub_1010A1CD4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A1D68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A1DFC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A1E90()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A1F24()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLSelectionModelTranslator selectionPathForNothingSelectedInsideGroup:]";
  sub_10000BCE4();
  int v3 = 180;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect this selection to be a plain board item selection, not one for editing in a group.", v1, 0x22u);
}

void sub_1010A1FB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't calculate a percentage of a path with no length or elements.", v2, v3, v4, v5, v6);
}

void sub_1010A2040()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't calculate a percentage of a path with a NaN length.", v2, v3, v4, v5, v6);
}

void sub_1010A20C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't get a point on an empty path.", v2, v3, v4, v5, v6);
}

void sub_1010A2150()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -rawGradientAt:fromElement: can't handle move to.", v2, v3, v4, v5, v6);
}

void sub_1010A21D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -curvatureAt:fromElement: can't handle move to.", v2, v3, v4, v5, v6);
}

void sub_1010A2260()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLPathNearestAngleOnPathToLineApplier doesn't handle quad curves or some other element type", v2, v3, v4, v5, v6);
}

void sub_1010A22E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Degenerate curve! Cannot do intersection logic correctly", v2, v3, v4, v5, v6);
}

void sub_1010A2370()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not clean up properly at end of drag operation!", v2, v3, v4, v5, v6);
}

void sub_1010A23F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called dragging entered when we were already in state entered!", v2, v3, v4, v5, v6);
}

void sub_1010A2480()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A2508(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010A25C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingUpdated called without draggingEntered called first!", v2, v3, v4, v5, v6);
}

void sub_1010A2648()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingExited called without draggingEntered called first!", v2, v3, v4, v5, v6);
}

void sub_1010A26D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d OS shouldn't tell us to perform drag operation when -shouldAllowDragOperationForDragInfo returns NO", v2, v3, v4, v5, v6);
}

void sub_1010A2758()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingUpdated called without draggingEntered called first!", v2, v3, v4, v5, v6);
}

void sub_1010A27E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Indirect drops should never reject the resulting insert", v2, v3, v4, v5, v6);
}

void sub_1010A2868()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called performIndirectDragOperationWithDragInfo when we were already in a drag!", v2, v3, v4, v5, v6);
}

void sub_1010A28F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Indirect drops should never reject the resulting insert", v2, v3, v4, v5, v6);
}

void sub_1010A2978()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called performIndirectDragOperationWithDragInfo when we were already in a drag!", v2, v3, v4, v5, v6);
}

void sub_1010A2A00()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A2A9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly being asked to cleanup DnD when in state Idle", v2, v3, v4, v5, v6);
}

void sub_1010A2B24(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010A2BDC(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010A2C94()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a drag destination, our drag operation should not be None", v2, v3, v4, v5, v6);
}

void sub_1010A2D1C(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010A2DD4()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A2E70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing canvas highlight when a rep is highlighted", v2, v3, v4, v5, v6);
}

void sub_1010A2EF8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A2F94()
{
  sub_1003641EC();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inputBezierPathT (%f) should be greater than or equal to zero.", v2, v3, v4, v5, v6);
}

void sub_1010A301C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to replace last point in empty path map.", v2, v3, v4, v5, v6);
}

void sub_1010A30A4()
{
  sub_1003641EC();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inputBezierPathT (%f) should be greater than or equal to zero.", v2, v3, v4, v5, v6);
}

void sub_1010A312C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A31C0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3254()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate an accurate input path map when performing multiple BOOLean operations. Skipping populating it.", v2, v3, v4, v5, v6);
}

void sub_1010A32DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100018074();
  int v3 = 883;
  __int16 v4 = 2048;
  uint64_t v5 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported BOOLean operation type: %zu", v2, 0x2Cu);
}

void sub_1010A3380(void *a1, uint64_t a2, int a3, NSObject *a4)
{
  id v7 = a1;
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(void *)(a2 + 10) = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)a2, 0x12u);
}

void sub_1010A3400()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d All input paths must use the same winding rule.", v2, v3, v4, v5, v6);
}

void sub_1010A3488()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A351C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

uint64_t sub_1010A35B0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F0F90);
  return 0;
}

uint64_t sub_1010A3678()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F0F50);
  return 0;
}

void sub_1010A3740()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A37D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We asked to stop after finding 2 paths.", v2, v3, v4, v5, v6);
}

void sub_1010A385C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d closedStopCount should not be greater than stopAfterFoundCount.", v2, v3, v4, v5, v6);
}

void sub_1010A38E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3974()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3A08()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to fill path at null point.", v2, v3, v4, v5, v6);
}

void sub_1010A3A90()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never get more than one path back with a non-null fill point.", v2, v3, v4, v5, v6);
}

void sub_1010A3B18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to stroke path for intersection test.", v2, v3, v4, v5, v6);
}

void sub_1010A3BA0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to stroke path for flood fill.", v2, v3, v4, v5, v6);
}

void sub_1010A3C28()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Node should not contain targetFillPoint if it is empty.", v2, v3, v4, v5, v6);
}

void sub_1010A3CB0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3D48()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3DE0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A3E78(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  sub_100008CC0();
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSString_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 1331;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a string out of data with UTI %@", (uint8_t *)v4, 0x2Cu);
}

void sub_1010A3F30(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to use AddressBook API. Localization format may be incorrect.", v1, 2u);
}

void sub_1010A3F74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect root indexes to be migrated to the new searchReference.", v2, v3, v4, v5, v6);
}

void sub_1010A3FFC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4090()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4124()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A41B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Every searchable should respond to atleast a string search or an annotation search", v2, v3, v4, v5, v6);
}

void sub_1010A4240()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the hit reference should have a valid point", v2, v3, v4, v5, v6);
}

void sub_1010A42C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the hit reference should have a valid point", v2, v3, v4, v5, v6);
}

void sub_1010A4350()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find next root search target. Defaulting to 0.", v2, v3, v4, v5, v6);
}

void sub_1010A43D8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A446C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4500(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "CRLInputType CRLInputTypeForUITouchType(UITouchType)";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInputType.m";
  __int16 v7 = 1024;
  int v8 = 20;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected touch type UITouchTypeIndirect", (uint8_t *)v2, 0x22u);
}

void sub_1010A45AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010A4640()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010A46D4(os_log_t log)
{
  int v1 = 134217984;
  uint64_t v2 = 1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid preset (%zd). Should not show progress for this case.", (uint8_t *)&v1, 0xCu);
}

void sub_1010A4754()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLMovieCompatibilityConverter convertMediaWithCompletionHandler:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityConverter.m";
  __int16 v6 = 1024;
  int v7 = 186;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Optimizing movie past what is requested!", v2, 0x22u);
}

void sub_1010A47F4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4888()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A491C()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p converting movie from playable on this device to all devices", v2, v3, v4, v5, v6);
}

void sub_1010A4984(void *a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 134218240;
  *(void *)((char *)&v3 + 4) = *a1;
  WORD6(v3) = 2048;
  HIWORD(v3) = a2;
  sub_1003733A8((void *)&_mh_execute_header, a2, a3, "%p export session finished with status %li", (const void *)v3, *((void *)&v3 + 1));
}

void sub_1010A4A00(id *a1, void *a2)
{
  id v3 = *a1;
  uint64_t v4 = a2;
  [v3 UTF8String];
  sub_10000BD3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Preset (%s) is more compatible than input. Using output.", v5, 0xCu);
}

void sub_1010A4AA4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Output doesn't appear to be more compatible. Using input.", v1, 2u);
}

void sub_1010A4AE8()
{
  sub_10000BD3C();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_1003733A8((void *)&_mh_execute_header, v0, v1, "Export session produced output larger than input (%llu vs. %llu). Checking compatibility.", v2, v3);
}

void sub_1010A4B5C(char a1, NSObject *a2)
{
  uint64_t v2 = "less";
  if (a1) {
    uint64_t v2 = "more";
  }
  uint64_t v3 = "input";
  if (a1) {
    uint64_t v3 = "output";
  }
  int v4 = 136315394;
  uint64_t v5 = v2;
  __int16 v6 = 2080;
  int v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Output was %s compatible. Using %s.", (uint8_t *)&v4, 0x16u);
}

void sub_1010A4C0C()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p finishing conversion creating generic error", v2, v3, v4, v5, v6);
}

void sub_1010A4C74()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p finishing conversion with passed-in error", v2, v3, v4, v5, v6);
}

void sub_1010A4CDC()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p finishing conversion with non-nil movie data", v2, v3, v4, v5, v6);
}

void sub_1010A4D44()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p cancelling", v2, v3, v4, v5, v6);
}

void sub_1010A4DAC(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  uint8_t v6 = "-[CRLMovieCompatibilityConverter p_checkInitialCompatibilityLevelWithCompletionHandler:]";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 403;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mInitialCompatibilityLevel is %zd, not CRLMediaCompatibilityLevelUnknown", (uint8_t *)v4, 0x2Cu);
}

void sub_1010A4E64()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4EF8()
{
  sub_10000BD3C();
  sub_100198924((void *)&_mh_execute_header, v0, v1, "%p checking initial compatibility level", v2, v3, v4, v5, v6);
}

void sub_1010A4F60()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A4FF4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5088()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A5110()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot make image data to provide a fill!", v2, v3, v4, v5, v6);
}

void sub_1010A5198()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If no conversion error was provided, the converted image data should not be nil!", v2, v3, v4, v5, v6);
}

void sub_1010A5220(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010A52D0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5364(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010A5414()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A54A8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010A5558()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A55EC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010A569C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5730(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010A57E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A5868()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A58FC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5990()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5A24()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5AB8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLConnectionLineEditor insertAndConnectBoardItem:postProcessBlock:]";
  sub_10000BCE4();
  int v3 = 338;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Connection line already has something connected to its to-end.", v1, 0x22u);
}

void sub_1010A5B4C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5BE0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5C74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A5D08()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLConnectionLineEditor saveDefaultInsertionPreset:]";
  sub_10000BCE4();
  int v3 = 423;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v1, 0x22u);
}

void sub_1010A5D9C(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLImageMaskResizer initWithInteractiveCanvasController:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageMaskResizer.m";
  __int16 v7 = 1024;
  int v8 = 28;
  __int16 v9 = 2082;
  uint64_t v10 = "interactiveCanvasController";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010A5E58(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Catalog color (named %@) is missing.", (uint8_t *)v3);
}

void sub_1010A5EF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as P3 isn't P3, sRGB or Device RGB", v2, v3, v4, v5, v6);
}

void sub_1010A5F7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as P3 isn't even RGB!", v2, v3, v4, v5, v6);
}

void sub_1010A6004()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as sRGB isn't sRGB or Device RGB", v2, v3, v4, v5, v6);
}

void sub_1010A608C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as sRGB isn't even RGB!", v2, v3, v4, v5, v6);
}

void sub_1010A6114()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If the color has a pattern, its color space should be Unspecified", v2, v3, v4, v5, v6);
}

void sub_1010A619C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "CGColor";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010A6234()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "patternImage";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010A62CC(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid hex string: %@", (uint8_t *)v3);
}

void sub_1010A6368()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "uiColor";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010A6400()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rgbaComponents is NULL!", v2, v3, v4, v5, v6);
}

void sub_1010A6488()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  uint64_t v3 = "grayscale";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010A6520(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  CGColorGetNumberOfComponents((CGColorRef)[a2 CGColor]);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100236B24();
  sub_100008CC0();
  int v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  sub_10037D1CC();
  sub_10004F630((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components while inverting color. %zi instead of 4", (uint8_t *)v7);
}

void sub_1010A65EC(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  CGColorGetNumberOfComponents((CGColorRef)[a2 CGColor]);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100236B24();
  sub_100008CC0();
  int v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  sub_10037D1CC();
  sub_10004F630((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components to calculate luminance. Got %zi instead of 4.", (uint8_t *)v7);
}

void sub_1010A66B8(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  CGColorGetNumberOfComponents((CGColorRef)[a2 CGColor]);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100236B24();
  sub_100008CC0();
  int v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  sub_10037D1CC();
  sub_10004F630((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components to calculate relative luminance. Got %zi instead of 4.", (uint8_t *)v7);
}

void sub_1010A6784()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_10005A878();
  int v4 = 708;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  sub_10004F630((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled contrast scenario (%zu).", v2);
}

void sub_1010A6824()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLColors should always be RGB! Comparing two with different color models.", v2, v3, v4, v5, v6);
}

void sub_1010A68AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color space dimension mismatch", v2, v3, v4, v5, v6);
}

void sub_1010A6934(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPGrammarResults grammarResultForCharIndex:outRange:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSpellingResults.m";
  __int16 v7 = 1024;
  int v8 = 185;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No grammar error found for range", (uint8_t *)v2, 0x22u);
}

void sub_1010A69E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to make a non-rounded-rectangle path continuously curve", v2, v3, v4, v5, v6);
}

void sub_1010A6A68()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called cornerRadius on wrong type pathSource", v2, v3, v4, v5, v6);
}

void sub_1010A6AF0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called cornerRadius on wrong type pathSource", v2, v3, v4, v5, v6);
}

void sub_1010A6B78()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called numberOfSides on wrong type pathSource", v2, v3, v4, v5, v6);
}

void sub_1010A6C00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide feedback string for chevron!", v2, v3, v4, v5, v6);
}

void sub_1010A6C88()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide axLabel component string for chevron!", v2, v3, v4, v5, v6);
}

void sub_1010A6D10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide axValue string for chevron!", v2, v3, v4, v5, v6);
}

void sub_1010A6D98()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010A6E2C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010A6EC0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010A6F54()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLBoardItemImporter p_placeholderInit]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemImporter.m";
  __int16 v6 = 1024;
  int v7 = 295;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Do not call method", v2, 0x22u);
}

void sub_1010A6FF4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A7088()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layer host must be cleared out of ICC before it is deallocated, to avoid a zombie crash.", v2, v3, v4, v5, v6);
}

void sub_1010A7110()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must call -teardown on CVC before ICC is deallocated", v2, v3, v4, v5, v6);
}

void sub_1010A7198()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must call -teardown on ICC before it is deallocated", v2, v3, v4, v5, v6);
}

void sub_1010A7220()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ObjCTypes string overflowed", v2, v3, v4, v5, v6);
}

void sub_1010A72A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The OS undo gestures should not be sending us selectors we can't respond to!", v2, v3, v4, v5, v6);
}

void sub_1010A7330()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A73C4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d removeBackgroundRenderingObject called on an object that is not in the array", v2, v3, v4, v5, v6);
}

void sub_1010A744C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected re-use of ICC with a different delegate", v2, v3, v4, v5, v6);
}

void sub_1010A74D4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A7568()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A75FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A7684()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A7718()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A77AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not suppress layer updates unless collab is suspended!", v2, v3, v4, v5, v6);
}

void sub_1010A7834()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A78BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ICC delegate must provide the editor controller! (You probably need to give it a document selection through canvas selection, too.)", v2, v3, v4, v5, v6);
}

void sub_1010A7944()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Negative reentrancy counter", v2, v3, v4, v5, v6);
}

void sub_1010A79CC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d editor controller mismatch", v2, v3, v4, v5, v6);
}

void sub_1010A7A54(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  __int16 v9 = a1;
  v17.origin.x = a2;
  v17.origin.y = a3;
  v17.size.width = a4;
  v17.size.height = a5;
  uint64_t v10 = NSStringFromCGRect(v17);
  sub_1001FFBE0();
  sub_100008CC0();
  sub_100018074();
  int v14 = 1585;
  __int16 v15 = 2114;
  uint64_t v16 = v11;
  sub_10004F630((void *)&_mh_execute_header, v9, v12, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't know how to handle desired zoom rect %{public}@!", v13);
}

void sub_1010A7B50()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A7BE4(void *a1)
{
  id v2 = a1;
  uint64_t v3 = [(id)sub_100008CCC() delegate];
  sub_1001FFBE0();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v1, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ICC delegate %@ must respond to selectionModelTranslatorForInteractiveCanvasController", v5);
}

void sub_1010A7CA8(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_10004F630((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Caller set a selection path that does not want to set selection or scroll: %@", (uint8_t *)v3);
}

void sub_1010A7D44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scroll options CRLCanvasScrollOptionWaitForViewLayoutIfNeeded and CRLCanvasScrollOptionScrollForcingLayoutIfNeeded are mutually exclusive", v2, v3, v4, v5, v6);
}

void sub_1010A7DCC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scrolling automatically in an unsupported configuration!", v2, v3, v4, v5, v6);
}

void sub_1010A7E54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A7EDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot calculate unobscured frame without view", v2, v3, v4, v5, v6);
}

void sub_1010A7F64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect a superview for bounds calculation", v2, v3, v4, v5, v6);
}

void sub_1010A7FEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot tell scrollRectToVisible to zoom!", v2, v3, v4, v5, v6);
}

void sub_1010A8074()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot tell scrollRectToVisible to zoom!", v2, v3, v4, v5, v6);
}

void sub_1010A80FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You shouldn't ask to grow the canvas if the canvas doesn't grow in general", v2, v3, v4, v5, v6);
}

void sub_1010A8184()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A820C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we're given any info without a parent, we should have been given at least one info with a parent, too.", v2, v3, v4, v5, v6);
}

void sub_1010A8294()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A8328()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A83BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d couldn't remove rep from parent", v2, v3, v4, v5, v6);
}

void sub_1010A8444()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A84D8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A856C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A8600(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  uint8_t v6 = "-[CRLInteractiveCanvasController collaboratorCursorSelectionPathChangedFromSelectionPath:toSelectionPath:collabor"
       "atorPresence:]_block_invoke_2";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 5011;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  sub_10004F630((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not determine HUD position for selection path %@", (uint8_t *)v4);
}

void sub_1010A86B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8738()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A87C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8848()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A88DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8964()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A89EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8A74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing two huds for the same lobby session", v2, v3, v4, v5, v6);
}

void sub_1010A8AFC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8B84()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8C0C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8C94()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
}

void sub_1010A8D1C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Inspector-driven dynamic operation in process when beginning separate dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010A8DA4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't end previous dynamic operation before starting a new one", v2, v3, v4, v5, v6);
}

void sub_1010A8E2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't begin or already ending dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010A8EB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot begin inspector dynamic operation while in non-inspector dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010A8F3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ending dynamic operation without starting a new one or calling willEnd", v2, v3, v4, v5, v6);
}

void sub_1010A8FC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ended more dynamic operations than you began!", v2, v3, v4, v5, v6);
}

void sub_1010A904C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A90E0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9174()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9208()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A929C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9330()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010A93B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Temporary additional board items should not already be in our model!", v2, v3, v4, v5, v6);
}

void sub_1010A9440()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d change notifications should only come in on the main thread", v2, v3, v4, v5, v6);
}

void sub_1010A94C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d failed to perform locked action", v2, v3, v4, v5, v6);
}

void sub_1010A9550()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't expect to have changed text on background thread", v2, v3, v4, v5, v6);
}

void sub_1010A95D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't expect to have changed selection on background thread", v2, v3, v4, v5, v6);
}

void sub_1010A9660()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d animation nesting not yet supported", v2, v3, v4, v5, v6);
}

void sub_1010A96E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't commit if we don't have an animation open", v2, v3, v4, v5, v6);
}

void sub_1010A9770()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d i_layout should only be called by our CV, from the main thread", v2, v3, v4, v5, v6);
}

void sub_1010A97F8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A988C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9920()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A99B4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Content offset was outside the expected range! Clamping to a possibly sane value.", v2, v3, v4, v5, v6);
}

void sub_1010A9A3C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLAdditionalTransformCoordinateSpace initWithCoordinateSpace:identifier:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLAdditionalTransformCoordinateSpace.m";
  __int16 v6 = 1024;
  int v7 = 25;
  __int16 v8 = v0;
  __int16 v9 = "identifier";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010A9AEC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLAdditionalTransformCoordinateSpace initWithCoordinateSpace:identifier:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLAdditionalTransformCoordinateSpace.m";
  __int16 v6 = 1024;
  int v7 = 23;
  __int16 v8 = v0;
  __int16 v9 = "coordinateSpace";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010A9B9C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010A9C44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9CD8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010A9D80()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9E14(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010A9EBC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010A9F50(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010A9FF8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA08C()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLIOUtils newCGDataProviderForReadChannel:length:outInfo:outCallbacks:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLIOUtils.m";
  __int16 v6 = 1024;
  int v7 = 156;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need a seekable input stream for CGDataProvider", v2, 0x22u);
}

void sub_1010AA12C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  __int16 v6 = (objc_class *)objc_opt_class();
  int v7 = NSStringFromClass(v6);
  uint64_t v8 = [a3 domain];
  int v9 = 138413314;
  uint64_t v10 = a1;
  __int16 v11 = 2114;
  uint64_t v12 = v7;
  __int16 v13 = 2114;
  int v14 = v8;
  __int16 v15 = 2048;
  id v16 = [a3 code];
  __int16 v17 = 2112;
  CGPoint v18 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error importing drawable from URL (%@): errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x34u);
}

void sub_1010AA234(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLInfoImporterBoardItemProvider provideBoardItemWithFactory:completionHandler:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInfoImporterBoardItemProvider.m";
  __int16 v7 = 1024;
  int v8 = 191;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No data or URL available. Unable to import.", (uint8_t *)v2, 0x22u);
}

void sub_1010AA2E0()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.");
}

void sub_1010AA374()
{
  sub_100008D0C();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.");
}

void sub_1010AA408(void *a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)__int16 v4 = 2082;
  *(void *)&_DWORD v4[2] = "-[CRLInfoImporterBoardItemProvider provideBoardItemWithFactory:completionHandler:]";
  *(_WORD *)&uint8_t v4[10] = 2082;
  *(void *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInfoImporterBoardItemProvider.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 132;
  *(_WORD *)&v4[26] = 2114;
  *(void *)&v4[28] = *a1;
  sub_100008CEC((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a UTType for %{public}@", v3, *(void *)v4, *(void *)&v4[8], *(void *)&v4[16], *(void *)&v4[24], *(_DWORD *)&v4[32]);
}

void sub_1010AA4B8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA54C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid text selection", v2, v3, v4, v5, v6);
}

void sub_1010AA5D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something is wrong with our math", v2, v3, v4, v5, v6);
}

void sub_1010AA65C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA6F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d this method should never be called, and WP reps should never get a bitmap allocated", v2, v3, v4, v5, v6);
}

void sub_1010AA778()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA80C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA8A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Nil context", v2, v3, v4, v5, v6);
}

void sub_1010AA928()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AA9BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AAA50()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If there is a invisible char, we should have found it going backwards.", v2, v3, v4, v5, v6);
}

void sub_1010AAAD8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _textLayer again", v2, v3, v4, v5, v6);
}

void sub_1010AAB60()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AABF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _selectionHighlightLayer again", v2, v3, v4, v5, v6);
}

void sub_1010AAC7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _selectionParagraphBorderLayer again", v2, v3, v4, v5, v6);
}

void sub_1010AAD04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asked to create the spell checker when we don't need one.", v2, v3, v4, v5, v6);
}

void sub_1010AAD8C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AAE20()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Building a imageSearchReference for a layout that has no layout controller", v2, v3, v4, v5, v6);
}

void sub_1010AAEA8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AAF3C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AAFD0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected the tapped rep to match our storage.", v2, v3, v4, v5, v6);
}

void sub_1010AB058()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Archive is closed", v2, v3, v4, v5, v6);
}

void sub_1010AB0E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)sub_100008CCC() name];
  sub_1003C49D0();
  sub_100008C60((void *)&_mh_execute_header, v5, v6, "Local file header doesn't match compression method from central directory file header for entry %@. compressionMethod=%d", v7, v8, v9, v10, v11);
}

void sub_1010AB180(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)sub_100008CCC() name];
  sub_1003C49D0();
  sub_100008C60((void *)&_mh_execute_header, v5, v6, "Local file header has bad signature for entry %@. signature=%d", v7, v8, v9, v10, v11);
}

void sub_1010AB220(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [(id)sub_100008CCC() name];
  int v7 = 138412802;
  uint64_t v8 = v6;
  __int16 v9 = 2048;
  uint64_t v10 = a3;
  __int16 v11 = 2048;
  uint64_t v12 = 30;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Read was less than record size for entry %@. readDataLength=%zu, recordLength=%zu, ", (uint8_t *)&v7, 0x20u);
}

void sub_1010AB2E8(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = a2;
  uint64_t v4 = [v2 name];
  int v5 = 138412290;
  uint64_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CRC does not match for entry %@", (uint8_t *)&v5, 0xCu);
}

void sub_1010AB390()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_1010AB418()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Low water is too small", v2, v3, v4, v5, v6);
}

void sub_1010AB4A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed", v2, v3, v4, v5, v6);
}

void sub_1010AB528()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed", v2, v3, v4, v5, v6);
}

void sub_1010AB5B0()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolStroke.m";
  __int16 v3 = 1024;
  sub_100018060();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke tool should only be initialized with a stroke tool type (got %zu).", v1);
}

void sub_1010AB648()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  __int16 v3 = "currentPKStroke";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010AB6E0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  __int16 v3 = "cc";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010AB778()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  __int16 v3 = "shapeLayout";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010AB810()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolStroke.m";
  __int16 v3 = 1024;
  sub_100018060();
  sub_10004F630((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLPKStrokeConverter returned an empty path ending at pointIndex: %lu.", v1);
}

void sub_1010AB8A8(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 274;
  __int16 v6 = v1;
  int v7 = "currentStrokePathDataCount";
  __int16 v8 = v1;
  __int16 v9 = "immutablePKPointCount";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010AB968()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  __int16 v3 = "parentFreehandItem";
  sub_10004F630((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
}

void sub_1010ABA00(uint64_t a1, int a2)
{
  v4[0] = 67110146;
  v4[1] = a2;
  __int16 v5 = 2082;
  __int16 v6 = "-[CRLFreehandDrawingToolStroke p_currentPKInkType]";
  __int16 v7 = 2082;
  sub_100008C94();
  int v8 = 499;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  sub_10004F630((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected tool type for rendering with PencilKit (%zu). Defaulting to pen ink.", (uint8_t *)v4);
}

void sub_1010ABAB0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning possible operation without ending previous operation", v2, v3, v4, v5, v6);
}

void sub_1010ABB38()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d begin possible op with ICC in dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010ABBC0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No controlling TM when beginning operation", v2, v3, v4, v5, v6);
}

void sub_1010ABC48()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning operation without ending previous operation", v2, v3, v4, v5, v6);
}

void sub_1010ABCD0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d begin op with ICC in dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010ABD58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ending op with ICC still in dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010ABDE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker controller should not commit dynamic changes", v2, v3, v4, v5, v6);
}

void sub_1010ABE68()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cancelling when not in operation", v2, v3, v4, v5, v6);
}

void sub_1010ABEF0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot begin transforming reps until we are in a transform", v2, v3, v4, v5, v6);
}

void sub_1010ABF78()
{
  sub_1003CA968();
  id v2 = v1;
  uint64_t v3 = [(id)sub_100008CCC() tracker];
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM has different dynamic operation expectations than current operation (%@)", v6, v7, v8, v9, 2u);
}

void sub_1010AC03C()
{
  sub_1003CA968();
  id v1 = v0;
  id v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker is handling GR %@ when not in a transform", v6, v7, v8, v9, 2u);
}

void sub_1010AC108(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  sub_100236B24();
  sub_100008CC0();
  uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLDynamicOperationController.m";
  sub_10005A878();
  sub_100008CD8();
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d controlling GR reset in an operation, but we aren't in an operation! %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010AC1AC()
{
  sub_1003CA968();
  id v1 = v0;
  os_log_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM %@ has different dynamic operation expectations than current operation", v6, v7, v8, v9, 2u);
}

void sub_1010AC278()
{
  sub_1003CA968();
  id v1 = v0;
  os_log_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  sub_100236B24();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  sub_100236B30((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker is handling TM %@ when not in a transform", v6, v7, v8, v9, 2u);
}

void sub_1010AC344()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLShapeRepHelperDefault drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patternOffse"
       "tsBySubpathOverride:transparencyLayersBySubpath:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperDefault.m";
  __int16 v6 = 1024;
  int v7 = 339;
  __int16 v8 = v0;
  uint64_t v9 = "transparencyLayersBySubpath";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010AC3F4()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLShapeRepHelperDefault drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patternOffse"
       "tsBySubpathOverride:transparencyLayersBySubpath:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperDefault.m";
  __int16 v6 = 1024;
  int v7 = 109;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas and CGContext disagree about whether we are suppressing backgrounds", v2, 0x22u);
}

void sub_1010AC494()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUILarge.", v2, v3, v4, v5, 2u);
}

void sub_1010AC520()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegular.", v2, v3, v4, v5, 2u);
}

void sub_1010AC5AC()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegularPlus.", v2, v3, v4, v5, 2u);
}

void sub_1010AC638()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegularZoom.", v2, v3, v4, v5, 2u);
}

void sub_1010AC6C4()
{
  sub_1000EDA10();
  sub_100008CC0();
  sub_100018074();
  sub_1000EDA2C();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUISmall.", v2, v3, v4, v5, 2u);
}

void sub_1010AC750()
{
  int v1 = 67109890;
  sub_1000EDA10();
  uint64_t v2 = "+[UIScreen(CRLAdditions) crl_resetScreenScaleCache]";
  sub_10000BCE4();
  int v3 = 327;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No one should look at the screen scale before the application has finished launching, because the value isn't ready yet and may change! To debug, break in UIScreen.crl_screenScale and re-launch the app.", (uint8_t *)&v1, 0x22u);
}

void sub_1010AC7E8()
{
  int v1 = 67109890;
  sub_1000EDA10();
  uint64_t v2 = "+[UIScreen(CRLAdditions) crl_is3xScreenScale]";
  sub_10000BCE4();
  int v3 = 347;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported screen scale.", (uint8_t *)&v1, 0x22u);
}

void sub_1010AC880()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The shape library and basic shape library must be in the same locale.", v2, v3, v4, v5, v6);
}

void sub_1010AC908()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLShapeSearchResultsCollection numberOfShapesInSection:]";
  __int16 v5 = v0;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchResultsCollection.m";
  __int16 v7 = 1024;
  int v8 = 118;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to retrieve the number of shapes in a section (%lu) beyond the size of the number of sections in the search results", v3, 0x2Cu);
}

void sub_1010AC9B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d allShapes cannot be nil.", v2, v3, v4, v5, v6);
}

void sub_1010ACA40()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d separatedShapeLibraryResults must only contain 4 elements.", v2, v3, v4, v5, v6);
}

void sub_1010ACAC8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d separatedBasicResults must only contain 4 elements.", v2, v3, v4, v5, v6);
}

void sub_1010ACB50()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLShapeSearchResultsCollection p_sequentialShapePosition:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchResultsCollection.m";
  __int16 v6 = 1024;
  int v7 = 316;
  __int16 v8 = v0;
  __int16 v9 = "self.p_shapeLibrary";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010ACC00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Comparison of shape position must return either ascending or descending.", v2, v3, v4, v5, v6);
}

void sub_1010ACC88()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010ACD1C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010ACDB0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010ACE44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010ACED8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010ACF6C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AD000(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLConnectionLineKnobTracker moveKnobToRepPosition:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLineKnobTracker.m";
  __int16 v7 = 1024;
  int v8 = 783;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob type for line segment resize", (uint8_t *)v2, 0x22u);
}

void sub_1010AD0AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLCanvasView.", v2, v3, v4, v5, v6);
}

void sub_1010AD134()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't try to set canvasView's controller more than once", v2, v3, v4, v5, v6);
}

void sub_1010AD1BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLCanvasView that has already been torn down.", v2, v3, v4, v5, v6);
}

void sub_1010AD244()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasView additionalTransformIntoCoordinateSpace:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasView.m";
  __int16 v6 = 1024;
  int v7 = 178;
  __int16 v8 = v0;
  __int16 v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010AD2F4(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  __int16 v6 = [(id)sub_100008CCC() identifier];
  v7[0] = 67110146;
  v7[1] = a3;
  __int16 v8 = 2082;
  __int16 v9 = "-[CRLCanvasView additionalTransformIntoCoordinateSpace:]";
  __int16 v10 = 2082;
  __int16 v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasView.m";
  __int16 v12 = 1024;
  int v13 = 173;
  __int16 v14 = 2114;
  __int16 v15 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled coordinate space: %{public}@", (uint8_t *)v7, 0x2Cu);
}

void sub_1010AD3E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d knob tracker should never have a null knob", v2, v3, v4, v5, v6);
}

void sub_1010AD46C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for path node knob tracker", v2, v3, v4, v5, v6);
}

void sub_1010AD4F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d reps conforming to CRLPathEditableRep protocol only valid for path node knob tracker", v2, v3, v4, v5, v6);
}

void sub_1010AD57C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have created a knob, but got nil", v2, v3, v4, v5, v6);
}

void sub_1010AD604()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't close command group. This is bad news.", v2, v3, v4, v5, v6);
}

void sub_1010AD68C(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[CRLInstantAlphaSeedFill newSeedFillWithImage:seedPoint:context:oldFill:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaSeedFill.m";
  __int16 v7 = 1024;
  int v8 = 178;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't allocate span stack", (uint8_t *)v2, 0x22u);
}

void sub_1010AD738(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLiOSPresetCollectionViewController p_setupUIInLabeledCell:atIndexPath:context:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPresetCollectionViewController.m";
  __int16 v7 = 1024;
  int v8 = 455;
  __int16 v9 = 2082;
  __int16 v10 = "localizedName";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010AD7F4(int a1, NSObject *a2, double a3)
{
  v3[0] = 67110146;
  v3[1] = a1;
  __int16 v4 = 2082;
  __int16 v5 = "void CRLPKInputSmoother::setSmoothingThresholdMultiplier(CGFloat)";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKInputSmoother.mm";
  __int16 v8 = 1024;
  int v9 = 27;
  __int16 v10 = 2048;
  double v11 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected multiplier value < 0 (%f).", (uint8_t *)v3, 0x2Cu);
}

void sub_1010AD8AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't provide an image renderer for a non-finite size", v2, v3, v4, v5, v6);
}

void sub_1010AD934()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be able to lock new renderer.", v2, v3, v4, v5, v6);
}

void sub_1010AD9BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CGContext has an invalid associated screen scale.", v2, v3, v4, v5, v6);
}

void sub_1010ADA44()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d renderedCGImage shouldn't be NULL", v2, v3, v4, v5, v6);
}

void sub_1010ADACC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d completionAddImage shouldn't be NULL", v2, v3, v4, v5, v6);
}

void sub_1010ADB54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d completionMultiplyImage shouldn't be NULL", v2, v3, v4, v5, v6);
}

void sub_1010ADBDC(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLiOSDeterminateProgressViewController animateTransition:]";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSDeterminateProgressViewController.m";
  __int16 v8 = 1024;
  int v9 = 470;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown transition: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010ADC98()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSShapePresetCollectionViewLayoutProvider cellRegistrationDictionary]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSShapePresetCollectionViewLayoutProvider.m";
  __int16 v6 = 1024;
  int v7 = 69;
  __int16 v8 = v0;
  int v9 = "labeledCellNib";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010ADD48()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSShapePresetCollectionViewLayoutProvider cellRegistrationDictionary]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSShapePresetCollectionViewLayoutProvider.m";
  __int16 v6 = 1024;
  int v7 = 68;
  __int16 v8 = v0;
  int v9 = "cellNib";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010ADDF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Table View Cell style Value2 is not supported in CRLiOSInspectorTableViewCell.", v2, v3, v4, v5, v6);
}

void sub_1010ADE80()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Table View Cell style Value2 is not supported in CRLiOSInspectorTableViewCell.", v2, v3, v4, v5, v6);
}

void sub_1010ADF08()
{
  sub_100008C80();
  sub_10000BCE4();
}

void sub_1010ADF90()
{
  sub_100008C80();
  sub_10000BCE4();
}

void sub_1010AE018()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil delegate if table view was also nil", v2, v3, v4, v5, v6);
}

void sub_1010AE0A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil table view if index path was also nil", v2, v3, v4, v5, v6);
}

void sub_1010AE128(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLCanvasButtonKnobTracker initWithRep:knob:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasButtonKnobTracker.m";
  __int16 v7 = 1024;
  int v8 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d button knob tracker made without a button knob", (uint8_t *)v2, 0x22u);
}

void sub_1010AE1D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: beginUndoGrouping", v2, v3, v4, v5, v6);
}

void sub_1010AE25C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: endUndoGrouping", v2, v3, v4, v5, v6);
}

void sub_1010AE2E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Disable count underflow", v2, v3, v4, v5, v6);
}

void sub_1010AE36C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: groupsByEvent", v2, v3, v4, v5, v6);
}

void sub_1010AE3F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setGroupsByEvent:", v2, v3, v4, v5, v6);
}

void sub_1010AE47C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setLevelsOfUndo:", v2, v3, v4, v5, v6);
}

void sub_1010AE504()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setRunLoopModes:", v2, v3, v4, v5, v6);
}

void sub_1010AE58C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected.", v2, v3, v4, v5, v6);
}

void sub_1010AE614()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected.", v2, v3, v4, v5, v6);
}

void sub_1010AE69C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: removeAllActionsWithTarget:", v2, v3, v4, v5, v6);
}

void sub_1010AE724()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: registerUndoWithTarget", v2, v3, v4, v5, v6);
}

void sub_1010AE7AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: prepareWithInvocationTarget", v2, v3, v4, v5, v6);
}

void sub_1010AE834()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setActionName:", v2, v3, v4, v5, v6);
}

void sub_1010AE8BC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingSelectionDecorator tearDown]";
  sub_10000BCE4();
  int v3 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -tearDown twice.", v1, 0x22u);
}

void sub_1010AE950()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLFreehandDrawingSelectionDecorator dealloc]";
  sub_10000BCE4();
  int v3 = 40;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You must call -tearDown before deallocation.", v1, 0x22u);
}

void sub_1010AE9E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEA78()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reentrant geometry changing okay logic", v2, v3, v4, v5, v6);
}

void sub_1010AEB00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You should not be setting the geometry on a shape except via its own validation logic, or via -offsetGeometryBy: Please talk to drawables if you think you want to do this.", v2, v3, v4, v5, v6);
}

void sub_1010AEB88()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEC1C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AECB0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AED44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEDD8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEE6C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEF00()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AEF94()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF028()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF0BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF150()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF1E4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF278()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF30C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF3A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF434()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF4C8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF55C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF5F0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF684()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF718()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF7AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF840(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  sub_100008CCC();
  uint8_t v6 = (objc_class *)objc_opt_class();
  __int16 v7 = NSStringFromClass(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  __int16 v10 = 2082;
  sub_100008CC0();
  uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeLayout.m";
  __int16 v12 = 1024;
  int v13 = 1073;
  __int16 v14 = 2114;
  uint64_t v15 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected path source class! (%{public}@) We don't know how to build a path source for it.", (uint8_t *)v9, 0x2Cu);
}

void sub_1010AF930()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AF9C4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFA58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A shape taking a size should not be in a generic dynamic state, or static state", v2, v3, v4, v5, v6);
}

void sub_1010AFAE0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFB74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFC08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFC9C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFD30()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010AFDC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeInvisibles or kAdornmentsTypeInvisiblesBreak", v2, v3, v4, v5, v6);
}

void sub_1010AFE4C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeEmphasisMarks or kAdornmentTypeHiddenDeletions", v2, v3, v4, v5, v6);
}

void sub_1010AFED4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeAttachments", v2, v3, v4, v5, v6);
}

void sub_1010AFF5C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLInteractiveCanvasRepLayerPile popParentLayer]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentPile.m";
  __int16 v6 = 1024;
  int v7 = 101;
  __int16 v8 = v0;
  int v9 = "childLayers";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B000C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLInteractiveCanvasRepLayerPile popParentLayer]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentPile.m";
  __int16 v6 = 1024;
  int v7 = 99;
  __int16 v8 = v0;
  int v9 = "parentLayer";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B00BC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d popParentLayer called without matching pushParentLayer:", v2, v3, v4, v5, v6);
}

void sub_1010B0144()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A cloned parent layer hierarchy should contain only one top level layer.", v2, v3, v4, v5, v6);
}

void sub_1010B01CC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not attempt to access content layers when some parent layers are still pushed, since the returned layers may not represent a complete layer hierarchy.", v2, v3, v4, v5, v6);
}

void sub_1010B0254()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B02DC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "CGFloat CRLNormalize(CGFloat, CGFloat, CGFloat)";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLMath.m";
  __int16 v7 = 1024;
  int v8 = 88;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d max >= min!", (uint8_t *)v2, 0x22u);
}

void sub_1010B0388(void *a1, void *a2)
{
  __int16 v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  __int16 v5 = NSStringFromClass(v4);
  uint8_t v6 = [a2 domain];
  int v7 = 138544130;
  int v8 = v5;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  __int16 v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

uint64_t sub_1010B047C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Passing in nil is invalid.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F84C0);
  return 0;
}

uint64_t sub_1010B0538()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Creating retain cycle between gradient and its shading ref", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F8258);
  return 0;
}

uint64_t sub_1010B05F4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shading color space should not be unspecified.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F8298);
  return 0;
}

uint64_t sub_1010B06B0(int a1, NSObject *a2)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLGradientFill p_newColorInShadingColorSpaceFromColor:]";
  __int16 v6 = 2082;
  uint8_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGradientFill.m";
  __int16 v8 = 1024;
  int v9 = 299;
  __int16 v10 = 2082;
  __int16 v11 = "originalColorSpace";
  __int16 v12 = 2082;
  __int16 v13 = "CRLColorRGBSpaceSRGB";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F82D8);
  return 0;
}

uint64_t sub_1010B07B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses should override.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F8418);
  return 0;
}

uint64_t sub_1010B086C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses should override.", v2, v3, v4, v5, v7);
  if (qword_101719A70 == -1) {
    return 1;
  }
  dispatch_once(&qword_101719A70, &stru_1014F8458);
  return 0;
}

void sub_1010B0928()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
}

void sub_1010B09B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
}

void sub_1010B0A38(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B0AE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
}

void sub_1010B0B68(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B0C10()
{
  sub_100008D0C();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to temporarily relinquish token that has already been relinquished: %{public}@");
}

void sub_1010B0C9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Completion handler was already called.", v2, v3, v4, v5, v6);
}

void sub_1010B0D24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Removing all tokens should also cancel all timeout blocks.", v2, v3, v4, v5, v6);
}

void sub_1010B0DAC(id *a1, void *a2, id *a3)
{
  id v5 = *a1;
  uint8_t v6 = a2;
  uint64_t v7 = [v5 logContext];
  uint64_t v8 = [v7 publicString];
  uint8_t v9 = [*a1 logContext];
  __int16 v10 = [v9 privateString];
  __int16 v11 = [*a1 name];
  id v12 = [*a3 timeout];
  __int16 v13 = [*a3 intent];
  int v14 = 138544386;
  uint64_t v15 = v8;
  __int16 v16 = 2112;
  __int16 v17 = v10;
  __int16 v18 = 2114;
  __int16 v19 = v11;
  __int16 v20 = 2048;
  id v21 = v12;
  __int16 v22 = 2114;
  id v23 = v13;
  _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ %@ %{public}@ is taking more than %lu seconds to relinquish resource with '%{public}@' intent.", (uint8_t *)&v14, 0x34u);
}

void sub_1010B0F08(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 48);
  uint8_t v6 = a2;
  uint64_t v7 = [v5 publicString];
  uint64_t v8 = [*(id *)(a1 + 48) privateString];
  int v9 = 138543874;
  __int16 v10 = v7;
  __int16 v11 = 2112;
  id v12 = v8;
  __int16 v13 = 2048;
  uint64_t v14 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}@ %@ ┗ %llx", (uint8_t *)&v9, 0x20u);
}

void sub_1010B0FEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 48);
  uint8_t v6 = a2;
  uint64_t v7 = [v5 publicString];
  uint64_t v8 = [*(id *)(a1 + 48) privateString];
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = [*(id *)(a1 + 8) count];
  int v11 = 138544386;
  id v12 = v7;
  __int16 v13 = 2112;
  uint64_t v14 = v8;
  __int16 v15 = 2048;
  uint64_t v16 = a3;
  __int16 v17 = 2112;
  uint64_t v18 = v9;
  __int16 v19 = 2048;
  id v20 = v10;
  _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}@ %@ ┏ %llx '%@' pending resource requests (%tu total)", (uint8_t *)&v11, 0x34u);
}

void sub_1010B10F4(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "┗ End all traceable resources (%tu total)", (uint8_t *)&v2, 0xCu);
}

void sub_1010B116C(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "┏ Begin all traceable resources (%tu total)", (uint8_t *)&v2, 0xCu);
}

void sub_1010B11E4()
{
  sub_100008D0C();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token was deallocated with paused timeout: %{public}@");
}

void sub_1010B1270()
{
  sub_100008D0C();
  sub_100018074();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token was deallocated without getting relinquished: %{public}@");
}

void sub_1010B12FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unbalanced -pauseTimeout and -resumeTimeout calls.", v2, v3, v4, v5, v6);
}

void sub_1010B1384()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected state.", v2, v3, v4, v5, v6);
}

void sub_1010B140C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected state.", v2, v3, v4, v5, v6);
}

void sub_1010B1494()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Operation completion handler is getting deallocated before it was invoked.", v2, v3, v4, v5, v6);
}

void sub_1010B151C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B15B8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010B1654()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010B16F0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLDragToInsertController dealloc]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragToInsertController.m";
  __int16 v6 = 1024;
  int v7 = 131;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d must finish dragging before deallocating drag to insert controller", v2, 0x22u);
}

void sub_1010B1790(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[UIImage(CRLAdditions) crl_systemImageNamed:withFallbackCustomImageNamed:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/UIImage_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 103;
  __int16 v9 = 2082;
  id v10 = "result";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010B184C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be trying to set the width of a whole object eraser.", v2, v3, v4, v5, v6);
}

void sub_1010B18D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Path creator should always provide some kind of path.", v2, v3, v4, v5, v6);
}

void sub_1010B195C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should only be called for slicing erasers.", v2, v3, v4, v5, v6);
}

void sub_1010B19E4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d strokePatternOffsetArray must have the same count as the number of provided subpaths (if it's provided)", v2, v3, v4, v5, v6);
}

void sub_1010B1A6C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLBoardItemEditor setEditorController:]";
  sub_10000BCE4();
  int v3 = 164;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected editor controller!", v1, 0x22u);
}

void sub_1010B1B00(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLBoardItemEditor nextEditorForSelection:withNewEditorStack:selectionPath:]";
  __int16 v6 = 2082;
  __int16 v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBoardItemEditor.m";
  __int16 v8 = 1024;
  int v9 = 192;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There is a more specific selection on top of a plain board item editor! %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010B1BBC()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLBoardItemEditor selectionWillChangeFromSelection:toSelection:withFlags:inSelectionPath:withNewEditors:]";
  sub_10000BCE4();
  int v3 = 198;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Board item editor expects a board item selection!", v1, 0x22u);
}

void sub_1010B1C50()
{
  sub_100008C80();
  int v3 = "-[CRLBoardItemEditor selectionDidChangeFromSelection:toSelection:withFlags:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBoardItemEditor.m";
  __int16 v6 = 1024;
  int v7 = 204;
  __int16 v8 = v0;
  int v9 = "boardItemSelection";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B1D00()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be torn down twice!", v2, v3, v4, v5, v6);
}

void sub_1010B1D88()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must be torn down!", v2, v3, v4, v5, v6);
}

void sub_1010B1E10(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLInteractiveCanvasLayerHelper updateLayers]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasLayerHelper.m";
  __int16 v8 = 1024;
  int v9 = 146;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas layer tree mismatch detected! The fully and incrementally updated layer trees do not match.\n%@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010B1ECC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout with bottommost layers should have run at least once on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B1F54()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout with overlay layers should have run at least once on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B1FDC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLInteractiveCanvasLayerHelper endSuppressingLayerUpdates]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasLayerHelper.m";
  __int16 v6 = 1024;
  int v7 = 529;
  __int16 v8 = v0;
  int v9 = "_repsWhoseLayersAreAllowedToUpdate";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B208C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B2114()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasAbstractLayout layoutsForProvidingGuidesForChildLayouts]";
  sub_10000BCE4();
  int v3 = 177;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should never be called on a layout which returns NO for providesGuidesForChildLayouts.", v1, 0x22u);
}

void sub_1010B21A8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasAbstractLayout exchangeChildAtIndex:withChildAtIndex:]";
  sub_10000BCE4();
  int v3 = 279;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad index", v1, 0x22u);
}

void sub_1010B223C()
{
  sub_100008C80();
  int v3 = "-[CRLCanvasAbstractLayout exchangeChildAtIndex:withChildAtIndex:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasAbstractLayout.m";
  __int16 v6 = 1024;
  int v7 = 276;
  __int16 v8 = v0;
  int v9 = "_children";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B22EC()
{
  sub_10000DF44();
  sub_1001DCC38(1.5049e-36, v1, v2, v3);
  *(void *)(v4 + 10) = "-[CRLPKStroke _strokePointAtIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_100438F50(v6, v4);
  sub_100438F3C(v7, v8);
  sub_100438F60((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v9, v10);
}

void sub_1010B2354()
{
  sub_10000DF44();
  sub_1001DCC38(1.5049e-36, v1, v2, v3);
  *(void *)(v4 + 10) = "-[CRLPKStroke _insertStrokePoint:atIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_100438F50(v6, v4);
  sub_100438F3C(v7, v8);
  sub_100438F60((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v9, v10);
}

void sub_1010B23BC()
{
  sub_10000DF44();
  sub_1001DCC38(1.5049e-36, v1, v2, v3);
  *(void *)(v4 + 10) = "-[CRLPKStroke _removeStrokePointAtIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_100438F50(v6, v4);
  sub_100438F3C(v7, v8);
  sub_100438F60((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v9, v10);
}

void sub_1010B2424()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_1010B24AC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %ld is out of bounds");
}

void sub_1010B2538()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
}

void sub_1010B25C4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
}

void sub_1010B2650()
{
  sub_100008C80();
  sub_100008CC0();
  sub_10005A878();
  sub_100018060();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
}

void sub_1010B26DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
}

void sub_1010B2764()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
}

void sub_1010B27EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
}

void sub_1010B2874()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
}

void sub_1010B28FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
}

void sub_1010B2984()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be asking for the maximum Metal texture size on a device that doesn't support Metal.", v2, v3, v4, v5, v6);
}

void sub_1010B2A0C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCapabilities metalCapabilitiesForDevice:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLCapabilities.m";
  __int16 v6 = 1024;
  int v7 = 438;
  __int16 v8 = v0;
  int v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B2ABC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[CRLImage crl_quickInspectorImageNamed:isPrivateImage:isBundledImage:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLImage.m";
  __int16 v7 = 1024;
  int v8 = 710;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", (uint8_t *)v2, 0x22u);
}

void sub_1010B2B68(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLImage(RenderingAdditions) CGImageForSize:inContext:orContentsScaleProvider:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImage_RenderingAdditions.m";
  __int16 v7 = 1024;
  int v8 = 21;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contents scale provider should be nil", (uint8_t *)v2, 0x22u);
}

void sub_1010B2C14()
{
  sub_100008C80();
  __int16 v3 = "-[CRLMetalDeviceCapabilities initWithDevice:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  __int16 v6 = 1024;
  int v7 = 20;
  __int16 v8 = v0;
  int v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B2CC4()
{
  sub_100008C80();
  __int16 v3 = "-[CRLMetalDeviceCapabilities supportsGPUFamily:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  __int16 v6 = 1024;
  int v7 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't compare iOS to macOS GPUs.", v2, 0x22u);
}

void sub_1010B2D64(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustme"
       "nt:isWhitespace:renderingDelegate:allowAntialiasing:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPAdornmentLine.m";
  __int16 v7 = 1024;
  int v8 = 34;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal line count", (uint8_t *)v2, 0x22u);
}

void sub_1010B2E10()
{
  sub_100008C80();
  __int16 v3 = "-[CRLBasicShapeLibraryShape initWithShapeType:position:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryShape.m";
  __int16 v6 = 1024;
  int v7 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Basic shapes do not know about the custom shape type.", v2, 0x22u);
}

void sub_1010B2EB0()
{
  sub_100008C80();
  __int16 v3 = "+[CRLBasicShapeLibraryShape p_baseStringForKey:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryShape.m";
  __int16 v6 = 1024;
  int v7 = 174;
  __int16 v8 = v0;
  int v9 = "englishString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B2F60()
{
  sub_100008C80();
  __int16 v3 = "-[CRLiOSRepRotateGestureRecognizer initWithInteractiveCanvasController:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepRotateGestureRecognizer.m";
  __int16 v6 = 1024;
  int v7 = 56;
  __int16 v8 = v0;
  int v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B3010()
{
  sub_100008C80();
  __int16 v3 = "-[CRLiOSRepRotateGestureRecognizer p_beginTracking]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepRotateGestureRecognizer.m";
  __int16 v6 = 1024;
  int v7 = 542;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rotate GR did not successfully take control", v2, 0x22u);
}

void sub_1010B30B0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWidthLimitedQueue initWithLimit:name:targetQueue:]";
  sub_10000BCE4();
  int v3 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v1, 0x22u);
}

void sub_1010B3144()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWidthLimitedQueue initWithLimit:name:targetQueue:]";
  sub_10000BCE4();
  int v3 = 48;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Queue limit should be at least one.", v1, 0x22u);
}

void sub_1010B31D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We need to set the poster time and the poster image together. The poster image is a board item asset so it is async so we'll have to wait until we have both, then use CRLCommandSetMoviePosterTime.", v2, v3, v4, v5, v6);
}

void sub_1010B3260()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLMovieEditor willBeginChangingTimePropertyForMovieItem:withLocalizedMessage:cancelHandler:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMovieEditor.m";
  __int16 v6 = 1024;
  int v7 = 130;
  __int16 v8 = v0;
  int v9 = "_modalOperationToken";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B3310()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3398()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLMovieEditor didEndChangingTimePropertyForMovieItem:withCommand:error:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMovieEditor.m";
  __int16 v6 = 1024;
  int v7 = 176;
  __int16 v8 = v0;
  int v9 = "_modalOperationToken";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B3448()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didEndChangingTimePropertyForMovieItem called without matching willBeginChangingTimePropertyForMovieItem", v2, v3, v4, v5, v6);
}

void sub_1010B34D0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3558()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v2, v3, v4, v5, v6);
}

void sub_1010B35E0(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "CGFloat _CRLPKVectorSafeGet(std::vector<CGFloat>, int)";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCalculusUtility.mm";
  __int16 v7 = 1024;
  int v8 = 16;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", (uint8_t *)v2, 0x22u);
}

void sub_1010B368C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLTilingLayer drawLayer:inContext:]";
  sub_10000BCE4();
  int v3 = 378;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This tiling layer is not responsible for the layer asking to be drawn", v1, 0x22u);
}

void sub_1010B3720()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLTilingLayer drawLayer:inContext:]";
  sub_10000BCE4();
  int v3 = 381;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This tiling layer is not responsible for the layer asking to be drawn", v1, 0x22u);
}

void sub_1010B37B4()
{
  sub_100008C80();
  sub_100450AD4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment failed", v2, v3, v4, v5, v6);
}

void sub_1010B3834()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLPasteboardMultipleImportableBoardItemProvider initWithImportableBoardItemProviders:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardMultipleImportableBoardItemProvider.m";
  __int16 v6 = 1024;
  int v7 = 37;
  __int16 v8 = v0;
  int v9 = "(boardItemProviders != nil) && (boardItemProvidersCount > 0)";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_1010B38E4()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLPasteboardMultipleImportableBoardItemProvider provideBoardItemsWithFactory:completionHandler:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardMultipleImportableBoardItemProvider.m";
  __int16 v6 = 1024;
  int v7 = 85;
  __int16 v8 = v0;
  int v9 = "completionHandler != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_1010B3994()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLPasteboardMultipleImportableBoardItemProvider p_boardItemProviderDidRequestMediaCompatibilityRequirement:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardMultipleImportableBoardItemProvider.m";
  __int16 v6 = 1024;
  int v7 = 248;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No media types were specified! Falling back to Mixed to have understandable strings.", v2, 0x22u);
}

void sub_1010B3A34()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSDocumentModeController initWithDelegate:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentModeController.m";
  __int16 v6 = 1024;
  int v7 = 37;
  __int16 v8 = v0;
  int v9 = "_mode";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B3AE4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3B6C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a document mode observer that's already added", v2, v3, v4, v5, v6);
}

void sub_1010B3BF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3C7C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to remove a document mode observer that has not been added", v2, v3, v4, v5, v6);
}

void sub_1010B3D04()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3D8C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3E14()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not change mode while we are already changing the mode.", v2, v3, v4, v5, v6);
}

void sub_1010B3E9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3F24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B3FAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010B4034()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bogus size to resample", v2, v3, v4, v5, v6);
}

void sub_1010B40BC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4150()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBitmapContextCreate: Input context size of CGSizeZero illegal.", v2, v3, v4, v5, v6);
}

void sub_1010B41D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot create a context matching a nil image.", v2, v3, v4, v5, v6);
}

void sub_1010B4260()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBitmapContextCreate: Input context size of CGSizeZero illegal.", v2, v3, v4, v5, v6);
}

void sub_1010B42E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must include a color or alpha channel.", v2, v3, v4, v5, v6);
}

void sub_1010B4370()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4404()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4498()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B452C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B45C0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error while writing image file %@", (uint8_t *)&v2, 0xCu);
}

void sub_1010B4638()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B46CC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B4774()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4808()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B489C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4930(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B49D8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4A6C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4B00()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4B94()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4C28()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4CBC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4D50()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4DE4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4E78()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4F0C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B4FA0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5034()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B50C8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLImageRepDrawingHelper invalidateSizedImageIfNeededForBakedMaskPathFromBlock:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepDrawingHelper.m";
  __int16 v6 = 1024;
  int v7 = 717;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need some mask path if comparing masks", v2, 0x22u);
}

void sub_1010B5168()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B51F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B5278()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B5300()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B5388(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010B5438(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010B54E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B5570(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010B5620()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
}

void sub_1010B56A8()
{
  sub_100008CC0();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d strokeEnd (%f) should be between 0 and 1 inclusive.", v2, v3, v4, v5, 2u);
}

void sub_1010B5750()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBrushStroke should only ever have a round cap.", v2, v3, v4, v5, v6);
}

void sub_1010B57D8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B586C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5900()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5994()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5A28()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5ABC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d All brush strokes should draw with Metal!", v2, v3, v4, v5, v6);
}

void sub_1010B5B44()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5BD8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5C6C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If there is a patternOffsetsBySubpath array, this should be a freehand drawing stroke.", v2, v3, v4, v5, v6);
}

void sub_1010B5CF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Parameterized strokes must draw rasterized.", v2, v3, v4, v5, v6);
}

void sub_1010B5D7C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5E10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We only know how to adjust the pattern of constant width layout brush strokes.", v2, v3, v4, v5, v6);
}

void sub_1010B5E98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d resultPath and resultVector are both nil!", v2, v3, v4, v5, v6);
}

void sub_1010B5F20()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B5FB4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B6048()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B60DC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B6170()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have either a direct context or a CGContext.", v2, v3, v4, v5, v6);
}

void sub_1010B61F8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B628C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B6320()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B63B4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B6448()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B64DC(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLInspectorTextFieldClampNumberFormatter p_textShouldBeginEditingWithContent:]";
  __int16 v6 = 2082;
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInspectorFieldFormatters.m";
  __int16 v8 = 1024;
  int v9 = 221;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid initial string %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010B6598(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLInspectorTextFieldLengthFormatter crlaxLocalizedDescriptionFromValue:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInspectorFieldFormatters.m";
  __int16 v7 = 1024;
  int v8 = 586;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not find a valid number formatter for accessible description.", (uint8_t *)v2, 0x22u);
}

void sub_1010B6644()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not start monitoring a control for animations that is already being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B66CC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not stop monitoring a control for animations that is not already being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B6754()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Button animation received out-of-order touch events. This may be due to calling [self refresh] or [tableView reloadData] directly instead of calling [self.refreshingDelegate refreshableInspectorPaneWantsToRefresh:self].", v2, v3, v4, v5, v6);
}

void sub_1010B67DC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B6864()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B68EC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B6974()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B69FC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
}

void sub_1010B6A84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1010B6ABC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100011FD0((void *)&_mh_execute_header, a1, a3, "CRLSnapshotRenderLayer: Could not create snapshot - CARenderServerSnapshot returned nil!", a5, a6, a7, a8, 0);
}

void sub_1010B6AF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1010B6B2C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLSnapshotRenderLayer initWithSourceLayer:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLSnapshotRenderLayer.m";
  __int16 v6 = 1024;
  int v7 = 75;
  __int16 v8 = v0;
  int v9 = "sourceLayer";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B6BDC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLSnapshotRenderLayer setContents:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLSnapshotRenderLayer.m";
  __int16 v6 = 1024;
  int v7 = 148;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLSnapshotRenderLayer.setContents is unsupported. Use -initWithSourceLayer:", v2, 0x22u);
}

void sub_1010B6C7C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasSpacingGuide initForEdge:ofGeneratingObjectRect:andParentSpacing:]";
  sub_10000BCE4();
  int v3 = 69;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d if you are creating a center spacing guide, use CRLCanvasCenterAlignmentGuide", v1, 0x22u);
}

void sub_1010B6D10()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasSpacingGuide initForEdge:ofGeneratingObjectRect:andParentSpacing:]";
  sub_10000BCE4();
  int v3 = 45;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d if you are creating a center spacing guide, use CRLCanvasCenterAlignmentGuide", v1, 0x22u);
}

void sub_1010B6DA4(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(void *)(a2 + 10) = a1;
  sub_10004F618((void *)&_mh_execute_header, a4, a3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)a2);
}

void sub_1010B6E04()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLZipFileWriter initWithZipFileArchive:options:error:]";
  sub_10000BCE4();
  int v3 = 67;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected offset", v1, 0x22u);
}

void sub_1010B6E98(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B6F40()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLZipFileWriter copyEntriesFromZipFileWriter:readingFromURL:options:completionHandler:]";
  sub_10000BCE4();
  int v3 = 110;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Closed writer must be closed.", v1, 0x22u);
}

void sub_1010B6FD4(void *a1, int a2)
{
  int v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010B7088()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B711C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B71B0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B7244(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B72EC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B7380(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B7428()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B74BC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B7564()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B75F8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100063FAC();
  sub_100045680((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);
}

void sub_1010B76A0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B7734(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_1010B77AC(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLPdfTagger beginDrawable:]";
  __int16 v6 = 2082;
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPdfTagger.mm";
  __int16 v8 = 1024;
  int v9 = 1488;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Drawable of class %@ not handled", (uint8_t *)v3, 0x2Cu);
}

void sub_1010B7868()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010B7908()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010B79A8()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_100008C94();
  sub_1001ACDAC();
  sub_1001ACDBC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
}

void sub_1010B7A48()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSScribbleInteractionDelegate indirectScribbleInteraction:focusElementIfNeeded:referencePoint:completion:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionDelegate.m";
  __int16 v6 = 1024;
  int v7 = 78;
  __int16 v8 = v0;
  int v9 = "inputResponder";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B7AF8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "scribbleElement: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1010B7B70()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSScribbleInteractionDelegate indirectScribbleInteraction:focusElementIfNeeded:referencePoint:completion:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionDelegate.m";
  __int16 v6 = 1024;
  int v7 = 67;
  __int16 v8 = v0;
  int v9 = "scribbleElement";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B7C20(void *a1)
{
  id v2 = a1;
  uint64_t v3 = (const char *)sub_100008CCC();
  __int16 v4 = NSStringFromSelector(v3);
  sub_100481230();
  sub_100481210((void *)&_mh_execute_header, v5, v6, "%{public}@\n %{public}@", v7, v8, v9, v10, v11);
}

void sub_1010B7CBC()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLiOSScribbleInteractionDelegate p_isElementFocused:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionDelegate.m";
  __int16 v6 = 1024;
  int v7 = 125;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Element says it is focused but we have no editing TIR", v2, 0x22u);
}

void sub_1010B7D5C(void *a1, const char *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint8_t v11 = a1;
  id v12 = NSStringFromSelector(a2);
  v18.origin.x = a3;
  v18.origin.y = a4;
  v18.size.width = a5;
  v18.size.height = a6;
  __int16 v13 = NSStringFromCGRect(v18);
  int v14 = 138543618;
  __int16 v15 = v12;
  __int16 v16 = 2114;
  __int16 v17 = v13;
  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%{public}@\n Expanding rect, previous rect was %{public}@", (uint8_t *)&v14, 0x16u);
}

void sub_1010B7E58(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  __int16 v6 = (const char *)sub_100008CCC();
  int v7 = NSStringFromSelector(v6);
  int v14 = [a3 rootIdentifier];
  sub_100481210((void *)&_mh_execute_header, v8, v9, "%{public}@\n providing root UUID for inserting textbox %{public}@", v10, v11, v12, v13, 2u);
}

void sub_1010B7F18()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLShapeRepHelperFreehandDrawing drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patt"
       "ernOffsetsBySubpathOverride:transparencyLayersBySubpath:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperFreehandDrawing.m";
  __int16 v6 = 1024;
  int v7 = 105;
  __int16 v8 = v0;
  uint64_t v9 = "pencilKitStrokes";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B7FC8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLShapeRepHelperFreehandDrawing drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patt"
       "ernOffsetsBySubpathOverride:transparencyLayersBySubpath:]";
  __int16 v4 = v0;
  id v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperFreehandDrawing.m";
  __int16 v6 = 1024;
  int v7 = 77;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas and CGContext disagree about whether we are suppressing backgrounds", v2, 0x22u);
}

void sub_1010B8068(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLMultipleItemImporter p_importerDidRequestMediaCompatibilityRequirement:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMultipleItemImporter.m";
  __int16 v7 = 1024;
  int v8 = 322;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No media types were specified! Falling back to Mixed to have understandable strings.", (uint8_t *)v2, 0x22u);
}

void sub_1010B8114(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLWPMutableRangeArray addRange:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRangeArray.mm";
  __int16 v7 = 1024;
  int v8 = 438;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d addRange failure", (uint8_t *)v2, 0x22u);
}

void sub_1010B81C0()
{
  sub_100008C80();
  __int16 v4 = "NSString *NSStringFromCRLWPSelectionType(CRLWPSelectionType)";
  __int16 v5 = v0;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm";
  __int16 v7 = 1024;
  int v8 = 92;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown selection type: %lu", v3, 0x2Cu);
}

void sub_1010B8270()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal range location", v2, v3, v4, v5, v6);
}

void sub_1010B82F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal range length", v2, v3, v4, v5, v6);
}

void sub_1010B8380()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non smartfield selection has smartField range", v2, v3, v4, v5, v6);
}

void sub_1010B8408()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection has a leading edge but no storage to get the leading char", v2, v3, v4, v5, v6);
}

void sub_1010B8490()
{
  sub_100008C80();
  uint64_t v3 = "+[CRLWPSelection selectionFromWPSelection:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm";
  __int16 v6 = 1024;
  int v7 = 227;
  __int16 v8 = v0;
  __int16 v9 = "wpSelection";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B8540()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection type must be visual", v2, v3, v4, v5, v6);
}

void sub_1010B85C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal visual range", v2, v3, v4, v5, v6);
}

void sub_1010B8650()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Visual ranges have not been calculated", v2, v3, v4, v5, v6);
}

void sub_1010B86D8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to re-outset the path to return. Returning the slightly inset version.", v2, v3, v4, v5, v6);
}

void sub_1010B8760()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to flood fill paths with Clipper. Falling back to a smoothed bitmap path.", v2, v3, v4, v5, v6);
}

void sub_1010B87E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d iaImage should not be nil", v2, v3, v4, v5, v6);
}

void sub_1010B8870()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B890C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B89A8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B8A44(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLWPImmediatePressGestureRecognizer touchesMoved:withEvent:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPImmediatePressGestureRecognizer.m";
  __int16 v7 = 1024;
  int v8 = 75;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Time travel should have had a non-zero value here", (uint8_t *)v2, 0x22u);
}

void sub_1010B8AF0(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CALayer(CRLAdditions) crl_setIfDifferentFrame:orTransform:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CALayer_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 34;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to set frame or transform on layer with NaN values.", (uint8_t *)v2, 0x22u);
}

void sub_1010B8B9C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[CRLAssertionHandler packedBacktraceString];
  sub_100045670();
  sub_100008C60((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, 2u);
}

void sub_1010B8C48()
{
  sub_100236B24();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to Parse SVG File", v2, v3, v4, v5, 2u);
}

void sub_1010B8CD8()
{
  sub_1000EDA20();
  id v0 = +[CRLAssertionHandler packedBacktraceString];
  sub_1000A1314();
  sub_100045680((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v3, v4, v5, v6, v7);
}

void sub_1010B8D74(uint64_t a1, int a2)
{
  LODWORD(v4) = 67110146;
  HIDWORD(v4) = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Line Join Style: %@", v4);
}

void sub_1010B8E04(uint64_t a1, int a2)
{
  LODWORD(v4) = 67110146;
  HIDWORD(v4) = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Line Cap Style: %@", v4);
}

void sub_1010B8E94(void *a1)
{
  [a1 count];
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_10037D1CC();
  sub_1000E5068((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of viewBox components! (%zu)", v3, v4, v5, v6, 2u);
}

void sub_1010B8F38(uint64_t a1, int a2)
{
  LODWORD(v4) = 67110146;
  HIDWORD(v4) = a2;
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_100008CD8();
  sub_100008CEC((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown component %@", v4);
}

void sub_1010B8FC8(void *a1)
{
  [a1 count];
  sub_100236B24();
  sub_100008CC0();
  sub_100018074();
  sub_10037D1CC();
  sub_1000E5068((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of preserveAspectRatio components! (%zu)", v3, v4, v5, v6, 2u);
}

void sub_1010B906C()
{
  sub_100236B24();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected 'defer' component", v2, v3, v4, v5, 2u);
}

void sub_1010B90FC(int a1)
{
  v4[0] = 67110146;
  v4[1] = a1;
  __int16 v5 = 2082;
  sub_100008CC0();
  sub_100018074();
  int v6 = 590;
  __int16 v7 = v1;
  int v8 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bailing on operation %c", (uint8_t *)v4, 0x28u);
}

void sub_1010B91A8()
{
  sub_100236B24();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No value for initial polyline point!", v2, v3, v4, v5, 2u);
}

void sub_1010B9238()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLWPShapeLayout initWithInfo:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeLayout.m";
  __int16 v6 = 1024;
  int v7 = 27;
  __int16 v8 = v0;
  __int16 v9 = "self.wpShapeInfo.text";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B92E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Info is wrong class for layout.", v2, v3, v4, v5, v6);
}

void sub_1010B9370()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should already be a command group open if we are enqueueing in real time.", v2, v3, v4, v5, v6);
}

void sub_1010B93F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Resize tracker should be able to say if it is enqueueing commands in real time.", v2, v3, v4, v5, v6);
}

void sub_1010B9480()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should already be a command group open if we are enqueueing in real time.", v2, v3, v4, v5, v6);
}

void sub_1010B9508()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Resize tracker should be able to say if it is enqueueing commands in real time.", v2, v3, v4, v5, v6);
}

void sub_1010B9590()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPFontList fontsChanged:]";
  sub_10000BCE4();
  int v3 = 282;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_1010B9624()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLWPFontList fontForStyles:]";
  sub_10000BCE4();
  int v3 = 491;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to resolve font name", v1, 0x22u);
}

void sub_1010B96B8()
{
  sub_100008C80();
  int v3 = "-[CRLWPFontList fontForStyles:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFontList.m";
  __int16 v6 = 1024;
  int v7 = 482;
  __int16 v8 = v0;
  __int16 v9 = "currentFontName";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B9768()
{
  sub_100008C80();
  int v3 = "-[CRLWPFontList registerRecentFont:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFontList.m";
  __int16 v6 = 1024;
  int v7 = 499;
  __int16 v8 = v0;
  __int16 v9 = "recentFont";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B9818(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLWPShapeEditor saveDefaultInsertionPreset:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeEditor.m";
  __int16 v7 = 1024;
  int v8 = 166;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", (uint8_t *)v2, 0x22u);
}

void sub_1010B98C4()
{
  sub_100008C80();
  __int16 v3 = "-[CRLCanvasLayoutGeometry initWithInfoGeometry:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutGeometry.m";
  __int16 v6 = 1024;
  int v7 = 48;
  __int16 v8 = v0;
  __int16 v9 = "infoGeometry";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010B9974()
{
  sub_100008C80();
  __int16 v3 = "-[CRLCanvasLayoutGeometry initWithInfoGeometry:]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutGeometry.m";
  __int16 v6 = 1024;
  int v7 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't create layout geometry from info geometry if width and height are not valid", v2, 0x22u);
}

void sub_1010B9A14()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to load Metal CIKernel with name: %{public}@");
}

void sub_1010B9AA4()
{
  sub_100008D0C();
  sub_100008CC0();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to load legacy CIKernel with name: %{public}@");
}

void sub_1010B9B34()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9BC8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9C5C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9CF0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9D84()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9E18()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010B9EAC(int a1)
{
  v3[0] = 67110402;
  v3[1] = a1;
  __int16 v4 = 2082;
  sub_100008CC0();
  sub_100008C94();
  int v5 = 74;
  __int16 v6 = v1;
  int v7 = "kernelsFromString.count";
  __int16 v8 = v1;
  __int16 v9 = "1U";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
}

void sub_1010B9F6C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BA000()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BA094(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "+[CRLLineEnd lineEndWithType:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLLineEnd.m";
  __int16 v7 = 1024;
  int v8 = 194;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for line end with this type (count)", (uint8_t *)v2, 0x22u);
}

void sub_1010BA140(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLFreehandDrawingToolMarquee p_updateDottedMarqueeDecoratorRenderable:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolMarquee.m";
  __int16 v7 = 1024;
  int v8 = 368;
  __int16 v9 = 2082;
  uint64_t v10 = "_pathCreator";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010BA1FC(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLBadgeView_i setFinalImageWithName:legacyName:accessibilityName:scalesImageToFit:]";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/StatusHUDs/CRLBadgeView_i.m";
  __int16 v7 = 1024;
  int v8 = 45;
}

void sub_1010BA2A8()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLFreehandDrawingPathCreator setSmoothingThresholdMultiplier:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 130;
  __int16 v7 = v1;
  int v8 = "_strokeGenerator";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_1010BA350()
{
  sub_10004F65C();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected creator state, %lu");
}

void sub_1010BA3E0()
{
  sub_100008C80();
  uint64_t v4 = "-[CRLFreehandDrawingPathCreator setPointReductionFilterThresholdMultiplier:]";
  __int16 v5 = v0;
  sub_100008C94();
  int v6 = 137;
  __int16 v7 = v1;
  int v8 = "_strokeGenerator";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
}

void sub_1010BA488()
{
  sub_10004F65C();
  sub_100008C94();
  sub_10004F648();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected creator state, %lu");
}

void sub_1010BA518()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginDrawing should be called from the waiting state.", v2, v3, v4, v5, v6);
}

void sub_1010BA5A0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d endDrawing should be called from the started state.", v2, v3, v4, v5, v6);
}

void sub_1010BA628()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need at least two points to do a handoff.", v2, v3, v4, v5, v6);
}

void sub_1010BA6B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't handoff to a new path creator when using PencilKit.", v2, v3, v4, v5, v6);
}

void sub_1010BA738()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
}

void sub_1010BA7C0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d continueDrawing should be called from the started state.", v2, v3, v4, v5, v6);
}

void sub_1010BA848()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The immutable point count should only ever increase.", v2, v3, v4, v5, v6);
}

void sub_1010BA8D0()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCounterRotateRep p_counterRotateInfo]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCounterRotateRep.m";
  __int16 v6 = 1024;
  int v7 = 25;
  __int16 v8 = v0;
  __int16 v9 = "counterRotateInfo";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BA980()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCounterRotateRep p_possibleChildRep]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCounterRotateRep.m";
  __int16 v6 = 1024;
  int v7 = 31;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have either one or zero child reps.", v2, 0x22u);
}

void sub_1010BAA20()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCounterRotateRep p_childRep]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCounterRotateRep.m";
  __int16 v6 = 1024;
  int v7 = 37;
  __int16 v8 = v0;
  __int16 v9 = "childRepToReturn";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BAAD0(void *a1, int a2)
{
  uint64_t v3 = a1;
  __int16 v4 = +[CRLAssertionHandler packedBacktraceString];
  v5[0] = 67109378;
  v5[1] = a2;
  __int16 v6 = 2114;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);
}

void sub_1010BAB98()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Write channel semaphore should not be initialized.", v2, v3, v4, v5, v6);
}

void sub_1010BAC20(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLZipWriter beginEntryWithNameImpl:force32BitSize:lastModificationDate:size:CRC:forceCalculatingSizeAndCRCForP"
       "reservingLastModificationDate:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  __int16 v8 = 1024;
  int v9 = 165;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already have an entry with name: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010BACDC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
}

void sub_1010BAD64()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
}

void sub_1010BADEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_1010BAE74()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to flush while closed.", v2, v3, v4, v5, v6);
}

void sub_1010BAEFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1010BAF34()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLZipWriter writeEntryWithName:force32BitSize:lastModificationDate:size:CRC:fromReadChannel:writeHandler:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  __int16 v6 = 1024;
  int v7 = 364;
  __int16 v8 = v0;
  int v9 = "readChannel";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BAFE4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
}

void sub_1010BB06C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't have closed twice.", v2, v3, v4, v5, v6);
}

void sub_1010BB0F4()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLZipWriter closeWithQueue:completion:]_block_invoke_4";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  __int16 v6 = 1024;
  int v7 = 491;
  __int16 v8 = v0;
  int v9 = "strongWriteChannel";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BB1A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1010BB1DC(void *a1, void *a2)
{
  __int16 v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  __int16 v6 = [(id)sub_100008CCC() domain];
  int v7 = 138544130;
  __int16 v8 = v2;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  int v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Couldn't write Zip: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_1010BB2CC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BB360()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to calculate charIndex with nil rep", v2, v3, v4, v5, v6);
}

void sub_1010BB3E8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to calculate charIndex with nil rep", v2, v3, v4, v5, v6);
}

void sub_1010BB470()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for visual selection", v2, v3, v4, v5, v6);
}

void sub_1010BB4F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No valid rep for given char index; No editing reps.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1010BB580()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d self.tapInfo should be set", v2, v3, v4, v5, v6);
}

void sub_1010BB608()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d self.tapInfo should be set", v2, v3, v4, v5, v6);
}

void sub_1010BB690()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BB724()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BB7B8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BB84C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d we should have gotten a valid textRep by now", v2, v3, v4, v5, v6);
}

void sub_1010BB8D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d we should have gotten a valid textRep by now", v2, v3, v4, v5, v6);
}

void sub_1010BB95C(uint64_t a1, int a2)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  sub_100008CC0();
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPEditor+Gestures.m";
  __int16 v6 = 1024;
  sub_10023D210();
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPEditor can't handle a gesture of kind %{public}@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010BBA08(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  __int16 v6 = [a2 tmCoordinator];
  int v7 = [v6 controllingTM];
  __int16 v8 = (objc_class *)objc_opt_class();
  __int16 v9 = NSStringFromClass(v8);
  v10[0] = 67110146;
  v10[1] = a3;
  __int16 v11 = 2082;
  sub_100008CC0();
  id v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPEditor+Gestures.m";
  __int16 v13 = 1024;
  sub_10023D210();
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d could not take control with WP Editing Controller. Controlling TM is %{public}@", (uint8_t *)v10, 0x2Cu);
}

void sub_1010BBB18()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning WP operation in DOC when already in an operation", v2, v3, v4, v5, v6);
}

void sub_1010BBBA0()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BBC34(int a1, NSObject *a2)
{
  v2[0] = 67110146;
  v2[1] = a1;
  __int16 v3 = 2082;
  uint64_t v4 = "-[CRLRotorSearchController locateSearchReference:]_block_invoke";
  __int16 v5 = 2082;
  uint8_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLAccessibility/Canvas/Accessibility/iOS/CRLRotorSearchController.m";
  __int16 v7 = 1024;
  int v8 = 82;
  __int16 v9 = 2082;
  __int16 v10 = "layout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_1010BBCF0(void *a1, void *a2, int a3)
{
  __int16 v5 = a1;
  uint8_t v6 = [a2 gestureKind];
  __int16 v7 = sub_10033005C([a2 gestureState]);
  v8[0] = 67110402;
  v8[1] = a3;
  __int16 v9 = 2082;
  __int16 v10 = "-[CRLBaseGesture gestureBeganAtLocation:]";
  __int16 v11 = 2082;
  id v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBaseGesture.m";
  __int16 v13 = 1024;
  int v14 = 85;
  __int16 v15 = 2112;
  __int16 v16 = v6;
  __int16 v17 = 2112;
  CGRect v18 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Gesture %@ in invalid state %@", (uint8_t *)v8, 0x36u);
}

void sub_1010BBE04()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BBEA0()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BBF3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to connect a c-line to itself", v2, v3, v4, v5, v6);
}

void sub_1010BBFC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to connect a c-line to itself", v2, v3, v4, v5, v6);
}

void sub_1010BC04C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have connected-to when setting head magnet position", v2, v3, v4, v5, v6);
}

void sub_1010BC0D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have connected-from when setting tail magnet position", v2, v3, v4, v5, v6);
}

void sub_1010BC15C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BC1F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_1010BC280()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Head and tail should no longer be equal.", v2, v3, v4, v5, v6);
}

void sub_1010BC308()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasRepRotateTracker initWithRep:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepRotateTracker.m";
  __int16 v6 = 1024;
  int v7 = 87;
  __int16 v8 = v0;
  __int16 v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BC3B8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasRepRotateTracker changeDynamicLayoutsForReps:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepRotateTracker.m";
  __int16 v6 = 1024;
  int v7 = 186;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to rotate more than one rep, or the wrong rep", v2, 0x22u);
}

void sub_1010BC458(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "+[CRLPathSource pathSourceForShapeType:naturalSize:]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPathSource.m";
  __int16 v7 = 1024;
  int v8 = 309;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be trying to get the path of a custom shape from here!", (uint8_t *)v2, 0x22u);
}

void sub_1010BC504()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSWindowIgnoreUserInteractionSafeWrapper endIgnoringUserInteractionSafely]";
  sub_10000BCE4();
  int v3 = 50;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_1010BC598()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLiOSWindowIgnoreUserInteractionSafeWrapper resumeIgnoringUserInteractionSafely]";
  sub_10000BCE4();
  int v3 = 63;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_1010BC62C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Local URL should be a file URL.", v2, v3, v4, v5, v6);
}

void sub_1010BC6B4(void *a1, void *a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint8_t v6 = [(id)sub_100008CCC() domain];
  int v7 = 138544130;
  int v8 = v2;
  __int16 v9 = 2114;
  __int16 v10 = v6;
  __int16 v11 = 2048;
  id v12 = [a2 code];
  __int16 v13 = 2112;
  int v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not create property list from data. errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);
}

void sub_1010BC7A4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2;
  uint64_t v4 = [v2 path];
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to write property list to path: %@", (uint8_t *)&v5, 0xCu);
}

void sub_1010BC84C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't have local defaults plist", v2, v3, v4, v5, v6);
}

void sub_1010BC8D4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't parse local defaults plist", v2, v3, v4, v5, v6);
}

void sub_1010BC95C(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67110146;
  v3[1] = a2;
  __int16 v4 = 2082;
  uint64_t v5 = "-[CRLGroupEditor nextEditorForSelection:withNewEditorStack:selectionPath:]";
  __int16 v6 = 2082;
  int v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  __int16 v8 = 1024;
  int v9 = 46;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown editor class for selection %@", (uint8_t *)v3, 0x2Cu);
}

void sub_1010BCA18()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupEditor pasteWithPasteboard:atIndex:forceMatchStyle:bakeFormulas:completionHandler:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  __int16 v6 = 1024;
  int v7 = 229;
  __int16 v8 = v0;
  int v9 = "groupToInsertInto";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BCAC8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupEditor pasteNativeInfosFromPasteboard:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  __int16 v6 = 1024;
  int v7 = 355;
  __int16 v8 = v0;
  int v9 = "groupToInsertInto";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BCB78()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLGroupEditor duplicate:]_block_invoke";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  __int16 v6 = 1024;
  int v7 = 488;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect to see cross-container selections in Freeform that have objects that aren't in a container (aka freehand drawings!", v2, 0x22u);
}

void sub_1010BCC18(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  __int16 v4 = "-[CRLWPTextKnobTracker dealloc]";
  __int16 v5 = 2082;
  __int16 v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPTextKnobTracker.mm";
  __int16 v7 = 1024;
  int v8 = 156;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _textMagnifierTimer retains us, so it should be gone by our -dealloc", (uint8_t *)v2, 0x22u);
}

void sub_1010BCCC4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BCD58()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BCDEC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas must be torn down before being deallocated", v2, v3, v4, v5, v6);
}

void sub_1010BCE74()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BCF08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BCF9C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Interactive canvases should not be laid out directly!", v2, v3, v4, v5, v6);
}

void sub_1010BD024()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting enableInstructionalText on an interactive canvas is not allowed.", v2, v3, v4, v5, v6);
}

void sub_1010BD0AC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Caller is trying to suppress shadows and reflections on an interactive canvas; this is not supported",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1010BD134()
{
  sub_100008C80();
  sub_100008CC0();
  uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPath.m";
  __int16 v4 = 1024;
  int v5 = 68;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Requested selection index %tu is out of range!", v2, 0x2Cu);
}

void sub_1010BD1E0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must send in some selection to append", v2, v3, v4, v5, v6);
}

void sub_1010BD268()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BD300()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot pop to selection that is not in a selection path.", v2, v3, v4, v5, v6);
}

void sub_1010BD388()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot pop to selection that is not in a selection path.", v2, v3, v4, v5, v6);
}

void sub_1010BD410()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BD4A8()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BD540()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot replace a selection that is not in the selection path.", v2, v3, v4, v5, v6);
}

void sub_1010BD5C8()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLCanvasRepDragTracker initWithRep:]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepDragTracker.m";
  __int16 v6 = 1024;
  int v7 = 135;
  __int16 v8 = v0;
  int v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BD678()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d showing UI for drag without being in some kind of dynamic operation", v2, v3, v4, v5, v6);
}

void sub_1010BD700()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find index!", v2, v3, v4, v5, v6);
}

void sub_1010BD788()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only call insertInfosAndUpdateDragForDuplicatingDragIfAppropriate once!", v2, v3, v4, v5, v6);
}

void sub_1010BD810()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d non-zero snap level when we aren't constraining the drag. that doesn't make sense.", v2, v3, v4, v5, v6);
}

void sub_1010BD898(void *a1)
{
  id v1 = a1;
  sub_10012EDB8((uint64_t)v1, 1.5047e-36);
  sub_10012EDD0((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<");
}

void sub_1010BD8F8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d prioritizing X offset with a unit direction that doesn't have an X value!", v2, v3, v4, v5, v6);
}

void sub_1010BD980()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d prioritizing Y offset with a unit direction that doesn't have an Y value!", v2, v3, v4, v5, v6);
}

void sub_1010BDA08()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDA9C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDB30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add more points after calling finishWithSuccess.", v2, v3, v4, v5, v6);
}

void sub_1010BDBB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to update properties on more points after calling finishWithSuccess.", v2, v3, v4, v5, v6);
}

void sub_1010BDC40()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDCD4()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDD68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDDFC()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDE90()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BDF24()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The tool can add a failure, but not stop a failure from this tracker.", v2, v3, v4, v5, v6);
}

void sub_1010BDFAC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _trackingTool shouldn't have changed while we were in the dynamic operation.", v2, v3, v4, v5, v6);
}

void sub_1010BE034(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Freehand tracker is committing before finish was called. Calling finish to clean up.", v1, 2u);
}

void sub_1010BE078()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BE114()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BE1B0()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLResizeKnobTracker p_beginDynamicResize]";
  sub_10000BCE4();
  int v3 = 965;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep should not already be being resized when calling -p_beginDynamicResize", v1, 0x22u);
}

void sub_1010BE244()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLResizeKnobTracker p_beginDynamicResize]";
  sub_10000BCE4();
  int v3 = 971;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to get resizing layout for beginning dynamic drag.", v1, 0x22u);
}

void sub_1010BE2D8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BE374(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  id v12 = [a2 domain];
  [a2 code];
  sub_10006AA74((void *)&_mh_execute_header, v6, v7, "Error creating temporary directory: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v8, v9, v10, v11, 2u);
}

void sub_1010BE45C(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [(id)sub_100008CCC() domain];
  [a2 code];
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error getting item from photo picker: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_1010BE514(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [(id)sub_100008CCC() domain];
  [a2 code];
  sub_10006AA44();
  sub_10006AA74((void *)&_mh_execute_header, v7, v8, "Error copying photo picker item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v9, v10, v11, v12, v13);
}

void sub_1010BE5CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Completion handler called multiple times", v1, 2u);
}

void sub_1010BE610()
{
  sub_100008D0C();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No file extension for file URL with registered type identifier: %{public}@");
}

void sub_1010BE6A4(int a1, NSObject *a2)
{
  v2[0] = 67109890;
  v2[1] = a1;
  __int16 v3 = 2082;
  id v4 = "+[PHPickerResult(CRLAdditions) crl_safeLastPathComponentForItemURL:registeredTypeIdentifier:]";
  __int16 v5 = 2082;
  uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/PHPickerResult_CRLAdditions.m";
  __int16 v7 = 1024;
  int v8 = 127;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create image source to check file type for photo picker file URL with no file extension.", (uint8_t *)v2, 0x22u);
}

void sub_1010BE750()
{
  sub_100008D0C();
  sub_10023D210();
  sub_100008CEC((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No file extension for CG-provided type identifier: %{public}@");
}

void sub_1010BE7E4()
{
  sub_100008C80();
  __int16 v3 = "-[CRLPasteboardItemSource canProduceBoardItems]";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPasteboardItemSource.m";
  __int16 v6 = 1024;
  int v7 = 139;
  __int16 v8 = v0;
  uint64_t v9 = "self.pasteboardController";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BE894()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPasteboardItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]";
  sub_10000BCE4();
  int v3 = 255;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d More than one item detected on the pasteboard for image fill. Currently only single items are supported.", v1, 0x22u);
}

void sub_1010BE928()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLPasteboardItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]";
  sub_10000BCE4();
  int v3 = 232;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v1, 0x22u);
}

void sub_1010BE9BC()
{
  sub_100008C80();
  int v3 = "-[CRLPasteboardItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]_block_invoke";
  __int16 v4 = v0;
  __int16 v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPasteboardItemSource.m";
  __int16 v6 = 1024;
  int v7 = 245;
  __int16 v8 = v0;
  uint64_t v9 = "imageFillError";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BEA6C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad extended range", v2, v3, v4, v5, v6);
}

void sub_1010BEAF4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal instantiation of abstract class CRLWPStorageSpellChecker", v2, v3, v4, v5, v6);
}

void sub_1010BEB7C()
{
  sub_100008C80();
  uint64_t v3 = "-[CRLWPStorageSpellChecker dealloc]";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Spelling/CRLWPStorageSpellChecker.mm";
  __int16 v6 = 1024;
  int v7 = 143;
  __int16 v8 = v0;
  uint64_t v9 = "_storage";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010BEC2C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d checked ranges exceed storage", v2, v3, v4, v5, v6);
}

void sub_1010BECB4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bogus char index", v2, v3, v4, v5, v6);
}

void sub_1010BED3C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid charIndex.", v2, v3, v4, v5, v6);
}

void sub_1010BEDC4()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Locale string is too short.", v2, v3, v4, v5, v6);
}

void sub_1010BEE4C()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BEEE8()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BEF84()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller for data that needs to be downloaded!", v2, v3, v4, v5, v6);
}

void sub_1010BF00C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller when audio isn't playable!", v2, v3, v4, v5, v6);
}

void sub_1010BF094()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010BF11C()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010BF1A4()
{
  sub_100008C80();
  sub_100008C94();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BF240()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BF2D4()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseAddTimerDispatchSource failed (%d)");
}

void sub_1010BF360(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010BF418()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BF4AC(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010BF564()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseCreateWithMasterClock failed (%d)");
}

void sub_1010BF5F0(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010BF6A8(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  sub_1000E5054();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  sub_1000E5068((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %@ can only play GIFs, HEIFs or PNGs with multiple frames.", v4, v5, v6, v7, v8);
}

void sub_1010BF764(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010BF81C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  sub_1000E5054();
  sub_100008CC0();
  sub_10005A878();
  sub_100008CD8();
  id v3 = v2;
  sub_1000E5068((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %@ can only play GIFs, PNGs or HEIC/Fs.", v6, v7, v8, v9, v10);
}

void sub_1010BF8E4(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010BF99C()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BFA30()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reached -dealloc with associated animated GIF layers.", v2, v3, v4, v5, v6);
}

void sub_1010BFAB8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reached -dealloc without teardown being hit.", v2, v3, v4, v5, v6);
}

void sub_1010BFB40()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseRemoveTimerDispatchSource failed (%d)");
}

void sub_1010BFBCC()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetRate failed (%d)");
}

void sub_1010BFC58()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scrubbing to time when not known to be scrubbing!", v2, v3, v4, v5, v6);
}

void sub_1010BFCE0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven begin/end scrubbing calls!", v2, v3, v4, v5, v6);
}

void sub_1010BFD68()
{
  sub_100008C80();
  sub_100008CC0();
  sub_100008C94();
  sub_100008D20();
  sub_100008CA4((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_1010BFDFC()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be requesting an updated rate without also requesting an updated anchor time.", v2, v3, v4, v5, v6);
}

void sub_1010BFE84()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetTimerDispatchSourceNextFireTime failed (%d)");
}

void sub_1010BFF10()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010BFF98()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetRateAndAnchorTime failed (%d)");
}

void sub_1010C0024()
{
  sub_1001ACDD8();
  sub_10047D974();
  sub_10005A878();
  sub_1004FC08C();
  sub_1004FC06C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetTimerDispatchSourceNextFireTime failed (%d)");
}

void sub_1010C00B0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010C0138(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = +[CRLAssertionHandler packedBacktraceString];
  v6[0] = 67109378;
  v6[1] = a2;
  sub_100045670();
  sub_10004F618((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);
}

void sub_1010C01F0()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Double-enabling display link", v2, v3, v4, v5, v6);
}

void sub_1010C0278()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Disabling display link unexpectedly!", v2, v3, v4, v5, v6);
}

void sub_1010C0300()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010C0388()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_1010C0410()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the current min z-value for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C0498()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the current max z-value for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C0520()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the current z-value for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C05A8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Max index for z-order is below min index! This is not good. Skipping z-order operation entirely.", v2, v3, v4, v5, v6);
}

void sub_1010C0630()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a cross-container selection, the container whose z-order is being changed must be specified!", v2, v3, v4, v5, v6);
}

void sub_1010C06B8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not get the generic z-order siblings for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C0740()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the generic min index for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C07C8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the generic max index for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C0850()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the generic max index for a cross-container selection", v2, v3, v4, v5, v6);
}

void sub_1010C08D8()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasSearchReference commandForReplacingWithString:options:]";
  sub_10000BCE4();
  int v3 = 80;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot replace string on drawable", v1, 0x22u);
}

void sub_1010C096C()
{
  sub_100008C80();
  uint64_t v2 = "-[CRLCanvasSearchReference selectionPath]";
  sub_10000BCE4();
  int v3 = 97;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas search reference was not initialized with a selection path!", v1, 0x22u);
}

void sub_1010C0A00()
{
  sub_100008C80();
  int v3 = "void CRLWPParagraphTypesetter::createAttributedString()";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm";
  __int16 v6 = 1024;
  int v7 = 78;
  __int16 v8 = v0;
  uint64_t v9 = "_attributedString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010C0AB0()
{
  sub_100008C80();
  int v3 = "NSMutableAttributedString *CRLWPParagraphTypesetter::mutableAttributedString() const";
  __int16 v4 = v0;
  uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm";
  __int16 v6 = 1024;
  int v7 = 382;
  __int16 v8 = v0;
  uint64_t v9 = "_ctTypesetter";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_1010C0B60()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Use the class method: styleProviderForStorage and do not allocate this class directly. Alternatively, provide your own implementation.", v2, v3, v4, v5, v6);
}

void sub_1010C0BE8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Use the class method: styleProviderForStorage and do not allocate this class directly. Alternatively, provide your own implementation.", v2, v3, v4, v5, v6);
}

void sub_1010C0C70()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Use the class method: styleProviderForStorage and do not allocate this class directly. Alternatively, provide your own implementation.", v2, v3, v4, v5, v6);
}

void sub_1010C0CF8()
{
  sub_100008C80();
  sub_10000BCE4();
  sub_10000BCF8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Use the class method: styleProviderForStorage and do not allocate this class directly. Alternatively, provide your own implementation.", v2, v3, v4, v5, v6);
}

uint64_t static DeprecatedAppIntent.deprecation.getter()
{
  return static DeprecatedAppIntent.deprecation.getter();
}

uint64_t static _AssistantIntentsProvider.uniqueEntities.getter()
{
  return static _AssistantIntentsProvider.uniqueEntities.getter();
}

uint64_t type metadata accessor for _PrebuiltAppIntentError()
{
  return type metadata accessor for _PrebuiltAppIntentError();
}

uint64_t AppDependency.wrappedValue.getter()
{
  return AppDependency.wrappedValue.getter();
}

uint64_t AppDependency.__allocating_init(key:manager:)()
{
  return AppDependency.__allocating_init(key:manager:)();
}

uint64_t static AppIntentError.Unrecoverable.unknown.getter()
{
  return static AppIntentError.Unrecoverable.unknown.getter();
}

uint64_t type metadata accessor for AppIntentError()
{
  return type metadata accessor for AppIntentError();
}

uint64_t AppShortcutPhrase.init(stringLiteral:)()
{
  return AppShortcutPhrase.init(stringLiteral:)();
}

uint64_t AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)()
{
  return AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
}

uint64_t AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)()
{
  return AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)();
}

Swift::Void __swiftcall AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t AppShortcutPhrase.init(stringInterpolation:)()
{
  return AppShortcutPhrase.init(stringInterpolation:)();
}

uint64_t static AppShortcutsBuilder.buildBlock(_:)()
{
  return static AppShortcutsBuilder.buildBlock(_:)();
}

uint64_t static AppShortcutsBuilder.buildExpression(_:)()
{
  return static AppShortcutsBuilder.buildExpression(_:)();
}

uint64_t AppDependencyManager.add<A>(key:dependency:)()
{
  return AppDependencyManager.add<A>(key:dependency:)();
}

uint64_t static AppDependencyManager.shared.getter()
{
  return static AppDependencyManager.shared.getter();
}

uint64_t type metadata accessor for AppDependencyManager()
{
  return type metadata accessor for AppDependencyManager();
}

uint64_t AppEntityVisualState.init(isSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:)()
{
  return AppEntityVisualState.init(isSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:)();
}

uint64_t type metadata accessor for AppEntityVisualState()
{
  return type metadata accessor for AppEntityVisualState();
}

uint64_t static AppShortcutsProvider.updateAppShortcutParameters()()
{
  return static AppShortcutsProvider.updateAppShortcutParameters()();
}

uint64_t static AppShortcutsProvider.shortcutTileColor.getter()
{
  return static AppShortcutsProvider.shortcutTileColor.getter();
}

uint64_t type metadata accessor for AppShortcutPhraseToken()
{
  return type metadata accessor for AppShortcutPhraseToken();
}

uint64_t AppShortcutOptionsCollection.init(_:title:systemImageName:)()
{
  return AppShortcutOptionsCollection.init(_:title:systemImageName:)();
}

uint64_t AppShortcutParameterPresentation.init<A>(for:summary:optionsCollections:)()
{
  return AppShortcutParameterPresentation.init<A>(for:summary:optionsCollections:)();
}

uint64_t AppShortcutParameterPresentationSummary.init(_:table:)()
{
  return AppShortcutParameterPresentationSummary.init(_:table:)();
}

uint64_t AppShortcutParameterPresentationSummaryString.StringInterpolation.appendInterpolation(_:)()
{
  return AppShortcutParameterPresentationSummaryString.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall AppShortcutParameterPresentationSummaryString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t AppShortcutParameterPresentationSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return AppShortcutParameterPresentationSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t AppShortcutParameterPresentationSummaryString.init(stringInterpolation:)()
{
  return AppShortcutParameterPresentationSummaryString.init(stringInterpolation:)();
}

uint64_t static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A>(_:)()
{
  return static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A>(_:)();
}

uint64_t static AppIntent.openAppWhenRun.getter()
{
  return static AppIntent.openAppWhenRun.getter();
}

uint64_t static AppIntent.description.getter()
{
  return static AppIntent.description.getter();
}

uint64_t static AppIntent.isDiscoverable.getter()
{
  return static AppIntent.isDiscoverable.getter();
}

uint64_t static AppIntent.parameterSummary.getter()
{
  return static AppIntent.parameterSummary.getter();
}

uint64_t static AppIntent.authenticationPolicy.getter()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t AppShortcut.init<A, B, C, D>(intent:phrases:shortTitle:systemImageName:parameterPresentation:)()
{
  return AppShortcut.init<A, B, C, D>(intent:phrases:shortTitle:systemImageName:parameterPresentation:)();
}

uint64_t AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)()
{
  return AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)();
}

uint64_t type metadata accessor for AppShortcut()
{
  return type metadata accessor for AppShortcut();
}

uint64_t IntentFile.type.getter()
{
  return IntentFile.type.getter();
}

uint64_t IntentFile.fileURL.getter()
{
  return IntentFile.fileURL.getter();
}

uint64_t IntentFile.filename.getter()
{
  return IntentFile.filename.getter();
}

uint64_t type metadata accessor for IntentFile()
{
  return type metadata accessor for IntentFile();
}

uint64_t type metadata accessor for IntentDialog()
{
  return type metadata accessor for IntentDialog();
}

uint64_t IntentDialog.init(_:)()
{
  return IntentDialog.init(_:)();
}

uint64_t static IntentResult.result<A, B>(value:opensIntent:)()
{
  return static IntentResult.result<A, B>(value:opensIntent:)();
}

uint64_t static IntentResult.result<>()()
{
  return static IntentResult.result<>()();
}

uint64_t IndexedEntity.attributeSet.getter()
{
  return IndexedEntity.attributeSet.getter();
}

uint64_t EntityProperty.wrappedValue.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t EntityProperty.wrappedValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t EntityProperty<>.init()()
{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

uint64_t type metadata accessor for ResizeBehavior()
{
  return type metadata accessor for ResizeBehavior();
}

uint64_t IntentParameter.wrappedValue.modify()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t IntentParameter.wrappedValue.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t IntentParameter.wrappedValue.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t IntentParameter.projectedValue.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t IntentParameter.needsValueError(_:)()
{
  return IntentParameter.needsValueError(_:)();
}

uint64_t IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:optionsProvider:)()
{
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:optionsProvider:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t IntentParameter<>.init(description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)()
{
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)();
}

{
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentProjection.subscript.getter()
{
  return IntentProjection.subscript.getter();
}

uint64_t static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)();
}

uint64_t _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)()
{
  return _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)();
}

uint64_t type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases()
{
  return type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases();
}

uint64_t _AssistantIntent.IntentProjection.subscript.getter()
{
  return _AssistantIntent.IntentProjection.subscript.getter();
}

{
  return _AssistantIntent.IntentProjection.subscript.getter();
}

uint64_t type metadata accessor for _AssistantIntent.PhraseToken()
{
  return type metadata accessor for _AssistantIntent.PhraseToken();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildBlock()()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock()();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
}

uint64_t _AssistantIntent.Value.init<A>(for:builder:)()
{
  return _AssistantIntent.Value.init<A>(for:builder:)();
}

uint64_t type metadata accessor for _AssistantIntent.Value()
{
  return type metadata accessor for _AssistantIntent.Value();
}

uint64_t _AssistantIntent.Value.init<A, B>(_:for:)()
{
  return _AssistantIntent.Value.init<A, B>(_:for:)();
}

uint64_t _AssistantIntent.Phrase.init(stringLiteral:)()
{
  return _AssistantIntent.Phrase.init(stringLiteral:)();
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t _AssistantIntent.Phrase.init(stringInterpolation:)()
{
  return _AssistantIntent.Phrase.init(stringInterpolation:)();
}

uint64_t static _AssistantIntent.Builder.buildBlock(_:)()
{
  return static _AssistantIntent.Builder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.Builder.buildExpression(_:)()
{
  return static _AssistantIntent.Builder.buildExpression(_:)();
}

uint64_t type metadata accessor for _AssistantIntent()
{
  return type metadata accessor for _AssistantIntent();
}

uint64_t _AssistantIntent.init<A>(_:phrases:parameterValues:implying:)()
{
  return _AssistantIntent.init<A>(_:phrases:parameterValues:implying:)();
}

uint64_t _AssistantIntent.init<A>(_:phrases:parameterValues:)()
{
  return _AssistantIntent.init<A>(_:phrases:parameterValues:)();
}

uint64_t _AssistantIntent.init<A>(_:phrases:implying:)()
{
  return _AssistantIntent.init<A>(_:phrases:implying:)();
}

uint64_t IntentDeprecation.init(replacedBy:)()
{
  return IntentDeprecation.init(replacedBy:)();
}

uint64_t static _UnrecoverableError.unknownError.getter()
{
  return static _UnrecoverableError.unknownError.getter();
}

uint64_t static _UnrecoverableError.entityNotFound.getter()
{
  return static _UnrecoverableError.entityNotFound.getter();
}

uint64_t static _UnrecoverableError.actionNotAllowed.getter()
{
  return static _UnrecoverableError.actionNotAllowed.getter();
}

uint64_t static AssistantSchemaEntity.isAssistantOnly.getter()
{
  return static AssistantSchemaEntity.isAssistantOnly.getter();
}

uint64_t static AssistantSchemaIntent.isAssistantOnly.getter()
{
  return static AssistantSchemaIntent.isAssistantOnly.getter();
}

uint64_t DisplayRepresentation.Image.init(data:isTemplate:)()
{
  return DisplayRepresentation.Image.init(data:isTemplate:)();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:synonyms:)()
{
  return DisplayRepresentation.init(title:subtitle:image:synonyms:)();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:)()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t static DynamicOptionsProvider.useForParameterResolution.getter()
{
  return static DynamicOptionsProvider.useForParameterResolution.getter();
}

uint64_t static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)()
{
  return static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)();
}

uint64_t static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)()
{
  return static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)();
}

uint64_t IntentParameterSummary.init(_:table:)()
{
  return IntentParameterSummary.init(_:table:)();
}

uint64_t IntentParameterSummary.init(_:table:_:)()
{
  return IntentParameterSummary.init(_:table:_:)();
}

uint64_t ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)()
{
  return ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
}

Swift::Void __swiftcall ParameterSummaryString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t ParameterSummaryString.init(stringLiteral:)()
{
  return ParameterSummaryString.init(stringLiteral:)();
}

uint64_t ParameterSummaryString.init(stringInterpolation:)()
{
  return ParameterSummaryString.init(stringInterpolation:)();
}

uint64_t URLRepresentableEntity.urlRepresentationParameter.getter()
{
  return URLRepresentableEntity.urlRepresentationParameter.getter();
}

uint64_t EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)()
{
  return EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t EntityURLRepresentation.init(stringInterpolation:)()
{
  return EntityURLRepresentation.init(stringInterpolation:)();
}

uint64_t type metadata accessor for InputConnectionBehavior()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t static ParameterSummaryBuilder.buildBlock<A>(_:)()
{
  return static ParameterSummaryBuilder.buildBlock<A>(_:)();
}

uint64_t static ParameterSummaryBuilder.buildExpression<A>(_:)()
{
  return static ParameterSummaryBuilder.buildExpression<A>(_:)();
}

uint64_t static PersistentlyIdentifiable.persistentIdentifier.getter()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t IntentParameterDependency.wrappedValue.getter()
{
  return IntentParameterDependency.wrappedValue.getter();
}

uint64_t IntentParameterDependency.__allocating_init<A, B>(_:)()
{
  return IntentParameterDependency.__allocating_init<A, B>(_:)();
}

uint64_t TypeDisplayRepresentation.init(name:numericFormat:)()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t type metadata accessor for HasValueComparisonOperator()
{
  return type metadata accessor for HasValueComparisonOperator();
}

uint64_t type metadata accessor for EquatableComparisonOperator()
{
  return type metadata accessor for EquatableComparisonOperator();
}

uint64_t ParameterSummaryWhenCondition.init<A>(_:_:_:otherwise:)()
{
  return ParameterSummaryWhenCondition.init<A>(_:_:_:otherwise:)();
}

uint64_t ParameterSummaryWhenCondition.init<A, B>(_:_:_:_:otherwise:)()
{
  return ParameterSummaryWhenCondition.init<A, B>(_:_:_:_:otherwise:)();
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t static CocoaError.fileWriteUnknown.getter()
{
  return static CocoaError.fileWriteUnknown.getter();
}

uint64_t static CocoaError.fileReadNoSuchFile.getter()
{
  return static CocoaError.fileReadNoSuchFile.getter();
}

uint64_t static CocoaError.fileWriteFileExists.getter()
{
  return static CocoaError.fileWriteFileExists.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t NSNotFound.getter()
{
  return NSNotFound.getter();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return static CharacterSet.whitespaces.getter();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t static CharacterSet.urlQueryAllowed.getter()
{
  return static CharacterSet.urlQueryAllowed.getter();
}

uint64_t static CharacterSet.urlFragmentAllowed.getter()
{
  return static CharacterSet.urlFragmentAllowed.getter();
}

NSCharacterSet __swiftcall CharacterSet._bridgeToObjectiveC()()
{
  return (NSCharacterSet)CharacterSet._bridgeToObjectiveC()();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t CharacterSet.union(_:)()
{
  return CharacterSet.union(_:)();
}

uint64_t CharacterSet.contains(_:)()
{
  return CharacterSet.contains(_:)();
}

uint64_t CharacterSet.inverted.getter()
{
  return CharacterSet.inverted.getter();
}

uint64_t static CharacterSet.newlines.getter()
{
  return static CharacterSet.newlines.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t Notification.description.getter()
{
  return Notification.description.getter();
}

NSNotification __swiftcall Notification._bridgeToObjectiveC()()
{
  return (NSNotification)Notification._bridgeToObjectiveC()();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t URLQueryItem.name.getter()
{
  return URLQueryItem.name.getter();
}

uint64_t URLQueryItem.value.getter()
{
  return URLQueryItem.value.getter();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t CustomNSError.errorCode.getter()
{
  return CustomNSError.errorCode.getter();
}

uint64_t URLComponents.queryItems.modify()
{
  return URLComponents.queryItems.modify();
}

uint64_t URLComponents.queryItems.getter()
{
  return URLComponents.queryItems.getter();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.getter()
{
  return URLComponents.host.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.getter()
{
  return URLComponents.path.getter();
}

uint64_t URLComponents.scheme.getter()
{
  return URLComponents.scheme.getter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t URLComponents.string.getter()
{
  return URLComponents.string.getter();
}

uint64_t URLComponents.fragment.setter()
{
  return URLComponents.fragment.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.day.getter()
{
  return DateComponents.day.getter();
}

uint64_t DateComponents.day.setter()
{
  return DateComponents.day.setter();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t DateComponents.year.getter()
{
  return DateComponents.year.getter();
}

uint64_t DateComponents.year.setter()
{
  return DateComponents.year.setter();
}

uint64_t DateComponents.month.getter()
{
  return DateComponents.month.getter();
}

uint64_t DateComponents.month.setter()
{
  return DateComponents.month.setter();
}

uint64_t DateComponents.minute.getter()
{
  return DateComponents.minute.getter();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t AttributeScopes.FoundationAttributes.link.getter()
{
  return AttributeScopes.FoundationAttributes.link.getter();
}

uint64_t AttributeScopes.UIKitAttributes.foregroundColor.getter()
{
  return AttributeScopes.UIKitAttributes.foregroundColor.getter();
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return AttributeScopes.UIKitAttributes.font.getter();
}

uint64_t AttributeScopes.SwiftUIAttributes.foregroundColor.getter()
{
  return AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t AttributedString.characters.getter()
{
  return AttributedString.characters.getter();
}

uint64_t type metadata accessor for AttributedString.CharacterView()
{
  return type metadata accessor for AttributedString.CharacterView();
}

uint64_t AttributedString.init(stringLiteral:)()
{
  return AttributedString.init(stringLiteral:)();
}

uint64_t type metadata accessor for AttributedString.Index()
{
  return type metadata accessor for AttributedString.Index();
}

uint64_t AttributedString.append<A>(_:)()
{
  return AttributedString.append<A>(_:)();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

uint64_t AttributedString.init(_:attributes:)()
{
  return AttributedString.init(_:attributes:)();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t URLResourceValues.allValues.getter()
{
  return URLResourceValues.allValues.getter();
}

uint64_t URLResourceValues.canonicalPath.getter()
{
  return URLResourceValues.canonicalPath.getter();
}

uint64_t URLResourceValues.contentType.getter()
{
  return URLResourceValues.contentType.getter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t AttributeContainer.subscript.setter()
{
  return AttributeContainer.subscript.setter();
}

uint64_t AttributeContainer.init()()
{
  return AttributeContainer.init()();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return dispatch thunk of PropertyListDecoder.userInfo.modify();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return dispatch thunk of PropertyListEncoder.outputFormat.setter();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  return dispatch thunk of PropertyListEncoder.userInfo.modify();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t static ParseableFormatStyle<>.dateTime.getter()
{
  return static ParseableFormatStyle<>.dateTime.getter();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return PersonNameComponents.givenName.getter();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return PersonNameComponents.givenName.setter();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return PersonNameComponents.familyName.getter();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return PersonNameComponents.familyName.setter();
}

uint64_t PersonNameComponents.middleName.getter()
{
  return PersonNameComponents.middleName.getter();
}

uint64_t PersonNameComponents.middleName.setter()
{
  return PersonNameComponents.middleName.setter();
}

uint64_t PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)()
{
  return PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
}

uint64_t PersonNameComponents.namePrefix.getter()
{
  return PersonNameComponents.namePrefix.getter();
}

uint64_t PersonNameComponents.namePrefix.setter()
{
  return PersonNameComponents.namePrefix.setter();
}

uint64_t PersonNameComponents.nameSuffix.getter()
{
  return PersonNameComponents.nameSuffix.getter();
}

uint64_t PersonNameComponents.nameSuffix.setter()
{
  return PersonNameComponents.nameSuffix.setter();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  __int16 v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t PersonNameComponents.phoneticRepresentation.getter()
{
  return PersonNameComponents.phoneticRepresentation.getter();
}

uint64_t PersonNameComponents.phoneticRepresentation.setter()
{
  return PersonNameComponents.phoneticRepresentation.setter();
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t PersonNameComponents.nickname.getter()
{
  return PersonNameComponents.nickname.getter();
}

uint64_t PersonNameComponents.nickname.setter()
{
  return PersonNameComponents.nickname.setter();
}

uint64_t PersonNameComponents.init()()
{
  return PersonNameComponents.init()();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)()
{
  return static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)()
{
  return static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
}

uint64_t static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)()
{
  return static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
}

uint64_t type metadata accessor for PredicateExpressions.ComparisonOperator()
{
  return type metadata accessor for PredicateExpressions.ComparisonOperator();
}

uint64_t static PredicateExpressions.build_donatedWithin<A, B>(_:_:)()
{
  return static PredicateExpressions.build_donatedWithin<A, B>(_:_:)();
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)()
{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  return dispatch thunk of NSKeyValueObservation.invalidate()();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.errorCode.getter()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

{
  return AttributeDynamicLookup.subscript.getter();
}

{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription();
}

uint64_t LocalizedStringResource.init(stringInterpolation:)()
{
  return LocalizedStringResource.init(stringInterpolation:)();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t LocalizedStringResource.init(_:table:locale:bundle:comment:)()
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t NSKeyValueObservedChange.newValue.getter()
{
  return NSKeyValueObservedChange.newValue.getter();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
}

uint64_t static FormatStyleCapitalizationContext.beginningOfSentence.getter()
{
  return static FormatStyleCapitalizationContext.beginningOfSentence.getter();
}

uint64_t type metadata accessor for FormatStyleCapitalizationContext()
{
  return type metadata accessor for FormatStyleCapitalizationContext();
}

uint64_t URL.isFileURL.getter()
{
  return URL.isFileURL.getter();
}

uint64_t URL.description.getter()
{
  return URL.description.getter();
}

uint64_t URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)()
{
  return URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)();
}

uint64_t URL.relativePath.getter()
{
  return URL.relativePath.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.pathExtension.getter()
{
  return URL.pathExtension.getter();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.pathComponents.getter()
{
  return URL.pathComponents.getter();
}

uint64_t URL.relativeString.getter()
{
  return URL.relativeString.getter();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t URL.dataRepresentation.getter()
{
  return URL.dataRepresentation.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingPathExtension()()
{
  return URL.deletingPathExtension()();
}

uint64_t URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)()
{
  return URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
}

uint64_t URL.appendingPathComponent(_:conformingTo:)()
{
  return URL.appendingPathComponent(_:conformingTo:)();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t URL.promisedItemResourceValues(forKeys:)()
{
  return URL.promisedItemResourceValues(forKeys:)();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return URL.startAccessingSecurityScopedResource()();
}

uint64_t URL.host.getter()
{
  return URL.host.getter();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.append<A>(component:directoryHint:)()
{
  return URL.append<A>(component:directoryHint:)();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:encodingInvalidCharacters:)()
{
  return URL.init(string:encodingInvalidCharacters:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

Swift::String_optional __swiftcall URL.fragment(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.fragment(percentEncoded:)(percentEncoded);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return URL.appending<A>(component:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data._copyContents(initializing:)()
{
  return Data._copyContents(initializing:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.subscript.setter()
{
  return Data._Representation.subscript.setter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t Data.subdata(in:)()
{
  return Data.subdata(in:)();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t static Date.timeIntervalSinceReferenceDate.getter()
{
  return static Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.FormatStyle.capitalizationContext.setter()
{
  return Date.FormatStyle.capitalizationContext.setter();
}

uint64_t Date.FormatStyle.locale(_:)()
{
  return Date.FormatStyle.locale(_:)();
}

uint64_t Date.FormatStyle.timeZone.setter()
{
  return Date.FormatStyle.timeZone.setter();
}

uint64_t type metadata accessor for Date.FormatStyle()
{
  return type metadata accessor for Date.FormatStyle();
}

uint64_t Date.description.getter()
{
  return Date.description.getter();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t static Date.distantFuture.getter()
{
  return static Date.distantFuture.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return Date.init(timeIntervalSinceNow:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.compare(_:)()
{
  return Date.compare(_:)();
}

uint64_t Date.advanced(by:)()
{
  return Date.advanced(by:)();
}

uint64_t Date.formatted<A>(_:)()
{
  return Date.formatted<A>(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.description.getter()
{
  return UUID.description.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.< infix(_:_:)()
{
  return static UUID.< infix(_:_:)();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init(uuid:)()
{
  return UUID.init(uuid:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.hashValue.getter()
{
  return UUID.hashValue.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.identifier.getter()
{
  return Locale.identifier.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Locale._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Locale.Region.identifier.getter()
{
  return Locale.Region.identifier.getter();
}

uint64_t type metadata accessor for Locale.Region()
{
  return type metadata accessor for Locale.Region();
}

uint64_t Locale.region.getter()
{
  return Locale.region.getter();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return Calendar.dateComponents(_:from:to:)();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:to:wrappingComponents:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t Calendar.compare(_:to:toGranularity:)()
{
  return Calendar.compare(_:to:toGranularity:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.timeZone.setter()
{
  return Calendar.timeZone.setter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t Calendar.component(_:from:)()
{
  return Calendar.component(_:from:)();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return type metadata accessor for IndexSet.Index();
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThan(_:)(Swift::Int a1)
{
  Swift::Int v1 = IndexSet.integerGreaterThan(_:)(a1);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

uint64_t static IndexSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexSet.count.getter()
{
  return IndexSet.count.getter();
}

uint64_t IndexSet.first.getter()
{
  return IndexSet.first.getter();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = IndexSet.insert(_:)(a1);
  result.memberAfterInsert = v2;
  result.uint64_t inserted = v1;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.remove(_:)(Swift::Int a1)
{
  Swift::Int v1 = IndexSet.remove(_:)(a1);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

uint64_t IndexSet.init(integer:)()
{
  return IndexSet.init(integer:)();
}

uint64_t IndexSet.isEmpty.getter()
{
  return IndexSet.isEmpty.getter();
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  return IndexSet.contains(_:)(a1);
}

uint64_t IndexSet.init()()
{
  return IndexSet.init()();
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t TimeZone.init(identifier:)()
{
  return TimeZone.init(identifier:)();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)IndexPath._bridgeToObjectiveC()();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexPath.init(item:section:)()
{
  return IndexPath.init(item:section:)();
}

uint64_t IndexPath.item.getter()
{
  return IndexPath.item.getter();
}

uint64_t IndexPath.section.getter()
{
  return IndexPath.section.getter();
}

uint64_t type metadata accessor for IndexPath()
{
  return type metadata accessor for IndexPath();
}

uint64_t SortOrder.hash(into:)()
{
  return SortOrder.hash(into:)();
}

uint64_t static Selector.== infix(_:_:)()
{
  return static Selector.== infix(_:_:)();
}

uint64_t Selector.hash(into:)()
{
  return Selector.hash(into:)();
}

uint64_t Selector.init(_:)()
{
  return Selector.init(_:)();
}

uint64_t BoundingBox.boundingRadius.getter()
{
  return BoundingBox.boundingRadius.getter();
}

uint64_t BoundingBox.init(min:max:)()
{
  return BoundingBox.init(min:max:)();
}

uint64_t BoundingBox.center.getter()
{
  return BoundingBox.center.getter();
}

uint64_t BoundingBox.extents.getter()
{
  return BoundingBox.extents.getter();
}

uint64_t BoundingBox.init()()
{
  return BoundingBox.init()();
}

uint64_t type metadata accessor for SceneEvents.Update()
{
  return type metadata accessor for SceneEvents.Update();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return __EntityRef.__as<A>(_:)();
}

uint64_t type metadata accessor for __EntityRef()
{
  return type metadata accessor for __EntityRef();
}

uint64_t AnchorEntity.__allocating_init(world:)()
{
  return AnchorEntity.__allocating_init(world:)();
}

uint64_t type metadata accessor for AnchorEntity()
{
  return type metadata accessor for AnchorEntity();
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)()
{
  return HasHierarchy.addChild(_:preservingWorldTransform:)();
}

uint64_t HasTransform.orientation.getter()
{
  return HasTransform.orientation.getter();
}

uint64_t HasTransform.orientation.setter()
{
  return HasTransform.orientation.setter();
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)()
{
  return HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
}

uint64_t HasTransform.position.setter()
{
  return HasTransform.position.setter();
}

uint64_t dispatch thunk of __SceneService.append(scene:)()
{
  return dispatch thunk of __SceneService.append(scene:)();
}

uint64_t dispatch thunk of __SceneService.remove(scene:)()
{
  return dispatch thunk of __SceneService.remove(scene:)();
}

uint64_t dispatch thunk of __RenderService.__coreRenderManager.getter()
{
  return dispatch thunk of __RenderService.__coreRenderManager.getter();
}

uint64_t dispatch thunk of __RenderService.device.getter()
{
  return dispatch thunk of __RenderService.device.getter();
}

uint64_t dispatch thunk of __REAssetService.__handle.getter()
{
  return dispatch thunk of __REAssetService.__handle.getter();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return dispatch thunk of __ServiceLocator.assetService.getter();
}

uint64_t dispatch thunk of __ServiceLocator.eventService.getter()
{
  return dispatch thunk of __ServiceLocator.eventService.getter();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return dispatch thunk of __ServiceLocator.sceneService.getter();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.getter()
{
  return dispatch thunk of __ServiceLocator.renderService.getter();
}

uint64_t static __ServiceLocator.__createSharedIfNeeded(with:)()
{
  return static __ServiceLocator.__createSharedIfNeeded(with:)();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return dispatch thunk of __ServiceLocator.engine.getter();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return static __ServiceLocator.shared.getter();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return type metadata accessor for __ServiceLocator();
}

uint64_t AnimationResource.name.getter()
{
  return AnimationResource.name.getter();
}

uint64_t AnimationResource.repeat(duration:)()
{
  return AnimationResource.repeat(duration:)();
}

uint64_t type metadata accessor for EngineRenderEvent()
{
  return type metadata accessor for EngineRenderEvent();
}

uint64_t PerspectiveCamera.init()()
{
  return PerspectiveCamera.init()();
}

uint64_t type metadata accessor for PerspectiveCamera()
{
  return type metadata accessor for PerspectiveCamera();
}

uint64_t type metadata accessor for __REAnchoringType.Classification()
{
  return type metadata accessor for __REAnchoringType.Classification();
}

uint64_t static __REAnchoringType.Alignment.vertical.getter()
{
  return static __REAnchoringType.Alignment.vertical.getter();
}

uint64_t type metadata accessor for __REAnchoringType.Alignment()
{
  return type metadata accessor for __REAnchoringType.Alignment();
}

uint64_t type metadata accessor for __REAnchoringType()
{
  return type metadata accessor for __REAnchoringType();
}

uint64_t static EnvironmentResource.defaultObject()()
{
  return static EnvironmentResource.defaultObject()();
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return type metadata accessor for EnvironmentResource();
}

uint64_t HasPerspectiveCamera.camera.modify()
{
  return HasPerspectiveCamera.camera.modify();
}

uint64_t static __EngineServiceMaskRef.__fromCore(_:)()
{
  return static __EngineServiceMaskRef.__fromCore(_:)();
}

uint64_t __EngineServiceMaskRef.__as<A>(_:)()
{
  return __EngineServiceMaskRef.__as<A>(_:)();
}

uint64_t type metadata accessor for __EngineServiceMaskRef()
{
  return type metadata accessor for __EngineServiceMaskRef();
}

uint64_t PerspectiveCameraComponent.fieldOfViewInDegrees.setter()
{
  return PerspectiveCameraComponent.fieldOfViewInDegrees.setter();
}

uint64_t AnimationPlaybackController.blendFactor.getter()
{
  return AnimationPlaybackController.blendFactor.getter();
}

uint64_t AnimationPlaybackController.time.getter()
{
  return AnimationPlaybackController.time.getter();
}

uint64_t AnimationPlaybackController.time.setter()
{
  return AnimationPlaybackController.time.setter();
}

uint64_t AnimationPlaybackController.speed.getter()
{
  return AnimationPlaybackController.speed.getter();
}

uint64_t AnimationPlaybackController.isValid.getter()
{
  return AnimationPlaybackController.isValid.getter();
}

uint64_t AnimationPlaybackController.duration.getter()
{
  return AnimationPlaybackController.duration.getter();
}

uint64_t AnimationPlaybackController.isPlaying.getter()
{
  return AnimationPlaybackController.isPlaying.getter();
}

uint64_t AnimationPlaybackController.isStopped.getter()
{
  return AnimationPlaybackController.isStopped.getter();
}

uint64_t dispatch thunk of AnimationPlaybackController.isComplete.getter()
{
  return dispatch thunk of AnimationPlaybackController.isComplete.getter();
}

uint64_t dispatch thunk of AnimationPlaybackController.stop()()
{
  return dispatch thunk of AnimationPlaybackController.stop()();
}

uint64_t dispatch thunk of AnimationPlaybackController.pause()()
{
  return dispatch thunk of AnimationPlaybackController.pause()();
}

uint64_t dispatch thunk of AnimationPlaybackController.resume()()
{
  return dispatch thunk of AnimationPlaybackController.resume()();
}

uint64_t dispatch thunk of AnimationPlaybackController.isPaused.getter()
{
  return dispatch thunk of AnimationPlaybackController.isPaused.getter();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.setter()
{
  return dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.setter();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__removeAllInteractions()()
{
  return dispatch thunk of __RKEntityInteractionManager.__removeAllInteractions()();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter()
{
  return dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter();
}

uint64_t type metadata accessor for __RKEntityInteractionManager()
{
  return type metadata accessor for __RKEntityInteractionManager();
}

uint64_t Scene.__anchoringType.getter()
{
  return Scene.__anchoringType.getter();
}

uint64_t Scene.AnchorCollection.appendNinja(_:)()
{
  return Scene.AnchorCollection.appendNinja(_:)();
}

uint64_t type metadata accessor for Scene.AnchorCollection()
{
  return type metadata accessor for Scene.AnchorCollection();
}

uint64_t dispatch thunk of Scene.__interactionService.getter()
{
  return dispatch thunk of Scene.__interactionService.getter();
}

uint64_t dispatch thunk of Scene.name.getter()
{
  return dispatch thunk of Scene.name.getter();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return dispatch thunk of Scene.anchors.getter();
}

uint64_t static Scene.fromCore(_:)()
{
  return static Scene.fromCore(_:)();
}

uint64_t dispatch thunk of Scene.addAnchor(_:)()
{
  return dispatch thunk of Scene.addAnchor(_:)();
}

uint64_t Scene.subscribe<A>(to:on:_:)()
{
  return Scene.subscribe<A>(to:on:_:)();
}

uint64_t type metadata accessor for Scene()
{
  return type metadata accessor for Scene();
}

uint64_t type metadata accessor for ARView.CameraMode()
{
  return type metadata accessor for ARView.CameraMode();
}

uint64_t ARView.cameraMode.setter()
{
  return ARView.cameraMode.setter();
}

uint64_t static ARView.Environment.Background.color(_:)()
{
  return static ARView.Environment.Background.color(_:)();
}

uint64_t type metadata accessor for ARView.Environment.Background()
{
  return type metadata accessor for ARView.Environment.Background();
}

uint64_t ARView.Environment.background.setter()
{
  return ARView.Environment.background.setter();
}

uint64_t dispatch thunk of ARView.environment.modify()
{
  return dispatch thunk of ARView.environment.modify();
}

uint64_t ARView.init(frame:cameraMode:automaticallyConfigureSession:)()
{
  return ARView.init(frame:cameraMode:automaticallyConfigureSession:)();
}

uint64_t dispatch thunk of ARView.scene.getter()
{
  return dispatch thunk of ARView.scene.getter();
}

uint64_t dispatch thunk of ARView.snapshot(saveToHDR:completion:)()
{
  return dispatch thunk of ARView.snapshot(saveToHDR:completion:)();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return dispatch thunk of Entity.__coreEntity.getter();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return dispatch thunk of Entity.components.modify();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return Entity.ComponentSet.subscript.setter();
}

uint64_t Entity.playAnimation(_:transitionDuration:startsPaused:)()
{
  return Entity.playAnimation(_:transitionDuration:startsPaused:)();
}

Swift::Void __swiftcall Entity.turnIntoNinja()()
{
}

uint64_t Entity.availableAnimations.getter()
{
  return Entity.availableAnimations.getter();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return dispatch thunk of Entity.name.setter();
}

uint64_t static Entity.loadAsync(contentsOf:withName:)()
{
  return static Entity.loadAsync(contentsOf:withName:)();
}

uint64_t Entity.init()()
{
  return Entity.init()();
}

uint64_t type metadata accessor for Entity()
{
  return type metadata accessor for Entity();
}

uint64_t __Engine.Configuration.__createServices.getter()
{
  return __Engine.Configuration.__createServices.getter();
}

uint64_t __Engine.Configuration.__createServices.setter()
{
  return __Engine.Configuration.__createServices.setter();
}

uint64_t __Engine.Configuration.__updateServices.getter()
{
  return __Engine.Configuration.__updateServices.getter();
}

uint64_t __Engine.Configuration.__updateServices.setter()
{
  return __Engine.Configuration.__updateServices.setter();
}

uint64_t __Engine.Configuration.init()()
{
  return __Engine.Configuration.init()();
}

uint64_t type metadata accessor for __Engine.Configuration()
{
  return type metadata accessor for __Engine.Configuration();
}

uint64_t dispatch thunk of __Engine.__stop()()
{
  return dispatch thunk of __Engine.__stop()();
}

uint64_t dispatch thunk of __Engine.__start()()
{
  return dispatch thunk of __Engine.__start()();
}

uint64_t dispatch thunk of __Engine.isRunning.getter()
{
  return dispatch thunk of __Engine.isRunning.getter();
}

uint64_t CalculateExpressionTypesetImage(expression:result:showResult:fontSize:)()
{
  return CalculateExpressionTypesetImage(expression:result:showResult:fontSize:)();
}

uint64_t withObservationTracking<A>(_:onChange:)()
{
  return withObservationTracking<A>(_:onChange:)();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.didSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.didSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.willSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.willSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

Swift::Void __swiftcall AppSessionManager.appSessionDidTerminate()()
{
}

Swift::Void __swiftcall AppSessionManager.startAppSession(shouldCorrelateSceneSessions:)(Swift::Bool shouldCorrelateSceneSessions)
{
}

uint64_t AppSessionManager.createSessionManager(with:)()
{
  return AppSessionManager.createSessionManager(with:)();
}

uint64_t AppSessionManager.init(accessQueue:trackingConsent:crashDetector:summaryEventConfiguration:)()
{
  return AppSessionManager.init(accessQueue:trackingConsent:crashDetector:summaryEventConfiguration:)();
}

uint64_t type metadata accessor for AppSessionManager()
{
  return type metadata accessor for AppSessionManager();
}

uint64_t static AccessQueue.background.getter()
{
  return static AccessQueue.background.getter();
}

uint64_t type metadata accessor for AccessQueue()
{
  return type metadata accessor for AccessQueue();
}

uint64_t static FlushEvents.didEndSession.getter()
{
  return static FlushEvents.didEndSession.getter();
}

uint64_t static FlushEvents.didLeaveGroup.getter()
{
  return static FlushEvents.didLeaveGroup.getter();
}

uint64_t static FlushEvents.didStartSession.getter()
{
  return static FlushEvents.didStartSession.getter();
}

uint64_t type metadata accessor for FlushEvents()
{
  return type metadata accessor for FlushEvents();
}

uint64_t SessionData.init(key:data:)()
{
  return SessionData.init(key:data:)();
}

uint64_t FlushManager.__allocating_init(appSessionManager:client:endpoint:contentType:config:clientFactory:)()
{
  return FlushManager.__allocating_init(appSessionManager:client:endpoint:contentType:config:clientFactory:)();
}

uint64_t dispatch thunk of FlushManager.repairThenFlush(repair:completion:)()
{
  return dispatch thunk of FlushManager.repairThenFlush(repair:completion:)();
}

uint64_t type metadata accessor for FlushManager()
{
  return type metadata accessor for FlushManager();
}

uint64_t AccessTracker.push<A>(data:traits:file:line:)()
{
  return AccessTracker.push<A>(data:traits:file:line:)();
}

uint64_t AccessTracker.time<A>(_:submitAndRestartWithSession:)()
{
  return AccessTracker.time<A>(_:submitAndRestartWithSession:)();
}

uint64_t AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)()
{
  return AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)();
}

uint64_t static CrashDetector.shared.getter()
{
  return static CrashDetector.shared.getter();
}

uint64_t type metadata accessor for CrashDetector()
{
  return type metadata accessor for CrashDetector();
}

uint64_t static DataEventType.requiresDiagnosticsConsent.getter()
{
  return static DataEventType.requiresDiagnosticsConsent.getter();
}

uint64_t DataEventType.toDict(dataEventFormatter:)()
{
  return DataEventType.toDict(dataEventFormatter:)();
}

uint64_t DataEventType.toDict(timestampGranularity:)()
{
  return DataEventType.toDict(timestampGranularity:)();
}

uint64_t DataEventType.toDict(timestampConfiguration:)()
{
  return DataEventType.toDict(timestampConfiguration:)();
}

uint64_t type metadata accessor for EventProperty()
{
  return type metadata accessor for EventProperty();
}

uint64_t type metadata accessor for DataEventTrait()
{
  return type metadata accessor for DataEventTrait();
}

uint64_t FlushProcessor.init(flushEvents:flushInterval:)()
{
  return FlushProcessor.init(flushEvents:flushInterval:)();
}

uint64_t type metadata accessor for FlushProcessor()
{
  return type metadata accessor for FlushProcessor();
}

uint64_t SessionManager.processorManager.getter()
{
  return SessionManager.processorManager.getter();
}

uint64_t SessionManager.transaction(_:)()
{
  return SessionManager.transaction(_:)();
}

uint64_t SessionManager.start(for:identifier:startDate:timestampJitter:)()
{
  return SessionManager.start(for:identifier:startDate:timestampJitter:)();
}

uint64_t type metadata accessor for SessionManager.Options()
{
  return type metadata accessor for SessionManager.Options();
}

Swift::Void __swiftcall SessionManager.endSync()()
{
}

uint64_t SessionManager.tracker.getter()
{
  return SessionManager.tracker.getter();
}

uint64_t type metadata accessor for TimestampJitter()
{
  return type metadata accessor for TimestampJitter();
}

Swift::Void __swiftcall TrackingConsent.allow()()
{
}

uint64_t static TrackingConsent.shared.getter()
{
  return static TrackingConsent.shared.getter();
}

uint64_t type metadata accessor for TrackingConsent()
{
  return type metadata accessor for TrackingConsent();
}

uint64_t ProcessorManager.add(eventProcessor:)()
{
  return ProcessorManager.add(eventProcessor:)();
}

uint64_t AccessSessionManager.push<A>(_:traits:file:line:)()
{
  return AccessSessionManager.push<A>(_:traits:file:line:)();
}

uint64_t LoggingEventProcessor.__allocating_init(logFormat:)()
{
  return LoggingEventProcessor.__allocating_init(logFormat:)();
}

uint64_t type metadata accessor for LoggingEventProcessor()
{
  return type metadata accessor for LoggingEventProcessor();
}

uint64_t UploadBatchEventConfig.with(transparencyLoggingEnabled:)()
{
  return UploadBatchEventConfig.with(transparencyLoggingEnabled:)();
}

uint64_t UploadBatchEventConfig.with(directory:)()
{
  return UploadBatchEventConfig.with(directory:)();
}

uint64_t static UploadBatchEventConfig.default.getter()
{
  return static UploadBatchEventConfig.default.getter();
}

uint64_t type metadata accessor for UploadBatchEventConfig()
{
  return type metadata accessor for UploadBatchEventConfig();
}

uint64_t static TimeDurationGranularity.milliseconds.getter()
{
  return static TimeDurationGranularity.milliseconds.getter();
}

uint64_t static TimeDurationGranularity.seconds.getter()
{
  return static TimeDurationGranularity.seconds.getter();
}

uint64_t type metadata accessor for TimeDurationGranularity()
{
  return type metadata accessor for TimeDurationGranularity();
}

uint64_t static SummaryEventConfiguration.disabled.getter()
{
  return static SummaryEventConfiguration.disabled.getter();
}

uint64_t type metadata accessor for SummaryEventConfiguration()
{
  return type metadata accessor for SummaryEventConfiguration();
}

uint64_t UploadBatchEventProcessor.__allocating_init(client:endpoint:contentType:config:)()
{
  return UploadBatchEventProcessor.__allocating_init(client:endpoint:contentType:config:)();
}

uint64_t type metadata accessor for UploadBatchEventProcessor()
{
  return type metadata accessor for UploadBatchEventProcessor();
}

uint64_t type metadata accessor for LoggingEventProcessorFormat()
{
  return type metadata accessor for LoggingEventProcessorFormat();
}

uint64_t SessionManagerConfiguration.init(options:flushProcessor:timestampJitter:privacyValidationProvider:)()
{
  return SessionManagerConfiguration.init(options:flushProcessor:timestampJitter:privacyValidationProvider:)();
}

uint64_t type metadata accessor for SessionManagerConfiguration()
{
  return type metadata accessor for SessionManagerConfiguration();
}

uint64_t URLSessionUploadClientFactory.init()()
{
  return URLSessionUploadClientFactory.init()();
}

uint64_t type metadata accessor for URLSessionUploadClientFactory()
{
  return type metadata accessor for URLSessionUploadClientFactory();
}

uint64_t DisabledPrivacyValidationProvider.init()()
{
  return DisabledPrivacyValidationProvider.init()();
}

uint64_t type metadata accessor for DisabledPrivacyValidationProvider()
{
  return type metadata accessor for DisabledPrivacyValidationProvider();
}

uint64_t Client.buildNumber.getter()
{
  return Client.buildNumber.getter();
}

uint64_t Client.__allocating_init(bundle:)()
{
  return Client.__allocating_init(bundle:)();
}

uint64_t Client.version.getter()
{
  return Client.version.getter();
}

uint64_t type metadata accessor for Client()
{
  return type metadata accessor for Client();
}

uint64_t type metadata accessor for Session.Kind()
{
  return type metadata accessor for Session.Kind();
}

uint64_t Tracker.clearStack<A>(of:includeParentTrackers:)()
{
  return Tracker.clearStack<A>(of:includeParentTrackers:)();
}

uint64_t Tracker.whenSession(block:)()
{
  return Tracker.whenSession(block:)();
}

uint64_t Tracker.onSessionChange(block:)()
{
  return Tracker.onSessionChange(block:)();
}

uint64_t Tracker.chain(name:identifier:)()
{
  return Tracker.chain(name:identifier:)();
}

uint64_t Endpoint.init(url:name:sharedContainerIdentifier:)()
{
  return Endpoint.init(url:name:sharedContainerIdentifier:)();
}

uint64_t type metadata accessor for Endpoint()
{
  return type metadata accessor for Endpoint();
}

uint64_t type metadata accessor for EventData()
{
  return type metadata accessor for EventData();
}

uint64_t type metadata accessor for TimedData()
{
  return type metadata accessor for TimedData();
}

uint64_t CKMergeable.merge(_:)()
{
  return CKMergeable.merge(_:)();
}

uint64_t type metadata accessor for CGPathFillRule()
{
  return type metadata accessor for CGPathFillRule();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)CGFloat._bridgeToObjectiveC()();
}

uint64_t static CGFloat._forceBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static AlternationBuilder.buildExpression<A>(_:)()
{
  return static AlternationBuilder.buildExpression<A>(_:)();
}

uint64_t static AlternationBuilder.buildPartialBlock<A>(first:)()
{
  return static AlternationBuilder.buildPartialBlock<A>(first:)();
}

uint64_t static RegexComponentBuilder.buildExpression<A>(_:)()
{
  return static RegexComponentBuilder.buildExpression<A>(_:)();
}

uint64_t static RegexComponentBuilder.buildPartialBlock<A>(first:)()
{
  return static RegexComponentBuilder.buildPartialBlock<A>(first:)();
}

uint64_t makeFactory()()
{
  return makeFactory()();
}

uint64_t type metadata accessor for CharacterClass()
{
  return type metadata accessor for CharacterClass();
}

uint64_t Capture.init(_:)()
{
  return Capture.init(_:)();
}

uint64_t ChoiceOf.init(_:)()
{
  return ChoiceOf.init(_:)();
}

{
  return ChoiceOf.init(_:)();
}

uint64_t OneOrMore.init(_:)()
{
  return OneOrMore.init(_:)();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)()
{
  return dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.getter()
{
  return dispatch thunk of CKShareGroupSessionProvider.id.getter();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.__allocating_init(id:activity:)()
{
  return dispatch thunk of PersonalGroupSessionProvider.__allocating_init(id:activity:)();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.getter()
{
  return dispatch thunk of PersonalGroupSessionProvider.id.getter();
}

uint64_t static GroupActivityMetadata.ActivityType.generic.getter()
{
  return static GroupActivityMetadata.ActivityType.generic.getter();
}

uint64_t type metadata accessor for GroupActivityMetadata.ActivityType()
{
  return type metadata accessor for GroupActivityMetadata.ActivityType();
}

uint64_t GroupActivityMetadata.type.setter()
{
  return GroupActivityMetadata.type.setter();
}

uint64_t GroupActivityMetadata.title.setter()
{
  return GroupActivityMetadata.title.setter();
}

uint64_t GroupActivityMetadata.init()()
{
  return GroupActivityMetadata.init()();
}

uint64_t type metadata accessor for GroupActivityMetadata()
{
  return type metadata accessor for GroupActivityMetadata();
}

uint64_t type metadata accessor for GroupSessionMessenger.DeliveryMode()
{
  return type metadata accessor for GroupSessionMessenger.DeliveryMode();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return GroupSessionMessenger.MessageContext.source.getter();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return type metadata accessor for GroupSessionMessenger.MessageContext();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)()
{
  return GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:)()
{
  return GroupSessionMessenger.__allocating_init<A>(session:)();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return GroupSessionMessenger.Messages.makeAsyncIterator()();
}

uint64_t GroupSessionMessenger.messages(of:)()
{
  return GroupSessionMessenger.messages(of:)();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return GroupSessionMessenger.messages<A>(of:)();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return type metadata accessor for GroupSessionMessenger();
}

uint64_t GroupSession.localParticipant.getter()
{
  return GroupSession.localParticipant.getter();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return GroupSession.$activeParticipants.getter();
}

uint64_t GroupSession.id.getter()
{
  return GroupSession.id.getter();
}

Swift::Void __swiftcall GroupSession.end()()
{
}

Swift::Void __swiftcall GroupSession.join()()
{
}

uint64_t static GroupSession.State.== infix(_:_:)()
{
  return static GroupSession.State.== infix(_:_:)();
}

uint64_t type metadata accessor for GroupSession.State()
{
  return type metadata accessor for GroupSession.State();
}

uint64_t GroupSession.state.getter()
{
  return GroupSession.state.getter();
}

uint64_t GroupSession.$state.getter()
{
  return GroupSession.$state.getter();
}

uint64_t GroupSession.activity.getter()
{
  return GroupSession.activity.getter();
}

uint64_t static GroupActivity._identifiable(by:)()
{
  return static GroupActivity._identifiable(by:)();
}

uint64_t Participant.id.getter()
{
  return Participant.id.getter();
}

uint64_t Participant.handle.getter()
{
  return Participant.handle.getter();
}

uint64_t type metadata accessor for Participant()
{
  return type metadata accessor for Participant();
}

uint64_t type metadata accessor for Participants()
{
  return type metadata accessor for Participants();
}

uint64_t dispatch thunk of ImagePlaygroundViewController.sourceImage.setter()
{
  return dispatch thunk of ImagePlaygroundViewController.sourceImage.setter();
}

uint64_t dispatch thunk of ImagePlaygroundViewController.concepts.setter()
{
  return dispatch thunk of ImagePlaygroundViewController.concepts.setter();
}

uint64_t dispatch thunk of ImagePlaygroundViewController.delegate.setter()
{
  return dispatch thunk of ImagePlaygroundViewController.delegate.setter();
}

uint64_t type metadata accessor for ImagePlaygroundViewController()
{
  return type metadata accessor for ImagePlaygroundViewController();
}

uint64_t static ImagePlaygroundConcept.extracted(from:title:)()
{
  return static ImagePlaygroundConcept.extracted(from:title:)();
}

uint64_t type metadata accessor for ImagePlaygroundConcept()
{
  return type metadata accessor for ImagePlaygroundConcept();
}

uint64_t EventService.subscribe<A>(to:on:componentType:_:)()
{
  return EventService.subscribe<A>(to:on:componentType:_:)();
}

uint64_t __ImageBasedLightComponent.init(environment:intensityExponent:)()
{
  return __ImageBasedLightComponent.init(environment:intensityExponent:)();
}

uint64_t type metadata accessor for __ImageBasedLightComponent()
{
  return type metadata accessor for __ImageBasedLightComponent();
}

uint64_t AppEntityViewAnnotation.init<A>(entity:state:)()
{
  return AppEntityViewAnnotation.init<A>(entity:state:)();
}

uint64_t type metadata accessor for AppEntityViewAnnotation()
{
  return type metadata accessor for AppEntityViewAnnotation();
}

uint64_t _RegexFactory.accumulate<A, B, C>(_:_:)()
{
  return _RegexFactory.accumulate<A, B, C>(_:_:)();
}

uint64_t _RegexFactory.orderedChoice<A, B>(_:)()
{
  return _RegexFactory.orderedChoice<A, B>(_:)();
}

uint64_t _RegexFactory.accumulateAlternation<A, B, C>(_:_:)()
{
  return _RegexFactory.accumulateAlternation<A, B, C>(_:_:)();
}

uint64_t _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)()
{
  return _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
}

uint64_t _RegexFactory.capture<A, B, C, D>(_:_:_:)()
{
  return _RegexFactory.capture<A, B, C, D>(_:_:_:)();
}

uint64_t _RegexFactory.capture<A, B>(_:)()
{
  return _RegexFactory.capture<A, B>(_:)();
}

uint64_t _RegexFactory.oneOrMore<A, B>(_:_:)()
{
  return _RegexFactory.oneOrMore<A, B>(_:_:)();
}

uint64_t type metadata accessor for _RegexFactory()
{
  return type metadata accessor for _RegexFactory();
}

uint64_t static RegexComponent<>.digit.getter()
{
  return static RegexComponent<>.digit.getter();
}

uint64_t type metadata accessor for RegexRepetitionBehavior()
{
  return type metadata accessor for RegexRepetitionBehavior();
}

uint64_t Regex.init(_regexString:version:)()
{
  return Regex.init(_regexString:version:)();
}

uint64_t Regex.init<A>(_:)()
{
  return Regex.init<A>(_:)();
}

uint64_t Regex.firstMatch(in:)()
{
  return Regex.firstMatch(in:)();
}

uint64_t Regex.Match.range.getter()
{
  return Regex.Match.range.getter();
}

uint64_t Regex.Match.output.getter()
{
  return Regex.Match.output.getter();
}

uint64_t _AppExtensionQuery.init(extensionPointIdentifier:)()
{
  return _AppExtensionQuery.init(extensionPointIdentifier:)();
}

uint64_t type metadata accessor for _AppExtensionQuery.Results.AsyncIterator()
{
  return type metadata accessor for _AppExtensionQuery.Results.AsyncIterator();
}

uint64_t _AppExtensionQuery.Results.makeAsyncIterator()()
{
  return _AppExtensionQuery.Results.makeAsyncIterator()();
}

uint64_t type metadata accessor for _AppExtensionQuery.Results()
{
  return type metadata accessor for _AppExtensionQuery.Results();
}

uint64_t _AppExtensionQuery.results.getter()
{
  return _AppExtensionQuery.results.getter();
}

uint64_t type metadata accessor for _AppExtensionQuery()
{
  return type metadata accessor for _AppExtensionQuery();
}

Swift::Void __swiftcall _AppExtensionProcess.invalidate()()
{
}

uint64_t _AppExtensionProcess.Configuration.init(appExtension:onInterruption:)()
{
  return _AppExtensionProcess.Configuration.init(appExtension:onInterruption:)();
}

uint64_t type metadata accessor for _AppExtensionProcess.Configuration()
{
  return type metadata accessor for _AppExtensionProcess.Configuration();
}

NSXPCConnection __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _AppExtensionProcess.makeXPCConnection()()
{
  return (NSXPCConnection)_AppExtensionProcess.makeXPCConnection()();
}

uint64_t type metadata accessor for _AppExtensionProcess()
{
  return type metadata accessor for _AppExtensionProcess();
}

uint64_t _AppExtensionIdentity.bundleIdentifier.getter()
{
  return _AppExtensionIdentity.bundleIdentifier.getter();
}

uint64_t type metadata accessor for _AppExtensionIdentity()
{
  return type metadata accessor for _AppExtensionIdentity();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularFloatField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularFloatField(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularFloatField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

uint64_t UTType.init(exportedAs:conformingTo:)()
{
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType.realityFile.getter()
{
  return static UTType.realityFile.getter();
}

uint64_t static UTType.emailMessage.getter()
{
  return static UTType.emailMessage.getter();
}

uint64_t static UTType.utf8PlainText.getter()
{
  return static UTType.utf8PlainText.getter();
}

uint64_t static UTType.compositeContent.getter()
{
  return static UTType.compositeContent.getter();
}

UTType __swiftcall UTType._bridgeToObjectiveC()()
{
  return (UTType)UTType._bridgeToObjectiveC()();
}

uint64_t UTType.localizedDescription.getter()
{
  return UTType.localizedDescription.getter();
}

uint64_t UTType.preferredFilenameExtension.getter()
{
  return UTType.preferredFilenameExtension.getter();
}

uint64_t static UTType.== infix(_:_:)()
{
  return static UTType.== infix(_:_:)();
}

uint64_t static UTType._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UTType._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static UTType.pdf.getter()
{
  return static UTType.pdf.getter();
}

uint64_t static UTType.png.getter()
{
  return static UTType.png.getter();
}

uint64_t static UTType.rtf.getter()
{
  return static UTType.rtf.getter();
}

uint64_t static UTType.url.getter()
{
  return static UTType.url.getter();
}

uint64_t static UTType.usd.getter()
{
  return static UTType.usd.getter();
}

uint64_t static UTType.data.getter()
{
  return static UTType.data.getter();
}

uint64_t static UTType.heic.getter()
{
  return static UTType.heic.getter();
}

uint64_t static UTType.item.getter()
{
  return static UTType.item.getter();
}

uint64_t static UTType.rtfd.getter()
{
  return static UTType.rtfd.getter();
}

uint64_t static UTType.usdz.getter()
{
  return static UTType.usdz.getter();
}

uint64_t static UTType.audio.getter()
{
  return static UTType.audio.getter();
}

uint64_t static UTType.image.getter()
{
  return static UTType.image.getter();
}

uint64_t static UTType.movie.getter()
{
  return static UTType.movie.getter();
}

uint64_t static UTType.bundle.getter()
{
  return static UTType.bundle.getter();
}

uint64_t static UTType.package.getter()
{
  return static UTType.package.getter();
}

uint64_t UTType.conforms(to:)()
{
  return UTType.conforms(to:)();
}

uint64_t static UTType.flatRTFD.getter()
{
  return static UTType.flatRTFD.getter();
}

uint64_t static UTType.plainText.getter()
{
  return static UTType.plainText.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t UTType.init(_:)()
{
  return UTType.init(_:)();
}

uint64_t CRCKMergeable.init(crdt:context:)()
{
  return CRCKMergeable.init(crdt:context:)();
}

uint64_t CRCKMergeable.crdt.getter()
{
  return CRCKMergeable.crdt.getter();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t static OSSignpostID.== infix(_:_:)()
{
  return static OSSignpostID.== infix(_:_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OSSignposter.init()()
{
  return OSSignposter.init()();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Logger.init(_:)()
{
  return Logger.init(_:)();
}

uint64_t static _UIKitNumericRawRepresentable.- infix(_:_:)()
{
  return static _UIKitNumericRawRepresentable.- infix(_:_:)();
}

uint64_t static UIPointerShape.defaultCornerRadius.getter()
{
  return static UIPointerShape.defaultCornerRadius.getter();
}

uint64_t type metadata accessor for UIPointerShape()
{
  return type metadata accessor for UIPointerShape();
}

uint64_t static UICellAccessory.customView(configuration:)()
{
  return static UICellAccessory.customView(configuration:)();
}

uint64_t UICellAccessory.LabelOptions.init(isHidden:reservedLayoutWidth:tintColor:font:adjustsFontForContentSizeCategory:)()
{
  return UICellAccessory.LabelOptions.init(isHidden:reservedLayoutWidth:tintColor:font:adjustsFontForContentSizeCategory:)();
}

uint64_t type metadata accessor for UICellAccessory.LabelOptions()
{
  return type metadata accessor for UICellAccessory.LabelOptions();
}

uint64_t type metadata accessor for UICellAccessory.DisplayedState()
{
  return type metadata accessor for UICellAccessory.DisplayedState();
}

uint64_t type metadata accessor for UICellAccessory.LayoutDimension()
{
  return type metadata accessor for UICellAccessory.LayoutDimension();
}

uint64_t static UICellAccessory.outlineDisclosure(displayed:options:actionHandler:)()
{
  return static UICellAccessory.outlineDisclosure(displayed:options:actionHandler:)();
}

uint64_t static UICellAccessory.disclosureIndicator(displayed:options:)()
{
  return static UICellAccessory.disclosureIndicator(displayed:options:)();
}

uint64_t UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)()
{
  return UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
}

uint64_t type metadata accessor for UICellAccessory.CustomViewConfiguration()
{
  return type metadata accessor for UICellAccessory.CustomViewConfiguration();
}

uint64_t type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style()
{
  return type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style();
}

uint64_t UICellAccessory.OutlineDisclosureOptions.init(style:isHidden:reservedLayoutWidth:tintColor:)()
{
  return UICellAccessory.OutlineDisclosureOptions.init(style:isHidden:reservedLayoutWidth:tintColor:)();
}

uint64_t type metadata accessor for UICellAccessory.OutlineDisclosureOptions()
{
  return type metadata accessor for UICellAccessory.OutlineDisclosureOptions();
}

uint64_t UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)()
{
  return UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
}

uint64_t type metadata accessor for UICellAccessory.DisclosureIndicatorOptions()
{
  return type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
}

uint64_t static UICellAccessory.label(text:displayed:options:)()
{
  return static UICellAccessory.label(text:displayed:options:)();
}

uint64_t type metadata accessor for UICellAccessory.Placement()
{
  return type metadata accessor for UICellAccessory.Placement();
}

uint64_t type metadata accessor for UICellAccessory()
{
  return type metadata accessor for UICellAccessory();
}

uint64_t UIMutableTraits.userInterfaceStyle.setter()
{
  return UIMutableTraits.userInterfaceStyle.setter();
}

uint64_t UIMutableTraits.preferredContentSizeCategory.setter()
{
  return UIMutableTraits.preferredContentSizeCategory.setter();
}

uint64_t UIPointerEffect.preview.getter()
{
  return UIPointerEffect.preview.getter();
}

uint64_t type metadata accessor for UIPointerEffect.TintMode()
{
  return type metadata accessor for UIPointerEffect.TintMode();
}

uint64_t type metadata accessor for UIPointerEffect()
{
  return type metadata accessor for UIPointerEffect();
}

uint64_t type metadata accessor for UITraitOverrides()
{
  return type metadata accessor for UITraitOverrides();
}

uint64_t dispatch thunk of UIContentConfiguration.updated(for:)()
{
  return dispatch thunk of UIContentConfiguration.updated(for:)();
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  return UICellConfigurationState.isSelected.getter();
}

uint64_t UICellConfigurationState.isHighlighted.getter()
{
  return UICellConfigurationState.isHighlighted.getter();
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UICellConfigurationState.isEditing.getter()
{
  return UICellConfigurationState.isEditing.getter();
}

uint64_t type metadata accessor for UICellConfigurationState()
{
  return type metadata accessor for UICellConfigurationState();
}

uint64_t type metadata accessor for UITraitVerticalSizeClass()
{
  return type metadata accessor for UITraitVerticalSizeClass();
}

uint64_t UIBackgroundConfiguration.cornerRadius.setter()
{
  return UIBackgroundConfiguration.cornerRadius.setter();
}

uint64_t static UIBackgroundConfiguration.listPlainCell()()
{
  return static UIBackgroundConfiguration.listPlainCell()();
}

uint64_t UIBackgroundConfiguration._maskedCorners.setter()
{
  return UIBackgroundConfiguration._maskedCorners.setter();
}

uint64_t UIBackgroundConfiguration.backgroundColor.setter()
{
  return UIBackgroundConfiguration.backgroundColor.setter();
}

uint64_t static UIBackgroundConfiguration.listGroupedCell()()
{
  return static UIBackgroundConfiguration.listGroupedCell()();
}

uint64_t static UIBackgroundConfiguration.listSidebarCell()()
{
  return static UIBackgroundConfiguration.listSidebarCell()();
}

uint64_t UIBackgroundConfiguration.backgroundColorTransformer.setter()
{
  return UIBackgroundConfiguration.backgroundColorTransformer.setter();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return type metadata accessor for UIBackgroundConfiguration();
}

uint64_t type metadata accessor for UITraitUserInterfaceLevel()
{
  return type metadata accessor for UITraitUserInterfaceLevel();
}

uint64_t type metadata accessor for UITraitUserInterfaceStyle()
{
  return type metadata accessor for UITraitUserInterfaceStyle();
}

uint64_t UIListContentConfiguration.TextProperties.font.setter()
{
  return UIListContentConfiguration.TextProperties.font.setter();
}

uint64_t UIListContentConfiguration.TextProperties.color.setter()
{
  return UIListContentConfiguration.TextProperties.color.setter();
}

uint64_t UIListContentConfiguration.textProperties.modify()
{
  return UIListContentConfiguration.textProperties.modify();
}

uint64_t UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter()
{
  return UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter();
}

uint64_t UIListContentConfiguration.ImageProperties.cornerRadius.setter()
{
  return UIListContentConfiguration.ImageProperties.cornerRadius.setter();
}

uint64_t static UIListContentConfiguration.ImageProperties.standardDimension.getter()
{
  return static UIListContentConfiguration.ImageProperties.standardDimension.getter();
}

uint64_t UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter()
{
  return UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
}

uint64_t UIListContentConfiguration.imageProperties.modify()
{
  return UIListContentConfiguration.imageProperties.modify();
}

uint64_t UIListContentConfiguration.text.setter()
{
  return UIListContentConfiguration.text.setter();
}

uint64_t UIListContentConfiguration.image.setter()
{
  return UIListContentConfiguration.image.setter();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return type metadata accessor for UIListContentConfiguration();
}

uint64_t type metadata accessor for UITraitHorizontalSizeClass()
{
  return type metadata accessor for UITraitHorizontalSizeClass();
}

uint64_t NSDiffableDataSourceSnapshot.appendItems(_:toSection:)()
{
  return NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.deleteItems(_:)(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.appendSections(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSnapshot.itemIdentifiers(inSection:)()
{
  return NSDiffableDataSourceSnapshot.itemIdentifiers(inSection:)();
}

uint64_t NSDiffableDataSourceSnapshot.itemIdentifiers.getter()
{
  return NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.reconfigureItems(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSnapshot.sectionIdentifiers.getter()
{
  return NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
}

uint64_t NSDiffableDataSourceSnapshot.init()()
{
  return NSDiffableDataSourceSnapshot.init()();
}

uint64_t UIListSeparatorConfiguration.topSeparatorVisibility.setter()
{
  return UIListSeparatorConfiguration.topSeparatorVisibility.setter();
}

uint64_t UIListSeparatorConfiguration.bottomSeparatorVisibility.setter()
{
  return UIListSeparatorConfiguration.bottomSeparatorVisibility.setter();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration.Visibility()
{
  return type metadata accessor for UIListSeparatorConfiguration.Visibility();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration()
{
  return type metadata accessor for UIListSeparatorConfiguration();
}

uint64_t type metadata accessor for UITraitAccessibilityContrast()
{
  return type metadata accessor for UITraitAccessibilityContrast();
}

Swift::Bool __swiftcall UINavigationItemRenameDelegate.navigationItem(_:shouldEndRenamingWith:)(UINavigationItem _, Swift::String shouldEndRenamingWith)
{
  return UINavigationItemRenameDelegate.navigationItem(_:shouldEndRenamingWith:)(_.super.isa, shouldEndRenamingWith._countAndFlagsBits, shouldEndRenamingWith._object);
}

uint64_t type metadata accessor for UIConfigurationColorTransformer()
{
  return type metadata accessor for UIConfigurationColorTransformer();
}

uint64_t UIConfigurationColorTransformer.init(_:)()
{
  return UIConfigurationColorTransformer.init(_:)();
}

uint64_t UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)()
{
  return UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.sectionIdentifier(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.sectionIdentifier(for:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
}

uint64_t UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)()
{
  return UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.index(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.index(for:)();
}

uint64_t UICollectionViewDiffableDataSource.snapshot(for:)()
{
  return UICollectionViewDiffableDataSource.snapshot(for:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.snapshot()()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)();
}

uint64_t NSDiffableDataSourceSectionSnapshot.isExpanded(_:)()
{
  return NSDiffableDataSourceSectionSnapshot.isExpanded(_:)();
}

uint64_t NSDiffableDataSourceSectionSnapshot.items.getter()
{
  return NSDiffableDataSourceSectionSnapshot.items.getter();
}

uint64_t NSDiffableDataSourceSectionSnapshot.append(_:to:)()
{
  return NSDiffableDataSourceSectionSnapshot.append(_:to:)();
}

Swift::Void __swiftcall NSDiffableDataSourceSectionSnapshot.expand(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSectionSnapshot.parent(of:)()
{
  return NSDiffableDataSourceSectionSnapshot.parent(of:)();
}

uint64_t NSDiffableDataSourceSectionSnapshot.contains(_:)()
{
  return NSDiffableDataSourceSectionSnapshot.contains(_:)();
}

uint64_t NSDiffableDataSourceSectionSnapshot.rootItems.getter()
{
  return NSDiffableDataSourceSectionSnapshot.rootItems.getter();
}

uint64_t NSDiffableDataSourceSectionSnapshot.init()()
{
  return NSDiffableDataSourceSectionSnapshot.init()();
}

uint64_t UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter()
{
  return UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)()
{
  return UICollectionLayoutListConfiguration.init(appearance:)();
}

uint64_t UICollectionLayoutListConfiguration.headerMode.setter()
{
  return UICollectionLayoutListConfiguration.headerMode.setter();
}

uint64_t UICollectionLayoutListConfiguration.backgroundColor.setter()
{
  return UICollectionLayoutListConfiguration.backgroundColor.setter();
}

uint64_t UICollectionLayoutListConfiguration.showsSeparators.setter()
{
  return UICollectionLayoutListConfiguration.showsSeparators.setter();
}

uint64_t UICollectionLayoutListConfiguration.itemSeparatorHandler.setter()
{
  return UICollectionLayoutListConfiguration.itemSeparatorHandler.setter();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration()
{
  return type metadata accessor for UICollectionLayoutListConfiguration();
}

uint64_t type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return type metadata accessor for UIConfigurationTextAttributesTransformer();
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)()
{
  return UIConfigurationTextAttributesTransformer.init(_:)();
}

uint64_t dispatch thunk of Tip.id.getter()
{
  return dispatch thunk of Tip.id.getter();
}

uint64_t Tip.invalidate(reason:)()
{
  return Tip.invalidate(reason:)();
}

uint64_t Tip.shouldDisplay.getter()
{
  return Tip.shouldDisplay.getter();
}

uint64_t Tip.statusUpdates.getter()
{
  return Tip.statusUpdates.getter();
}

uint64_t Tip.shouldDisplayUpdates.getter()
{
  return Tip.shouldDisplayUpdates.getter();
}

uint64_t Tip.id.getter()
{
  return Tip.id.getter();
}

uint64_t Tip.image.getter()
{
  return Tip.image.getter();
}

uint64_t Tip.status.getter()
{
  return Tip.status.getter();
}

uint64_t Tip.actions.getter()
{
  return Tip.actions.getter();
}

uint64_t Tip.options.getter()
{
  return Tip.options.getter();
}

uint64_t TipUIPopoverViewController.popoverPresentationController.getter()
{
  return TipUIPopoverViewController.popoverPresentationController.getter();
}

uint64_t TipUIPopoverViewController.presentationDelegate.setter()
{
  return TipUIPopoverViewController.presentationDelegate.setter();
}

uint64_t type metadata accessor for TipUIPopoverViewController()
{
  return type metadata accessor for TipUIPopoverViewController();
}

uint64_t TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)()
{
  return TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
}

uint64_t TipView.init(_:arrowEdge:action:)()
{
  return TipView.init(_:arrowEdge:action:)();
}

uint64_t static Tips.RuleBuilder.buildExpression(_:)()
{
  return static Tips.RuleBuilder.buildExpression(_:)();
}

uint64_t static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)()
{
  return static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
}

uint64_t static Tips.RuleBuilder.buildPartialBlock(first:)()
{
  return static Tips.RuleBuilder.buildPartialBlock(first:)();
}

uint64_t type metadata accessor for Tips.EmptyDonation()
{
  return type metadata accessor for Tips.EmptyDonation();
}

uint64_t static Tips.OptionsBuilder.buildExpression<A>(_:)()
{
  return static Tips.OptionsBuilder.buildExpression<A>(_:)();
}

uint64_t static Tips.OptionsBuilder.buildFinalResult<A>(_:)()
{
  return static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
}

uint64_t static Tips.OptionsBuilder.buildPartialBlock<A>(first:)()
{
  return static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
}

uint64_t static Tips.DonationTimeRange.day.getter()
{
  return static Tips.DonationTimeRange.day.getter();
}

uint64_t type metadata accessor for Tips.DonationTimeRange()
{
  return type metadata accessor for Tips.DonationTimeRange();
}

uint64_t type metadata accessor for Tips.InvalidationReason()
{
  return type metadata accessor for Tips.InvalidationReason();
}

uint64_t static Tips.ConfigurationOption.DisplayFrequency.daily.getter()
{
  return static Tips.ConfigurationOption.DisplayFrequency.daily.getter();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.DisplayFrequency()
{
  return type metadata accessor for Tips.ConfigurationOption.DisplayFrequency();
}

uint64_t static Tips.ConfigurationOption.displayFrequency(_:)()
{
  return static Tips.ConfigurationOption.displayFrequency(_:)();
}

uint64_t type metadata accessor for Tips.ConfigurationOption()
{
  return type metadata accessor for Tips.ConfigurationOption();
}

uint64_t type metadata accessor for Tips.IgnoresDisplayFrequency()
{
  return type metadata accessor for Tips.IgnoresDisplayFrequency();
}

uint64_t Tips.IgnoresDisplayFrequency.init(_:)()
{
  return Tips.IgnoresDisplayFrequency.init(_:)();
}

uint64_t type metadata accessor for Tips.Rule()
{
  return type metadata accessor for Tips.Rule();
}

uint64_t Tips.Rule.init<A>(_:_:)()
{
  return Tips.Rule.init<A>(_:_:)();
}

{
  return Tips.Rule.init<A>(_:_:)();
}

uint64_t Tips.Event.sendDonation<>(_:)()
{
  return Tips.Event.sendDonation<>(_:)();
}

uint64_t Tips.Event.init<>(id:)()
{
  return Tips.Event.init<>(id:)();
}

uint64_t Tips.Event.donations.getter()
{
  return Tips.Event.donations.getter();
}

uint64_t type metadata accessor for Tips.Status()
{
  return type metadata accessor for Tips.Status();
}

uint64_t Tips.Parameter.wrappedValue.getter()
{
  return Tips.Parameter.wrappedValue.getter();
}

uint64_t Tips.Parameter.wrappedValue.setter()
{
  return Tips.Parameter.wrappedValue.setter();
}

uint64_t Tips.Parameter.init<A>(_:_:_:_:)()
{
  return Tips.Parameter.init<A>(_:_:_:_:)();
}

uint64_t static Tips.configure(_:)()
{
  return static Tips.configure(_:)();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return dispatch thunk of Cancellable.cancel()();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return static Subscribers.Demand.== infix(_:_:)();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return static Subscribers.Demand.none.getter();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return static Subscribers.Demand.unlimited.getter();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return dispatch thunk of Subscription.request(_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t AnyCancellable.init<A>(_:)()
{
  return AnyCancellable.init<A>(_:)();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init(_:)()
{
  return dispatch thunk of AnyCancellable.__allocating_init(_:)();
}

uint64_t AnyCancellable.init(_:)()
{
  return AnyCancellable.init(_:)();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t CurrentValueSubject.value.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CurrentValueSubject.value.setter()
{
  return CurrentValueSubject.value.setter();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return type metadata accessor for CurrentValueSubject();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return CurrentValueSubject.__allocating_init(_:)();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return ConnectablePublisher.autoconnect()();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t ObservableObjectPublisher.init()()
{
  return ObservableObjectPublisher.init()();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return type metadata accessor for ObservableObjectPublisher();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t Published.projectedValue.setter()
{
  return Published.projectedValue.setter();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)()
{
  return dispatch thunk of Publisher.receive<A>(subscriber:)();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.filter(_:)()
{
  return Publisher.filter(_:)();
}

uint64_t Publisher.collect<A>(_:options:)()
{
  return Publisher.collect<A>(_:options:)();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher.throttle<A>(for:scheduler:latest:)()
{
  return Publisher.throttle<A>(for:scheduler:latest:)();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return Publisher.subscribe<A>(_:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t Publisher<>.flatMap<A>(maxPublishers:_:)()
{
  return Publisher<>.flatMap<A>(maxPublishers:_:)();
}

uint64_t type metadata accessor for IPv4Address()
{
  return type metadata accessor for IPv4Address();
}

uint64_t IPv4Address.init(_:)()
{
  return IPv4Address.init(_:)();
}

uint64_t type metadata accessor for IPv6Address()
{
  return type metadata accessor for IPv6Address();
}

uint64_t IPv6Address.init(_:)()
{
  return IPv6Address.init(_:)();
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)()
{
  return AppStorage.init<A>(wrappedValue:_:store:)();
}

uint64_t AppStorage.wrappedValue.getter()
{
  return AppStorage.wrappedValue.getter();
}

uint64_t AppStorage.wrappedValue.setter()
{
  return AppStorage.wrappedValue.setter();
}

uint64_t AppStorage.projectedValue.getter()
{
  return AppStorage.projectedValue.getter();
}

uint64_t static ButtonRole.destructive.getter()
{
  return static ButtonRole.destructive.getter();
}

uint64_t type metadata accessor for ButtonRole()
{
  return type metadata accessor for ButtonRole();
}

uint64_t static EdgeInsets.== infix(_:_:)()
{
  return static EdgeInsets.== infix(_:_:)();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t EditButton.init()()
{
  return EditButton.init()();
}

uint64_t type metadata accessor for EditButton()
{
  return type metadata accessor for EditButton();
}

uint64_t FocusState.wrappedValue.setter()
{
  return FocusState.wrappedValue.setter();
}

uint64_t FocusState.projectedValue.getter()
{
  return FocusState.projectedValue.getter();
}

uint64_t FocusState.init<>()()
{
  return FocusState.init<>()();
}

uint64_t ScrollView._alwaysBounceAxes.setter()
{
  return ScrollView._alwaysBounceAxes.setter();
}

uint64_t type metadata accessor for ScrollView()
{
  return type metadata accessor for ScrollView();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t TapGesture.init(count:)()
{
  return TapGesture.init(count:)();
}

uint64_t type metadata accessor for TapGesture()
{
  return type metadata accessor for TapGesture();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for ControlSize()
{
  return type metadata accessor for ControlSize();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t static GestureMask.all.getter()
{
  return static GestureMask.all.getter();
}

uint64_t static ShadowStyle.drop(color:radius:x:y:)()
{
  return static ShadowStyle.drop(color:radius:x:y:)();
}

uint64_t type metadata accessor for ShadowStyle()
{
  return type metadata accessor for ShadowStyle();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t static SubmitLabel.done.getter()
{
  return static SubmitLabel.done.getter();
}

uint64_t type metadata accessor for SubmitLabel()
{
  return type metadata accessor for SubmitLabel();
}

uint64_t ToolbarItem<>.init(placement:content:)()
{
  return ToolbarItem<>.init(placement:content:)();
}

uint64_t ProgressView<>.init<>()()
{
  return ProgressView<>.init<>()();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t GeometryProxy.size.getter()
{
  return GeometryProxy.size.getter();
}

uint64_t GeometryProxy.frame(in:)()
{
  return GeometryProxy.frame(in:)();
}

uint64_t type metadata accessor for GeometryProxy()
{
  return type metadata accessor for GeometryProxy();
}

uint64_t ImageRenderer.uiImage.getter()
{
  return ImageRenderer.uiImage.getter();
}

uint64_t ImageRenderer.scale.setter()
{
  return ImageRenderer.scale.setter();
}

uint64_t ImageRenderer.init(content:)()
{
  return ImageRenderer.init(content:)();
}

uint64_t OpenURLAction.init(handler:)()
{
  return OpenURLAction.init(handler:)();
}

uint64_t type metadata accessor for OpenURLAction()
{
  return type metadata accessor for OpenURLAction();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t static EnvironmentKey._valuesEqual(_:_:)()
{
  return static EnvironmentKey._valuesEqual(_:_:)();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ObservedObject.projectedValue.getter()
{
  return ObservedObject.projectedValue.getter();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return ObservedObject.Wrapper.subscript.getter();
}

uint64_t ScrollGeometry.contentSize.getter()
{
  return ScrollGeometry.contentSize.getter();
}

uint64_t ScrollGeometry.contentOffset.getter()
{
  return ScrollGeometry.contentOffset.getter();
}

uint64_t ScrollGeometry.bounds.getter()
{
  return ScrollGeometry.bounds.getter();
}

uint64_t ViewDimensions.subscript.getter()
{
  return ViewDimensions.subscript.getter();
}

uint64_t type metadata accessor for CoordinateSpace()
{
  return type metadata accessor for CoordinateSpace();
}

uint64_t DynamicTypeSize.isAccessibilitySize.getter()
{
  return DynamicTypeSize.isAccessibilitySize.getter();
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t DynamicTypeSize.init(_:)()
{
  return DynamicTypeSize.init(_:)();
}

uint64_t ModifiedContent<>.accessibilityHint<A>(_:)()
{
  return ModifiedContent<>.accessibilityHint<A>(_:)();
}

uint64_t ModifiedContent<>.accessibilityAction(_:_:)()
{
  return ModifiedContent<>.accessibilityAction(_:_:)();
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)()
{
  return ModifiedContent<>.accessibilityAddTraits(_:)();
}

uint64_t ModifiedContent<>.accessibilityInputLabels<A>(_:)()
{
  return ModifiedContent<>.accessibilityInputLabels<A>(_:)();
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(_:)()
{
  return ModifiedContent<>.accessibilityRemoveTraits(_:)();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t NavigationStack.init<>(root:)()
{
  return NavigationStack.init<>(root:)();
}

uint64_t static KeyboardShortcut.cancelAction.getter()
{
  return static KeyboardShortcut.cancelAction.getter();
}

uint64_t static KeyboardShortcut.defaultAction.getter()
{
  return static KeyboardShortcut.defaultAction.getter();
}

uint64_t type metadata accessor for KeyboardShortcut()
{
  return type metadata accessor for KeyboardShortcut();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t ToolbarItemGroup.init(placement:content:)()
{
  return ToolbarItemGroup.init(placement:content:)();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t EnvironmentValues.truncationMode.setter()
{
  return EnvironmentValues.truncationMode.setter();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t EnvironmentValues.colorSchemeContrast.getter()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t EnvironmentValues.writingToolsBehavior.getter()
{
  return EnvironmentValues.writingToolsBehavior.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.menuIndicatorVisibility.getter()
{
  return EnvironmentValues.menuIndicatorVisibility.getter();
}

uint64_t EnvironmentValues.menuIndicatorVisibility.setter()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

uint64_t EnvironmentValues.accessibilityVoiceOverEnabled.getter()
{
  return EnvironmentValues.accessibilityVoiceOverEnabled.getter();
}

uint64_t EnvironmentValues.accessibilitySwitchControlEnabled.getter()
{
  return EnvironmentValues.accessibilitySwitchControlEnabled.getter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.openURL.getter()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t EnvironmentValues.openURL.setter()
{
  return EnvironmentValues.openURL.setter();
}

uint64_t EnvironmentValues.editMode.getter()
{
  return EnvironmentValues.editMode.getter();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return type metadata accessor for NavigationBarItem.TitleDisplayMode();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t static AccessibilityTraits.isSelected.getter()
{
  return static AccessibilityTraits.isSelected.getter();
}

uint64_t static AccessibilityTraits.isButton.getter()
{
  return static AccessibilityTraits.isButton.getter();
}

uint64_t type metadata accessor for AccessibilityTraits()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t static ColorSchemeContrast.== infix(_:_:)()
{
  return static ColorSchemeContrast.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorSchemeContrast()
{
  return type metadata accessor for ColorSchemeContrast();
}

uint64_t static HorizontalAlignment.listRowSeparatorLeading.getter()
{
  return static HorizontalAlignment.listRowSeparatorLeading.getter();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t NavigationSplitView.init<>(columnVisibility:sidebar:detail:)()
{
  return NavigationSplitView.init<>(columnVisibility:sidebar:detail:)();
}

uint64_t SeparatorShapeStyle.init()()
{
  return SeparatorShapeStyle.init()();
}

uint64_t type metadata accessor for SeparatorShapeStyle()
{
  return type metadata accessor for SeparatorShapeStyle();
}

uint64_t static SymbolRenderingMode.monochrome.getter()
{
  return static SymbolRenderingMode.monochrome.getter();
}

uint64_t static SymbolRenderingMode.multicolor.getter()
{
  return static SymbolRenderingMode.multicolor.getter();
}

uint64_t static SymbolRenderingMode.palette.getter()
{
  return static SymbolRenderingMode.palette.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t TupleToolbarContent.init(_:)()
{
  return TupleToolbarContent.init(_:)();
}

uint64_t dispatch thunk of UIHostingController.sizeThatFits(in:)()
{
  return dispatch thunk of UIHostingController.sizeThatFits(in:)();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.setter()
{
  return dispatch thunk of UIHostingController.sizingOptions.setter();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.__allocating_init(rootView:)()
{
  return UIHostingController.__allocating_init(rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t dispatch thunk of UIHostingController.rootView.modify()
{
  return dispatch thunk of UIHostingController.rootView.modify();
}

uint64_t dispatch thunk of UIHostingController.rootView.getter()
{
  return dispatch thunk of UIHostingController.rootView.getter();
}

uint64_t type metadata accessor for UIHostingController()
{
  return type metadata accessor for UIHostingController();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t static ToolbarItemPlacement.topBarLeading.getter()
{
  return static ToolbarItemPlacement.topBarLeading.getter();
}

uint64_t static ToolbarItemPlacement.topBarTrailing.getter()
{
  return static ToolbarItemPlacement.topBarTrailing.getter();
}

uint64_t static ToolbarItemPlacement.cancellationAction.getter()
{
  return static ToolbarItemPlacement.cancellationAction.getter();
}

uint64_t static ToolbarItemPlacement.confirmationAction.getter()
{
  return static ToolbarItemPlacement.confirmationAction.getter();
}

uint64_t static ToolbarItemPlacement.bottomBar.getter()
{
  return static ToolbarItemPlacement.bottomBar.getter();
}

uint64_t type metadata accessor for ToolbarItemPlacement()
{
  return type metadata accessor for ToolbarItemPlacement();
}

uint64_t static WritingToolsBehavior.disabled.getter()
{
  return static WritingToolsBehavior.disabled.getter();
}

uint64_t type metadata accessor for WritingToolsBehavior()
{
  return type metadata accessor for WritingToolsBehavior();
}

uint64_t BorderlessButtonStyle.init()()
{
  return BorderlessButtonStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonStyle()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t type metadata accessor for PinnedScrollableViews()
{
  return type metadata accessor for PinnedScrollableViews();
}

uint64_t static ToolbarContentBuilder.buildBlock<A>(_:)()
{
  return static ToolbarContentBuilder.buildBlock<A>(_:)();
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(first:)()
{
  return static ToolbarContentBuilder.buildEither<A, B>(first:)();
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(second:)()
{
  return static ToolbarContentBuilder.buildEither<A, B>(second:)();
}

uint64_t static ToolbarContentBuilder.buildIf<A>(_:)()
{
  return static ToolbarContentBuilder.buildIf<A>(_:)();
}

uint64_t static ContentMarginPlacement.scrollContent.getter()
{
  return static ContentMarginPlacement.scrollContent.getter();
}

uint64_t type metadata accessor for ContentMarginPlacement()
{
  return type metadata accessor for ContentMarginPlacement();
}

uint64_t ContentUnavailableView.init(label:description:actions:)()
{
  return ContentUnavailableView.init(label:description:actions:)();
}

uint64_t ContentUnavailableView<>.init<A>(_:image:description:)()
{
  return ContentUnavailableView<>.init<A>(_:image:description:)();
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return static HierarchicalShapeStyle.quaternary.getter();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t type metadata accessor for UserInterfaceSizeClass()
{
  return type metadata accessor for UserInterfaceSizeClass();
}

uint64_t static AccessibilityActionKind.default.getter()
{
  return static AccessibilityActionKind.default.getter();
}

uint64_t type metadata accessor for AccessibilityActionKind()
{
  return type metadata accessor for AccessibilityActionKind();
}

uint64_t AccessibilityFocusState.wrappedValue.setter()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t AccessibilityFocusState.projectedValue.getter()
{
  return AccessibilityFocusState.projectedValue.getter();
}

uint64_t AccessibilityFocusState.init<>()()
{
  return AccessibilityFocusState.init<>()();
}

uint64_t type metadata accessor for AccessibilityFocusState()
{
  return type metadata accessor for AccessibilityFocusState();
}

uint64_t type metadata accessor for LabelStyleConfiguration.Icon()
{
  return type metadata accessor for LabelStyleConfiguration.Icon();
}

uint64_t LabelStyleConfiguration.icon.getter()
{
  return LabelStyleConfiguration.icon.getter();
}

uint64_t static ToolbarTitleDisplayMode.inline.getter()
{
  return static ToolbarTitleDisplayMode.inline.getter();
}

uint64_t type metadata accessor for ToolbarTitleDisplayMode()
{
  return type metadata accessor for ToolbarTitleDisplayMode();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t type metadata accessor for AccessibilityTechnologies()
{
  return type metadata accessor for AccessibilityTechnologies();
}

uint64_t BorderlessButtonMenuStyle.init()()
{
  return BorderlessButtonMenuStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonMenuStyle()
{
  return type metadata accessor for BorderlessButtonMenuStyle();
}

uint64_t static AccessibilityChildBehavior.ignore.getter()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t static AccessibilityChildBehavior.combine.getter()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t RoundedBorderTextFieldStyle.init()()
{
  return RoundedBorderTextFieldStyle.init()();
}

uint64_t type metadata accessor for RoundedBorderTextFieldStyle()
{
  return type metadata accessor for RoundedBorderTextFieldStyle();
}

uint64_t BorderedProminentButtonStyle.init()()
{
  return BorderedProminentButtonStyle.init()();
}

uint64_t type metadata accessor for BorderedProminentButtonStyle()
{
  return type metadata accessor for BorderedProminentButtonStyle();
}

uint64_t static NavigationSplitViewVisibility.all.getter()
{
  return static NavigationSplitViewVisibility.all.getter();
}

uint64_t type metadata accessor for NavigationSplitViewVisibility()
{
  return type metadata accessor for NavigationSplitViewVisibility();
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t static UIViewControllerRepresentable._layoutOptions(_:)()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

uint64_t UIViewControllerRepresentable._identifiedViewTree(in:)()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentable<>.makeCoordinator()()
{
  return UIViewControllerRepresentable<>.makeCoordinator()();
}

uint64_t static UIHostingControllerSizingOptions.intrinsicContentSize.getter()
{
  return static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
}

uint64_t type metadata accessor for UIHostingControllerSizingOptions()
{
  return type metadata accessor for UIHostingControllerSizingOptions();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t Axis.Set.init(rawValue:)()
{
  return Axis.Set.init(rawValue:)();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.bold.getter()
{
  return static Font.Weight.bold.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.system(_:design:weight:)()
{
  return static Font.system(_:design:weight:)();
}

uint64_t static Font.title2.getter()
{
  return static Font.title2.getter();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Form.init(content:)()
{
  return Form.init(content:)();
}

uint64_t List.init(selection:content:)()
{
  return List.init(selection:content:)();
}

uint64_t List<>.init(content:)()
{
  return List<>.init(content:)();
}

uint64_t Menu.init(content:label:)()
{
  return Menu.init(content:label:)();
}

uint64_t Text.fontWeight(_:)()
{
  return Text.fontWeight(_:)();
}

uint64_t type metadata accessor for Text.TruncationMode()
{
  return type metadata accessor for Text.TruncationMode();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t static Text.+ infix(_:_:)()
{
  return static Text.+ infix(_:_:)();
}

uint64_t Text.bold()()
{
  return Text.bold()();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.italic()()
{
  return Text.italic()();
}

uint64_t Text.underline(_:color:)()
{
  return Text.underline(_:color:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t View.tipBackground<A>(_:)()
{
  return View.tipBackground<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.background<A>(_:alignment:)()
{
  return View.background<A>(_:alignment:)();
}

uint64_t View.fontWeight(_:)()
{
  return View.fontWeight(_:)();
}

uint64_t View.labelStyle<A>(_:)()
{
  return View.labelStyle<A>(_:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.contextMenu<A>(menuItems:)()
{
  return View.contextMenu<A>(menuItems:)();
}

uint64_t View.submitLabel(_:)()
{
  return View.submitLabel(_:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.contentMargins(_:_:for:)()
{
  return View.contentMargins(_:_:for:)();
}

uint64_t View.textFieldStyle<A>(_:)()
{
  return View.textFieldStyle<A>(_:)();
}

uint64_t View.dynamicTypeSize(_:)()
{
  return View.dynamicTypeSize(_:)();
}

uint64_t View.dynamicTypeSize<A>(_:)()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t View.navigationTitle(_:)()
{
  return View.navigationTitle(_:)();
}

uint64_t View.navigationTitle<A>(_:)()
{
  return View.navigationTitle<A>(_:)();
}

uint64_t View.keyboardShortcut(_:)()
{
  return View.keyboardShortcut(_:)();
}

uint64_t View.defaultAppStorage(_:)()
{
  return View.defaultAppStorage(_:)();
}

uint64_t View.accessibilityLabel<A>(_:)()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t View.navigationBarTitle<A>(_:displayMode:)()
{
  return View.navigationBarTitle<A>(_:displayMode:)();
}

uint64_t View.onPreferenceChange<A>(_:perform:)()
{
  return View.onPreferenceChange<A>(_:perform:)();
}

uint64_t View.accessibilityAction(_:_:)()
{
  return View.accessibilityAction(_:_:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.simultaneousGesture<A>(_:including:)()
{
  return View.simultaneousGesture<A>(_:including:)();
}

uint64_t View.accessibilityActions<A>(_:)()
{
  return View.accessibilityActions<A>(_:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityFocused(_:)()
{
  return View.accessibilityFocused(_:)();
}

uint64_t View.onScrollGeometryChange<A>(for:of:action:)()
{
  return View.onScrollGeometryChange<A>(for:of:action:)();
}

uint64_t View.toolbarTitleDisplayMode(_:)()
{
  return View.toolbarTitleDisplayMode(_:)();
}

uint64_t View.accessibilitySortPriority(_:)()
{
  return View.accessibilitySortPriority(_:)();
}

uint64_t View.navigationBarTitleDisplayMode(_:)()
{
  return View.navigationBarTitleDisplayMode(_:)();
}

uint64_t View.accessibilityShowsLargeContentViewer()()
{
  return View.accessibilityShowsLargeContentViewer()();
}

uint64_t View.bold(_:)()
{
  return View.bold(_:)();
}

uint64_t View.focused(_:)()
{
  return View.focused(_:)();
}

uint64_t View.toolbar<A>(content:)()
{
  return View.toolbar<A>(content:)();
}

uint64_t View.modifier<A>(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t View.menuStyle<A>(_:)()
{
  return View.menuStyle<A>(_:)();
}

uint64_t Color.init(cgColor:)()
{
  return Color.init(cgColor:)();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t static Color.accentColor.getter()
{
  return static Color.accentColor.getter();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:white:opacity:)()
{
  return Color.init(_:white:opacity:)();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t Image.init(_:bundle:)()
{
  return Image.init(_:bundle:)();
}

uint64_t Label.init(title:icon:)()
{
  return Label.init(title:icon:)();
}

uint64_t Label<>.init(_:systemImage:)()
{
  return Label<>.init(_:systemImage:)();
}

uint64_t Label<>.init<A>(_:image:)()
{
  return Label<>.init<A>(_:image:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t Button.init(role:action:label:)()
{
  return Button.init(role:action:label:)();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for HStack()
{
  return type metadata accessor for HStack();
}

uint64_t Toggle.init(isOn:label:)()
{
  return Toggle.init(isOn:label:)();
}

uint64_t Toggle<>.init<A>(_:isOn:)()
{
  return Toggle<>.init<A>(_:isOn:)();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for VStack()
{
  return type metadata accessor for VStack();
}

uint64_t ZStack.init(alignment:content:)()
{
  return ZStack.init(alignment:content:)();
}

uint64_t type metadata accessor for ZStack()
{
  return type metadata accessor for ZStack();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

{
  return ForEach<>.init(_:content:)();
}

uint64_t Gesture.onEnded(_:)()
{
  return Gesture.onEnded(_:)();
}

uint64_t Section<>.init<A>(_:content:)()
{
  return Section<>.init<A>(_:content:)();
}

uint64_t Section<>.init(header:content:)()
{
  return Section<>.init(header:content:)();
}

uint64_t Section<>.init(content:)()
{
  return Section<>.init(content:)();
}

uint64_t Section<>.init(footer:content:)()
{
  return Section<>.init(footer:content:)();
}

uint64_t EditMode.isEditing.getter()
{
  return EditMode.isEditing.getter();
}

uint64_t type metadata accessor for EditMode()
{
  return type metadata accessor for EditMode();
}

uint64_t type metadata accessor for GridItem.Size()
{
  return type metadata accessor for GridItem.Size();
}

uint64_t type metadata accessor for GridItem()
{
  return type metadata accessor for GridItem();
}

uint64_t GridItem.init(_:spacing:alignment:)()
{
  return GridItem.init(_:spacing:alignment:)();
}

uint64_t static Material.thin.getter()
{
  return static Material.thin.getter();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.topLeading.getter()
{
  return static Alignment.topLeading.getter();
}

uint64_t static Alignment.topTrailing.getter()
{
  return static Alignment.topTrailing.getter();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Alignment.trailing.getter()
{
  return static Alignment.trailing.getter();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)()
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
}

uint64_t TextField<>.init(_:text:onEditingChanged:onCommit:)()
{
  return TextField<>.init(_:text:onEditingChanged:onCommit:)();
}

uint64_t TextField<>.init<A>(_:text:onEditingChanged:onCommit:)()
{
  return TextField<>.init<A>(_:text:onEditingChanged:onCommit:)();
}

uint64_t CKSyncEngine.SyncReason.description.getter()
{
  return CKSyncEngine.SyncReason.description.getter();
}

uint64_t type metadata accessor for CKSyncEngine.SyncReason()
{
  return type metadata accessor for CKSyncEngine.SyncReason();
}

uint64_t CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)()
{
  return CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
}

uint64_t type metadata accessor for CKSyncEngine.Configuration()
{
  return type metadata accessor for CKSyncEngine.Configuration();
}

uint64_t CKSyncEngine.SendChangesContext.reason.getter()
{
  return CKSyncEngine.SendChangesContext.reason.getter();
}

uint64_t CKSyncEngine.SendChangesContext.options.getter()
{
  return CKSyncEngine.SendChangesContext.options.getter();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesContext()
{
  return type metadata accessor for CKSyncEngine.SendChangesContext();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions.Scope();
}

uint64_t CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)()
{
  return CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions();
}

uint64_t CKSyncEngine.FetchChangesContext.reason.getter()
{
  return CKSyncEngine.FetchChangesContext.reason.getter();
}

uint64_t CKSyncEngine.FetchChangesContext.options.getter()
{
  return CKSyncEngine.FetchChangesContext.options.getter();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesContext()
{
  return type metadata accessor for CKSyncEngine.FetchChangesContext();
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.setter()
{
  return CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.setter();
}

uint64_t CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.setter()
{
  return CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.setter();
}

uint64_t CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.modify()
{
  return CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.modify();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope();
}

uint64_t CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)()
{
  return CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions();
}

uint64_t type metadata accessor for CKSyncEngine.PendingDatabaseChange()
{
  return type metadata accessor for CKSyncEngine.PendingDatabaseChange();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(recordsToSave:recordIDsToDelete:atomicByZone:)()
{
  return CKSyncEngine.RecordZoneChangeBatch.init(recordsToSave:recordIDsToDelete:atomicByZone:)();
}

uint64_t type metadata accessor for CKSyncEngine.RecordZoneChangeBatch()
{
  return type metadata accessor for CKSyncEngine.RecordZoneChangeBatch();
}

uint64_t CKSyncEngine.Event.StateUpdate.stateSerialization.getter()
{
  return CKSyncEngine.Event.StateUpdate.stateSerialization.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.StateUpdate()
{
  return type metadata accessor for CKSyncEngine.Event.StateUpdate();
}

uint64_t type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType()
{
  return type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType();
}

uint64_t CKSyncEngine.Event.AccountChange.changeType.getter()
{
  return CKSyncEngine.Event.AccountChange.changeType.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.AccountChange()
{
  return type metadata accessor for CKSyncEngine.Event.AccountChange();
}

uint64_t CKSyncEngine.Event.DidSendChanges.context.getter()
{
  return CKSyncEngine.Event.DidSendChanges.context.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.DidSendChanges()
{
  return type metadata accessor for CKSyncEngine.Event.DidSendChanges();
}

uint64_t CKSyncEngine.Event.WillSendChanges.context.getter()
{
  return CKSyncEngine.Event.WillSendChanges.context.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.WillSendChanges()
{
  return type metadata accessor for CKSyncEngine.Event.WillSendChanges();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.zone.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.zone.getter();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.error.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.error.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave()
{
  return type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.deletedZoneIDs.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.deletedZoneIDs.getter();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.failedZoneSaves.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.failedZoneSaves.getter();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.failedZoneDeletes.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.failedZoneDeletes.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.FetchedDatabaseChanges.modifications.getter()
{
  return CKSyncEngine.Event.FetchedDatabaseChanges.modifications.getter();
}

uint64_t CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.DidFetchRecordZoneChanges.error.getter()
{
  return CKSyncEngine.Event.DidFetchRecordZoneChanges.error.getter();
}

uint64_t CKSyncEngine.Event.DidFetchRecordZoneChanges.zoneID.getter()
{
  return CKSyncEngine.Event.DidFetchRecordZoneChanges.zoneID.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.WillFetchRecordZoneChanges.zoneID.getter()
{
  return CKSyncEngine.Event.WillFetchRecordZoneChanges.zoneID.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges();
}

uint64_t type metadata accessor for CKSyncEngine.Event()
{
  return type metadata accessor for CKSyncEngine.Event();
}

uint64_t CKSyncEngine.State.Serialization.init(deprecatedData:)()
{
  return CKSyncEngine.State.Serialization.init(deprecatedData:)();
}

uint64_t type metadata accessor for CKSyncEngine.State.Serialization()
{
  return type metadata accessor for CKSyncEngine.State.Serialization();
}

uint64_t CKSyncEngine.State.pendingDatabaseChanges.getter()
{
  return CKSyncEngine.State.pendingDatabaseChanges.getter();
}

uint64_t CKSyncEngine.State.pendingRecordZoneChanges.getter()
{
  return CKSyncEngine.State.pendingRecordZoneChanges.getter();
}

uint64_t CKSyncEngine.State.hasPendingUntrackedChanges.modify()
{
  return CKSyncEngine.State.hasPendingUntrackedChanges.modify();
}

uint64_t CKSyncEngine.State.hasPendingUntrackedChanges.getter()
{
  return CKSyncEngine.State.hasPendingUntrackedChanges.getter();
}

uint64_t CKSyncEngine.State.hasPendingUntrackedChanges.setter()
{
  return CKSyncEngine.State.hasPendingUntrackedChanges.setter();
}

uint64_t CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter()
{
  return CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
}

uint64_t CKSyncEngine.state.getter()
{
  return CKSyncEngine.state.getter();
}

uint64_t CKSyncEngine.database.getter()
{
  return CKSyncEngine.database.getter();
}

uint64_t type metadata accessor for CKSyncEngine()
{
  return type metadata accessor for CKSyncEngine();
}

uint64_t CKSyncEngine.init(_:)()
{
  return CKSyncEngine.init(_:)();
}

uint64_t static CKShareTransferRepresentation.ExportedShare.prepareShare(container:allowedSharingOptions:preparationHandler:)()
{
  return static CKShareTransferRepresentation.ExportedShare.prepareShare(container:allowedSharingOptions:preparationHandler:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchWorkItemFlags.assignCurrentContext.getter()
{
  return static DispatchWorkItemFlags.assignCurrentContext.getter();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.utility.getter()
{
  return static DispatchQoS.utility.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t DispatchData._bridgeToObjectiveC()()
{
  return DispatchData._bridgeToObjectiveC()();
}

uint64_t static DispatchData._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DispatchData._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DispatchData.count.getter()
{
  return DispatchData.count.getter();
}

uint64_t static DispatchData.empty.getter()
{
  return static DispatchData.empty.getter();
}

uint64_t DispatchData.append(_:)()
{
  return DispatchData.append(_:)();
}

uint64_t type metadata accessor for DispatchData()
{
  return type metadata accessor for DispatchData();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t DispatchTime.advanced(by:)()
{
  return DispatchTime.advanced(by:)();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t dispatch thunk of DispatchWorkItem.isCancelled.getter()
{
  return dispatch thunk of DispatchWorkItem.isCancelled.getter();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t static PHPickerFilter.images.getter()
{
  return static PHPickerFilter.images.getter();
}

uint64_t type metadata accessor for PHPickerFilter()
{
  return type metadata accessor for PHPickerFilter();
}

uint64_t PHPickerResult.itemProvider.getter()
{
  return PHPickerResult.itemProvider.getter();
}

uint64_t type metadata accessor for PHPickerResult()
{
  return type metadata accessor for PHPickerResult();
}

uint64_t PHPickerConfiguration.selectionLimit.setter()
{
  return PHPickerConfiguration.selectionLimit.setter();
}

uint64_t type metadata accessor for PHPickerConfiguration.AssetRepresentationMode()
{
  return type metadata accessor for PHPickerConfiguration.AssetRepresentationMode();
}

uint64_t PHPickerConfiguration.preferredAssetRepresentationMode.setter()
{
  return PHPickerConfiguration.preferredAssetRepresentationMode.setter();
}

uint64_t PHPickerConfiguration.filter.setter()
{
  return PHPickerConfiguration.filter.setter();
}

uint64_t PHPickerConfiguration.init()()
{
  return PHPickerConfiguration.init()();
}

uint64_t type metadata accessor for PHPickerConfiguration()
{
  return type metadata accessor for PHPickerConfiguration();
}

uint64_t Storefront.id.getter()
{
  return Storefront.id.getter();
}

uint64_t type metadata accessor for Storefront()
{
  return type metadata accessor for Storefront();
}

uint64_t dispatch thunk of CalculateExpression.PlainExpression.tokens.getter()
{
  return dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
}

uint64_t CalculateExpression.expression.getter()
{
  return CalculateExpression.expression.getter();
}

uint64_t CalculateExpression.expression.setter()
{
  return CalculateExpression.expression.setter();
}

uint64_t CalculateExpression.isEvaluating.getter()
{
  return CalculateExpression.isEvaluating.getter();
}

uint64_t CalculateExpression.needsEvaluation.getter()
{
  return CalculateExpression.needsEvaluation.getter();
}

Swift::Void __swiftcall CalculateExpression.setNeedsEvaluation(rebuild:)(Swift::Bool rebuild)
{
}

uint64_t CalculateExpression.id.getter()
{
  return CalculateExpression.id.getter();
}

uint64_t CalculateExpression.accessibilityMathEquationDescription.getter()
{
  return CalculateExpression.accessibilityMathEquationDescription.getter();
}

uint64_t type metadata accessor for CalculateExpression.Base()
{
  return type metadata accessor for CalculateExpression.Base();
}

uint64_t dispatch thunk of CalculateExpression.Token.text.getter()
{
  return dispatch thunk of CalculateExpression.Token.text.getter();
}

uint64_t CalculateExpression.Token.type.getter()
{
  return CalculateExpression.Token.type.getter();
}

uint64_t dispatch thunk of CalculateExpression.Token.errors.getter()
{
  return dispatch thunk of CalculateExpression.Token.errors.getter();
}

uint64_t CalculateExpression.error.getter()
{
  return CalculateExpression.error.getter();
}

uint64_t CalculateExpression.plain.getter()
{
  return CalculateExpression.plain.getter();
}

uint64_t CalculateExpression.result.getter()
{
  return CalculateExpression.result.getter();
}

uint64_t type metadata accessor for CalculateExpression.TokenType()
{
  return type metadata accessor for CalculateExpression.TokenType();
}

uint64_t type metadata accessor for CalculateExpression()
{
  return type metadata accessor for CalculateExpression();
}

uint64_t CalculateExpression.init(_:options:base:id:)()
{
  return CalculateExpression.init(_:options:base:id:)();
}

uint64_t CalculateDocument.init(expressions:options:synchronous:)()
{
  return CalculateDocument.init(expressions:options:synchronous:)();
}

uint64_t dispatch thunk of CalculateDocument.expressions.getter()
{
  return dispatch thunk of CalculateDocument.expressions.getter();
}

uint64_t dispatch thunk of CalculateDocument.expressions.setter()
{
  return dispatch thunk of CalculateDocument.expressions.setter();
}

uint64_t dispatch thunk of CalculateDocument.declaredSymbols.getter()
{
  return dispatch thunk of CalculateDocument.declaredSymbols.getter();
}

uint64_t type metadata accessor for CalculateDocument()
{
  return type metadata accessor for CalculateDocument();
}

uint64_t StocksKitCurrencyCache.Provider.logo.getter()
{
  return StocksKitCurrencyCache.Provider.logo.getter();
}

uint64_t StocksKitCurrencyCache.Provider.name.getter()
{
  return StocksKitCurrencyCache.Provider.name.getter();
}

uint64_t type metadata accessor for StocksKitCurrencyCache.Provider()
{
  return type metadata accessor for StocksKitCurrencyCache.Provider();
}

uint64_t static StocksKitCurrencyCache.shared.getter()
{
  return static StocksKitCurrencyCache.shared.getter();
}

uint64_t type metadata accessor for StocksKitCurrencyCache()
{
  return type metadata accessor for StocksKitCurrencyCache();
}

uint64_t type metadata accessor for AnyCRValue()
{
  return type metadata accessor for AnyCRValue();
}

uint64_t CRRegister.init(wrappedValue:)()
{
  return CRRegister.init(wrappedValue:)();
}

uint64_t CRRegister.wrappedValue.modify()
{
  return CRRegister.wrappedValue.modify();
}

uint64_t CRRegister.wrappedValue.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t CRRegister.wrappedValue.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t type metadata accessor for CRRegister.MutatingAction()
{
  return type metadata accessor for CRRegister.MutatingAction();
}

uint64_t type metadata accessor for CRRegister()
{
  return type metadata accessor for CRRegister();
}

uint64_t CRRegister.init(_:)()
{
  return CRRegister.init(_:)();
}

uint64_t CRStruct_1.actionUndoingDifference(from:)()
{
  return CRStruct_1.actionUndoingDifference(from:)();
}

Swift::Bool __swiftcall CRStruct_1.needToFinalizeTimestamps()()
{
  return CRStruct_1.needToFinalizeTimestamps()();
}

uint64_t CRStruct_1.init(from:)()
{
  return CRStruct_1.init(from:)();
}

uint64_t CRStruct_1.apply(_:)()
{
  return CRStruct_1.apply(_:)();
}

uint64_t CRStruct_1.delta(_:from:)()
{
  return CRStruct_1.delta(_:from:)();
}

uint64_t CRStruct_1.merge(delta:)()
{
  return CRStruct_1.merge(delta:)();
}

uint64_t CRStruct_1.merge(_:)()
{
  return CRStruct_1.merge(_:)();
}

uint64_t CRStruct_1.encode(to:)()
{
  return CRStruct_1.encode(to:)();
}

uint64_t CRStruct_1.hasDelta(from:)()
{
  return CRStruct_1.hasDelta(from:)();
}

Swift::Bool __swiftcall CRStruct_2.needToFinalizeTimestamps()()
{
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t CRStruct_2.init(from:)()
{
  return CRStruct_2.init(from:)();
}

uint64_t CRStruct_2.encode(to:)()
{
  return CRStruct_2.encode(to:)();
}

uint64_t CRStruct_3.actionUndoingDifference(from:)()
{
  return CRStruct_3.actionUndoingDifference(from:)();
}

Swift::Bool __swiftcall CRStruct_3.needToFinalizeTimestamps()()
{
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t CRStruct_3.init(from:)()
{
  return CRStruct_3.init(from:)();
}

uint64_t CRStruct_3.apply(_:)()
{
  return CRStruct_3.apply(_:)();
}

uint64_t CRStruct_3.delta(_:from:)()
{
  return CRStruct_3.delta(_:from:)();
}

uint64_t CRStruct_3.merge(delta:)()
{
  return CRStruct_3.merge(delta:)();
}

uint64_t CRStruct_3.merge(_:)()
{
  return CRStruct_3.merge(_:)();
}

uint64_t CRStruct_3.encode(to:)()
{
  return CRStruct_3.encode(to:)();
}

uint64_t CRStruct_3.hasDelta(from:)()
{
  return CRStruct_3.hasDelta(from:)();
}

uint64_t CRStruct_4.actionUndoingDifference(from:)()
{
  return CRStruct_4.actionUndoingDifference(from:)();
}

Swift::Bool __swiftcall CRStruct_4.needToFinalizeTimestamps()()
{
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t CRStruct_4.init(from:)()
{
  return CRStruct_4.init(from:)();
}

uint64_t CRStruct_4.apply(_:)()
{
  return CRStruct_4.apply(_:)();
}

uint64_t CRStruct_4.delta(_:from:)()
{
  return CRStruct_4.delta(_:from:)();
}

uint64_t CRStruct_4.merge(delta:)()
{
  return CRStruct_4.merge(delta:)();
}

uint64_t CRStruct_4.merge(_:)()
{
  return CRStruct_4.merge(_:)();
}

uint64_t CRStruct_4.encode(to:)()
{
  return CRStruct_4.encode(to:)();
}

uint64_t CRStruct_4.hasDelta(from:)()
{
  return CRStruct_4.hasDelta(from:)();
}

Swift::Bool __swiftcall CRStruct_5.needToFinalizeTimestamps()()
{
  return CRStruct_5.needToFinalizeTimestamps()();
}

uint64_t CRStruct_5.init(from:)()
{
  return CRStruct_5.init(from:)();
}

uint64_t CRStruct_5.merge(_:)()
{
  return CRStruct_5.merge(_:)();
}

uint64_t CRStruct_5.encode(to:)()
{
  return CRStruct_5.encode(to:)();
}

uint64_t CRStruct_5.hasDelta(from:)()
{
  return CRStruct_5.hasDelta(from:)();
}

uint64_t CRStruct_6.actionUndoingDifference(from:)()
{
  return CRStruct_6.actionUndoingDifference(from:)();
}

Swift::Bool __swiftcall CRStruct_6.needToFinalizeTimestamps()()
{
  return CRStruct_6.needToFinalizeTimestamps()();
}

uint64_t CRStruct_6.init(from:)()
{
  return CRStruct_6.init(from:)();
}

uint64_t CRStruct_6.apply(_:)()
{
  return CRStruct_6.apply(_:)();
}

uint64_t CRStruct_6.delta(_:from:)()
{
  return CRStruct_6.delta(_:from:)();
}

uint64_t CRStruct_6.merge(delta:)()
{
  return CRStruct_6.merge(delta:)();
}

uint64_t CRStruct_6.merge(_:)()
{
  return CRStruct_6.merge(_:)();
}

uint64_t CRStruct_6.encode(to:)()
{
  return CRStruct_6.encode(to:)();
}

uint64_t CRStruct_6.hasDelta(from:)()
{
  return CRStruct_6.hasDelta(from:)();
}

uint64_t dispatch thunk of CRMergeable.serializedData(_:version:)()
{
  return dispatch thunk of CRMergeable.serializedData(_:version:)();
}

uint64_t dispatch thunk of CRMergeable.merge(_:)()
{
  return dispatch thunk of CRMergeable.merge(_:)();
}

uint64_t CursorRange.init(lowerBound:upperBound:)()
{
  return CursorRange.init(lowerBound:upperBound:)();
}

uint64_t type metadata accessor for CursorRange()
{
  return type metadata accessor for CursorRange();
}

uint64_t PartialCRDT.init(serializedData:)()
{
  return PartialCRDT.init(serializedData:)();
}

uint64_t PartialCRDT.deltaSerializedData(_:version:)()
{
  return PartialCRDT.deltaSerializedData(_:version:)();
}

uint64_t CRDictionary.removeValue(forKey:)()
{
  return CRDictionary.removeValue(forKey:)();
}

uint64_t CRDictionary.makeIterator()()
{
  return CRDictionary.makeIterator()();
}

uint64_t static CRDictionary.== infix(_:_:)()
{
  return static CRDictionary.== infix(_:_:)();
}

uint64_t CRDictionary.count.getter()
{
  return CRDictionary.count.getter();
}

uint64_t CRDictionary.Iterator.next()()
{
  return CRDictionary.Iterator.next()();
}

uint64_t CRDictionary.init()()
{
  return CRDictionary.init()();
}

uint64_t type metadata accessor for CRDictionary()
{
  return type metadata accessor for CRDictionary();
}

uint64_t CRDictionary.subscript.getter()
{
  return CRDictionary.subscript.getter();
}

uint64_t CRDictionary.subscript.setter()
{
  return CRDictionary.subscript.setter();
}

uint64_t static CRExtensible.== infix(_:_:)()
{
  return static CRExtensible.== infix(_:_:)();
}

uint64_t CRExtensible.hash(into:)()
{
  return CRExtensible.hash(into:)();
}

uint64_t CRExtensible.rawValue.getter()
{
  return CRExtensible.rawValue.getter();
}

uint64_t CROrderedSet.makeIterator()()
{
  return CROrderedSet.makeIterator()();
}

uint64_t CROrderedSet.ObservableDifference.moved.getter()
{
  return CROrderedSet.ObservableDifference.moved.getter();
}

uint64_t static CROrderedSet.== infix(_:_:)()
{
  return static CROrderedSet.== infix(_:_:)();
}

uint64_t CROrderedSet.map<A>(_:)()
{
  return CROrderedSet.map<A>(_:)();
}

Swift::Void __swiftcall CROrderedSet.move(from:to:)(Swift::Int from, Swift::Int to)
{
}

uint64_t CROrderedSet.count.getter()
{
  return CROrderedSet.count.getter();
}

uint64_t CROrderedSet.index(where:)()
{
  return CROrderedSet.index(where:)();
}

uint64_t CROrderedSet.append<A>(contentsOf:)()
{
  return CROrderedSet.append<A>(contentsOf:)();
}

uint64_t CROrderedSet.append(_:)()
{
  return CROrderedSet.append(_:)();
}

uint64_t CROrderedSet.insert<A>(contentsOf:at:)()
{
  return CROrderedSet.insert<A>(contentsOf:at:)();
}

uint64_t CROrderedSet.insert(_:at:)()
{
  return CROrderedSet.insert(_:at:)();
}

Swift::Void __swiftcall CROrderedSet.remove(at:)(Swift::Int at)
{
}

uint64_t CROrderedSet.remove(_:)()
{
  return CROrderedSet.remove(_:)();
}

uint64_t CROrderedSet.Iterator.next()()
{
  return CROrderedSet.Iterator.next()();
}

uint64_t CROrderedSet.contains(_:)()
{
  return CROrderedSet.contains(_:)();
}

uint64_t CROrderedSet.removeAll(where:)()
{
  return CROrderedSet.removeAll(where:)();
}

Swift::Void __swiftcall CROrderedSet.removeAll()()
{
}

uint64_t CROrderedSet.init()()
{
  return CROrderedSet.init()();
}

uint64_t type metadata accessor for CROrderedSet()
{
  return type metadata accessor for CROrderedSet();
}

uint64_t CROrderedSet.init<A>(_:)()
{
  return CROrderedSet.init<A>(_:)();
}

uint64_t CRMaxRegister.init(wrappedValue:)()
{
  return CRMaxRegister.init(wrappedValue:)();
}

uint64_t CRMaxRegister.wrappedValue.getter()
{
  return CRMaxRegister.wrappedValue.getter();
}

uint64_t CRMaxRegister.wrappedValue.setter()
{
  return CRMaxRegister.wrappedValue.setter();
}

uint64_t type metadata accessor for CRMaxRegister()
{
  return type metadata accessor for CRMaxRegister();
}

Swift::Void __swiftcall CRStruct_Base.willEncode()()
{
}

Swift::Void __swiftcall CRStruct_Base.didMerge()()
{
}

uint64_t CRValueStruct.init(from:)()
{
  return CRValueStruct.init(from:)();
}

uint64_t CRValueStruct.encode(to:)()
{
  return CRValueStruct.encode(to:)();
}

uint64_t type metadata accessor for CRCodableVersion()
{
  return type metadata accessor for CRCodableVersion();
}

uint64_t CRAttributedString.attributedString.getter()
{
  return CRAttributedString.attributedString.getter();
}

uint64_t CRAttributedString.Attributes.subscript.getter()
{
  return CRAttributedString.Attributes.subscript.getter();
}

uint64_t CRAttributedString.Attributes.subscript.setter()
{
  return CRAttributedString.Attributes.subscript.setter();
}

uint64_t static CRAttributedString.Attributes.== infix(_:_:)()
{
  return static CRAttributedString.Attributes.== infix(_:_:)();
}

uint64_t CRAttributedString.Attributes.init()()
{
  return CRAttributedString.Attributes.init()();
}

uint64_t CRAttributedString.attributes(at:effectiveRange:)()
{
  return CRAttributedString.attributes(at:effectiveRange:)();
}

uint64_t CRAttributedString.addAttributes(_:range:)()
{
  return CRAttributedString.addAttributes(_:range:)();
}

uint64_t CRAttributedString.setAttributes(_:range:)()
{
  return CRAttributedString.setAttributes(_:range:)();
}

uint64_t CRAttributedString.replaceSubrange(_:with:)()
{
  return CRAttributedString.replaceSubrange(_:with:)();
}

uint64_t CRAttributedString.ObservableDifference.edits.getter()
{
  return CRAttributedString.ObservableDifference.edits.getter();
}

uint64_t CRAttributedString.Runs.Run.attributes.getter()
{
  return CRAttributedString.Runs.Run.attributes.getter();
}

uint64_t CRAttributedString.Runs.Run.subscript.getter()
{
  return CRAttributedString.Runs.Run.subscript.getter();
}

uint64_t CRAttributedString.Runs.Run.range.getter()
{
  return CRAttributedString.Runs.Run.range.getter();
}

uint64_t CRAttributedString.Runs.next()()
{
  return CRAttributedString.Runs.next()();
}

uint64_t CRAttributedString.runs.getter()
{
  return CRAttributedString.runs.getter();
}

uint64_t CRAttributedString.count.getter()
{
  return CRAttributedString.count.getter();
}

uint64_t CRAttributedString.index(of:)()
{
  return CRAttributedString.index(of:)();
}

uint64_t CRAttributedString.range(of:)()
{
  return CRAttributedString.range(of:)();
}

uint64_t static CRAttributedString.Cursor.== infix(_:_:)()
{
  return static CRAttributedString.Cursor.== infix(_:_:)();
}

uint64_t type metadata accessor for CRAttributedString.Cursor()
{
  return type metadata accessor for CRAttributedString.Cursor();
}

uint64_t CRAttributedString.cursor(at:affinity:)()
{
  return CRAttributedString.cursor(at:affinity:)();
}

uint64_t CRAttributedString.cursor(range:)()
{
  return CRAttributedString.cursor(range:)();
}

uint64_t CRAttributedString.Substring.attributedString.getter()
{
  return CRAttributedString.Substring.attributedString.getter();
}

uint64_t CRAttributedString.Substring.subscript.getter()
{
  return CRAttributedString.Substring.subscript.getter();
}

uint64_t CRAttributedString.Substring.runs.getter()
{
  return CRAttributedString.Substring.runs.getter();
}

uint64_t CRAttributedString.init()()
{
  return CRAttributedString.init()();
}

uint64_t CRAttributedString.subscript.getter()
{
  return CRAttributedString.subscript.getter();
}

uint64_t CRAttributedString.init(_:)()
{
  return CRAttributedString.init(_:)();
}

{
  return CRAttributedString.init(_:)();
}

{
  return CRAttributedString.init(_:)();
}

uint64_t static CRAttributeStringKey.loadAttribute(from:)()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t type metadata accessor for CRStructMergeableDelta_6()
{
  return type metadata accessor for CRStructMergeableDelta_6();
}

uint64_t type metadata accessor for CRValueObservableDifference()
{
  return type metadata accessor for CRValueObservableDifference();
}

uint64_t type metadata accessor for Ref()
{
  return type metadata accessor for Ref();
}

uint64_t Ref.init<A>(_:_:identity:)()
{
  return Ref.init<A>(_:_:identity:)();
}

uint64_t Ref.subscript.getter()
{
  return Ref.subscript.getter();
}

uint64_t dispatch thunk of CRDT.delta(_:from:)()
{
  return dispatch thunk of CRDT.delta(_:from:)();
}

uint64_t dispatch thunk of CRDT.merge(delta:)()
{
  return dispatch thunk of CRDT.merge(delta:)();
}

uint64_t dispatch thunk of CRDT.hasDelta(from:)()
{
  return dispatch thunk of CRDT.hasDelta(from:)();
}

uint64_t CRDT.serializedData(_:version:)()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t CRDT.init(serializedData:)()
{
  return CRDT.init(serializedData:)();
}

uint64_t dispatch thunk of CRType.copy(renamingReferences:)()
{
  return dispatch thunk of CRType.copy(renamingReferences:)();
}

uint64_t static CRType.canContainAssets.getter()
{
  return static CRType.canContainAssets.getter();
}

uint64_t CRType.observableDifference(from:)()
{
  return CRType.observableDifference(from:)();
}

uint64_t CRType.copy(renamingReferences:)()
{
  return CRType.copy(renamingReferences:)();
}

uint64_t CRType.copy()()
{
  return CRType.copy()();
}

uint64_t CRValue.serializedData(_:version:)()
{
  return CRValue.serializedData(_:version:)();
}

uint64_t CRValue.init(serializedData:)()
{
  return CRValue.init(serializedData:)();
}

uint64_t CRValue<>.init(from:)()
{
  return CRValue<>.init(from:)();
}

uint64_t CRValue<>.encode(to:)()
{
  return CRValue<>.encode(to:)();
}

uint64_t Capsule.Ref<>.root.modify()
{
  return Capsule.Ref<>.root.modify();
}

uint64_t Capsule.copy()()
{
  return Capsule.copy()();
}

uint64_t Capsule.merge<A>(_:)()
{
  return Capsule.merge<A>(_:)();
}

uint64_t Capsule.mutate<A>(_:)()
{
  return Capsule.mutate<A>(_:)();
}

uint64_t Capsule.hasDelta(from:)()
{
  return Capsule.hasDelta(from:)();
}

uint64_t Capsule<>.subscript.getter()
{
  return Capsule<>.subscript.getter();
}

uint64_t Capsule<>.init(serializedData:allowedAppFormats:)()
{
  return Capsule<>.init(serializedData:allowedAppFormats:)();
}

uint64_t Capsule<>.serializedData(_:version:allowedAppFormats:)()
{
  return Capsule<>.serializedData(_:version:allowedAppFormats:)();
}

uint64_t Capsule<>.root.getter()
{
  return Capsule<>.root.getter();
}

uint64_t Capsule<>.init(_:id:)()
{
  return Capsule<>.init(_:id:)();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t CRCodable.hasEncodedData.getter()
{
  return CRCodable.hasEncodedData.getter();
}

uint64_t CRCodable.minEncodingVersion.getter()
{
  return CRCodable.minEncodingVersion.getter();
}

uint64_t CRCodable.minAppFormatVersion.getter()
{
  return CRCodable.minAppFormatVersion.getter();
}

uint64_t static CRContext.newTransientContext(uniqueAssetManager:encryptionDelegate:)()
{
  return static CRContext.newTransientContext(uniqueAssetManager:encryptionDelegate:)();
}

uint64_t type metadata accessor for CRContext()
{
  return type metadata accessor for CRContext();
}

uint64_t dispatch thunk of CRDecoder.valueContainer()()
{
  return dispatch thunk of CRDecoder.valueContainer()();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decode(_:)()
{
  return dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
}

{
  return dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
}

uint64_t dispatch thunk of CREncoder.valueContainer()()
{
  return dispatch thunk of CREncoder.valueContainer()();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encode(_:)()
{
  return dispatch thunk of CREncoder.CRValueContainer.encode(_:)();
}

{
  return dispatch thunk of CREncoder.CRValueContainer.encode(_:)();
}

uint64_t type metadata accessor for CRKeyPath()
{
  return type metadata accessor for CRKeyPath();
}

uint64_t CRKeyPath.init(_:)()
{
  return CRKeyPath.init(_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)()
{
  return SHA256Digest.withUnsafeBytes<A>(_:)();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t type metadata accessor for PKLassoTool()
{
  return type metadata accessor for PKLassoTool();
}

uint64_t PKCustomTool.init(customIdentifier:configuration:color:weight:)()
{
  return PKCustomTool.init(customIdentifier:configuration:color:weight:)();
}

uint64_t PKCustomTool.customIdentifier.getter()
{
  return PKCustomTool.customIdentifier.getter();
}

uint64_t PKCustomTool.color.getter()
{
  return PKCustomTool.color.getter();
}

uint64_t PKCustomTool.weight.getter()
{
  return PKCustomTool.weight.getter();
}

uint64_t type metadata accessor for PKCustomTool()
{
  return type metadata accessor for PKCustomTool();
}

uint64_t static PKEraserTool.EraserType.== infix(_:_:)()
{
  return static PKEraserTool.EraserType.== infix(_:_:)();
}

uint64_t type metadata accessor for PKEraserTool.EraserType()
{
  return type metadata accessor for PKEraserTool.EraserType();
}

uint64_t PKEraserTool.eraserType.getter()
{
  return PKEraserTool.eraserType.getter();
}

uint64_t PKEraserTool.width.getter()
{
  return PKEraserTool.width.getter();
}

uint64_t type metadata accessor for PKEraserTool()
{
  return type metadata accessor for PKEraserTool();
}

uint64_t PKEraserTool.init(_:width:)()
{
  return PKEraserTool.init(_:width:)();
}

uint64_t PKEraserTool.init(_:)()
{
  return PKEraserTool.init(_:)();
}

uint64_t PKInkingTool.color.getter()
{
  return PKInkingTool.color.getter();
}

uint64_t PKInkingTool.InkType.init(rawValue:)()
{
  return PKInkingTool.InkType.init(rawValue:)();
}

uint64_t type metadata accessor for PKInkingTool.InkType()
{
  return type metadata accessor for PKInkingTool.InkType();
}

uint64_t PKInkingTool.inkType.getter()
{
  return PKInkingTool.inkType.getter();
}

uint64_t type metadata accessor for PKInkingTool()
{
  return type metadata accessor for PKInkingTool();
}

uint64_t type metadata accessor for PKHandwritingTool()
{
  return type metadata accessor for PKHandwritingTool();
}

PKStroke __swiftcall PKStroke._bridgeToObjectiveC()()
{
  return (PKStroke)PKStroke._bridgeToObjectiveC()();
}

uint64_t static PKStroke._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for PKStroke()
{
  return type metadata accessor for PKStroke();
}

uint64_t PKDrawing.dataRepresentation()()
{
  return PKDrawing.dataRepresentation()();
}

PKDrawing __swiftcall PKDrawing._bridgeToObjectiveC()()
{
  return (PKDrawing)PKDrawing._bridgeToObjectiveC()();
}

uint64_t static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t PKDrawing.init<A>(strokes:)()
{
  return PKDrawing.init<A>(strokes:)();
}

uint64_t type metadata accessor for PKDrawing()
{
  return type metadata accessor for PKDrawing();
}

uint64_t CancellationError.init()()
{
  return CancellationError.init()();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init(_:)()
{
  return dispatch thunk of BinaryFloatingPoint.init(_:)();
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter()
{
  return related decl 'e' for CKErrorCode.serverRecord.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t Dictionary.Index._asCocoa.modify()
{
  return Dictionary.Index._asCocoa.modify();
}

uint64_t Dictionary.count.getter()
{
  return Dictionary.count.getter();
}

uint64_t type metadata accessor for Dictionary.Iterator()
{
  return type metadata accessor for Dictionary.Iterator();
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t static Dictionary<>.== infix(_:_:)()
{
  return static Dictionary<>.== infix(_:_:)();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

uint64_t dispatch thunk of static FloatingPoint./ infix(_:_:)()
{
  return dispatch thunk of static FloatingPoint./ infix(_:_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return BidirectionalCollection<>.starts<A>(with:)();
}

uint64_t BidirectionalCollection<>.difference<A>(from:)()
{
  return BidirectionalCollection<>.difference<A>(from:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return dispatch thunk of static Comparable.> infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t static Comparable.> infix(_:_:)()
{
  return static Comparable.> infix(_:_:)();
}

uint64_t static Comparable.>= infix(_:_:)()
{
  return static Comparable.>= infix(_:_:)();
}

uint64_t static Comparable.<= infix(_:_:)()
{
  return static Comparable.<= infix(_:_:)();
}

uint64_t MutableCollection.move(fromOffsets:toOffset:)()
{
  return MutableCollection.move(fromOffsets:toOffset:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t ObjectIdentifier.debugDescription.getter()
{
  return ObjectIdentifier.debugDescription.getter();
}

uint64_t ObjectIdentifier.hashValue.getter()
{
  return ObjectIdentifier.hashValue.getter();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t type metadata accessor for String.IntentInputOptions()
{
  return type metadata accessor for String.IntentInputOptions();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return static String.localizedStringWithFormat(_:_:)();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:arguments:)()
{
  return String.init(format:arguments:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1 = String.init(_:)(a1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.removeSubrange(_:)()
{
  return String.removeSubrange(_:)();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return String.replaceSubrange<A>(_:with:)();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return String.UnicodeScalarView._foreignIndex(after:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.Index.init<A>(utf16Offset:in:)()
{
  return String.Index.init<A>(utf16Offset:in:)();
}

uint64_t String.Index.utf16Offset<A>(in:)()
{
  return String.Index.utf16Offset<A>(in:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  return String.UTF16View._foreignCount()();
}

uint64_t String.UTF16View._nativeGetOffset(for:)()
{
  return String.UTF16View._nativeGetOffset(for:)();
}

uint64_t String.UTF16View.count.getter()
{
  return String.UTF16View.count.getter();
}

uint64_t String.UTF16View.index(_:offsetBy:limitedBy:)()
{
  return String.UTF16View.index(_:offsetBy:limitedBy:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence.sorted<A>(using:)()
{
  return Sequence.sorted<A>(using:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return dispatch thunk of Sequence.underestimatedCount.getter();
}

uint64_t Sequence.publisher.getter()
{
  return Sequence.publisher.getter();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return Sequence._copyContents(initializing:)();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Sequence.filter(_:)()
{
  return Sequence.filter(_:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

Swift::Int __swiftcall Array._getCount()()
{
  return Array._getCount()();
}

uint64_t Array<A>.hashValue.getter()
{
  return Array<A>.hashValue.getter();
}

uint64_t static Array<A>.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.background.getter()
{
  return static TaskPriority.background.getter();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.low.getter()
{
  return static TaskPriority.low.getter();
}

uint64_t static TaskPriority.high.getter()
{
  return static TaskPriority.high.getter();
}

uint64_t static TaskPriority.utility.getter()
{
  return static TaskPriority.utility.getter();
}

uint64_t TaskPriority.init(rawValue:)()
{
  return TaskPriority.init(rawValue:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return type metadata accessor for AsyncStream.Continuation.YieldResult();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return type metadata accessor for AsyncStream.Continuation();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t type metadata accessor for AsyncStream()
{
  return type metadata accessor for AsyncStream();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return ThrowingTaskGroup.isEmpty.getter();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)Float._bridgeToObjectiveC()();
}

uint64_t static Float._forceBridgeFromObjectiveC(_:result:)()
{
  return static Float._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Float._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Float._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Float._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return dispatch thunk of static Numeric.* infix(_:_:)();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
}

uint64_t dispatch thunk of RandomAccessCollection.distance(from:to:)()
{
  return dispatch thunk of RandomAccessCollection.distance(from:to:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection._customIndexOfEquatableElement(_:)()
{
  return dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return dispatch thunk of Collection.index(after:)();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t RangeReplaceableCollection.applying(_:)()
{
  return RangeReplaceableCollection.applying(_:)();
}

uint64_t Range<>.init(_:in:)()
{
  return Range<>.init(_:in:)();
}

uint64_t CGColorRef.components.getter()
{
  return CGColorRef.components.getter();
}

uint64_t CKDatabase.DatabaseChange.Modification.zoneID.getter()
{
  return CKDatabase.DatabaseChange.Modification.zoneID.getter();
}

uint64_t type metadata accessor for CKDatabase.DatabaseChange.Modification()
{
  return type metadata accessor for CKDatabase.DatabaseChange.Modification();
}

uint64_t type metadata accessor for CKDatabase.DatabaseChange.Deletion.Reason()
{
  return type metadata accessor for CKDatabase.DatabaseChange.Deletion.Reason();
}

uint64_t CKDatabase.DatabaseChange.Deletion.reason.getter()
{
  return CKDatabase.DatabaseChange.Deletion.reason.getter();
}

uint64_t CKDatabase.DatabaseChange.Deletion.zoneID.getter()
{
  return CKDatabase.DatabaseChange.Deletion.zoneID.getter();
}

uint64_t type metadata accessor for CKDatabase.DatabaseChange.Deletion()
{
  return type metadata accessor for CKDatabase.DatabaseChange.Deletion();
}

uint64_t CKDatabase.RecordZoneChange.Modification.record.getter()
{
  return CKDatabase.RecordZoneChange.Modification.record.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Modification()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Modification();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordType.getter();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordID.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordID.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Deletion()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Deletion();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t simd_quatf.hash(into:)()
{
  return simd_quatf.hash(into:)();
}

uint64_t CGContextRef.clip(using:)()
{
  return CGContextRef.clip(using:)();
}

uint64_t CGContextRef.draw(_:in:byTiling:)()
{
  return CGContextRef.draw(_:in:byTiling:)();
}

uint64_t CGContextRef.fillPath(using:)()
{
  return CGContextRef.fillPath(using:)();
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t NSFileHandle.read(upToCount:)()
{
  return NSFileHandle.read(upToCount:)();
}

uint64_t PKToolPicker._insertTool(_:atIndex:)()
{
  return PKToolPicker._insertTool(_:atIndex:)();
}

uint64_t PKToolPicker._removeTool(_:)()
{
  return PKToolPicker._removeTool(_:)();
}

uint64_t PKToolPicker.selectedTool.getter()
{
  return PKToolPicker.selectedTool.getter();
}

uint64_t PKToolPicker.selectedTool.setter()
{
  return PKToolPicker.selectedTool.setter();
}

uint64_t PKToolPicker._tools.getter()
{
  return PKToolPicker._tools.getter();
}

uint64_t UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)()
{
  return UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for CKRecordChange.ChangeType()
{
  return type metadata accessor for CKRecordChange.ChangeType();
}

uint64_t CKRecordChange.changeType.getter()
{
  return CKRecordChange.changeType.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t NSItemProvider.loadDataRepresentation(for:completionHandler:)()
{
  return NSItemProvider.loadDataRepresentation(for:completionHandler:)();
}

uint64_t NSItemProvider.loadFileRepresentation(for:openInPlace:completionHandler:)()
{
  return NSItemProvider.loadFileRepresentation(for:openInPlace:completionHandler:)();
}

uint64_t NSItemProvider.registerCKShare(container:allowedSharingOptions:preparationHandler:)()
{
  return NSItemProvider.registerCKShare(container:allowedSharingOptions:preparationHandler:)();
}

Swift::Void __swiftcall NSItemProvider.registerCKShare(_:container:allowedSharingOptions:)(CKShare _, CKContainer container, CKAllowedSharingOptions allowedSharingOptions)
{
}

uint64_t UIPointerStyle.init(effect:shape:)()
{
  return UIPointerStyle.init(effect:shape:)();
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItem systemItem, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)UIBarButtonItem.init(systemItem:primaryAction:menu:)(systemItem, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil, menu.value.super.super.isa, *(void *)&menu.is_nil);
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(title:image:primaryAction:menu:)(Swift::String_optional title, UIImage_optional image, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)UIBarButtonItem.init(title:image:primaryAction:menu:)(title.value._countAndFlagsBits, title.value._object, image.value.super.isa, *(void *)&image.is_nil, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil, menu.value.super.super.isa, *(void *)&menu.is_nil);
}

uint64_t static UITextDirection.layout(_:)()
{
  return static UITextDirection.layout(_:)();
}

uint64_t static UITextDirection.storage(_:)()
{
  return static UITextDirection.storage(_:)();
}

uint64_t CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)()
{
  return CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
}

uint64_t CGMutablePathRef.addRect(_:transform:)()
{
  return CGMutablePathRef.addRect(_:transform:)();
}

uint64_t CKRecordObserver.init(container:recordType:)()
{
  return CKRecordObserver.init(container:recordType:)();
}

uint64_t CSSearchableItem.associate<A>(appEntity:priority:)()
{
  return CSSearchableItem.associate<A>(appEntity:priority:)();
}

uint64_t UICollectionView.CellRegistration.init(handler:)()
{
  return UICollectionView.CellRegistration.init(handler:)();
}

uint64_t UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)()
{
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();
}

uint64_t UINavigationItem.renameDelegate.setter()
{
  return UINavigationItem.renameDelegate.setter();
}

uint64_t UIViewController.registerForTraitChanges(_:target:action:)()
{
  return UIViewController.registerForTraitChanges(_:target:action:)();
}

uint64_t UIViewController.registerForTraitChanges<A>(_:handler:)()
{
  return UIViewController.registerForTraitChanges<A>(_:handler:)();
}

uint64_t UIViewController.unregisterForTraitChanges(_:)()
{
  return UIViewController.unregisterForTraitChanges(_:)();
}

uint64_t static CGAffineTransform.== infix(_:_:)()
{
  return static CGAffineTransform.== infix(_:_:)();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)()
{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t static OS_dispatch_queue.concurrentPerform(iterations:execute:)()
{
  return static OS_dispatch_queue.concurrentPerform(iterations:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.async(execute:)()
{
  return OS_dispatch_queue.async(execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_queue.label.getter()
{
  return OS_dispatch_queue.label.getter();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t UITraitCollection.modifyingTraits(_:)()
{
  return UITraitCollection.modifyingTraits(_:)();
}

uint64_t static UITraitCollection.systemTraitsAffectingColorAppearance.getter()
{
  return static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
}

uint64_t CKShareParticipant.participantID.getter()
{
  return CKShareParticipant.participantID.getter();
}

uint64_t NSAttributedString.init(_:)()
{
  return NSAttributedString.init(_:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

uint64_t static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)()
{
  return static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)();
}

uint64_t UICollectionViewCell.contentConfiguration.getter()
{
  return UICollectionViewCell.contentConfiguration.getter();
}

uint64_t UICollectionViewCell.contentConfiguration.setter()
{
  return UICollectionViewCell.contentConfiguration.setter();
}

uint64_t UICollectionViewCell.backgroundConfiguration.setter()
{
  return UICollectionViewCell.backgroundConfiguration.setter();
}

uint64_t UICollectionViewCell.configurationUpdateHandler.setter()
{
  return UICollectionViewCell.configurationUpdateHandler.setter();
}

uint64_t UICollectionViewCell.defaultBackgroundConfiguration()()
{
  return UICollectionViewCell.defaultBackgroundConfiguration()();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t UIContentSizeCategory.isAccessibilityCategory.getter()
{
  return UIContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t static UIContentSizeCategory.> infix(_:_:)()
{
  return static UIContentSizeCategory.> infix(_:_:)();
}

uint64_t static UIContentSizeCategory.< infix(_:_:)()
{
  return static UIContentSizeCategory.< infix(_:_:)();
}

uint64_t CKMergeableRecordValue.addDeltasToSave(from:)()
{
  return CKMergeableRecordValue.addDeltasToSave(from:)();
}

uint64_t PHPickerViewController.init(configuration:)()
{
  return PHPickerViewController.init(configuration:)();
}

uint64_t PHPickerViewController.delegate.setter()
{
  return PHPickerViewController.delegate.setter();
}

uint64_t PKToolPickerCustomItem.Configuration.init(identifier:name:)()
{
  return PKToolPickerCustomItem.Configuration.init(identifier:name:)();
}

uint64_t PKToolPickerCustomItem.Configuration.defaultColor.setter()
{
  return PKToolPickerCustomItem.Configuration.defaultColor.setter();
}

uint64_t PKToolPickerCustomItem.Configuration.imageProvider.setter()
{
  return PKToolPickerCustomItem.Configuration.imageProvider.setter();
}

uint64_t PKToolPickerCustomItem.Configuration.allowsColorSelection.setter()
{
  return PKToolPickerCustomItem.Configuration.allowsColorSelection.setter();
}

uint64_t type metadata accessor for PKToolPickerCustomItem.Configuration()
{
  return type metadata accessor for PKToolPickerCustomItem.Configuration();
}

uint64_t PKToolPickerCustomItem.init(configuration:)()
{
  return PKToolPickerCustomItem.init(configuration:)();
}

uint64_t PKToolPickerEraserItem.eraserTool.getter()
{
  return PKToolPickerEraserItem.eraserTool.getter();
}

uint64_t PKToolPickerEraserItem.init(type:width:)()
{
  return PKToolPickerEraserItem.init(type:width:)();
}

uint64_t PKToolPickerInkingItem.inkingTool.getter()
{
  return PKToolPickerInkingItem.inkingTool.getter();
}

uint64_t PKToolPickerInkingItem.init(type:color:width:identifier:)()
{
  return PKToolPickerInkingItem.init(type:color:width:identifier:)();
}

uint64_t CKFetchRecordsOperation.fetchRecordsResultBlock.setter()
{
  return CKFetchRecordsOperation.fetchRecordsResultBlock.setter();
}

uint64_t CKFetchRecordsOperation.desiredKeys.setter()
{
  return CKFetchRecordsOperation.desiredKeys.setter();
}

uint64_t CKFetchRecordsOperation.perRecordResultBlock.setter()
{
  return CKFetchRecordsOperation.perRecordResultBlock.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.getter()
{
  return CKRecordKeyValueSetting.subscript.getter();
}

uint64_t CKModifyRecordsOperation.modifyRecordsResultBlock.setter()
{
  return CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
}

CKModifyRecordsOperation __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  return (CKModifyRecordsOperation)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(recordsToSave.value._rawValue, *(void *)&recordsToSave.is_nil, recordIDsToDelete.value._rawValue, *(void *)&recordIDsToDelete.is_nil);
}

uint64_t CKModifyRecordsOperation.perRecordSaveBlock.setter()
{
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t UICollectionViewListCell.accessories.setter()
{
  return UICollectionViewListCell.accessories.setter();
}

uint64_t UICollectionViewListCell.defaultContentConfiguration()()
{
  return UICollectionViewListCell.defaultContentConfiguration()();
}

uint64_t CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter()
{
  return CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter();
}

uint64_t CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter()
{
  return CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter();
}

uint64_t static NSCollectionLayoutSection.list(using:layoutEnvironment:)()
{
  return static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
}

uint64_t CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter()
{
  return CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
}

uint64_t CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter()
{
  return CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter();
}

uint64_t _SWCollaborationBarButtonItem.setDetailViewListContent<A>(_:)()
{
  return _SWCollaborationBarButtonItem.setDetailViewListContent<A>(_:)();
}

uint64_t CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
}

CKFetchRecordZoneChangesOperation __swiftcall CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(Swift::OpaquePointer_optional recordZoneIDs, Swift::OpaquePointer_optional configurationsByRecordZoneID)
{
  return (CKFetchRecordZoneChangesOperation)CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(recordZoneIDs.value._rawValue, *(void *)&recordZoneIDs.is_nil, configurationsByRecordZoneID.value._rawValue, *(void *)&configurationsByRecordZoneID.is_nil);
}

uint64_t CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
}

uint64_t static UISheetPresentationControllerDetent.custom(identifier:resolver:)()
{
  return static UISheetPresentationControllerDetent.custom(identifier:resolver:)();
}

uint64_t CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)()
{
  return CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)();
}

uint64_t UIPopoverPresentationControllerSourceItem.frame(in:)()
{
  return UIPopoverPresentationControllerSourceItem.frame(in:)();
}

uint64_t NSSet.makeIterator()()
{
  return NSSet.makeIterator()();
}

NSValue __swiftcall CGRect._bridgeToObjectiveC()()
{
  return (NSValue)CGRect._bridgeToObjectiveC()();
}

uint64_t CGRect.debugDescription.getter()
{
  return CGRect.debugDescription.getter();
}

UIMenu __swiftcall UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(Swift::String title, Swift::String_optional subtitle, UIImage_optional image, UIMenuIdentifier_optional identifier, UIMenuOptions options, UIMenuElementSize preferredElementSize, Swift::OpaquePointer children)
{
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(title, subtitle, image, identifier, options, preferredElementSize, children);
}

uint64_t UIView.updateAppEntityAnnotation(with:)()
{
  return UIView.updateAppEntityAnnotation(with:)();
}

uint64_t UIView.annotate(with:)()
{
  return UIView.annotate(with:)();
}

uint64_t UIView.traitOverrides.getter()
{
  return UIView.traitOverrides.getter();
}

uint64_t UIView.traitOverrides.setter()
{
  return UIView.traitOverrides.setter();
}

uint64_t UIView.registerForTraitChanges<A>(_:handler:)()
{
  return UIView.registerForTraitChanges<A>(_:handler:)();
}

uint64_t static CKShare.SystemFieldKey.thumbnailImageData.getter()
{
  return static CKShare.SystemFieldKey.thumbnailImageData.getter();
}

uint64_t static CKShare.SystemFieldKey.title.getter()
{
  return static CKShare.SystemFieldKey.title.getter();
}

uint64_t static CKShare.SystemFieldKey.shareType.getter()
{
  return static CKShare.SystemFieldKey.shareType.getter();
}

uint64_t NSArray.init(arrayLiteral:)()
{
  return NSArray.init(arrayLiteral:)();
}

uint64_t NSArray.makeIterator()()
{
  return NSArray.makeIterator()();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return type metadata accessor for NSTimer.TimerPublisher();
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)()
{
  return static NSTimer.publish(every:tolerance:on:in:options:)();
}

uint64_t static CKRecord.SystemType.share.getter()
{
  return static CKRecord.SystemType.share.getter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

uint64_t CKRecord.allKeys()()
{
  return CKRecord.allKeys()();
}

uint64_t CKRecord.subscript.getter()
{
  return CKRecord.subscript.getter();
}

uint64_t CKRecord.subscript.setter()
{
  return CKRecord.subscript.setter();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t NSString.init(stringLiteral:)()
{
  return NSString.init(stringLiteral:)();
}

uint64_t NSString.init(format:_:)()
{
  return NSString.init(format:_:)();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t UIButton.Configuration.preferredSymbolConfigurationForImage.setter()
{
  return UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
}

uint64_t UIButton.Configuration.background.modify()
{
  return UIButton.Configuration.background.modify();
}

uint64_t UIButton.Configuration.buttonSize.setter()
{
  return UIButton.Configuration.buttonSize.setter();
}

uint64_t type metadata accessor for UIButton.Configuration.CornerStyle()
{
  return type metadata accessor for UIButton.Configuration.CornerStyle();
}

uint64_t UIButton.Configuration.cornerStyle.getter()
{
  return UIButton.Configuration.cornerStyle.getter();
}

uint64_t UIButton.Configuration.cornerStyle.setter()
{
  return UIButton.Configuration.cornerStyle.setter();
}

uint64_t UIButton.Configuration.imagePadding.setter()
{
  return UIButton.Configuration.imagePadding.setter();
}

uint64_t UIButton.Configuration.contentInsets.setter()
{
  return UIButton.Configuration.contentInsets.setter();
}

uint64_t type metadata accessor for UIButton.Configuration.TitleAlignment()
{
  return type metadata accessor for UIButton.Configuration.TitleAlignment();
}

uint64_t UIButton.Configuration.imagePlacement.setter()
{
  return UIButton.Configuration.imagePlacement.setter();
}

uint64_t UIButton.Configuration.titleAlignment.setter()
{
  return UIButton.Configuration.titleAlignment.setter();
}

uint64_t UIButton.Configuration.titleLineBreakMode.setter()
{
  return UIButton.Configuration.titleLineBreakMode.setter();
}

uint64_t UIButton.Configuration.baseBackgroundColor.setter()
{
  return UIButton.Configuration.baseBackgroundColor.setter();
}

uint64_t UIButton.Configuration.baseForegroundColor.setter()
{
  return UIButton.Configuration.baseForegroundColor.setter();
}

uint64_t UIButton.Configuration.imageColorTransformer.setter()
{
  return UIButton.Configuration.imageColorTransformer.setter();
}

uint64_t UIButton.Configuration.titleTextAttributesTransformer.setter()
{
  return UIButton.Configuration.titleTextAttributesTransformer.setter();
}

uint64_t type metadata accessor for UIButton.Configuration.Size()
{
  return type metadata accessor for UIButton.Configuration.Size();
}

uint64_t UIButton.Configuration.image.setter()
{
  return UIButton.Configuration.image.setter();
}

uint64_t static UIButton.Configuration.plain()()
{
  return static UIButton.Configuration.plain()();
}

uint64_t UIButton.Configuration.title.getter()
{
  return UIButton.Configuration.title.getter();
}

uint64_t UIButton.Configuration.title.setter()
{
  return UIButton.Configuration.title.setter();
}

uint64_t static UIButton.Configuration.filled()()
{
  return static UIButton.Configuration.filled()();
}

uint64_t static UIButton.Configuration.tinted()()
{
  return static UIButton.Configuration.tinted()();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return type metadata accessor for UIButton.Configuration();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return UIButton.init(configuration:primaryAction:)();
}

uint64_t UIButton.configuration.getter()
{
  return UIButton.configuration.getter();
}

uint64_t UIButton.configuration.setter()
{
  return UIButton.configuration.setter();
}

uint64_t UIButton.pointerStyleProvider.setter()
{
  return UIButton.pointerStyleProvider.setter();
}

UIButton __swiftcall UIButton.init(type:primaryAction:)(UIButtonType type, UIAction_optional primaryAction)
{
  return (UIButton)UIButton.init(type:primaryAction:)(type, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil);
}

__C::_NSRange_optional __swiftcall _NSRange.intersection(_:)(__C::_NSRange a1)
{
  Swift::Int v1 = _NSRange.intersection(_:)(a1.location, a1.length);
  result.value.length = v2;
  result.value.location = v1;
  result.is_nil = v3;
  return result;
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return _NSRange.init<A, B>(_:in:)();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init(integerLiteral:)()
{
  return NSRunLoop.SchedulerTimeType.Stride.init(integerLiteral:)();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)()
{
  return UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return Optional._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = Substring.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init<A>(_:)()
{
  return Substring.init<A>(_:)();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return StringProtocol.rangeOfCharacter(from:options:range:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
}

uint64_t StringProtocol.removingPercentEncoding.getter()
{
  return StringProtocol.removingPercentEncoding.getter();
}

uint64_t StringProtocol.localizedStandardCompare<A>(_:)()
{
  return StringProtocol.localizedStandardCompare<A>(_:)();
}

uint64_t StringProtocol.localizedStandardContains<A>(_:)()
{
  return StringProtocol.localizedStandardContains<A>(_:)();
}

uint64_t StringProtocol.localizedCaseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.localizedCaseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.hash.getter()
{
  return StringProtocol.hash.getter();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return StringProtocol.range<A>(of:options:range:locale:)();
}

uint64_t StringProtocol.cString(using:)()
{
  return StringProtocol.cString(using:)();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)()
{
  return StringProtocol.compare<A>(_:options:range:locale:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return dispatch thunk of SetAlgebra.intersection(_:)();
}

uint64_t dispatch thunk of SetAlgebra.symmetricDifference(_:)()
{
  return dispatch thunk of SetAlgebra.symmetricDifference(_:)();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return dispatch thunk of SetAlgebra.insert(_:)();
}

uint64_t SetAlgebra.isDisjoint(with:)()
{
  return SetAlgebra.isDisjoint(with:)();
}

uint64_t SetAlgebra.isSuperset(of:)()
{
  return SetAlgebra.isSuperset(of:)();
}

uint64_t SetAlgebra.subtracting(_:)()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t SetAlgebra.isEmpty.getter()
{
  return SetAlgebra.isEmpty.getter();
}

uint64_t SetAlgebra.isSubset(of:)()
{
  return SetAlgebra.isSubset(of:)();
}

uint64_t SetAlgebra.subtract(_:)()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return dispatch thunk of SetAlgebra.init()();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  return (NSObject)AnyHashable._bridgeToObjectiveC()();
}

uint64_t AnyHashable.description.getter()
{
  return AnyHashable.description.getter();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.hash(into:)()
{
  return AnyHashable.hash(into:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t type metadata accessor for _SetStorage()
{
  return type metadata accessor for _SetStorage();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of static CaseIterable.allCases.getter()
{
  return dispatch thunk of static CaseIterable.allCases.getter();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t dispatch thunk of _AnyIndexBox._typeID.getter()
{
  return dispatch thunk of _AnyIndexBox._typeID.getter();
}

uint64_t dispatch thunk of _AnyIndexBox._isEqual(to:)()
{
  return dispatch thunk of _AnyIndexBox._isEqual(to:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t type metadata accessor for WritableKeyPath()
{
  return type metadata accessor for WritableKeyPath();
}

uint64_t __VaListBuilder.deallocStorage(wordCount:storage:)()
{
  return __VaListBuilder.deallocStorage(wordCount:storage:)();
}

uint64_t __VaListBuilder.va_list()()
{
  return __VaListBuilder.va_list()();
}

uint64_t type metadata accessor for __VaListBuilder()
{
  return type metadata accessor for __VaListBuilder();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t AsyncMapSequence.base.getter()
{
  return AsyncMapSequence.base.getter();
}

uint64_t AsyncMapSequence.Iterator.baseIterator.modify()
{
  return AsyncMapSequence.Iterator.baseIterator.modify();
}

uint64_t AsyncMapSequence.Iterator.transform.getter()
{
  return AsyncMapSequence.Iterator.transform.getter();
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)()
{
  return AsyncMapSequence.Iterator.init(_:transform:)();
}

uint64_t AsyncMapSequence.transform.getter()
{
  return AsyncMapSequence.transform.getter();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return CodingUserInfoKey.init(rawValue:)();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return type metadata accessor for CodingUserInfoKey();
}

uint64_t dispatch thunk of _AnyCollectionBox.subscript.getter()
{
  return dispatch thunk of _AnyCollectionBox.subscript.getter();
}

uint64_t __CocoaDictionary.startIndex.getter()
{
  return __CocoaDictionary.startIndex.getter();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.key(at:)()
{
  return __CocoaDictionary.key(at:)();
}

uint64_t __CocoaDictionary.Index.dictionary.getter()
{
  return __CocoaDictionary.Index.dictionary.getter();
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter()
{
  return __CocoaDictionary.Index.handleBitPattern.getter();
}

uint64_t __CocoaDictionary.Index.age.getter()
{
  return __CocoaDictionary.Index.age.getter();
}

uint64_t __CocoaDictionary.Index.key.getter()
{
  return __CocoaDictionary.Index.key.getter();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.index(after:)()
{
  return __CocoaDictionary.index(after:)();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return __CocoaDictionary.Iterator.nextKey()();
}

uint64_t __CocoaDictionary.formIndex(after:isUnique:)()
{
  return __CocoaDictionary.formIndex(after:isUnique:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter();
}

uint64_t CollectionDifference.insertions.getter()
{
  return CollectionDifference.insertions.getter();
}

uint64_t CollectionDifference.removals.getter()
{
  return CollectionDifference.removals.getter();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return KeyedDecodingContainer.contains(_:)();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)()
{
  return dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)()
{
  return _forceBridgeFromObjectiveC<A>(_:_:)();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _copySequenceToContiguousArray<A>(_:)()
{
  return _copySequenceToContiguousArray<A>(_:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)()
{
  return dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t abs<A>(_:)()
{
  return abs<A>(_:)();
}

uint64_t max<A>(_:_:)()
{
  return max<A>(_:_:)();
}

uint64_t min<A>(_:_:)()
{
  return min<A>(_:_:)();
}

uint64_t SIMD.description.getter()
{
  return SIMD.description.getter();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return Hasher.finalize()();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Hasher.init()()
{
  return Hasher.init()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.subjectType.getter()
{
  return Mirror.subjectType.getter();
}

uint64_t static Mirror.DisplayStyle.== infix(_:_:)()
{
  return static Mirror.DisplayStyle.== infix(_:_:)();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return type metadata accessor for Mirror.DisplayStyle();
}

uint64_t Mirror.displayStyle.getter()
{
  return Mirror.displayStyle.getter();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t dispatch thunk of CVarArg._cVarArgEncoding.getter()
{
  return dispatch thunk of CVarArg._cVarArgEncoding.getter();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return dispatch thunk of Decoder.userInfo.getter();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.userInfo.getter()
{
  return dispatch thunk of Encoder.userInfo.getter();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t OptionSet.intersection(_:)()
{
  return OptionSet.intersection(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BRLoggedInUserHasManagedAppleID()
{
  return _BRLoggedInUserHasManagedAppleID();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

uint64_t CALayerMapGeometry()
{
  return _CALayerMapGeometry();
}

uint64_t CARenderServerSnapshot()
{
  return _CARenderServerSnapshot();
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  return _CATransform3DConcat(retstr, a, b);
}

BOOL CATransform3DEqualToTransform(CATransform3D *a, CATransform3D *b)
{
  return _CATransform3DEqualToTransform(a, b);
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform(CGAffineTransform *__return_ptr retstr, CATransform3D *t)
{
  return _CATransform3DGetAffineTransform(retstr, t);
}

uint64_t CATransform3DInterpolate()
{
  return _CATransform3DInterpolate();
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  return _CATransform3DInvert(retstr, t);
}

BOOL CATransform3DIsIdentity(CATransform3D *t)
{
  return _CATransform3DIsIdentity(t);
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return _CATransform3DMakeAffineTransform(retstr, m);
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return _CATransform3DMakeRotation(retstr, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DMakeScale(retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DMakeTranslation(retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DScale(retstr, t, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DTranslate(retstr, t, tx, ty, tz);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange)
{
  return _CFAttributedStringGetAttribute(aStr, loc, attrName, effectiveRange);
}

void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return _CFCharacterSetIsCharacterMember(theSet, theChar);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return _CFCopyTypeIDDescription(type_id);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return _CFHash(cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return _CFLocaleCopyCurrent();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void *block)
{
  return _CFRunLoopObserverCreateWithHandler(allocator, activities, repeats, order, block);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return _CFStringCreateMutableWithExternalCharactersNoCopy(alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return _CFStringCreateWithCharactersNoCopy(alloc, chars, numChars, contentsDeallocator);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return _CFStringGetCharacterAtIndex(theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return _CFStringGetCharactersPtr(theString);
}

CFIndex CFStringGetHyphenationLocationBeforeIndex(CFStringRef string, CFIndex location, CFRange limitRange, CFOptionFlags options, CFLocaleRef locale, UTF32Char *character)
{
  return _CFStringGetHyphenationLocationBeforeIndex(string, location, limitRange, options, locale, character);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFRange RangeOfComposedCharactersAtIndex = _CFStringGetRangeOfComposedCharactersAtIndex(theString, theIndex);
  CFIndex length = RangeOfComposedCharactersAtIndex.length;
  CFIndex location = RangeOfComposedCharactersAtIndex.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return _CFStringTokenizerAdvanceToNextToken(tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return _CFStringTokenizerCreate(alloc, string, range, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFRange CurrentTokenRange = _CFStringTokenizerGetCurrentTokenRange(tokenizer);
  CFIndex length = CurrentTokenRange.length;
  CFIndex location = CurrentTokenRange.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return _CFStringTokenizerGoToTokenAtIndex(tokenizer, index);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return _CFURLCopyFileSystemPath(anURL, pathStyle);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformEqualToTransform(t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return _CGAffineTransformInvert(retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return _CGAffineTransformIsIdentity(t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return _CGAffineTransformRotate(retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformScale(retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformTranslate(retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return _CGBitmapContextCreateImage(context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return _CGBitmapContextCreateWithData(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo, releaseCallback, releaseInfo);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return _CGBitmapContextGetBitmapInfo(context);
}

size_t CGBitmapContextGetBitsPerPixel(CGContextRef context)
{
  return _CGBitmapContextGetBitsPerPixel(context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return _CGBitmapContextGetBytesPerRow(context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return _CGBitmapContextGetData(context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return _CGBitmapContextGetHeight(context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return _CGBitmapContextGetWidth(context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return _CGColorCreate(space, components);
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  return _CGColorCreateCopy(color);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return _CGColorCreateCopyByMatchingToColorSpace(a1, intent, color, options);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return _CGColorCreateCopyWithAlpha(color, alpha);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return _CGColorCreateGenericGray(gray, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return _CGColorCreateWithPattern(space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return _CGColorEqualToColor(color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  return _CGColorGetAlpha(color);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return _CGColorGetColorSpace(color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return _CGColorGetComponents(color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return _CGColorGetNumberOfComponents(color);
}

CGPatternRef CGColorGetPattern(CGColorRef color)
{
  return _CGColorGetPattern(color);
}

CFTypeID CGColorGetTypeID(void)
{
  return _CGColorGetTypeID();
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return _CGColorRetain(color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return _CGColorSpaceCreateDeviceCMYK();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return _CGColorSpaceCreateDeviceGray();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return _CGColorSpaceCreatePattern(baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return _CGColorSpaceGetModel(space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return _CGColorSpaceGetName(space);
}

BOOL CGColorSpaceIsWideGamutRGB(CGColorSpaceRef a1)
{
  return _CGColorSpaceIsWideGamutRGB(a1);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return _CGColorSpaceRetain(space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return _CGColorSpaceSupportsOutput(space);
}

void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextAddQuadCurveToPoint(CGContextRef c, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGContextBeginPage(CGContextRef c, const CGRect *mediaBox)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextBeginTransparencyLayerWithRect(CGContextRef c, CGRect rect, CFDictionaryRef auxInfo)
{
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextClosePath(CGContextRef c)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

CGPoint CGContextConvertPointToDeviceSpace(CGContextRef c, CGPoint point)
{
  CGPoint v4 = _CGContextConvertPointToDeviceSpace(c, point);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGPoint CGContextConvertPointToUserSpace(CGContextRef c, CGPoint point)
{
  CGPoint v4 = _CGContextConvertPointToUserSpace(c, point);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGRect CGContextConvertRectToDeviceSpace(CGContextRef c, CGRect rect)
{
  return _CGContextConvertRectToDeviceSpace(c, rect);
}

CGRect CGContextConvertRectToUserSpace(CGContextRef c, CGRect rect)
{
  return _CGContextConvertRectToUserSpace(c, rect);
}

CGSize CGContextConvertSizeToDeviceSpace(CGContextRef c, CGSize size)
{
  CGSize v4 = _CGContextConvertSizeToDeviceSpace(c, size);
  double height = v4.height;
  double width = v4.width;
  result.double height = height;
  result.double width = width;
  return result;
}

CGSize CGContextConvertSizeToUserSpace(CGContextRef c, CGSize size)
{
  CGSize v4 = _CGContextConvertSizeToUserSpace(c, size);
  double height = v4.height;
  double width = v4.width;
  result.double height = height;
  result.double width = width;
  return result;
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawLayerInRect(CGContextRef context, CGRect rect, CGLayerRef layer)
{
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextDrawShading(CGContextRef c, CGShadingRef shading)
{
}

void CGContextDrawTiledImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextEOClip(CGContextRef c)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextEndPage(CGContextRef c)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextFlush(CGContextRef c)
{
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return _CGContextGetCTM(retstr, c);
}

CGRect CGContextGetClipBoundingBox(CGContextRef c)
{
  return _CGContextGetClipBoundingBox(c);
}

CGAffineTransform *__cdecl CGContextGetUserSpaceToDeviceSpaceTransform(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return _CGContextGetUserSpaceToDeviceSpaceTransform(retstr, c);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextReplacePathWithStrokedPath(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return _CGContextRetain(c);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAllowsFontSubpixelQuantization(CGContextRef c, BOOL allowsFontSubpixelQuantization)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
{
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetGrayStrokeColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return _CGDataConsumerCreateWithCFData(data);
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
}

CGDataProviderRef CGDataProviderCreateSequential(void *info, const CGDataProviderSequentialCallbacks *callbacks)
{
  return _CGDataProviderCreateSequential(info, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return _CGDataProviderCreateWithCFData(data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return _CGDataProviderCreateWithData(info, data, size, releaseData);
}

CGDataProviderRef CGDataProviderCreateWithURL(CFURLRef url)
{
  return _CGDataProviderCreateWithURL(url);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGFunctionRef CGFunctionCreate(void *info, size_t domainDimension, const CGFloat *domain, size_t rangeDimension, const CGFloat *range, const CGFunctionCallbacks *callbacks)
{
  return _CGFunctionCreate(info, domainDimension, domain, rangeDimension, range, callbacks);
}

void CGFunctionRelease(CGFunctionRef function)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return _CGImageCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, bitmapInfo, provider, decode, shouldInterpolate, intent);
}

CGImageRef CGImageCreateCopy(CGImageRef image)
{
  return _CGImageCreateCopy(image);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return _CGImageCreateWithImageInRect(image, rect);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithURL(url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

void CGImageDestinationSetProperties(CGImageDestinationRef idst, CFDictionaryRef properties)
{
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return _CGImageGetAlphaInfo(image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return _CGImageGetBitmapInfo(image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return _CGImageGetBitsPerComponent(image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return _CGImageGetBitsPerPixel(image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return _CGImageGetBytesPerRow(image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return _CGImageGetColorSpace(image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return _CGImageGetDataProvider(image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

BOOL CGImageGetShouldInterpolate(CGImageRef image)
{
  return _CGImageGetShouldInterpolate(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

BOOL CGImageIsMask(CGImageRef image)
{
  return _CGImageIsMask(image);
}

CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate)
{
  return _CGImageMaskCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, provider, decode, shouldInterpolate);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return _CGImageRetain(image);
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return _CGImageSourceCopyProperties(isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCopyPropertiesAtIndex(isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return _CGImageSourceCopyTypeIdentifiers();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateThumbnailAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithData(data, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithDataProvider(provider, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return _CGImageSourceGetCount(isrc);
}

CGImageSourceStatus CGImageSourceGetStatus(CGImageSourceRef isrc)
{
  return _CGImageSourceGetStatus(isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return _CGImageSourceGetType(isrc);
}

CGLayerRef CGLayerCreateWithContext(CGContextRef context, CGSize size, CFDictionaryRef auxiliaryInfo)
{
  return _CGLayerCreateWithContext(context, size, auxiliaryInfo);
}

CGContextRef CGLayerGetContext(CGLayerRef layer)
{
  return _CGLayerGetContext(layer);
}

void CGLayerRelease(CGLayerRef layer)
{
}

void CGPDFContextBeginTag(CGContextRef context, CGPDFTagType tagType, CFDictionaryRef tagProperties)
{
}

void CGPDFContextClose(CGContextRef context)
{
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return _CGPDFContextCreate(consumer, mediaBox, auxiliaryInfo);
}

CGContextRef CGPDFContextCreateWithURL(CFURLRef url, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return _CGPDFContextCreateWithURL(url, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndTag(CGContextRef context)
{
}

void CGPDFContextSetURLForRect(CGContextRef context, CFURLRef url, CGRect rect)
{
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return _CGPDFDocumentCreateWithProvider(provider);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return _CGPDFDocumentGetPage(document, pageNumber);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  return _CGPDFDocumentRetain(document);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  return _CGPDFPageGetBoxRect(page, box);
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  return _CGPDFPageGetRotationAngle(page);
}

const char *__cdecl CGPDFTagTypeGetName(CGPDFTagType tagType)
{
  return _CGPDFTagTypeGetName(tagType);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddRoundedRect(CGMutablePathRef path, const CGAffineTransform *transform, CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return _CGPathContainsPoint(path, m, point, eoFill);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return _CGPathCreateCopy(path);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  return _CGPathCreateCopyByStrokingPath(path, transform, lineWidth, lineCap, lineJoin, miterLimit);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return _CGPathCreateCopyByTransformingPath(path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return _CGPathCreateMutable();
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  return _CGPathCreateMutableCopy(path);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return _CGPathCreateWithEllipseInRect(rect, transform);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return _CGPathCreateWithRect(rect, transform);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return _CGPathCreateWithRoundedRect(rect, cornerWidth, cornerHeight, transform);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return _CGPathEqualToPath(path1, path2);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  return _CGPathGetBoundingBox(path);
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  CGPoint CurrentPoint = _CGPathGetCurrentPoint(path);
  double y = CurrentPoint.y;
  double x = CurrentPoint.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  return _CGPathGetPathBoundingBox(path);
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return _CGPathIsEmpty(path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return _CGPathRetain(path);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return _CGPatternCreate(info, bounds, matrix, xStep, yStep, tiling, isColored, callbacks);
}

void CGPatternRelease(CGPatternRef pattern)
{
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  CGPoint v4 = _CGPointApplyAffineTransform(point, t);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

BOOL CGPointEqualToPoint(CGPoint point1, CGPoint point2)
{
  return _CGPointEqualToPoint(point1, point2);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  return _CGRectApplyAffineTransform(rect, t);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectContainsRect(rect1, rect2);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntegral(CGRect rect)
{
  return _CGRectIntegral(rect);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectIntersectsRect(rect1, rect2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return _CGRectIsInfinite(rect);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectOffset(rect, dx, dy);
}

CGRect CGRectStandardize(CGRect rect)
{
  return _CGRectStandardize(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

CGShadingRef CGShadingCreateAxial(CGColorSpaceRef space, CGPoint start, CGPoint end, CGFunctionRef function, BOOL extendStart, BOOL extendEnd)
{
  return _CGShadingCreateAxial(space, start, end, function, extendStart, extendEnd);
}

CGShadingRef CGShadingCreateRadial(CGColorSpaceRef space, CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius, CGFunctionRef function, BOOL extendStart, BOOL extendEnd)
{
  return _CGShadingCreateRadial(space, start, startRadius, end, endRadius, function, extendStart, extendEnd);
}

void CGShadingRelease(CGShadingRef shading)
{
}

CGShadingRef CGShadingRetain(CGShadingRef shading)
{
  return _CGShadingRetain(shading);
}

BOOL CGSizeEqualToSize(CGSize size1, CGSize size2)
{
  return _CGSizeEqualToSize(size1, size2);
}

uint64_t CKContainerEnvironmentString()
{
  return _CKContainerEnvironmentString();
}

uint64_t CKRetryAfterSecondsForError()
{
  return _CKRetryAfterSecondsForError();
}

const AudioStreamBasicDescription *__cdecl CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef desc)
{
  return _CMAudioFormatDescriptionGetStreamBasicDescription(desc);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return _CMClockGetHostTimeClock();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return _CMClockGetTime(retstr, clock);
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return _CMFormatDescriptionGetExtension(desc, extensionKey);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return _CMFormatDescriptionGetMediaSubType(desc);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetImageBuffer(sbuf);
}

CMTime *__cdecl CMSyncConvertTime(CMTime *__return_ptr retstr, CMTime *time, CMClockOrTimebaseRef fromClockOrTimebase, CMClockOrTimebaseRef toClockOrTimebase)
{
  return _CMSyncConvertTime(retstr, time, fromClockOrTimebase, toClockOrTimebase);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return _CMTimeAdd(retstr, lhs, rhs);
}

CMTime *__cdecl CMTimeClampToRange(CMTime *__return_ptr retstr, CMTime *time, CMTimeRange *range)
{
  return _CMTimeClampToRange(retstr, time, range);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return _CMTimeCompare(time1, time2);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return _CMTimeMake(retstr, value, timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return _CMTimeMakeWithSeconds(retstr, seconds, preferredTimescale);
}

Boolean CMTimeRangeEqual(CMTimeRange *range1, CMTimeRange *range2)
{
  return _CMTimeRangeEqual(range1, range2);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return _CMTimeRangeFromTimeToTime(retstr, start, end);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return _CMTimeRangeMake(retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return _CMTimeSubtract(retstr, lhs, rhs);
}

OSStatus CMTimebaseAddTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return _CMTimebaseAddTimerDispatchSource(timebase, timerSource);
}

CMClockOrTimebaseRef CMTimebaseCopySource(CMTimebaseRef timebase)
{
  return _CMTimebaseCopySource(timebase);
}

OSStatus CMTimebaseCreateWithSourceClock(CFAllocatorRef allocator, CMClockRef sourceClock, CMTimebaseRef *timebaseOut)
{
  return _CMTimebaseCreateWithSourceClock(allocator, sourceClock, timebaseOut);
}

Float64 CMTimebaseGetRate(CMTimebaseRef timebase)
{
  return _CMTimebaseGetRate(timebase);
}

OSStatus CMTimebaseRemoveTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return _CMTimebaseRemoveTimerDispatchSource(timebase, timerSource);
}

OSStatus CMTimebaseSetRate(CMTimebaseRef timebase, Float64 rate)
{
  return _CMTimebaseSetRate(timebase, rate);
}

OSStatus CMTimebaseSetRateAndAnchorTime(CMTimebaseRef timebase, Float64 rate, CMTime *timebaseTime, CMTime *immediateSourceTime)
{
  return _CMTimebaseSetRateAndAnchorTime(timebase, rate, timebaseTime, immediateSourceTime);
}

OSStatus CMTimebaseSetTime(CMTimebaseRef timebase, CMTime *time)
{
  return _CMTimebaseSetTime(timebase, time);
}

OSStatus CMTimebaseSetTimerDispatchSourceNextFireTime(CMTimebaseRef timebase, dispatch_source_t timerSource, CMTime *fireTime, uint32_t flags)
{
  return _CMTimebaseSetTimerDispatchSourceNextFireTime(timebase, timerSource, fireTime, flags);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return _CMVideoFormatDescriptionGetDimensions(videoDesc);
}

CTFontCollectionRef CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef options)
{
  return _CTFontCollectionCreateFromAvailableFonts(options);
}

CFArrayRef CTFontCollectionCreateMatchingFontDescriptors(CTFontCollectionRef collection)
{
  return _CTFontCollectionCreateMatchingFontDescriptors(collection);
}

CFArrayRef CTFontCopyAvailableTables(CTFontRef font, CTFontTableOptions options)
{
  return _CTFontCopyAvailableTables(font, options);
}

CFStringRef CTFontCopyFamilyName(CTFontRef font)
{
  return _CTFontCopyFamilyName(font);
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  return _CTFontCopyFontDescriptor(font);
}

CFStringRef CTFontCopyLocalizedName(CTFontRef font, CFStringRef nameKey, CFStringRef *actualLanguage)
{
  return _CTFontCopyLocalizedName(font, nameKey, actualLanguage);
}

CFStringRef CTFontCopyPostScriptName(CTFontRef font)
{
  return _CTFontCopyPostScriptName(font);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return _CTFontCreateCopyWithAttributes(font, size, matrix, attributes);
}

CTFontRef CTFontCreateCopyWithSymbolicTraits(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  return _CTFontCreateCopyWithSymbolicTraits(font, size, matrix, symTraitValue, symTraitMask);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return _CTFontCreateWithFontDescriptor(descriptor, size, matrix);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return _CTFontCreateWithName(name, size, matrix);
}

CTFontRef CTFontCreateWithNameAndOptions(CFStringRef name, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  return _CTFontCreateWithNameAndOptions(name, size, matrix, options);
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  return _CTFontDescriptorCopyAttribute(descriptor, attribute);
}

CFDictionaryRef CTFontDescriptorCopyAttributes(CTFontDescriptorRef descriptor)
{
  return _CTFontDescriptorCopyAttributes(descriptor);
}

CFTypeRef CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute, CFStringRef *language)
{
  return _CTFontDescriptorCopyLocalizedAttribute(descriptor, attribute, language);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  return _CTFontDescriptorCreateCopyWithAttributes(original, attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return _CTFontDescriptorCreateMatchingFontDescriptor(descriptor, mandatoryAttributes);
}

CFArrayRef CTFontDescriptorCreateMatchingFontDescriptors(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return _CTFontDescriptorCreateMatchingFontDescriptors(descriptor, mandatoryAttributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return _CTFontDescriptorCreateWithAttributes(attributes);
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  return _CTFontGetAdvancesForGlyphs(font, orientation, glyphs, advances, count);
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  return _CTFontGetAscent(font);
}

CGRect CTFontGetBoundingBox(CTFontRef font)
{
  return _CTFontGetBoundingBox(font);
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  return _CTFontGetBoundingRectsForGlyphs(font, orientation, glyphs, boundingRects, count);
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  return _CTFontGetCapHeight(font);
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  return _CTFontGetDescent(font);
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return _CTFontGetGlyphsForCharacters(font, characters, glyphs, count);
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  return _CTFontGetLeading(font);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  return _CTFontGetSize(font);
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return _CTFontGetSymbolicTraits(font);
}

uint64_t CTFontGetTextStyle()
{
  return _CTFontGetTextStyle();
}

CFTypeID CTFontGetTypeID(void)
{
  return _CTFontGetTypeID();
}

CGFloat CTFontGetUnderlinePosition(CTFontRef font)
{
  return _CTFontGetUnderlinePosition(font);
}

CGFloat CTFontGetUnderlineThickness(CTFontRef font)
{
  return _CTFontGetUnderlineThickness(font);
}

void CTFontGetVerticalTranslationsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGSize *translations, CFIndex count)
{
}

uint64_t CTFontGetWeight()
{
  return _CTFontGetWeight();
}

CGFloat CTFontGetXHeight(CTFontRef font)
{
  return _CTFontGetXHeight(font);
}

CTLineRef CTLineCreateJustifiedLine(CTLineRef line, CGFloat justificationFactor, double justificationWidth)
{
  return _CTLineCreateJustifiedLine(line, justificationFactor, justificationWidth);
}

CTLineRef CTLineCreateTruncatedLine(CTLineRef line, double width, CTLineTruncationType truncationType, CTLineRef truncationToken)
{
  return _CTLineCreateTruncatedLine(line, width, truncationType, truncationToken);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return _CTLineCreateWithAttributedString(attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  return _CTLineGetBoundsWithOptions(line, options);
}

CFIndex CTLineGetGlyphCount(CTLineRef line)
{
  return _CTLineGetGlyphCount(line);
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return _CTLineGetGlyphRuns(line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  return _CTLineGetImageBounds(line, context);
}

CGFloat CTLineGetOffsetForStringIndex(CTLineRef line, CFIndex charIndex, CGFloat *secondaryOffset)
{
  return _CTLineGetOffsetForStringIndex(line, charIndex, secondaryOffset);
}

double CTLineGetPenOffsetForFlush(CTLineRef line, CGFloat flushFactor, double flushWidth)
{
  return _CTLineGetPenOffsetForFlush(line, flushFactor, flushWidth);
}

CFIndex CTLineGetStringIndexForPosition(CTLineRef line, CGPoint position)
{
  return _CTLineGetStringIndexForPosition(line, position);
}

CFRange CTLineGetStringRange(CTLineRef line)
{
  CFRange StringRange = _CTLineGetStringRange(line);
  CFIndex length = StringRange.length;
  CFIndex location = StringRange.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

double CTLineGetTrailingWhitespaceWidth(CTLineRef line)
{
  return _CTLineGetTrailingWhitespaceWidth(line);
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  return _CTLineGetTypographicBounds(line, ascent, descent, leading);
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return _CTParagraphStyleCreate(settings, settingCount);
}

CTRunDelegateRef CTRunDelegateCreate(const CTRunDelegateCallbacks *callbacks, void *refCon)
{
  return _CTRunDelegateCreate(callbacks, refCon);
}

void CTRunDraw(CTRunRef run, CGContextRef context, CFRange range)
{
}

void CTRunGetAdvances(CTRunRef run, CFRange range, CGSize *buffer)
{
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return _CTRunGetAttributes(run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return _CTRunGetGlyphCount(run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

CGRect CTRunGetImageBounds(CTRunRef run, CGContextRef context, CFRange range)
{
  return _CTRunGetImageBounds(run, context, range);
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

CTRunStatus CTRunGetStatus(CTRunRef run)
{
  return _CTRunGetStatus(run);
}

void CTRunGetStringIndices(CTRunRef run, CFRange range, CFIndex *buffer)
{
}

CFRange CTRunGetStringRange(CTRunRef run)
{
  CFRange StringRange = _CTRunGetStringRange(run);
  CFIndex length = StringRange.length;
  CFIndex location = StringRange.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

CGAffineTransform *__cdecl CTRunGetTextMatrix(CGAffineTransform *__return_ptr retstr, CTRunRef run)
{
  return _CTRunGetTextMatrix(retstr, run);
}

double CTRunGetTypographicBounds(CTRunRef run, CFRange range, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  return _CTRunGetTypographicBounds(run, range, ascent, descent, leading);
}

CTTextTabRef CTTextTabCreate(CTTextAlignment alignment, double location, CFDictionaryRef options)
{
  return _CTTextTabCreate(alignment, location, options);
}

double CTTextTabGetLocation(CTTextTabRef tab)
{
  return _CTTextTabGetLocation(tab);
}

CTLineRef CTTypesetterCreateLine(CTTypesetterRef typesetter, CFRange stringRange)
{
  return _CTTypesetterCreateLine(typesetter, stringRange);
}

CTLineRef CTTypesetterCreateLineWithOffset(CTTypesetterRef typesetter, CFRange stringRange, double offset)
{
  return _CTTypesetterCreateLineWithOffset(typesetter, stringRange, offset);
}

CTTypesetterRef CTTypesetterCreateWithAttributedStringAndOptions(CFAttributedStringRef string, CFDictionaryRef options)
{
  return _CTTypesetterCreateWithAttributedStringAndOptions(string, options);
}

CFIndex CTTypesetterSuggestClusterBreakWithOffset(CTTypesetterRef typesetter, CFIndex startIndex, double width, double offset)
{
  return _CTTypesetterSuggestClusterBreakWithOffset(typesetter, startIndex, width, offset);
}

CFIndex CTTypesetterSuggestLineBreakWithOffset(CTTypesetterRef typesetter, CFIndex startIndex, double width, double offset)
{
  return _CTTypesetterSuggestLineBreakWithOffset(typesetter, startIndex, width, offset);
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return _GSEventIsHardwareKeyboardAttached();
}

id MTLCreateSystemDefaultDevice(void)
{
  return _MTLCreateSystemDefaultDevice();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return _MTLPixelFormatGetInfoForDevice();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return _NSAllMapTableKeys(table);
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return _NSGetSizeAndAlignment(typePtr, sizep, alignp);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSRange v4 = _NSIntersectionRange(range1, range2);
  NSUInteger length = v4.length;
  NSUInteger location = v4.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

void NSLog(NSString *format, ...)
{
}

Protocol *__cdecl NSProtocolFromString(NSString *namestr)
{
  return _NSProtocolFromString(namestr);
}

NSRange NSRangeFromString(NSString *aString)
{
  NSRange v3 = _NSRangeFromString(aString);
  NSUInteger length = v3.length;
  NSUInteger location = v3.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromCGAffineTransform(CGAffineTransform *transform)
{
  return _NSStringFromCGAffineTransform(transform);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return _NSStringFromCGPoint(point);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return _NSStringFromCGRect(rect);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return _NSStringFromCGSize(size);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return _NSStringFromProtocol(proto);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return _NSStringFromRange(range);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSRange v4 = _NSUnionRange(range1, range2);
  NSUInteger length = v4.length;
  NSUInteger location = v4.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

void NSZoneFree(NSZone *zone, void *ptr)
{
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return _NSZoneMalloc(zone, size);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  return _NSZoneRealloc(zone, ptr, size);
}

uint64_t REAssetHandleLoadNow()
{
  return _REAssetHandleLoadNow();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return _REAssetManagerCreateAssetHandle();
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture()
{
  return _RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture();
}

uint64_t RECameraViewDescriptorsComponentAddViewDescriptor()
{
  return _RECameraViewDescriptorsComponentAddViewDescriptor();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct()
{
  return _RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct()
{
  return _RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport()
{
  return _RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport();
}

uint64_t RECameraViewDescriptorsComponentClearCameraViewDescriptors()
{
  return _RECameraViewDescriptorsComponentClearCameraViewDescriptors();
}

uint64_t RECameraViewDescriptorsComponentGetComponentType()
{
  return _RECameraViewDescriptorsComponentGetComponentType();
}

uint64_t RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings()
{
  return _RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings();
}

uint64_t REECSManagerAddDefaultSystems()
{
  return _REECSManagerAddDefaultSystems();
}

uint64_t REEngineGetCurrentTime()
{
  return _REEngineGetCurrentTime();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return _REEntityGetOrAddComponentByClass();
}

uint64_t RERelease()
{
  return _RERelease();
}

uint64_t RERenderFrameSettingsAddGpuSignalEvent()
{
  return _RERenderFrameSettingsAddGpuSignalEvent();
}

uint64_t RERenderFrameSettingsSetTotalTime()
{
  return _RERenderFrameSettingsSetTotalTime();
}

uint64_t RERenderFrameWorkloadCommit()
{
  return _RERenderFrameWorkloadCommit();
}

uint64_t RERenderFrameWorkloadConfigure()
{
  return _RERenderFrameWorkloadConfigure();
}

uint64_t RERenderGraphCreateRenderGraphDataStruct()
{
  return _RERenderGraphCreateRenderGraphDataStruct();
}

uint64_t RERenderGraphDataStructAddFloat4()
{
  return _RERenderGraphDataStructAddFloat4();
}

uint64_t RERenderGraphEmitterAssetExecute()
{
  return _RERenderGraphEmitterAssetExecute();
}

uint64_t RERenderGraphEmitterAssetRegisterProviders()
{
  return _RERenderGraphEmitterAssetRegisterProviders();
}

uint64_t RERenderGraphEmitterAssetUnregisterProviders()
{
  return _RERenderGraphEmitterAssetUnregisterProviders();
}

uint64_t RERenderManagerCreateRenderFrameSettings()
{
  return _RERenderManagerCreateRenderFrameSettings();
}

uint64_t RERenderManagerCreateRenderFrameWorkload()
{
  return _RERenderManagerCreateRenderFrameWorkload();
}

uint64_t RESceneCreate()
{
  return _RESceneCreate();
}

uint64_t RESceneSetRequiresAnchoring()
{
  return _RESceneSetRequiresAnchoring();
}

uint64_t REServiceLocatorGetECSService()
{
  return _REServiceLocatorGetECSService();
}

uint64_t REServiceLocatorGetEngine()
{
  return _REServiceLocatorGetEngine();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return _REServiceLocatorGetRenderManager();
}

uint64_t RPTGetBoundsForView()
{
  return _RPTGetBoundsForView();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return _SCNetworkReachabilityCreateWithAddress(allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return _SCNetworkReachabilitySetDispatchQueue(target, queue);
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return _UIAccessibilityDarkerSystemColorsEnabled();
}

id UIAccessibilityFocusedElement(UIAccessibilityAssistiveTechnologyIdentifier assistiveTechnologyIdentifier)
{
  return _UIAccessibilityFocusedElement(assistiveTechnologyIdentifier);
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return _UIAccessibilityIsBoldTextEnabled();
}

BOOL UIAccessibilityIsInvertColorsEnabled(void)
{
  return _UIAccessibilityIsInvertColorsEnabled();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return _UIAccessibilityIsReduceMotionEnabled();
}

BOOL UIAccessibilityIsReduceTransparencyEnabled(void)
{
  return _UIAccessibilityIsReduceTransparencyEnabled();
}

BOOL UIAccessibilityIsSwitchControlRunning(void)
{
  return _UIAccessibilityIsSwitchControlRunning();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return _UIAccessibilityIsVoiceOverRunning();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

BOOL UIAccessibilityPrefersCrossFadeTransitions(void)
{
  return _UIAccessibilityPrefersCrossFadeTransitions();
}

void UIAccessibilityZoomFocusChanged(UIAccessibilityZoomType type, CGRect frame, UIView *view)
{
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return _UIContentSizeCategoryIsAccessibilityCategory(category);
}

void UIGraphicsBeginImageContext(CGSize size)
{
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

void UIGraphicsPopContext(void)
{
}

void UIGraphicsPushContext(CGContextRef context)
{
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return _UIImageJPEGRepresentation(image, compressionQuality);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return _UIImagePNGRepresentation(image);
}

UIImageSymbolWeight UIImageSymbolWeightForFontWeight(UIFontWeight fontWeight)
{
  return _UIImageSymbolWeightForFontWeight(fontWeight);
}

void UIRectFill(CGRect rect)
{
}

uint64_t _AXSCommandAndControlEnabled()
{
  return __AXSCommandAndControlEnabled();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return __AXSFullKeyboardAccessEnabled();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

NSDictionary *_NSDictionaryOfVariableBindings(NSString *commaSeparatedKeysString, id firstValue, ...)
{
  return __NSDictionaryOfVariableBindings(commaSeparatedKeysString, firstValue);
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return __NSGetExecutablePath(buf, bufsize);
}

uint64_t _UIAccessibilityZoomTouchEnabled()
{
  return __UIAccessibilityZoomTouchEnabled();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return ___error();
}

int __fpclassifyd(double a1)
{
  return ___fpclassifyd(a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  __float2 v3 = ___sincosf_stret(a1);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  result.__float cosval = cosval;
  result.__float sinval = sinval;
  return result;
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return __dyld_get_image_name(image_index);
}

intptr_t _dyld_get_image_vmaddr_slide(uint32_t image_index)
{
  return __dyld_get_image_vmaddr_slide(image_index);
}

uint32_t _dyld_image_count(void)
{
  return __dyld_image_count();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

long double acos(long double __x)
{
  return _acos(__x);
}

uint32_t arc4random(void)
{
  return _arc4random();
}

int asprintf(char **a1, const char *a2, ...)
{
  return _asprintf(a1, a2);
}

long double atan2(long double __y, long double __x)
{
  return _atan2(__y, __x);
}

float atan2f(float a1, float a2)
{
  return _atan2f(a1, a2);
}

void atomic_thread_fence(memory_order a1)
{
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return _class_addMethod(cls, name, imp, types);
}

BOOL class_addProtocol(Class cls, Protocol *protocol)
{
  return _class_addProtocol(cls, protocol);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return _class_copyMethodList(cls, outCount);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return _class_copyProtocolList(cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return _class_getClassMethod(cls, name);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return _class_getInstanceMethod(cls, name);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return _class_getInstanceVariable(cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return _class_getName(cls);
}

Class class_getSuperclass(Class cls)
{
  return _class_getSuperclass(cls);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

int close(int a1)
{
  return _close(a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return _compression_stream_destroy(stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return _compression_stream_init(stream, operation, algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return _compression_stream_process(stream, flags);
}

long double cos(long double __x)
{
  return _cos(__x);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return _crc32(crc, buf, len);
}

int dgtsv_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_doublereal *__dl, __CLPK_doublereal *__d__, __CLPK_doublereal *__du, __CLPK_doublereal *__b, __CLPK_integer *__ldb, __CLPK_integer *__info)
{
  return _dgtsv_(__n, __nrhs, __dl, __d__, __du, __b, __ldb, __info);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return _dispatch_data_apply(data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return _dispatch_data_create(buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return _dispatch_data_create_concat(data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return _dispatch_data_create_map(data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return _dispatch_data_create_subrange(data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return _dispatch_data_get_size(data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return _dispatch_io_create(type, fd, queue, cleanup_handler);
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  return _dispatch_io_get_descriptor(channel);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return _dladdr(a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

int dup(int a1)
{
  return _dup(a1);
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return _ether_ntoa(a1);
}

float exp2f(float a1)
{
  return _exp2f(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

float fmodf(float a1, float a2)
{
  return _fmodf(a1, a2);
}

void free(void *a1)
{
}

int fsync(int a1)
{
  return _fsync(a1);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

int getrlimit(int a1, rlimit *a2)
{
  return _getrlimit(a1, a2);
}

const section_64 *__cdecl getsectbyname(const char *segname, const char *sectname)
{
  return _getsectbyname(segname, sectname);
}

uint8_t *__cdecl getsegmentdata(const mach_header_64 *mhp, const char *segname, unint64_t *size)
{
  return _getsegmentdata(mhp, segname, size);
}

void glBindBuffer(GLenum target, GLuint buffer)
{
}

void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
}

void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
}

void glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
}

void glGenBuffers(GLsizei n, GLuint *buffers)
{
}

long double hypot(long double __x, long double __y)
{
  return _hypot(__x, __y);
}

int inflate(z_streamp strm, int flush)
{
  return _inflate(strm, flush);
}

int inflateEnd(z_streamp strm)
{
  return _inflateEnd(strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return _inflateInit2_(strm, windowBits, version, stream_size);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return _ivar_getOffset(v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return _ivar_getTypeEncoding(v);
}

tm *__cdecl localtime(const time_t *a1)
{
  return _localtime(a1);
}

long double log10(long double __x)
{
  return _log10(__x);
}

long double log2(long double __x)
{
  return _log2(__x);
}

float logf(float a1)
{
  return _logf(a1);
}

uint64_t lroundf(float a1)
{
  return _lroundf(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

char *__cdecl method_copyArgumentType(Method m, unsigned int index)
{
  return _method_copyArgumentType(m, index);
}

char *__cdecl method_copyReturnType(Method m)
{
  return _method_copyReturnType(m);
}

IMP method_getImplementation(Method m)
{
  return _method_getImplementation(m);
}

SEL method_getName(Method m)
{
  return _method_getName(m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return _method_getNumberOfArguments(m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return _method_getTypeEncoding(m);
}

IMP method_setImplementation(Method m, IMP imp)
{
  return _method_setImplementation(m, imp);
}

char *__cdecl mkdtemp(char *a1)
{
  return _mkdtemp(a1);
}

time_t mktime(tm *a1)
{
  return _mktime(a1);
}

long double nextafter(long double __x, long double __y)
{
  return _nextafter(__x, __y);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return _objc_allocateClassPair(superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

Class object_getClass(id a1)
{
  return _object_getClass(a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return _object_getClassName(a1);
}

Ivar object_getInstanceVariable(id obj, const char *name, void **outValue)
{
  return _object_getInstanceVariable(obj, name, outValue);
}

Class object_setClass(id a1, Class a2)
{
  return _object_setClass(a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return _os_unfair_recursive_lock_lock_with_options();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return _os_unfair_recursive_lock_unlock();
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  objc_method_description MethodDescription = _protocol_getMethodDescription(p, aSel, isRequiredMethod, isInstanceMethod);
  types = MethodDescription.types;
  name = MethodDescription.name;
  result.types = types;
  result.name = name;
  return result;
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return _pthread_rwlock_destroy(a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return _pthread_rwlock_init(a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return _pthread_rwlock_rdlock(a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return _pthread_rwlock_unlock(a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return _pthread_rwlock_wrlock(a1);
}

int puts(const char *a1)
{
  return _puts(a1);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

int rand(void)
{
  return _rand();
}

uint64_t random(void)
{
  return _random();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

const char *__cdecl sel_getName(SEL sel)
{
  return _sel_getName(sel);
}

BOOL sel_isEqual(SEL lhs, SEL rhs)
{
  return _sel_isEqual(lhs, rhs);
}

int setrlimit(int a1, const rlimit *a2)
{
  return _setrlimit(a1, a2);
}

long double sin(long double __x)
{
  return _sin(__x);
}

float sinf(float a1)
{
  return _sinf(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  return _sqlite3_changes64(a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return _sqlite3_close_v2(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return _sqlite3_extended_errcode(db);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deallocUninitializedObject()
{
  return _swift_deallocUninitializedObject();
}

uint64_t swift_defaultActor_deallocate()
{
  return _swift_defaultActor_deallocate();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return _swift_dynamicCastUnknownClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return _swift_initEnumMetadataSingleCase();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced()
{
  return _swift_isUniquelyReferenced();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return _swift_setAtReferenceWritableKeyPath();
}

uint64_t swift_setAtWritableKeyPath()
{
  return _swift_setAtWritableKeyPath();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_isCancelled()
{
  return _swift_task_isCancelled();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return _swift_unknownObjectWeakCopyAssign();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return _swift_unknownObjectWeakCopyInit();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return _swift_unknownObjectWeakTakeAssign();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return _swift_unknownObjectWeakTakeInit();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakCopyInit()
{
  return _swift_weakCopyInit();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_weakTakeInit()
{
  return _swift_weakTakeInit();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

float tanhf(float a1)
{
  return _tanhf(a1);
}

int32_t u_charDigitValue(UChar32 c)
{
  return _u_charDigitValue(c);
}

UCharDirection u_charDirection(UChar32 c)
{
  return _u_charDirection(c);
}

UBlockCode ublock_getCode(UChar32 c)
{
  return _ublock_getCode(c);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return _uuid_compare(uu1, uu2);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return _xmlReadMemory(buffer, size, URL, encoding, options);
}

xmlXPathObjectPtr xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  return _xmlXPathEvalExpression(str, ctxt);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return _xmlXPathNewContext(doc);
}

int xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri)
{
  return _xmlXPathRegisterNs(ctxt, prefix, ns_uri);
}

id objc_msgSend_AVAssetAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 AVAssetAndReturnError:];
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGContext(void *a1, const char *a2, ...)
{
  return _[a1 CGContext];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGImageForContentsScale_(void *a1, const char *a2, ...)
{
  return [a1 CGImageForContentsScale:];
}

id objc_msgSend_CGImageForImageData_(void *a1, const char *a2, ...)
{
  return [a1 CGImageForImageData];
}

id objc_msgSend_CGImageForNaturalSize(void *a1, const char *a2, ...)
{
  return _[a1 CGImageForNaturalSize];
}

id objc_msgSend_CGImageForSize_(void *a1, const char *a2, ...)
{
  return [a1 CGImageForSize:];
}

id objc_msgSend_CGImageForSize_inContext_orContentsScaleProvider_(void *a1, const char *a2, ...)
{
  return [a1 CGImageForSize:inContext:orContentsScaleProvider:];
}

id objc_msgSend_CGImageOfAnySize(void *a1, const char *a2, ...)
{
  return _[a1 CGImageOfAnySize];
}

id objc_msgSend_CGImageOfLargestSafeSize(void *a1, const char *a2, ...)
{
  return _[a1 CGImageOfLargestSafeSize];
}

id objc_msgSend_CGImageSource(void *a1, const char *a2, ...)
{
  return _[a1 CGImageSource];
}

id objc_msgSend_CGPDFDocument(void *a1, const char *a2, ...)
{
  return _[a1 CGPDFDocument];
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _[a1 CGPath];
}

id objc_msgSend_CGPointValue(void *a1, const char *a2, ...)
{
  return _[a1 CGPointValue];
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _[a1 CGRectValue];
}

id objc_msgSend_CRC(void *a1, const char *a2, ...)
{
  return _[a1 CRC];
}

id objc_msgSend_CRLAXJumpToFormatOptionsString(void *a1, const char *a2, ...)
{
  return _[a1 CRLAXJumpToFormatOptionsString];
}

id objc_msgSend_CRLAXShowFormatOptionsString(void *a1, const char *a2, ...)
{
  return _[a1 CRLAXShowFormatOptionsString];
}

id objc_msgSend_CRLBoardRealTimeNewParticipantDidJoinSession(void *a1, const char *a2, ...)
{
  return _[a1 CRLBoardRealTimeNewParticipantDidJoinSession];
}

id objc_msgSend_CRLBoardRealTimeStateDidChange(void *a1, const char *a2, ...)
{
  return _[a1 CRLBoardRealTimeStateDidChange];
}

id objc_msgSend_CRLCommandControllerDidCloseUndoGroup(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerDidCloseUndoGroup];
}

id objc_msgSend_CRLCommandControllerDidOpenUndoGroup(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerDidOpenUndoGroup];
}

id objc_msgSend_CRLCommandControllerDidRedo(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerDidRedo];
}

id objc_msgSend_CRLCommandControllerDidUndo(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerDidUndo];
}

id objc_msgSend_CRLCommandControllerHistoryStateDidChange(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerHistoryStateDidChange];
}

id objc_msgSend_CRLCommandControllerWillCloseUndoGroup(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerWillCloseUndoGroup];
}

id objc_msgSend_CRLCommandControllerWillRedo(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerWillRedo];
}

id objc_msgSend_CRLCommandControllerWillUndo(void *a1, const char *a2, ...)
{
  return _[a1 CRLCommandControllerWillUndo];
}

id objc_msgSend_CRLMovieButtonFillColor(void *a1, const char *a2, ...)
{
  return _[a1 CRLMovieButtonFillColor];
}

id objc_msgSend_CRLSpatialLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 CRLSpatialLabelColor];
}

id objc_msgSend_CRLiOSSceneDidBecomeActive(void *a1, const char *a2, ...)
{
  return _[a1 CRLiOSSceneDidBecomeActive];
}

id objc_msgSend_CRLiOSSceneDidEnterBackground(void *a1, const char *a2, ...)
{
  return _[a1 CRLiOSSceneDidEnterBackground];
}

id objc_msgSend_CRLiOSSceneWillEnterForeground(void *a1, const char *a2, ...)
{
  return _[a1 CRLiOSSceneWillEnterForeground];
}

id objc_msgSend_CRLiOSSceneWillResignActive(void *a1, const char *a2, ...)
{
  return _[a1 CRLiOSSceneWillResignActive];
}

id objc_msgSend_GLPoint2DForAttribute_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 GLPoint2DForAttribute:atIndex:];
}

id objc_msgSend_GLPoint3DForAttribute_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 GLPoint3DForAttribute:atIndex:];
}

id objc_msgSend_GLPoint4DForAttribute_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 GLPoint4DForAttribute:atIndex:];
}

id objc_msgSend_GLfloatForAttribute_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 GLfloatForAttribute:atIndex:];
}

id objc_msgSend_HUDView(void *a1, const char *a2, ...)
{
  return _[a1 HUDView];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [a1 JSONObjectWithData:options:error:];
}

id objc_msgSend_PKInputPoint(void *a1, const char *a2, ...)
{
  return _[a1 PKInputPoint];
}

id objc_msgSend_PKInputType(void *a1, const char *a2, ...)
{
  return _[a1 PKInputType];
}

id objc_msgSend_PNGRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 PNGRepresentation];
}

id objc_msgSend_UIColor(void *a1, const char *a2, ...)
{
  return _[a1 UIColor];
}

id objc_msgSend_UIImage(void *a1, const char *a2, ...)
{
  return _[a1 UIImage];
}

id objc_msgSend_UIMenuElement(void *a1, const char *a2, ...)
{
  return _[a1 UIMenuElement];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:];
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:isDirectory:];
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathExtension:];
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return [a1 URLForDirectory:inDomain:appropriateForURL:create:error:];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:withExtension:];
}

id objc_msgSend_URLFragmentAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLFragmentAllowedCharacterSet];
}

id objc_msgSend_URLRequest(void *a1, const char *a2, ...)
{
  return _[a1 URLRequest];
}

id objc_msgSend_URLWithDataRepresentation_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 URLWithDataRepresentation:relativeToURL:];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_URLs(void *a1, const char *a2, ...)
{
  return _[a1 URLs];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDDescription(void *a1, const char *a2, ...)
{
  return _[a1 UUIDDescription];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend___accessibilityHitTest_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 __accessibilityHitTest:withEvent:];
}

id objc_msgSend__accessibilityBoundsForRange_(void *a1, const char *a2, ...)
{
  return [a1 _accessibilityBoundsForRange:];
}

id objc_msgSend__accessibilityClearChildren(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityClearChildren];
}

id objc_msgSend__accessibilityFrameOfPlayPauseButton(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityFrameOfPlayPauseButton];
}

id objc_msgSend__accessibilityHitTest_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityHitTest:withEvent:");
}

id objc_msgSend__accessibilityMainWindow(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityMainWindow];
}

id objc_msgSend__accessibilityParentTableView(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityParentTableView];
}

id objc_msgSend__accessibilityRangeForLineNumberAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityRangeForLineNumberAndColumn:");
}

id objc_msgSend__accessibilitySelectedTextRange(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilitySelectedTextRange];
}

id objc_msgSend__accessibilitySetSortPriority_(void *a1, const char *a2, ...)
{
  return [a1 _accessibilitySetSortPriority:];
}

id objc_msgSend__accessibilitySpeakThisString(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilitySpeakThisString];
}

id objc_msgSend__accessibilitySpeakThisStringValue(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilitySpeakThisStringValue];
}

id objc_msgSend__accessibilityTextOperationAction_(void *a1, const char *a2, ...)
{
  return [a1 _accessibilityTextOperationAction];
}

id objc_msgSend__accessibilityTextOperations(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityTextOperations];
}

id objc_msgSend__accessibilityTextViewTextOperationResponder(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityTextViewTextOperationResponder];
}

id objc_msgSend__accessibilityValueForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityValueForRange:");
}

id objc_msgSend__actionToDisconnectConnectionLineFromRep(void *a1, const char *a2, ...)
{
  return _[a1 _actionToDisconnectConnectionLineFromRep];
}

id objc_msgSend__addBoundariesFromRect_toXBoundarySet_andYBoundarySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBoundariesFromRect:toXBoundarySet:andYBoundarySet:");
}

id objc_msgSend__addPathSegment_point_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPathSegment:point:");
}

id objc_msgSend__addStrokePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addStrokePoint:");
}

id objc_msgSend__adjustActionNamesForSet_(void *a1, const char *a2, ...)
{
  return [a1 _adjustActionNamesForSet];
}

id objc_msgSend__adjustRepOrderForMiniFormatterWith_forResults_withFormatterViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustRepOrderForMiniFormatterWith:forResults:withFormatterViews:");
}

id objc_msgSend__anchorPointForTexture(void *a1, const char *a2, ...)
{
  return _[a1 _anchorPointForTexture];
}

id objc_msgSend__appendArcSegmentWithCenter_radius_angle1_angle2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendArcSegmentWithCenter:radius:angle1:angle2:");
}

id objc_msgSend__aspectRatio(void *a1, const char *a2, ...)
{
  return _[a1 _aspectRatio];
}

id objc_msgSend__atomicIncrementAssertCount(void *a1, const char *a2, ...)
{
  return _[a1 _atomicIncrementAssertCount];
}

id objc_msgSend__baseValues(void *a1, const char *a2, ...)
{
  return _[a1 _baseValues];
}

id objc_msgSend__baselinePath(void *a1, const char *a2, ...)
{
  return _[a1 _baselinePath];
}

id objc_msgSend__boundingFrame(void *a1, const char *a2, ...)
{
  return _[a1 _boundingFrame];
}

id objc_msgSend__bounds(void *a1, const char *a2, ...)
{
  return _[a1 _bounds];
}

id objc_msgSend__buildLayoutSearchResultsForRootSearchTargetsInRange_resultsArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildLayoutSearchResultsForRootSearchTargetsInRange:resultsArray:");
}

id objc_msgSend__checkPointForValidity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkPointForValidity:");
}

id objc_msgSend__clipMaskedStrokes(void *a1, const char *a2, ...)
{
  return _[a1 _clipMaskedStrokes];
}

id objc_msgSend__close(void *a1, const char *a2, ...)
{
  return _[a1 _close];
}

id objc_msgSend__closeStreamReadChannel(void *a1, const char *a2, ...)
{
  return _[a1 _closeStreamReadChannel];
}

id objc_msgSend__completedPoints(void *a1, const char *a2, ...)
{
  return _[a1 _completedPoints];
}

id objc_msgSend__connectionActionMidpointsFromBoundaries_(void *a1, const char *a2, ...)
{
  return [a1 _connectionActionMidpointsFromBoundaries:];
}

id objc_msgSend__connectionLineConnection(void *a1, const char *a2, ...)
{
  return _[a1 _connectionLineConnection];
}

id objc_msgSend__connectionLineConnectionDescription(void *a1, const char *a2, ...)
{
  return _[a1 _connectionLineConnectionDescription];
}

id objc_msgSend__containedHandwrittenText(void *a1, const char *a2, ...)
{
  return _[a1 _containedHandwrittenText];
}

id objc_msgSend__containedMathematicalText(void *a1, const char *a2, ...)
{
  return _[a1 _containedMathematicalText];
}

id objc_msgSend__createDirectoryWithSignature_subdirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDirectoryWithSignature:subdirectory:error:");
}

id objc_msgSend__crlaxAccessibilityElementFirstForFocus_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxAccessibilityElementFirstForFocus:];
}

id objc_msgSend__crlaxAccessibilityTableViewSwitch(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAccessibilityTableViewSwitch];
}

id objc_msgSend__crlaxActivationShouldBeginEditing_shouldHandleCanvasSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxActivationShouldBeginEditing:shouldHandleCanvasSelection:");
}

id objc_msgSend__crlaxAddArrangeActionsToArray_forRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxAddArrangeActionsToArray:forRep:");
}

id objc_msgSend__crlaxAddCategoryMethod_toClass_isClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxAddCategoryMethod:toClass:isClass:");
}

id objc_msgSend__crlaxAddMultiSelectionActionsToArray_forRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxAddMultiSelectionActionsToArray:forRep:");
}

id objc_msgSend__crlaxAddSelectionActionsToArray_forRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxAddSelectionActionsToArray:forRep:");
}

id objc_msgSend__crlaxAlignSelectionToBottom(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToBottom];
}

id objc_msgSend__crlaxAlignSelectionToCenter(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToCenter];
}

id objc_msgSend__crlaxAlignSelectionToLeft(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToLeft];
}

id objc_msgSend__crlaxAlignSelectionToMiddle(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToMiddle];
}

id objc_msgSend__crlaxAlignSelectionToRight(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToRight];
}

id objc_msgSend__crlaxAlignSelectionToTop(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlignSelectionToTop];
}

id objc_msgSend__crlaxAllowedToEditMask(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAllowedToEditMask];
}

id objc_msgSend__crlaxAlternateTextOperationProvider(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAlternateTextOperationProvider];
}

id objc_msgSend__crlaxApplyAccessibilityInfo(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxApplyAccessibilityInfo];
}

id objc_msgSend__crlaxAssistiveTechnologyPerformingScroll(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAssistiveTechnologyPerformingScroll];
}

id objc_msgSend__crlaxAvailableRepsForConnecting(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxAvailableRepsForConnecting];
}

id objc_msgSend__crlaxBidirectionallyConnectedLayoutsViaMultipleUnidirectionalConnectionLines(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxBidirectionallyConnectedLayoutsViaMultipleUnidirectionalConnectionLines];
}

id objc_msgSend__crlaxBidirectionallyConnectedLayoutsViaSingleBidirectionalConnectionLines(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxBidirectionallyConnectedLayoutsViaSingleBidirectionalConnectionLines];
}

id objc_msgSend__crlaxCachedApproximateColorDescription(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxCachedApproximateColorDescription];
}

id objc_msgSend__crlaxCanBeSelected(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxCanBeSelected];
}

id objc_msgSend__crlaxCanBeSelectedWithSelectableRepReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxCanBeSelectedWithSelectableRepReference:");
}

id objc_msgSend__crlaxCanvas(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxCanvas];
}

id objc_msgSend__crlaxCategoryRankForKnobElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxCategoryRankForKnobElement:");
}

id objc_msgSend__crlaxChildrenCache(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxChildrenCache];
}

id objc_msgSend__crlaxCollaborationModifiers(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxCollaborationModifiers];
}

id objc_msgSend__crlaxCollaborationOccurredTimer(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxCollaborationOccurredTimer];
}

id objc_msgSend__crlaxColorDescriptionForAttributes_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxColorDescriptionForAttributes:];
}

id objc_msgSend__crlaxCompareCGFloat_toCGFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxCompareCGFloat:toCGFloat:");
}

id objc_msgSend__crlaxCondenseAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxCondenseAttributedString];
}

id objc_msgSend__crlaxConnectionDescriptionForHead_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxConnectionDescriptionForHead:");
}

id objc_msgSend__crlaxConnectionLineLayout(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxConnectionLineLayout];
}

id objc_msgSend__crlaxConnectionLinesConnectingToLayout_inDirection_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxConnectionLinesConnectingToLayout:inDirection:];
}

id objc_msgSend__crlaxContainsMath(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxContainsMath];
}

id objc_msgSend__crlaxConvertPointToRulerValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxConvertPointToRulerValue:");
}

id objc_msgSend__crlaxCurrentSearchReferenceForRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxCurrentSearchReferenceForRotor:");
}

id objc_msgSend__crlaxCustomActionForNavigatingToRepWithLayout_inRotorCategory_disambiguatedDescriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxCustomActionForNavigatingToRepWithLayout:inRotorCategory:disambiguatedDescriptions:");
}

id objc_msgSend__crlaxCustomEdgeConnectionFormatStringForHead_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxCustomEdgeConnectionFormatStringForHead];
}

id objc_msgSend__crlaxDescriptionForVerticalAlignment(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxDescriptionForVerticalAlignment];
}

id objc_msgSend__crlaxDescriptionOfInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxDescriptionOfInfos:");
}

id objc_msgSend__crlaxDeselectWithSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxDeselectWithSelectionPath:");
}

id objc_msgSend__crlaxDoneButton(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxDoneButton];
}

id objc_msgSend__crlaxDrawableInfoAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxDrawableInfoAccessibility];
}

id objc_msgSend__crlaxEditingTextRep(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxEditingTextRep];
}

id objc_msgSend__crlaxElementAccessibilityChildren(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxElementAccessibilityChildren];
}

id objc_msgSend__crlaxElementAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxElementAtIndex:];
}

id objc_msgSend__crlaxElementAtIndex_associatedPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxElementAtIndex:associatedPoints:");
}

id objc_msgSend__crlaxElementCount(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxElementCount];
}

id objc_msgSend__crlaxElementForMovingToSelection(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxElementForMovingToSelection];
}

id objc_msgSend__crlaxFirstSelectedRepInCanvasEditor_preferExplicitlyFocusedReps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxFirstSelectedRepInCanvasEditor:preferExplicitlyFocusedReps:");
}

id objc_msgSend__crlaxFrame(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxFrame];
}

id objc_msgSend__crlaxFreehandDrawingInfo(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxFreehandDrawingInfo];
}

id objc_msgSend__crlaxFreehandDrawingSummary(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxFreehandDrawingSummary];
}

id objc_msgSend__crlaxGetDictionaryForLineNumber_columnNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxGetDictionaryForLineNumber:columnNumber:");
}

id objc_msgSend__crlaxGetEffectiveLineNumber_columnNumber_forPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxGetEffectiveLineNumber:columnNumber:forPoint:");
}

id objc_msgSend__crlaxGetEffectiveLineNumber_columnNumber_forPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxGetEffectiveLineNumber:columnNumber:forPosition:");
}

id objc_msgSend__crlaxGoToArrange(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxGoToArrange];
}

id objc_msgSend__crlaxGoToFormatInspector(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxGoToFormatInspector];
}

id objc_msgSend__crlaxGradientStops(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxGradientStops];
}

id objc_msgSend__crlaxGradientType(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxGradientType];
}

id objc_msgSend__crlaxHUDString(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxHUDString];
}

id objc_msgSend__crlaxHasEnqueuedBlockToLoadChildren(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxHasEnqueuedBlockToLoadChildren];
}

id objc_msgSend__crlaxHasZeroArcs(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxHasZeroArcs];
}

id objc_msgSend__crlaxHeadingsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxHeadingsRotor];
}

id objc_msgSend__crlaxInfferredHeadingRangeForParagraphIndex_withBaseFontSize_excludingCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxInfferredHeadingRangeForParagraphIndex:withBaseFontSize:excludingCharacters:");
}

id objc_msgSend__crlaxInsertLeafElements_intoArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxInsertLeafElements:intoArray:");
}

id objc_msgSend__crlaxInstallSafeCategoryOnClass_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxInstallSafeCategoryOnClass];
}

id objc_msgSend__crlaxInteractionDidStart(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxInteractionDidStart];
}

id objc_msgSend__crlaxInteractionDidStop(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxInteractionDidStop];
}

id objc_msgSend__crlaxInteractiveCanvasController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxInteractiveCanvasController];
}

id objc_msgSend__crlaxInvalidateChildrenOnParentCanvasView(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxInvalidateChildrenOnParentCanvasView];
}

id objc_msgSend__crlaxInvalidateKnobAccessibilityElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxInvalidateKnobAccessibilityElements:");
}

id objc_msgSend__crlaxIsBeingDeallocated(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsBeingDeallocated];
}

id objc_msgSend__crlaxIsBuildingChildrenCache(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsBuildingChildrenCache];
}

id objc_msgSend__crlaxIsCircular(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsCircular];
}

id objc_msgSend__crlaxIsDiamond(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsDiamond];
}

id objc_msgSend__crlaxIsDictating(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsDictating];
}

id objc_msgSend__crlaxIsEditMenuAllowedToAppear(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsEditMenuAllowedToAppear];
}

id objc_msgSend__crlaxIsLineSegment(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsLineSegment];
}

id objc_msgSend__crlaxIsObservingRemoteCommands(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsObservingRemoteCommands];
}

id objc_msgSend__crlaxIsPerformingBlockWhilePreventingDisplayOfCurrentValueHUD(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsPerformingBlockWhilePreventingDisplayOfCurrentValueHUD];
}

id objc_msgSend__crlaxIsRectangular(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsRectangular];
}

id objc_msgSend__crlaxIsTearingDown(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsTearingDown];
}

id objc_msgSend__crlaxIsTriangular(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxIsTriangular];
}

id objc_msgSend__crlaxKeyCorrespondsToPropertyRequiringAccessToCanvas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxKeyCorrespondsToPropertyRequiringAccessToCanvas:");
}

id objc_msgSend__crlaxKnobAccessibilityElementsCache(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxKnobAccessibilityElementsCache];
}

id objc_msgSend__crlaxKnobElementCacheIsInvalid(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxKnobElementCacheIsInvalid];
}

id objc_msgSend__crlaxKnobTrackerClass(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxKnobTrackerClass];
}

id objc_msgSend__crlaxLastAnnouncedHUDString(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastAnnouncedHUDString];
}

id objc_msgSend__crlaxLastBoundsAnnouncementTime(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastBoundsAnnouncementTime];
}

id objc_msgSend__crlaxLastElementIsClose(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastElementIsClose];
}

id objc_msgSend__crlaxLastElementIsMove(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastElementIsMove];
}

id objc_msgSend__crlaxLastSpeakThisVisibleStorageOffset(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastSpeakThisVisibleStorageOffset];
}

id objc_msgSend__crlaxLastUpdatedMenuItemsWhilePreventingActualItemsMutation(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLastUpdatedMenuItemsWhilePreventingActualItemsMutation];
}

id objc_msgSend__crlaxLayoutsConnectedByStrictlyInboundConnectionLines(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLayoutsConnectedByStrictlyInboundConnectionLines];
}

id objc_msgSend__crlaxLayoutsConnectedByStrictlyOutboundConnectionLines(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLayoutsConnectedByStrictlyOutboundConnectionLines];
}

id objc_msgSend__crlaxLeafChildren(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxLeafChildren];
}

id objc_msgSend__crlaxLineNumberAndColumnForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxLineNumberAndColumnForPosition:");
}

id objc_msgSend__crlaxLocalizedDescriptionForPattern_omittingStroke_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxLocalizedDescriptionForPattern:omittingStroke:");
}

id objc_msgSend__crlaxMiniFormatterVC(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxMiniFormatterVC];
}

id objc_msgSend__crlaxMovieInfo(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxMovieInfo];
}

id objc_msgSend__crlaxNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNavigationController];
}

id objc_msgSend__crlaxNavigationTransitionView(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNavigationTransitionView];
}

id objc_msgSend__crlaxNumberOfArcs(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNumberOfArcs];
}

id objc_msgSend__crlaxNumberOfConsecutiveLineSegments(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNumberOfConsecutiveLineSegments];
}

id objc_msgSend__crlaxNumberOfLineSegments(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNumberOfLineSegments];
}

id objc_msgSend__crlaxNumberOfSides(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxNumberOfSides];
}

id objc_msgSend__crlaxParentCanvasView(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxParentCanvasView];
}

id objc_msgSend__crlaxParentInteractiveCanvasController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxParentInteractiveCanvasController];
}

id objc_msgSend__crlaxParentShapeHint(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxParentShapeHint];
}

id objc_msgSend__crlaxPostCollaborationOccurredSound(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxPostCollaborationOccurredSound];
}

id objc_msgSend__crlaxPostCollaborationOccurredSoundRepeatedly_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxPostCollaborationOccurredSoundRepeatedly];
}

id objc_msgSend__crlaxProcessStringForObjectReplacements_rangeOffset_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxProcessStringForObjectReplacements:rangeOffset:];
}

id objc_msgSend__crlaxRegisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxRegisterForNotifications];
}

id objc_msgSend__crlaxRegisteredLinkedTextContainerElements(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxRegisteredLinkedTextContainerElements];
}

id objc_msgSend__crlaxRepContainerElementCache(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxRepContainerElementCache];
}

id objc_msgSend__crlaxRepForConnectionLineMapping(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxRepForConnectionLineMapping];
}

id objc_msgSend__crlaxRespondsToSelector_fromExtrasProtocol_skipAssertions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxRespondsToSelector:fromExtrasProtocol:skipAssertions:");
}

id objc_msgSend__crlaxScrollAndAnnounceSearchReference_forRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxScrollAndAnnounceSearchReference:forRotor:");
}

id objc_msgSend__crlaxSelectedRepsInCanvasEditor_preferExplicitlyFocusedReps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSelectedRepsInCanvasEditor:preferExplicitlyFocusedReps:");
}

id objc_msgSend__crlaxSelectionAnnouncementTimer(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxSelectionAnnouncementTimer];
}

id objc_msgSend__crlaxSelectionWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSelectionWithRange:");
}

id objc_msgSend__crlaxSetAssistiveTechnologyPerformingScroll_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetAssistiveTechnologyPerformingScroll:];
}

id objc_msgSend__crlaxSetBeingDeallocated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetBeingDeallocated:");
}

id objc_msgSend__crlaxSetBuildingChildrenCache_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetBuildingChildrenCache:];
}

id objc_msgSend__crlaxSetCachedApproximateColorDescription_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetCachedApproximateColorDescription];
}

id objc_msgSend__crlaxSetChildrenCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetChildrenCache:");
}

id objc_msgSend__crlaxSetCollaborationModifiers_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetCollaborationModifiers];
}

id objc_msgSend__crlaxSetCollaborationOccurredTimer_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetCollaborationOccurredTimer:];
}

id objc_msgSend__crlaxSetHasEnqueuedBlockToLoadChildren_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetHasEnqueuedBlockToLoadChildren];
}

id objc_msgSend__crlaxSetIsPerformingBlockWhilePreventingDisplayOfCurrentValueHUD_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetIsPerformingBlockWhilePreventingDisplayOfCurrentValueHUD:");
}

id objc_msgSend__crlaxSetIsTearingDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetIsTearingDown:");
}

id objc_msgSend__crlaxSetKnobAccessibilityElementsCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetKnobAccessibilityElementsCache:");
}

id objc_msgSend__crlaxSetKnobElementCacheIsInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetKnobElementCacheIsInvalid:");
}

id objc_msgSend__crlaxSetLastBoundsAnnouncementTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetLastBoundsAnnouncementTime:");
}

id objc_msgSend__crlaxSetLastSpeakThisVisibleStorageOffset_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetLastSpeakThisVisibleStorageOffset];
}

id objc_msgSend__crlaxSetLastUpdatedMenuItemsWhilePreventingActualItemsMutation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetLastUpdatedMenuItemsWhilePreventingActualItemsMutation:");
}

id objc_msgSend__crlaxSetParentInteractiveCanvasController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetParentInteractiveCanvasController:");
}

id objc_msgSend__crlaxSetPerformingUndoOrRedo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetPerformingUndoOrRedo:");
}

id objc_msgSend__crlaxSetRegisteredLinkedTextContainerElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetRegisteredLinkedTextContainerElements:");
}

id objc_msgSend__crlaxSetRepContainerElementCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetRepContainerElementCache:");
}

id objc_msgSend__crlaxSetSelectionAnnouncmentTimer_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetSelectionAnnouncmentTimer:];
}

id objc_msgSend__crlaxSetShapeContainedTextRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetShapeContainedTextRep:");
}

id objc_msgSend__crlaxSetShouldForceIsTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetShouldForceIsTracking:");
}

id objc_msgSend__crlaxSetShouldPreventAccessToCanvas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetShouldPreventAccessToCanvas:");
}

id objc_msgSend__crlaxSetShouldPreventMakingVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetShouldPreventMakingVisible:");
}

id objc_msgSend__crlaxSetShouldPreventMutatingItems_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetShouldPreventMutatingItems:];
}

id objc_msgSend__crlaxSetShouldSkipSelectionChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetShouldSkipSelectionChangedNotification:");
}

id objc_msgSend__crlaxSetStoredHeadingsRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetStoredHeadingsRotor:");
}

id objc_msgSend__crlaxSetStoredHeadingsRotorSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetStoredHeadingsRotorSearchController:");
}

id objc_msgSend__crlaxSetStoredHyperlinksRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetStoredHyperlinksRotor:");
}

id objc_msgSend__crlaxSetStoredHyperlinksRotorSearchController_(void *a1, const char *a2, ...)
{
  return [_crlaxSetStoredHyperlinksRotorSearchController:];
}

id objc_msgSend__crlaxSetStoredLabel_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetStoredLabel];
}

id objc_msgSend__crlaxSetStoredMisspelledWordsRotor_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetStoredMisspelledWordsRotor];
}

id objc_msgSend__crlaxSetStoredMisspelledWordsRotorSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetStoredMisspelledWordsRotorSearchController:");
}

id objc_msgSend__crlaxSetStoredNearbyElementsRotor_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSetStoredNearbyElementsRotor];
}

id objc_msgSend__crlaxSetStoredNearbyElementsRotorSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxSetStoredNearbyElementsRotorSearchController:");
}

id objc_msgSend__crlaxShadowAngle(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShadowAngle];
}

id objc_msgSend__crlaxShadowColor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShadowColor];
}

id objc_msgSend__crlaxShapeContainedTextRep(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShapeContainedTextRep];
}

id objc_msgSend__crlaxShouldActuallyPreventMakingVisible(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldActuallyPreventMakingVisible];
}

id objc_msgSend__crlaxShouldForceIsTracking(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldForceIsTracking];
}

id objc_msgSend__crlaxShouldPreventAccessToCanvas(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldPreventAccessToCanvas];
}

id objc_msgSend__crlaxShouldPreventMakingVisible(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldPreventMakingVisible];
}

id objc_msgSend__crlaxShouldPreventMutatingItems(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldPreventMutatingItems];
}

id objc_msgSend__crlaxShouldSkipSelectionChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxShouldSkipSelectionChangedNotification];
}

id objc_msgSend__crlaxSmartPathSourceForAdjustment(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxSmartPathSourceForAdjustment];
}

id objc_msgSend__crlaxSnappedValueIfApplicableFromUnscaledCanvasPosition_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxSnappedValueIfApplicableFromUnscaledCanvasPosition:];
}

id objc_msgSend__crlaxSpeakThisVisibleStorageOffset(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxSpeakThisVisibleStorageOffset];
}

id objc_msgSend__crlaxStoredCommentsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredCommentsRotor];
}

id objc_msgSend__crlaxStoredCommentsRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredCommentsRotorSearchController];
}

id objc_msgSend__crlaxStoredHeadingsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHeadingsRotor];
}

id objc_msgSend__crlaxStoredHeadingsRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHeadingsRotorSearchController];
}

id objc_msgSend__crlaxStoredHighlightsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHighlightsRotor];
}

id objc_msgSend__crlaxStoredHighlightsRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHighlightsRotorSearchController];
}

id objc_msgSend__crlaxStoredHyperlinksRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHyperlinksRotor];
}

id objc_msgSend__crlaxStoredHyperlinksRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredHyperlinksRotorSearchController];
}

id objc_msgSend__crlaxStoredLabel(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredLabel];
}

id objc_msgSend__crlaxStoredMisspelledWordsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredMisspelledWordsRotor];
}

id objc_msgSend__crlaxStoredMisspelledWordsRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredMisspelledWordsRotorSearchController];
}

id objc_msgSend__crlaxStoredNearbyElementsRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredNearbyElementsRotor];
}

id objc_msgSend__crlaxStoredNearbyElementsRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredNearbyElementsRotorSearchController];
}

id objc_msgSend__crlaxStoredTrackedChangesRotor(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredTrackedChangesRotor];
}

id objc_msgSend__crlaxStoredTrackedChangesRotorSearchController(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStoredTrackedChangesRotorSearchController];
}

id objc_msgSend__crlaxStrokeDescription(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStrokeDescription];
}

id objc_msgSend__crlaxStrokePatternName(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxStrokePatternName];
}

id objc_msgSend__crlaxTextIsEditable(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxTextIsEditable];
}

id objc_msgSend__crlaxTimeOfLastHUDAnnouncement(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxTimeOfLastHUDAnnouncement];
}

id objc_msgSend__crlaxTopPalette(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxTopPalette];
}

id objc_msgSend__crlaxUnregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxUnregisterForNotifications];
}

id objc_msgSend__crlaxUpdateInferredBaseFontSize(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxUpdateInferredBaseFontSize];
}

id objc_msgSend__crlaxUpdatePathSourceLabelForType_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxUpdatePathSourceLabelForType:];
}

id objc_msgSend__crlaxUpdateSelectionWithRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxUpdateSelectionWithRep:");
}

id objc_msgSend__crlaxValidatedValueForKey_expectedClass_expectedTypeEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxValidatedValueForKey:expectedClass:expectedTypeEncoding:");
}

id objc_msgSend__crlaxValidatedValueForKey_expectedClass_possibleExpectedTypeEncodings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_crlaxValidatedValueForKey:expectedClass:possibleExpectedTypeEncodings:");
}

id objc_msgSend__crlaxVisuallyPointsAtHead(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxVisuallyPointsAtHead];
}

id objc_msgSend__crlaxVisuallyPointsAtTail(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxVisuallyPointsAtTail];
}

id objc_msgSend__crlaxWPSelectionClass(void *a1, const char *a2, ...)
{
  return _[a1 _crlaxWPSelectionClass];
}

id objc_msgSend__crlaxZoomToShowRepForLayoutAndFocus_(void *a1, const char *a2, ...)
{
  return [a1 _crlaxZoomToShowRepForLayoutAndFocus:];
}

id objc_msgSend__currentDataIntersectionWithOffset_length_isReadDone_(void *a1, const char *a2, ...)
{
  return [_currentDataIntersectionWithOffset:length:isReadDone:];
}

id objc_msgSend__deviceCurveToPoint_controlPoint1_controlPoint2_elementLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceCurveToPoint:controlPoint1:controlPoint2:elementLength:");
}

id objc_msgSend__deviceLineToPoint_(void *a1, const char *a2, ...)
{
  return [a1 _deviceLineToPoint:];
}

id objc_msgSend__deviceMoveToPoint_(void *a1, const char *a2, ...)
{
  return [a1 _deviceMoveToPoint:];
}

id objc_msgSend__disconnectionActionTestValuesFromBoundaries_withCanvasSnapRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectionActionTestValuesFromBoundaries:withCanvasSnapRadius:");
}

id objc_msgSend__dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 _dispatchQueue];
}

id objc_msgSend__dispatchTimer(void *a1, const char *a2, ...)
{
  return _[a1 _dispatchTimer];
}

id objc_msgSend__doPath(void *a1, const char *a2, ...)
{
  return _[a1 _doPath];
}

id objc_msgSend__dragAnnouncementStringForDiff_(void *a1, const char *a2, ...)
{
  return [a1 _dragAnnouncementStringForDiff];
}

id objc_msgSend__drawingAddPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawingAddPoint:");
}

id objc_msgSend__edgeWidth(void *a1, const char *a2, ...)
{
  return _[a1 _edgeWidth];
}

id objc_msgSend__eraseWithEraserStroke_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eraseWithEraserStroke:");
}

id objc_msgSend__estimationUpdateIndex(void *a1, const char *a2, ...)
{
  return _[a1 _estimationUpdateIndex];
}

id objc_msgSend__existingInteractionForWindowScene_(void *a1, const char *a2, ...)
{
  return [a1 _existingInteractionForWindowScene:];
}

id objc_msgSend__firstElementForUpcomingPageTurn(void *a1, const char *a2, ...)
{
  return _[a1 _firstElementForUpcomingPageTurn];
}

id objc_msgSend__firstElementForUpcomingScreenChange(void *a1, const char *a2, ...)
{
  return _[a1 _firstElementForUpcomingScreenChange];
}

id objc_msgSend__firstResultInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstResultInDirection:");
}

id objc_msgSend__flags(void *a1, const char *a2, ...)
{
  return _[a1 _flags];
}

id objc_msgSend__frame(void *a1, const char *a2, ...)
{
  return _[a1 _frame];
}

id objc_msgSend__getAccessibleAbsolutePositionOfKnob(void *a1, const char *a2, ...)
{
  return _[a1 _getAccessibleAbsolutePositionOfKnob];
}

id objc_msgSend__getHeadKnobArrowDescriptionForLine(void *a1, const char *a2, ...)
{
  return _[a1 _getHeadKnobArrowDescriptionForLine];
}

id objc_msgSend__getTailKnobArrowDescriptionForLine(void *a1, const char *a2, ...)
{
  return _[a1 _getTailKnobArrowDescriptionForLine];
}

id objc_msgSend__getUserInputLabelForShapeControlKnob(void *a1, const char *a2, ...)
{
  return _[a1 _getUserInputLabelForShapeControlKnob];
}

id objc_msgSend__getValueForShapeControlKnob(void *a1, const char *a2, ...)
{
  return _[a1 _getValueForShapeControlKnob];
}

id objc_msgSend__hasEstimatedAzimuthAndAltitude(void *a1, const char *a2, ...)
{
  return _[a1 _hasEstimatedAzimuthAndAltitude];
}

id objc_msgSend__hasEstimatedForce(void *a1, const char *a2, ...)
{
  return _[a1 _hasEstimatedForce];
}

id objc_msgSend__hasEstimatedLocation(void *a1, const char *a2, ...)
{
  return _[a1 _hasEstimatedLocation];
}

id objc_msgSend__hasEstimatedVelocity(void *a1, const char *a2, ...)
{
  return _[a1 _hasEstimatedVelocity];
}

id objc_msgSend__hoverGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 _hoverGestureRecognizer];
}

id objc_msgSend__immutablePointsCount(void *a1, const char *a2, ...)
{
  return _[a1 _immutablePointsCount];
}

id objc_msgSend__inflight(void *a1, const char *a2, ...)
{
  return _[a1 _inflight];
}

id objc_msgSend__inputType(void *a1, const char *a2, ...)
{
  return _[a1 _inputType];
}

id objc_msgSend__insertStrokePoint_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 _insertStrokePoint:atIndex:];
}

id objc_msgSend__insertTool_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertTool:atIndex:");
}

id objc_msgSend__invalidateBounds(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateBounds];
}

id objc_msgSend__isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 _isCancelled];
}

id objc_msgSend__isClipped(void *a1, const char *a2, ...)
{
  return _[a1 _isClipped];
}

id objc_msgSend__isFountainPenInkV2(void *a1, const char *a2, ...)
{
  return _[a1 _isFountainPenInkV2];
}

id objc_msgSend__isHidden(void *a1, const char *a2, ...)
{
  return _[a1 _isHidden];
}

id objc_msgSend__isInQuickSelectMode(void *a1, const char *a2, ...)
{
  return _[a1 _isInQuickSelectMode];
}

id objc_msgSend__isMaskedStroke(void *a1, const char *a2, ...)
{
  return _[a1 _isMaskedStroke];
}

id objc_msgSend__isSimilarToColor_withinPercentage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSimilarToColor:withinPercentage:");
}

id objc_msgSend__isValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValid:");
}

id objc_msgSend__isValidToDecrementTag_toNextPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidToDecrementTag:toNextPosition:");
}

id objc_msgSend__keepPencilShadowVisible(void *a1, const char *a2, ...)
{
  return _[a1 _keepPencilShadowVisible];
}

id objc_msgSend__lastResultInDirection_(void *a1, const char *a2, ...)
{
  return [a1 _lastResultInDirection:];
}

id objc_msgSend__layoutSearchResultsIndexAtOrAfterSearchReference_inDirection_isOrdredSame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutSearchResultsIndexAtOrAfterSearchReference:inDirection:isOrdredSame:");
}

id objc_msgSend__layoutSearchResultsIndexAtOrBeforeSearchReference_inDirection_isOrdredSame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutSearchResultsIndexAtOrBeforeSearchReference:inDirection:isOrdredSame:");
}

id objc_msgSend__layoutSearchResultsIndexNearestToSearchReference_inDirection_isOrdredSame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutSearchResultsIndexNearestToSearchReference:inDirection:isOrdredSame:");
}

id objc_msgSend__layoutsForConnectionActionNames(void *a1, const char *a2, ...)
{
  return _[a1 _layoutsForConnectionActionNames];
}

id objc_msgSend__length(void *a1, const char *a2, ...)
{
  return _[a1 _length];
}

id objc_msgSend__lengthOfSplineSegment_(void *a1, const char *a2, ...)
{
  return [a1 _lengthOfSplineSegment:];
}

id objc_msgSend__liftDelay(void *a1, const char *a2, ...)
{
  return _[a1 _liftDelay];
}

id objc_msgSend__localizedApplicationName(void *a1, const char *a2, ...)
{
  return _[a1 _localizedApplicationName];
}

id objc_msgSend__longDragAnnouncementStringForDiff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_longDragAnnouncementStringForDiff:");
}

id objc_msgSend__makeInitialConnectionActionsTemplates(void *a1, const char *a2, ...)
{
  return _[a1 _makeInitialConnectionActionsTemplates];
}

id objc_msgSend__makeNavigateToConnectedElementCustomActionsFor_inCategory_directionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeNavigateToConnectedElementCustomActionsFor:inCategory:directionType:");
}

id objc_msgSend__newPathRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 _newPathRepresentation];
}

id objc_msgSend__nextSearchTargetWithMatchInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextSearchTargetWithMatchInDirection:");
}

id objc_msgSend__opacity(void *a1, const char *a2, ...)
{
  return _[a1 _opacity];
}

id objc_msgSend__paletteViewVisible(void *a1, const char *a2, ...)
{
  return _[a1 _paletteViewVisible];
}

id objc_msgSend__performAccessibilityIncrementDecrementForControlKnob_(void *a1, const char *a2, ...)
{
  return [a1 _performAccessibilityIncrementDecrementForControlKnob:];
}

id objc_msgSend__pointsCount(void *a1, const char *a2, ...)
{
  return _[a1 _pointsCount];
}

id objc_msgSend__presentationSemanticContext(void *a1, const char *a2, ...)
{
  return _[a1 _presentationSemanticContext];
}

id objc_msgSend__radius(void *a1, const char *a2, ...)
{
  return _[a1 _radius];
}

id objc_msgSend__radius2(void *a1, const char *a2, ...)
{
  return _[a1 _radius2];
}

id objc_msgSend__readFromOffset_length_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readFromOffset:length:handler:");
}

id objc_msgSend__reallyCancel(void *a1, const char *a2, ...)
{
  return _[a1 _reallyCancel];
}

id objc_msgSend__recursiveSearchWithSearchTarget_forString_options_dispatchGroup_hitBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recursiveSearchWithSearchTarget:forString:options:dispatchGroup:hitBlock:completionBlock:");
}

id objc_msgSend__removeLastStrokePoint(void *a1, const char *a2, ...)
{
  return _[a1 _removeLastStrokePoint];
}

id objc_msgSend__removeStrokePointAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 _removeStrokePointAtIndex:];
}

id objc_msgSend__removeTool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTool:");
}

id objc_msgSend__renderGroupID(void *a1, const char *a2, ...)
{
  return _[a1 _renderGroupID];
}

id objc_msgSend__replaceStrokePointAtIndex_withStrokePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceStrokePointAtIndex:withStrokePoint:");
}

id objc_msgSend__replayDrawingBegan_coordinateSpace_activeInputProperties_inputType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replayDrawingBegan:coordinateSpace:activeInputProperties:inputType:");
}

id objc_msgSend__replayDrawingCancelled(void *a1, const char *a2, ...)
{
  return _[a1 _replayDrawingCancelled];
}

id objc_msgSend__replayDrawingEndedEstimatesTimeout_withBackgroundQueueCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replayDrawingEndedEstimatesTimeout:withBackgroundQueueCompletion:");
}

id objc_msgSend__replayDrawingMoved_coordinateSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replayDrawingMoved:coordinateSpace:");
}

id objc_msgSend__replayEstimatedPropertiesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replayEstimatedPropertiesUpdated:");
}

id objc_msgSend__resetStreamReadChannelIfNeededForOffset_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetStreamReadChannelIfNeededForOffset:length:");
}

id objc_msgSend__resetTools_selectedTool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetTools:selectedTool:");
}

id objc_msgSend__resultCountInRootObjectRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resultCountInRootObjectRange:");
}

id objc_msgSend__rollAngle(void *a1, const char *a2, ...)
{
  return _[a1 _rollAngle];
}

id objc_msgSend__rotorForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rotorForName:");
}

id objc_msgSend__scribbleCapableElementsForReps_forRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scribbleCapableElementsForReps:forRect:");
}

id objc_msgSend__selectableRep(void *a1, const char *a2, ...)
{
  return _[a1 _selectableRep];
}

id objc_msgSend__setAdditionalTouchesCancelLift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalTouchesCancelLift:");
}

id objc_msgSend__setAllStrokes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAllStrokes:");
}

id objc_msgSend__setAllowsPointerDragBeforeLiftDelay_(void *a1, const char *a2, ...)
{
  return [a1 _setAllowsPointerDragBeforeLiftDelay:];
}

id objc_msgSend__setBaseValues_(void *a1, const char *a2, ...)
{
  return [a1 _setBaseValues:];
}

id objc_msgSend__setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCancelled:");
}

id objc_msgSend__setClipNormal_(void *a1, const char *a2, ...)
{
  return [a1 _setClipNormal];
}

id objc_msgSend__setClipOrigin_(void *a1, const char *a2, ...)
{
  return [_a1 _setClipOrigin:];
}

id objc_msgSend__setDispatchQueue_(void *a1, const char *a2, ...)
{
  return [a1 _setDispatchQueue:];
}

id objc_msgSend__setDispatchTimer_(void *a1, const char *a2, ...)
{
  return [a1 _setDispatchTimer:];
}

id objc_msgSend__setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFlags:");
}

id objc_msgSend__setHidesShadow_(void *a1, const char *a2, ...)
{
  return [_a1 _setHidesShadow:];
}

id objc_msgSend__setInputType_(void *a1, const char *a2, ...)
{
  return [a1 _setInputType:];
}

id objc_msgSend__setIsClipped_(void *a1, const char *a2, ...)
{
  return [a1 _setIsClipped:];
}

id objc_msgSend__setKeyboardFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setKeyboardFrame:");
}

id objc_msgSend__setKeyboardVisible_(void *a1, const char *a2, ...)
{
  return [_a1 _setKeyboardVisible:];
}

id objc_msgSend__setLiftDelay_(void *a1, const char *a2, ...)
{
  return [a1 _setLiftDelay:];
}

id objc_msgSend__setPointerLiftDelay_(void *a1, const char *a2, ...)
{
  return [a1 _setPointerLiftDelay];
}

id objc_msgSend__setPoints_count_copy_(void *a1, const char *a2, ...)
{
  return [a1 _setPoints:count:copy:];
}

id objc_msgSend__setRenderGroupID_(void *a1, const char *a2, ...)
{
  return [a1 _setRenderGroupID];
}

id objc_msgSend__setSlotId_(void *a1, const char *a2, ...)
{
  return [a1 _setSlotId:];
}

id objc_msgSend__setUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUUID:");
}

id objc_msgSend__setValue_andSendAction_(void *a1, const char *a2, ...)
{
  return [_a1 _setValue:andSendAction:];
}

id objc_msgSend__shapeType(void *a1, const char *a2, ...)
{
  return _[a1 _shapeType];
}

id objc_msgSend__sixChannelVersion(void *a1, const char *a2, ...)
{
  return _[a1 _sixChannelVersion];
}

id objc_msgSend__snapToShape_inputScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapToShape:inputScale:");
}

id objc_msgSend__solveForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_solveForInput:");
}

id objc_msgSend__splineControlPoint_(void *a1, const char *a2, ...)
{
  return [a1 _splineControlPoint:];
}

id objc_msgSend__stringFromPoint_(void *a1, const char *a2, ...)
{
  return [a1 _stringFromPoint:];
}

id objc_msgSend__strokeData(void *a1, const char *a2, ...)
{
  return _[a1 _strokeData];
}

id objc_msgSend__strokeDataUUID(void *a1, const char *a2, ...)
{
  return _[a1 _strokeDataUUID];
}

id objc_msgSend__strokeID(void *a1, const char *a2, ...)
{
  return _[a1 _strokeID];
}

id objc_msgSend__strokePoint(void *a1, const char *a2, ...)
{
  return _[a1 _strokePoint];
}

id objc_msgSend__strokePointAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 _strokePointAtIndex:];
}

id objc_msgSend__strokeUUID(void *a1, const char *a2, ...)
{
  return _[a1 _strokeUUID];
}

id objc_msgSend__strokeWidth(void *a1, const char *a2, ...)
{
  return _[a1 _strokeWidth];
}

id objc_msgSend__substrokeWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_substrokeWithRange:");
}

id objc_msgSend__systemImageNamed_(void *a1, const char *a2, ...)
{
  return [a1 _systemImageNamed:];
}

id objc_msgSend__systemImageNamed_withConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 _systemImageNamed:withConfiguration:];
}

id objc_msgSend__targetUnscaledCanvasPointForConnectionActionByActionTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetUnscaledCanvasPointForConnectionActionByActionTemplate:");
}

id objc_msgSend__targetUnscaledCanvasPointsForConnectionActionsByRepForConnectingFromActionTemplates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetUnscaledCanvasPointsForConnectionActionsByRepForConnectingFromActionTemplates:");
}

id objc_msgSend__tiledView(void *a1, const char *a2, ...)
{
  return _[a1 _tiledView];
}

id objc_msgSend__tools(void *a1, const char *a2, ...)
{
  return _[a1 _tools];
}

id objc_msgSend__trackRepOcclusionsWithConnectionActionTemplates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackRepOcclusionsWithConnectionActionTemplates:");
}

id objc_msgSend__transform(void *a1, const char *a2, ...)
{
  return _[a1 _transform];
}

id objc_msgSend__updatePencilShadowViewWithInputPoint_(void *a1, const char *a2, ...)
{
  return [a1 _updatePencilShadowViewWithInputPoint:];
}

id objc_msgSend__updateShapePath(void *a1, const char *a2, ...)
{
  return _[a1 _updateShapePath];
}

id objc_msgSend__version(void *a1, const char *a2, ...)
{
  return _[a1 _version];
}

id objc_msgSend__weightForWidth_type_(void *a1, const char *a2, ...)
{
  return [a1 _weightForWidth:type:];
}

id objc_msgSend_abortMarkedText(void *a1, const char *a2, ...)
{
  return _[a1 abortMarkedText];
}

id objc_msgSend_absoluteCurrentTime(void *a1, const char *a2, ...)
{
  return _[a1 absoluteCurrentTime];
}

id objc_msgSend_absoluteDuration(void *a1, const char *a2, ...)
{
  return _[a1 absoluteDuration];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceptAutocorrection(void *a1, const char *a2, ...)
{
  return _[a1 acceptAutocorrection];
}

id objc_msgSend_accessibilityActivate(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityActivate];
}

id objc_msgSend_accessibilityActivationPoint(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityActivationPoint];
}

id objc_msgSend_accessibilityAttributedValue(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityAttributedValue];
}

id objc_msgSend_accessibilityContainer(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityContainer];
}

id objc_msgSend_accessibilityDescription(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityDescription];
}

id objc_msgSend_accessibilityElementAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 accessibilityElementAtIndex:];
}

id objc_msgSend_accessibilityElementCount(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityElementCount];
}

id objc_msgSend_accessibilityElements(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityElements];
}

id objc_msgSend_accessibilityElementsHidden(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityElementsHidden];
}

id objc_msgSend_accessibilityExperienceCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityExperienceCoordinator];
}

id objc_msgSend_accessibilityFocusFirstVisiblePreset(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityFocusFirstVisiblePreset];
}

id objc_msgSend_accessibilityFrame(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityFrame];
}

id objc_msgSend_accessibilityHint(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityHint];
}

id objc_msgSend_accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityIdentifier];
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityLabel];
}

id objc_msgSend_accessibilityName(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityName];
}

id objc_msgSend_accessibilityPath(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityPath];
}

id objc_msgSend_accessibilityPerformEscape(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityPerformEscape];
}

id objc_msgSend_accessibilityScrollLeftPage(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityScrollLeftPage];
}

id objc_msgSend_accessibilityScrollRightPage(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityScrollRightPage];
}

id objc_msgSend_accessibilitySupportLoaded(void *a1, const char *a2, ...)
{
  return _[a1 accessibilitySupportLoaded];
}

id objc_msgSend_accessibilityTextualContext(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityTextualContext];
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityTraits];
}

id objc_msgSend_accessibilityValue(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityValue];
}

id objc_msgSend_acquireCallStack(void *a1, const char *a2, ...)
{
  return _[a1 acquireCallStack];
}

id objc_msgSend_acquireCallStackDescriptionWithIndex_(void *a1, const char *a2, ...)
{
  return [a1 acquireCallStackDescriptionWithIndex:];
}

id objc_msgSend_acquireTime(void *a1, const char *a2, ...)
{
  return _[a1 acquireTime];
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionForLayer_forKey_(void *a1, const char *a2, ...)
{
  return [a1 actionForLayer:forKey:];
}

id objc_msgSend_actionNameForInsertConnectedDuplicateFromParentWithText_(void *a1, const char *a2, ...)
{
  return [a1 actionNameForInsertConnectedDuplicateFromParentWithText:];
}

id objc_msgSend_actionStringForDrag(void *a1, const char *a2, ...)
{
  return _[a1 actionStringForDrag];
}

id objc_msgSend_actionStringForFreeTransform(void *a1, const char *a2, ...)
{
  return _[a1 actionStringForFreeTransform];
}

id objc_msgSend_actionStringForResize(void *a1, const char *a2, ...)
{
  return _[a1 actionStringForResize];
}

id objc_msgSend_actionStringForRotate(void *a1, const char *a2, ...)
{
  return _[a1 actionStringForRotate];
}

id objc_msgSend_actionTitle(void *a1, const char *a2, ...)
{
  return _[a1 actionTitle];
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:style:handler:];
}

id objc_msgSend_actionsForTarget_forControlEvent_(void *a1, const char *a2, ...)
{
  return [a1 actionsForTarget:forControlEvent:];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 activateConstraints:];
}

id objc_msgSend_activeDrawingDidBegin(void *a1, const char *a2, ...)
{
  return _[a1 activeDrawingDidBegin];
}

id objc_msgSend_activeDrawingWillEndAfterInsertingFinalizedDrawingItem(void *a1, const char *a2, ...)
{
  return _[a1 activeDrawingWillEndAfterInsertingFinalizedDrawingItem];
}

id objc_msgSend_activeInputProperties(void *a1, const char *a2, ...)
{
  return _[a1 activeInputProperties];
}

id objc_msgSend_activeInputPropertiesForTouch_event_(void *a1, const char *a2, ...)
{
  return [a1 activeInputPropertiesForTouch:event:];
}

id objc_msgSend_activePasteboards(void *a1, const char *a2, ...)
{
  return _[a1 activePasteboards];
}

id objc_msgSend_activePasteboardsQueue(void *a1, const char *a2, ...)
{
  return _[a1 activePasteboardsQueue];
}

id objc_msgSend_activeScaledRect(void *a1, const char *a2, ...)
{
  return _[a1 activeScaledRect];
}

id objc_msgSend_activeStylePresetPair(void *a1, const char *a2, ...)
{
  return _[a1 activeStylePresetPair];
}

id objc_msgSend_actualOpacityValueForOutlineFills(void *a1, const char *a2, ...)
{
  return _[a1 actualOpacityValueForOutlineFills];
}

id objc_msgSend_actualScaledClipRect(void *a1, const char *a2, ...)
{
  return _[a1 actualScaledClipRect];
}

id objc_msgSend_actualWidth(void *a1, const char *a2, ...)
{
  return _[a1 actualWidth];
}

id objc_msgSend_adaptiveViewController(void *a1, const char *a2, ...)
{
  return _[a1 adaptiveViewController];
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return [a1 addAction:];
}

id objc_msgSend_addActionToArray_withName_actionBlock_(void *a1, const char *a2, ...)
{
  return [a1 addActionToArray:withName:actionBlock:];
}

id objc_msgSend_addActionToArray_withName_categoryName_actionBlock_(void *a1, const char *a2, ...)
{
  return [a1 addActionToArray:withName:categoryName:actionBlock:];
}

id objc_msgSend_addAdornmentWithCharIndex_point_glyph_rect_(void *a1, const char *a2, ...)
{
  return [a1 addAdornmentWithCharIndex:point:glyph:rect:];
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addAnimation:forKey:];
}

id objc_msgSend_addAnimations_(void *a1, const char *a2, ...)
{
  return [a1 addAnimations:];
}

id objc_msgSend_addArcWithCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return [a1 addArcWithCenter:radius:startAngle:endAngle:clockwise:];
}

id objc_msgSend_addArrangedSubview_(void *a1, const char *a2, ...)
{
  return [a1 addArrangedSubview:];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttribute:value:range:];
}

id objc_msgSend_addAttributes_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttributes:range:];
}

id objc_msgSend_addBarrier_(void *a1, const char *a2, ...)
{
  return [a1 addBarrier:];
}

id objc_msgSend_addBool_(void *a1, const char *a2, ...)
{
  return [a1 addBool:];
}

id objc_msgSend_addBoundaryTimeObserverForTimes_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addBoundaryTimeObserverForTimes:queue:usingBlock:];
}

id objc_msgSend_addCancelButtonWithTitle_(void *a1, const char *a2, ...)
{
  return [a1 addCancelButtonWithTitle:];
}

id objc_msgSend_addCharactersInRange_(void *a1, const char *a2, ...)
{
  return [a1 addCharactersInRange:];
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return [a1 addCharactersInString:];
}

id objc_msgSend_addChild_(void *a1, const char *a2, ...)
{
  return [a1 addChild:];
}

id objc_msgSend_addChild_withPendingUnitCount_(void *a1, const char *a2, ...)
{
  return [a1 addChild:withPendingUnitCount:];
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return [a1 addChildViewController:];
}

id objc_msgSend_addCollaboratorHUDController_(void *a1, const char *a2, ...)
{
  return [a1 addCollaboratorHUDController:];
}

id objc_msgSend_addCommand_(void *a1, const char *a2, ...)
{
  return [a1 addCommand:];
}

id objc_msgSend_addCommandIfNotNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCommandIfNotNil:");
}

id objc_msgSend_addCommands_(void *a1, const char *a2, ...)
{
  return [a1 addCommands:];
}

id objc_msgSend_addCommonObservers(void *a1, const char *a2, ...)
{
  return _[a1 addCommonObservers];
}

id objc_msgSend_addCompletion_(void *a1, const char *a2, ...)
{
  return [a1 addCompletion:];
}

id objc_msgSend_addConnectedLayout_(void *a1, const char *a2, ...)
{
  return [a1 addConnectedLayout:];
}

id objc_msgSend_addConsolidatedPKDrawingObserver_(void *a1, const char *a2, ...)
{
  return [a1 addConsolidatedPKDrawingObserver];
}

id objc_msgSend_addContextualMenuElementsToArray_atPoint_(void *a1, const char *a2, ...)
{
  return [a1 addContextualMenuElementsToArray:atPoint:];
}

id objc_msgSend_addContextualMenuItemsToArray_(void *a1, const char *a2, ...)
{
  return [a1 addContextualMenuItemsToArray:];
}

id objc_msgSend_addCullingListener_(void *a1, const char *a2, ...)
{
  return [a1 addCullingListener:];
}

id objc_msgSend_addCurveToPoint_controlPoint1_controlPoint2_(void *a1, const char *a2, ...)
{
  return [a1 addCurveToPoint:controlPoint1:controlPoint2:];
}

id objc_msgSend_addData_queue_completion_(void *a1, const char *a2, ...)
{
  return [a1 addData:queue:completion:];
}

id objc_msgSend_addDataImpl_queue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataImpl:queue:completion:");
}

id objc_msgSend_addDecorator_(void *a1, const char *a2, ...)
{
  return [a1 addDecorator:];
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:];
}

id objc_msgSend_addDownloadObserverWithIdentifier_options_handler_(void *a1, const char *a2, ...)
{
  return [a1 addDownloadObserverWithIdentifier:options:handler:];
}

id objc_msgSend_addEndpointSnapsToXs_andYs_(void *a1, const char *a2, ...)
{
  return [a1 addEndpointSnapsToXs:andYs:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addEntry_(void *a1, const char *a2, ...)
{
  return [a1 addEntry:];
}

id objc_msgSend_addExtraSafeCategoryNamesToCollection_(void *a1, const char *a2, ...)
{
  return [a1 addExtraSafeCategoryNamesToCollection];
}

id objc_msgSend_addField_format_(void *a1, const char *a2, ...)
{
  return [a1 addField:format:];
}

id objc_msgSend_addField_value_(void *a1, const char *a2, ...)
{
  return [a1 addField:value:];
}

id objc_msgSend_addFieldValue_(void *a1, const char *a2, ...)
{
  return [a1 addFieldValue:];
}

id objc_msgSend_addFieldWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 addFieldWithFormat:];
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 addGestureRecognizer:];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return [a1 addIndex:];
}

id objc_msgSend_addIndexNeedsUpdate_(void *a1, const char *a2, ...)
{
  return [a1 addIndexNeedsUpdate:];
}

id objc_msgSend_addIndexRangeNeedsUpdate_(void *a1, const char *a2, ...)
{
  return [a1 addIndexRangeNeedsUpdate:];
}

id objc_msgSend_addIndexes_(void *a1, const char *a2, ...)
{
  return [a1 addIndexes:];
}

id objc_msgSend_addIndexesInRange_(void *a1, const char *a2, ...)
{
  return [a1 addIndexesInRange:];
}

id objc_msgSend_addInsertionAnimationsToInfo_connectionLineLayout_onInteractiveCanvasController_(void *a1, const char *a2, ...)
{
  return [a1 addInsertionAnimationsToInfo:connectionLineLayout:onInteractiveCanvasController:];
}

id objc_msgSend_addInsertionAnimationsToInfos_onInteractiveCanvasController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInsertionAnimationsToInfos:onInteractiveCanvasController:");
}

id objc_msgSend_addInspectorPanZoomModeGRsToArray_(void *a1, const char *a2, ...)
{
  return [a1 addInspectorPanZoomModeGRsToArray:];
}

id objc_msgSend_addInt_(void *a1, const char *a2, ...)
{
  return [a1 addInt:];
}

id objc_msgSend_addInteger_(void *a1, const char *a2, ...)
{
  return [a1 addInteger:];
}

id objc_msgSend_addInteraction_(void *a1, const char *a2, ...)
{
  return [a1 addInteraction:];
}

id objc_msgSend_addInterest(void *a1, const char *a2, ...)
{
  return _[a1 addInterest];
}

id objc_msgSend_addInterestInProviderForAsset_(void *a1, const char *a2, ...)
{
  return [a1 addInterestInProviderForAsset:];
}

id objc_msgSend_addIntersectionsWithLine_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIntersectionsWithLine:to:");
}

id objc_msgSend_addIntersectionsWithPath_to_allIntersections_reversed_(void *a1, const char *a2, ...)
{
  return [a1 addIntersectionsWithPath:to:allIntersections:reversed:];
}

id objc_msgSend_addItems_(void *a1, const char *a2, ...)
{
  return [a1 addItems:];
}

id objc_msgSend_addItems_isSmartCopy_(void *a1, const char *a2, ...)
{
  return [a1 addItems:isSmartCopy:];
}

id objc_msgSend_addKeyboardObserver_(void *a1, const char *a2, ...)
{
  return [a1 addKeyboardObserver:];
}

id objc_msgSend_addKnobsForRep_toArray_(void *a1, const char *a2, ...)
{
  return [a1 addKnobsForRep:toArray:];
}

id objc_msgSend_addKnobsToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKnobsToArray:");
}

id objc_msgSend_addLayer_(void *a1, const char *a2, ...)
{
  return [a1 addLayer:];
}

id objc_msgSend_addLayoutGuide_(void *a1, const char *a2, ...)
{
  return [a1 addLayoutGuide:];
}

id objc_msgSend_addLayoutsInRect_toArray_deep_(void *a1, const char *a2, ...)
{
  return [a1 addLayoutsInRect:toArray:deep:];
}

id objc_msgSend_addLineToPoint_(void *a1, const char *a2, ...)
{
  return [a1 addLineToPoint:];
}

id objc_msgSend_addLink_(void *a1, const char *a2, ...)
{
  return [a1 addLink:];
}

id objc_msgSend_addLockedKnobsToArray_(void *a1, const char *a2, ...)
{
  return [a1 addLockedKnobsToArray:];
}

id objc_msgSend_addMiniFormatterElementsToArray_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMiniFormatterElementsToArray:atPoint:");
}

id objc_msgSend_addModalKeyboardObserver_(void *a1, const char *a2, ...)
{
  return [a1 addModalKeyboardObserver:];
}

id objc_msgSend_addNode_(void *a1, const char *a2, ...)
{
  return [a1 addNode:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObservationToken_(void *a1, const char *a2, ...)
{
  return [a1 addObservationToken:];
}

id objc_msgSend_addObserver_forChangeSource_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forChangeSource:];
}

id objc_msgSend_addObserver_forChangeSourceOfClass_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forChangeSourceOfClass:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:selector:name:object:];
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addObserverForName:object:queue:usingBlock:];
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return [a1 addOperation:];
}

id objc_msgSend_addOutput_(void *a1, const char *a2, ...)
{
  return [a1 addOutput:];
}

id objc_msgSend_addPKDrawingsObserver_(void *a1, const char *a2, ...)
{
  return [a1 addPKDrawingsObserver:];
}

id objc_msgSend_addPasteboardItem_(void *a1, const char *a2, ...)
{
  return [a1 addPasteboardItem:];
}

id objc_msgSend_addPasteboardItem_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 addPasteboardItem:atIndex:];
}

id objc_msgSend_addPasteboardItemForObject_type_(void *a1, const char *a2, ...)
{
  return [a1 addPasteboardItemForObject:type:];
}

id objc_msgSend_addPasteboardItemIndex_forType_(void *a1, const char *a2, ...)
{
  return [a1 addPasteboardItemIndex:forType:];
}

id objc_msgSend_addPath_filled_(void *a1, const char *a2, ...)
{
  return [a1 addPath:filled:];
}

id objc_msgSend_addPath_filled_clippedToRect_(void *a1, const char *a2, ...)
{
  return [a1 addPath:filled:clippedToRect:];
}

id objc_msgSend_addPath_filled_crawlingDistance_(void *a1, const char *a2, ...)
{
  return [a1 addPath:filled:crawlingDistance:];
}

id objc_msgSend_addPath_filled_pathID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPath:filled:pathID:");
}

id objc_msgSend_addPath_filled_pathID_crawlingDistance_(void *a1, const char *a2, ...)
{
  return [a1 addPath:filled:pathID:crawlingDistance:];
}

id objc_msgSend_addPath_withBounds_shouldSmooth_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addPath:withBounds:shouldSmooth:forKey:];
}

id objc_msgSend_addPathToContext_(void *a1, const char *a2, ...)
{
  return [a1 addPathToContext:];
}

id objc_msgSend_addPeriodicTimeObserverForInterval_block_(void *a1, const char *a2, ...)
{
  return [a1 addPeriodicTimeObserverForInterval:block:];
}

id objc_msgSend_addPeriodicTimeObserverForInterval_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addPeriodicTimeObserverForInterval:queue:usingBlock:];
}

id objc_msgSend_addPoint_(void *a1, const char *a2, ...)
{
  return [a1 addPoint:];
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return [a1 addPointer:];
}

id objc_msgSend_addPoints_(void *a1, const char *a2, ...)
{
  return [a1 addPoints:];
}

id objc_msgSend_addPointsForElementOfType_(void *a1, const char *a2, ...)
{
  return [a1 addPointsForElementOfType:];
}

id objc_msgSend_addProgressObserver_selector_(void *a1, const char *a2, ...)
{
  return [a1 addProgressObserver:selector:];
}

id objc_msgSend_addProgressObserverWithValueInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return [a1 addProgressObserverWithValueInterval:queue:handler:];
}

id objc_msgSend_addRange_(void *a1, const char *a2, ...)
{
  return [a1 addRange:];
}

id objc_msgSend_addRange_allowEmpty_(void *a1, const char *a2, ...)
{
  return [a1 addRange:allowEmpty:];
}

id objc_msgSend_addReadyToDisplayObserver_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addReadyToDisplayObserver:options:context:];
}

id objc_msgSend_addRect_(void *a1, const char *a2, ...)
{
  return [a1 addRect:];
}

id objc_msgSend_addResult_forRange_(void *a1, const char *a2, ...)
{
  return [a1 addResult:forRange:];
}

id objc_msgSend_addRotateDelta_(void *a1, const char *a2, ...)
{
  return [a1 addRotateDelta:];
}

id objc_msgSend_addSafeCategoryNamesToCollection_(void *a1, const char *a2, ...)
{
  return [a1 addSafeCategoryNamesToCollection:];
}

id objc_msgSend_addSearchResultWithIdentifier_forKeyword_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSearchResultWithIdentifier:forKeyword:priority:");
}

id objc_msgSend_addSearchResults_(void *a1, const char *a2, ...)
{
  return [a1 addSearchResults:];
}

id objc_msgSend_addSelectionKnobsToArray_(void *a1, const char *a2, ...)
{
  return [a1 addSelectionKnobsToArray:];
}

id objc_msgSend_addSpacingRect_forFrame_andFrame_(void *a1, const char *a2, ...)
{
  return [a1 addSpacingRect:forFrame:andFrame:];
}

id objc_msgSend_addStrokePoint_inputPoint_(void *a1, const char *a2, ...)
{
  return [a1 addStrokePoint:inputPoint:];
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return [a1 addSublayer:];
}

id objc_msgSend_addSubrenderable_(void *a1, const char *a2, ...)
{
  return [a1 addSubrenderable:];
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return [a1 addSubview:];
}

id objc_msgSend_addTarget_action_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:];
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:forControlEvents:];
}

id objc_msgSend_addTextureIndex_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addTextureIndex:forKey:];
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return [a1 addTimer:forMode:];
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return [a1 addToRunLoop:forMode:];
}

id objc_msgSend_addToken_isForTemporaryRelinquish_(void *a1, const char *a2, ...)
{
  return [a1 addToken:isForTemporaryRelinquish:];
}

id objc_msgSend_addToolkitObserver_(void *a1, const char *a2, ...)
{
  return [a1 addToolkitObserver:];
}

id objc_msgSend_addTypesetterForParagraphIdentifier_typesetter_(void *a1, const char *a2, ...)
{
  return [a1 addTypesetterForParagraphIdentifier:typesetter:];
}

id objc_msgSend_addUnscaledDragDelta_roundDeltaToViewScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnscaledDragDelta:roundDeltaToViewScale:");
}

id objc_msgSend_addUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 addUnsignedInteger:];
}

id objc_msgSend_additionalBoardItemsForCopyImaging_icc_invertedObjectUUIDMap_(void *a1, const char *a2, ...)
{
  return [a1 additionalBoardItemsForCopyImaging:icc:invertedObjectUUIDMap:];
}

id objc_msgSend_additionalBoardItemsForUUIDBookkeepingForTemporaryCanvases(void *a1, const char *a2, ...)
{
  return _[a1 additionalBoardItemsForUUIDBookkeepingForTemporaryCanvases];
}

id objc_msgSend_additionalChildInfosForLayout_(void *a1, const char *a2, ...)
{
  return [a1 additionalChildInfosForLayout:];
}

id objc_msgSend_additionalDependenciesForChildLayout_(void *a1, const char *a2, ...)
{
  return [a1 additionalDependenciesForChildLayout:];
}

id objc_msgSend_additionalDependentLayoutsForBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 additionalDependentLayoutsForBoardItem:];
}

id objc_msgSend_additionalForwardSelectionFlags(void *a1, const char *a2, ...)
{
  return _[a1 additionalForwardSelectionFlags];
}

id objc_msgSend_additionalGuides(void *a1, const char *a2, ...)
{
  return _[a1 additionalGuides];
}

id objc_msgSend_additionalHeightForItemInSection_context_(void *a1, const char *a2, ...)
{
  return [a1 additionalHeightForItemInSection:context:];
}

id objc_msgSend_additionalLayersUnderRepLayers(void *a1, const char *a2, ...)
{
  return _[a1 additionalLayersUnderRepLayers];
}

id objc_msgSend_additionalLayoutsForRepCreation(void *a1, const char *a2, ...)
{
  return _[a1 additionalLayoutsForRepCreation];
}

id objc_msgSend_additionalLeftPaddingForImageFrame_(void *a1, const char *a2, ...)
{
  return [a1 additionalLeftPaddingForImageFrame:];
}

id objc_msgSend_additionalPlatformViewOverRenderable(void *a1, const char *a2, ...)
{
  return _[a1 additionalPlatformViewOverRenderable];
}

id objc_msgSend_additionalPlatformViewUnderRenderable(void *a1, const char *a2, ...)
{
  return _[a1 additionalPlatformViewUnderRenderable];
}

id objc_msgSend_additionalRectsForSnappingWithOffset_(void *a1, const char *a2, ...)
{
  return [a1 additionalRectsForSnappingWithOffset:];
}

id objc_msgSend_additionalRenderablesOverRenderable(void *a1, const char *a2, ...)
{
  return _[a1 additionalRenderablesOverRenderable];
}

id objc_msgSend_additionalRenderablesToFadeDuringZoom(void *a1, const char *a2, ...)
{
  return _[a1 additionalRenderablesToFadeDuringZoom];
}

id objc_msgSend_additionalRenderablesUnderRenderable(void *a1, const char *a2, ...)
{
  return _[a1 additionalRenderablesUnderRenderable];
}

id objc_msgSend_additionalRepsForDragging(void *a1, const char *a2, ...)
{
  return _[a1 additionalRepsForDragging];
}

id objc_msgSend_additionalRepsForDraggingConnectionLine_(void *a1, const char *a2, ...)
{
  return [a1 additionalRepsForDraggingConnectionLine];
}

id objc_msgSend_additionalRepsToResize(void *a1, const char *a2, ...)
{
  return _[a1 additionalRepsToResize];
}

id objc_msgSend_additionalReverseSelectionFlags(void *a1, const char *a2, ...)
{
  return _[a1 additionalReverseSelectionFlags];
}

id objc_msgSend_additionalRightPaddingForImageFrame_(void *a1, const char *a2, ...)
{
  return [a1 additionalRightPaddingForImageFrame:];
}

id objc_msgSend_additionalRotationForKnobOrientation(void *a1, const char *a2, ...)
{
  return _[a1 additionalRotationForKnobOrientation];
}

id objc_msgSend_additionalTransformIntoCoordinateSpace_(void *a1, const char *a2, ...)
{
  return [a1 additionalTransformIntoCoordinateSpace:];
}

id objc_msgSend_additionalVisibleInfosForCanvas_(void *a1, const char *a2, ...)
{
  return [a1 additionalVisibleInfosForCanvas:];
}

id objc_msgSend_adjustByDelta_startingAt_(void *a1, const char *a2, ...)
{
  return [a1 adjustByDelta:startingAt:];
}

id objc_msgSend_adjustCustomMagnetPositions(void *a1, const char *a2, ...)
{
  return _[a1 adjustCustomMagnetPositions];
}

id objc_msgSend_adjustRangesByDelta_startingAt_(void *a1, const char *a2, ...)
{
  return [a1 adjustRangesByDelta:startingAt:];
}

id objc_msgSend_adjustSelectionRange_forStorage_(void *a1, const char *a2, ...)
{
  return [a1 adjustSelectionRange:forStorage:];
}

id objc_msgSend_adjustVisualSelection_withOtherSelection_outLeadingEdge_outCaretAffinity_(void *a1, const char *a2, ...)
{
  return [a1 adjustVisualSelection:withOtherSelection:outLeadingEdge:outCaretAffinity:];
}

id objc_msgSend_adjustedCalloutTailPositionXWithValue_isAnchoredAtRight_layoutGeometry_(void *a1, const char *a2, ...)
{
  return [a1 adjustedCalloutTailPositionXWithValue:isAnchoredAtRight:layoutGeometry:];
}

id objc_msgSend_adjustedContentInset(void *a1, const char *a2, ...)
{
  return _[a1 adjustedContentInset];
}

id objc_msgSend_adjustedDragToNaturalPointOffset(void *a1, const char *a2, ...)
{
  return _[a1 adjustedDragToNaturalPointOffset];
}

id objc_msgSend_adjustedInsetsForTarget_(void *a1, const char *a2, ...)
{
  return [a1 adjustedInsetsForTarget];
}

id objc_msgSend_adjustedKnobForComputingResizeGeometry_(void *a1, const char *a2, ...)
{
  return [a1 adjustedKnobForComputingResizeGeometry];
}

id objc_msgSend_adjustedStrokeWidthFromWidth_forInkType_(void *a1, const char *a2, ...)
{
  return [a1 adjustedStrokeWidthFromWidth:forInkType:];
}

id objc_msgSend_adjustedUnscaledAutoscrollPoint(void *a1, const char *a2, ...)
{
  return _[a1 adjustedUnscaledAutoscrollPoint];
}

id objc_msgSend_adjustedUnscaledPoint_(void *a1, const char *a2, ...)
{
  return [a1 adjustedUnscaledPoint:];
}

id objc_msgSend_adjustsImageSizeForAccessibilityContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 adjustsImageSizeForAccessibilityContentSizeCategory];
}

id objc_msgSend_adornmentLocation(void *a1, const char *a2, ...)
{
  return _[a1 adornmentLocation];
}

id objc_msgSend_advance(void *a1, const char *a2, ...)
{
  return _[a1 advance];
}

id objc_msgSend_advanceParagraphEnumeratorToCharIndex_(void *a1, const char *a2, ...)
{
  return [a1 advanceParagraphEnumeratorToCharIndex:];
}

id objc_msgSend_advanceProgress_(void *a1, const char *a2, ...)
{
  return [a1 advanceProgress:];
}

id objc_msgSend_advanceToStage_(void *a1, const char *a2, ...)
{
  return [a1 advanceToStage:];
}

id objc_msgSend_affineTransform(void *a1, const char *a2, ...)
{
  return _[a1 affineTransform];
}

id objc_msgSend_afterDelay_processBlock_(void *a1, const char *a2, ...)
{
  return [a1 afterDelay:processBlock:];
}

id objc_msgSend_afterKeyboardAnimationPerformBlock_(void *a1, const char *a2, ...)
{
  return [a1 afterKeyboardAnimationPerformBlock:];
}

id objc_msgSend_afterLayoutIncludingLayers_performBlock_(void *a1, const char *a2, ...)
{
  return [a1 afterLayoutIncludingLayers:performBlock:];
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerWithTitle:message:preferredStyle:];
}

id objc_msgSend_alertPresenter(void *a1, const char *a2, ...)
{
  return _[a1 alertPresenter];
}

id objc_msgSend_aliasPathForScale_adjustedStroke_adjustedPath_startDelta_endDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aliasPathForScale:adjustedStroke:adjustedPath:startDelta:endDelta:");
}

id objc_msgSend_aliasPathForScale_originalStroke_adjustedStroke_adjustedPath_startDelta_endDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aliasPathForScale:originalStroke:adjustedStroke:adjustedPath:startDelta:endDelta:");
}

id objc_msgSend_aliasedAlignmentFrameForScale_(void *a1, const char *a2, ...)
{
  return [a1 aliasedAlignmentFrameForScale:];
}

id objc_msgSend_aliasedAlignmentFrameInLayerFrame(void *a1, const char *a2, ...)
{
  return _[a1 aliasedAlignmentFrameInLayerFrame];
}

id objc_msgSend_aliasedPathInContext_effectiveStrokeWidth_(void *a1, const char *a2, ...)
{
  return [a1 aliasedPathInContext:effectiveStrokeWidth:];
}

id objc_msgSend_aliasedPathWithViewScale_effectiveStrokeWidth_(void *a1, const char *a2, ...)
{
  return [a1 aliasedPathWithViewScale:effectiveStrokeWidth:];
}

id objc_msgSend_alignDrawablesByEdge_(void *a1, const char *a2, ...)
{
  return [a1 alignDrawablesByEdge:];
}

id objc_msgSend_alignToOrigin(void *a1, const char *a2, ...)
{
  return _[a1 alignToOrigin];
}

id objc_msgSend_alignment(void *a1, const char *a2, ...)
{
  return _[a1 alignment];
}

id objc_msgSend_alignmentFrame(void *a1, const char *a2, ...)
{
  return _[a1 alignmentFrame];
}

id objc_msgSend_alignmentFrameForProvidingGuidesInRoot(void *a1, const char *a2, ...)
{
  return _[a1 alignmentFrameForProvidingGuidesInRoot];
}

id objc_msgSend_alignmentFrameInRoot(void *a1, const char *a2, ...)
{
  return _[a1 alignmentFrameInRoot];
}

id objc_msgSend_alignmentFrameOriginForFixingInterimPosition(void *a1, const char *a2, ...)
{
  return _[a1 alignmentFrameOriginForFixingInterimPosition];
}

id objc_msgSend_alignmentMode(void *a1, const char *a2, ...)
{
  return _[a1 alignmentMode];
}

id objc_msgSend_alignmentPointForPoint_(void *a1, const char *a2, ...)
{
  return [a1 alignmentPointForPoint:];
}

id objc_msgSend_alignmentProvider(void *a1, const char *a2, ...)
{
  return _[a1 alignmentProvider];
}

id objc_msgSend_allDrawingItemsDescendedFromContainer_(void *a1, const char *a2, ...)
{
  return [a1 allDrawingItemsDescendedFromContainer:];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allHitsAlongPath_withSearchThreshold_(void *a1, const char *a2, ...)
{
  return [a1 allHitsAlongPath:withSearchThreshold:];
}

id objc_msgSend_allImportersHaveGivenCompatibilityResponse(void *a1, const char *a2, ...)
{
  return _[a1 allImportersHaveGivenCompatibilityResponse];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allNestedChildrenItemsExcludingGroups(void *a1, const char *a2, ...)
{
  return _[a1 allNestedChildrenItemsExcludingGroups];
}

id objc_msgSend_allNestedChildrenItemsIncludingGroups(void *a1, const char *a2, ...)
{
  return _[a1 allNestedChildrenItemsIncludingGroups];
}

id objc_msgSend_allNestedNonGroupChildItemsTreatingFreehandDrawingAsLeafNode(void *a1, const char *a2, ...)
{
  return _[a1 allNestedNonGroupChildItemsTreatingFreehandDrawingAsLeafNode];
}

id objc_msgSend_allNodesSelected(void *a1, const char *a2, ...)
{
  return _[a1 allNodesSelected];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPlatformViews(void *a1, const char *a2, ...)
{
  return _[a1 allPlatformViews];
}

id objc_msgSend_allReps(void *a1, const char *a2, ...)
{
  return _[a1 allReps];
}

id objc_msgSend_allRepsContainedInGroup(void *a1, const char *a2, ...)
{
  return _[a1 allRepsContainedInGroup];
}

id objc_msgSend_allRepsOrdered(void *a1, const char *a2, ...)
{
  return _[a1 allRepsOrdered];
}

id objc_msgSend_allShapeItems(void *a1, const char *a2, ...)
{
  return _[a1 allShapeItems];
}

id objc_msgSend_allSystemFontNames(void *a1, const char *a2, ...)
{
  return _[a1 allSystemFontNames];
}

id objc_msgSend_allTargets(void *a1, const char *a2, ...)
{
  return _[a1 allTargets];
}

id objc_msgSend_allTouches(void *a1, const char *a2, ...)
{
  return _[a1 allTouches];
}

id objc_msgSend_allTouchesDoneGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 allTouchesDoneGestureRecognizer];
}

id objc_msgSend_allTransformedReps(void *a1, const char *a2, ...)
{
  return _[a1 allTransformedReps];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allValuesValidNumbers(void *a1, const char *a2, ...)
{
  return _[a1 allValuesValidNumbers];
}

id objc_msgSend_allVideoFramesDisplayed(void *a1, const char *a2, ...)
{
  return _[a1 allVideoFramesDisplayed];
}

id objc_msgSend_alloc(void *a1, const char *a2, ...)
{
  return _[a1 alloc];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_allowAntialiasing(void *a1, const char *a2, ...)
{
  return _[a1 allowAntialiasing];
}

id objc_msgSend_allowAutoscroll(void *a1, const char *a2, ...)
{
  return _[a1 allowAutoscroll];
}

id objc_msgSend_allowDraggingShape(void *a1, const char *a2, ...)
{
  return _[a1 allowDraggingShape];
}

id objc_msgSend_allowEditMenuToAppear(void *a1, const char *a2, ...)
{
  return _[a1 allowEditMenuToAppear];
}

id objc_msgSend_allowGestureInRestrictedGestureMode_(void *a1, const char *a2, ...)
{
  return [a1 allowGestureInRestrictedGestureMode:];
}

id objc_msgSend_allowHUDToDisplay(void *a1, const char *a2, ...)
{
  return _[a1 allowHUDToDisplay];
}

id objc_msgSend_allowIntersectionOfChildLayout_(void *a1, const char *a2, ...)
{
  return [a1 allowIntersectionOfChildLayout];
}

id objc_msgSend_allowNegativeAutoscroll(void *a1, const char *a2, ...)
{
  return _[a1 allowNegativeAutoscroll];
}

id objc_msgSend_allowOpenLinkOnSingleTapForRepWhenEditingDisabled_(void *a1, const char *a2, ...)
{
  return [a1 allowOpenLinkOnSingleTapForRepWhenEditingDisabled];
}

id objc_msgSend_allowPopoverToRemainOpenDuringDynamicOperation(void *a1, const char *a2, ...)
{
  return _[a1 allowPopoverToRemainOpenDuringDynamicOperation];
}

id objc_msgSend_allowScrollingOutsideOfBounds(void *a1, const char *a2, ...)
{
  return _[a1 allowScrollingOutsideOfBounds];
}

id objc_msgSend_allowSelectAllForSender_hasNothingVisiblySelected_hasAtLeastOneThingToSelect_(void *a1, const char *a2, ...)
{
  return [a1 allowSelectAllForSender:hasSelectAllForSender:hasNothingVisiblySelected:hasAtLeastOneThingToSelect:];
}

id objc_msgSend_allowSimultaneousRecognitionByRecognizers_(void *a1, const char *a2, ...)
{
  return [a1 allowSimultaneousRecognitionByRecognizers:];
}

id objc_msgSend_allowTextEditingToBegin(void *a1, const char *a2, ...)
{
  return _[a1 allowTextEditingToBegin];
}

id objc_msgSend_allowTextInputWhilePresentingFor_(void *a1, const char *a2, ...)
{
  return [a1 allowTextInputWhilePresentingFor:];
}

id objc_msgSend_allowTouchOutsideCanvasViewAtPoint_forGesture_(void *a1, const char *a2, ...)
{
  return [a1 allowTouchOutsideCanvasViewAtPoint:forGesture:];
}

id objc_msgSend_allowTrackerManipulatorToTakeControl_(void *a1, const char *a2, ...)
{
  return [a1 allowTrackerManipulatorToTakeControl:];
}

id objc_msgSend_allowUndoRedoOperations(void *a1, const char *a2, ...)
{
  return _[a1 allowUndoRedoOperations];
}

id objc_msgSend_allowedAutoscrollDirections(void *a1, const char *a2, ...)
{
  return _[a1 allowedAutoscrollDirections];
}

id objc_msgSend_allowedToBeDragAndDropped(void *a1, const char *a2, ...)
{
  return _[a1 allowedToBeDragAndDropped];
}

id objc_msgSend_allowedToEditMask(void *a1, const char *a2, ...)
{
  return _[a1 allowedToEditMask];
}

id objc_msgSend_allowedToEnterQuickSelectMode(void *a1, const char *a2, ...)
{
  return _[a1 allowedToEnterQuickSelectMode];
}

id objc_msgSend_allowedToEnterQuickSelectModeForCanvasViewController_(void *a1, const char *a2, ...)
{
  return [a1 allowedToEnterQuickSelectModeForCanvasViewController:];
}

id objc_msgSend_allowedToFlip(void *a1, const char *a2, ...)
{
  return _[a1 allowedToFlip];
}

id objc_msgSend_allowedTouchTypes(void *a1, const char *a2, ...)
{
  return _[a1 allowedTouchTypes];
}

id objc_msgSend_allowsCanvasScrollingFromKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 allowsCanvasScrollingFromKeyboard];
}

id objc_msgSend_allowsChangeShape(void *a1, const char *a2, ...)
{
  return _[a1 allowsChangeShape];
}

id objc_msgSend_allowsColorDrop(void *a1, const char *a2, ...)
{
  return _[a1 allowsColorDrop];
}

id objc_msgSend_allowsConnections(void *a1, const char *a2, ...)
{
  return _[a1 allowsConnections];
}

id objc_msgSend_allowsDefaultTighteningForTruncation(void *a1, const char *a2, ...)
{
  return _[a1 allowsDefaultTighteningForTruncation];
}

id objc_msgSend_allowsDragOnUnselectedReps(void *a1, const char *a2, ...)
{
  return _[a1 allowsDragOnUnselectedReps];
}

id objc_msgSend_allowsEditMask(void *a1, const char *a2, ...)
{
  return _[a1 allowsEditMask];
}

id objc_msgSend_allowsFingerDrawing(void *a1, const char *a2, ...)
{
  return _[a1 allowsFingerDrawing];
}

id objc_msgSend_allowsFontSubpixelQuantization(void *a1, const char *a2, ...)
{
  return _[a1 allowsFontSubpixelQuantization];
}

id objc_msgSend_allowsGroupOpacity(void *a1, const char *a2, ...)
{
  return _[a1 allowsGroupOpacity];
}

id objc_msgSend_allowsInsertDrag(void *a1, const char *a2, ...)
{
  return _[a1 allowsInsertDrag];
}

id objc_msgSend_allowsMoveOperation(void *a1, const char *a2, ...)
{
  return _[a1 allowsMoveOperation];
}

id objc_msgSend_allowsMoveOperations(void *a1, const char *a2, ...)
{
  return _[a1 allowsMoveOperations];
}

id objc_msgSend_allowsMoviePlayButton(void *a1, const char *a2, ...)
{
  return _[a1 allowsMoviePlayButton];
}

id objc_msgSend_allowsParentGroupToBeResizedWithoutAspectRatioLock(void *a1, const char *a2, ...)
{
  return _[a1 allowsParentGroupToBeResizedWithoutAspectRatioLock];
}

id objc_msgSend_allowsPinchZoom(void *a1, const char *a2, ...)
{
  return _[a1 allowsPinchZoom];
}

id objc_msgSend_allowsSelectionHighlight(void *a1, const char *a2, ...)
{
  return _[a1 allowsSelectionHighlight];
}

id objc_msgSend_allowsSelectionKnobs(void *a1, const char *a2, ...)
{
  return _[a1 allowsSelectionKnobs];
}

id objc_msgSend_allowsSupportedDynamicOperationsToBeRealTime(void *a1, const char *a2, ...)
{
  return _[a1 allowsSupportedDynamicOperationsToBeRealTime];
}

id objc_msgSend_allowsSystemDragSession(void *a1, const char *a2, ...)
{
  return _[a1 allowsSystemDragSession];
}

id objc_msgSend_allowsZoomHUD(void *a1, const char *a2, ...)
{
  return _[a1 allowsZoomHUD];
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _[a1 alpha];
}

id objc_msgSend_alphaComponent(void *a1, const char *a2, ...)
{
  return _[a1 alphaComponent];
}

id objc_msgSend_alphanumericCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 alphanumericCharacterSet];
}

id objc_msgSend_alternatePlatformFonts(void *a1, const char *a2, ...)
{
  return _[a1 alternatePlatformFonts];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_altitudeAngle(void *a1, const char *a2, ...)
{
  return _[a1 altitudeAngle];
}

id objc_msgSend_altitudeData(void *a1, const char *a2, ...)
{
  return _[a1 altitudeData];
}

id objc_msgSend_alwaysIncludesSpaceAfter(void *a1, const char *a2, ...)
{
  return _[a1 alwaysIncludesSpaceAfter];
}

id objc_msgSend_alwaysIncludesSpaceBefore(void *a1, const char *a2, ...)
{
  return _[a1 alwaysIncludesSpaceBefore];
}

id objc_msgSend_alwaysStartsNewTarget(void *a1, const char *a2, ...)
{
  return _[a1 alwaysStartsNewTarget];
}

id objc_msgSend_alwaysUsesTranslationSprings(void *a1, const char *a2, ...)
{
  return _[a1 alwaysUsesTranslationSprings];
}

id objc_msgSend_amount(void *a1, const char *a2, ...)
{
  return _[a1 amount];
}

id objc_msgSend_ancestorRepForDrawingIntoLayer(void *a1, const char *a2, ...)
{
  return _[a1 ancestorRepForDrawingIntoLayer];
}

id objc_msgSend_anchorPoint(void *a1, const char *a2, ...)
{
  return _[a1 anchorPoint];
}

id objc_msgSend_anchorPointForCaretLayer_rotated_(void *a1, const char *a2, ...)
{
  return [a1 anchorPointForCaretLayer:rotated:];
}

id objc_msgSend_anchorPointForTexture(void *a1, const char *a2, ...)
{
  return _[a1 anchorPointForTexture];
}

id objc_msgSend_anchorSelection(void *a1, const char *a2, ...)
{
  return _[a1 anchorSelection];
}

id objc_msgSend_anchorWithOffsetToAnchor_(void *a1, const char *a2, ...)
{
  return [a1 anchorWithOffsetToAnchor:];
}

id objc_msgSend_anchoredRange(void *a1, const char *a2, ...)
{
  return _[a1 anchoredRange];
}

id objc_msgSend_angle(void *a1, const char *a2, ...)
{
  return _[a1 angle];
}

id objc_msgSend_angleForRotation(void *a1, const char *a2, ...)
{
  return _[a1 angleForRotation];
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateIntoConnectorMode(void *a1, const char *a2, ...)
{
  return _[a1 animateIntoConnectorMode];
}

id objc_msgSend_animateToViewScale_contentCenter_contentInset_animation_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToViewScale:contentCenter:contentInset:animation:completionBlock:");
}

id objc_msgSend_animateToViewScale_contentCenter_contentInset_duration_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 animateToViewScale:contentCenter:contentInset:duration:completionBlock:];
}

id objc_msgSend_animateToViewScale_contentOffset_duration_orientation_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToViewScale:contentOffset:duration:orientation:completionHandler:");
}

id objc_msgSend_animateTransform(void *a1, const char *a2, ...)
{
  return _[a1 animateTransform];
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:];
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:animations:completion:];
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:delay:options:animations:completion:];
}

id objc_msgSend_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:];
}

id objc_msgSend_animatingViewScale(void *a1, const char *a2, ...)
{
  return _[a1 animatingViewScale];
}

id objc_msgSend_animation(void *a1, const char *a2, ...)
{
  return _[a1 animation];
}

id objc_msgSend_animationCompletionHandlerForObjectUUID_animation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationCompletionHandlerForObjectUUID:animation:");
}

id objc_msgSend_animationCycleForHide_(void *a1, const char *a2, ...)
{
  return [a1 animationCycleForHide:];
}

id objc_msgSend_animationDidStop_caretLayer_floatingCaretLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationDidStop:caretLayer:floatingCaretLayer:");
}

id objc_msgSend_animationDurationForHide_(void *a1, const char *a2, ...)
{
  return [a1 animationDurationForHide:];
}

id objc_msgSend_animationForKey_(void *a1, const char *a2, ...)
{
  return [a1 animationForKey:];
}

id objc_msgSend_animationPoint(void *a1, const char *a2, ...)
{
  return _[a1 animationPoint];
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 animationWithKeyPath:];
}

id objc_msgSend_announcementsSuspended(void *a1, const char *a2, ...)
{
  return _[a1 announcementsSuspended];
}

id objc_msgSend_antiAliasDefeatLayerFrame_forTransform_(void *a1, const char *a2, ...)
{
  return [a1 antiAliasDefeatLayerFrame:forTransform:];
}

id objc_msgSend_antiAliasDefeatLayerTransform_forFrame_(void *a1, const char *a2, ...)
{
  return [a1 antiAliasDefeatLayerTransform:forFrame:];
}

id objc_msgSend_anyBoardItem(void *a1, const char *a2, ...)
{
  return _[a1 anyBoardItem];
}

id objc_msgSend_anyConnectionLine(void *a1, const char *a2, ...)
{
  return _[a1 anyConnectionLine];
}

id objc_msgSend_anyInfoIsConnectionLine_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoIsConnectionLine:];
}

id objc_msgSend_anyInfoIsLine_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoIsLine:];
}

id objc_msgSend_anyInfoIsLineOrConnectionLine(void *a1, const char *a2, ...)
{
  return _[a1 anyInfoIsLineOrConnectionLine];
}

id objc_msgSend_anyInfoIsOpenPath_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoIsOpenPath:];
}

id objc_msgSend_anyInfoIsStickyNote_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoIsStickyNote:];
}

id objc_msgSend_anyInfoIsTextBox_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoIsTextBox:];
}

id objc_msgSend_anyInfoSupportsTextInspection(void *a1, const char *a2, ...)
{
  return _[a1 anyInfoSupportsTextInspection];
}

id objc_msgSend_anyInfoSupportsTextInspection_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoSupportsTextInspection];
}

id objc_msgSend_anyInfoSupportsVerticalAlignment(void *a1, const char *a2, ...)
{
  return _[a1 anyInfoSupportsVerticalAlignment];
}

id objc_msgSend_anyInfoSupportsVerticalAlignment_(void *a1, const char *a2, ...)
{
  return [a1 anyInfoSupportsVerticalAlignment:];
}

id objc_msgSend_anyInputIsNonRoman(void *a1, const char *a2, ...)
{
  return _[a1 anyInputIsNonRoman];
}

id objc_msgSend_anyLayoutHasUnlockedAspectRatio(void *a1, const char *a2, ...)
{
  return _[a1 anyLayoutHasUnlockedAspectRatio];
}

id objc_msgSend_anyMovieItem(void *a1, const char *a2, ...)
{
  return _[a1 anyMovieItem];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_anySelectedObjectsHaveLooping(void *a1, const char *a2, ...)
{
  return _[a1 anySelectedObjectsHaveLooping];
}

id objc_msgSend_anySelectedObjectsHaveRoundCorners(void *a1, const char *a2, ...)
{
  return _[a1 anySelectedObjectsHaveRoundCorners];
}

id objc_msgSend_anySelectedObjectsHaveShadow(void *a1, const char *a2, ...)
{
  return _[a1 anySelectedObjectsHaveShadow];
}

id objc_msgSend_anyStyledItem(void *a1, const char *a2, ...)
{
  return _[a1 anyStyledItem];
}

id objc_msgSend_appDescriptionData(void *a1, const char *a2, ...)
{
  return _[a1 appDescriptionData];
}

id objc_msgSend_appSpecificGestureRecognizersAllowedDuringFreehandDrawing(void *a1, const char *a2, ...)
{
  return _[a1 appSpecificGestureRecognizersAllowedDuringFreehandDrawing];
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 appendAttributedString:];
}

id objc_msgSend_appendBezierPath_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPath:];
}

id objc_msgSend_appendBezierPath_fromSegment_t_toSegment_t_withoutMove_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPath:fromSegment:t:toSegment:t:withoutMove:];
}

id objc_msgSend_appendBezierPath_fromSegment_toSegment_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPath:fromSegment:toSegment:];
}

id objc_msgSend_appendBezierPath_skippingInitialMoveIfPossible_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPath:skippingInitialMoveIfPossible:];
}

id objc_msgSend_appendBezierPathWithArcFromPoint_toPoint_radius_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPathWithArcFromPoint:toPoint:radius:];
}

id objc_msgSend_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:];
}

id objc_msgSend_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:];
}

id objc_msgSend_appendBezierPathWithArcWithEllipseBounds_startAngle_swingAngle_angleType_startNewPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBezierPathWithArcWithEllipseBounds:startAngle:swingAngle:angleType:startNewPath:");
}

id objc_msgSend_appendBezierPathWithOvalInRect_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPathWithOvalInRect:];
}

id objc_msgSend_appendBezierPathWithRect_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPathWithRect:];
}

id objc_msgSend_appendBezierPaths_(void *a1, const char *a2, ...)
{
  return [a1 appendBezierPaths:];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:length:];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendPointsInRange_fromBezierPath_(void *a1, const char *a2, ...)
{
  return [a1 appendPointsInRange:fromBezierPath:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_appendStrokePathCompactData_(void *a1, const char *a2, ...)
{
  return [a1 appendStrokePathCompactData:];
}

id objc_msgSend_appendStrokePointCompactData_(void *a1, const char *a2, ...)
{
  return [a1 appendStrokePointCompactData:];
}

id objc_msgSend_appendToBezierPath_selectedNodesOnly_fromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendToBezierPath:selectedNodesOnly:fromIndex:");
}

id objc_msgSend_applicationKeyColorDarkenedIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 applicationKeyColorDarkenedIfNecessary];
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _[a1 applicationState];
}

id objc_msgSend_applyFakeStrokeIfNeededForShape_backgroundAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyFakeStrokeIfNeededForShape:backgroundAppearance:");
}

id objc_msgSend_applyNewBoundsToPrimaryRep(void *a1, const char *a2, ...)
{
  return _[a1 applyNewBoundsToPrimaryRep];
}

id objc_msgSend_applyNewBoundsToRep_(void *a1, const char *a2, ...)
{
  return [a1 applyNewBoundsToRep:];
}

id objc_msgSend_applyStrokeWidth_(void *a1, const char *a2, ...)
{
  return [a1 applyStrokeWidth:];
}

id objc_msgSend_applyToContext_insideStroke_(void *a1, const char *a2, ...)
{
  return [a1 applyToContext:insideStroke:];
}

id objc_msgSend_applyToContext_viewScale_flipped_(void *a1, const char *a2, ...)
{
  return [a1 applyToContext:viewScale:flipped:];
}

id objc_msgSend_applyToRenderable_withScale_(void *a1, const char *a2, ...)
{
  return [a1 applyToRenderable:withScale:];
}

id objc_msgSend_applyToRepRenderable_withScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyToRepRenderable:withScale:");
}

id objc_msgSend_applyToShapeRenderable_withScale_(void *a1, const char *a2, ...)
{
  return [a1 applyToShapeRenderable:withScale:];
}

id objc_msgSend_applyTouchDownAnimationToViews_(void *a1, const char *a2, ...)
{
  return [a1 applyTouchDownAnimationToViews:];
}

id objc_msgSend_applyTouchUpAnimationToViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTouchUpAnimationToViews:");
}

id objc_msgSend_applyTransform_(void *a1, const char *a2, ...)
{
  return [a1 applyTransform:];
}

id objc_msgSend_applyWithExtent_roiCallback_arguments_(void *a1, const char *a2, ...)
{
  return [a1 applyWithExtent:roiCallback:arguments:];
}

id objc_msgSend_approximationError(void *a1, const char *a2, ...)
{
  return _[a1 approximationError];
}

id objc_msgSend_archiveLength(void *a1, const char *a2, ...)
{
  return _[a1 archiveLength];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [a1 archivedDataWithRootObject:requiringSecureCoding:error:];
}

id objc_msgSend_areCollabUserActionsCurrentlyPermitted(void *a1, const char *a2, ...)
{
  return _[a1 areCollabUserActionsCurrentlyPermitted];
}

id objc_msgSend_areIncomingCollaborativeChangesSuspended(void *a1, const char *a2, ...)
{
  return _[a1 areIncomingCollaborativeChangesSuspended];
}

id objc_msgSend_arrangeInspectorDelegate(void *a1, const char *a2, ...)
{
  return _[a1 arrangeInspectorDelegate];
}

id objc_msgSend_arrangeInspectorDidEndChangingZValue(void *a1, const char *a2, ...)
{
  return _[a1 arrangeInspectorDidEndChangingZValue];
}

id objc_msgSend_arrangeInspectorDidSetZValue_forContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrangeInspectorDidSetZValue:forContainer:");
}

id objc_msgSend_arrangeInspectorWillBeginChangingZValue(void *a1, const char *a2, ...)
{
  return _[a1 arrangeInspectorWillBeginChangingZValue];
}

id objc_msgSend_arrangedSubviews(void *a1, const char *a2, ...)
{
  return _[a1 arrangedSubviews];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObject:];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObjectsFromArray:];
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return [a1 arrayForKey:];
}

id objc_msgSend_arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved_(void *a1, const char *a2, ...)
{
  return [a1 arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved:];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_arrowKeyReceivedInDirection_withModifierKeys_(void *a1, const char *a2, ...)
{
  return [a1 arrowKeyReceivedInDirection:withModifierKeys:];
}

id objc_msgSend_asUIKitHost(void *a1, const char *a2, ...)
{
  return _[a1 asUIKitHost];
}

id objc_msgSend_ascent(void *a1, const char *a2, ...)
{
  return _[a1 ascent];
}

id objc_msgSend_asiOSCVC(void *a1, const char *a2, ...)
{
  return _[a1 asiOSCVC];
}

id objc_msgSend_asiOSPresenter(void *a1, const char *a2, ...)
{
  return _[a1 asiOSPresenter];
}

id objc_msgSend_aspectRatioLockControlState(void *a1, const char *a2, ...)
{
  return _[a1 aspectRatioLockControlState];
}

id objc_msgSend_aspectRatioLocked(void *a1, const char *a2, ...)
{
  return _[a1 aspectRatioLocked];
}

id objc_msgSend_assertSearchTargetImplementsProperMethods_(void *a1, const char *a2, ...)
{
  return [a1 assertSearchTargetImplementsProperMethods:];
}

id objc_msgSend_assertTopOfContextStackIsParagraph_(void *a1, const char *a2, ...)
{
  return [a1 assertTopOfContextStackIsParagraph:];
}

id objc_msgSend_asset(void *a1, const char *a2, ...)
{
  return _[a1 asset];
}

id objc_msgSend_assetContainsH264VideoTracks_(void *a1, const char *a2, ...)
{
  return [a1 assetContainsH264VideoTracks];
}

id objc_msgSend_assetContainsHEVCVideoTracks_(void *a1, const char *a2, ...)
{
  return [a1 assetContainsHEVCVideoTracks];
}

id objc_msgSend_assetContainsProResVideoTracks_(void *a1, const char *a2, ...)
{
  return [a1 assetContainsProResVideoTracks];
}

id objc_msgSend_assetContainsVideoTracksWithAlpha_(void *a1, const char *a2, ...)
{
  return [a1 assetContainsVideoTracksWithAlpha:];
}

id objc_msgSend_assetManager(void *a1, const char *a2, ...)
{
  return _[a1 assetManager];
}

id objc_msgSend_assetOwner(void *a1, const char *a2, ...)
{
  return _[a1 assetOwner];
}

id objc_msgSend_assetTrack(void *a1, const char *a2, ...)
{
  return _[a1 assetTrack];
}

id objc_msgSend_assetUUID(void *a1, const char *a2, ...)
{
  return _[a1 assetUUID];
}

id objc_msgSend_associatedBackgroundLayer(void *a1, const char *a2, ...)
{
  return _[a1 associatedBackgroundLayer];
}

id objc_msgSend_associatedBoardItems(void *a1, const char *a2, ...)
{
  return _[a1 associatedBoardItems];
}

id objc_msgSend_associatedFrames(void *a1, const char *a2, ...)
{
  return _[a1 associatedFrames];
}

id objc_msgSend_associatedPoints(void *a1, const char *a2, ...)
{
  return _[a1 associatedPoints];
}

id objc_msgSend_asyncBuildSearchResultsIfNecessaryWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 asyncBuildSearchResultsIfNecessaryWithCompletionBlock:];
}

id objc_msgSend_asyncPerformSearchWithSearchTarget_resultsArray_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 asyncPerformSearchWithSearchTarget:resultsArray:completionBlock:];
}

id objc_msgSend_asyncProvidersForBoardItemsFromPasteboard_(void *a1, const char *a2, ...)
{
  return [a1 asyncProvidersForBoardItemsFromPasteboard:];
}

id objc_msgSend_asyncSearchReferenceAfterReference_inDirection_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 asyncSearchReferenceAfterReference:inDirection:completionBlock:];
}

id objc_msgSend_attachmentCount(void *a1, const char *a2, ...)
{
  return _[a1 attachmentCount];
}

id objc_msgSend_attachmentOrFootnoteAtCharIndex_(void *a1, const char *a2, ...)
{
  return [a1 attachmentOrFootnoteAtCharIndex:];
}

id objc_msgSend_attachmentPositionCount(void *a1, const char *a2, ...)
{
  return _[a1 attachmentPositionCount];
}

id objc_msgSend_attachmentPositions(void *a1, const char *a2, ...)
{
  return _[a1 attachmentPositions];
}

id objc_msgSend_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(void *a1, const char *a2, ...)
{
  return [a1 attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:];
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return [a1 attribute:atIndex:effectiveRange:];
}

id objc_msgSend_attribute_atIndex_longestEffectiveRange_inRange_(void *a1, const char *a2, ...)
{
  return [a1 attribute:atIndex:longestEffectiveRange:inRange:];
}

id objc_msgSend_attributeWithName_bufferUsage_dataType_normalized_componentCount_(void *a1, const char *a2, ...)
{
  return [a1 attributeWithName:bufferUsage:dataType:normalized:componentCount:];
}

id objc_msgSend_attributedSubstringFromRange_(void *a1, const char *a2, ...)
{
  return [a1 attributedSubstringFromRange:];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesAtIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return [a1 attributesAtIndex:effectiveRange:];
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 attributesOfItemAtPath:error:];
}

id objc_msgSend_audioImageRenderable(void *a1, const char *a2, ...)
{
  return _[a1 audioImageRenderable];
}

id objc_msgSend_authorizationStatusForMediaType_(void *a1, const char *a2, ...)
{
  return [a1 authorizationStatusForMediaType];
}

id objc_msgSend_autoScrollIsActive(void *a1, const char *a2, ...)
{
  return _[a1 autoScrollIsActive];
}

id objc_msgSend_autohide(void *a1, const char *a2, ...)
{
  return _[a1 autohide];
}

id objc_msgSend_autohideHighlight(void *a1, const char *a2, ...)
{
  return _[a1 autohideHighlight];
}

id objc_msgSend_automaticallyCancelPendingBlockUponSchedulingNewBlock(void *a1, const char *a2, ...)
{
  return _[a1 automaticallyCancelPendingBlockUponSchedulingNewBlock];
}

id objc_msgSend_automaticallyResizesForContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 automaticallyResizesForContentSizeCategory];
}

id objc_msgSend_autoresizingMask(void *a1, const char *a2, ...)
{
  return _[a1 autoresizingMask];
}

id objc_msgSend_autoscroll(void *a1, const char *a2, ...)
{
  return _[a1 autoscroll];
}

id objc_msgSend_autoscrollDirections(void *a1, const char *a2, ...)
{
  return _[a1 autoscrollDirections];
}

id objc_msgSend_autoscrollWillNotStart(void *a1, const char *a2, ...)
{
  return _[a1 autoscrollWillNotStart];
}

id objc_msgSend_autosizeFlags(void *a1, const char *a2, ...)
{
  return _[a1 autosizeFlags];
}

id objc_msgSend_autosizeFlagsFor_(void *a1, const char *a2, ...)
{
  return [a1 autosizeFlagsFor:];
}

id objc_msgSend_autosizePositionOffset(void *a1, const char *a2, ...)
{
  return _[a1 autosizePositionOffset];
}

id objc_msgSend_autosizePositionOffsetForFixedWidth_height_(void *a1, const char *a2, ...)
{
  return [a1 autosizePositionOffsetForFixedWidth:height:];
}

id objc_msgSend_autosizePositionOffsetForGeometry_dynamicallyDraggedLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autosizePositionOffsetForGeometry:dynamicallyDraggedLayout:");
}

id objc_msgSend_autosizedTransform(void *a1, const char *a2, ...)
{
  return _[a1 autosizedTransform];
}

id objc_msgSend_autosizedTransformForInfoGeometry_(void *a1, const char *a2, ...)
{
  return [a1 autosizedTransformForInfoGeometry:];
}

id objc_msgSend_autosizedTransformForInfoGeometry_size_(void *a1, const char *a2, ...)
{
  return [a1 autosizedTransformForInfoGeometry:size:];
}

id objc_msgSend_autosizes(void *a1, const char *a2, ...)
{
  return _[a1 autosizes];
}

id objc_msgSend_autoupdatingCurrentLocale(void *a1, const char *a2, ...)
{
  return _[a1 autoupdatingCurrentLocale];
}

id objc_msgSend_availableFontDescriptorsForAllFamilies(void *a1, const char *a2, ...)
{
  return _[a1 availableFontDescriptorsForAllFamilies];
}

id objc_msgSend_availableLanguages(void *a1, const char *a2, ...)
{
  return _[a1 availableLanguages];
}

id objc_msgSend_availableRecognitionStatusKeys(void *a1, const char *a2, ...)
{
  return _[a1 availableRecognitionStatusKeys];
}

id objc_msgSend_availableSelectionRangeForCharIndex_(void *a1, const char *a2, ...)
{
  return [a1 availableSelectionRangeForCharIndex:];
}

id objc_msgSend_axisSnapPoint_toXs_toYs_withThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axisSnapPoint:toXs:toYs:withThreshold:");
}

id objc_msgSend_azimuth(void *a1, const char *a2, ...)
{
  return _[a1 azimuth];
}

id objc_msgSend_azimuthAngleInView_(void *a1, const char *a2, ...)
{
  return [a1 azimuthAngleInView:];
}

id objc_msgSend_azimuthData(void *a1, const char *a2, ...)
{
  return _[a1 azimuthData];
}

id objc_msgSend_backRenderable(void *a1, const char *a2, ...)
{
  return _[a1 backRenderable];
}

id objc_msgSend_backdropView(void *a1, const char *a2, ...)
{
  return _[a1 backdropView];
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return _[a1 background];
}

id objc_msgSend_backgroundAppearance(void *a1, const char *a2, ...)
{
  return _[a1 backgroundAppearance];
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColor];
}

id objc_msgSend_backgroundColorForDragPreview(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColorForDragPreview];
}

id objc_msgSend_backgroundColorForDragPreviewOfSelection_(void *a1, const char *a2, ...)
{
  return [a1 backgroundColorForDragPreviewOfSelection:];
}

id objc_msgSend_backgroundColorForMagnifier(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColorForMagnifier];
}

id objc_msgSend_backgroundColorForPresetCollectionViewController_(void *a1, const char *a2, ...)
{
  return [a1 backgroundColorForPresetCollectionViewController:];
}

id objc_msgSend_backgroundImageForState_(void *a1, const char *a2, ...)
{
  return [a1 backgroundImageForState:];
}

id objc_msgSend_backgroundView(void *a1, const char *a2, ...)
{
  return _[a1 backgroundView];
}

id objc_msgSend_balanceControlPoints(void *a1, const char *a2, ...)
{
  return _[a1 balanceControlPoints];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_baseBackdrop(void *a1, const char *a2, ...)
{
  return _[a1 baseBackdrop];
}

id objc_msgSend_baseDomain(void *a1, const char *a2, ...)
{
  return _[a1 baseDomain];
}

id objc_msgSend_baseFont(void *a1, const char *a2, ...)
{
  return _[a1 baseFont];
}

id objc_msgSend_baseFontForFamilyName_(void *a1, const char *a2, ...)
{
  return [a1 baseFontForFamilyName:];
}

id objc_msgSend_baseFontWithDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 baseFontWithDescriptor:];
}

id objc_msgSend_baseFrameForFrameForCullingWithAdditionalTransform_(void *a1, const char *a2, ...)
{
  return [a1 baseFrameForFrameForCullingWithAdditionalTransform:];
}

id objc_msgSend_baseKeywords(void *a1, const char *a2, ...)
{
  return _[a1 baseKeywords];
}

id objc_msgSend_baseKeywordsForShapeFromDictionary_keywordDelimiter_(void *a1, const char *a2, ...)
{
  return [a1 baseKeywordsForShapeFromDictionary:keywordDelimiter:];
}

id objc_msgSend_baseMathView(void *a1, const char *a2, ...)
{
  return _[a1 baseMathView];
}

id objc_msgSend_baseName(void *a1, const char *a2, ...)
{
  return _[a1 baseName];
}

id objc_msgSend_baseNameForShapeFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 baseNameForShapeFromDictionary:];
}

id objc_msgSend_baseNameForShapeType_(void *a1, const char *a2, ...)
{
  return [a1 baseNameForShapeType:];
}

id objc_msgSend_baseNaturalSize(void *a1, const char *a2, ...)
{
  return _[a1 baseNaturalSize];
}

id objc_msgSend_baseNaturalSizeForBounds_(void *a1, const char *a2, ...)
{
  return [a1 baseNaturalSizeForBounds:];
}

id objc_msgSend_baseText(void *a1, const char *a2, ...)
{
  return _[a1 baseText];
}

id objc_msgSend_baseTextScript(void *a1, const char *a2, ...)
{
  return _[a1 baseTextScript];
}

id objc_msgSend_baselineOffset(void *a1, const char *a2, ...)
{
  return _[a1 baselineOffset];
}

id objc_msgSend_baselineRule(void *a1, const char *a2, ...)
{
  return _[a1 baselineRule];
}

id objc_msgSend_basicShapeAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 basicShapeAtIndex:];
}

id objc_msgSend_beamWithPreferredLength_axis_(void *a1, const char *a2, ...)
{
  return [a1 beamWithPreferredLength:axis:];
}

id objc_msgSend_becameNotSelectable(void *a1, const char *a2, ...)
{
  return _[a1 becameNotSelectable];
}

id objc_msgSend_becameNotSelected(void *a1, const char *a2, ...)
{
  return _[a1 becameNotSelected];
}

id objc_msgSend_becameSelectable(void *a1, const char *a2, ...)
{
  return _[a1 becameSelectable];
}

id objc_msgSend_becameSelected(void *a1, const char *a2, ...)
{
  return _[a1 becameSelected];
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 becomeFirstResponder];
}

id objc_msgSend_becomeFirstResponderIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 becomeFirstResponderIfAppropriate];
}

id objc_msgSend_beforeInsertionAddNewItems_board_error_(void *a1, const char *a2, ...)
{
  return [a1 beforeInsertionAddNewItems:board:error:];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginAccess(void *a1, const char *a2, ...)
{
  return _[a1 beginAccess];
}

id objc_msgSend_beginAlignmentOperationForRep_(void *a1, const char *a2, ...)
{
  return [a1 beginAlignmentOperationForRep];
}

id objc_msgSend_beginAlignmentOperationForReps_(void *a1, const char *a2, ...)
{
  return [a1 beginAlignmentOperationForReps:];
}

id objc_msgSend_beginAlignmentOperationForReps_preventCenterGuides_preventSpacingGuides_preventSizingGuides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:");
}

id objc_msgSend_beginAncillaryTextRunWithRange_baseTextRange_(void *a1, const char *a2, ...)
{
  return [a1 beginAncillaryTextRunWithRange:];
}

id objc_msgSend_beginAnimations_(void *a1, const char *a2, ...)
{
  return [a1 beginAnimations:];
}

id objc_msgSend_beginBackgroundTaskWithExpirationHandler_(void *a1, const char *a2, ...)
{
  return [a1 beginBackgroundTaskWithExpirationHandler:];
}

id objc_msgSend_beginDrag(void *a1, const char *a2, ...)
{
  return _[a1 beginDrag];
}

id objc_msgSend_beginDragInsertFromPalette_(void *a1, const char *a2, ...)
{
  return [a1 beginDragInsertFromPalette:];
}

id objc_msgSend_beginDrawable_(void *a1, const char *a2, ...)
{
  return [a1 beginDrawable:];
}

id objc_msgSend_beginDrawingModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 beginDrawingModeIfNeeded];
}

id objc_msgSend_beginDrawingModeIfNeededForTouchType_(void *a1, const char *a2, ...)
{
  return [a1 beginDrawingModeIfNeededForTouchType:];
}

id objc_msgSend_beginDrawingTransformModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 beginDrawingTransformModeIfNeeded];
}

id objc_msgSend_beginDrawingWithViewScale_inputType_(void *a1, const char *a2, ...)
{
  return [a1 beginDrawingWithViewScale:inputType:];
}

id objc_msgSend_beginDynamicOperation(void *a1, const char *a2, ...)
{
  return _[a1 beginDynamicOperation];
}

id objc_msgSend_beginDynamicOperationWithRealTimeCommands_(void *a1, const char *a2, ...)
{
  return [a1 beginDynamicOperationWithRealTimeCommands:];
}

id objc_msgSend_beginDynamicOutsetChange(void *a1, const char *a2, ...)
{
  return _[a1 beginDynamicOutsetChange];
}

id objc_msgSend_beginDynamicallyChangingMaskScale(void *a1, const char *a2, ...)
{
  return _[a1 beginDynamicallyChangingMaskScale];
}

id objc_msgSend_beginEditing(void *a1, const char *a2, ...)
{
  return _[a1 beginEditing];
}

id objc_msgSend_beginEditingAtBeginningOfText(void *a1, const char *a2, ...)
{
  return _[a1 beginEditingAtBeginningOfText];
}

id objc_msgSend_beginEditingAtRange_(void *a1, const char *a2, ...)
{
  return [a1 beginEditingAtRange:];
}

id objc_msgSend_beginEditingChildrenIfAllowedAtUnscaledPoint_pickingDeepestChild_(void *a1, const char *a2, ...)
{
  return [a1 beginEditingChildrenIfAllowedAtUnscaledPoint:pickingDeepestChild:];
}

id objc_msgSend_beginEditingMaskInMaskEditMode_(void *a1, const char *a2, ...)
{
  return [a1 beginEditingMaskInMaskEditMode:];
}

id objc_msgSend_beginEditingOnKeyInputWithString_(void *a1, const char *a2, ...)
{
  return [a1 beginEditingOnKeyInputWithString:];
}

id objc_msgSend_beginEntryWithNameImpl_force32BitSize_lastModificationDate_size_CRC_forceCalculatingSizeAndCRCForPreservingLastModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginEntryWithNameImpl:force32BitSize:lastModificationDate:size:CRC:forceCalculatingSizeAndCRCForPreservingLastModificationDate:");
}

id objc_msgSend_beginFloatingCursorAtPoint_animate_(void *a1, const char *a2, ...)
{
  return [a1 beginFloatingCursorAtPoint:animate:];
}

id objc_msgSend_beginFollowing_forHUDController_(void *a1, const char *a2, ...)
{
  return [a1 beginFollowing:forHUDController:];
}

id objc_msgSend_beginFreeTransformWithTracker_(void *a1, const char *a2, ...)
{
  return [a1 beginFreeTransformWithTracker:];
}

id objc_msgSend_beginFreehandDrawing_(void *a1, const char *a2, ...)
{
  return [a1 beginFreehandDrawing:];
}

id objc_msgSend_beginHandwritingModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 beginHandwritingModeIfNeeded];
}

id objc_msgSend_beginHighlightingWithPath_(void *a1, const char *a2, ...)
{
  return [a1 beginHighlightingWithPath:];
}

id objc_msgSend_beginIgnoringUserInteraction(void *a1, const char *a2, ...)
{
  return _[a1 beginIgnoringUserInteraction];
}

id objc_msgSend_beginLineFragmentBodyWithRange_(void *a1, const char *a2, ...)
{
  return [a1 beginLineFragmentBodyWithRange:];
}

id objc_msgSend_beginLineFragmentWithRange_(void *a1, const char *a2, ...)
{
  return [a1 beginLineFragmentWithRange:];
}

id objc_msgSend_beginListLabel(void *a1, const char *a2, ...)
{
  return _[a1 beginListLabel];
}

id objc_msgSend_beginLoupeSessionAt_(void *a1, const char *a2, ...)
{
  return [a1 beginLoupeSessionAt:];
}

id objc_msgSend_beginModalOperationWithLocalizedMessage_progress_cancelHandler_(void *a1, const char *a2, ...)
{
  return [a1 beginModalOperationWithLocalizedMessage:progress:cancelHandler:];
}

id objc_msgSend_beginModalOperationWithPresentedLocalizedMessage_progress_cancelHandler_(void *a1, const char *a2, ...)
{
  return [a1 beginModalOperationWithPresentedLocalizedMessage:progress:cancelHandler:];
}

id objc_msgSend_beginMovingKnob(void *a1, const char *a2, ...)
{
  return _[a1 beginMovingKnob];
}

id objc_msgSend_beginMultiParagraphEntityWithLineFragmentRange_(void *a1, const char *a2, ...)
{
  return [a1 beginMultiParagraphEntityWithLineFragmentRange:];
}

id objc_msgSend_beginObject_(void *a1, const char *a2, ...)
{
  return [a1 beginObject:];
}

id objc_msgSend_beginOperation(void *a1, const char *a2, ...)
{
  return _[a1 beginOperation];
}

id objc_msgSend_beginParagraphBodyWithLineFragmentRange_(void *a1, const char *a2, ...)
{
  return [a1 beginParagraphBodyWithLineFragmentRange:];
}

id objc_msgSend_beginParagraphWithLineFragmentRange_(void *a1, const char *a2, ...)
{
  return [a1 beginParagraphWithLineFragmentRange:];
}

id objc_msgSend_beginPossibleDynamicOperation(void *a1, const char *a2, ...)
{
  return _[a1 beginPossibleDynamicOperation];
}

id objc_msgSend_beginPreventingDefaultPencilBehaviors(void *a1, const char *a2, ...)
{
  return _[a1 beginPreventingDefaultPencilBehaviors];
}

id objc_msgSend_beginPrimaryTextRunWithRange_hasActualContents_(void *a1, const char *a2, ...)
{
  return [a1 beginPrimaryTextRunWithRange:hasActualContents:];
}

id objc_msgSend_beginResize(void *a1, const char *a2, ...)
{
  return _[a1 beginResize];
}

id objc_msgSend_beginResizingRep_(void *a1, const char *a2, ...)
{
  return [a1 beginResizingRep];
}

id objc_msgSend_beginRotate(void *a1, const char *a2, ...)
{
  return _[a1 beginRotate];
}

id objc_msgSend_beginRubyRunWithRange_baseTextRange_(void *a1, const char *a2, ...)
{
  return [a1 beginRubyRunWithRange:];
}

id objc_msgSend_beginScrollingOperation(void *a1, const char *a2, ...)
{
  return _[a1 beginScrollingOperation];
}

id objc_msgSend_beginScrubbing(void *a1, const char *a2, ...)
{
  return _[a1 beginScrubbing];
}

id objc_msgSend_beginShowingDragUIForInitialDragPoint_(void *a1, const char *a2, ...)
{
  return [a1 beginShowingDragUIForInitialDragPoint:];
}

id objc_msgSend_beginStrokeAtPoint_(void *a1, const char *a2, ...)
{
  return [a1 beginStrokeAtPoint:];
}

id objc_msgSend_beginSuppressingLayerUpdatesExceptForReps_(void *a1, const char *a2, ...)
{
  return [a1 beginSuppressingLayerUpdatesExceptForReps:];
}

id objc_msgSend_beginSuppressingSmartSelection(void *a1, const char *a2, ...)
{
  return _[a1 beginSuppressingSmartSelection];
}

id objc_msgSend_beginTagWithType_(void *a1, const char *a2, ...)
{
  return [a1 beginTagWithType:];
}

id objc_msgSend_beginTagWithType_tagProperties_(void *a1, const char *a2, ...)
{
  return [a1 beginTagWithType:tagProperties:];
}

id objc_msgSend_beginTateChuYokoRunWithRange_baseTextRange_(void *a1, const char *a2, ...)
{
  return [a1 beginTateChuYokoRunWithRange:baseTextRange];
}

id objc_msgSend_beginTextColumn_limitSelection_(void *a1, const char *a2, ...)
{
  return [a1 beginTextColumn:limitSelection:];
}

id objc_msgSend_beginTextStorageChunk_limitSelection_(void *a1, const char *a2, ...)
{
  return [a1 beginTextStorageChunk:limitSelection:];
}

id objc_msgSend_beginTrifurcatedRenderForChildRep_(void *a1, const char *a2, ...)
{
  return [a1 beginTrifurcatedRenderForChildRep];
}

id objc_msgSend_beginWrappingToColumn_columnTransformFromWP_target_hasWrappables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginWrappingToColumn:columnTransformFromWP:target:hasWrappables:");
}

id objc_msgSend_beginningOfDocument(void *a1, const char *a2, ...)
{
  return _[a1 beginningOfDocument];
}

id objc_msgSend_bend(void *a1, const char *a2, ...)
{
  return _[a1 bend];
}

id objc_msgSend_bendParameter(void *a1, const char *a2, ...)
{
  return _[a1 bendParameter];
}

id objc_msgSend_bezierNodeUnderPoint_withTransform_andTolerance_returningType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierNodeUnderPoint:withTransform:andTolerance:returningType:");
}

id objc_msgSend_bezierNodeWithPoint_(void *a1, const char *a2, ...)
{
  return [a1 bezierNodeWithPoint:];
}

id objc_msgSend_bezierNodeWithPoint_inControlPoint_outControlPoint_(void *a1, const char *a2, ...)
{
  return [a1 bezierNodeWithPoint:inControlPoint:outControlPoint:];
}

id objc_msgSend_bezierPath(void *a1, const char *a2, ...)
{
  return _[a1 bezierPath];
}

id objc_msgSend_bezierPathByFlatteningPath(void *a1, const char *a2, ...)
{
  return _[a1 bezierPathByFlatteningPath];
}

id objc_msgSend_bezierPathByFlatteningPathWithFlatness_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathByFlatteningPathWithFlatness:];
}

id objc_msgSend_bezierPathByOffsettingPath_joinStyle_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathByOffsettingPath:joinStyle:];
}

id objc_msgSend_bezierPathByRemovingRedundantElements(void *a1, const char *a2, ...)
{
  return _[a1 bezierPathByRemovingRedundantElements];
}

id objc_msgSend_bezierPathByRemovingSmallSubpathsForInteriorWrapsForInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathByRemovingSmallSubpathsForInteriorWrapsForInset:");
}

id objc_msgSend_bezierPathByReversingPath(void *a1, const char *a2, ...)
{
  return _[a1 bezierPathByReversingPath];
}

id objc_msgSend_bezierPathWithCGPath_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithCGPath:];
}

id objc_msgSend_bezierPathWithContinuousCornerRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithContinuousCornerRoundedRect:cornerRadius:];
}

id objc_msgSend_bezierPathWithConvexHullFromWrapPath_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithConvexHullFromWrapPath:];
}

id objc_msgSend_bezierPathWithConvexHullOfPoints_count_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithConvexHullOfPoints:count:];
}

id objc_msgSend_bezierPathWithDefaultsForErrorCases(void *a1, const char *a2, ...)
{
  return _[a1 bezierPathWithDefaultsForErrorCases];
}

id objc_msgSend_bezierPathWithLegacyRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithLegacyRoundedRect:cornerRadius:];
}

id objc_msgSend_bezierPathWithOvalInRect_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithOvalInRect:];
}

id objc_msgSend_bezierPathWithRect_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithRect:];
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithRoundedRect:cornerRadius:];
}

id objc_msgSend_bezierPathWithRoundedRect_upperRightRadius_lowerRightRadius_lowerLeftRadius_upperLeftRadius_useLegacyCorners_keepNoOpElements_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithRoundedRect:upperRightRadius:lowerRightRadius:lowerLeftRadius:upperLeftRadius:useLegacyCorners:keepNoOpElements:];
}

id objc_msgSend_bezierPathWithStart_end_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithStart:end:];
}

id objc_msgSend_bezierPathWithoutFlips(void *a1, const char *a2, ...)
{
  return _[a1 bezierPathWithoutFlips];
}

id objc_msgSend_bezierPathsBySnappingOutlineFillBezierPath_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathsBySnappingOutlineFillBezierPath];
}

id objc_msgSend_bidiCharIndexCount(void *a1, const char *a2, ...)
{
  return _[a1 bidiCharIndexCount];
}

id objc_msgSend_bidirectionalSizeDependentLayouts(void *a1, const char *a2, ...)
{
  return _[a1 bidirectionalSizeDependentLayouts];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_blockGesture_(void *a1, const char *a2, ...)
{
  return [a1 blockGesture:];
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 blockOperationWithBlock:];
}

id objc_msgSend_blockToRunCommandToPostProcessWithNewBoardItem_shapeType_infosToConnect_commandController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockToRunCommandToPostProcessWithNewBoardItem:shapeType:infosToConnect:commandController:");
}

id objc_msgSend_blueColor(void *a1, const char *a2, ...)
{
  return _[a1 blueColor];
}

id objc_msgSend_blueComponent(void *a1, const char *a2, ...)
{
  return _[a1 blueComponent];
}

id objc_msgSend_blurBlendKernel(void *a1, const char *a2, ...)
{
  return _[a1 blurBlendKernel];
}

id objc_msgSend_blurEffect(void *a1, const char *a2, ...)
{
  return _[a1 blurEffect];
}

id objc_msgSend_blurEffectProvidedByHierarchyOfView_(void *a1, const char *a2, ...)
{
  return [a1 blurEffectProvidedByHierarchyOfView:];
}

id objc_msgSend_board(void *a1, const char *a2, ...)
{
  return _[a1 board];
}

id objc_msgSend_boardForPasteboardController_(void *a1, const char *a2, ...)
{
  return [a1 boardForPasteboardController:];
}

id objc_msgSend_boardIdentifierStringRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 boardIdentifierStringRepresentation];
}

id objc_msgSend_boardItem(void *a1, const char *a2, ...)
{
  return _[a1 boardItem];
}

id objc_msgSend_boardItemFactory(void *a1, const char *a2, ...)
{
  return _[a1 boardItemFactory];
}

id objc_msgSend_boardItemFactoryForPasteboardController_(void *a1, const char *a2, ...)
{
  return [a1 boardItemFactoryForPasteboardController:];
}

id objc_msgSend_boardItemImporter_needsMediaCompatibilityFeedbackWithReasons_forMediaType_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boardItemImporter:needsMediaCompatibilityFeedbackWithReasons:forMediaType:usingBlock:");
}

id objc_msgSend_boardItemImporterWillIgnoreMediaCompatibilityOnAllDevicesRequirement_(void *a1, const char *a2, ...)
{
  return [a1 boardItemImporterWillIgnoreMediaCompatibilityOnAllDevicesRequirement];
}

id objc_msgSend_boardItemOwner(void *a1, const char *a2, ...)
{
  return _[a1 boardItemOwner];
}

id objc_msgSend_boardItemOwnerForCanvas_(void *a1, const char *a2, ...)
{
  return [a1 boardItemOwnerForCanvas:];
}

id objc_msgSend_boardItems(void *a1, const char *a2, ...)
{
  return _[a1 boardItems];
}

id objc_msgSend_boardItemsForCopyByFixingUpBoardItems_boardItemFactory_board_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boardItemsForCopyByFixingUpBoardItems:boardItemFactory:board:");
}

id objc_msgSend_boardItemsForSelectionPath_(void *a1, const char *a2, ...)
{
  return [a1 boardItemsForSelectionPath:];
}

id objc_msgSend_boardItemsOfClass_(void *a1, const char *a2, ...)
{
  return [a1 boardItemsOfClass:];
}

id objc_msgSend_boardItemsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 boardItemsToDelete];
}

id objc_msgSend_boardViewController(void *a1, const char *a2, ...)
{
  return _[a1 boardViewController];
}

id objc_msgSend_boardViewControllerTraitCollectionForShapeLibraryViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boardViewControllerTraitCollectionForShapeLibraryViewController:");
}

id objc_msgSend_bold(void *a1, const char *a2, ...)
{
  return _[a1 bold];
}

id objc_msgSend_boldActiveStylePresetPair(void *a1, const char *a2, ...)
{
  return _[a1 boldActiveStylePresetPair];
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return [a1 boldSystemFontOfSize:];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_borderColor(void *a1, const char *a2, ...)
{
  return _[a1 borderColor];
}

id objc_msgSend_borderWidth(void *a1, const char *a2, ...)
{
  return _[a1 borderWidth];
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _[a1 bottomAnchor];
}

id objc_msgSend_bottomInset(void *a1, const char *a2, ...)
{
  return _[a1 bottomInset];
}

id objc_msgSend_boundingBox(void *a1, const char *a2, ...)
{
  return _[a1 boundingBox];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_boundsBeforeRotation(void *a1, const char *a2, ...)
{
  return _[a1 boundsBeforeRotation];
}

id objc_msgSend_boundsByFittingBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 boundsByFittingBoardItem:];
}

id objc_msgSend_boundsForCaretLayer_(void *a1, const char *a2, ...)
{
  return [a1 boundsForCaretLayer:];
}

id objc_msgSend_boundsForCollaboratorCursorRenderable(void *a1, const char *a2, ...)
{
  return _[a1 boundsForCollaboratorCursorRenderable];
}

id objc_msgSend_boundsForCollaboratorHUDForSelectionPath_(void *a1, const char *a2, ...)
{
  return [a1 boundsForCollaboratorHUDForSelectionPath:];
}

id objc_msgSend_boundsForHighlightLayer(void *a1, const char *a2, ...)
{
  return _[a1 boundsForHighlightLayer];
}

id objc_msgSend_boundsForLineEnd_atPoint_atAngle_withScale_transform_(void *a1, const char *a2, ...)
{
  return [a1 boundsForLineEnd:atPoint:atAngle:withScale:transform:];
}

id objc_msgSend_boundsForMathResultViews(void *a1, const char *a2, ...)
{
  return _[a1 boundsForMathResultViews];
}

id objc_msgSend_boundsForRep_(void *a1, const char *a2, ...)
{
  return [a1 boundsForRep:];
}

id objc_msgSend_boundsForResizeGuideUI(void *a1, const char *a2, ...)
{
  return _[a1 boundsForResizeGuideUI];
}

id objc_msgSend_boundsForStandardKnobs(void *a1, const char *a2, ...)
{
  return _[a1 boundsForStandardKnobs];
}

id objc_msgSend_boundsInNaturalSpaceForRep_(void *a1, const char *a2, ...)
{
  return [a1 boundsInNaturalSpaceForRep:];
}

id objc_msgSend_boundsIncludingCRLStroke_(void *a1, const char *a2, ...)
{
  return [a1 boundsIncludingCRLStroke];
}

id objc_msgSend_boundsIncludingDropCapRectsForSelectionType_(void *a1, const char *a2, ...)
{
  return [a1 boundsIncludingDropCapRectsForSelectionType:];
}

id objc_msgSend_boundsIncludingStroke(void *a1, const char *a2, ...)
{
  return _[a1 boundsIncludingStroke];
}

id objc_msgSend_boundsIncludingStrokeWidth_joinStyle_capStyle_miterLimit_needsToExtendJoins_(void *a1, const char *a2, ...)
{
  return [a1 boundsIncludingStrokeWidth:joinStyle:capStyle:miterLimit:needsToExtendJoins:];
}

id objc_msgSend_boundsOfLineEndForHead_transform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundsOfLineEndForHead:transform:");
}

id objc_msgSend_boundsOfLineFragmentAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 boundsOfLineFragmentAtIndex:];
}

id objc_msgSend_boundsOfStrokes_(void *a1, const char *a2, ...)
{
  return [a1 boundsOfStrokes:];
}

id objc_msgSend_boundsRectForSelection_columnArray_includeRuby_includePaginatedAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundsRectForSelection:columnArray:includeRuby:includePaginatedAttachments:");
}

id objc_msgSend_boxedValueForProperty_(void *a1, const char *a2, ...)
{
  return [a1 boxedValueForProperty:];
}

id objc_msgSend_breadcrumbsDescriptionWithIndex_(void *a1, const char *a2, ...)
{
  return [a1 breadcrumbsDescriptionWithIndex:];
}

id objc_msgSend_brightness(void *a1, const char *a2, ...)
{
  return _[a1 brightness];
}

id objc_msgSend_bringForward_(void *a1, const char *a2, ...)
{
  return [a1 bringForward:];
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return [a1 bringSubviewToFront:];
}

id objc_msgSend_bringToFront_(void *a1, const char *a2, ...)
{
  return [a1 bringToFront:];
}

id objc_msgSend_brownColor(void *a1, const char *a2, ...)
{
  return _[a1 brownColor];
}

id objc_msgSend_brushStrokeUsesMetal(void *a1, const char *a2, ...)
{
  return _[a1 brushStrokeUsesMetal];
}

id objc_msgSend_bufferCount(void *a1, const char *a2, ...)
{
  return _[a1 bufferCount];
}

id objc_msgSend_bufferDataSize(void *a1, const char *a2, ...)
{
  return _[a1 bufferDataSize];
}

id objc_msgSend_bufferDataType(void *a1, const char *a2, ...)
{
  return _[a1 bufferDataType];
}

id objc_msgSend_bufferIndex(void *a1, const char *a2, ...)
{
  return _[a1 bufferIndex];
}

id objc_msgSend_bufferOffset(void *a1, const char *a2, ...)
{
  return _[a1 bufferOffset];
}

id objc_msgSend_bufferUsage(void *a1, const char *a2, ...)
{
  return _[a1 bufferUsage];
}

id objc_msgSend_buildHighlightsForSearchReferences_contentsScaleForLayers_shouldCreateBackground_backgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 buildHighlightsForSearchReferences:contentsScaleForLayers:shouldCreateBackground:backgroundColor:];
}

id objc_msgSend_buildLayersForPath_withImage_(void *a1, const char *a2, ...)
{
  return [a1 buildLayersForPath:withImage:];
}

id objc_msgSend_buildSearchResultsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 buildSearchResultsIfNecessary];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return [a1 bundleForClass];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithIdentifier:];
}

id objc_msgSend_button(void *a1, const char *a2, ...)
{
  return _[a1 button];
}

id objc_msgSend_buttonMask(void *a1, const char *a2, ...)
{
  return _[a1 buttonMask];
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return [a1 buttonWithType:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cString(void *a1, const char *a2, ...)
{
  return _[a1 cString];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 cStringUsingEncoding:];
}

id objc_msgSend_cacheFaces_forFontFamily_(void *a1, const char *a2, ...)
{
  return [a1 cacheFaces:forFontFamily:];
}

id objc_msgSend_cacheFont_withKey_(void *a1, const char *a2, ...)
{
  return [a1 cacheFont:withKey:];
}

id objc_msgSend_cacheKeyForFontDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 cacheKeyForFontDescriptor:];
}

id objc_msgSend_cacheKeyForFontWithPostScriptName_atSize_bold_italic_(void *a1, const char *a2, ...)
{
  return [a1 cacheKeyForFontWithPostScriptName:atSize:bold:italic:];
}

id objc_msgSend_cacheKeyWithFontName_fontSize_bold_italic_fontFeatures_(void *a1, const char *a2, ...)
{
  return [a1 cacheKeyWithFontName:fontName fontSize:fontSize bold:bold italic:italic fontFeatures:fontFeatures];
}

id objc_msgSend_cacheKeyWithFontName_size_(void *a1, const char *a2, ...)
{
  return [a1 cacheKeyWithFontName:size:];
}

id objc_msgSend_cacheWithBoardItems_(void *a1, const char *a2, ...)
{
  return [a1 cacheWithBoardItems:];
}

id objc_msgSend_cachedAvailableFamilyFonts(void *a1, const char *a2, ...)
{
  return _[a1 cachedAvailableFamilyFonts];
}

id objc_msgSend_cachedCGImageOfNearestSizeOrNULLPreferringSize_withContentsScaleProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedCGImageOfNearestSizeOrNULLPreferringSize:withContentsScaleProvider:");
}

id objc_msgSend_cachedFacesOfFontFamily_(void *a1, const char *a2, ...)
{
  return [a1 cachedFacesOfFontFamily:];
}

id objc_msgSend_cachedFirstElementForUpcomingPageTurn(void *a1, const char *a2, ...)
{
  return _[a1 cachedFirstElementForUpcomingPageTurn];
}

id objc_msgSend_cachedFirstElementForUpcomingScreenChange(void *a1, const char *a2, ...)
{
  return _[a1 cachedFirstElementForUpcomingScreenChange];
}

id objc_msgSend_cachedGestureTarget(void *a1, const char *a2, ...)
{
  return _[a1 cachedGestureTarget];
}

id objc_msgSend_cachedImageWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 cachedImageWithHandler:];
}

id objc_msgSend_cachedPKDrawing(void *a1, const char *a2, ...)
{
  return _[a1 cachedPKDrawing];
}

id objc_msgSend_cachedTypesetterForParagraphIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 cachedTypesetterForParagraphIdentifier:];
}

id objc_msgSend_calculateLengthOfElement_(void *a1, const char *a2, ...)
{
  return [a1 calculateLengthOfElement:];
}

id objc_msgSend_calculateLengths(void *a1, const char *a2, ...)
{
  return _[a1 calculateLengths];
}

id objc_msgSend_calculateNewControlFromOriginalDelta_currentDelta_originalSmoothDelta_node_(void *a1, const char *a2, ...)
{
  return [a1 calculateNewControlFromOriginalDelta:currentDelta:originalSmoothDelta:node:];
}

id objc_msgSend_calculatePointFromSearchReference_(void *a1, const char *a2, ...)
{
  return [a1 calculatePointFromSearchReference:];
}

id objc_msgSend_calculateSelectionPinRectsForSelection_inColumns_outSelectionPinRect_outSelectionTailPinRect_(void *a1, const char *a2, ...)
{
  return [a1 calculateSelectionPinRectsForSelection:inColumns:outSelectionPinRect:outSelectionTailPinRect:];
}

id objc_msgSend_calculateVisualRunsFromSelection_updateControllerSelection_(void *a1, const char *a2, ...)
{
  return [a1 calculateVisualRunsFromSelection:updateControllerSelection:];
}

id objc_msgSend_callStackDescriptionWithAction_callStackSymbols_index_(void *a1, const char *a2, ...)
{
  return [a1 callStackDescriptionWithAction:callStackSymbols:index:];
}

id objc_msgSend_callStackReturnAddresses(void *a1, const char *a2, ...)
{
  return _[a1 callStackReturnAddresses];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_calloutWithCornerRadius_tailPosition_tailSize_naturalSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calloutWithCornerRadius:tailPosition:tailSize:naturalSize:");
}

id objc_msgSend_canAddKnobsForRep_(void *a1, const char *a2, ...)
{
  return [a1 canAddKnobsForRep:];
}

id objc_msgSend_canApplyDirectlyToRepRenderable(void *a1, const char *a2, ...)
{
  return _[a1 canApplyDirectlyToRepRenderable];
}

id objc_msgSend_canApplyToRenderable(void *a1, const char *a2, ...)
{
  return _[a1 canApplyToRenderable];
}

id objc_msgSend_canApplyToRenderableByAddingSubrenderables(void *a1, const char *a2, ...)
{
  return _[a1 canApplyToRenderableByAddingSubrenderables];
}

id objc_msgSend_canApplyToShapeRenderable(void *a1, const char *a2, ...)
{
  return _[a1 canApplyToShapeRenderable];
}

id objc_msgSend_canAspectRatioLockBeChangedByUser(void *a1, const char *a2, ...)
{
  return _[a1 canAspectRatioLockBeChangedByUser];
}

id objc_msgSend_canBeConvertedToEncoding_(void *a1, const char *a2, ...)
{
  return [a1 canBeConvertedToEncoding:];
}

id objc_msgSend_canBeDivided(void *a1, const char *a2, ...)
{
  return _[a1 canBeDivided];
}

id objc_msgSend_canBeIntersected(void *a1, const char *a2, ...)
{
  return _[a1 canBeIntersected];
}

id objc_msgSend_canBeOccluded(void *a1, const char *a2, ...)
{
  return _[a1 canBeOccluded];
}

id objc_msgSend_canBeReplaced(void *a1, const char *a2, ...)
{
  return _[a1 canBeReplaced];
}

id objc_msgSend_canBeUsedForImageMask(void *a1, const char *a2, ...)
{
  return _[a1 canBeUsedForImageMask];
}

id objc_msgSend_canBecomeFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 canBecomeFirstResponder];
}

id objc_msgSend_canBeginEditing(void *a1, const char *a2, ...)
{
  return _[a1 canBeginEditing];
}

id objc_msgSend_canBeginEditingChildRepOnDoubleTap_(void *a1, const char *a2, ...)
{
  return [a1 canBeginEditingChildRepOnDoubleTap:];
}

id objc_msgSend_canBeginEditingChildRepOnDoubleTap_ignoreSelectionState_(void *a1, const char *a2, ...)
{
  return [a1 canBeginEditingChildRepOnDoubleTap:ignoreSelectionState:];
}

id objc_msgSend_canBeginEditingRepOnDoubleTap_(void *a1, const char *a2, ...)
{
  return [a1 canBeginEditingRepOnDoubleTap:];
}

id objc_msgSend_canBeginFreehandDrawingMode(void *a1, const char *a2, ...)
{
  return _[a1 canBeginFreehandDrawingMode];
}

id objc_msgSend_canBringDrawablesForward(void *a1, const char *a2, ...)
{
  return _[a1 canBringDrawablesForward];
}

id objc_msgSend_canCenterResize(void *a1, const char *a2, ...)
{
  return _[a1 canCenterResize];
}

id objc_msgSend_canClosePathToKnob_(void *a1, const char *a2, ...)
{
  return [a1 canClosePathToKnob:];
}

id objc_msgSend_canConnectToRep_(void *a1, const char *a2, ...)
{
  return [a1 canConnectToRep];
}

id objc_msgSend_canCopyStyle(void *a1, const char *a2, ...)
{
  return _[a1 canCopyStyle];
}

id objc_msgSend_canCopySubselection(void *a1, const char *a2, ...)
{
  return _[a1 canCopySubselection];
}

id objc_msgSend_canCreateBoardItemsFromDragInfo_(void *a1, const char *a2, ...)
{
  return [a1 canCreateBoardItemsFromDragInfo:];
}

id objc_msgSend_canCreateItemsOfClass_(void *a1, const char *a2, ...)
{
  return [a1 canCreateItemsOfClass:];
}

id objc_msgSend_canDeleteSelectedNodes(void *a1, const char *a2, ...)
{
  return _[a1 canDeleteSelectedNodes];
}

id objc_msgSend_canDivideCompoundShape(void *a1, const char *a2, ...)
{
  return _[a1 canDivideCompoundShape];
}

id objc_msgSend_canDivideCompoundShape_(void *a1, const char *a2, ...)
{
  return [a1 canDivideCompoundShape];
}

id objc_msgSend_canDrawShadowInOneStepWithChildren_(void *a1, const char *a2, ...)
{
  return [a1 canDrawShadowInOneStepWithChildren:];
}

id objc_msgSend_canDrawWithOtherShapeRep_(void *a1, const char *a2, ...)
{
  return [a1 canDrawWithOtherShapeRep];
}

id objc_msgSend_canDrawWithOtherStroke_(void *a1, const char *a2, ...)
{
  return [a1 canDrawWithOtherStroke:];
}

id objc_msgSend_canEditRepWithDragOperation_(void *a1, const char *a2, ...)
{
  return [a1 canEditRepWithDragOperation:];
}

id objc_msgSend_canEditTextIn_using_(void *a1, const char *a2, ...)
{
  return [a1 canEditTextIn:using:];
}

id objc_msgSend_canEditWithEditor_(void *a1, const char *a2, ...)
{
  return [a1 canEditWithEditor:];
}

id objc_msgSend_canEndpointsCoincide(void *a1, const char *a2, ...)
{
  return _[a1 canEndpointsCoincide];
}

id objc_msgSend_canFlipDuringResize(void *a1, const char *a2, ...)
{
  return _[a1 canFlipDuringResize];
}

id objc_msgSend_canGroupBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 canGroupBoardItem:];
}

id objc_msgSend_canGroupBoardItems_(void *a1, const char *a2, ...)
{
  return [a1 canGroupBoardItems:];
}

id objc_msgSend_canHandleGesture_(void *a1, const char *a2, ...)
{
  return [a1 canHandleGesture:];
}

id objc_msgSend_canHandleInsertAndConnectBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 canHandleInsertAndConnectBoardItem:];
}

id objc_msgSend_canHandleInsertionOfBoardItems_insertionContext_(void *a1, const char *a2, ...)
{
  return [a1 canHandleInsertionOfBoardItems:insertionContext:];
}

id objc_msgSend_canIgnoreEvent(void *a1, const char *a2, ...)
{
  return _[a1 canIgnoreEvent];
}

id objc_msgSend_canImportRemoteURL_(void *a1, const char *a2, ...)
{
  return [a1 canImportRemoteURL:];
}

id objc_msgSend_canInitWithDataType_(void *a1, const char *a2, ...)
{
  return [a1 canInitWithDataType:];
}

id objc_msgSend_canInitWithType_(void *a1, const char *a2, ...)
{
  return [a1 canInitWithType:];
}

id objc_msgSend_canInitWithURL_(void *a1, const char *a2, ...)
{
  return [a1 canInitWithURL:];
}

id objc_msgSend_canInsertBoardItems_intoGroup_(void *a1, const char *a2, ...)
{
  return [a1 canInsertBoardItems:intoGroup:];
}

id objc_msgSend_canInsertBoardItemsFromDragOperationForDragInfo_(void *a1, const char *a2, ...)
{
  return [a1 canInsertBoardItemsFromDragOperationForDragInfo:];
}

id objc_msgSend_canInsertScribbleElementAtPoint_(void *a1, const char *a2, ...)
{
  return [a1 canInsertScribbleElementAtPoint:];
}

id objc_msgSend_canInspectGeometry(void *a1, const char *a2, ...)
{
  return _[a1 canInspectGeometry];
}

id objc_msgSend_canIntersectPaths(void *a1, const char *a2, ...)
{
  return _[a1 canIntersectPaths];
}

id objc_msgSend_canLoadItemsOfClass_(void *a1, const char *a2, ...)
{
  return [a1 canLoadItemsOfClass:];
}

id objc_msgSend_canLoadObjectOfClass_(void *a1, const char *a2, ...)
{
  return [a1 canLoadObjectOfClass];
}

id objc_msgSend_canLoadObjectsOfClass_(void *a1, const char *a2, ...)
{
  return [a1 canLoadObjectsOfClass:];
}

id objc_msgSend_canLogAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 canLogAnalytics];
}

id objc_msgSend_canMakePathEditable(void *a1, const char *a2, ...)
{
  return _[a1 canMakePathEditable];
}

id objc_msgSend_canMakePathSmoothOrSharp(void *a1, const char *a2, ...)
{
  return _[a1 canMakePathSmoothOrSharp];
}

id objc_msgSend_canMultiSelect(void *a1, const char *a2, ...)
{
  return _[a1 canMultiSelect];
}

id objc_msgSend_canOpenItemURLFor_(void *a1, const char *a2, ...)
{
  return [a1 canOpenItemURLFor:];
}

id objc_msgSend_canOpenURL_(void *a1, const char *a2, ...)
{
  return [a1 canOpenURL:];
}

id objc_msgSend_canOriginateSystemDrags(void *a1, const char *a2, ...)
{
  return _[a1 canOriginateSystemDrags];
}

id objc_msgSend_canPasteDataFromPhysicalKeyboard_(void *a1, const char *a2, ...)
{
  return [a1 canPasteDataFromPhysicalKeyboard:];
}

id objc_msgSend_canPasteIntoCurrentlySelectedGroups(void *a1, const char *a2, ...)
{
  return _[a1 canPasteIntoCurrentlySelectedGroups];
}

id objc_msgSend_canPasteWithItemSource_selection_sender_(void *a1, const char *a2, ...)
{
  return [a1 canPasteWithItemSource:selection:sender:];
}

id objc_msgSend_canPasteWithItemSource_sender_(void *a1, const char *a2, ...)
{
  return [a1 canPasteWithItemSource:sender];
}

id objc_msgSend_canPasteWithPasteboard_(void *a1, const char *a2, ...)
{
  return [a1 canPasteWithPasteboard:];
}

id objc_msgSend_canPerformAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformAction:withSender:];
}

id objc_msgSend_canPerformEditorAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformEditorAction:withSender:];
}

id objc_msgSend_canPerformInteractiveAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformInteractiveAction:withSender:];
}

id objc_msgSend_canPerformMaskWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformMaskWithSender:];
}

id objc_msgSend_canPerformMaskWithShapeTypeWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformMaskWithShapeTypeWithSender];
}

id objc_msgSend_canPerformMaskWithShapeWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformMaskWithShapeWithSender:];
}

id objc_msgSend_canPerformUnmaskWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canPerformUnmaskWithSender];
}

id objc_msgSend_canPerformUserAction(void *a1, const char *a2, ...)
{
  return _[a1 canPerformUserAction];
}

id objc_msgSend_canPerformUserActionUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 canPerformUserActionUsingBlock:];
}

id objc_msgSend_canPlay(void *a1, const char *a2, ...)
{
  return _[a1 canPlay];
}

id objc_msgSend_canPlayFastForward(void *a1, const char *a2, ...)
{
  return _[a1 canPlayFastForward];
}

id objc_msgSend_canPlayFastReverse(void *a1, const char *a2, ...)
{
  return _[a1 canPlayFastReverse];
}

id objc_msgSend_canProduceBoardItems(void *a1, const char *a2, ...)
{
  return _[a1 canProduceBoardItems];
}

id objc_msgSend_canProduceBoardItemsFromPasteboard_(void *a1, const char *a2, ...)
{
  return [a1 canProduceBoardItemsFromPasteboard:];
}

id objc_msgSend_canReceiveSystemDrops(void *a1, const char *a2, ...)
{
  return _[a1 canReceiveSystemDrops];
}

id objc_msgSend_canRedo(void *a1, const char *a2, ...)
{
  return _[a1 canRedo];
}

id objc_msgSend_canRedoDisregardingDelegates(void *a1, const char *a2, ...)
{
  return _[a1 canRedoDisregardingDelegates];
}

id objc_msgSend_canRemainDuringDragInsert(void *a1, const char *a2, ...)
{
  return _[a1 canRemainDuringDragInsert];
}

id objc_msgSend_canRemainDuringSharedReadOnlyMode(void *a1, const char *a2, ...)
{
  return _[a1 canRemainDuringSharedReadOnlyMode];
}

id objc_msgSend_canRemoveBackgroundFromImage(void *a1, const char *a2, ...)
{
  return _[a1 canRemoveBackgroundFromImage];
}

id objc_msgSend_canRenderDirectlyManagedForRenderable_(void *a1, const char *a2, ...)
{
  return [a1 canRenderDirectlyManagedForRenderable:];
}

id objc_msgSend_canReplaceBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 canReplaceBoardItem:];
}

id objc_msgSend_canResetMediaSize(void *a1, const char *a2, ...)
{
  return _[a1 canResetMediaSize];
}

id objc_msgSend_canResetTextAndObjectHandles(void *a1, const char *a2, ...)
{
  return _[a1 canResetTextAndObjectHandles];
}

id objc_msgSend_canReuseForRepContentLayersDuringBackgroundUpdate(void *a1, const char *a2, ...)
{
  return _[a1 canReuseForRepContentLayersDuringBackgroundUpdate];
}

id objc_msgSend_canReuseUnmodifiedForRepContentPile_(void *a1, const char *a2, ...)
{
  return [a1 canReuseUnmodifiedForRepContentPile:];
}

id objc_msgSend_canSeek(void *a1, const char *a2, ...)
{
  return _[a1 canSeek];
}

id objc_msgSend_canSelectChildRep_(void *a1, const char *a2, ...)
{
  return [a1 canSelectChildRep];
}

id objc_msgSend_canSendDrawablesBackward(void *a1, const char *a2, ...)
{
  return _[a1 canSendDrawablesBackward];
}

id objc_msgSend_canShowPreview(void *a1, const char *a2, ...)
{
  return _[a1 canShowPreview];
}

id objc_msgSend_canSnapToRuler(void *a1, const char *a2, ...)
{
  return _[a1 canSnapToRuler];
}

id objc_msgSend_canSnapToShape(void *a1, const char *a2, ...)
{
  return _[a1 canSnapToShape];
}

id objc_msgSend_canStepBackward(void *a1, const char *a2, ...)
{
  return _[a1 canStepBackward];
}

id objc_msgSend_canStepForward(void *a1, const char *a2, ...)
{
  return _[a1 canStepForward];
}

id objc_msgSend_canToggleMaskEditMode(void *a1, const char *a2, ...)
{
  return _[a1 canToggleMaskEditMode];
}

id objc_msgSend_canTranslate(void *a1, const char *a2, ...)
{
  return _[a1 canTranslate];
}

id objc_msgSend_canUndo(void *a1, const char *a2, ...)
{
  return _[a1 canUndo];
}

id objc_msgSend_canUndoDisregardingDelegates(void *a1, const char *a2, ...)
{
  return _[a1 canUndoDisregardingDelegates];
}

id objc_msgSend_canUngroupGroupInfo_(void *a1, const char *a2, ...)
{
  return [a1 canUngroupGroupInfo:];
}

id objc_msgSend_canUngroupWithSelection_(void *a1, const char *a2, ...)
{
  return [a1 canUngroupWithSelection:];
}

id objc_msgSend_canUseSpecializedHitRegionForKnob_(void *a1, const char *a2, ...)
{
  return [a1 canUseSpecializedHitRegionForKnob:];
}

id objc_msgSend_canUseToChangeShape(void *a1, const char *a2, ...)
{
  return _[a1 canUseToChangeShape];
}

id objc_msgSend_canUserReplaceText(void *a1, const char *a2, ...)
{
  return _[a1 canUserReplaceText];
}

id objc_msgSend_canZoomToCurrentSelection(void *a1, const char *a2, ...)
{
  return _[a1 canZoomToCurrentSelection];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelAnimated_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 cancelAnimated:completionQueue:completionHandler:];
}

id objc_msgSend_cancelButtonTitleNonNil(void *a1, const char *a2, ...)
{
  return _[a1 cancelButtonTitleNonNil];
}

id objc_msgSend_cancelCommitSelectionForHandlingMarqueeTapForSmartSelection(void *a1, const char *a2, ...)
{
  return _[a1 cancelCommitSelectionForHandlingMarqueeTapForSmartSelection];
}

id objc_msgSend_cancelDragToInsert(void *a1, const char *a2, ...)
{
  return _[a1 cancelDragToInsert];
}

id objc_msgSend_cancelExport(void *a1, const char *a2, ...)
{
  return _[a1 cancelExport];
}

id objc_msgSend_cancelLoading(void *a1, const char *a2, ...)
{
  return _[a1 cancelLoading];
}

id objc_msgSend_cancelOngoingRecognitionRequests(void *a1, const char *a2, ...)
{
  return _[a1 cancelOngoingRecognitionRequests];
}

id objc_msgSend_cancelOperation(void *a1, const char *a2, ...)
{
  return _[a1 cancelOperation];
}

id objc_msgSend_cancelPendingSeeks(void *a1, const char *a2, ...)
{
  return _[a1 cancelPendingSeeks];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return [a1 cancelPreviousPerformRequestsWithTarget:];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return [a1 cancelPreviousPerformRequestsWithTarget:selector:object:];
}

id objc_msgSend_cancelReading(void *a1, const char *a2, ...)
{
  return _[a1 cancelReading];
}

id objc_msgSend_cancelScrollToCurrentSelectionPathAfterLayout(void *a1, const char *a2, ...)
{
  return _[a1 cancelScrollToCurrentSelectionPathAfterLayout];
}

id objc_msgSend_cancelSwatchRenderingIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 cancelSwatchRenderingIfNeeded];
}

id objc_msgSend_cancellationHandler(void *a1, const char *a2, ...)
{
  return _[a1 cancellationHandler];
}

id objc_msgSend_canvas(void *a1, const char *a2, ...)
{
  return _[a1 canvas];
}

id objc_msgSend_canvas_createdRep_(void *a1, const char *a2, ...)
{
  return [a1 canvas:createdRep:];
}

id objc_msgSend_canvasBackground(void *a1, const char *a2, ...)
{
  return _[a1 canvasBackground];
}

id objc_msgSend_canvasBoundsOfBoardItem_(void *a1, const char *a2, ...)
{
  return [a1 canvasBoundsOfBoardItem:];
}

id objc_msgSend_canvasCenterOffsetForProposedViewScale_originalViewScale_(void *a1, const char *a2, ...)
{
  return [a1 canvasCenterOffsetForProposedViewScale:originalViewScale:];
}

id objc_msgSend_canvasContentsScaleForTrifurcationContainer_(void *a1, const char *a2, ...)
{
  return [a1 canvasContentsScaleForTrifurcationContainer];
}

id objc_msgSend_canvasController(void *a1, const char *a2, ...)
{
  return _[a1 canvasController];
}

id objc_msgSend_canvasDidInvalidateAllLayers_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidInvalidateAllLayers:];
}

id objc_msgSend_canvasDidLayout_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidLayout:];
}

id objc_msgSend_canvasDidUpdateReps_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidUpdateReps:];
}

id objc_msgSend_canvasDidUpdateRepsFromLayouts_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidUpdateRepsFromLayouts:];
}

id objc_msgSend_canvasDidValidateLayouts_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidValidateLayouts:];
}

id objc_msgSend_canvasDidValidateLayoutsWithDependencies_(void *a1, const char *a2, ...)
{
  return [a1 canvasDidValidateLayoutsWithDependencies:];
}

id objc_msgSend_canvasEdgeBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 canvasEdgeBackgroundColor];
}

id objc_msgSend_canvasEditor(void *a1, const char *a2, ...)
{
  return _[a1 canvasEditor];
}

id objc_msgSend_canvasEditorCanCopyStyleWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanCopyStyleWithSender:];
}

id objc_msgSend_canvasEditorCanCopyWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanCopyWithSender:");
}

id objc_msgSend_canvasEditorCanCutWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanCutWithSender:");
}

id objc_msgSend_canvasEditorCanDeleteWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanDeleteWithSender:];
}

id objc_msgSend_canvasEditorCanDeselectAllWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanDeselectAllWithSender:");
}

id objc_msgSend_canvasEditorCanDuplicateWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanDuplicateWithSender:];
}

id objc_msgSend_canvasEditorCanGroupWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanGroupWithSender:];
}

id objc_msgSend_canvasEditorCanOptionDragDuplicateWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanOptionDragDuplicateWithSender:");
}

id objc_msgSend_canvasEditorCanPasteAsPlainTextWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPasteAsPlainTextWithSender:];
}

id objc_msgSend_canvasEditorCanPasteValuesWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPasteValuesWithSender:];
}

id objc_msgSend_canvasEditorCanPasteWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPasteWithSender:];
}

id objc_msgSend_canvasEditorCanPerformAlignAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformAlignAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformBringDrawablesForwardActionWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformBringDrawablesForwardActionWithSender:");
}

id objc_msgSend_canvasEditorCanPerformConnectWithConnectionLineAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformConnectWithConnectionLineAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformCopyAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformCopyAction:withSender:];
}

id objc_msgSend_canvasEditorCanPerformCutAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformCutAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformDeleteAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformDeleteAction:withSender:];
}

id objc_msgSend_canvasEditorCanPerformDeselectAllAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformDeselectAllAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformDistributeActionWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformDistributeActionWithSender:");
}

id objc_msgSend_canvasEditorCanPerformDuplicateAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformDuplicateAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformGroupActionWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformGroupActionWithSender:];
}

id objc_msgSend_canvasEditorCanPerformLockAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformLockAction:withSender:];
}

id objc_msgSend_canvasEditorCanPerformPasteAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformPasteAction:withSender:];
}

id objc_msgSend_canvasEditorCanPerformPasteAsPlainTextAction_withSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformPasteAsPlainTextAction:withSender:];
}

id objc_msgSend_canvasEditorCanPerformPasteValuesAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformPasteValuesAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformSelectAllAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformSelectAllAction:withSender:");
}

id objc_msgSend_canvasEditorCanPerformSendDrawablesBackwardActionWithSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasEditorCanPerformSendDrawablesBackwardActionWithSender:");
}

id objc_msgSend_canvasEditorCanPerformShowMiniFormatterToExitDrawingModeActionWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformShowMiniFormatterToExitDrawingModeActionWithSender];
}

id objc_msgSend_canvasEditorCanPerformUngroupActionWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanPerformUngroupActionWithSender:];
}

id objc_msgSend_canvasEditorCanSelectAllWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanSelectAllWithSender:];
}

id objc_msgSend_canvasEditorCanUngroupWithSender_(void *a1, const char *a2, ...)
{
  return [a1 canvasEditorCanUngroupWithSender:];
}

id objc_msgSend_canvasEditorHelper(void *a1, const char *a2, ...)
{
  return _[a1 canvasEditorHelper];
}

id objc_msgSend_canvasEditorHelperClass(void *a1, const char *a2, ...)
{
  return _[a1 canvasEditorHelperClass];
}

id objc_msgSend_canvasInfosDidChange(void *a1, const char *a2, ...)
{
  return _[a1 canvasInfosDidChange];
}

id objc_msgSend_canvasInvalidatedForLayout_(void *a1, const char *a2, ...)
{
  return [a1 canvasInvalidatedForLayout:];
}

id objc_msgSend_canvasInvalidatedForRep_(void *a1, const char *a2, ...)
{
  return [a1 canvasInvalidatedForRep:];
}

id objc_msgSend_canvasIsWideGamut(void *a1, const char *a2, ...)
{
  return _[a1 canvasIsWideGamut];
}

id objc_msgSend_canvasLayer(void *a1, const char *a2, ...)
{
  return _[a1 canvasLayer];
}

id objc_msgSend_canvasLayoutInvalidated_(void *a1, const char *a2, ...)
{
  return [a1 canvasLayoutInvalidated:];
}

id objc_msgSend_canvasRootLayoutClass(void *a1, const char *a2, ...)
{
  return _[a1 canvasRootLayoutClass];
}

id objc_msgSend_canvasScrollingOutset(void *a1, const char *a2, ...)
{
  return _[a1 canvasScrollingOutset];
}

id objc_msgSend_canvasSelection(void *a1, const char *a2, ...)
{
  return _[a1 canvasSelection];
}

id objc_msgSend_canvasSelectionPathExcludingInfo_(void *a1, const char *a2, ...)
{
  return [a1 canvasSelectionPathExcludingInfo:];
}

id objc_msgSend_canvasSelectionPathIncludingInfo_(void *a1, const char *a2, ...)
{
  return [a1 canvasSelectionPathIncludingInfo:];
}

id objc_msgSend_canvasShouldScrollForSelectionPath_(void *a1, const char *a2, ...)
{
  return [a1 canvasShouldScrollForSelectionPath:];
}

id objc_msgSend_canvasSubview_shouldHandleEventAtBoundsPoint_(void *a1, const char *a2, ...)
{
  return [a1 canvasSubview:shouldHandleEventAtBoundsPoint:];
}

id objc_msgSend_canvasSubviews(void *a1, const char *a2, ...)
{
  return _[a1 canvasSubviews];
}

id objc_msgSend_canvasView(void *a1, const char *a2, ...)
{
  return _[a1 canvasView];
}

id objc_msgSend_canvasViewScaleDetentsForInteractiveCanvasController_isFastPinch_(void *a1, const char *a2, ...)
{
  return [a1 canvasViewScaleDetentsForInteractiveCanvasController:isFastPinch:];
}

id objc_msgSend_canvasViewScaleForProposedViewScale_originalViewScale_(void *a1, const char *a2, ...)
{
  return [a1 canvasViewScaleForProposedViewScale:originalViewScale:];
}

id objc_msgSend_canvasViewScaleForTrifurcationContainer_(void *a1, const char *a2, ...)
{
  return [a1 canvasViewScaleForTrifurcationContainer];
}

id objc_msgSend_canvasWillUpdateRepsFromLayouts_(void *a1, const char *a2, ...)
{
  return [a1 canvasWillUpdateRepsFromLayouts:];
}

id objc_msgSend_canvasWillValidateLayouts_(void *a1, const char *a2, ...)
{
  return [a1 canvasWillValidateLayouts:];
}

id objc_msgSend_canvasZoomTracker_willBeginViewScaleFeedbackWithZoomMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasZoomTracker:willBeginViewScaleFeedbackWithZoomMethod:");
}

id objc_msgSend_canvasZoomTracker_willUpdateViewScaleFeedbackWithScale_(void *a1, const char *a2, ...)
{
  return [a1 canvasZoomTracker:willUpdateViewScaleFeedbackWithScale:];
}

id objc_msgSend_canvasZoomTrackerDidEndFinalZoomAnimation_(void *a1, const char *a2, ...)
{
  return [a1 canvasZoomTrackerDidEndFinalZoomAnimation];
}

id objc_msgSend_canvasZoomTrackerDidEndViewScaleFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canvasZoomTrackerDidEndViewScaleFeedback:");
}

id objc_msgSend_canvasZoomTrackerDidFinish_(void *a1, const char *a2, ...)
{
  return [a1 canvasZoomTrackerDidFinish:];
}

id objc_msgSend_canvasZoomTrackerWillBeginFinalZoomAnimation_(void *a1, const char *a2, ...)
{
  return [a1 canvasZoomTrackerWillBeginFinalZoomAnimation:];
}

id objc_msgSend_canvas_darkInsertSwatchBackgroundColor(void *a1, const char *a2, ...)
{
  return [a1 canvas_darkInsertSwatchBackgroundColor];
}

id objc_msgSend_canvas_darkTranslucentSwatchBackground(void *a1, const char *a2, ...)
{
  return [a1 canvas_darkTranslucentSwatchBackground];
}

id objc_msgSend_cap(void *a1, const char *a2, ...)
{
  return _[a1 cap];
}

id objc_msgSend_capitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 capitalizedString];
}

id objc_msgSend_capitalizedStringWithLocale_(void *a1, const char *a2, ...)
{
  return [a1 capitalizedStringWithLocale:];
}

id objc_msgSend_captureDynamicInfoGeometryToBeginDynamicOperation(void *a1, const char *a2, ...)
{
  return _[a1 captureDynamicInfoGeometryToBeginDynamicOperation];
}

id objc_msgSend_cardinalEastPosition(void *a1, const char *a2, ...)
{
  return _[a1 cardinalEastPosition];
}

id objc_msgSend_cardinalNorthPosition(void *a1, const char *a2, ...)
{
  return _[a1 cardinalNorthPosition];
}

id objc_msgSend_cardinalSouthPosition(void *a1, const char *a2, ...)
{
  return _[a1 cardinalSouthPosition];
}

id objc_msgSend_cardinalWestPosition(void *a1, const char *a2, ...)
{
  return _[a1 cardinalWestPosition];
}

id objc_msgSend_caretAffinity(void *a1, const char *a2, ...)
{
  return _[a1 caretAffinity];
}

id objc_msgSend_caretCharIndexForLayoutOrderCharIndex_inDirection_(void *a1, const char *a2, ...)
{
  return [a1 caretCharIndexForLayoutOrderCharIndex:inDirection:];
}

id objc_msgSend_caretDragSelectionIsValid(void *a1, const char *a2, ...)
{
  return _[a1 caretDragSelectionIsValid];
}

id objc_msgSend_caretRect(void *a1, const char *a2, ...)
{
  return _[a1 caretRect];
}

id objc_msgSend_caretRectForCharIndex_caretAffinity_(void *a1, const char *a2, ...)
{
  return [a1 caretRectForCharIndex:caretAffinity:];
}

id objc_msgSend_caretRectForCharIndex_leadingEdge_caretAffinity_(void *a1, const char *a2, ...)
{
  return [a1 caretRectForCharIndex:leadingEdge:caretAffinity:];
}

id objc_msgSend_caretRectForSelection_(void *a1, const char *a2, ...)
{
  return [a1 caretRectForSelection:];
}

id objc_msgSend_caretShouldFade(void *a1, const char *a2, ...)
{
  return _[a1 caretShouldFade];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return [a1 caseInsensitiveCompare:];
}

id objc_msgSend_categories(void *a1, const char *a2, ...)
{
  return _[a1 categories];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categoryID(void *a1, const char *a2, ...)
{
  return _[a1 categoryID];
}

id objc_msgSend_categoryIDs(void *a1, const char *a2, ...)
{
  return _[a1 categoryIDs];
}

id objc_msgSend_categoryNames(void *a1, const char *a2, ...)
{
  return _[a1 categoryNames];
}

id objc_msgSend_categoryOptions(void *a1, const char *a2, ...)
{
  return _[a1 categoryOptions];
}

id objc_msgSend_cellForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 cellForItemAtIndexPath:];
}

id objc_msgSend_cellRegistrationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 cellRegistrationDictionary];
}

id objc_msgSend_cellReuseIdentifierForSection_context_(void *a1, const char *a2, ...)
{
  return [a1 cellReuseIdentifierForSection:context:];
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_centerForConnecting(void *a1, const char *a2, ...)
{
  return _[a1 centerForConnecting];
}

id objc_msgSend_centerForGuideRenderablePlacement(void *a1, const char *a2, ...)
{
  return _[a1 centerForGuideRenderablePlacement];
}

id objc_msgSend_centerForRotation(void *a1, const char *a2, ...)
{
  return _[a1 centerForRotation];
}

id objc_msgSend_centerForRotationInMaskMode(void *a1, const char *a2, ...)
{
  return _[a1 centerForRotationInMaskMode];
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerXAnchor];
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerYAnchor];
}

id objc_msgSend_centeredRadialTransformInRect_(void *a1, const char *a2, ...)
{
  return [a1 centeredRadialTransformInRect:];
}

id objc_msgSend_cgContext(void *a1, const char *a2, ...)
{
  return _[a1 cgContext];
}

id objc_msgSend_changeCount(void *a1, const char *a2, ...)
{
  return _[a1 changeCount];
}

id objc_msgSend_changeDynamicLayoutsForReps_(void *a1, const char *a2, ...)
{
  return [a1 changeDynamicLayoutsForReps:];
}

id objc_msgSend_changeNotifier(void *a1, const char *a2, ...)
{
  return _[a1 changeNotifier];
}

id objc_msgSend_changeShapeForEditor_shapePathSource_interactiveCanvasController_(void *a1, const char *a2, ...)
{
  return [a1 changeShapeForEditor:shapePathSource:interactiveCanvasController:];
}

id objc_msgSend_changeSource(void *a1, const char *a2, ...)
{
  return _[a1 changeSource];
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_changesArray(void *a1, const char *a2, ...)
{
  return _[a1 changesArray];
}

id objc_msgSend_charIndex(void *a1, const char *a2, ...)
{
  return _[a1 charIndex];
}

id objc_msgSend_charIndexCount(void *a1, const char *a2, ...)
{
  return _[a1 charIndexCount];
}

id objc_msgSend_charIndexForPoint_inColumnsArray_allowPastBreak_allowNotFound_pastCenterGoesToNextChar_constrainToAscentAndDescent_ignoreEmptyColumns_isAtEndOfLine_leadingEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexForPoint:inColumnsArray:allowPastBreak:allowNotFound:pastCenterGoesToNextChar:constrainToAscentAndDescent:ignoreEmptyColumns:isAtEndOfLine:leadingEdge:");
}

id objc_msgSend_charIndexForPointWithPinning_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexForPointWithPinning:inLayoutTarget:];
}

id objc_msgSend_charIndexForPointWithPinning_isTail_selectionType_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexForPointWithPinning:isTail:selectionType:inLayoutTarget:];
}

id objc_msgSend_charIndexForSelectionFromPoint_isTail_(void *a1, const char *a2, ...)
{
  return [a1 charIndexForSelectionFromPoint:isTail:];
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_allowNotFound_isAtEndOfLine_leadingEdge_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexFromPoint:allowPastBreak:allowNotFound:isAtEndOfLine:leadingEdge:inLayoutTarget:");
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_allowNotFound_pastCenterGoesToNextChar_constrainToAscentAndDescent_isAtEndOfLine_leadingEdge_ignoreEmptyColumns_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromPoint:allowPastBreak:allowNotFound:pastCenterGoesToNextChar:constrainToAscentAndDescent:isAtEndOfLine:leadingEdge:ignoreEmptyColumns:inLayoutTarget:];
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_allowNotFound_pastCenterGoesToNextChar_constrainToAscentAndDescent_isAtEndOfLine_leadingEdge_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromPoint:allowPastBreak:allowNotFound:pastCenterGoesToNextChar:constrainToAscentAndDescent:isAtEndOfLine:leadingEdge:inLayoutTarget:];
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_allowNotFound_pastCenterGoesToNextChar_isAtEndOfLine_leadingEdge_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexFromPoint:allowPastBreak:allowNotFound:pastCenterGoesToNextChar:isAtEndOfLine:leadingEdge:inLayoutTarget:");
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_constrainToAscentAndDescent_isAtEndOfLine_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromPoint:allowPastBreak:constrainToAscentAndDescent:isAtEndOfLine:inLayoutTarget:];
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_isAtEndOfLine_inLayoutTarget_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromPoint:allowPastBreak:isAtEndOfLine:inLayoutTarget:];
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_pastCenterGoesToNextChar_allowNotFound_constrainToAscentAndDescent_isAtEndOfLine_leadingEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexFromPoint:allowPastBreak:pastCenterGoesToNextChar:allowNotFound:constrainToAscentAndDescent:isAtEndOfLine:leadingEdge:");
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_pastCenterGoesToNextChar_allowNotFound_constrainToAscentAndDescent_isAtEndOfLine_outFragment_leadingEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexFromPoint:allowPastBreak:pastCenterGoesToNextChar:allowNotFound:constrainToAscentAndDescent:isAtEndOfLine:outFragment:leadingEdge:");
}

id objc_msgSend_charIndexFromPoint_allowPastBreak_pastCenterGoesToNextChar_allowNotFound_isAtEndOfLine_leadingEdge_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromPoint:allowPastBreak:pastCenterGoesToNextChar:allowNotFound:isAtEndOfLine:leadingEdge:];
}

id objc_msgSend_charIndexFromWPPoint_pastCenterGoesToNextChar_allowNotFound_constrainToAscentAndDescent_outFragment_leadingEdge_(void *a1, const char *a2, ...)
{
  return [a1 charIndexFromWPPoint:pastCenterGoesToNextChar:allowNotFound:constrainToAscentAndDescent:outFragment:leadingEdge:];
}

id objc_msgSend_charIndexInRep_fromPoint_allowPastBreak_allowNotFound_isAtEndOfLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexInRep:fromPoint:allowPastBreak:allowNotFound:isAtEndOfLine:");
}

id objc_msgSend_charIndexInRep_fromPoint_allowPastBreak_allowNotFound_pastCenterGoesToNextChar_isAtEndOfLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "charIndexInRep:fromPoint:allowPastBreak:allowNotFound:pastCenterGoesToNextChar:isAtEndOfLine:");
}

id objc_msgSend_charIndexInRep_fromPoint_allowPastBreak_isAtEndOfLine_leadingEdge_(void *a1, const char *a2, ...)
{
  return [a1 charIndexInRep:fromPoint:allowPastBreak:isAtEndOfLine:leadingEdge:];
}

id objc_msgSend_charIndexIsAtEndOfParagraph_(void *a1, const char *a2, ...)
{
  return [a1 charIndexIsAtEndOfParagraph:];
}

id objc_msgSend_charIndexIsAtStartOfParagraph_(void *a1, const char *a2, ...)
{
  return [a1 charIndexIsAtStartOfParagraph:];
}

id objc_msgSend_charIndexMappedFromStorage_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMappedFromStorage];
}

id objc_msgSend_charIndexMappedToStorage_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMappedToStorage:];
}

id objc_msgSend_charIndexMovingByCharacterFromCharIndex_inDirection_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMovingByCharacterFromCharIndex:inDirection:];
}

id objc_msgSend_charIndexMovingByCharacterFromCharIndex_leadingEdge_inDirection_skipAnchors_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMovingByCharacterFromCharIndex:leadingEdge:inDirection:skipAnchors:];
}

id objc_msgSend_charIndexMovingByCharacterFromCharIndex_leadingEdge_inDirection_skipAnchors_useLeadingEdgeOfNextLine_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMovingByCharacterFromCharIndex:leadingEdge:inDirection:skipAnchors:useLeadingEdgeOfNextLine:];
}

id objc_msgSend_charIndexMovingByWordFromCharIndex_leadingEdge_inDirection_(void *a1, const char *a2, ...)
{
  return [a1 charIndexMovingByWordFromCharIndex:leadingEdge:inDirection:];
}

id objc_msgSend_charIndexRemappedFromStorage_(void *a1, const char *a2, ...)
{
  return [a1 charIndexRemappedFromStorage:];
}

id objc_msgSend_charIndexes(void *a1, const char *a2, ...)
{
  return _[a1 charIndexes];
}

id objc_msgSend_charRangeMappedFromStorage_(void *a1, const char *a2, ...)
{
  return [a1 charRangeMappedFromStorage:];
}

id objc_msgSend_charRangeMappedToStorage_(void *a1, const char *a2, ...)
{
  return [a1 charRangeMappedToStorage:];
}

id objc_msgSend_charRangeRemappedFromStorage_(void *a1, const char *a2, ...)
{
  return [a1 charRangeRemappedFromStorage:];
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return _[a1 charValue];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_characterCount(void *a1, const char *a2, ...)
{
  return _[a1 characterCount];
}

id objc_msgSend_characterDirectionForLanguage_(void *a1, const char *a2, ...)
{
  return [a1 characterDirectionForLanguage:];
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return [a1 characterIsMember:];
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return [a1 characterSetWithCharactersInString:];
}

id objc_msgSend_characterSetWithRange_(void *a1, const char *a2, ...)
{
  return [a1 characterSetWithRange:];
}

id objc_msgSend_characterStyle(void *a1, const char *a2, ...)
{
  return _[a1 characterStyle];
}

id objc_msgSend_characterStyleAtCharIndex_before_effectiveRange_(void *a1, const char *a2, ...)
{
  return [a1 characterStyleAtCharIndex:before:effectiveRange:];
}

id objc_msgSend_characterStyleAtCharIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return [a1 characterStyleAtCharIndex:effectiveRange:];
}

id objc_msgSend_checkCompatibilityUpToLevel_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 checkCompatibilityUpToLevel:completionHandler:];
}

id objc_msgSend_checkConnections(void *a1, const char *a2, ...)
{
  return _[a1 checkConnections];
}

id objc_msgSend_checkForUpdateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 checkForUpdateWithCompletionHandler:];
}

id objc_msgSend_checkRange_synchronously_(void *a1, const char *a2, ...)
{
  return [a1 checkRange:synchronously:];
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 checkResourceIsReachableAndReturnError:];
}

id objc_msgSend_checkable(void *a1, const char *a2, ...)
{
  return _[a1 checkable];
}

id objc_msgSend_checked(void *a1, const char *a2, ...)
{
  return _[a1 checked];
}

id objc_msgSend_checkmark(void *a1, const char *a2, ...)
{
  return _[a1 checkmark];
}

id objc_msgSend_checkmarkImageButton(void *a1, const char *a2, ...)
{
  return _[a1 checkmarkImageButton];
}

id objc_msgSend_checkmarkView(void *a1, const char *a2, ...)
{
  return _[a1 checkmarkView];
}

id objc_msgSend_childEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 childEnumerator];
}

id objc_msgSend_childEnumeratorForUserFlags_(void *a1, const char *a2, ...)
{
  return [a1 childEnumeratorForUserFlags:];
}

id objc_msgSend_childEnumeratorForUserSearch(void *a1, const char *a2, ...)
{
  return _[a1 childEnumeratorForUserSearch];
}

id objc_msgSend_childInfos(void *a1, const char *a2, ...)
{
  return _[a1 childInfos];
}

id objc_msgSend_childInfosForChildLayouts(void *a1, const char *a2, ...)
{
  return _[a1 childInfosForChildLayouts];
}

id objc_msgSend_childItems(void *a1, const char *a2, ...)
{
  return _[a1 childItems];
}

id objc_msgSend_childLayoutContainingPossibleDescendentLayout_(void *a1, const char *a2, ...)
{
  return [a1 childLayoutContainingPossibleDescendentLayout:];
}

id objc_msgSend_childLayoutIsCurrentlyHiddenWhileManipulating_(void *a1, const char *a2, ...)
{
  return [a1 childLayoutIsCurrentlyHiddenWhileManipulating:];
}

id objc_msgSend_childReps(void *a1, const char *a2, ...)
{
  return _[a1 childReps];
}

id objc_msgSend_childRepsForHitTesting(void *a1, const char *a2, ...)
{
  return _[a1 childRepsForHitTesting];
}

id objc_msgSend_childRepsToInformForSelectabilityChanges(void *a1, const char *a2, ...)
{
  return _[a1 childRepsToInformForSelectabilityChanges];
}

id objc_msgSend_childRespondingToPress(void *a1, const char *a2, ...)
{
  return _[a1 childRespondingToPress];
}

id objc_msgSend_childSearchTargets(void *a1, const char *a2, ...)
{
  return _[a1 childSearchTargets];
}

id objc_msgSend_childTargetsForSearchTarget_(void *a1, const char *a2, ...)
{
  return [a1 childTargetsForSearchTarget:];
}

id objc_msgSend_childViewControllers(void *a1, const char *a2, ...)
{
  return _[a1 childViewControllers];
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _[a1 children];
}

id objc_msgSend_childrenToExcludeWhenDrawingDescendantsIntoLayer(void *a1, const char *a2, ...)
{
  return _[a1 childrenToExcludeWhenDrawingDescendantsIntoLayer];
}

id objc_msgSend_childrenToPosition(void *a1, const char *a2, ...)
{
  return _[a1 childrenToPosition];
}

id objc_msgSend_chisel(void *a1, const char *a2, ...)
{
  return _[a1 chisel];
}

id objc_msgSend_clampOffset_(void *a1, const char *a2, ...)
{
  return [a1 clampOffset:];
}

id objc_msgSend_clampOpacity_(void *a1, const char *a2, ...)
{
  return [a1 clampOpacity:];
}

id objc_msgSend_clampRadius_(void *a1, const char *a2, ...)
{
  return [a1 clampRadius:];
}

id objc_msgSend_clampUnscaledPointToTextFieldBounds_(void *a1, const char *a2, ...)
{
  return [a1 clampUnscaledPointToTextFieldBounds:];
}

id objc_msgSend_clampedUnscaledContentOffset_forViewScale_(void *a1, const char *a2, ...)
{
  return [a1 clampedUnscaledContentOffset:forViewScale:];
}

id objc_msgSend_cleanPathForPath_(void *a1, const char *a2, ...)
{
  return [a1 cleanPathForPath:];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupEndOfDragOperation(void *a1, const char *a2, ...)
{
  return _[a1 cleanupEndOfDragOperation];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAdornments(void *a1, const char *a2, ...)
{
  return _[a1 clearAdornments];
}

id objc_msgSend_clearCache(void *a1, const char *a2, ...)
{
  return _[a1 clearCache];
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _[a1 clearColor];
}

id objc_msgSend_clearContents(void *a1, const char *a2, ...)
{
  return _[a1 clearContents];
}

id objc_msgSend_clearCurrentSelectionPath(void *a1, const char *a2, ...)
{
  return _[a1 clearCurrentSelectionPath];
}

id objc_msgSend_clearHistory(void *a1, const char *a2, ...)
{
  return _[a1 clearHistory];
}

id objc_msgSend_clearIsCurrentlyTracking(void *a1, const char *a2, ...)
{
  return _[a1 clearIsCurrentlyTracking];
}

id objc_msgSend_clearOwner(void *a1, const char *a2, ...)
{
  return _[a1 clearOwner];
}

id objc_msgSend_clearPasteboardCacheDirectory(void *a1, const char *a2, ...)
{
  return _[a1 clearPasteboardCacheDirectory];
}

id objc_msgSend_clearSecondaryHighlight(void *a1, const char *a2, ...)
{
  return _[a1 clearSecondaryHighlight];
}

id objc_msgSend_clearSelectionIfNecessaryWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 clearSelectionIfNecessaryWithCompletion:];
}

id objc_msgSend_clearTypesetterCache(void *a1, const char *a2, ...)
{
  return _[a1 clearTypesetterCache];
}

id objc_msgSend_clipHead(void *a1, const char *a2, ...)
{
  return _[a1 clipHead];
}

id objc_msgSend_clipPath_onLayout_outset_reversed_isValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clipPath:onLayout:outset:reversed:isValid:");
}

id objc_msgSend_clipRect(void *a1, const char *a2, ...)
{
  return _[a1 clipRect];
}

id objc_msgSend_clipRectInScaledCanvasForTrifurcationContainer_(void *a1, const char *a2, ...)
{
  return [a1 clipRectInScaledCanvasForTrifurcationContainer];
}

id objc_msgSend_clipRectWithoutEffects(void *a1, const char *a2, ...)
{
  return _[a1 clipRectWithoutEffects];
}

id objc_msgSend_clipTail(void *a1, const char *a2, ...)
{
  return _[a1 clipTail];
}

id objc_msgSend_clippedPathForLineEnds(void *a1, const char *a2, ...)
{
  return _[a1 clippedPathForLineEnds];
}

id objc_msgSend_clippedRectInRoot_(void *a1, const char *a2, ...)
{
  return [a1 clippedRectInRoot:];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeGroup(void *a1, const char *a2, ...)
{
  return _[a1 closeGroup];
}

id objc_msgSend_closeGroupWithSelectionBehavior_(void *a1, const char *a2, ...)
{
  return [a1 closeGroupWithSelectionBehavior:];
}

id objc_msgSend_closeHUDWithAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeHUDWithAnimation:");
}

id objc_msgSend_closeIfEndpointsAreEqual(void *a1, const char *a2, ...)
{
  return _[a1 closeIfEndpointsAreEqual];
}

id objc_msgSend_closePath(void *a1, const char *a2, ...)
{
  return _[a1 closePath];
}

id objc_msgSend_closeSelectedNodes(void *a1, const char *a2, ...)
{
  return _[a1 closeSelectedNodes];
}

id objc_msgSend_closeWithQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithQueue:completion:");
}

id objc_msgSend_closestColumnForPoint_(void *a1, const char *a2, ...)
{
  return [a1 closestColumnForPoint:];
}

id objc_msgSend_closestColumnInColumnsArray_forPoint_ignoreEmptyColumns_ignoreDrawableOnlyColumns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestColumnInColumnsArray:forPoint:ignoreEmptyColumns:ignoreDrawableOnlyColumns:");
}

id objc_msgSend_closestDrawingLayout_toPoint_returningDistance_(void *a1, const char *a2, ...)
{
  return [a1 closestDrawingLayout:toPoint:returningDistance:];
}

id objc_msgSend_closestHitsTo_withSearchThreshold_passingTest_(void *a1, const char *a2, ...)
{
  return [a1 closestHitsTo:withSearchThreshold:passingTest:];
}

id objc_msgSend_closestPositionTo_(void *a1, const char *a2, ...)
{
  return [a1 closestPositionTo:];
}

id objc_msgSend_closestRepToPoint_forStorage_(void *a1, const char *a2, ...)
{
  return [a1 closestRepToPoint:forStorage:];
}

id objc_msgSend_clraxNumberOfBidirectionalSingleConnectionsForLayout_(void *a1, const char *a2, ...)
{
  return [a1 clraxNumberOfBidirectionalSingleConnectionsForLayout:];
}

id objc_msgSend_clraxNumberOfStrictlyInboundConnectionsFromLayout_(void *a1, const char *a2, ...)
{
  return [a1 clraxNumberOfStrictlyInboundConnectionsFromLayout:];
}

id objc_msgSend_clraxNumberOfStrictlyOutboundConnectionsToLayout_(void *a1, const char *a2, ...)
{
  return [a1 clraxNumberOfStrictlyOutboundConnectionsToLayout:];
}

id objc_msgSend_coalesceWith_(void *a1, const char *a2, ...)
{
  return [a1 coalesceWith:];
}

id objc_msgSend_coalescedTouchesForTouch_(void *a1, const char *a2, ...)
{
  return [a1 coalescedTouchesForTouch:];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collaborativeCursorOpacityForCaret_(void *a1, const char *a2, ...)
{
  return [a1 collaborativeCursorOpacityForCaret:];
}

id objc_msgSend_collaboratorColorForType_(void *a1, const char *a2, ...)
{
  return [a1 collaboratorColorForType:];
}

id objc_msgSend_collaboratorCursorChangedToSelectionPath_(void *a1, const char *a2, ...)
{
  return [a1 collaboratorCursorChangedToSelectionPath:];
}

id objc_msgSend_collaboratorCursorCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 collaboratorCursorCoordinator];
}

id objc_msgSend_collaboratorCursorDelegate(void *a1, const char *a2, ...)
{
  return _[a1 collaboratorCursorDelegate];
}

id objc_msgSend_collaboratorCursorRenderable(void *a1, const char *a2, ...)
{
  return _[a1 collaboratorCursorRenderable];
}

id objc_msgSend_collaboratorCursorSelectionPathForRenderer_collaboratorPresence_(void *a1, const char *a2, ...)
{
  return [a1 collaboratorCursorSelectionPathForRenderer:collaboratorPresence:];
}

id objc_msgSend_collaboratorPresence(void *a1, const char *a2, ...)
{
  return _[a1 collaboratorPresence];
}

id objc_msgSend_collapseAllExpandedCollaboratorHUDs(void *a1, const char *a2, ...)
{
  return _[a1 collapseAllExpandedCollaboratorHUDs];
}

id objc_msgSend_collapseCommonRootDirectory(void *a1, const char *a2, ...)
{
  return _[a1 collapseCommonRootDirectory];
}

id objc_msgSend_collapsedName(void *a1, const char *a2, ...)
{
  return _[a1 collapsedName];
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _[a1 collectionView];
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _[a1 color];
}

id objc_msgSend_colorAttachments(void *a1, const char *a2, ...)
{
  return _[a1 colorAttachments];
}

id objc_msgSend_colorBehindLayer_(void *a1, const char *a2, ...)
{
  return [a1 colorBehindLayer:];
}

id objc_msgSend_colorByCompositingSourceOverDestinationColor_(void *a1, const char *a2, ...)
{
  return [a1 colorByCompositingSourceOverDestinationColor];
}

id objc_msgSend_colorForCGContext_(void *a1, const char *a2, ...)
{
  return [a1 colorForCGContext:];
}

id objc_msgSend_colorForCurrentTool(void *a1, const char *a2, ...)
{
  return _[a1 colorForCurrentTool];
}

id objc_msgSend_colorForGhostCaret(void *a1, const char *a2, ...)
{
  return _[a1 colorForGhostCaret];
}

id objc_msgSend_colorForPreset_(void *a1, const char *a2, ...)
{
  return [a1 colorForPreset:];
}

id objc_msgSend_colorForToolType_(void *a1, const char *a2, ...)
{
  return [a1 colorForToolType:];
}

id objc_msgSend_colorNamed_(void *a1, const char *a2, ...)
{
  return [a1 colorNamed:];
}

id objc_msgSend_colorOnSuppressedBackgrounds(void *a1, const char *a2, ...)
{
  return _[a1 colorOnSuppressedBackgrounds];
}

id objc_msgSend_colorRGBSpace(void *a1, const char *a2, ...)
{
  return _[a1 colorRGBSpace];
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return [a1 colorWithAlphaComponent:];
}

id objc_msgSend_colorWithCGColor_(void *a1, const char *a2, ...)
{
  return [a1 colorWithCGColor:];
}

id objc_msgSend_colorWithColor_(void *a1, const char *a2, ...)
{
  return [a1 colorWithColor:];
}

id objc_msgSend_colorWithHexString_(void *a1, const char *a2, ...)
{
  return [a1 colorWithHexString:];
}

id objc_msgSend_colorWithHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithHue:saturation:brightness:alpha:];
}

id objc_msgSend_colorWithR_G_B_(void *a1, const char *a2, ...)
{
  return [a1 colorWithR:G:B:];
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithRed:green:blue:alpha:];
}

id objc_msgSend_colorWithUIColor_(void *a1, const char *a2, ...)
{
  return [a1 colorWithUIColor:];
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithWhite:];
}

id objc_msgSend_column(void *a1, const char *a2, ...)
{
  return _[a1 column];
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columnForCharIndex_(void *a1, const char *a2, ...)
{
  return [a1 columnForCharIndex:];
}

id objc_msgSend_columnForCharIndex_allowEndOfColumn_withColumns_(void *a1, const char *a2, ...)
{
  return [a1 columnForCharIndex:allowEndOfColumn:withColumns:];
}

id objc_msgSend_columnIndex(void *a1, const char *a2, ...)
{
  return _[a1 columnIndex];
}

id objc_msgSend_columnMetricsForCharIndex_outRange_(void *a1, const char *a2, ...)
{
  return [a1 columnMetricsForCharIndex:outRange:];
}

id objc_msgSend_columnRectForRange_(void *a1, const char *a2, ...)
{
  return [a1 columnRectForRange:];
}

id objc_msgSend_columnRectForRange_withColumns_(void *a1, const char *a2, ...)
{
  return [a1 columnRectForRange:withColumns:];
}

id objc_msgSend_columns(void *a1, const char *a2, ...)
{
  return _[a1 columns];
}

id objc_msgSend_columnsAreLeftToRight(void *a1, const char *a2, ...)
{
  return _[a1 columnsAreLeftToRight];
}

id objc_msgSend_combineUUIDWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 combineUUIDWithUUID:];
}

id objc_msgSend_combineUUIDWithUUID_mixValue_(void *a1, const char *a2, ...)
{
  return [a1 combineUUIDWithUUID:mixValue:];
}

id objc_msgSend_commandActionStringForConnectingFrom_oldConnectedFrom_newConnectedTo_oldConnectedTo_(void *a1, const char *a2, ...)
{
  return [a1 commandActionStringForConnectingFrom:oldConnectedFrom:newConnectedTo:oldConnectedTo:];
}

id objc_msgSend_commandBuffer(void *a1, const char *a2, ...)
{
  return _[a1 commandBuffer];
}

id objc_msgSend_commandController(void *a1, const char *a2, ...)
{
  return _[a1 commandController];
}

id objc_msgSend_commandForAcceptingPasteWithImageInfo_outSelectionBehavior_(void *a1, const char *a2, ...)
{
  return [a1 commandForAcceptingPasteWithImageInfo:outSelectionBehavior:];
}

id objc_msgSend_commandForDeletingInfosPossiblyFromMultipleContainers_shouldRemoveEmptyContainers_(void *a1, const char *a2, ...)
{
  return [a1 commandForDeletingInfosPossiblyFromMultipleContainers:shouldRemoveEmptyContainers:];
}

id objc_msgSend_commandForDeletingInfosPossiblyFromMultipleContainers_shouldRemoveEmptyContainers_canDeleteNewlyCreatedInfos_(void *a1, const char *a2, ...)
{
  return [a1 commandForDeletingInfosPossiblyFromMultipleContainers:shouldRemoveEmptyContainers:canDeleteNewlyCreatedInfos:];
}

id objc_msgSend_commandForInsertingBoardItems_below_(void *a1, const char *a2, ...)
{
  return [a1 commandForInsertingBoardItems:below:];
}

id objc_msgSend_commandForInsertingBoardItemsIntoTopLevelContainer_below_(void *a1, const char *a2, ...)
{
  return [a1 commandForInsertingBoardItemsIntoTopLevelContainer:below:];
}

id objc_msgSend_commandForInsertingBoardItemsIntoTopLevelContainer_below_withOffset_(void *a1, const char *a2, ...)
{
  return [a1 commandForInsertingBoardItemsIntoTopLevelContainer:below:withOffset:];
}

id objc_msgSend_commandForReplaceAllWithProvider_(void *a1, const char *a2, ...)
{
  return [a1 commandForReplaceAllWithProvider:];
}

id objc_msgSend_commandForReplacingImagePlaceholderInSelection_withBoardItems_isCrossDocument_withSender_outSelectionBehavior_(void *a1, const char *a2, ...)
{
  return [a1 commandForReplacingImagePlaceholderInSelection:withBoardItems:isCrossDocument:withSender:outSelectionBehavior:];
}

id objc_msgSend_commandForReplacingTextInRange_withText_(void *a1, const char *a2, ...)
{
  return [a1 commandForReplacingTextInRange:withText:];
}

id objc_msgSend_commandForReplacingWithString_options_(void *a1, const char *a2, ...)
{
  return [a1 commandForReplacingWithString:options:];
}

id objc_msgSend_commandForSettingArrowHead_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingArrowHead:withPathSource:shapeItem:];
}

id objc_msgSend_commandForSettingArrowIndent_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingArrowIndent:withPathSource:shapeItem:];
}

id objc_msgSend_commandForSettingAspectRatioLocked_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingAspectRatioLocked:];
}

id objc_msgSend_commandForSettingCalloutCornerRadius_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingCalloutCornerRadius:withPathSource:imageItem:maskLayout:");
}

id objc_msgSend_commandForSettingCalloutCornerRadius_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingCalloutCornerRadius:withPathSource:shapeItem:");
}

id objc_msgSend_commandForSettingCalloutTailPositionX_withPathSource_shapeItem_isAnchoredAtRight_layoutGeometry_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingCalloutTailPositionX:withPathSource:shapeItem:isAnchoredAtRight:layoutGeometry:];
}

id objc_msgSend_commandForSettingCalloutTailPositionY_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingCalloutTailPositionY:withPathSource:shapeItem:];
}

id objc_msgSend_commandForSettingCalloutTailSize_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingCalloutTailSize:withPathSource:imageItem:maskLayout:");
}

id objc_msgSend_commandForSettingCalloutTailSize_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingCalloutTailSize:withPathSource:shapeItem:");
}

id objc_msgSend_commandForSettingConnectionType_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingConnectionType:];
}

id objc_msgSend_commandForSettingCornerRadius_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingCornerRadius:withPathSource:imageItem:maskLayout:];
}

id objc_msgSend_commandForSettingCornerRadius_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingCornerRadius:withPathSource:shapeItem:");
}

id objc_msgSend_commandForSettingNumberOfSides_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingNumberOfSides:withPathSource:imageItem:maskLayout:");
}

id objc_msgSend_commandForSettingNumberOfSides_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingNumberOfSides:withPathSource:shapeItem:];
}

id objc_msgSend_commandForSettingStarPoints_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingStarPoints:withPathSource:imageItem:maskLayout:];
}

id objc_msgSend_commandForSettingStarPoints_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingStarPoints:withPathSource:shapeItem:");
}

id objc_msgSend_commandForSettingStarRadius_withPathSource_imageItem_maskLayout_(void *a1, const char *a2, ...)
{
  return [a1 commandForSettingStarRadius:withPathSource:imageItem:maskLayout:];
}

id objc_msgSend_commandForSettingStarRadius_withPathSource_shapeItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSettingStarRadius:withPathSource:shapeItem:");
}

id objc_msgSend_commandForSnappingShapeItem_toPathsInParentSpace_outCreatedAndModifiedShapes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSnappingShapeItem:toPathsInParentSpace:outCreatedAndModifiedShapes:");
}

id objc_msgSend_commandForSnappingShapeItem_toStrokesInUnscaledSpace_outCreatedAndModifiedShapes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForSnappingShapeItem:toStrokesInUnscaledSpace:outCreatedAndModifiedShapes:");
}

id objc_msgSend_commandForStraighteningShapeItem_toStrokesInUnscaledSpace_(void *a1, const char *a2, ...)
{
  return [a1 commandForStraighteningShapeItem:toStrokesInUnscaledSpace:];
}

id objc_msgSend_commandQueue(void *a1, const char *a2, ...)
{
  return _[a1 commandQueue];
}

id objc_msgSend_commandSelectionBehaviorForCommand_(void *a1, const char *a2, ...)
{
  return [a1 commandSelectionBehaviorForCommand:];
}

id objc_msgSend_commandToClampModelToLayoutSizeWithAdditionalTransform_(void *a1, const char *a2, ...)
{
  return [a1 commandToClampModelToLayoutSizeWithAdditionalTransform:];
}

id objc_msgSend_commandToFlipWithOrientation_(void *a1, const char *a2, ...)
{
  return [a1 commandToFlipWithOrientation:];
}

id objc_msgSend_commandToInsertBoardItems_intoContainer_belowBoardItem_withOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandToInsertBoardItems:intoContainer:belowBoardItem:withOffset:");
}

id objc_msgSend_commandToResetMask(void *a1, const char *a2, ...)
{
  return _[a1 commandToResetMask];
}

id objc_msgSend_commandToResetMediaToRawPixelSize(void *a1, const char *a2, ...)
{
  return _[a1 commandToResetMediaToRawPixelSize];
}

id objc_msgSend_commandToResetToSize_(void *a1, const char *a2, ...)
{
  return [a1 commandToResetToSize:];
}

id objc_msgSend_commandToSetLoopingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 commandToSetLoopingEnabled:];
}

id objc_msgSend_commandToSetRoundedCornersEnabled_(void *a1, const char *a2, ...)
{
  return [a1 commandToSetRoundedCornersEnabled:];
}

id objc_msgSend_commandToSetZOrderOfInfos_toIndexes_coalesceable_(void *a1, const char *a2, ...)
{
  return [a1 commandToSetZOrderOfInfos:toIndexes:coalesceable:];
}

id objc_msgSend_commandToToggleConnectionType(void *a1, const char *a2, ...)
{
  return _[a1 commandToToggleConnectionType];
}

id objc_msgSend_commandWithTitle_image_action_propertyList_(void *a1, const char *a2, ...)
{
  return [a1 commandWithTitle:image:action:propertyList:];
}

id objc_msgSend_commandsForAdjustingConnectionLines_infosToRemove_editingCoordinator_withIcc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandsForAdjustingConnectionLines:infosToRemove:editingCoordinator:withIcc:");
}

id objc_msgSend_commandsForAdjustingMagnetsFromClineLayouts(void *a1, const char *a2, ...)
{
  return _[a1 commandsForAdjustingMagnetsFromClineLayouts];
}

id objc_msgSend_commandsForUngrouping_objectsToSelect_(void *a1, const char *a2, ...)
{
  return [a1 commandsForUngrouping:objectsToSelect:];
}

id objc_msgSend_commandsToPasteStyleTo_from_(void *a1, const char *a2, ...)
{
  return [a1 commandsToPasteStyleTo:from:];
}

id objc_msgSend_commandsToSetFontSizesWithFontRangeToSizeDict_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandsToSetFontSizesWithFontRangeToSizeDict:scale:");
}

id objc_msgSend_commandsToSwapConnectionsFromRep_toInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandsToSwapConnectionsFromRep:toInfo:");
}

id objc_msgSend_commandsToUpdateModelToMatch_(void *a1, const char *a2, ...)
{
  return [a1 commandsToUpdateModelToMatch:];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_commitAllAvailablePoints(void *a1, const char *a2, ...)
{
  return _[a1 commitAllAvailablePoints];
}

id objc_msgSend_commitAnimations(void *a1, const char *a2, ...)
{
  return _[a1 commitAnimations];
}

id objc_msgSend_commitChangesForReps_(void *a1, const char *a2, ...)
{
  return [a1 commitChangesForReps:];
}

id objc_msgSend_commitDragToInsert(void *a1, const char *a2, ...)
{
  return _[a1 commitDragToInsert];
}

id objc_msgSend_commitSelectionPath(void *a1, const char *a2, ...)
{
  return _[a1 commitSelectionPath];
}

id objc_msgSend_commonGestureRecognizers(void *a1, const char *a2, ...)
{
  return _[a1 commonGestureRecognizers];
}

id objc_msgSend_commonMetadata(void *a1, const char *a2, ...)
{
  return _[a1 commonMetadata];
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return _[a1 compact];
}

id objc_msgSend_compactHUDConstraints(void *a1, const char *a2, ...)
{
  return _[a1 compactHUDConstraints];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return [a1 compare:];
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return [a1 compare:options:];
}

id objc_msgSend_compareSearchReference_toSearchReference_(void *a1, const char *a2, ...)
{
  return [a1 compareSearchReference:toSearchReference:];
}

id objc_msgSend_compareT_(void *a1, const char *a2, ...)
{
  return [a1 compareT];
}

id objc_msgSend_compareToPosition_(void *a1, const char *a2, ...)
{
  return [a1 compareToPosition:];
}

id objc_msgSend_compatibilityLevel(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityLevel];
}

id objc_msgSend_completeImportWithCompatibilityOnAllDevices_allowHEVCContent_(void *a1, const char *a2, ...)
{
  return [a1 completeImportWithCompatibilityOnAllDevices:allowHEVCContent:];
}

id objc_msgSend_completeTransition_(void *a1, const char *a2, ...)
{
  return [a1 completeTransition:];
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 completedUnitCount];
}

id objc_msgSend_componentCount(void *a1, const char *a2, ...)
{
  return _[a1 componentCount];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return [a1 components:fromDate:];
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return [a1 components:fromDate:toDate:options:];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsJoinedByString:];
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByCharactersInSet:];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByString:];
}

id objc_msgSend_composedCharacterAtCharIndex_isSurrogatePair_(void *a1, const char *a2, ...)
{
  return [a1 composedCharacterAtCharIndex:isSurrogatePair:];
}

id objc_msgSend_compositedImage(void *a1, const char *a2, ...)
{
  return _[a1 compositedImage];
}

id objc_msgSend_compositedImageWithColor_alpha_blendMode_(void *a1, const char *a2, ...)
{
  return [a1 compositedImageWithColor:alpha:blendMode:];
}

id objc_msgSend_compressStrokePoint_withTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 compressStrokePoint:withTimestamp:];
}

id objc_msgSend_compressedSize(void *a1, const char *a2, ...)
{
  return _[a1 compressedSize];
}

id objc_msgSend_compressionFilter(void *a1, const char *a2, ...)
{
  return _[a1 compressionFilter];
}

id objc_msgSend_computeAlignmentFrameInRoot_(void *a1, const char *a2, ...)
{
  return [a1 computeAlignmentFrameInRoot:];
}

id objc_msgSend_computeBoundsForStandardKnobs(void *a1, const char *a2, ...)
{
  return _[a1 computeBoundsForStandardKnobs];
}

id objc_msgSend_computeClippedPathBoundsWithTransform_(void *a1, const char *a2, ...)
{
  return [a1 computeClippedPathBoundsWithTransform:];
}

id objc_msgSend_computeCoefficientMatrix(void *a1, const char *a2, ...)
{
  return _[a1 computeCoefficientMatrix];
}

id objc_msgSend_computeConstantVector(void *a1, const char *a2, ...)
{
  return _[a1 computeConstantVector];
}

id objc_msgSend_computeControlPoints(void *a1, const char *a2, ...)
{
  return _[a1 computeControlPoints];
}

id objc_msgSend_computeDirectLayerFrame_andTransform_(void *a1, const char *a2, ...)
{
  return [a1 computeDirectLayerFrame:andTransform:];
}

id objc_msgSend_computeDirectLayerFrame_andTransform_basedOnLayoutGeometry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeDirectLayerFrame:andTransform:basedOnLayoutGeometry:");
}

id objc_msgSend_computeDirectLayerFrame_andTransform_basedOnTransform_andSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeDirectLayerFrame:andTransform:basedOnTransform:andSize:");
}

id objc_msgSend_computeErrorDistances(void *a1, const char *a2, ...)
{
  return _[a1 computeErrorDistances];
}

id objc_msgSend_computeFullTransform(void *a1, const char *a2, ...)
{
  return _[a1 computeFullTransform];
}

id objc_msgSend_computeInfoGeometryDuringResize(void *a1, const char *a2, ...)
{
  return _[a1 computeInfoGeometryDuringResize];
}

id objc_msgSend_computeInfoGeometryFromPureLayoutGeometry_(void *a1, const char *a2, ...)
{
  return [a1 computeInfoGeometryFromPureLayoutGeometry:];
}

id objc_msgSend_computeKnots(void *a1, const char *a2, ...)
{
  return _[a1 computeKnots];
}

id objc_msgSend_computeLayoutGeometry(void *a1, const char *a2, ...)
{
  return _[a1 computeLayoutGeometry];
}

id objc_msgSend_computeLayoutTransform(void *a1, const char *a2, ...)
{
  return _[a1 computeLayoutTransform];
}

id objc_msgSend_computePathBounds(void *a1, const char *a2, ...)
{
  return _[a1 computePathBounds];
}

id objc_msgSend_computeWrapPath(void *a1, const char *a2, ...)
{
  return _[a1 computeWrapPath];
}

id objc_msgSend_computeWrapPathClosed_(void *a1, const char *a2, ...)
{
  return [a1 computeWrapPathClosed];
}

id objc_msgSend_concatenateRange_(void *a1, const char *a2, ...)
{
  return [a1 concatenateRange:];
}

id objc_msgSend_concludeDragOperation_(void *a1, const char *a2, ...)
{
  return [a1 concludeDragOperation:];
}

id objc_msgSend_concreteClass(void *a1, const char *a2, ...)
{
  return _[a1 concreteClass];
}

id objc_msgSend_conditionalSpellCheckerForStorage_(void *a1, const char *a2, ...)
{
  return [a1 conditionalSpellCheckerForStorage];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationWithFont_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithFont:];
}

id objc_msgSend_configurationWithIdentifier_previewProvider_actionProvider_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithIdentifier:previewProvider:actionProvider:];
}

id objc_msgSend_configurationWithIdentifier_sourcePoint_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithIdentifier:sourcePoint:];
}

id objc_msgSend_configurationWithPointSize_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithPointSize:];
}

id objc_msgSend_configurationWithPointSize_weight_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithPointSize:weight:];
}

id objc_msgSend_configurationWithPointSize_weight_scale_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithPointSize:weight:scale:];
}

id objc_msgSend_configurationWithScale_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithScale:];
}

id objc_msgSend_configurationWithTraitCollection_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithTraitCollection:];
}

id objc_msgSend_configurationWithWeight_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithWeight:];
}

id objc_msgSend_configureBackdropLayer_radius_corners_color_forTraitCollection_(void *a1, const char *a2, ...)
{
  return [a1 configureBackdropLayer:radius:corners:color:forTraitCollection:];
}

id objc_msgSend_configureBackdropLayer_radius_corners_colorPreset_forTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureBackdropLayer:radius:corners:colorPreset:forTraitCollection:");
}

id objc_msgSend_configureCaretLayer_(void *a1, const char *a2, ...)
{
  return [a1 configureCaretLayer:];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return [a1 conformsToType:];
}

id objc_msgSend_connectSelectedNodes(void *a1, const char *a2, ...)
{
  return _[a1 connectSelectedNodes];
}

id objc_msgSend_connected(void *a1, const char *a2, ...)
{
  return _[a1 connected];
}

id objc_msgSend_connectedFrom(void *a1, const char *a2, ...)
{
  return _[a1 connectedFrom];
}

id objc_msgSend_connectedFromInfo(void *a1, const char *a2, ...)
{
  return _[a1 connectedFromInfo];
}

id objc_msgSend_connectedLayoutDisconnected_(void *a1, const char *a2, ...)
{
  return [a1 connectedLayoutDisconnected:];
}

id objc_msgSend_connectedLayouts(void *a1, const char *a2, ...)
{
  return _[a1 connectedLayouts];
}

id objc_msgSend_connectedPathSource(void *a1, const char *a2, ...)
{
  return _[a1 connectedPathSource];
}

id objc_msgSend_connectedRepForHighlighting(void *a1, const char *a2, ...)
{
  return _[a1 connectedRepForHighlighting];
}

id objc_msgSend_connectedTo(void *a1, const char *a2, ...)
{
  return _[a1 connectedTo];
}

id objc_msgSend_connectedToInfo(void *a1, const char *a2, ...)
{
  return _[a1 connectedToInfo];
}

id objc_msgSend_connectionLineInfo(void *a1, const char *a2, ...)
{
  return _[a1 connectionLineInfo];
}

id objc_msgSend_connectionLineItemToUseForConnecting(void *a1, const char *a2, ...)
{
  return _[a1 connectionLineItemToUseForConnecting];
}

id objc_msgSend_connectionLineLayout(void *a1, const char *a2, ...)
{
  return _[a1 connectionLineLayout];
}