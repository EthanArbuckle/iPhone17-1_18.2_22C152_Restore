double *sub_1009244AC()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;

  if (sub_100924FD0())
  {
    v1 = objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (sub_100925094())
  {
    v2 = objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v3 = *(void *)(v0 + 16);
  if (*(void *)(v3 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionView))
  {
    v4 = objc_retain(*(id *)(v3
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10092464C()
{
  char v1 = sub_100924FD0();
  v2 = *(void **)(*(void *)(v0 + 16)
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel);
  char v3 = ~v1;
  [v2 setHidden:(v1 & 1) == 0];
  if ((v3 & 1) == 0)
  {
    sub_1005057FC((uint64_t *)&unk_10167BEF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117DF40;
    uint64_t v5 = sub_100926358();
    *(void *)(inited + 56) = sub_1005057FC(&qword_1016885D8);
    *(void *)(inited + 32) = v5;
    id v6 = sub_1009263F8();
    uint64_t v7 = sub_10050BF48(0, (unint64_t *)&qword_101674200);
    *(void *)(inited + 88) = v7;
    *(void *)(inited + 64) = v6;
    id v8 = sub_1009264C0();
    *(void *)(inited + 120) = v7;
    *(void *)(inited + 96) = v8;
    v9 = sub_10092725C(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    sub_10057D530((unint64_t)v9);
  }
  sub_1005057FC((uint64_t *)&unk_10167BEF0);
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_10117DF40;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100926358();
  *(void *)(v10 + 56) = sub_1005057FC(&qword_1016885D8);
  *(void *)(v10 + 32) = v11;
  id v12 = sub_1009263F8();
  uint64_t v13 = sub_10050BF48(0, (unint64_t *)&qword_101674200);
  *(void *)(v10 + 88) = v13;
  *(void *)(v10 + 64) = v12;
  id v14 = sub_1009264C0();
  *(void *)(v10 + 120) = v13;
  *(void *)(v10 + 96) = v14;
  v15 = sub_10092725C(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  v16 = sub_101022584((uint64_t)&_swiftEmptySetSingleton, (uint64_t)v15);
  sub_100920C2C((uint64_t)v16, 0);
  swift_bridgeObjectRelease();
  sub_100920C2C((uint64_t)&_swiftEmptySetSingleton, 1);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100924890(char a1)
{
  uint64_t v2 = v1;
  sub_1005057FC((uint64_t *)&unk_10167BEF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117DF40;
  uint64_t v5 = sub_100926588();
  uint64_t v6 = sub_1005057FC(&qword_1016885D8);
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 32) = v5;
  id v7 = sub_100926628();
  uint64_t v8 = sub_10050BF48(0, (unint64_t *)&qword_101674200);
  *(void *)(inited + 88) = v8;
  *(void *)(inited + 64) = v7;
  id v9 = sub_1009266F0();
  *(void *)(inited + 120) = v8;
  *(void *)(inited + 96) = v9;
  uint64_t v10 = sub_10092725C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_10057D530((unint64_t)v10);
  LOBYTE(v7) = sub_100925094();
  uint64_t v11 = *(void *)(v2 + 16);
  id v12 = objc_retain(*(id *)(v11
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel));
  if (v7)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  else
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  char v13 = sub_100924E44();
  id v14 = objc_retain(*(id *)(v11
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel));
  if (v13)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  else
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100927788((unint64_t)_swiftEmptyArrayStorage, (unint64_t)_swiftEmptyArrayStorage, a1 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_10117DF40;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100926588();
  *(void *)(v15 + 56) = v6;
  *(void *)(v15 + 32) = v16;
  id v17 = sub_100926628();
  *(void *)(v15 + 88) = v8;
  *(void *)(v15 + 64) = v17;
  id v18 = sub_1009266F0();
  *(void *)(v15 + 120) = v8;
  *(void *)(v15 + 96) = v18;
  v19 = sub_10092725C(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  v20 = sub_101022584((uint64_t)&_swiftEmptySetSingleton, (uint64_t)v19);
  sub_100920C2C((uint64_t)v20, 0);
  swift_bridgeObjectRelease();
  sub_100920C2C((uint64_t)&_swiftEmptySetSingleton, 1);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100924C2C()
{
  [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView) setHidden:*(void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionView) == 0];
  sub_1005057FC((uint64_t *)&unk_10167BEF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117DF40;
  uint64_t v2 = sub_1009267B8();
  uint64_t v3 = sub_1005057FC(&qword_1016885D8);
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 32) = v2;
  id v4 = sub_100926858();
  uint64_t v5 = sub_10050BF48(0, (unint64_t *)&qword_101674200);
  *(void *)(inited + 88) = v5;
  *(void *)(inited + 64) = v4;
  id v6 = sub_100926920();
  *(void *)(inited + 120) = v5;
  *(void *)(inited + 96) = v6;
  id v7 = sub_10092725C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_10057D530((unint64_t)v7);
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_10117DF40;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1009267B8();
  *(void *)(v8 + 56) = v3;
  *(void *)(v8 + 32) = v9;
  id v10 = sub_100926858();
  *(void *)(v8 + 88) = v5;
  *(void *)(v8 + 64) = v10;
  id v11 = sub_100926920();
  *(void *)(v8 + 120) = v5;
  *(void *)(v8 + 96) = v11;
  id v12 = sub_10092725C(v8);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  char v13 = sub_101022584((uint64_t)&_swiftEmptySetSingleton, (uint64_t)v12);
  sub_100920C2C((uint64_t)v13, 0);
  swift_bridgeObjectRelease();
  sub_100920C2C((uint64_t)&_swiftEmptySetSingleton, 1);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100924E44()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t result = (uint64_t)[v1 view];
  if (!result)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = (void *)result;
  id v4 = [(id)result traitCollection];

  LOBYTE(v3) = [v4 crl_isCompactWidth];
  if (v3) {
    return 1;
  }
  id v5 = [self sharedApplication];
  id v6 = [v5 preferredContentSizeCategory];

  LOBYTE(v5) = UIContentSizeCategory.isAccessibilityCategory.getter();
  if (v5) {
    return 1;
  }
  uint64_t result = (uint64_t)[v1 view];
  if (!result) {
    goto LABEL_10;
  }
  id v7 = (void *)result;
  [(id)result frame];
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;

  v18.origin.x = v9;
  v18.origin.y = v11;
  v18.size.width = v13;
  v18.size.height = v15;
  double Width = CGRectGetWidth(v18);
  if (qword_10166F460 != -1)
  {
    double v17 = Width;
    swift_once();
    double Width = v17;
  }
  return Width < *(double *)&qword_10171AF40;
}

uint64_t sub_100924FD0()
{
  id v1 = [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel) text];
  if (!v1) {
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (v3 == qword_10169A3A8 ? (BOOL v7 = v5 == unk_10169A3B0) : (BOOL v7 = 0), v7))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    char v9 = 0;
    return v9 & 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v9 = v8 ^ 1;
  return v9 & 1;
}

uint64_t sub_100925094()
{
  uint64_t v1 = *(void *)(v0 + 16)
     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(ObjectType, v2);
    unint64_t v6 = v5;
    swift_unknownObjectRelease();
    if (v6)
    {
      uint64_t v7 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v7 || (v4 == qword_10169A3A8 ? (BOOL v8 = v6 == unk_10169A3B0) : (BOOL v8 = 0), v8))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0) {
          return 1;
        }
      }
    }
  }

  return sub_100924E44();
}

uint64_t sub_100925190()
{
  uint64_t v1 = *(void *)(v0 + 16)
     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(ObjectType, v2);
  unint64_t v6 = v5;
  swift_unknownObjectRelease();
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7 || (v4 == qword_10169A3A8 ? (BOOL v8 = v6 == unk_10169A3B0) : (BOOL v8 = 0), v8))
  {
    swift_bridgeObjectRelease();
LABEL_12:
    char v10 = 0;
    return v10 & 1;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v10 = v9 ^ 1;
  return v10 & 1;
}

id sub_100925270()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailContainerView) trailingAnchor];
    if (qword_10166F4E8 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:*(double *)&qword_10171AFE8];

    uint64_t v7 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925374()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) centerYAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView) centerYAnchor];
    id v6 = [v4 constraintLessThanOrEqualToAnchor:v5];

    uint64_t v7 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_10092543C()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView) heightAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) heightAnchor];
    if (qword_10166F4E0 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintGreaterThanOrEqualToAnchor:v5 constant:*(double *)&qword_10171AFE0 + *(double *)&qword_10171AFE0];

    uint64_t v7 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925540()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) trailingAnchor];
    if (qword_10166F540 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:*(double *)&qword_10171B040];

    uint64_t v7 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925644()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView) trailingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) trailingAnchor];
    if (qword_10166F548 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:*(double *)&qword_10171B048];

    uint64_t v7 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

void *sub_100925744()
{
  sub_1005057FC((uint64_t *)&unk_10167BEF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101198A40;
  uint64_t v1 = sub_1009258B4();
  uint64_t v2 = sub_1005057FC(&qword_1016885D8);
  *(void *)(inited + 56) = v2;
  *(void *)(inited + 32) = v1;
  id v3 = sub_100925930();
  uint64_t v4 = sub_10050BF48(0, (unint64_t *)&qword_101674200);
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 64) = v3;
  id v5 = sub_1009259F4();
  *(void *)(inited + 120) = v4;
  *(void *)(inited + 96) = v5;
  id v6 = sub_100925AF8();
  *(void *)(inited + 152) = v4;
  *(void *)(inited + 128) = v6;
  id v7 = sub_100925BFC();
  *(void *)(inited + 184) = v4;
  *(void *)(inited + 160) = v7;
  uint64_t v8 = sub_100925CC0();
  *(void *)(inited + 216) = v2;
  *(void *)(inited + 192) = v8;
  id v9 = sub_100925D3C();
  *(void *)(inited + 248) = v4;
  *(void *)(inited + 224) = v9;
  id v10 = sub_100925E00();
  *(void *)(inited + 280) = v4;
  *(void *)(inited + 256) = v10;
  id v11 = sub_100925F04();
  *(void *)(inited + 312) = v4;
  *(void *)(inited + 288) = v11;
  id v12 = sub_100925FC8();
  *(void *)(inited + 344) = v4;
  *(void *)(inited + 320) = v12;
  id v13 = sub_100926090();
  *(void *)(inited + 376) = v4;
  *(void *)(inited + 352) = v13;
  uint64_t v14 = sub_100926154();
  *(void *)(inited + 408) = v2;
  *(void *)(inited + 384) = v14;
  id v15 = sub_1009261D0();
  *(void *)(inited + 440) = v4;
  *(void *)(inited + 416) = v15;
  id v16 = sub_100926294();
  *(void *)(inited + 472) = v4;
  *(void *)(inited + 448) = v16;
  double v17 = sub_10092725C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v17;
}

uint64_t sub_1009258B4()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    id v2 = objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
    uint64_t v1 = sub_1009269E8(v2);

    *(void *)(v0 + 64) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100925930()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) topAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) topAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 72);
    *(void *)(v0 + 72) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_1009259F4()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(id *)(v0 + 80);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) topAnchor];
    if (qword_10166F4F0 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:-*(double *)&qword_10171AFF0];

    id v7 = *(void **)(v0 + 80);
    *(void *)(v0 + 80) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925AF8()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
    id v2 = *(id *)(v0 + 88);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) topAnchor];
    if (qword_10166F550 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:-*(double *)&qword_10171B050];

    id v7 = *(void **)(v0 + 88);
    *(void *)(v0 + 88) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925BFC()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    id v2 = *(id *)(v0 + 96);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) bottomAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 96);
    *(void *)(v0 + 96) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_100925CC0()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 104);
  }
  else
  {
    id v2 = objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
    uint64_t v1 = sub_1009269E8(v2);

    *(void *)(v0 + 104) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100925D3C()
{
  uint64_t v1 = *(void **)(v0 + 112);
  if (v1)
  {
    id v2 = *(id *)(v0 + 112);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) topAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) topAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 112);
    *(void *)(v0 + 112) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925E00()
{
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {
    id v2 = *(id *)(v0 + 120);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) topAnchor];
    if (qword_10166F550 != -1) {
      swift_once();
    }
    id v6 = [v4 constraintEqualToAnchor:v5 constant:-*(double *)&qword_10171B050];

    id v7 = *(void **)(v0 + 120);
    *(void *)(v0 + 120) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925F04()
{
  uint64_t v1 = *(void **)(v0 + 128);
  if (v1)
  {
    id v2 = *(id *)(v0 + 128);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) bottomAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 128);
    *(void *)(v0 + 128) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100925FC8()
{
  uint64_t v1 = *(void **)(v0 + 136);
  if (v1)
  {
    id v2 = *(id *)(v0 + 136);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) topAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 136);
    *(void *)(v0 + 136) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100926090()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    id v2 = *(id *)(v0 + 144);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) leadingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 144);
    *(void *)(v0 + 144) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_100926154()
{
  if (*(void *)(v0 + 152))
  {
    uint64_t v1 = *(void *)(v0 + 152);
  }
  else
  {
    id v2 = objc_retain(*(id *)(*(void *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
    uint64_t v1 = sub_1009269E8(v2);

    *(void *)(v0 + 152) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_1009261D0()
{
  uint64_t v1 = *(void **)(v0 + 160);
  if (v1)
  {
    id v2 = *(id *)(v0 + 160);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) topAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) topAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 160);
    *(void *)(v0 + 160) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100926294()
{
  uint64_t v1 = *(void **)(v0 + 168);
  if (v1)
  {
    id v2 = *(id *)(v0 + 168);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) bottomAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) bottomAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 168);
    *(void *)(v0 + 168) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_100926358()
{
  if (*(void *)(v0 + 176))
  {
    uint64_t v1 = *(void *)(v0 + 176);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void **)(v2
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide);
    id v4 = objc_retain(*(id *)(v2
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel));
    id v5 = v3;
    uint64_t v1 = sub_1009273A8(v4, v5);

    *(void *)(v0 + 176) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_1009263F8()
{
  uint64_t v1 = *(void **)(v0 + 184);
  if (v1)
  {
    id v2 = *(id *)(v0 + 184);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) leadingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 184);
    *(void *)(v0 + 184) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_1009264C0()
{
  uint64_t v1 = *(void **)(v0 + 192);
  if (v1)
  {
    id v2 = *(id *)(v0 + 192);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel) trailingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide) trailingAnchor];
    id v6 = [v4 constraintLessThanOrEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 192);
    *(void *)(v0 + 192) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_100926588()
{
  if (*(void *)(v0 + 200))
  {
    uint64_t v1 = *(void *)(v0 + 200);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void **)(v2
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide);
    id v4 = objc_retain(*(id *)(v2
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel));
    id v5 = v3;
    uint64_t v1 = sub_1009273A8(v4, v5);

    *(void *)(v0 + 200) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100926628()
{
  uint64_t v1 = *(void **)(v0 + 208);
  if (v1)
  {
    id v2 = *(id *)(v0 + 208);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) leadingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 208);
    *(void *)(v0 + 208) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_1009266F0()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1)
  {
    id v2 = *(id *)(v0 + 216);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel) trailingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide) trailingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 216);
    *(void *)(v0 + 216) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_1009267B8()
{
  if (*(void *)(v0 + 224))
  {
    uint64_t v1 = *(void *)(v0 + 224);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void **)(v2
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide);
    id v4 = objc_retain(*(id *)(v2
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView));
    id v5 = v3;
    uint64_t v1 = sub_1009273A8(v4, v5);

    *(void *)(v0 + 224) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100926858()
{
  uint64_t v1 = *(void **)(v0 + 232);
  if (v1)
  {
    id v2 = *(id *)(v0 + 232);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView) leadingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) leadingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 232);
    *(void *)(v0 + 232) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

id sub_100926920()
{
  uint64_t v1 = *(void **)(v0 + 240);
  if (v1)
  {
    id v2 = *(id *)(v0 + 240);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    id v4 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView) trailingAnchor];
    id v5 = [*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide) trailingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    id v7 = *(void **)(v0 + 240);
    *(void *)(v0 + 240) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_1009269E8(void *a1)
{
  sub_1005057FC((uint64_t *)&unk_101676C10);
  unint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101177E70;
  id v4 = [a1 trailingAnchor];
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide;
  id v7 = [*(id *)(v5+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide) trailingAnchor];
  id v8 = [v4 constraintEqualToAnchor:v7];

  *(void *)(v3 + 32) = v8;
  unint64_t v28 = v3;
  specialized Array._endMutation()();
  unint64_t v9 = v3;
  unint64_t v27 = v3 >> 62;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_10;
    }
  }
  if (v10 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = 0;
  do
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v9 + 8 * v12 + 32);
    }
    id v15 = v13;
    ++v12;
    LODWORD(v14) = 1144750080;
    [v13 setPriority:v14, v27];
  }
  while (v10 != v12);
LABEL_10:
  swift_bridgeObjectRelease();
  id v16 = [a1 leadingAnchor];
  id v17 = [*(id *)(v5 + v6) leadingAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  id v19 = [a1 trailingAnchor];
  id v20 = [*(id *)(v5 + v6) trailingAnchor];
  id v21 = [v19 constraintLessThanOrEqualToAnchor:v20];

  if (!v27)
  {
    uint64_t v22 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v23 = v22 + 2;
    if (!__OFADD__(v22, 2)) {
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v23 = v26 + 2;
  if (__OFADD__(v26, 2)) {
    goto LABEL_18;
  }
LABEL_12:
  sub_101044ABC(v23, 1);
  specialized Array._endMutation()();
  id v18 = v18;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_19:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v24 = v21;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v25 = sub_100CDE144(v28);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_100926D70(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_23;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(a1 + 8 * i + 32);
    }
    id v8 = v7;
    [v7 setAlpha:1.0];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v9 = result;
    if (result)
    {
LABEL_12:
      if (v9 >= 1)
      {
        for (uint64_t j = 0; j != v9; ++j)
        {
          if ((a2 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(a2 + 8 * j + 32);
          }
          uint64_t v12 = v11;
          [v11 setAlpha:0.0];
        }
        goto LABEL_19;
      }
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_12;
    }
  }
LABEL_19:

  return swift_bridgeObjectRelease();
}

id *sub_100926F00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_100927000()
{
  sub_100926F00();

  return swift_deallocClassInstance();
}

void sub_100927108()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC8Freeform30CRLiOSFolderGridViewController8ListItem____lazy_storage___listViewController));
}

id sub_100927118()
{
  return sub_100927134(0, _s8ListItemCMa);
}

id sub_100927134(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t sub_10092717C()
{
  return _s8ListItemCMa();
}

uint64_t _s8ListItemCMa()
{
  uint64_t result = qword_101688008;
  if (!qword_101688008) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009271D0()
{
  return swift_updateClassMetadata2();
}

uint64_t _s8ListItemC18ListViewControllerCMa()
{
  return self;
}

uint64_t _s8ListItemC17TextLayoutBuilderCMa()
{
  return self;
}

void *sub_10092725C(uint64_t a1)
{
  uint64_t result = &_swiftEmptySetSingleton;
  id v8 = &_swiftEmptySetSingleton;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100522D7C(v4, (uint64_t)v7);
      sub_100522D7C((uint64_t)v7, (uint64_t)v6);
      sub_10050BF48(0, (unint64_t *)&qword_101674200);
      if (swift_dynamicCast())
      {
        sub_100CBADE8(v6, v5);
      }
      else
      {
        sub_100522D7C((uint64_t)v7, (uint64_t)v6);
        sub_1005057FC(&qword_1016885D8);
        if (swift_dynamicCast()) {
          sub_10057D530((unint64_t)v5);
        }
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v7);
      v4 += 32;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t sub_1009273A8(void *a1, void *a2)
{
  sub_1005057FC((uint64_t *)&unk_101676C10);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101177E70;
  id v5 = [a2 topAnchor];
  id v6 = [a1 topAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v4 + 32) = v7;
  specialized Array._endMutation()();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v10 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v4 + 8 * v10 + 32);
    }
    id v13 = v11;
    ++v10;
    LODWORD(v12) = 1144750080;
    [v11 setPriority:v12];
  }
  while (v8 != v10);
LABEL_10:
  swift_bridgeObjectRelease();
  id v14 = [a2 bottomAnchor];
  id v15 = [a1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  id v17 = [a2 topAnchor];
  id v18 = [a1 topAnchor];
  id v19 = [v17 constraintLessThanOrEqualToAnchor:v18];

  if (!(v4 >> 62))
  {
    id v20 = *(char **)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v21 = v20 + 2;
    if (!__OFADD__(v20, 2)) {
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  id v20 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v21 = v20 + 2;
  if (__OFADD__(v20, 2)) {
    goto LABEL_18;
  }
LABEL_12:
  sub_101044ABC(v21, 1);
  specialized Array._endMutation()();
  id v20 = (char *)v16;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_19:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v22 = v19;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v23 = sub_100CDE144(v4);
  swift_bridgeObjectRelease();
  return v23;
}

unint64_t sub_100927720()
{
  unint64_t result = qword_101674208;
  if (!qword_101674208)
  {
    sub_10050BF48(255, (unint64_t *)&qword_101674200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101674208);
  }
  return result;
}

void sub_100927788(unint64_t a1, unint64_t a2, char a3)
{
  if (a3)
  {
    id v5 = self;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a1;
    v16[4] = sub_100927A4C;
    v16[5] = v6;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = *(void *)"";
    v16[2] = sub_100679958;
    v16[3] = &unk_10151AE38;
    id v7 = _Block_copy(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    [v5 animateWithDuration:v7 animations:0.2];
    _Block_release(v7);
    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_12;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(a1 + 8 * i + 32);
    }
    id v11 = v10;
    [v10 setAlpha:0.0];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
    {
LABEL_14:
      if (v12 >= 1)
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          if ((a2 & 0xC000000000000001) != 0) {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v14 = *(id *)(a2 + 8 * j + 32);
          }
          id v15 = v14;
          [v14 setAlpha:1.0];
        }
        goto LABEL_21;
      }
LABEL_25:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_14;
    }
  }
LABEL_21:

  swift_bridgeObjectRelease();
}

uint64_t sub_100927A0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100927A4C()
{
  return sub_100926D70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100927A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100927A64()
{
  return swift_release();
}

uint64_t sub_100927A6C(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100927A7C(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

void sub_100927A8C(void (*a1)(void))
{
  uint64_t v2 = v1;
  id v4 = [v1 interactiveCanvasController];
  id v11 = [v4 commandController];

  if (!v11)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v5 = [v2 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * i + 32);
    }
    id v10 = v9;
    a1();
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

uint64_t sub_100927CD8(void *a1, uint64_t a2, SEL *a3)
{
  sub_100522E9C(a2, (uint64_t)v13, &qword_101672BF0);
  uint64_t v5 = v14;
  if (v14)
  {
    unint64_t v6 = sub_10050F848(v13, v14);
    uint64_t v7 = *(void *)(v5 - 8);
    __n128 v8 = __chkstk_darwin(v6, v6);
    id v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }
  [a1 *a3 v11];
  return swift_unknownObjectRelease();
}

uint64_t sub_100927E44(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    id v7 = (id)swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  __chkstk_darwin(v7, v8);
  sub_100927A8C(a4);

  return sub_100522F00((uint64_t)v10, &qword_101672BF0);
}

uint64_t sub_100927EF8@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100835A98();
  uint64_t v3 = v2;
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + 4) = BYTE4(v3);
  *(_DWORD *)a1 = v3;
  return result;
}

void sub_100927F50(float a1)
{
  uint64_t v2 = v1;
  id v4 = [v1 interactiveCanvasController];
  id v14 = [v4 commandController];

  if (!v14)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v5 = [v2 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * i + 32);
    }
    id v10 = v9;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v12 = sub_1008355F8();
    if (v12)
    {
      id v13 = v12;
      sub_101036F20(KeyPath, *(void *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], a1);

      swift_release();
    }
    else
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

      swift_release();
    }
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

void sub_100928278(char a1, uint64_t a2, void (*a3)(uint64_t, void, void, void))
{
  id v5 = [v3 interactiveCanvasController];
  id v15 = [v5 commandController];

  if (!v15)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v6 = [v3 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v7 + 8 * i + 32);
    }
    uint64_t v11 = v10;
    uint64_t KeyPath = swift_getKeyPath();
    id v13 = sub_1008355F8();
    if (v13)
    {
      id v14 = v13;
      a3(KeyPath, a1 & 1, *(void *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

      swift_release();
    }
    else
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

      swift_release();
    }
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

void sub_1009285B0(char a1, uint64_t a2, void (*a3)(uint64_t, void, void, void))
{
  id v5 = [v3 interactiveCanvasController];
  id v15 = [v5 commandController];

  if (!v15)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v6 = [v3 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v7 + 8 * i + 32);
    }
    uint64_t v11 = v10;
    uint64_t KeyPath = swift_getKeyPath();
    id v13 = sub_1008355F8();
    if (v13)
    {
      id v14 = v13;
      a3(KeyPath, a1 & 1, *(void *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

      swift_release();
    }
    else
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

      swift_release();
    }
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

uint64_t sub_1009288DC@<X0>(_WORD *a1@<X8>)
{
  swift_getKeyPath();
  sub_10083242C();
  __int16 v3 = v2;
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_10092892C(unsigned __int8 a1)
{
  __int16 v2 = v1;
  uint64_t v52 = sub_1005057FC(&qword_101687A90);
  __chkstk_darwin(v52, v4);
  uint64_t v51 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v8 = __chkstk_darwin(v6, v7).n128_u64[0];
  v50 = (uint64_t *)((char *)&v43 - v9);
  id v10 = [v1 interactiveCanvasController];
  id v11 = [v10 commandController];

  if (!v11)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  id v44 = v11;
  sub_10078F988(0);
  id v12 = [v2 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease_n();
    v42 = v44;
    sub_10078FB90(0);

    return;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_20;
  }
LABEL_4:
  uint64_t v54 = v14 - 1;
  if (v14 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v53 = v13 & 0xC000000000000001;
    Swift::Int v48 = a1;
    long long v47 = xmmword_10117E810;
    unint64_t v46 = 0x8000000101243B00;
    v45 = (char *)&type metadata for Any + 8;
    unint64_t v49 = v13;
    while (1)
    {
      if (v53) {
        id v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = (char *)*(id *)(v13 + 8 * v15 + 32);
      }
      id v17 = v16;
      uint64_t KeyPath = swift_getKeyPath();
      id v19 = sub_1008355F8();
      if (v19)
      {
        uint64_t v61 = v15;
        v60 = v19;
        uint64_t v20 = *(void *)&v19[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
        uint64_t v57 = *(void *)&v19[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
        uint64_t v58 = v20;
        id v21 = [*(id *)&v17[OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController] selectionPath];
        id v22 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
        id v59 = v21;
        id v56 = [v22 initWithCommitSelectionPath:v21 forwardSelectionPath:v21 reverseSelectionPath:v21];
        uint64_t v23 = *(void **)&v17[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape];
        uint64_t v24 = (uint64_t)v50;
        void *v50 = &_swiftEmptySetSingleton;
        sub_1005D3BF8();
        v55 = v23;
        swift_retain();
        uint64_t v25 = CRAttributedString.Attributes.init()();
        __chkstk_darwin(v25, v26);
        sub_10083E1BC();
        swift_getKeyPath();
        swift_retain();
        sub_100CB8180(&v62, 0x6C7974537473696CLL, 0xE900000000000065);
        uint64_t v27 = swift_bridgeObjectRelease();
        __chkstk_darwin(v27, v28);
        swift_getKeyPath();
        Swift::Int v62 = v48;
        LOBYTE(v63) = 0;
        sub_1005057FC((uint64_t *)&unk_1016836C0);
        sub_10083E210();
        CRAttributedString.Attributes.subscript.setter();
        uint64_t v29 = v51;
        sub_100522E9C(v24, v51, &qword_101687A90);
        id v30 = objc_allocWithZone((Class)sub_1005057FC((uint64_t *)&unk_1016836E0));
        v31 = v55;
        v32 = (unsigned char *)sub_10083D5DC(v55, v58, v57, v29);
        swift_release();

        uint64_t v33 = v24;
        v34 = v56;
        sub_100522F00(v33, &qword_101687A90);
        Strong = (void *)swift_unknownObjectWeakLoadStrong();
        id v36 = [Strong commandController];

        if (v36)
        {
          id v37 = v34;
          sub_10078BED8(v32, 0, v34, 4, 0);
        }
        id v38 = [self defaultCenter];
        if (qword_10166FC68 != -1) {
          swift_once();
        }
        uint64_t v39 = qword_10171BEB0;
        sub_1005057FC(&qword_101677430);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v47;
        Swift::Int v62 = 0xD000000000000021;
        unint64_t v63 = v46;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = sub_1005057FC(&qword_101683700);
        *(void *)(inited + 72) = KeyPath;
        swift_retain();
        sub_100A393A8(inited);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v38 postNotificationName:v39 object:v17 userInfo:isa];

        swift_release();
        uint64_t v15 = v61;
        unint64_t v13 = v49;
        if (v54 == v61) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2950, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2950);

        swift_release();
        if (v54 == v15) {
          goto LABEL_20;
        }
      }
      ++v15;
    }
  }
  __break(1u);
}

uint64_t sub_100929118@<X0>(uint64_t (*a1)(void)@<X4>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  uint64_t v4 = a1();
  char v6 = v5;
  uint64_t result = swift_release();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

void sub_100929174(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = v2;
  id v6 = [v2 interactiveCanvasController];
  id v13 = [v6 commandController];

  if (!v13)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v7 = [v4 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_12;
    }
  }
  if (v9 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v8 + 8 * i + 32);
    }
    id v12 = v11;
    a2(a1);
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

void sub_1009293A8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v61 = a2;
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v63 - 8);
  *(void *)&double v8 = __chkstk_darwin(v63, v7).n128_u64[0];
  Swift::Int v62 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v4 interactiveCanvasController];
  if (v10)
  {
    id v53 = v10;
    id v66 = [v10 commandController];
    if (v66)
    {
      id v11 = [v53 editorController];
      if (v11)
      {
        id v52 = v11;
        id v12 = [v11 selectionPath];
        id v13 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
        id v51 = v12;
        id v50 = [v13 initWithForwardSelectionPath:v12 reverseSelectionPath:v12];
        sub_10078F988(v50);
        id v14 = [v4 boardItems];
        uint64_t v15 = type metadata accessor for CRLBoardItem(0);
        sub_10060A334();
        uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v55 = v15;
        if ((v16 & 0xC000000000000001) != 0)
        {
          __CocoaSet.makeIterator()();
          Set.Iterator.init(_cocoa:)();
          uint64_t v16 = v72;
          uint64_t v58 = v73;
          uint64_t v17 = v74;
          uint64_t v18 = v75;
          unint64_t v19 = v76;
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v21 = -1 << *(unsigned char *)(v16 + 32);
          uint64_t v22 = *(void *)(v16 + 56);
          uint64_t v58 = v16 + 56;
          uint64_t v23 = ~v21;
          uint64_t v24 = -v21;
          if (v24 < 64) {
            uint64_t v25 = ~(-1 << v24);
          }
          else {
            uint64_t v25 = -1;
          }
          unint64_t v19 = v25 & v22;
          uint64_t v17 = v23;
        }
        uint64_t v56 = v16 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v49 = v17;
        int64_t v57 = (unint64_t)(v17 + 64) >> 6;
        v60 = (void (**)(char *, char *, uint64_t))(v6 + 32);
        int v59 = a1 & 1;
        uint64_t v54 = (char *)&type metadata for Swift.AnyObject + 8;
        uint64_t v26 = v61;
        while (1)
        {
          if (v16 < 0)
          {
            uint64_t v30 = __CocoaSet.Iterator.next()();
            if (!v30) {
              goto LABEL_42;
            }
            uint64_t v69 = v30;
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v31 = v70;
            swift_unknownObjectRelease();
            uint64_t v29 = v18;
            uint64_t v27 = v19;
            if (!v31) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19)
            {
              uint64_t v27 = (v19 - 1) & v19;
              unint64_t v28 = __clz(__rbit64(v19)) | (v18 << 6);
              uint64_t v29 = v18;
            }
            else
            {
              int64_t v32 = v18 + 1;
              if (__OFADD__(v18, 1))
              {
                __break(1u);
                return;
              }
              if (v32 >= v57) {
                goto LABEL_42;
              }
              unint64_t v33 = *(void *)(v58 + 8 * v32);
              uint64_t v29 = v18 + 1;
              if (!v33)
              {
                uint64_t v29 = v18 + 2;
                if (v18 + 2 >= v57) {
                  goto LABEL_42;
                }
                unint64_t v33 = *(void *)(v58 + 8 * v29);
                if (!v33)
                {
                  uint64_t v29 = v18 + 3;
                  if (v18 + 3 >= v57) {
                    goto LABEL_42;
                  }
                  unint64_t v33 = *(void *)(v58 + 8 * v29);
                  if (!v33)
                  {
                    uint64_t v29 = v18 + 4;
                    if (v18 + 4 >= v57) {
                      goto LABEL_42;
                    }
                    unint64_t v33 = *(void *)(v58 + 8 * v29);
                    if (!v33)
                    {
                      uint64_t v29 = v18 + 5;
                      if (v18 + 5 >= v57) {
                        goto LABEL_42;
                      }
                      unint64_t v33 = *(void *)(v58 + 8 * v29);
                      if (!v33)
                      {
                        uint64_t v34 = v18 + 6;
                        while (v57 != v34)
                        {
                          unint64_t v33 = *(void *)(v58 + 8 * v34++);
                          if (v33)
                          {
                            uint64_t v29 = v34 - 1;
                            goto LABEL_38;
                          }
                        }
LABEL_42:
                        sub_10052E1EC();
                        sub_10078FB90(0);

                        return;
                      }
                    }
                  }
                }
              }
LABEL_38:
              uint64_t v27 = (v33 - 1) & v33;
              unint64_t v28 = __clz(__rbit64(v33)) + (v29 << 6);
            }
            v31 = *(id *)(*(void *)(v16 + 48) + 8 * v28);
            if (!v31) {
              goto LABEL_42;
            }
          }
          type metadata accessor for CRLWPShapeItem();
          uint64_t v35 = swift_dynamicCastClass();
          if (v35)
          {
            uint64_t v36 = v35;
            Class v67 = (Class)sub_1005057FC(&qword_1016885E8);
            id v37 = (char *)objc_allocWithZone(v67);
            uint64_t v68 = v29;
            id v38 = v37;
            uint64_t v39 = &v37[*(void *)((swift_isaMask & *(void *)v37) + 0xF0)];
            *(void *)uint64_t v39 = 0;
            *((void *)v39 + 1) = 0xE000000000000000;
            v40 = *(void (**)(uint64_t))(**(void **)(v36
                                                               + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                 + 256);
            v41 = v31;
            swift_retain();
            v42 = (char *)v38;
            uint64_t v43 = swift_retain();
            uint64_t v44 = v27;
            v45 = v62;
            v40(v43);
            swift_release();
            unint64_t v46 = v45;
            uint64_t v27 = v44;
            (*v60)(&v42[*(void *)((swift_isaMask & *(void *)v42) + 0xD8)], v46, v63);
            v42[*(void *)((swift_isaMask & *(void *)v42) + 0xE0)] = v59;
            uint64_t v29 = v68;
            *(void *)&v42[*(void *)((swift_isaMask & *(void *)v42) + 0xE8)] = v26;
            swift_retain();

            v71.receiver = v42;
            v71.super_class = v67;
            v31 = [super init];

            swift_release();
            long long v47 = (void *)((char *)v31 + *(void *)((swift_isaMask & *v31) + 0xF0));
            uint64_t v48 = v65;
            *long long v47 = v64;
            v47[1] = v48;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_10078BED8(v31, 0, 0, 4, 0);
          }
          uint64_t v18 = v29;
          unint64_t v19 = v27;
        }
      }

      id v20 = v66;
    }
    else
    {
      id v20 = v53;
    }
  }
}

uint64_t sub_100929A68(char a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  id v3 = [self mainBundle];
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 localizedStringForKey:v4 value:v5 table:v6];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  sub_1009293A8(a1, KeyPath, v8, v10);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100929BC4()
{
  swift_getKeyPath();
  sub_101042408();
  uint64_t v1 = v0;
  swift_release();
  return v1 & 0xFFFFFFFFFFLL;
}

uint64_t sub_100929C08(uint64_t a1, uint64_t a2)
{
  return sub_100929E8C(a1, a2, (uint64_t)&unk_101198E70, (uint64_t (*)(void))sub_101042250);
}

void sub_100929C28(void *a1)
{
  id v2 = a1;
  sub_100929FF0(v1, v2);
}

uint64_t sub_100929C6C(uint64_t a1, uint64_t a2)
{
  return sub_100929F2C(a1, a2, (uint64_t)&unk_101198E48, (uint64_t (*)(void))sub_101042264);
}

void sub_100929C8C(char a1)
{
}

uint64_t sub_100929CC0(uint64_t a1, uint64_t a2)
{
  return sub_100929F2C(a1, a2, (uint64_t)&unk_101198E00, (uint64_t (*)(void))sub_101042264);
}

void sub_100929CE0(char a1)
{
}

uint64_t sub_100929D14(uint64_t a1, uint64_t a2)
{
  return sub_100929F2C(a1, a2, (uint64_t)&unk_101198DB8, (uint64_t (*)(void))sub_101042264);
}

void sub_100929D34(char a1)
{
}

uint64_t sub_100929D68(uint64_t a1, uint64_t a2)
{
  return sub_100929F2C(a1, a2, (uint64_t)&unk_101198D70, (uint64_t (*)(void))sub_101042264);
}

void sub_100929D88(char a1)
{
}

uint64_t sub_100929DBC(uint64_t a1, uint64_t a2)
{
  return sub_100929E8C(a1, a2, (uint64_t)&unk_101198D28, (uint64_t (*)(void))sub_101042590);
}

void sub_100929DDC(void *a1)
{
  id v2 = a1;
  sub_10092A20C(v1, v2);
}

uint64_t sub_100929E20(uint64_t a1, uint64_t a2)
{
  return sub_100929E8C(a1, a2, (uint64_t)&unk_101198CE0, (uint64_t (*)(void))sub_1010427A4);
}

void sub_100929E40(uint64_t a1)
{
}

uint64_t sub_100929E6C(uint64_t a1, uint64_t a2)
{
  return sub_100929E8C(a1, a2, (uint64_t)&unk_101198CB8, (uint64_t (*)(void))sub_101042BEC);
}

uint64_t sub_100929E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  swift_getKeyPath();
  uint64_t v5 = a4();
  swift_release();
  return v5;
}

void sub_100929EE0(uint64_t a1)
{
}

uint64_t sub_100929F0C(uint64_t a1, uint64_t a2)
{
  return sub_100929F2C(a1, a2, (uint64_t)&unk_101198C78, (uint64_t (*)(void))sub_101042918);
}

uint64_t sub_100929F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  swift_getKeyPath();
  uint64_t v5 = a4();
  swift_release();
  return v5;
}

void sub_100929F7C(uint64_t a1)
{
}

uint64_t sub_100929FA8(void *a1)
{
  return sub_100927CD8(a1, *(void *)(v1 + 16), (SEL *)&selRef_decreaseSize_);
}

uint64_t sub_100929FCC(void *a1)
{
  return sub_100927CD8(a1, *(void *)(v1 + 16), (SEL *)&selRef_increaseSize_);
}

void sub_100929FF0(void *a1, void *a2)
{
  id v4 = [a1 interactiveCanvasController];
  id v11 = [v4 commandController];

  if (!v11)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v5 = [a1 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * i + 32);
    }
    uint64_t v10 = v9;
    sub_100836CAC(a2);
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

void sub_10092A20C(void *a1, void *a2)
{
  id v3 = [a1 interactiveCanvasController];
  id v13 = [v3 commandController];

  if (!v13)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260);
    return;
  }
  sub_10078F988(0);
  id v4 = [a1 wpEditors];
  type metadata accessor for CRLWPEditor();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * i + 32);
    }
    id v9 = v8;
    uint64_t KeyPath = swift_getKeyPath();
    id v11 = sub_1008355F8();
    if (v11)
    {
      id v12 = v11;
      sub_101037680(KeyPath, a2, *(void *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(void *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

      swift_release();
    }
    else
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2941);

      swift_release();
    }
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  sub_10078FB90(0);
}

uint64_t sub_10092A52C()
{
  return 32;
}

uint64_t sub_10092A538()
{
  return swift_release();
}

uint64_t sub_10092A540(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return swift_retain();
}

__n128 sub_10092A568(__n128 *a1, uint64_t a2)
{
  *(void *)a2 = a1[1].n128_u64[1];
  __n128 result = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10092A58C()
{
  return 32;
}

uint64_t sub_10092A5AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100929118((uint64_t (*)(void))sub_100832224, a1);
}

uint64_t sub_10092A5E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100929118((uint64_t (*)(void))sub_10083600C, a1);
}

id sub_10092A624@<X0>(uint64_t a1@<X8>)
{
  id result = sub_100836B94();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

id sub_10092A828(uint64_t a1)
{
  sub_100557A70(a1, (uint64_t)v17);
  if (!v18)
  {
    sub_10052E2B0((uint64_t)v17);
    return 0;
  }
  char v3 = (objc_class *)type metadata accessor for CRLGroupSelection();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v4 = v16;
  if (v16[OBJC_IVAR____TtC8Freeform17CRLGroupSelection_hasSelectedItemsInNonGroupContainer] != v1[OBJC_IVAR____TtC8Freeform17CRLGroupSelection_hasSelectedItemsInNonGroupContainer])
  {

    return 0;
  }
  sub_100557A70(a1, (uint64_t)v17);
  uint64_t v7 = v18;
  if (v18)
  {
    id v8 = sub_10050F848(v17, v18);
    uint64_t v9 = *(void *)(v7 - 8);
    __n128 v10 = __chkstk_darwin(v8, v8);
    id v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v17);
  }
  else
  {
    uint64_t v13 = 0;
  }
  v15.receiver = v1;
  v15.super_class = v3;
  [super isEqual:v13];
  swift_unknownObjectRelease();

  return v5;
}

double *sub_10092AACC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = __CocoaSet.count.getter();
    if (!v2) {
      goto LABEL_15;
    }
    uint64_t v3 = v2;
    uint64_t v22 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = __CocoaSet.startIndex.getter();
    uint64_t v20 = v4;
    unsigned __int8 v21 = 1;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v22 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v19 = sub_1006678A4(v1);
  uint64_t v20 = v5;
  unsigned __int8 v21 = v6 & 1;
  while (1)
  {
LABEL_9:
    while (1)
    {
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      uint64_t v14 = v21;
      sub_100666E14(v19, v20, v21, v1);
      type metadata accessor for CRLGroupItem();
      swift_dynamicCastClassUnconditional();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      id result = (double *)specialized ContiguousArray._endMutation()();
      if ((v1 & 0xC000000000000001) != 0) {
        break;
      }
      uint64_t v7 = sub_100666C8C(v12, v13, v14, v1);
      uint64_t v9 = v8;
      char v11 = v10;
      sub_10056A4C4(v12, v13, v14);
      uint64_t v19 = v7;
      uint64_t v20 = v9;
      unsigned __int8 v21 = v11 & 1;
      if (!--v3) {
        goto LABEL_14;
      }
    }
    if ((v14 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_1005057FC(&qword_1016787A0);
    uint64_t v16 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v16(&v18, 0);
    if (!--v3)
    {
LABEL_14:
      sub_10056A4C4(v19, v20, v21);
      uint64_t v17 = v22;
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10092AE28()
{
  sub_10056A14C();
  uint64_t v1 = NSString.init(stringLiteral:)();
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10117DF40;
  *(void *)(v2 + 56) = type metadata accessor for CRLGroupSelection();
  *(void *)(v2 + 64) = sub_10092B098(&qword_101688620, v3, (void (*)(uint64_t))type metadata accessor for CRLGroupSelection);
  *(void *)(v2 + 32) = v0;
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems];
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = v0;
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v7 = v0;
  }
  *(void *)(v2 + 96) = &type metadata for Int;
  *(void *)(v2 + 104) = &protocol witness table for Int;
  *(void *)(v2 + 72) = v6;
  type metadata accessor for CRLBoardItem(0);
  sub_10092B098((unint64_t *)&qword_101676C20, 255, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
  swift_bridgeObjectRetain();
  uint64_t v8 = Set.description.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *(void *)(v2 + 136) = &type metadata for String;
  *(void *)(v2 + 144) = sub_100528BE4();
  *(void *)(v2 + 112) = v8;
  *(void *)(v2 + 120) = v10;
  char v11 = NSString.init(format:_:)();

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v12;
}

id sub_10092B040()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLGroupSelection();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLGroupSelection()
{
  return self;
}

uint64_t sub_10092B098(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double *sub_10092B0E0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10050BF48(0, (unint64_t *)&qword_101678790);
    sub_10058EF24((unint64_t *)&qword_10167BE30, (unint64_t *)&qword_101678790);
    uint64_t result = (double *)Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v19 = v22;
    uint64_t v4 = v23;
    uint64_t v3 = v24;
    unint64_t v5 = v25;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = (double *)swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v9 = (unint64_t)(v4 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_10050BF48(0, (unint64_t *)&qword_101678790);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v20;
    swift_unknownObjectRelease();
    uint64_t v12 = v3;
    uint64_t v10 = v5;
    if (!v20) {
      goto LABEL_37;
    }
LABEL_33:
    id v17 = [v13 info];
    type metadata accessor for CRLBoardItem(0);
    uint64_t v18 = swift_dynamicCastClass();

    if (v18)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (double *)specialized Array._endMutation()();
    }
    else
    {
      uint64_t result = (double *)swift_unknownObjectRelease();
    }
    uint64_t v3 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v3 << 6);
    uint64_t v12 = v3;
LABEL_32:
    id v13 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v9) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v19 + 8 * v14);
    uint64_t v12 = v3 + 1;
    if (!v15)
    {
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v9) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v19 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v3 + 3;
        if (v3 + 3 >= v9) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v3 + 4;
          if (v3 + 4 >= v9) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v3 + 5;
            if (v3 + 5 >= v9) {
              goto LABEL_37;
            }
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v3 + 6;
              while (v9 != v16)
              {
                unint64_t v15 = *(void *)(v19 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10052E1EC();
              return _swiftEmptyArrayStorage;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

int64x2_t sub_10092B434()
{
  int64x2_t result = vdupq_n_s64(0x4069000000000000uLL);
  xmmword_10171B060 = (__int128)result;
  return result;
}

id sub_10092B4E8()
{
  [v0 currentPosition];
  double v2 = v1;
  double v4 = v3;
  sub_10092B650();
  double v7 = sub_1000653B4(v2, v4, v5, v6);
  id v8 = [objc_allocWithZone((Class)CRLBezierPath) init];
  [v0 currentPosition];
  [v8 moveToPoint:];
  sub_10092B650();
  double v10 = v9;
  double v12 = v11;
  [v0 currentPosition];
  double v13 = *(double *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine];
  double v16 = sub_100064680(v14, v15, v10);
  double v18 = sub_100064660(v16, v17);
  double v20 = sub_1000646A4(v18, v19, v7 + v13);
  [v8 lineToPoint:sub_100064698(v10, v12, v20)];
  sub_10092B650();
  double v22 = v21;
  double v24 = v23;
  [v0 currentPosition];
  double v27 = sub_100064680(v25, v26, v22);
  double v29 = sub_100064660(v27, v28);
  double v31 = sub_1000646A4(v29, v30, v7 + v13 + v13);
  [v8 lineToPoint:sub_100064698(v22, v24, v31)];
  return v8;
}

void sub_10092B650()
{
  id v1 = [v0 rep];
  id v2 = [v1 layout];

  id v3 = [v2 pureGeometryInRoot];
  if (v3)
  {
    [v3 center];

    id v4 = [v0 rep];
    id v5 = [v4 layout];

    self;
    double v6 = (void *)swift_dynamicCastObjCClass();
    if (v6)
    {
      double v7 = v6;
      if ([v6 maskEditMode] == (id)3)
      {
        id v8 = [v7 imageGeometryInRoot];
        [v8 center];
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10092B7A0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  id v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5, v6);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  double v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  double v17 = (char *)&v27 - v16;
  double v18 = (objc_class *)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  v34.receiver = v0;
  v34.super_class = v18;
  [super beginMovingKnob];
  id v19 = [v0 knob];
  type metadata accessor for CRLConnectionLineKnob();
  uint64_t v20 = swift_dynamicCastClass();
  if (v20 && *(unsigned char *)(v20 + OBJC_IVAR____TtC8Freeform21CRLConnectionLineKnob_knobState) == 2) {
    sub_100BCD638(3, 1);
  }

  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  double v21 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;

  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = [self isVoiceOverOrSwitchControlEnabled] ^ 1;
  sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  double v22 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  double v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v13, v9);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v0;
  aBlock[4] = sub_1009342D0;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_10151B0C8;
  double v24 = _Block_copy(aBlock);
  double v25 = v0;
  static DispatchQoS.unspecified.getter();
  int64_t v32 = _swiftEmptyArrayStorage;
  sub_1009340CC((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_10056B494();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  v28(v17, v9);
  return swift_release();
}

uint64_t sub_10092BC04(void *a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor();
  id v7 = a1;
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v7;
  sub_1005912D0((uint64_t)v5, (uint64_t)&unk_1016886A8, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_10092BD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  v4[11] = type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  v4[14] = v5;
  return _swift_task_switch(sub_10092BDB8, v6, v5);
}

uint64_t sub_10092BDB8()
{
  if (*(unsigned char *)(*(void *)(v0 + 80)
                + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview) == 1)
  {
    swift_unknownObjectWeakInit();
    return _swift_task_switch(sub_10092BE70, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

uint64_t sub_10092BE70()
{
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10092BEFC, v2, v1);
}

uint64_t sub_10092BEFC()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10092D7DC();

    sub_100522F00(v0 + 16, &qword_101672BF0);
  }
  swift_unknownObjectWeakDestroy();
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  return _swift_task_switch(sub_10092BFC0, v3, v4);
}

uint64_t sub_10092BFC0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void *sub_10092C068()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1009322B8();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = sub_1009322B8();
  if (!v4)
  {

    return 0;
  }
  uint64_t v5 = (void *)v4;
  id v6 = [v0 icc];
  id v7 = (char *)[v6 editingCoordinator];

  if (!v7)
  {

LABEL_17:
    return 0;
  }
  id v8 = *(id *)&v7[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  uint64_t v9 = (void *)sub_100F3DF34(v5);
  if (!v9)
  {

    return v9;
  }
  id v10 = [v1 rep];
  uint64_t v5 = [v10 getConnectionLineLayoutToCopyStyleForNewConnectionLine];

  sub_10092E7E0(v5);
  uint64_t v11 = &v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(void *)uint64_t v11 = v12;
  v11[8] = 0;
  double v13 = sub_1009323F4();
  double v15 = v14;
  sub_10092B650();
  double v18 = sub_1000653B4(v13, v15, v16, v17);
  double v19 = v18 + v18 + 150.0;
  if (!v11[8]) {
    double v19 = *(double *)v11;
  }
  double v20 = v19 - v18;
  sub_10092B650();
  double v22 = v21;
  double v24 = v23;
  double v25 = sub_1009323F4();
  double v27 = sub_100064680(v25, v26, v22);
  double v29 = sub_100064660(v27, v28);
  double v31 = sub_1000646A4(v29, v30, v20);
  double v32 = sub_100064698(v22, v24, v31);
  double v34 = v33;
  double v35 = sub_1009323F4();
  double v37 = sub_100064D34(v35, v36, v32);
  double v39 = v38;
  id v40 = [objc_allocWithZone((Class)CRLBezierPath) init];
  [v40 moveToPoint:sub_1009323F4()];
  [v40 lineToPoint:v37, v39];
  [v40 lineToPoint:v32, v34];
  v41 = (void *)sub_10092C58C((uint64_t)v40, v5);

  if (!v41)
  {

    goto LABEL_17;
  }
  uint64_t v42 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine;
  uint64_t v43 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine];
  *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = v41;
  id v58 = v41;

  uint64_t v44 = *(void **)&v1[v42];
  if (!v44)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"newDuplicateItemsAndConnectionLine()", 36, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeConnectionLineKnobTracker.swift", 103, 2, 165, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"newDuplicateItemsAndConnectionLine()", 36, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeConnectionLineKnobTracker.swift", 103, 2, 165);
LABEL_23:
    if (qword_10166F9D8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v54 = (id)static OS_os_log.crlError;
    uint64_t v55 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v54, (uint64_t)&_mh_execute_header, v55, (uint64_t)"Fail to create duplicated board items when long pressing the connector knob", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

    return 0;
  }
  id v45 = v44;
  uint64_t v46 = sub_1009322B8();
  if (!v46)
  {

    goto LABEL_23;
  }
  long long v47 = (void *)v46;
  int64_t v57 = v45;
  id v48 = [v1 icc];
  uint64_t v49 = (char *)[v48 editingCoordinator];

  if (!v49)
  {

LABEL_22:
    goto LABEL_23;
  }
  id v50 = *(id *)&v49[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  id v51 = (void *)sub_100F3DF34(v47);
  if (!v51)
  {

    goto LABEL_22;
  }
  (*(void (**)(void))((swift_isaMask & *v51) + 0x178))();
  sub_10092D174(v51);

  id v52 = v3;
  sub_1009BEC7C(v3);

  id v53 = v51;
  sub_1009BF200(v51);

  return v9;
}

uint64_t sub_10092C58C(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1005057FC(&qword_101678470);
  *(void *)&double v7 = __chkstk_darwin(v5 - 8, v6).n128_u64[0];
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v10 = [a2 connectionType:v7];
    uint64_t v11 = 18;
    if (v10 != (id)2) {
      uint64_t v11 = 19;
    }
    if (v10 == (id)1) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = v11;
    }
  }
  else
  {
    uint64_t v12 = 19;
  }
  id v13 = [objc_allocWithZone((Class)CRLConnectionLinePathSource) initWithBezierPath:a1];
  if (!v13) {
    return 0;
  }
  double v14 = v13;
  id v15 = [v2 icc];
  double v16 = (char *)[v15 editingCoordinator];

  if (!v16)
  {

    return 0;
  }
  id v17 = *(id *)&v16[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  uint64_t v18 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 1, 1, v18);
  id v19 = v14;
  id v20 = sub_100F3DA18(v12, 0, (uint64_t)v14, 1, 0, 0, 1, 0, 1u, (void *)1, (void *)1, (void *)1, (void *)1, (uint64_t)v9);

  sub_100522F00((uint64_t)v9, &qword_101678470);
  type metadata accessor for CRLConnectionLineItem();
  uint64_t v21 = swift_dynamicCastClass();
  if (v21) {
    sub_1009BFCC8(a2);
  }
  else {

  }
  return v21;
}

id sub_10092C7A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (***)(char *, void))(v2 - 8);
  *(void *)&double v5 = __chkstk_darwin(v2, v4).n128_u64[0];
  double v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v0 icc:v5];
  id v9 = [v8 board];

  if (!v9) {
    return 0;
  }
  id v10 = [v1 icc];
  uint64_t v11 = (char *)[v10 editingCoordinator];

  if (!v11)
  {

    return 0;
  }
  uint64_t v46 = v3;
  uint64_t v12 = (char *)*(id *)&v11[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  id v15 = sub_10092C068();
  if (v15)
  {
    double v16 = v13;
    id v17 = v14;
    double v39 = v1;
    id v41 = v9;
    id v44 = [objc_allocWithZone((Class)CRLCanvasInfoGeometry) initWithSize:1.0, 1.0];
    Class v43 = (Class)type metadata accessor for CRLGroupItem();
    id v40 = v12;
    uint64_t v18 = *(void *)&v12[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
    id v19 = *(char **)(v18 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
    id v20 = *(void (**)(uint64_t))(**(void **)&v19[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData]
                                         + 256);
    id v42 = *(id *)(v18 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
    uint64_t v21 = v19;
    uint64_t v45 = v2;
    double v22 = v21;
    uint64_t v23 = swift_retain();
    v20(v23);
    swift_release();

    id v24 = objc_allocWithZone(v43);
    id v25 = v44;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    double v27 = v42;
    id v28 = [v24 initWithStore:v42 parentContainerUUID:isa geometry:v25];

    v46[1](v7, v45);
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117FBD0;
    *(void *)(inited + 32) = v15;
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = v17;
    unint64_t v47 = inited;
    specialized Array._endMutation()();
    unint64_t v30 = v47;
    double v31 = v15;
    uint64_t v46 = v16;
    id v32 = v17;
    sub_100853108(v30);
    swift_bridgeObjectRelease();
    double v34 = v31;
    sub_1009BEC7C(v15);

    uint64_t v35 = swift_allocObject();
    double v36 = v39;
    *(void *)(v35 + 16) = v32;
    *(void *)(v35 + 24) = v36;
    id v37 = v32;
    id v38 = v36;
    sub_100888194((uint64_t)sub_100934174, v35);

    swift_release();
  }
  else
  {

    return 0;
  }
  return v28;
}

void sub_10092CD98(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    uint64_t v4 = **(void ***)(a2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    if (swift_conformsToProtocol2())
    {
      double v5 = (uint64_t (*)(uint64_t))v4[88];
      uint64_t v6 = swift_retain();
      uint64_t v4 = (void *)v5(v6);
      swift_release();
      self;
      double v7 = (void *)swift_dynamicCastObjCClass();
      if (v7)
      {
        [v7 copy];

        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10050BF48(0, (unint64_t *)&unk_10168A0E0);
        swift_dynamicCast();
        CGFloat a = v32.a;
        id v9 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
        [*(id *)&v32.a setHeadMagnet:v9];

        uint64_t v10 = sub_1009322B8();
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          id v12 = [a3 icc];
          id v13 = [v12 layoutForInfo:v11];

          if (v13)
          {
            id v14 = [a3 knob];
            id v15 = (char *)[v14 tag];

            if ((unint64_t)(v15 - 2) >= 7) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = qword_101198F58[(void)(v15 - 2)];
            }
            sub_100933C88((id)v16, v13);
            if ((v18 & 1) == 0) {
              uint64_t v16 = 1;
            }
            [v13 getCardinalPositionFromType:v16];
            CGFloat v20 = v19;
            CGFloat v22 = v21;
            [v13 pureTransformInRoot];
            CGAffineTransformInvert(&v32, &v33);
            CGAffineTransform v33 = v32;
            v34.x = v20;
            v34.y = v22;
            CGPoint v23 = CGPointApplyAffineTransform(v34, &v33);
            id v24 = [v13 pureGeometry];
            if (v24)
            {
              id v25 = v24;
              [v24 size];

              double v26 = sub_100064070();
              double v29 = sub_100066AA4(v23.x, v23.y, v26, v27, v28);
              id v17 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:v16 normalizedPosition:v29, v30];
              [*(id *)&a setTailMagnet:v17];

              goto LABEL_15;
            }
LABEL_19:
            __break(1u);
            return;
          }
        }
        id v17 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
        [*(id *)&v32.a setTailMagnet:v17];
LABEL_15:

        id v31 = *(id *)&a;
        sub_100A9AF5C((uint64_t)v31);

        return;
      }
    }
    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }
}

void sub_10092D174(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1009322B8();
  if (!v4) {
    return;
  }
  v60 = (void *)v4;
  id v5 = [v1 icc];
  id v6 = [v5 layoutForInfo:v60];

  if (v6)
  {
    type metadata accessor for CRLWPShapeItem();
    uint64_t v7 = swift_dynamicCastClass();
    id v8 = &selRef_screenScaleDidChange;
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t v10 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)(v7 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                              + 288);
      id v12 = v60;
      uint64_t v13 = swift_retain();
      id v14 = (void *)v11(v13);
      swift_release();
      unsigned int v15 = [v14 widthValid];

      if (!v15
        || (uint64_t v16 = *(uint64_t (**)(uint64_t))(**(void **)(v9 + v10) + 288),
            uint64_t v17 = swift_retain(),
            char v18 = (void *)v16(v17),
            swift_release(),
            unsigned __int8 v19 = [v18 heightValid],
            v18,
            (v19 & 1) == 0))
      {
        id v24 = [v6 pureGeometryInRoot];
        if (v24)
        {
          double v21 = v24;
          id v25 = [objc_allocWithZone((Class)CRLCanvasInfoGeometry) initWithLayoutGeometry:v24];
          [v25 mutableCopy];

          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_10050BF48(0, (unint64_t *)&qword_101677CC0);
          swift_dynamicCast();
          id v23 = v61;
          [v23 center];
          double v27 = v26;
          double v29 = v28;
          double v30 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v12) + 0xE0))();
          [v23 setWidthValid:[v30 widthValid]];
          [v23 setHeightValid:[v30 heightValid]];
          [v30 size];
          [v23 setSize:];
          id v8 = &selRef_screenScaleDidChange;
          [v23 setCenter:v27, v29];

LABEL_14:
          [v21 center];
          double v32 = v31;
          double v34 = v33;
          id v35 = [v2 rep];
          id v36 = [v35 layout];

          self;
          id v37 = (void *)swift_dynamicCastObjCClass();
          if (v37)
          {
            id v38 = v37;
            if ([v37 maskEditMode] == (id)3)
            {
              id v39 = [v38 imageGeometryInRoot];
              [v39 center];
              double v32 = v40;
              double v34 = v41;
            }
          }

          double v42 = sub_1009323F4();
          double v44 = sub_1000653B4(v42, v43, v32, v34);
          double v45 = v44 + v44 + 150.0;
          if (v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters
                + 8])
            double v46 = v45;
          else {
            double v46 = *(double *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
          }
          double v47 = sub_1009323F4();
          double v49 = sub_100064680(v47, v48, v32);
          double v51 = sub_100064660(v49, v50);
          double v53 = sub_1000646A4(v51, v52, v46);
          double v54 = sub_100064698(v32, v34, v53);
          double v56 = sub_100064680(v54, v55, v32);
          double v58 = v57;
          [v23 center];
          [v23 v8[320]:sub_100064698(v56, v58, v59)];
          [v23 copy];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_10050BF48(0, (unint64_t *)&qword_101684F50);
          swift_dynamicCast();
          (*(void (**)())((swift_isaMask & *a1) + 0xE8))();

          return;
        }
LABEL_23:
        __break(1u);
        return;
      }

      id v8 = &selRef_screenScaleDidChange;
    }
    id v20 = [v6 pureGeometryInRoot];
    if (v20)
    {
      double v21 = v20;
      CGFloat v22 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v60) + 0xE0))();
      [v22 mutableCopy];

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10050BF48(0, (unint64_t *)&qword_101677CC0);
      swift_dynamicCast();
      id v23 = v61;
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_23;
  }
}

void sub_10092D7DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (***)(char *, id))(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = sub_10092C7A8();
  if (v7)
  {
    uint64_t v11 = v8;
    id v12 = v9;
    v139 = v3;
    v140 = (char *)v2;
    v142 = v10;
    id v13 = v7;
    id v14 = [v0 icc];
    id v15 = [v14 freehandDrawingToolkit];

    [v15 endDrawingModeIfNeeded];
    id v16 = [v1 icc];
    uint64_t v138 = sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t v17 = swift_allocObject();
    long long v137 = xmmword_101177E70;
    *(_OWORD *)(v17 + 16) = xmmword_101177E70;
    *(void *)(v17 + 32) = v13;
    *(void *)&v144[0].CGFloat a = v17;
    specialized Array._endMutation()();
    uint64_t v136 = type metadata accessor for CRLBoardItem(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v16 setTemporaryAdditionalBoardItemsToDisplay:isa];

    id v19 = [v1 icc];
    [v19 layoutIfNeededIncludingLayerTreeIfYouKnowWhatYouAreDoing];

    id v20 = [v1 icc];
    id v141 = [v20 layoutForInfo:v142];

    if (v141)
    {
      self;
      double v21 = (void *)swift_dynamicCastObjCClass();
      if (v21)
      {
        CGFloat v22 = v21;
        id v135 = v13;
        [v21 setTemporaryConnectedFromInfo:v11];
        [v22 setTemporaryConnectedToInfo:v12];
        v133 = v22;
        [v22 setClipHead:1];
        id v23 = **(void ***)&v142[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
        if (swift_conformsToProtocol2())
        {
          id v24 = (uint64_t (*)(uint64_t))v23[88];
          uint64_t v25 = swift_retain();
          id v23 = (void *)v24(v25);
          swift_release();
          self;
          double v26 = (void *)swift_dynamicCastObjCClass();
          if (v26)
          {
            [v26 copy];

            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            sub_10050BF48(0, (unint64_t *)&unk_10168A0E0);
            swift_dynamicCast();
            CGFloat a = v143.a;
            id v28 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
            [*(id *)&a setHeadMagnet:v28];

            uint64_t v29 = sub_1009322B8();
            if (v29)
            {
              double v30 = (void *)v29;
              id v31 = [v1 icc];
              id v32 = [v31 layoutForInfo:v30];

              if (v32)
              {
                id v33 = [v1 knob];
                double v34 = (char *)[v33 tag];

                if ((unint64_t)(v34 - 2) >= 7) {
                  uint64_t v35 = 1;
                }
                else {
                  uint64_t v35 = qword_101198F58[(void)(v34 - 2)];
                }
                sub_100933C88((id)v35, v32);
                if (v38) {
                  uint64_t v39 = v35;
                }
                else {
                  uint64_t v39 = 1;
                }
                [v32 getCardinalPositionFromType:v39];
                CGFloat v41 = v40;
                CGFloat v43 = v42;
                [v32 pureTransformInRoot];
                CGAffineTransformInvert(&v143, v144);
                v144[0] = v143;
                v146.x = v41;
                v146.y = v43;
                CGPoint v44 = CGPointApplyAffineTransform(v146, v144);
                id v45 = [v32 pureGeometry];
                if (v45)
                {
                  double v46 = v45;
                  [v45 size];

                  double v47 = sub_100064070();
                  double v50 = sub_100066AA4(v44.x, v44.y, v47, v48, v49);
                  id v37 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:v39 normalizedPosition:v50, v51];
                  [*(id *)&a setTailMagnet:v37];

LABEL_23:
                  double v52 = v142;
                  id v134 = *(id *)&a;
                  sub_100A9AF5C((uint64_t)v134);
                  v142 = v52;

                  type metadata accessor for CRLWPShapeItem();
                  uint64_t v53 = swift_dynamicCastClass();
                  if (!v53)
                  {
                    id v66 = v134;
                    id v65 = v135;
                    Class v67 = &selRef_i_join;
                    uint64_t v68 = v133;
LABEL_45:
                    sub_100930AE0(v12, 0);
                    type metadata accessor for CRLInsertionAnimationHelper();
                    id v120 = [v1 v67[110]];
                    sub_10085C8C4(v65, v11, v12, v68, v120);

                    *((unsigned char *)v1
                    + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview) = 1;

                    return;
                  }
                  v132 = v12;
                  uint64_t v54 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
                  double v55 = *(uint64_t (**)(uint64_t))(**(void **)(v53
                                                                        + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                          + 288);
                  double v56 = v11;
                  double v57 = (char *)v53;
                  v130 = v56;
                  id v131 = v56;
                  uint64_t v58 = swift_retain();
                  double v59 = (void *)v55(v58);
                  swift_release();
                  unsigned int v60 = [v59 widthValid];

                  if (v60)
                  {
                    uint64_t v61 = *(uint64_t (**)(uint64_t))(**(void **)&v57[v54] + 288);
                    uint64_t v62 = swift_retain();
                    uint64_t v63 = (void *)v61(v62);
                    swift_release();
                    unsigned __int8 v64 = [v63 heightValid];

                    if (v64)
                    {
                      id v66 = v134;
                      id v65 = v135;
                      Class v67 = &selRef_i_join;
                      id v12 = v132;
                      uint64_t v68 = v133;
                      uint64_t v11 = v130;
                      uint64_t v69 = v131;
LABEL_44:

                      goto LABEL_45;
                    }
                  }
                  v128 = v57;
                  id v12 = v132;
                  uint64_t v70 = swift_dynamicCastClass();
                  if (!v70)
                  {
                    id v66 = v134;
                    id v65 = v135;
                    Class v67 = &selRef_i_join;
                    uint64_t v68 = v133;
                    uint64_t v11 = v130;
                    uint64_t v69 = v131;
                    goto LABEL_44;
                  }
                  uint64_t v71 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
                  uint64_t v72 = *(uint64_t (**)(uint64_t))(**(void **)(v70
                                                                        + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                          + 288);
                  uint64_t v73 = (void *)v70;
                  id v129 = v12;
                  uint64_t v74 = swift_retain();
                  uint64_t v75 = (void *)v72(v74);
                  swift_release();
                  unsigned int v76 = [v75 widthValid];

                  uint64_t v11 = v130;
                  if (v76
                    && (v77 = *(uint64_t (**)(uint64_t))(**(void **)((char *)v73 + v71) + 288),
                        uint64_t v78 = swift_retain(),
                        v79 = (void *)v77(v78),
                        swift_release(),
                        unsigned __int8 v80 = [v79 heightValid],
                        v79,
                        (v80 & 1) != 0))
                  {
                    id v65 = v135;
                    Class v67 = &selRef_i_join;
                  }
                  else
                  {
                    v81 = v73;
                    Class v67 = &selRef_i_join;
                    id v82 = [v1 icc];
                    id v83 = [v82 board];

                    if (v83)
                    {
                      id v127 = v83;
                      id v84 = [v1 icc];
                      v85 = (char *)[v84 editingCoordinator];

                      id v65 = v135;
                      id v12 = v132;
                      if (v85)
                      {
                        v86 = (char *)*(id *)&v85[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

                        v126 = v81;
                        *(double *)&uint64_t v87 = COERCE_DOUBLE(sub_10092ED60(v128, v81));
                        if ((v89 & 1) == 0)
                        {
                          double v90 = *(double *)&v87;
                          double v91 = v88;
                          v92 = sub_10092F694(v126);
                          if (v92)
                          {
                            v93 = v92;
                            [v92 setCenter:v90, v91];
                            id v94 = v129;
                            id v125 = v94;
                            v95 = v93;
                            sub_10088AA40(v95);
                            v122 = v95;

                            id v124 = [objc_allocWithZone((Class)CRLCanvasInfoGeometry) initWithSize:1.0, 1.0];
                            Class v123 = (Class)type metadata accessor for CRLGroupItem();
                            uint64_t v96 = *(void *)&v86[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
                            v97 = *(void **)(v96 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
                            v98 = *(char **)(v96 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
                            uint64_t v99 = **(void **)&v98[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
                            v121 = v86;
                            v100 = *(void (**)(uint64_t))(v99 + 256);
                            id v101 = v97;
                            v102 = v98;
                            uint64_t v103 = swift_retain();
                            v100(v103);
                            swift_release();

                            id v104 = objc_allocWithZone(v123);
                            id v105 = v124;
                            Class v106 = UUID._bridgeToObjectiveC()().super.isa;
                            id v107 = [v104 initWithStore:v101 parentContainerUUID:v106 geometry:v105];

                            v139[1](v6, v140);
                            uint64_t inited = swift_initStackObject();
                            *(_OWORD *)(inited + 16) = xmmword_10117FBD0;
                            v109 = v131;
                            v110 = v126;
                            *(void *)(inited + 32) = v131;
                            *(void *)(inited + 40) = v110;
                            v111 = v142;
                            *(void *)(inited + 48) = v142;
                            *(void *)&v144[0].CGFloat a = inited;
                            specialized Array._endMutation()();
                            unint64_t v112 = *(void *)&v144[0].a;
                            id v113 = v107;
                            v140 = v111;
                            id v114 = v109;
                            v139 = (void (**)(char *, id))v125;
                            id v65 = v113;
                            sub_100853108(v112);
                            swift_bridgeObjectRelease();

                            Class v67 = &selRef_i_join;
                            id v116 = [v1 icc];
                            uint64_t v117 = swift_allocObject();
                            *(_OWORD *)(v117 + 16) = v137;
                            *(void *)(v117 + 32) = v65;
                            *(void *)&v144[0].CGFloat a = v117;
                            specialized Array._endMutation()();
                            Class v118 = Array._bridgeToObjectiveC()().super.isa;
                            swift_bridgeObjectRelease();
                            [v116 setTemporaryAdditionalBoardItemsToDisplay:v118];

                            id v119 = [v1 icc];
                            [v119 layoutIfNeededIncludingLayerTreeIfYouKnowWhatYouAreDoing];

                            v86 = v121;
                          }
                          else
                          {
                            Class v67 = &selRef_i_join;
                          }
                        }
                      }
                      uint64_t v68 = v133;
                      id v66 = v134;
                      uint64_t v69 = v131;
                      id v115 = v129;

                      goto LABEL_43;
                    }
                    id v65 = v135;
                  }
                  uint64_t v68 = v133;
                  id v66 = v134;
                  uint64_t v69 = v131;
                  id v12 = v132;
                  id v115 = v129;
LABEL_43:

                  goto LABEL_44;
                }
LABEL_49:
                __break(1u);
                return;
              }
            }
            id v37 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
            [*(id *)&a setTailMagnet:v37];
            goto LABEL_23;
          }
        }
        else
        {
          __break(1u);
        }

        __break(1u);
        goto LABEL_49;
      }

      id v36 = (char *)v141;
    }
    else
    {

      id v36 = v142;
    }
  }
}

void sub_10092E7E0(void *a1)
{
  double v3 = sub_1009323F4();
  double v5 = v4;
  sub_10092B650();
  double v8 = sub_1000653B4(v3, v5, v6, v7);
  id v9 = [v1 rep];
  id v10 = [v9 layout];

  id v11 = [v10 stroke];
  if (!v11)
  {
    double v13 = 0.0;
    uint64_t v14 = sub_1009322B8();
    if (v14) {
      goto LABEL_3;
    }
LABEL_8:
    if (!a1) {
      return;
    }
LABEL_9:
    id v16 = a1;
    id v17 = [v1 icc];
    id v18 = [v17 repForLayout:v16];

    if (v18)
    {
      id v19 = [v16 connectedFrom];
      if (v19)
      {
        id v20 = v19;
        id v21 = [v16 connectedTo];
        if (v21)
        {
          CGFloat v22 = v21;
          [v16 distanceBetweenConnectionPoints];
          double v24 = v23;
          self;
          uint64_t v25 = (void *)swift_dynamicCastObjCClass();
          if (!v25) {
            goto LABEL_43;
          }
          double v26 = v25;
          id v27 = [v25 path];
          if (v27)
          {
            id v28 = v27;
            self;
            uint64_t v29 = (void *)swift_dynamicCastObjCClass();
            if (v29 && (id v30 = [v29 path]) != 0)
            {
              id v31 = v30;
              if (([v28 isRectangular] & 1) != 0
                || [v28 isCircular])
              {
                if ([v31 isRectangular])
                {

LABEL_42:
                  [v16 headPoint];
                  [v18 convertNaturalPointToUnscaledCanvas:];
                  double v65 = v64;
                  double v67 = v66;
                  [v16 tailPoint];
                  [v18 convertNaturalPointToUnscaledCanvas:];
                  double v24 = v13 + v8 + v8 + sub_1000653B4(v65, v67, v68, v69);
                  goto LABEL_43;
                }
                unsigned __int8 v62 = [v31 isCircular];

                if (v62) {
                  goto LABEL_42;
                }
                goto LABEL_28;
              }
            }
            else
            {
              id v31 = v28;
            }
          }
LABEL_28:
          id v50 = [v26 pathSource];
          if (v50)
          {
            double v51 = v50;
            self;
            uint64_t v52 = swift_dynamicCastObjCClass();
            if (v52 && (uint64_t v53 = (void *)v52, self, (v54 = swift_dynamicCastObjCClass()) != 0))
            {
              double v55 = (void *)v54;
              id v56 = v51;
              id v57 = [v55 pathSource];
              if (v57)
              {
                uint64_t v58 = v57;
                self;
                uint64_t v59 = swift_dynamicCastObjCClass();
                if (v59)
                {
                  unsigned int v60 = (void *)v59;
                  id v61 = v58;
                  if ([v53 type])
                  {
                  }
                  else
                  {
                    id v63 = [v60 type];

                    if (!v63) {
                      goto LABEL_42;
                    }
                  }
                }
                else
                {
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }
LABEL_43:

          sub_100934114(v24, v8 + v8 + v13);
          return;
        }

        id v16 = v18;
      }
      else
      {
        id v20 = v18;
      }

      id v16 = v20;
    }

    return;
  }
  [v11 width];
  double v13 = v12;

  uint64_t v14 = sub_1009322B8();
  if (!v14) {
    goto LABEL_8;
  }
LABEL_3:
  id v15 = (void *)v14;
  type metadata accessor for CRLGroupItem();
  if (swift_dynamicCastClass())
  {
    type metadata accessor for CRLFreehandDrawingItem();
    if (!swift_dynamicCastClass())
    {
      id v32 = [v1 rep];
      [v32 boundsForStandardKnobs];
      CGFloat v34 = v33;
      CGFloat v36 = v35;
      CGFloat v38 = v37;
      CGFloat v40 = v39;

      v70.origin.x = v34;
      v70.origin.y = v36;
      v70.size.width = v38;
      v70.size.height = v40;
      CGRectGetWidth(v70);
      id v41 = [v1 rep];
      [v41 boundsForStandardKnobs];
      CGFloat v43 = v42;
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;

      v71.origin.x = v43;
      v71.origin.y = v45;
      v71.size.width = v47;
      v71.size.height = v49;
      CGRectGetHeight(v71);

      return;
    }
  }

  if (a1) {
    goto LABEL_9;
  }
}

uint64_t sub_10092ED60(void *a1, void *a2)
{
  double v3 = v2;
  type metadata accessor for CRLWPShapeItem();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
    id v9 = *(uint64_t (**)(uint64_t))(**(void **)(result + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                           + 288);
    uint64_t v10 = swift_retain();
    id v11 = (void *)v9(v10);
    swift_release();
    unsigned int v12 = [v11 widthValid];

    if (!v12
      || (double v13 = *(uint64_t (**)(uint64_t))(**(void **)(v7 + v8) + 288),
          uint64_t v14 = swift_retain(),
          id v15 = (void *)v13(v14),
          swift_release(),
          unsigned __int8 v16 = [v15 heightValid],
          v15,
          (v16 & 1) == 0))
    {
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        return result;
      }
      uint64_t v17 = result;
      uint64_t v18 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      id v19 = *(uint64_t (**)(uint64_t))(**(void **)(result
                                                            + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                              + 288);
      uint64_t v20 = swift_retain();
      id v21 = (void *)v19(v20);
      swift_release();
      unsigned int v22 = [v21 widthValid];

      if (!v22
        || (double v23 = *(uint64_t (**)(uint64_t))(**(void **)(v17 + v18) + 288),
            uint64_t v24 = swift_retain(),
            uint64_t v25 = (void *)v23(v24),
            swift_release(),
            unsigned __int8 v26 = [v25 heightValid],
            v25,
            (v26 & 1) == 0))
      {
        id v27 = [v3 icc];
        id v28 = [v27 layoutForInfo:a1];

        if (v28)
        {
          id v29 = [v3 icc];
          id v30 = [v29 layoutForInfo:a2];

          if (v30)
          {
            id v31 = [v28 pureGeometryInRoot];
            if (v31)
            {
              id v32 = v31;
              [v31 center];
              double v34 = v33;
              double v36 = v35;

              double v37 = sub_1009323F4();
              double v39 = sub_1000653B4(v34, v36, v37, v38);
              id v40 = [v3 knob];
              id v41 = [v40 tag];

              double v42 = 0.0;
              switch((unint64_t)v41)
              {
                case 2uLL:
                case 8uLL:
                  [v30 boundsForStandardKnobs];
                  double Height = CGRectGetHeight(v55);
                  goto LABEL_16;
                case 4uLL:
                case 6uLL:
                  [v30 boundsForStandardKnobs];
                  double Height = CGRectGetWidth(v56);
LABEL_16:
                  double v42 = Height * 0.5;
                  break;
                default:
                  break;
              }
              if ((v3[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters
                     + 8] & 1) == 0)
              {
                double v44 = v42
                    + *(double *)&v3[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters]
                    - v39;
                double v45 = sub_1009323F4();
                double v47 = sub_100064680(v45, v46, v34);
                double v49 = sub_100064660(v47, v48);
                double v51 = sub_1000646A4(v49, v50, v44);
                double v52 = sub_100064698(v34, v36, v51);
                double v54 = sub_10092F190(a1, a2, v52, v53);

                return *(void *)&v54;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            JUMPOUT(0x10092F174);
          }
        }
      }
    }
    return 0;
  }
  return result;
}

double sub_10092F190(void *a1, void *a2, double a3, double a4)
{
  double v5 = v4;
  type metadata accessor for CRLWPShapeItem();
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = a1;
    id v13 = [v5 icc];
    id v14 = [v13 layoutForInfo:v11];

    if (!v14)
    {
LABEL_21:

      return a3;
    }
    uint64_t v15 = swift_dynamicCastClass();
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = a2;
      id v18 = [v5 icc];
      id v19 = [v18 layoutForInfo:v17];

      if (v19)
      {
        uint64_t v20 = *(void **)(v16 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
        if (v20)
        {
          id v21 = v20;
          unsigned int v22 = (char *)[v21 paragraphStyleAtCharIndex:0 effectiveRange:0];
          if (v22)
          {
            uint64_t v23 = *(void *)&v22[OBJC_IVAR____TtC8Freeform19CRLWPParagraphStyle_alignment];

            id v24 = [v14 pureGeometryInRoot];
            if (!v24)
            {
              __break(1u);
              JUMPOUT(0x10092F65CLL);
            }
            uint64_t v25 = v24;
            [v24 center];
            double v27 = v26;

            double v28 = sub_1009323F4();
            double v30 = sub_100064680(v28, v29, v27);
            double v32 = sub_100064660(v30, v31);
            double v34 = v33;
            double v35 = *(uint64_t (**)(uint64_t))(**(void **)(v16
                                                                  + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                    + 288);
            id v36 = v17;
            uint64_t v37 = swift_retain();
            double v38 = (void *)v35(v37);

            swift_release();
            LOBYTE(v25) = [v38 widthValid];

            if ((v25 & 1) == 0)
            {
              [v19 boundsForStandardKnobs];
              double Width = CGRectGetWidth(v60);
              switch(v23)
              {
                case 3:
                  goto LABEL_36;
                case 1:
                  id v45 = [v5 knob];
                  id v46 = [v45 tag];

                  switch((unint64_t)v46)
                  {
                    case 2uLL:

                      double v47 = v32;
                      double v48 = v34;
                      int v49 = 1;
                      goto LABEL_29;
                    case 4uLL:
LABEL_23:

                      double v51 = Width * 0.5;
                      double v52 = v32;
                      double v53 = v34;
                      goto LABEL_27;
                    case 6uLL:
LABEL_24:

                      double v54 = Width * 0.5;
                      double v55 = v32;
                      double v56 = v34;
                      goto LABEL_30;
                    case 8uLL:

                      double v47 = v32;
                      double v48 = v34;
                      int v49 = 0;
LABEL_29:
                      double v55 = sub_100066394(v49, v47, v48);
                      double v54 = Width * 0.5;
LABEL_30:
                      double v59 = sub_1000646A4(v55, v56, v54);
                      double v58 = sub_100064698(a3, a4, v59);
                      break;
                    default:
                      goto LABEL_20;
                  }
                  return v58;
                case 0:
LABEL_36:
                  id v40 = [v5 knob];
                  id v41 = [v40 tag];

                  switch((unint64_t)v41)
                  {
                    case 2uLL:

                      double v42 = v32;
                      double v43 = v34;
                      int v44 = 1;
                      break;
                    case 4uLL:
                      goto LABEL_24;
                    case 6uLL:
                      goto LABEL_23;
                    case 8uLL:

                      double v42 = v32;
                      double v43 = v34;
                      int v44 = 0;
                      break;
                    default:
                      goto LABEL_20;
                  }
                  double v52 = sub_100066394(v44, v42, v43);
                  double v51 = Width * 0.5;
LABEL_27:
                  double v57 = sub_1000646A4(v52, v53, v51);
                  return sub_100064680(a3, a4, v57);
              }
            }
LABEL_20:

            goto LABEL_21;
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  return a3;
}

char *sub_10092F694(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for CRLWPShapeItem();
  uint64_t v4 = swift_dynamicCastClass();
  double v5 = (char *)v4;
  if (!v4) {
    return v5;
  }
  uint64_t v6 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v7 = *(uint64_t (**)(uint64_t))(**(void **)(v4 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                         + 288);
  uint64_t v8 = swift_retain();
  id v9 = (void *)v7(v8);
  swift_release();
  unsigned int v10 = [v9 widthValid];

  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)&v5[v6] + 288);
    uint64_t v12 = swift_retain();
    id v13 = (void *)v11(v12);
    swift_release();
    unsigned __int8 v14 = [v13 heightValid];

    if (v14) {
      return 0;
    }
  }
  id v15 = [v2 icc];
  id v16 = [v15 layoutForInfo:a1];

  if (!v16) {
    return 0;
  }
  uint64_t result = (char *)[v16 pureGeometryInRoot];
  if (result)
  {
    id v18 = result;
    id v19 = [objc_allocWithZone((Class)CRLCanvasInfoGeometry) initWithLayoutGeometry:result];

    [v19 mutableCopy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10050BF48(0, (unint64_t *)&qword_101677CC0);
    if (swift_dynamicCast())
    {
      double v5 = v21;
      uint64_t v20 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xE0))();
      [v21 setWidthValid:[v20 widthValid]];
      [v21 setHeightValid:[v20 heightValid]];
      [v20 size];
      [v21 setSize:];

      return v5;
    }

    return 0;
  }
  __break(1u);
  return result;
}

void sub_10092F968()
{
  uint64_t v1 = v0;
  id v2 = [v0 icc];
  id v3 = [v2 freehandDrawingToolkit];

  [v3 endDrawingModeIfNeeded];
  id v4 = [v1 rep];
  id v126 = [v4 getConnectionLineLayoutToCopyStyleForNewConnectionLine];

  id v5 = sub_10092B4E8();
  uint64_t v6 = (char *)sub_10092C58C((uint64_t)v5, v126);

  if (v6)
  {
    [v1 currentPosition];
    double v8 = v7;
    double v10 = v9;
    uint64_t v11 = NSNotFound.getter();
    if (v11 < 0)
    {
LABEL_93:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    id v125 = [self dragInsertionContextWithPreferredCenter:1 required:0 fromDragToInsertController:0 insertFloating:v11 targetZOrder:v8 v10];
    uint64_t v12 = sub_1009322B8();
    if (v12)
    {
      id v13 = (void *)v12;
      id v14 = [v1 icc];
      id v15 = [v14 canvasEditor];

      Class v123 = v13;
      if (!v15)
      {
        id v24 = 0;
        goto LABEL_18;
      }
      id v16 = [v1 icc];
      id v17 = [v16 editorController];

      if (!v17)
      {
        swift_unknownObjectRelease();
        id v24 = 0;
        goto LABEL_18;
      }
      id v18 = [v17 selectionPath];
      id v19 = [v15 canvasEditorHelper];
      sub_1005057FC((uint64_t *)&unk_101676C10);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_101177E70;
      *(void *)(inited + 32) = v6;
      *(void *)&v128.CGFloat a = inited;
      specialized Array._endMutation()();
      if (*(void *)&v128.a >> 62)
      {
        uint64_t v25 = v6;
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v26) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v21 = *(void *)((*(void *)&v128.a & 0xFFFFFFFFFFFFFF8) + 0x10);
        unsigned int v22 = v6;
        if (!v21)
        {
LABEL_17:
          swift_bridgeObjectRelease();
          type metadata accessor for CRLBoardItem(0);
          sub_1009340CC((unint64_t *)&qword_101676C20, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v28 = [v19 selectionPathForInsertingBoardItems:isa byReplacingInfosInSelectionPath:v18 preservingMultipleContainers:0];

          id v29 = [v15 selectionPathWithInfo:0];
          id v24 = [objc_allocWithZone((Class)CRLCanvasCommandSelectionBehavior) initWithForwardSelectionPath:v28 reverseSelectionPath:v29 selectionFlags:0 commitSelectionFlags:0 forwardSelectionFlags:70 reverseSelectionFlags:0];
          swift_unknownObjectRelease();

LABEL_18:
          id v30 = [v1 icc];
          id v31 = [v30 commandController];

          if (v31)
          {
            id v32 = v24;
            sub_10078F988(v24);
          }
          id v33 = [v1 icc];
          id v34 = [v33 commandController];

          if (v34)
          {
            id v35 = [self mainBundle];
            NSString v36 = String._bridgeToObjectiveC()();
            NSString v37 = String._bridgeToObjectiveC()();
            NSString v38 = String._bridgeToObjectiveC()();
            id v39 = [v35 localizedStringForKey:v36 value:v37 table:v38];

            uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            double v42 = v41;

            sub_10078F5CC(v40, v42);
          }
          id v43 = [v1 icc];
          int v44 = (char *)[v43 commandController];

          id v124 = v24;
          if (!v44)
          {
LABEL_50:
            id v56 = [v1 icc:v118, v119, v120];
            id v57 = [v56 canvasEditor];

            if (v57)
            {
              sub_1005057FC((uint64_t *)&unk_101676C10);
              uint64_t v58 = swift_allocObject();
              *(_OWORD *)(v58 + 16) = xmmword_101177E70;
              *(void *)(v58 + 32) = v6;
              *(void *)&v128.CGFloat a = v58;
              specialized Array._endMutation()();
              type metadata accessor for CRLBoardItem(0);
              double v59 = v6;
              Class v60 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v57 insertBoardItems:v60 withInsertionContext:v125 postProcessBlock:0];

              swift_unknownObjectRelease();
            }
            int v44 = **(char ***)&v6[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
            if (swift_conformsToProtocol2())
            {
              id v61 = (uint64_t (*)(uint64_t))*((void *)v44 + 88);
              uint64_t v62 = swift_retain();
              int v44 = (char *)v61(v62);
              swift_release();
              self;
              id v63 = (void *)swift_dynamicCastObjCClass();
              if (v63)
              {
                [v63 copy];

                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
                sub_10050BF48(0, (unint64_t *)&unk_10168A0E0);
                swift_dynamicCast();
                CGFloat a = v127.a;
                id v65 = [v1 icc];
                id v66 = [v65 layoutForInfo:v123];

                if (!v66)
                {
                  id v70 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
                  [*(id *)&v127.a setTailMagnet:v70];
                  goto LABEL_63;
                }
                id v67 = [v1 knob];
                double v68 = (char *)[v67 tag];

                if ((unint64_t)(v68 - 2) > 6) {
                  uint64_t v69 = 1;
                }
                else {
                  uint64_t v69 = qword_101198F58[(void)(v68 - 2)];
                }
                sub_100933C88((id)v69, v66);
                if ((v71 & 1) == 0) {
                  uint64_t v69 = 1;
                }
                [v66 getCardinalPositionFromType:v69];
                CGFloat v73 = v72;
                CGFloat v75 = v74;
                [v66 pureTransformInRoot];
                CGAffineTransformInvert(&v127, &v128);
                CGAffineTransform v128 = v127;
                v130.x = v73;
                v130.y = v75;
                CGPoint v76 = CGPointApplyAffineTransform(v130, &v128);
                id v77 = [v66 pureGeometry];
                if (v77)
                {
                  uint64_t v78 = v77;
                  [v77 size];

                  double v79 = sub_100064070();
                  double v82 = sub_100066AA4(v76.x, v76.y, v79, v80, v81);
                  id v70 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:v69 normalizedPosition:v82];
                  [*(id *)&a setTailMagnet:v70];

LABEL_63:
                  id v84 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetConnectionLineConnection());
                  v85 = v6;
                  id v122 = *(id *)&a;
                  v121 = v123;
                  v86 = sub_100BDEAB8(v85, v123, 0, *(void **)&a);
                  id v87 = [v1 icc];
                  id v88 = [v87 commandController];

                  if (v88)
                  {
                    sub_10078BED8(v86, 0, 0, 4, 0);
                  }
                  id v89 = [v1 icc];
                  [v89 layoutIfNeeded];

                  if (v126)
                  {
                    id v90 = [v1 icc];
                    id v91 = [v90 repForInfo:v85];

                    if (v91)
                    {
                      id v92 = [v91 layout];

                      if (v92)
                      {
                        self;
                        v93 = (void *)swift_dynamicCastObjCClass();
                        if (v93)
                        {
                          id v94 = [v93 commandForSettingConnectionType:[v126 connectionType]];
                          if (v94)
                          {
                            v95 = v94;
                            id v96 = [v1 icc];
                            id v97 = [v96 commandController];

                            if (v97)
                            {
                              sub_10078BED8(v95, 0, 0, 4, 0);
                            }
                            id v98 = [v1 icc];
                            [v98 layoutIfNeeded];

                            id v92 = v98;
                          }
                        }
                      }
                    }
                  }
                  id v99 = [v1 icc];
                  id v100 = [v99 repForInfo:v85];

                  if (v100)
                  {
                    id v101 = [v1 icc];
                    id v102 = [v101 canvasEditor];

                    if (!v102
                      || (id v103 = [v102 canvasEditorHelper],
                          swift_unknownObjectRelease(),
                          id v104 = objc_msgSend(v103, "selectionPathWithInfo:", objc_msgSend(v100, "info")), v103, swift_unknownObjectRelease(), !v104))
                    {

LABEL_88:
                      return;
                    }
                    id v105 = [v1 icc];
                    id v106 = [v105 editorController];

                    [v106 setSelectionPath:v104];
                    id v107 = [v100 knobForTag:11];
                    if (v107)
                    {
                      v108 = v107;
                      id v109 = [objc_allocWithZone((Class)CRLConnectionLineKnobTracker) initWithRep:v100 knob:v107];
                      uint64_t v110 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
                      v111 = *(void **)((char *)v1
                                      + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker);
                      *(void *)((char *)v1
                                + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker) = v109;

                      id v112 = *(id *)((char *)v1 + v110);
                      [v112 setSnapEnabled:[v112 snapEnabled]];

                      id v113 = *(void **)((char *)v1 + v110);
                      if (v113)
                      {
                        id v114 = v113;
                        [v114 setDidDrag:1];
                      }
                    }
                    id v115 = [v100 layout];
                    [v115 beginDynamicOperationWithRealTimeCommands:0];

                    id v116 = *(void **)((char *)v1
                                    + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker);
                    if (v116)
                    {
                      id v117 = v116;
                      [v117 beginMovingKnob];
                    }
                    else
                    {
                    }
                  }
                  else
                  {
                  }
                  goto LABEL_88;
                }
                goto LABEL_92;
              }
LABEL_91:

              __break(1u);
LABEL_92:
              __break(1u);
              goto LABEL_93;
            }
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
          unint64_t v45 = (unint64_t)&v44[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas];
          swift_beginAccess();
          unint64_t v46 = *(void *)v45;
          if (*(void *)v45 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
            if (v47)
            {
LABEL_25:
              unint64_t v48 = v47 - 1;
              if (!__OFSUB__(v47, 1))
              {
                if ((v46 & 0xC000000000000001) == 0)
                {
                  if ((v48 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                  }
                  else if (v48 < *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    uint64_t v47 = *(void *)(v46 + 8 * v48 + 32);
                    swift_retain();
LABEL_30:
                    swift_bridgeObjectRelease();
                    int v49 = *(unsigned __int8 *)(v47 + 16);
                    if (v49 == 3 || v49 == 2 || v49 == 1)
                    {

                      swift_release();
                      goto LABEL_50;
                    }
                    unint64_t v45 = *(void *)v45;
                    if (!(v45 >> 62))
                    {
                      uint64_t v50 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain_n();
                      if (v50)
                      {
LABEL_36:
                        if (v50 < 1)
                        {
                          __break(1u);
                          goto LABEL_90;
                        }
                        uint64_t v51 = 0;
                        do
                        {
                          if ((v45 & 0xC000000000000001) != 0)
                          {
                            uint64_t v52 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                          }
                          else
                          {
                            uint64_t v52 = *(void *)(v45 + 8 * v51 + 32);
                            swift_retain();
                          }
                          ++v51;
                          double v53 = *(id *)(v52 + 24);
                          sub_10078D41C(v53, 0);
                          swift_release();
                        }
                        while (v50 != v51);
                      }
LABEL_49:
                      swift_bridgeObjectRelease_n();
                      *(unsigned char *)(v47 + 16) = 1;

                      swift_release();
                      goto LABEL_50;
                    }
LABEL_48:
                    swift_bridgeObjectRetain_n();
                    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
                    if (v50) {
                      goto LABEL_36;
                    }
                    goto LABEL_49;
                  }
                  __break(1u);
                  goto LABEL_48;
                }
LABEL_45:
                uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                goto LABEL_30;
              }
LABEL_44:
              __break(1u);
              goto LABEL_45;
            }
          }
          else
          {
            uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v47) {
              goto LABEL_25;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v1 = _swiftEmptyArrayStorage;
          int v44 = "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.";
          uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift";
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.");
          LOBYTE(v120) = 2;
          sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680);
          SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v54, v55);
          uint64_t v119 = 0;
          uint64_t v118 = 348;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_44;
        }
      }
      sub_100508DCC(*(unint64_t *)&v128.a);
      goto LABEL_17;
    }

    uint64_t v23 = v125;
  }
  else
  {
    uint64_t v23 = v126;
  }
}

void sub_100930AE0(void *a1, unint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for CRLConnectionLineCRDTData(0);
  __chkstk_darwin(v6, v7);
  double v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v10 - 8, v11);
  id v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  id v17 = (char *)&v46 - v16;
  type metadata accessor for CRLGroupItem();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for CRLConnectionLineItem();
    uint64_t v29 = swift_dynamicCastClass();
    if (!v29) {
      return;
    }
    uint64_t v30 = v29;
    id v47 = a1;
    id v31 = [v3 icc];
    id v48 = [v31 layoutForInfo:v30];

    if (v48)
    {
      self;
      uint64_t v32 = swift_dynamicCastObjCClass();
      if (v32)
      {
        if (a2)
        {
          id v33 = (void *)v32;
          uint64_t v34 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
          uint64_t v35 = *(void *)(v30 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
          if (*(_UNKNOWN ****)v35 != &off_1016863C8) {
            uint64_t v35 = 0;
          }
          uint64_t v36 = v35 + *(void *)(*(void *)v35 + 752);
          swift_beginAccess();
          sub_1007A78AC(v36, (uint64_t)v9);
          sub_1005057FC(&qword_101680140);
          CRRegister.wrappedValue.getter();
          sub_1007A7910((uint64_t)v9);
          uint64_t v37 = *(void *)(v30 + v34);
          if (*(_UNKNOWN ****)v37 != &off_1016863C8) {
            uint64_t v37 = 0;
          }
          uint64_t v38 = v37 + *(void *)(*(void *)v37 + 752);
          swift_beginAccess();
          sub_1007A78AC(v38, (uint64_t)v9);
          CRRegister.wrappedValue.getter();
          uint64_t v39 = sub_1007A7910((uint64_t)v9);
          __chkstk_darwin(v39, v40);
          *(&v46 - 2) = (uint64_t)v17;
          id v41 = sub_100ED4F9C((uint64_t (*)(id *))sub_1009343CC, (uint64_t)(&v46 - 4), a2);
          [v33 setTemporaryConnectedFromInfo:v41];

          __chkstk_darwin(v42, v43);
          *(&v46 - 2) = (uint64_t)v13;
          int v44 = sub_100ED4F9C((uint64_t (*)(id *))sub_1009340AC, (uint64_t)(&v46 - 4), a2);
          [v33 setTemporaryConnectedToInfo:v44];

          sub_100522F00((uint64_t)v13, (uint64_t *)&unk_101674520);
          sub_100522F00((uint64_t)v17, (uint64_t *)&unk_101674520);
          return;
        }

        id v45 = v48;
        goto LABEL_29;
      }
    }
    id v45 = v47;
LABEL_29:

    return;
  }
  id v18 = a1;
  unint64_t v19 = (unint64_t)sub_1005430E4();
  unint64_t v20 = v19;
  if (v19 >> 62) {
    goto LABEL_34;
  }
  for (uint64_t i = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    id v48 = v18;
    uint64_t v22 = 4;
    while (1)
    {
      id v24 = (v20 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v20 + 8 * v22);
      uint64_t v25 = v24;
      id v18 = (id)(v22 - 3);
      if (__OFADD__(v22 - 4, 1)) {
        break;
      }
      uint64_t v26 = (char *)[v24 containingGroup];
      if (v26)
      {
        double v27 = v26;
        uint64_t v28 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems;
        uint64_t v23 = *(double **)&v26[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems];
        if (!v23)
        {
          sub_100846AB0();
          uint64_t v23 = *(double **)&v27[v28];
        }
        swift_bridgeObjectRetain();

        if (!v23) {
          uint64_t v23 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      sub_100930AE0(v25, v23);

      swift_bridgeObjectRelease();
      ++v22;
      if (v18 == (id)i)
      {

        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_34:
    ;
  }

LABEL_36:

  swift_bridgeObjectRelease();
}

uint64_t sub_10093104C(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1005057FC((uint64_t *)&unk_10168A0C0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v30 - v20;
  (*(void (**)(__n128))((swift_isaMask & **a1) + 0x88))(v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
  uint64_t v22 = (uint64_t)&v12[*(int *)(v9 + 56)];
  sub_1005107BC((uint64_t)v21, (uint64_t)v12);
  sub_1005107BC(a2, v22);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v12, 1, v4) == 1)
  {
    sub_100522F00((uint64_t)v21, (uint64_t *)&unk_101674520);
    int v24 = v23(v22, 1, v4);
    if (v24 == 1) {
      uint64_t v25 = (uint64_t *)&unk_101674520;
    }
    else {
      uint64_t v25 = (uint64_t *)&unk_10168A0C0;
    }
    if (v24 == 1) {
      char v26 = -1;
    }
    else {
      char v26 = 0;
    }
  }
  else
  {
    sub_1005107BC((uint64_t)v12, (uint64_t)v16);
    if (v23(v22, 1, v4) == 1)
    {
      sub_100522F00((uint64_t)v21, (uint64_t *)&unk_101674520);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
      char v26 = 0;
      uint64_t v25 = (uint64_t *)&unk_10168A0C0;
    }
    else
    {
      double v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v31, v22, v4);
      sub_1009340CC((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v27, v4);
      uint64_t v25 = (uint64_t *)&unk_101674520;
      sub_100522F00((uint64_t)v21, (uint64_t *)&unk_101674520);
      v28(v16, v4);
    }
  }
  sub_100522F00((uint64_t)v12, v25);
  return v26 & 1;
}

void sub_1009313F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v101 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v100 = (void *)type metadata accessor for DispatchTimeInterval();
  uint64_t v99 = *(v100 - 1);
  __chkstk_darwin(v100, v11);
  id v98 = (void *)((char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v103 = v13;
  uint64_t v104 = v14;
  __chkstk_darwin(v13, v15);
  id v97 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v19 = __chkstk_darwin(v17, v18).n128_u64[0];
  id v102 = (char *)&v90 - v20;
  BOOL v21 = 0;
  v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  uint64_t v22 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine;
  if (v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] == 1)
  {
    uint64_t v23 = v8;
    int v24 = v6;
    uint64_t v25 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
    char v26 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
    if (!v26)
    {
      BOOL v21 = 0;
LABEL_12:
      uint64_t v6 = v24;
      uint64_t v8 = v23;
      goto LABEL_13;
    }
    uint64_t v95 = v7;
    uint64_t v96 = v3;
    uint64_t v27 = v2;
    id v28 = [v26 rep:v19];
    id v29 = [v28 layout];

    if (v29)
    {
      self;
      uint64_t v30 = (void *)swift_dynamicCastObjCClass();
      if (v30)
      {
        id v31 = [v30 connectedTo];

        BOOL v21 = v31 != 0;
LABEL_9:
        uint64_t v2 = v27;
        uint64_t v32 = *(void **)&v1[v25];
        uint64_t v3 = v96;
        if (v32) {
          [v32 endMovingKnob];
        }
        uint64_t v7 = v95;
        goto LABEL_12;
      }
    }
    BOOL v21 = 0;
    goto LABEL_9;
  }
LABEL_13:
  id v33 = (objc_class *)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  v107.receiver = v1;
  v107.super_class = v33;
  [super endMovingKnob];
  if (v1[v22] != 1) {
    goto LABEL_40;
  }
  uint64_t v34 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
  uint64_t v35 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
  if (v35)
  {
    id v36 = [v35 rep];
    uint64_t v96 = v3;
    id v37 = v36;
    id v38 = [v36 layout];

    if (v38)
    {
      self;
      uint64_t v39 = (void *)swift_dynamicCastObjCClass();
      if (!v39)
      {

        return;
      }
      uint64_t v94 = v2;
      [v39 endDynamicOperation];
      id v40 = [v1 icc];
      id v41 = [v40 commandController];

      if (v41)
      {
        sub_10078FB90(0);
      }
      if (!v21)
      {
        id v42 = [v1 icc];
        id v43 = [v42 editorController];

        if (v43)
        {
          if (sub_10050BF48(0, (unint64_t *)&unk_1016951D0)) {
            ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
          }
          else {
            ObjCClassFromMetadatCGFloat a = 0;
          }
          [v43 mostSpecificCurrentEditorOfClass:ObjCClassFromMetadata];
          self;
          uint64_t v45 = swift_dynamicCastObjCClass();
          if (v45)
          {
            uint64_t v46 = v45;

            id v47 = *(void **)&v1[v34];
            if (v47)
            {
              id v48 = [v47 rep];
              id v49 = [v48 layout];

              if (v49)
              {
                self;
                uint64_t v50 = (void *)swift_dynamicCastObjCClass();
                if (v50)
                {
                  uint64_t v51 = v50;
                  [v50 unclippedHeadPoint];
                  CGFloat v53 = v52;
                  CGFloat v55 = v54;
                  id v56 = [v51 pureGeometryInRoot];
                  if (!v56)
                  {
                    __break(1u);
                    return;
                  }
                  id v57 = v56;
                  id v93 = v38;
                  uint64_t v95 = v7;
                  [v56 transform];
                  long long v92 = *(_OWORD *)&aBlock.a;
                  long long v91 = *(_OWORD *)&aBlock.c;
                  long long v90 = *(_OWORD *)&aBlock.tx;

                  *(_OWORD *)&aBlock.CGFloat a = v92;
                  *(_OWORD *)&aBlock.c = v91;
                  *(_OWORD *)&aBlock.tx = v90;
                  v108.x = v53;
                  v108.y = v55;
                  CGPoint v58 = CGPointApplyAffineTransform(v108, &aBlock);

                  id v59 = [v1 icc];
                  [v59 visibleBoundsRectUsingSizeOfEnclosingScrollView];
                  double v61 = v60;
                  double v63 = v62;

                  double v64 = v61 * 0.5;
                  if (qword_10166F558 != -1) {
                    swift_once();
                  }
                  if (*(double *)&xmmword_10171B060 < v64) {
                    double v64 = *(double *)&xmmword_10171B060;
                  }
                  if (*((double *)&xmmword_10171B060 + 1) >= v63 * 0.5) {
                    double v65 = v63 * 0.5;
                  }
                  else {
                    double v65 = *((double *)&xmmword_10171B060 + 1);
                  }
                  id v66 = [v1 icc];
                  [v66 viewScale];
                  double v68 = v67;

                  double v69 = sub_1000646A4(v64, v65, 1.0 / v68);
                  double v71 = sub_100065A10(0.0, 0.0, v69, v70, v58.x, v58.y, 0.0, 0.0);
                  double v73 = v72;
                  double v75 = v74;
                  double v77 = v76;
                  id v78 = [v1 icc];
                  [v78 scrollRectToVisible:0 scrollOptions:v71, v73, v75, v77];

                  sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
                  *(void *)&long long v92 = static OS_dispatch_queue.main.getter();
                  double v79 = v97;
                  static DispatchTime.now()();
                  double v80 = v98;
                  void *v98 = 50;
                  uint64_t v81 = v99;
                  double v82 = v100;
                  (*(void (**)(void *, void, void *))(v99 + 104))(v80, enum case for DispatchTimeInterval.milliseconds(_:), v100);
                  + infix(_:_:)();
                  (*(void (**)(void *, void *))(v81 + 8))(v80, v82);
                  double v83 = *(void **)(v104 + 8);
                  v104 += 8;
                  id v100 = v83;
                  ((void (*)(char *, uint64_t))v83)(v79, v103);
                  uint64_t v84 = swift_allocObject();
                  *(CGPoint *)(v84 + 16) = v58;
                  *(void *)(v84 + 32) = v46;
                  *(void *)&aBlock.tx = sub_10093428C;
                  *(void *)&aBlock.ty = v84;
                  *(void *)&aBlock.CGFloat a = _NSConcreteStackBlock;
                  aBlock.b = *(CGFloat *)"";
                  *(void *)&aBlock.c = sub_100679958;
                  *(void *)&aBlock.d = &unk_10151B078;
                  v85 = _Block_copy(&aBlock);
                  swift_unknownObjectRetain();
                  v86 = v101;
                  static DispatchQoS.unspecified.getter();
                  id v105 = _swiftEmptyArrayStorage;
                  sub_1009340CC((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_1005057FC((uint64_t *)&unk_1016725D0);
                  sub_10056B494();
                  uint64_t v87 = v94;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  id v88 = v102;
                  id v89 = (void *)v92;
                  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
                  _Block_release(v85);

                  swift_unknownObjectRelease();
                  (*(void (**)(char *, uint64_t))(v96 + 8))(v6, v87);
                  (*(void (**)(char *, uint64_t))(v8 + 8))(v86, v95);
                  ((void (*)(char *, uint64_t))v100)(v88, v103);
                  swift_release();
                  goto LABEL_40;
                }
              }
            }

            swift_unknownObjectRelease();
LABEL_40:
            if (v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] == 1) {
              sub_1009325B4();
            }
            return;
          }
          swift_unknownObjectRelease();
        }
      }

      goto LABEL_40;
    }
  }
}

void sub_100931E34(void *a1, double a2, double a3)
{
  id v5 = a1;
  uint64_t v12 = sub_100B9D5FC(v5, v5, a2, a3);

  if (!v12) {
    return;
  }
  id v6 = [v5 interactiveCanvasController];
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  id v8 = [v6 layerHost];
  if (!v8)
  {

LABEL_8:
    uint64_t v10 = v12;
    goto LABEL_9;
  }
  uint64_t v9 = v8;
  if ([v8 respondsToSelector:"asiOSCVC"])
  {
    id v11 = [v9 asiOSCVC];
    swift_unknownObjectRelease();
    [v11 presentViewController:v12 animated:1 completion:0];

    uint64_t v10 = (char *)v11;
LABEL_9:

    return;
  }

  swift_unknownObjectRelease();
}

id sub_100931FE8(double a1, double a2)
{
  id v5 = [v2 rep];
  id v6 = [v2 knob];
  [v6 position];
  double v8 = v7;
  double v10 = v9;

  [v5 convertNaturalPointToUnscaledCanvas:v8, v10];
  double v12 = v11;
  double v14 = v13;

  if (sub_1000643CC(v12, v14, a1, a2) > 100.0)
  {
    uint64_t v15 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine;
    if ((v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] & 1) == 0)
    {
      v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
      id v16 = [v2 icc];
      type metadata accessor for CRLBoardItem(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v16 setTemporaryAdditionalBoardItemsToDisplay:isa];

      uint64_t v18 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine;
      double v19 = *(void **)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine];
      if (v19)
      {
        id v20 = v19;
        id v21 = [v2 icc];
        id v22 = [v21 layoutForInfo:v20];

        if (v22)
        {
          self;
          uint64_t v23 = (void *)swift_dynamicCastObjCClass();
          if (v23)
          {
            int v24 = v23;
            [v23 setTemporaryConnectedToInfo:0];
            [v24 setTemporaryConnectedFromInfo:0];
            uint64_t v25 = v20;
            id v20 = v22;
          }
          else
          {
            uint64_t v25 = v22;
          }
        }
      }
      v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
      char v26 = *(void **)&v2[v18];
      *(void *)&v2[v18] = 0;

      sub_10092F968();
      v2[v15] = 1;
    }
    uint64_t v27 = *(void **)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
    if (v27) {
      [v27 moveKnobToCanvasPosition:a1, a2];
    }
  }
  v29.receiver = v2;
  v29.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return [super moveKnobToCanvasPosition:a1 a2];
}

uint64_t sub_1009322B8()
{
  id v1 = [v0 icc];
  sub_1005057FC((uint64_t *)&unk_101676C10);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101177E70;
  *(void *)(inited + 32) = [v0 rep];
  specialized Array._endMutation()();
  unint64_t v3 = inited;
  if (inited >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    id v5 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_100509DA0(v3);
  id v5 = v4;
LABEL_6:
  swift_bridgeObjectRelease();
  double v7 = sub_10092B0E0((uint64_t)v5);
  uint64_t v8 = sub_100CDCE0C((unint64_t)v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100999830(v8);
  swift_bridgeObjectRelease();
  return v9;
}

double sub_1009323F4()
{
  id v1 = v0;
  uint64_t v2 = (double *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  if ((v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate
         + 16] & 1) != 0)
  {
    id v3 = [v0 rep];
    id v4 = [v1 knob];
    [v4 position];
    double v6 = v5;
    double v8 = v7;

    [v3 convertNaturalPointToUnscaledCanvas:v6, v8];
    double v10 = v9;
    double v12 = v11;
  }
  else
  {
    double v10 = *v2;
    double v12 = v2[1];
  }
  id v13 = [v1 knob];
  type metadata accessor for CRLConnectionLineKnob();
  if (swift_dynamicCastClass())
  {
    double v14 = sub_100BCDF5C();
    id v15 = [v1 icc];
    id v16 = [v15 canvas];

    [v16 viewScale];
    double v18 = v17;

    double v19 = v14 / v18;
    sub_10092B650();
    double v21 = v20;

    double v22 = sub_100064680(v10, v12, v21);
    double v24 = sub_100064660(v22, v23);
    double v26 = sub_1000646A4(v24, v25, v19);
    return sub_100064680(v10, v12, v26);
  }
  else
  {
  }
  return v10;
}

void sub_1009325B4()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v5 = __chkstk_darwin(v2, v4).n128_u64[0];
  double v7 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v0 icc:v5];
  id v9 = [v8 temporaryAdditionalBoardItemsToDisplay];

  if (v9)
  {

    id v10 = [v1 icc];
    type metadata accessor for CRLBoardItem(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v10 setTemporaryAdditionalBoardItemsToDisplay:isa];
  }
  id v12 = [v1 icc];
  id v13 = [v12 canvasEditor];

  if (!v13) {
    goto LABEL_80;
  }
  double v14 = sub_10092C068();
  if (!v14)
  {
    swift_unknownObjectRelease();
LABEL_80:
    *((unsigned char *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview) = 0;
    v154 = *(void **)((char *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine);
    *(double *)((char *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine) = 0.0;

    return;
  }
  double v17 = v15;
  double v18 = v16;

  double v19 = **(char ***)&v18[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  if (!swift_conformsToProtocol2())
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v156 = v7;
  uint64_t v157 = v3;
  uint64_t v158 = v2;
  id v166 = v13;
  double v20 = (uint64_t (*)(uint64_t))*((void *)v19 + 88);
  uint64_t v21 = swift_retain();
  double v19 = (char *)v20(v21);
  swift_release();
  self;
  double v22 = (void *)swift_dynamicCastObjCClass();
  if (!v22)
  {
LABEL_84:

    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  [v22 copy];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10050BF48(0, (unint64_t *)&unk_10168A0E0);
  swift_dynamicCast();
  CGFloat a = v167.a;
  id v24 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
  [*(id *)&a setHeadMagnet:v24];

  uint64_t v25 = sub_1009322B8();
  v160 = v17;
  if (!v25) {
    goto LABEL_13;
  }
  double v26 = (void *)v25;
  id v27 = [v1 icc];
  id v28 = [v27 layoutForInfo:v26];

  if (!v28)
  {

    double v17 = v160;
LABEL_13:
    id v32 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:1 normalizedPosition:0.5, 0.5];
    [*(id *)&a setTailMagnet:v32];
    goto LABEL_19;
  }
  id v29 = [v1 knob];
  uint64_t v30 = (char *)[v29 tag];

  if ((unint64_t)(v30 - 2) >= 7) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = qword_101198F58[(void)(v30 - 2)];
  }
  sub_100933C88((id)v31, v28);
  if ((v33 & 1) == 0) {
    uint64_t v31 = 1;
  }
  [v28 getCardinalPositionFromType:v31];
  CGFloat v35 = v34;
  CGFloat v37 = v36;
  [v28 pureTransformInRoot];
  CGAffineTransformInvert(&v167, &aBlock);
  CGAffineTransform aBlock = v167;
  v169.x = v35;
  v169.y = v37;
  CGPoint v38 = CGPointApplyAffineTransform(v169, &aBlock);
  id v39 = [v28 pureGeometry];
  if (!v39) {
    goto LABEL_85;
  }
  id v40 = v39;
  [v39 size];

  double v41 = sub_100064070();
  double v44 = sub_100066AA4(v38.x, v38.y, v41, v42, v43);
  id v32 = [objc_allocWithZone((Class)CRLConnectionLineMagnet) initWithType:v31 normalizedPosition:v44];
  [*(id *)&a setTailMagnet:v32];

  double v17 = v160;
LABEL_19:

  uint64_t v46 = v18;
  id v47 = *(id *)&a;
  sub_100A9AF5C((uint64_t)v47);

  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_10117DF50;
  *(void *)(v48 + 32) = v17;
  *(void *)(v48 + 40) = v46;
  *(void *)&aBlock.CGFloat a = v48;
  specialized Array._endMutation()();
  CGFloat v161 = aBlock.a;
  id v49 = *(uint64_t (**)(void))((swift_isaMask & *v17) + 0xE0);
  uint64_t v50 = v46;
  uint64_t v51 = v17;
  double v52 = (void *)v49();
  [v52 center];
  double v54 = v53;
  double v56 = v55;

  uint64_t v57 = NSNotFound.getter();
  CGPoint v58 = v166;
  id v59 = &selRef_i_join;
  if ((v57 & 0x8000000000000000) == 0)
  {
    double v60 = [self dragInsertionContextWithPreferredCenter:1 required:0 fromDragToInsertController:0 insertFloating:v57 targetZOrder:v54];
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101177E70;
    *(void *)(inited + 32) = v51;
    *(void *)&aBlock.CGFloat a = inited;
    specialized Array._endMutation()();
    unint64_t v62 = *(void *)&aBlock.a;
    id v165 = v51;
    if (*(void *)&aBlock.a >> 62)
    {
      uint64_t v84 = v51;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v63 = *(void *)((*(void *)&aBlock.a & 0xFFFFFFFFFFFFFF8) + 0x10);
      double v64 = v51;
      swift_unknownObjectRetain();
    }
    id v163 = v47;
    v162 = v50;
    if (v63) {
      sub_100508DCC(v62);
    }
    swift_bridgeObjectRelease();
    id v65 = objc_allocWithZone((Class)CRLCanvasCommandSelectionBehavior);
    type metadata accessor for CRLBoardItem(0);
    sub_1009340CC((unint64_t *)&qword_101676C20, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
    Class v66 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v67 = [v65 initWithCanvasEditor:v58 type:0 constructedInfos:v66];

    swift_unknownObjectRelease();
    id v68 = [v1 icc];
    double v69 = (char *)[v68 editingCoordinator];

    if (v69)
    {
      id v70 = *(id *)&v69[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

      id v71 = v67;
      sub_10078F988(v67);
    }
    id v72 = [v1 icc];
    double v73 = (char *)[v72 editingCoordinator];

    v164 = v60;
    if (!v73)
    {
LABEL_56:
      Class v87 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v58 insertBoardItems:v87 withInsertionContext:v60 postProcessBlock:0];

      uint64_t v88 = sub_1009322B8();
      if (!v88) {
        goto LABEL_72;
      }
      id v89 = (char *)v88;
      type metadata accessor for CRLWPShapeItem();
      uint64_t v90 = swift_dynamicCastClass();
      if (v90)
      {
        long long v91 = (char *)v90;
        uint64_t v92 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
        id v93 = *(uint64_t (**)(uint64_t))(**(void **)(v90
                                                              + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                + 288);
        uint64_t v94 = swift_retain();
        uint64_t v95 = (void *)v93(v94);
        swift_release();
        unsigned int v96 = [v95 widthValid];

        if (v96)
        {
          id v97 = *(uint64_t (**)(uint64_t))(**(void **)&v91[v92] + 288);
          uint64_t v98 = swift_retain();
          uint64_t v99 = (void *)v97(v98);
          swift_release();
          unsigned __int8 v100 = [v99 heightValid];

          id v101 = v89;
          if (v100) {
            goto LABEL_71;
          }
        }
        id v102 = v165;
        uint64_t v103 = swift_dynamicCastClass();
        if (v103)
        {
          uint64_t v104 = (char *)v103;
          id v159 = v67;
          uint64_t v105 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
          id v106 = *(uint64_t (**)(uint64_t))(**(void **)(v103
                                                                 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                   + 288);
          id v101 = (char *)v102;
          uint64_t v107 = swift_retain();
          CGPoint v108 = (void *)v106(v107);
          swift_release();
          unsigned int v109 = [v108 widthValid];

          if (v109)
          {
            uint64_t v110 = *(uint64_t (**)(uint64_t))(**(void **)&v104[v105] + 288);
            uint64_t v111 = swift_retain();
            id v112 = (void *)v110(v111);
            swift_release();
            unsigned __int8 v113 = [v112 heightValid];

            if (v113) {
              goto LABEL_69;
            }
          }
          id v114 = [v1 icc];
          [v114 layoutIfNeeded];

          *(double *)&uint64_t v115 = COERCE_DOUBLE(sub_10092ED60(v91, v104));
          if (v117)
          {
LABEL_69:
            CGAffineTransform v127 = v89;
            id v67 = v159;
          }
          else
          {
            double v118 = *(double *)&v115;
            double v119 = v116;
            uint64_t v120 = sub_10092F694(v101);
            id v67 = v159;
            if (v120)
            {
              v121 = v120;
              [v120 setCenter:v118, v119];
              id v122 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetInfoGeometry());
              Class v123 = *(void (**)(void))((swift_isaMask & *(void *)v101) + 0x88);
              id v124 = v101;
              id v101 = v121;
              id v125 = v156;
              v123();
              Class v126 = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v157 + 8))(v125, v158);
              CGAffineTransform v127 = (char *)[v122 initWithId:v126 geometry:v101];

              id v128 = [v1 icc];
              id v129 = (char *)[v128 editingCoordinator];

              if (v129)
              {
                id v130 = *(id *)&v129[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

                sub_10078BED8(v127, 0, 0, 4, 0);
              }
            }
            else
            {
              CGAffineTransform v127 = v89;
            }
          }

          goto LABEL_71;
        }
      }
      id v101 = v89;
LABEL_71:

      id v59 = &selRef_i_join;
      double v60 = v164;
LABEL_72:
      id v131 = [v1 v59[110]];
      v132 = (char *)[v131 editingCoordinator];

      v133 = v163;
      if (v132)
      {
        id v134 = *(id *)&v132[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

        id v135 = v67;
        sub_10078FB90((char *)v67);
      }
      id v136 = [v1 v59[110]];
      [v136 layoutIfNeeded];

      id v137 = [v1 v59[110]];
      uint64_t v138 = v162;
      id v139 = [v137 layoutForInfo:v162];

      if (v139)
      {
        self;
        uint64_t v140 = swift_dynamicCastObjCClass();
        if (v140)
        {
          uint64_t v141 = v140;
          uint64_t v142 = type metadata accessor for CRLInsertionAnimationHelper();
          id v159 = v67;
          uint64_t v143 = v142;
          id v144 = [v1 v59[110]];
          v145 = v138;
          id v146 = v144;
          id v147 = [v144 canvas];
          v148 = (void *)swift_allocObject();
          v148[2] = v141;
          v148[3] = v146;
          id v149 = v165;
          v148[4] = v165;
          v148[5] = v143;
          *(void *)&aBlock.tx = sub_10086122C;
          *(void *)&aBlock.ty = v148;
          *(void *)&aBlock.CGFloat a = _NSConcreteStackBlock;
          aBlock.b = *(CGFloat *)"";
          *(void *)&aBlock.c = sub_100679958;
          *(void *)&aBlock.d = &unk_10151B000;
          v150 = _Block_copy(&aBlock);
          id v151 = v149;
          id v152 = v139;
          id v153 = v146;
          swift_release();
          [v147 afterLayoutIncludingLayers:1 performBlock:v150];
          _Block_release(v150);

          swift_unknownObjectRelease();
          goto LABEL_80;
        }
      }
      else
      {
      }
      swift_unknownObjectRelease();

      goto LABEL_80;
    }
    double v74 = v58;
    double v19 = (char *)*(id *)&v73[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

    unint64_t v75 = (unint64_t)&v19[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas];
    swift_beginAccess();
    unint64_t v76 = *(void *)v75;
    if (*(void *)v75 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
      if (v77)
      {
LABEL_29:
        unint64_t v78 = v77 - 1;
        if (!__OFSUB__(v77, 1))
        {
          if ((v76 & 0xC000000000000001) == 0)
          {
            if ((v78 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v78 < *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              uint64_t v77 = *(void *)(v76 + 8 * v78 + 32);
              swift_retain();
              goto LABEL_34;
            }
            __break(1u);
            goto LABEL_54;
          }
LABEL_51:
          uint64_t v77 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_34:
          swift_bridgeObjectRelease();
          int v79 = *(unsigned __int8 *)(v77 + 16);
          if (v79 == 3)
          {

            swift_release();
            CGPoint v58 = v74;
            goto LABEL_56;
          }
          CGPoint v58 = v74;
          if (v79 == 2 || v79 == 1)
          {

            swift_release();
            goto LABEL_56;
          }
          unint64_t v75 = *(void *)v75;
          id v159 = v67;
          if (!(v75 >> 62))
          {
            uint64_t v80 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (v80)
            {
LABEL_41:
              if (v80 >= 1)
              {
                uint64_t v81 = 0;
                do
                {
                  if ((v75 & 0xC000000000000001) != 0)
                  {
                    uint64_t v82 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    uint64_t v82 = *(void *)(v75 + 8 * v81 + 32);
                    swift_retain();
                  }
                  ++v81;
                  double v83 = *(id *)(v82 + 24);
                  sub_10078D41C(v83, 0);
                  swift_release();
                }
                while (v80 != v81);
                goto LABEL_55;
              }
              __break(1u);
              goto LABEL_83;
            }
LABEL_55:
            swift_bridgeObjectRelease_n();
            *(unsigned char *)(v77 + 16) = 1;

            swift_release();
            CGPoint v58 = v166;
            id v59 = &selRef_i_join;
            double v60 = v164;
            id v67 = v159;
            goto LABEL_56;
          }
LABEL_54:
          swift_bridgeObjectRetain_n();
          uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
          if (v80) {
            goto LABEL_41;
          }
          goto LABEL_55;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v77 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v77) {
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    id v1 = _swiftEmptyArrayStorage;
    unint64_t v75 = 2;
    double v19 = "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.";
    double v60 = "enableProgressiveEnqueuingInCurrentGroup()";
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v85, v86);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_50;
  }
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10093389C(double a1, double a2)
{
  uint64_t v3 = (double *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *uint64_t v3 = a1;
  v3[1] = a2;
  *((unsigned char *)v3 + 16) = 0;
  sub_1009325B4();
  uint64_t v4 = sub_1009322B8();
  if (v4)
  {
    double v5 = (void *)v4;
    id v6 = [v2 icc];
    id v7 = [v6 repForInfo:v5];

    if (v7)
    {
      type metadata accessor for CRLWPStickyNoteRep();
      id v8 = (void *)swift_dynamicCastClass();
      if (v8)
      {
        [v8 becameSelected];
        id v9 = v5;
      }
      else
      {
        id v9 = v7;
        id v7 = v5;
      }
    }
    else
    {
      id v7 = v5;
    }
  }
  *uint64_t v3 = 0.0;
  v3[1] = 0.0;
  *((unsigned char *)v3 + 16) = 1;
}

id sub_100933AA8()
{
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker__snapEnabled] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = 0;
  id v1 = &v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(void *)id v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine] = 0x403E000000000000;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return [super init];
}

id sub_100933B84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLShapeConnectionLineKnobTracker()
{
  return self;
}

uint64_t sub_100933C28()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100933C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100933C80()
{
  return swift_release();
}

void sub_100933C88(id a1, id a2)
{
  id v3 = [a2 connectedLayouts];
  if (v3)
  {
    objc_super v4 = v3;
    sub_10050BF48(0, (unint64_t *)&qword_101680130);
    sub_10058EF24(&qword_101680138, (unint64_t *)&qword_101680130);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v5 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v5 = v33;
      uint64_t v31 = v34;
      uint64_t v6 = v35;
      uint64_t v7 = v36;
      unint64_t v8 = v37;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
      uint64_t v31 = v5 + 56;
      uint64_t v6 = ~v9;
      uint64_t v10 = -v9;
      if (v10 < 64) {
        uint64_t v11 = ~(-1 << v10);
      }
      else {
        uint64_t v11 = -1;
      }
      unint64_t v8 = v11 & *(void *)(v5 + 56);
    }
    BOOL v12 = 0;
    int64_t v30 = (unint64_t)(v6 + 64) >> 6;
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    if (__CocoaSet.Iterator.next()())
    {
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v13 = v32;
      swift_unknownObjectRelease();
      uint64_t v14 = v7;
      uint64_t v15 = v8;
      if (v32)
      {
        do
        {
          if (v12)
          {

            BOOL v12 = 1;
            uint64_t v7 = v14;
            unint64_t v8 = v15;
            if (v5 < 0) {
              goto LABEL_12;
            }
          }
          else
          {
            id v20 = [v13 connectedTo];
            if (!v20) {
              goto LABEL_37;
            }
            uint64_t v21 = v20;
            sub_10050BF48(0, (unint64_t *)&qword_101690720);
            id v22 = a2;
            id v23 = v21;
            LOBYTE(v21) = static NSObject.== infix(_:_:)();

            if ((v21 & 1) == 0) {
              goto LABEL_37;
            }
            if ([v13 headMagnetType] == a1)
            {

              BOOL v12 = 1;
            }
            else
            {
LABEL_37:
              id v24 = [v13 connectedFrom];
              if (!v24) {
                goto LABEL_40;
              }
              uint64_t v25 = v24;
              sub_10050BF48(0, (unint64_t *)&qword_101690720);
              id v26 = a2;
              id v27 = v25;
              LOBYTE(v25) = static NSObject.== infix(_:_:)();

              if (v25)
              {
                id v28 = [v13 tailMagnetType];

                BOOL v12 = v28 == a1;
              }
              else
              {
LABEL_40:

                BOOL v12 = 0;
              }
            }
            uint64_t v7 = v14;
            unint64_t v8 = v15;
            if (v5 < 0) {
              goto LABEL_12;
            }
          }
LABEL_15:
          if (v8)
          {
            uint64_t v15 = (v8 - 1) & v8;
            unint64_t v16 = __clz(__rbit64(v8)) | (v7 << 6);
            uint64_t v14 = v7;
          }
          else
          {
            int64_t v17 = v7 + 1;
            if (__OFADD__(v7, 1))
            {
              __break(1u);
              return;
            }
            if (v17 >= v30) {
              break;
            }
            unint64_t v18 = *(void *)(v31 + 8 * v17);
            uint64_t v14 = v7 + 1;
            if (!v18)
            {
              uint64_t v14 = v7 + 2;
              if (v7 + 2 >= v30) {
                break;
              }
              unint64_t v18 = *(void *)(v31 + 8 * v14);
              if (!v18)
              {
                uint64_t v14 = v7 + 3;
                if (v7 + 3 >= v30) {
                  break;
                }
                unint64_t v18 = *(void *)(v31 + 8 * v14);
                if (!v18)
                {
                  uint64_t v14 = v7 + 4;
                  if (v7 + 4 >= v30) {
                    break;
                  }
                  unint64_t v18 = *(void *)(v31 + 8 * v14);
                  if (!v18)
                  {
                    uint64_t v19 = v7 + 5;
                    while (v30 != v19)
                    {
                      unint64_t v18 = *(void *)(v31 + 8 * v19++);
                      if (v18)
                      {
                        uint64_t v14 = v19 - 1;
                        goto LABEL_30;
                      }
                    }
                    break;
                  }
                }
              }
            }
LABEL_30:
            uint64_t v15 = (v18 - 1) & v18;
            unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
          }
          id v13 = *(id *)(*(void *)(v5 + 48) + 8 * v16);
        }
        while (v13);
      }
    }
    sub_10052E1EC();
  }
}

uint64_t sub_1009340AC(void **a1)
{
  return sub_10093104C(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1009340CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100934114(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 0.00999999978 || a1 == a2;
}

uint64_t sub_100934134()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100934174(uint64_t a1)
{
  sub_10092CD98(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_10093417C(uint64_t a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker__snapEnabled] = 1;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = 0;
  uint64_t v5 = &v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine] = 0x403E000000000000;
  uint64_t v6 = &v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return [super initWithRep:a1 knob:a2];
}

uint64_t sub_100934254()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10093428C()
{
  sub_100931E34(*(void **)(v0 + 32), *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100934298()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009342D0()
{
  return sub_10092BC04(*(void **)(v0 + 16));
}

uint64_t sub_1009342D8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100934318(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100528488;
  return sub_10092BD1C(a1, v4, v5, v6);
}

uint64_t sub_1009343CC(void **a1)
{
  return sub_1009340AC(a1) & 1;
}

Class sub_10093450C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5)
{
  id v7 = a1;
  uint64_t v8 = swift_bridgeObjectRetain();
  a4(v8);

  swift_bridgeObjectRelease();
  sub_1005057FC(a5);
  v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v9.super.isa;
}

uint64_t sub_10093459C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  sub_100557A70(a1, (uint64_t)v29);
  if (!v30)
  {
    sub_10052E2B0((uint64_t)v29);
    goto LABEL_25;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_25:
    unsigned __int8 v25 = 0;
    return v25 & 1;
  }
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_declaredVariables);
  uint64_t v5 = *(void *)&v28[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_declaredVariables];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = sub_100A3E2D0(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v7 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions;
  unint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions);
  if (!(v8 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v9 = v8;
LABEL_6:
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_1005057FC((uint64_t *)&unk_101674770);
  unint64_t v9 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v9 >> 62)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRelease();
  uint64_t v11 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions;
  unint64_t v12 = *(void *)&v28[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions];
  if (!(v12 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v13 = v12;
LABEL_9:
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  sub_1005057FC((uint64_t *)&unk_101674770);
  unint64_t v13 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v13 >> 62)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v10 != v14) {
    goto LABEL_24;
  }
  uint64_t v15 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults;
  unint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v18 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults;
  unint64_t v19 = *(void *)&v28[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults];
  if (!(v19 >> 62))
  {
    if (v17 == *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
LABEL_24:

    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 != v26) {
    goto LABEL_24;
  }
LABEL_15:
  unint64_t v20 = *(void *)(v2 + v7);
  uint64_t v21 = *(void *)&v28[v11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v22 = sub_1005BF06C(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v2 + v15);
  uint64_t v24 = *(void *)&v28[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v25 = sub_1005BF084(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v25 & 1;
}

uint64_t type metadata accessor for CRLCalculateDocumentProvider()
{
  return self;
}

BOOL sub_100934ABC(uint64_t a1)
{
  swift_getObjectType();
  sub_100557A70(a1, (uint64_t)v8);
  if (v9)
  {
    if (swift_dynamicCast())
    {
      BOOL v3 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expression) == *(void *)&v7[OBJC_IVAR____TtC8Freeform14MathExpression_expression]
        && *(void *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expression + 8) == *(void *)&v7[OBJC_IVAR____TtC8Freeform14MathExpression_expression + 8];
      if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expressionType);
        uint64_t v5 = *(void *)&v7[OBJC_IVAR____TtC8Freeform14MathExpression_expressionType];

        return v4 == v5;
      }
    }
  }
  else
  {
    sub_10052E2B0((uint64_t)v8);
  }
  return 0;
}

uint64_t type metadata accessor for MathExpression()
{
  return self;
}

uint64_t sub_100934CAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = (uint64_t *)(a1 + *a4);
  *uint64_t v7 = v6;
  v7[1] = v8;

  return swift_bridgeObjectRelease();
}

double *sub_100934D64()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  id v7 = v6;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = objc_allocWithZone((Class)PKStrokeProvider);
  Class isa = PKDrawing._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v10 = [v8 initWithDrawing:isa];

  if (v10)
  {
    id v11 = [v10 orderedStrokes];
    sub_1005057FC((uint64_t *)&unk_1016887D0);
    unint64_t v12 = (double *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v7 = v11;
  }
  else
  {
    unint64_t v12 = _swiftEmptyArrayStorage;
  }

  return v12;
}

BOOL sub_100934EF0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for PKDrawing();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100557A70(a1, (uint64_t)v56);
  if (!v57)
  {
    sub_10052E2B0((uint64_t)v56);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = v55;
  BOOL v10 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string) == *(void *)&v55[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string]
     && *(void *)(v1 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string + 8) == *(void *)&v55[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string + 8];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_30;
  }
  sub_10057BCD8();
  id v11 = *(void **)&v9[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_strokeGroupIdentifier];
  id v12 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_strokeGroupIdentifier);
  id v13 = v11;
  char v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v54 = OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing;
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing);
  unint64_t v16 = &selRef_crl_dispatchData;
  if (v15)
  {
    id v17 = v15;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = objc_allocWithZone((Class)PKStrokeProvider);
    Class isa = PKDrawing._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    id v20 = [v18 initWithDrawing:isa];

    if (v20)
    {
      id v21 = [v20 orderedStrokes];
      sub_1005057FC((uint64_t *)&unk_1016887D0);
      unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v17 = v21;
      unint64_t v16 = &selRef_crl_dispatchData;
    }
    else
    {
      unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  else
  {
    unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing;
  unsigned __int8 v25 = *(void **)&v9[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing];
  if (v25)
  {
    uint64_t v53 = v23;
    id v26 = v25;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
    id v27 = objc_allocWithZone((Class)PKStrokeProvider);
    Class v28 = PKDrawing._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    id v29 = [v27 v16[287] v28];

    if (v29)
    {
      id v30 = [v29 orderedStrokes];
      sub_1005057FC((uint64_t *)&unk_1016887D0);
      unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v26 = v30;
    }
    else
    {
      unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v23 = v53;
  }
  else
  {
    unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 != v32)
  {
LABEL_30:

    return 0;
  }
  uint64_t v33 = *(void **)(v2 + v54);
  if (!v33)
  {
    double x = CGRectNull.origin.x;
    double y = CGRectNull.origin.y;
    double width = CGRectNull.size.width;
    double height = CGRectNull.size.height;
    double v42 = *(void **)&v9[v24];
    if (v42) {
      goto LABEL_29;
    }
LABEL_33:
    double v44 = CGRectNull.origin.x;
    double v46 = CGRectNull.origin.y;
    double v48 = CGRectNull.size.width;
    double v50 = CGRectNull.size.height;
    goto LABEL_34;
  }
  [v33 bounds];
  double x = v34;
  double y = v36;
  double width = v38;
  double height = v40;
  double v42 = *(void **)&v9[v24];
  if (!v42) {
    goto LABEL_33;
  }
LABEL_29:
  [v42 bounds];
  double v44 = v43;
  double v46 = v45;
  double v48 = v47;
  double v50 = v49;
LABEL_34:

  return sub_100064208(x, y, width, height, v44, v46, v48, v50);
}

uint64_t sub_1009353B0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  sub_10052E2B0((uint64_t)v10);
  return v8 & 1;
}

uint64_t type metadata accessor for MathExpressionEvaluationResult()
{
  return self;
}

void sub_10093560C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CRLiOSMiniFormatterBuilder();
    sub_10093B96C(&qword_1016888A0, (void (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v21 = v24;
    uint64_t v6 = v25;
    uint64_t v7 = v26;
    unint64_t v8 = v27;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
    uint64_t v21 = v5 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(v5 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    uint64_t v16 = v7;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_29;
    }
    type metadata accessor for CRLiOSMiniFormatterBuilder();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    char v14 = v22;
    swift_unknownObjectRelease();
    if (!v22) {
      goto LABEL_29;
    }
LABEL_10:
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v14) + 0x198))(a1, a2);

    if (v15) {
      goto LABEL_29;
    }
  }
  if (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_9:
    char v14 = *(id *)(*(void *)(v5 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_10;
  }
  int64_t v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v17 >= v20) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    ++v7;
    if (!v18)
    {
      uint64_t v7 = v16 + 2;
      if (v16 + 2 >= v20) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v7);
      if (!v18)
      {
        uint64_t v7 = v16 + 3;
        if (v16 + 3 >= v20) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v7);
        if (!v18)
        {
          uint64_t v7 = v16 + 4;
          if (v16 + 4 >= v20) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v7);
          if (!v18)
          {
            uint64_t v19 = v16 + 5;
            while (v20 != v19)
            {
              unint64_t v18 = *(void *)(v21 + 8 * v19++);
              if (v18)
              {
                uint64_t v7 = v19 - 1;
                goto LABEL_26;
              }
            }
LABEL_29:
            sub_10052E1EC();
            return;
          }
        }
      }
    }
LABEL_26:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v7 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

void sub_100935924(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a1;
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CRLiOSMiniFormatterBuilder();
    sub_10093B96C(&qword_1016888A0, (void (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v43;
    uint64_t v37 = v44;
    uint64_t v5 = v45;
    uint64_t v6 = v46;
    unint64_t v7 = v47;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v37 = v4 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v35 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v36 = v4;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t v18 = __CocoaSet.Iterator.next()();
  if (!v18) {
    goto LABEL_47;
  }
  double v38 = (void *)v18;
  type metadata accessor for CRLiOSMiniFormatterBuilder();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  int64_t v17 = v39;
  swift_unknownObjectRelease();
  uint64_t v13 = v6;
  uint64_t v11 = v7;
  if (!v17) {
    goto LABEL_47;
  }
  while (1)
  {
    sub_100522D7C(a2, (uint64_t)&v39);
    type metadata accessor for CRLBoardItem(0);
    if (swift_dynamicCast())
    {
      uint64_t v19 = *(void **)(*(void *)&v17[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_boardItemDataProvider]
                     + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
      uint64_t v20 = sub_10050BF48(0, (unint64_t *)&qword_101678BC0) ? swift_getObjCClassFromMetadata() : 0;
      id v21 = [v19 mostSpecificCurrentEditorOfClass:v20, v34];
      self;
      unint64_t v22 = (void *)swift_dynamicCastObjCClass();
      if (v22)
      {
        id v23 = [v22 boardItems];
        swift_unknownObjectRelease();
        sub_10093B96C((unint64_t *)&qword_101676C20, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
        uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        char v25 = sub_1006E5050(v38, v24);
        swift_bridgeObjectRelease();
        if (v25)
        {
          uint64_t v26 = *(char **)(v34 + OBJC_IVAR____TtC8Freeform15CRLChangeRecord_details);
          unint64_t v27 = &v26[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
          Class v28 = v26;
          swift_beginAccess();
          uint64_t v29 = *(void *)v27;
          if (*(void *)(*(void *)v27 + 16))
          {
            uint64_t v30 = sub_1009563E8(7);
            if (v31) {
              goto LABEL_48;
            }
          }
          id v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 1;
          sub_1006C3968((uint64_t)&v39);
          uint64_t v29 = *(void *)v27;
          if (*(void *)(*(void *)v27 + 16))
          {
            uint64_t v30 = sub_1009563E8(6);
            if (v32) {
              goto LABEL_48;
            }
          }
          id v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 1;
          sub_1006C3968((uint64_t)&v39);
          uint64_t v29 = *(void *)v27;
          if (*(void *)(*(void *)v27 + 16))
          {
            uint64_t v30 = sub_1009563E8(51);
            if (v33)
            {
LABEL_48:
              sub_100557A70(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v39);
              sub_1006C3968((uint64_t)&v39);

              sub_10052E1EC();
              return;
            }
          }
          id v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 1;
          sub_1006C3968((uint64_t)&v39);
        }
        else
        {
        }
      }
      else
      {

        swift_unknownObjectRelease();
      }
      uint64_t v6 = v13;
      unint64_t v7 = v11;
      uint64_t v4 = v36;
      if (v36 < 0) {
        goto LABEL_28;
      }
    }
    else
    {

      uint64_t v6 = v13;
      unint64_t v7 = v11;
      if (v4 < 0) {
        goto LABEL_28;
      }
    }
LABEL_10:
    if (!v7) {
      break;
    }
    uint64_t v11 = (v7 - 1) & v7;
    unint64_t v12 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v13 = v6;
LABEL_26:
    int64_t v17 = (char *)*(id *)(*(void *)(v4 + 48) + 8 * v12);
    if (!v17) {
      goto LABEL_47;
    }
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v35) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v37 + 8 * v14);
  uint64_t v13 = v6 + 1;
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v13 = v6 + 2;
  if (v6 + 2 >= v35) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v37 + 8 * v13);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v13 = v6 + 3;
  if (v6 + 3 >= v35) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v37 + 8 * v13);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v13 = v6 + 4;
  if (v6 + 4 >= v35) {
    goto LABEL_47;
  }
  unint64_t v15 = *(void *)(v37 + 8 * v13);
  if (v15)
  {
LABEL_25:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_26;
  }
  uint64_t v16 = v6 + 5;
  while (v35 != v16)
  {
    unint64_t v15 = *(void *)(v37 + 8 * v16++);
    if (v15)
    {
      uint64_t v13 = v16 - 1;
      goto LABEL_25;
    }
  }
LABEL_47:
  sub_10052E1EC();
}

void sub_100935E98()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper);
  if (v2)
  {
    id v3 = v2;
    sub_10080B038();
  }
  uint64_t v4 = sub_10050F848((void *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(void *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
  uint64_t v5 = *v4;
  uint64_t v6 = OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController;
  unint64_t v7 = *(void **)(*v4 + OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController);
  if (v7)
  {
    id v8 = [v7 topViewController];
    if (v8)
    {
      id v17 = v8;
      type metadata accessor for CRLiOSMiniFormatterPopoverContainerViewController();
      uint64_t v9 = swift_dynamicCastClass();
      if (v9)
      {
        uint64_t v10 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform49CRLiOSMiniFormatterPopoverContainerViewController_builder);
        id v11 = v10;

        if (!v10) {
          return;
        }

        unint64_t v12 = *(void **)(v5 + v6);
        if (!v12) {
          return;
        }
        id v17 = v12;
        id v13 = [v17 visibleViewController];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = swift_dynamicCastClass();
          if (v15)
          {
            sub_100663428(v15, 0);
            uint64_t v16 = v17;
            id v17 = v14;
          }
          else
          {
            uint64_t v16 = v14;
          }
        }
      }
    }
  }
}

void sub_100935FF8()
{
  qword_1016887F0 = 0x4046000000000000;
}

id sub_1009361D4()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView];
  id v3 = [v2 layer];
  if (qword_10166F560 != -1) {
    swift_once();
  }
  [v3 setCornerRadius:*(double *)&qword_1016887F0 * 0.5];

  id v4 = [v2 layer];
  [v4 setCornerCurve:kCACornerCurveContinuous];

  id v5 = [self systemBackgroundColor];
  [v2 setBackgroundColor:v5];

  id v6 = [v2 layer];
  [v6 crl_applyDefaultCanvasOverlayUIShadowSettings];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay];
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v7 setAccessibilityElementsHidden:1];
  id result = [v1 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = result;
  [result addSubview:v2];

  [v2 addSubview:v7];
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10117FBD0;
  id result = [v1 view];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v11 = result;
  id v12 = [result topAnchor];

  id v13 = [v2 topAnchor];
  id v14 = [v12 constraintEqualToAnchor:v13];

  *(void *)(v10 + 32) = v14;
  id v15 = [v7 heightAnchor];
  id v16 = [v15 constraintEqualToConstant:*(double *)&qword_1016887F0];

  *(void *)(v10 + 40) = v16;
  id result = [v1 view];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  id v17 = result;
  id v37 = self;
  id v18 = [v17 leftAnchor];

  id v19 = [v2 leftAnchor];
  id v20 = [v18 constraintEqualToAnchor:v19];

  *(void *)(v10 + 48) = v20;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v37 activateConstraints:isa];

  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10117FBE0;
  id v23 = [v2 topAnchor];
  id v24 = [v7 topAnchor];
  id v25 = [v23 constraintEqualToAnchor:v24];

  *(void *)(v22 + 32) = v25;
  id v26 = [v2 bottomAnchor];
  id v27 = [v7 bottomAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];

  *(void *)(v22 + 40) = v28;
  id v29 = [v2 leadingAnchor];
  id v30 = [v7 leadingAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30 constant:-*(double *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_leadingMargin]];

  *(void *)(v22 + 48) = v31;
  id v32 = [v2 trailingAnchor];
  id v33 = [v7 trailingAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:*(double *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_trailingMargin]];

  *(void *)(v22 + 56) = v34;
  specialized Array._endMutation()();
  Class v35 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v37 activateConstraints:v35];

  sub_1009369E0();
  sub_1005057FC((uint64_t *)&unk_10168D9A0);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10117DF40;
  *(void *)(v36 + 32) = type metadata accessor for UITraitHorizontalSizeClass();
  *(void *)(v36 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
  *(void *)(v36 + 48) = type metadata accessor for UITraitVerticalSizeClass();
  *(void *)(v36 + 56) = &protocol witness table for UITraitVerticalSizeClass;
  *(void *)(v36 + 64) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v36 + 72) = &protocol witness table for UITraitUserInterfaceStyle;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_bridgeObjectRelease();

  return (id)swift_unknownObjectRelease();
}

void sub_1009369E0()
{
  uint64_t v1 = v0;
  id v2 = [v0 traitCollection];
  if (objc_msgSend(self, "crl_phoneUI"))
  {

LABEL_4:
    id v4 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
    *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = 0;

    id v5 = [v1 view];
    if (v5)
    {
      id v6 = v5;
      unint64_t v7 = (objc_class *)type metadata accessor for CRLMiniFormatterDynamicOperationViewHelper();
      id v8 = (char *)objc_allocWithZone(v7);
      swift_unknownObjectWeakInit();
      uint64_t v9 = &v8[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_delegate];
      *(void *)&v8[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_delegate + 8] = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      *((void *)v9 + 1) = &off_10151B118;
      swift_unknownObjectWeakAssign();
      v24.receiver = v8;
      v24.super_class = v7;
      id v10 = [super init];

      id v11 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
      *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = v10;

      return;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  unsigned __int8 v3 = [v2 crl_isCompactWidth];

  if (v3) {
    goto LABEL_4;
  }
  id v12 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
  *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = 0;

  sub_10050F848(&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate], *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24]);
  char v13 = sub_1006643E4();
  id v14 = [v1 view];
  if (!v14) {
    goto LABEL_16;
  }
  id v15 = v14;
  if (v13) {
    double v16 = 49.0;
  }
  else {
    double v16 = 16.0;
  }
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_reps];
  objc_allocWithZone((Class)type metadata accessor for CRLRepTrackingMiniFormatterViewHelper());
  swift_bridgeObjectRetain();
  id v18 = v1;
  id v19 = sub_10080C390(v16, (uint64_t)v15, v17, (uint64_t)v1, (uint64_t)&off_10151B138);

  uint64_t v20 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper;
  id v21 = *(void **)&v18[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
  *(void *)&v18[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = v19;

  uint64_t v22 = *(void **)&v18[v20];
  if (v22)
  {
    id v23 = v22;
    sub_10080B038();
  }
}

void sub_100936C74()
{
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterViewController();
  [super viewWillLayoutSubviews];
  if ((v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] & 1) == 0
    && (v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] & 1) == 0)
  {
    id v1 = [v0 view];
    if (v1)
    {
      id v2 = v1;
      id v3 = [v0 view];
      if (v3)
      {
        id v4 = v3;
        [v3 frame];
        double v6 = v5;
        double v8 = v7;

        [*(id *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
        [v2 setFrame:v6, v8, v9, v10];

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_100936DCC(SEL *a1, int a2, int a3)
{
  double v5 = v3;
  LODWORD(v176) = a3;
  LODWORD(v178) = a2;
  double v7 = (void *)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v174 = *(v7 - 1);
  __chkstk_darwin(v7, v8);
  v171 = (char *)&v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v173 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v170 = (char *)&v166 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = (void *)type metadata accessor for DispatchTime();
  uint64_t v172 = *(v177 - 1);
  __chkstk_darwin(v177, v13);
  CGPoint v169 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v17 = __chkstk_darwin(v15, v16).n128_u64[0];
  v175 = (char *)&v166 - v18;
  id v19 = &selRef_taggerStateOutsideCore;
  uint64_t v20 = (uint64_t)[(SEL *)a1 view];
  id v21 = [v5 view];
  if (!v21)
  {
LABEL_86:

    __break(1u);
    goto LABEL_87;
  }
  uint64_t v22 = v21;
  id v23 = [v21 superview];

  objc_super v24 = &selRef_taggerStateOutsideCore;
  id v25 = &selRef_crl_containsSubstring_;
  uint64_t v168 = v10;
  if (v23)
  {
    if (v20)
    {
      uint64_t v22 = (void *)sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
      id v26 = (id)v20;
      uint64_t v27 = v20;
      id v28 = v23;
      char v29 = static NSObject.== infix(_:_:)();

      uint64_t v20 = v27;
      id v25 = &selRef_crl_containsSubstring_;
      objc_super v24 = &selRef_taggerStateOutsideCore;
      id v19 = &selRef_taggerStateOutsideCore;

      if (v29) {
        goto LABEL_73;
      }
    }
    else
    {
    }
  }
  else if (!v20)
  {
LABEL_73:
    id v156 = [v5 v24[218]];
    if ([self v25[93]])
    {
    }
    else
    {
      unsigned __int8 v157 = [v156 crl_isCompactWidth];

      if ((v157 & 1) == 0)
      {
        id v163 = *(char **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
        if (!v163) {
          goto LABEL_81;
        }
        uint64_t v164 = *(void *)&v163[OBJC_IVAR____TtC8Freeform37CRLRepTrackingMiniFormatterViewHelper_reps];
        swift_bridgeObjectRetain();
        id v159 = v163;
        id v165 = (void *)sub_10099985C(v164);
        swift_bridgeObjectRelease();
        id v162 = [v165 interactiveCanvasController];

        if (!v162)
        {
LABEL_80:

LABEL_81:
          return;
        }
LABEL_79:
        [v162 addDecorator:v159];

        id v159 = (char *)v20;
        uint64_t v20 = (uint64_t)v162;
        goto LABEL_80;
      }
    }
    uint64_t v158 = *(void **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
    if (!v158 || !swift_unknownObjectWeakLoadStrong()) {
      goto LABEL_81;
    }
    id v159 = v158;
    uint64_t v160 = swift_bridgeObjectRetain();
    CGFloat v161 = (void *)sub_10099985C(v160);
    swift_bridgeObjectRelease();
    id v162 = [v161 interactiveCanvasController];
    swift_unknownObjectRelease();

    if (!v162) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  id v30 = (id)OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay;
  v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] = 1;
  id v31 = [v5 v19[511]];
  [v31 removeFromSuperview];

  if (v20)
  {
    a1 = (SEL *)(id)v20;
    id v32 = [v5 v19[511]];
    if (!v32)
    {
LABEL_87:

      __break(1u);
LABEL_88:

      __break(1u);
LABEL_89:

      __break(1u);
      goto LABEL_90;
    }
    uint64_t v22 = v32;
    [(SEL *)a1 addSubview:v32];
  }
  if ((v178 & 1) == 0) {
    goto LABEL_23;
  }
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    id v34 = [v5 traitCollection];
    if (objc_msgSend(self, "crl_phoneUI"))
    {
    }
    else
    {
      unsigned int v41 = [v34 crl_isCompactWidth];

      if (!v41)
      {
        id v54 = [v5 v19[511]];
        if (!v54)
        {
LABEL_90:

          __break(1u);
          goto LABEL_91;
        }
        double v55 = v54;
        id v56 = [v5 v19[511]];
        if (!v56)
        {
LABEL_91:

          __break(1u);
          goto LABEL_92;
        }
        uint64_t v57 = v56;
        id v178 = (id)v20;
        [v56 frame];
        double v59 = v58;
        double v61 = v60;

        [*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
        [v55 setFrame:v59, v61, v62, v63];

        sub_10093A8AC();
        v177 = self;
        [v177 begin];
        NSString v64 = String._bridgeToObjectiveC()();
        id v65 = [self animationWithKeyPath:v64];

        [v65 setMass:1.0];
        [v65 setStiffness:500.0];
        [v65 setDamping:33.0];
        [v65 setInitialVelocity:0.0];
        id v66 = v65;
        [v66 settlingDuration];
        [v66 setDuration:];

        id v30 = v66;
        Class isa = Double._bridgeToObjectiveC()().super.super.isa;
        [v30 setFromValue:isa];

        Class v68 = Double._bridgeToObjectiveC()().super.super.isa;
        [v30 setToValue:v68];

        id v69 = [v5 v19[511]];
        if (!v69)
        {
LABEL_92:

          __break(1u);
          goto LABEL_93;
        }
        id v70 = v69;
        uint64_t v20 = (uint64_t)&selRef_invalidateSizedImageIfNeededForBakedMaskPathFromBlock_;
        id v71 = [v69 layer];

        NSString v72 = String._bridgeToObjectiveC()();
        [v71 addAnimation:v30 forKey:v72];

        NSString v73 = String._bridgeToObjectiveC()();
        id v74 = [self animationWithKeyPath:v73];

        id v75 = objc_allocWithZone((Class)CAMediaTimingFunction);
        uint64_t v36 = (char **)v74;
        LODWORD(v76) = 1045220557;
        LODWORD(v77) = 0.25;
        LODWORD(v78) = 1.0;
        id v79 = [v75 initWithControlPoints:v76 :0.0 :v77 :v78];
        [v36 setTimingFunction:v79];

        [v36 setDuration:0.08];
        Class v80 = Int._bridgeToObjectiveC()().super.super.isa;
        [v36 setFromValue:v80];

        Class v81 = Double._bridgeToObjectiveC()().super.super.isa;
        [v36 setToValue:v81];

        id v82 = [v5 v19[511]];
        if (!v82)
        {
LABEL_93:

          __break(1u);
          goto LABEL_94;
        }
        double v83 = v82;
        id v84 = [v82 layer];

        NSString v85 = String._bridgeToObjectiveC()();
        [v84 addAnimation:v36 forKey:v85];

        id v86 = [v5 v19[511]];
        if (!v86)
        {
LABEL_94:

          __break(1u);
          goto LABEL_95;
        }
        Class v87 = v86;
        id v88 = [v86 layer];

        [v88 convertTime:0 fromLayer:CACurrentMediaTime()];
        double v4 = v89;

        uint64_t v22 = *(void **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay];
        a1 = (SEL *)&selRef_addCullingListener_;
        id v90 = [v22 arrangedSubviews];
        sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
        unint64_t v91 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v91 >> 62))
        {
          uint64_t v92 = *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_42;
        }
LABEL_69:
        swift_bridgeObjectRetain();
        uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_42:
        swift_bridgeObjectRelease();
        id v93 = [v22 a1[359]];
        unint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v94 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
          if (v20) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v20 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v20)
          {
LABEL_44:
            if (v20 >= 1)
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if ((v94 & 0xC000000000000001) != 0) {
                  id v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v96 = *(id *)(v94 + 8 * i + 32);
                }
                id v97 = v96;
                sub_100938898(i, v96, (uint64_t)v5, v92, v4);
              }
              goto LABEL_71;
            }
            __break(1u);
            goto LABEL_86;
          }
        }
LABEL_71:
        swift_bridgeObjectRelease_n();
        uint64_t v153 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v183 = sub_10093B700;
        uint64_t v184 = v153;
        CGAffineTransform aBlock = _NSConcreteStackBlock;
        uint64_t v180 = *(void *)"";
        v181 = sub_100679958;
        v182 = &unk_10151B408;
        v154 = _Block_copy(&aBlock);
        swift_release();
        id v155 = v177;
        [v177 setCompletionBlock:v154];
        _Block_release(v154);
        [v155 commit];

        uint64_t v20 = (uint64_t)v178;
        id v25 = &selRef_crl_containsSubstring_;
        goto LABEL_72;
      }
    }
    id v178 = v7;
    id v42 = [v5 v19[511]];
    if (v42)
    {
      uint64_t v43 = v42;
      [v42 setHidden:1];

      sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
      uint64_t v167 = static OS_dispatch_queue.main.getter();
      uint64_t v44 = v169;
      static DispatchTime.now()();
      uint64_t v45 = v175;
      + infix(_:_:)();
      uint64_t v176 = *(void *)(v172 + 8);
      ((void (*)(char *, void *))v176)(v44, v177);
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v5;
      v183 = sub_10093B708;
      uint64_t v184 = v46;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v180 = *(void *)"";
      unint64_t v47 = &unk_10151B458;
LABEL_34:
      v181 = sub_100679958;
      v182 = v47;
      double v48 = _Block_copy(&aBlock);
      double v49 = v5;
      swift_release();
      double v50 = v170;
      static DispatchQoS.unspecified.getter();
      CGAffineTransform aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10093B96C((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1005057FC((uint64_t *)&unk_1016725D0);
      sub_10056B494();
      uint64_t v51 = v171;
      id v52 = v178;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v53 = (void *)v167;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v48);

      (*(void (**)(char *, id))(v174 + 8))(v51, v52);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v50, v168);
      ((void (*)(char *, void *))v176)(v45, v177);
      objc_super v24 = &selRef_taggerStateOutsideCore;
      id v25 = &selRef_crl_containsSubstring_;
      goto LABEL_73;
    }
    goto LABEL_88;
  }
  if (!UIAccessibilityIsReduceMotionEnabled() || !UIAccessibilityPrefersCrossFadeTransitions())
  {
    if (UIAccessibilityIsReduceMotionEnabled())
    {
      id v35 = [v5 traitCollection];
      if (objc_msgSend(self, "crl_phoneUI"))
      {
      }
      else
      {
        unsigned int v98 = [v35 crl_isCompactWidth];

        if (!v98)
        {
          id v114 = [v5 v19[511]];
          if (!v114)
          {
LABEL_97:

            __break(1u);
            goto LABEL_98;
          }
          uint64_t v115 = v114;
          id v116 = [v5 v19[511]];
          if (!v116)
          {
LABEL_98:

            __break(1u);
            goto LABEL_99;
          }
          char v117 = v116;
          [v116 frame];
          double v119 = v118;
          double v121 = v120;

          [*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
          [v115 setFrame:v119, v121, v122, v123];

          sub_10093A8AC();
LABEL_59:
          id v124 = [v5 v19[511]];
          if (v124)
          {
            id v125 = v124;
            [v124 setHidden:0];

LABEL_72:
            objc_super v24 = &selRef_taggerStateOutsideCore;
            goto LABEL_73;
          }
          goto LABEL_89;
        }
      }
      sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
      uint64_t v176 = static OS_dispatch_queue.main.getter();
      uint64_t v99 = v169;
      static DispatchTime.now()();
      + infix(_:_:)();
      id v178 = *(id *)(v172 + 8);
      ((void (*)(char *, void *))v178)(v99, v177);
      uint64_t v100 = swift_allocObject();
      *(void *)(v100 + 16) = v5;
      v183 = sub_10093B710;
      uint64_t v184 = v100;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v180 = *(void *)"";
      v181 = sub_100679958;
      v182 = &unk_10151B4A8;
      id v101 = _Block_copy(&aBlock);
      id v102 = v5;
      swift_release();
      uint64_t v103 = v170;
      static DispatchQoS.unspecified.getter();
      CGAffineTransform aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10093B96C((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1005057FC((uint64_t *)&unk_1016725D0);
      sub_10056B494();
      uint64_t v104 = v171;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v106 = v175;
      uint64_t v105 = (void *)v176;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v101);

      (*(void (**)(char *, void *))(v174 + 8))(v104, v7);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v103, v168);
      id v25 = &selRef_crl_containsSubstring_;
      ((void (*)(char *, void *))v178)(v106, v177);
      goto LABEL_59;
    }
LABEL_23:
    *((unsigned char *)v30 + (void)v5) = 0;
    if ((v176 & 1) == 0) {
      goto LABEL_73;
    }
    uint64_t v36 = &selRef_taggerStateOutsideCore;
    id v37 = [*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay] arrangedSubviews];
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (SEL *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!a1) {
        goto LABEL_30;
      }
    }
    else
    {
      a1 = *(SEL **)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!a1)
      {
LABEL_30:
        UIAccessibilityNotifications v40 = UIAccessibilityLayoutChangedNotification;
        swift_bridgeObjectRelease();
        UIAccessibilityPostNotification(v40, a1);

        objc_super v24 = &selRef_taggerStateOutsideCore;
        goto LABEL_73;
      }
    }
    if ((v38 & 0xC000000000000001) != 0)
    {
      id v39 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_29;
    }
    if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v39 = (SEL *)*(id *)(v38 + 32);
LABEL_29:
      a1 = v39;
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_69;
  }
  id v33 = [v5 traitCollection];
  if (objc_msgSend(self, "crl_phoneUI"))
  {

    goto LABEL_53;
  }
  unsigned int v107 = [v33 crl_isCompactWidth];

  if (v107)
  {
LABEL_53:
    id v108 = [v5 v19[511]];
    if (v108)
    {
      unsigned int v109 = v108;
      id v178 = v7;
      [v108 setHidden:0];

      id v110 = [v5 v19[511]];
      if (v110)
      {
        uint64_t v111 = v110;
        [v110 setAlpha:0.0];

        sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
        uint64_t v167 = static OS_dispatch_queue.main.getter();
        id v112 = v169;
        static DispatchTime.now()();
        uint64_t v45 = v175;
        + infix(_:_:)();
        uint64_t v176 = *(void *)(v172 + 8);
        ((void (*)(char *, void *))v176)(v112, v177);
        uint64_t v113 = swift_allocObject();
        *(void *)(v113 + 16) = v5;
        v183 = sub_10093B758;
        uint64_t v184 = v113;
        CGAffineTransform aBlock = _NSConcreteStackBlock;
        uint64_t v180 = *(void *)"";
        unint64_t v47 = &unk_10151B520;
        goto LABEL_34;
      }
      goto LABEL_96;
    }
LABEL_95:

    __break(1u);
LABEL_96:

    __break(1u);
    goto LABEL_97;
  }
  id v126 = [v5 v19[511]];
  if (!v126)
  {
LABEL_99:

    __break(1u);
    goto LABEL_100;
  }
  CGAffineTransform v127 = v126;
  id v128 = [v5 v19[511]];
  if (!v128)
  {
LABEL_100:

    __break(1u);
    goto LABEL_101;
  }
  id v129 = v128;
  [v128 frame];
  double v131 = v130;
  double v133 = v132;

  [*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
  [v127 setFrame:v131, v133, v134, v135];

  sub_10093A8AC();
  id v136 = self;
  [v136 begin];
  NSString v137 = String._bridgeToObjectiveC()();
  id v138 = [self animationWithKeyPath:v137];

  id v139 = objc_allocWithZone((Class)CAMediaTimingFunction);
  id v140 = v138;
  LODWORD(v141) = 1045220557;
  LODWORD(v142) = 0.25;
  LODWORD(v143) = 1.0;
  id v144 = [v139 initWithControlPoints:v141 :0.0 :v142 :v143];
  [v140 setTimingFunction:v144];

  [v140 setDuration:0.8];
  Class v145 = Int._bridgeToObjectiveC()().super.super.isa;
  [v140 setFromValue:v145];

  Class v146 = Double._bridgeToObjectiveC()().super.super.isa;
  [v140 setToValue:v146];

  id v147 = [v5 v19[511]];
  if (v147)
  {
    v148 = v147;
    id v149 = [v147 layer];

    NSString v150 = String._bridgeToObjectiveC()();
    [v149 addAnimation:v140 forKey:v150];

    uint64_t v151 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v183 = sub_10093B718;
    uint64_t v184 = v151;
    CGAffineTransform aBlock = _NSConcreteStackBlock;
    uint64_t v180 = *(void *)"";
    v181 = sub_100679958;
    v182 = &unk_10151B4D0;
    id v152 = _Block_copy(&aBlock);
    swift_release();
    [v136 setCompletionBlock:v152];
    _Block_release(v152);
    [v136 commit];

    goto LABEL_72;
  }
LABEL_101:

  __break(1u);
}

void sub_1009384DC(char *a1)
{
  id v2 = [a1 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v3 = v2;
  id v4 = [a1 view];
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  double v5 = v4;
  [v4 frame];
  double v7 = v6;
  double v9 = v8;

  [*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
  [v3 setFrame:v7, v9, v10, v11];

  sub_10093A8AC();
  id v12 = [a1 view];
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  [v12 frame];
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  id v22 = [a1 view];
  if (!v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v23 = v22;
  [v22 setFrame:v15, v17 + 100.0, v19, v21];

  id v24 = [a1 view];
  if (v24)
  {
    id v25 = v24;
    [v24 setHidden:0];

    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a1;
    *(double *)(v26 + 24) = v15;
    *(double *)(v26 + 32) = v17;
    *(double *)(v26 + 40) = v19;
    *(double *)(v26 + 48) = v21;
    id v27 = objc_allocWithZone((Class)UIViewPropertyAnimator);
    unint64_t v38 = sub_10093B7B4;
    uint64_t v39 = v26;
    id v34 = _NSConcreteStackBlock;
    uint64_t v35 = *(void *)"";
    uint64_t v36 = sub_100679958;
    id v37 = &unk_10151B610;
    id v28 = _Block_copy(&v34);
    char v29 = a1;
    swift_release();
    id v30 = [v27 initWithDuration:v28 dampingRatio:0.35 animations:0.6];
    _Block_release(v28);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v29;
    unint64_t v38 = (void (*)())sub_10093B9B8;
    uint64_t v39 = v31;
    id v34 = _NSConcreteStackBlock;
    uint64_t v35 = *(void *)"";
    uint64_t v36 = sub_100DFC964;
    id v37 = &unk_10151B660;
    id v32 = _Block_copy(&v34);
    id v33 = v29;
    swift_release();
    [v30 addCompletion:v32];
    _Block_release(v32);
    [v30 startAnimation];

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_10093880C(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = [a1 view];
  if (v9)
  {
    id v10 = v9;
    [v9 setFrame:a2, a3, a4, a5];
  }
  else
  {
    __break(1u);
  }
}

void sub_100938898(uint64_t a1, id a2, uint64_t a3, uint64_t a4, double a5)
{
  [a2 transform];
  CGAffineTransformScale(&v18, &v19, 0.75, 0.75);
  CGAffineTransform v19 = v18;
  [a2 setTransform:&v19];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [self animationWithKeyPath:v10];

  [v11 setMass:1.0];
  [v11 setStiffness:500.0];
  [v11 setDamping:33.0];
  [v11 setInitialVelocity:0.0];
  id v12 = v11;
  [v12 settlingDuration];
  [v12 setDuration:];

  id v13 = v12;
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  [v13 setFromValue:isa];

  Class v15 = Double._bridgeToObjectiveC()().super.super.isa;
  [v13 setToValue:v15];

  [v13 setRemovedOnCompletion:0];
  [v13 setFillMode:kCAFillModeForwards];
  if (*(uint64_t *)(a3 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_numberOfButtons) < 3) {
    goto LABEL_6;
  }
  if (!a1) {
    goto LABEL_5;
  }
  if (!__OFSUB__(a4, 1))
  {
    if (a4 - 1 != a1)
    {
LABEL_6:
      id v16 = [a2 layer];
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 addAnimation:v13 forKey:v17];

      return;
    }
LABEL_5:
    [v13 setBeginTime:a5 + 0.05];
    goto LABEL_6;
  }
  __break(1u);
}

void sub_100938B50()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay;
    id v3 = [*(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay) arrangedSubviews];
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      double v5 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_8;
      }
    }
    else
    {
      double v5 = *(void **)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5) {
        goto LABEL_8;
      }
    }
    if ((v4 & 0xC000000000000001) != 0)
    {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_23;
      }
      id v6 = *(id *)(v4 + 32);
    }
    double v5 = v6;
LABEL_8:
    UIAccessibilityNotifications v7 = UIAccessibilityLayoutChangedNotification;
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v7, v5);

    id v8 = [*(id *)&v1[v2] arrangedSubviews];
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (v10)
      {
LABEL_10:
        if (v10 >= 1)
        {
          uint64_t v11 = 0;
          long long v15 = *(_OWORD *)&CGAffineTransformIdentity.c;
          long long v16 = *(_OWORD *)&CGAffineTransformIdentity.a;
          long long v14 = *(_OWORD *)&CGAffineTransformIdentity.tx;
          do
          {
            if ((v9 & 0xC000000000000001) != 0) {
              id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v12 = *(id *)(v9 + 8 * v11 + 32);
            }
            id v13 = v12;
            ++v11;
            v17[0] = v16;
            v17[1] = v15;
            v17[2] = v14;
            [v12 setTransform:v17, v14, v15, v16];
          }
          while (v10 != v11);
          goto LABEL_19;
        }
LABEL_23:
        __break(1u);
        return;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v10) {
        goto LABEL_10;
      }
    }
LABEL_19:

    swift_bridgeObjectRelease_n();
  }
}

void sub_100938DA8(char *a1)
{
  id v2 = [a1 view];
  if (v2)
  {
    id v3 = v2;
    id v4 = [a1 view];
    if (v4)
    {
      double v5 = v4;
      [v4 frame];
      double v7 = v6;
      double v9 = v8;

      [*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
      [v3 setFrame:v7, v9, v10, v11];

      sub_10093A8AC();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a1;
      id v13 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      id v24 = sub_10093BA54;
      uint64_t v25 = v12;
      double v20 = _NSConcreteStackBlock;
      uint64_t v21 = *(void *)"";
      id v22 = sub_100679958;
      id v23 = &unk_10151B570;
      long long v14 = _Block_copy(&v20);
      long long v15 = a1;
      swift_release();
      id v16 = [v13 initWithDuration:v14 dampingRatio:0.85 animations:0.6];
      _Block_release(v14);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v15;
      id v24 = sub_10093B760;
      uint64_t v25 = v17;
      double v20 = _NSConcreteStackBlock;
      uint64_t v21 = *(void *)"";
      id v22 = sub_100DFC964;
      id v23 = &unk_10151B5C0;
      CGAffineTransform v18 = _Block_copy(&v20);
      CGAffineTransform v19 = v15;
      swift_release();
      [v16 addCompletion:v18];
      _Block_release(v18);
      [v16 startAnimation];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100939014(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay) = 0;
  id v2 = [*(id *)(a2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay) arrangedSubviews];
  sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    id argument = 0;
    goto LABEL_9;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v4 = *(id *)(v3 + 32);
  }
  id argument = v4;
LABEL_9:
  UIAccessibilityNotifications v6 = UIAccessibilityLayoutChangedNotification;
  swift_bridgeObjectRelease();
  UIAccessibilityPostNotification(v6, argument);
}

void sub_100939144()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    id v2 = [*(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay) arrangedSubviews];
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      id v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      id v4 = *(void **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
LABEL_4:
        if ((v3 & 0xC000000000000001) != 0)
        {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v5 = *(id *)(v3 + 32);
        }
        id v4 = v5;
      }
    }
    UIAccessibilityNotifications v6 = UIAccessibilityLayoutChangedNotification;
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v6, v4);
  }
}

void sub_100939288(char *a1)
{
  id v2 = [a1 view];
  if (v2)
  {
    unint64_t v3 = v2;
    id v4 = [a1 view];
    if (v4)
    {
      id v5 = v4;
      [v4 frame];
      double v7 = v6;
      double v9 = v8;

      [*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView] systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height];
      [v3 setFrame:v7, v9, v10, v11];

      sub_10093A8AC();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10093935C(char a1, char a2)
{
  id v5 = [v2 view];
  if (!v5)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  double v6 = v5;
  char v7 = [v5 isUserInteractionEnabled];

  id v8 = [v2 view];
  if (!v8)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  double v9 = v8;
  [v8 setUserInteractionEnabled:0];

  v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 1;
  id v10 = [v2 traitCollection];
  double v11 = self;
  uint64_t v12 = &selRef_crl_containsSubstring_;
  if (objc_msgSend(v11, "crl_phoneUI"))
  {
  }
  else
  {
    unsigned __int8 v13 = [v10 crl_isCompactWidth];

    if ((v13 & 1) == 0)
    {
      double v20 = *(char **)&v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
      if (!v20) {
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)&v20[OBJC_IVAR____TtC8Freeform37CRLRepTrackingMiniFormatterViewHelper_reps];
      swift_bridgeObjectRetain();
      uint64_t v17 = v20;
      id v22 = (void *)sub_10099985C(v21);
      swift_bridgeObjectRelease();
      id v19 = [v22 interactiveCanvasController];

      if (!v19) {
        goto LABEL_15;
      }
      [v19 removeDecorator:v17];
      goto LABEL_13;
    }
  }
  long long v14 = *(void **)&v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
  if (v14)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = *(void *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_reps);
      swift_bridgeObjectRetain();
      uint64_t v17 = v14;
      CGAffineTransform v18 = (void *)sub_10099985C(v16);
      swift_bridgeObjectRelease();
      id v19 = [v18 interactiveCanvasController];
      swift_unknownObjectRelease();

      if (!v19)
      {
        uint64_t v12 = &selRef_crl_containsSubstring_;
        goto LABEL_15;
      }
      [v19 removeDecorator:v17];
      uint64_t v12 = &selRef_crl_containsSubstring_;
LABEL_13:

      uint64_t v17 = (char *)v19;
LABEL_15:
    }
  }
LABEL_16:
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v2;
  char v24 = a2 & 1;
  *(unsigned char *)(v23 + 24) = v24;
  *(unsigned char *)(v23 + 25) = v7;
  uint64_t v25 = v2;
  if ((a1 & 1) == 0) {
    goto LABEL_23;
  }
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    id v30 = [v25 view];
    if (!v30)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v31 = v30;
    id v32 = [v30 layer];

    [v32 removeAllAnimations];
    id v33 = [v25 traitCollection];
    if ([v11 v12[93]])
    {

LABEL_30:
      uint64_t v35 = self;
      double v36 = UINavigationControllerHideShowBarDuration;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v25;
      id v124 = sub_10093B6A4;
      uint64_t v125 = v37;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v121 = *(void *)"";
      double v122 = sub_100679958;
      double v123 = &unk_10151B2A0;
      unint64_t v38 = _Block_copy(&aBlock);
      uint64_t v39 = v25;
      swift_release();
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = sub_10093B628;
      *(void *)(v40 + 24) = v23;
      id v124 = sub_1006DAE04;
      uint64_t v125 = v40;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v121 = *(void *)"";
      unsigned int v41 = &unk_10151B2F0;
LABEL_31:
      double v122 = sub_100F8FD18;
      double v123 = v41;
      id v42 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v35 animateWithDuration:v38 animations:v42 completion:v36];
      swift_release();
      _Block_release(v42);
      _Block_release(v38);
      return;
    }
    unsigned int v34 = [v33 crl_isCompactWidth];

    if (v34) {
      goto LABEL_30;
    }
    uint64_t v43 = self;
    [v43 begin];
    id v124 = sub_10093B628;
    uint64_t v125 = v23;
    CGAffineTransform aBlock = _NSConcreteStackBlock;
    uint64_t v121 = *(void *)"";
    double v122 = sub_100679958;
    double v123 = &unk_10151B200;
    uint64_t v44 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v43 setCompletionBlock:v44];
    _Block_release(v44);
    NSString v45 = String._bridgeToObjectiveC()();
    uint64_t v46 = self;
    id v47 = [v46 animationWithKeyPath:v45];

    id v48 = objc_allocWithZone((Class)CAMediaTimingFunction);
    id v49 = v47;
    LODWORD(v50) = 1045220557;
    LODWORD(v51) = 0.25;
    LODWORD(v52) = 1.0;
    id v53 = [v48 initWithControlPoints:v50 :0.0 :v51 :v52];
    [v49 setTimingFunction:v53];

    [v49 setDuration:0.15];
    Class isa = Double._bridgeToObjectiveC()().super.super.isa;
    [v49 setFromValue:isa];

    Class v55 = Double._bridgeToObjectiveC()().super.super.isa;
    [v49 setToValue:v55];

    id v56 = [v25 view];
    if (!v56)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v57 = v56;
    id v58 = [v56 layer];

    NSString v59 = String._bridgeToObjectiveC()();
    [v58 addAnimation:v49 forKey:v59];

    NSString v60 = String._bridgeToObjectiveC()();
    id v61 = [v46 animationWithKeyPath:v60];

    id v62 = objc_allocWithZone((Class)CAMediaTimingFunction);
    id v63 = v61;
    LODWORD(v64) = 1045220557;
    LODWORD(v65) = 0.25;
    LODWORD(v66) = 1.0;
    id v67 = [v62 initWithControlPoints:v64 :0.0 :v65 :v66];
    [v63 setTimingFunction:v67];

    [v63 setDuration:0.15];
    id v68 = [v25 view];
    if (!v68)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    id v69 = v68;
    [v68 alpha];

    Class v70 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v63 setFromValue:v70];

    Class v71 = Double._bridgeToObjectiveC()().super.super.isa;
    [v63 setToValue:v71];

    [v63 setFillMode:kCAFillModeForwards];
    [v63 setRemovedOnCompletion:0];
    id v72 = [v25 view];
    if (!v72)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    NSString v73 = v72;
    id v74 = [v72 layer];

    NSString v75 = String._bridgeToObjectiveC()();
    [v74 addAnimation:v63 forKey:v75];

    id v76 = [*(id *)&v25[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay] arrangedSubviews];
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    unint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v77 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
      if (v78) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v78)
      {
LABEL_37:
        if (v78 >= 1)
        {
          uint64_t v79 = 0;
          do
          {
            if ((v77 & 0xC000000000000001) != 0) {
              id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v80 = *(id *)(v77 + 8 * v79 + 32);
            }
            Class v81 = v80;
            ++v79;
            CGAffineTransform aBlock = (void **)v80;
            sub_10093A5B4((void **)&aBlock);
          }
          while (v78 != v79);
          goto LABEL_51;
        }
        __break(1u);
        goto LABEL_54;
      }
    }
LABEL_51:
    swift_bridgeObjectRelease_n();
    uint64_t v118 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v124 = sub_10093B688;
    uint64_t v125 = v118;
    CGAffineTransform aBlock = _NSConcreteStackBlock;
    uint64_t v121 = *(void *)"";
    double v122 = sub_100679958;
    double v123 = &unk_10151B250;
    double v119 = _Block_copy(&aBlock);
    swift_release();
    [v43 setCompletionBlock:v119];
    _Block_release(v119);
    [v43 commit];

    goto LABEL_52;
  }
  if (UIAccessibilityIsReduceMotionEnabled() && UIAccessibilityPrefersCrossFadeTransitions())
  {
    id v26 = [v25 view];
    if (v26)
    {
      id v27 = v26;
      id v28 = [v26 layer];

      [v28 removeAllAnimations];
      id v29 = [v25 traitCollection];
      if ([v11 v12[93]])
      {

        goto LABEL_44;
      }
      unsigned int v82 = [v29 crl_isCompactWidth];

      if (v82)
      {
LABEL_44:
        id v83 = [v25 view];
        if (v83)
        {
          id v84 = v83;
          [v83 frame];
          double v86 = v85;
          double v88 = v87;
          double v90 = v89;
          double v92 = v91;

          id v93 = [v25 view];
          if (v93)
          {
            unint64_t v94 = v93;
            [v93 setFrame:v86, v88 + 100.0, v90, v92];

            uint64_t v35 = self;
            double v36 = UINavigationControllerHideShowBarDuration;
            uint64_t v95 = swift_allocObject();
            *(void *)(v95 + 16) = v25;
            id v124 = sub_10093B6E4;
            uint64_t v125 = v95;
            CGAffineTransform aBlock = _NSConcreteStackBlock;
            uint64_t v121 = *(void *)"";
            double v122 = sub_100679958;
            double v123 = &unk_10151B390;
            unint64_t v38 = _Block_copy(&aBlock);
            id v96 = v25;
            swift_release();
            uint64_t v97 = swift_allocObject();
            *(void *)(v97 + 16) = sub_10093B628;
            *(void *)(v97 + 24) = v23;
            id v124 = sub_10093B9B4;
            uint64_t v125 = v97;
            CGAffineTransform aBlock = _NSConcreteStackBlock;
            uint64_t v121 = *(void *)"";
            unsigned int v41 = &unk_10151B3E0;
            goto LABEL_31;
          }
          goto LABEL_62;
        }
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      unsigned int v98 = self;
      [v98 begin];
      id v124 = sub_10093B628;
      uint64_t v125 = v23;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v121 = *(void *)"";
      double v122 = sub_100679958;
      double v123 = &unk_10151B318;
      uint64_t v99 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v98 setCompletionBlock:v99];
      _Block_release(v99);
      NSString v100 = String._bridgeToObjectiveC()();
      id v101 = [self animationWithKeyPath:v100];

      id v102 = objc_allocWithZone((Class)CAMediaTimingFunction);
      id v103 = v101;
      LODWORD(v104) = 1045220557;
      LODWORD(v105) = 0.25;
      LODWORD(v106) = 1.0;
      id v107 = [v102 initWithControlPoints:v104 :0.0 :v105 :v106];
      [v103 setTimingFunction:v107];

      [v103 setDuration:0.8];
      id v108 = [v25 view];
      if (!v108)
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      unsigned int v109 = v108;
      [v108 alpha];

      Class v110 = CGFloat._bridgeToObjectiveC()().super.super.isa;
      [v103 setFromValue:v110];

      Class v111 = Double._bridgeToObjectiveC()().super.super.isa;
      [v103 setToValue:v111];

      [v103 setFillMode:kCAFillModeForwards];
      [v103 setRemovedOnCompletion:0];
      id v112 = [v25 view];
      if (!v112)
      {
LABEL_64:
        __break(1u);
        return;
      }
      uint64_t v113 = v112;
      id v114 = [v112 layer];

      NSString v115 = String._bridgeToObjectiveC()();
      [v114 addAnimation:v103 forKey:v115];

      uint64_t v116 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v124 = sub_10093B688;
      uint64_t v125 = v116;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v121 = *(void *)"";
      double v122 = sub_100679958;
      double v123 = &unk_10151B340;
      char v117 = _Block_copy(&aBlock);
      swift_release();
      [v98 setCompletionBlock:v117];
      _Block_release(v117);
      [v98 commit];

LABEL_52:
      swift_release();
      return;
    }
    goto LABEL_57;
  }
LABEL_23:
  sub_10093A3D4(v25, v24, v7);

  swift_release();
}

void sub_10093A3D4(char *a1, char a2, char a3)
{
  [*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay] removeFromSuperview];
  id v6 = [a1 view];
  if (!v6)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  char v7 = v6;
  [v6 removeFromSuperview];

  [a1 removeFromParentViewController];
  a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 0;
  if (a2) {
    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep]);
  }
  id v8 = [a1 view];
  if (!v8) {
    goto LABEL_9;
  }
  id v9 = v8;
  [v8 setUserInteractionEnabled:a3 & 1];
}

void sub_10093A4DC(void *a1)
{
  id v2 = [a1 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v3 = v2;
  [v2 frame];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  id v12 = [a1 view];
  if (!v12)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v13 = v12;
  [v12 setFrame:v5, v7 + 100.0, v9, v11];
}

void sub_10093A5B4(void **a1)
{
  id v1 = *a1;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self animationWithKeyPath:v2];

  id v4 = objc_allocWithZone((Class)CAMediaTimingFunction);
  id v5 = v3;
  LODWORD(v6) = 1045220557;
  LODWORD(v7) = 0.25;
  LODWORD(v8) = 1.0;
  id v9 = [v4 initWithControlPoints:v6 :0.0 :v7 :v8];
  [v5 setTimingFunction:v9];

  [v5 setDuration:0.15];
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  [v5 setFromValue:isa];

  Class v11 = Double._bridgeToObjectiveC()().super.super.isa;
  [v5 setToValue:v11];

  id v12 = [v1 layer];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 addAnimation:v5 forKey:v13];
}

void sub_10093A760(void *a1)
{
  id v1 = [a1 view];
  if (v1)
  {
    id v2 = v1;
    [v1 setAlpha:1.0];
  }
  else
  {
    __break(1u);
  }
}

void sub_10093A7C0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep));
  }
}

void sub_10093A8AC()
{
  id v1 = [v0 parentViewController];
  if (!v1) {
    return;
  }
  id v60 = v1;
  id v2 = [v1 view];
  if (v2)
  {
    id v3 = v2;
    [v2 frame];
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    id v12 = [v0 view];
    if (v12)
    {
      NSString v13 = v12;
      id v14 = [v12 window];

      if (v14)
      {
        [v14 safeAreaInsets];
        double v16 = v15;

        double v17 = 20.0;
        if (v16 > 20.0) {
          double v17 = v16;
        }
      }
      else
      {
        double v17 = 20.0;
      }
      id v18 = [v0 view];
      if (v18)
      {
        id v19 = v18;
        id v20 = [v18 window];

        if (v20)
        {
          [v20 safeAreaInsets];
          double v22 = v21;

          if (v22 > 20.0) {
            double v23 = v22;
          }
          else {
            double v23 = 20.0;
          }
        }
        else
        {
          double v23 = 20.0;
        }
        id v24 = [v0 traitCollection];
        uint64_t v25 = self;
        if (objc_msgSend(v25, "crl_phoneUI"))
        {
        }
        else
        {
          unsigned int v26 = [v24 crl_isCompactWidth];

          if (!v26) {
            goto LABEL_23;
          }
        }
        if (objc_msgSend(v25, "crl_phoneUI")
          && objc_msgSend(self, "crl_deviceIsLandscape"))
        {
          id v27 = [v0 view];
          if (v27)
          {
            id v28 = v27;
            [v27 frame];
            double v30 = v29;
            double v32 = v31;

            v62.origin.double x = v5;
            v62.origin.double y = v7;
            v62.size.double width = v9;
            v62.size.double height = v11;
            CGFloat Height = CGRectGetHeight(v62);
            v63.size.double height = v11;
            double v34 = Height;
            v63.origin.double x = v5;
            v63.origin.double y = v7;
            v63.size.double width = v9;
            double Width = CGRectGetWidth(v63);
            id v36 = [v0 view];
            if (v36)
            {
              id v37 = v36;
              [v36 setFrame:CGRectMake(Width - v30 - v23, v34 - v32 - v17 + -16.0, v30, v32)];
              goto LABEL_35;
            }
LABEL_47:
            __break(1u);
            return;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_23:
        id v38 = [v0 traitCollection];
        if (objc_msgSend(v25, "crl_phoneUI"))
        {
        }
        else
        {
          unsigned int v39 = [v38 crl_isCompactWidth];

          if (!v39)
          {
LABEL_28:
            uint64_t v40 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
            if (!v40)
            {
LABEL_36:

              goto LABEL_37;
            }
            id v37 = v40;
            sub_10080B038();
LABEL_35:

            goto LABEL_36;
          }
        }
        if (objc_msgSend(v25, "crl_phoneUI")
          && (objc_msgSend(self, "crl_deviceIsLandscape") & 1) != 0)
        {
          goto LABEL_28;
        }
        CGFloat v41 = v11;
        id v42 = [v0 view];
        if (v42)
        {
          uint64_t v43 = v42;
          [v42 frame];
          double v45 = v44;
          double v47 = v46;
          double v49 = v48;

          v64.origin.double x = v5;
          v64.origin.double y = v7;
          v64.size.double width = v9;
          v64.size.double height = v41;
          double v50 = CGRectGetHeight(v64);
          id v51 = [v0 view];
          if (v51)
          {
            double v52 = v51;
            [v51 setFrame:v45, v50 - v49 - v17, v47, v49];

            id v53 = [v0 view];
            if (v53)
            {
              id v37 = v53;
              [v3 center];
              double v55 = v54;
              id v56 = [v0 view];
              if (v56)
              {
                uint64_t v57 = v56;
                [v56 center];
                double v59 = v58;

                [v37 setCenter:v55, v59];
                goto LABEL_35;
              }
              goto LABEL_45;
            }
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_37:
}

uint64_t sub_10093AD78()
{
  sub_1005498A4(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate, (uint64_t)v9);
  sub_1005057FC((uint64_t *)&unk_101678780);
  type metadata accessor for CRLiOSMiniFormatterPresenter();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    id v2 = *(void **)&v8[OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController];
    if (v2 && (id v3 = [v2 topViewController]) != 0)
    {
      double v4 = v3;
      type metadata accessor for CRLiOSMiniFormatterPopoverContainerViewController();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        double v6 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform49CRLiOSMiniFormatterPopoverContainerViewController_builder);
        id v7 = v6;

        if (v6)
        {

          return 1;
        }
      }
      else
      {
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

id sub_10093AEAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterViewController();
  [super dealloc];
}

uint64_t type metadata accessor for CRLiOSMiniFormatterViewController()
{
  return self;
}

uint64_t sub_10093AFB0(uint64_t a1, uint64_t a2)
{
  sub_10093560C(a1, a2);
  return v2 & 1;
}

uint64_t sub_10093AFD8()
{
  sub_10093B370();
  return v0 & 1;
}

void sub_10093B000()
{
  uint64_t v1 = *v0;
  if (*(unsigned char *)(*v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter) == 1)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears) = 1;
  }
  else
  {
    sub_10050F848((void *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(void *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
    sub_100663E28();
  }
}

uint64_t sub_10093B064()
{
  return 0;
}

uint64_t sub_10093B124()
{
  return 0;
}

void sub_10093B1EC()
{
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter] = 0;
  if (v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] == 1)
  {
    v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] = 0;
    uint64_t v1 = self;
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v0;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = sub_10093B920;
    *(void *)(v3 + 24) = v2;
    v7[4] = sub_1006591F0;
    v7[5] = v3;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = *(void *)"";
    v7[2] = sub_1006D9628;
    v7[3] = &unk_10151B6D8;
    double v4 = _Block_copy(v7);
    uint64_t v5 = v0;
    swift_retain();
    swift_release();
    [v1 performWithoutAnimation:v4];
    _Block_release(v4);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

void sub_10093B370()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CRLiOSMiniFormatterBuilder();
    sub_10093B96C(&qword_1016888A0, (void (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v2 = v19;
    uint64_t v4 = v20;
    uint64_t v3 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v2 = v1 + 56;
    uint64_t v4 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v9 = (unint64_t)(v4 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v3 << 6);
      uint64_t v12 = v3;
      goto LABEL_27;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v2 + 8 * v14);
    uint64_t v12 = v3 + 1;
    if (!v15)
    {
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v9) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v2 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v3 + 3;
        if (v3 + 3 >= v9) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v2 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v3 + 4;
          if (v3 + 4 >= v9) {
            goto LABEL_30;
          }
          unint64_t v15 = *(void *)(v2 + 8 * v12);
          if (!v15)
          {
            uint64_t v16 = v3 + 5;
            while (v9 != v16)
            {
              unint64_t v15 = *(void *)(v2 + 8 * v16++);
              if (v15)
              {
                uint64_t v12 = v16 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_10052E1EC();
            return;
          }
        }
      }
    }
LABEL_26:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_27:
    id v13 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_30;
    }
    while (1)
    {

      uint64_t v3 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for CRLiOSMiniFormatterBuilder();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v17;
        swift_unknownObjectRelease();
        uint64_t v12 = v3;
        uint64_t v10 = v5;
        if (v17) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t sub_10093B5F0()
{
  return _swift_deallocObject(v0, 26, 7);
}

void sub_10093B628()
{
  sub_10093A3D4(*(char **)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25));
}

uint64_t sub_10093B638(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10093B648()
{
  return swift_release();
}

uint64_t sub_10093B650()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10093B688()
{
}

void sub_10093B6A4()
{
  sub_10093A4DC(*(void **)(v0 + 16));
}

uint64_t sub_10093B6AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10093B6E4()
{
  sub_10093A760(*(void **)(v0 + 16));
}

void sub_10093B700()
{
}

void sub_10093B708()
{
  sub_1009384DC(*(char **)(v0 + 16));
}

void sub_10093B710()
{
  sub_100939288(*(char **)(v0 + 16));
}

void sub_10093B718()
{
}

uint64_t sub_10093B720()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10093B758()
{
  sub_100938DA8(*(char **)(v0 + 16));
}

void sub_10093B760(uint64_t a1)
{
  sub_100939014(a1, *(void *)(v1 + 16));
}

uint64_t sub_10093B77C()
{
  return _swift_deallocObject(v0, 56, 7);
}

void sub_10093B7B4()
{
  sub_10093880C(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

void sub_10093B7C4()
{
  uint64_t v1 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_viewDidAppear] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10093B8AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_viewDidAppear) == 1)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter) == 1)
    {
      *(unsigned char *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears) = 1;
    }
    else
    {
      sub_10050F848((void *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(void *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
      sub_100663E28();
    }
  }
}

void sub_10093B920()
{
  sub_10050F848((void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
  sub_100663E28();
}

uint64_t sub_10093B95C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10093B96C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for CRLShadowData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CRLShadowData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CRLShadowData(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 1);
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 20) = a2[5];
  *(_DWORD *)(a1 + 24) = a2[6];
  *(_DWORD *)(a1 + 28) = a2[7];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = a2[10];
  *(_DWORD *)(a1 + 44) = a2[11];
  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[13];
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = a2[16];
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = a2[22];
  *(_DWORD *)(a1 + 92) = a2[23];
  *(_DWORD *)(a1 + 96) = a2[24];
  *(_DWORD *)(a1 + 100) = a2[25];
  *(_DWORD *)(a1 + 104) = a2[26];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CRLShadowData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLShadowData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLShadowData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLShadowData()
{
  return &type metadata for CRLShadowData;
}

unint64_t sub_10093BE60(char a1)
{
  unint64_t result = 0x726F6C6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C676E61;
      break;
    case 2:
      unint64_t result = 0x74657366666FLL;
      break;
    case 3:
      unint64_t result = 0x737569646172;
      break;
    case 4:
      unint64_t result = 0x7974696361706FLL;
      break;
    case 5:
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10093BF2C(char *a1, char *a2)
{
  return qword_101199838[*a1] == qword_101199838[*a2];
}

Swift::Int sub_10093BF50()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_101199838[v1]);
  return Hasher._finalize()();
}

void sub_10093BFA0()
{
  Hasher._combine(_:)(qword_101199838[*v0]);
}

Swift::Int sub_10093BFD8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_101199838[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10093C024@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10093D538(*a1);
  *a2 = result;
  return result;
}

void sub_10093C050(void *a1@<X8>)
{
  *a1 = qword_101199838[*v1];
}

unint64_t sub_10093C068()
{
  return sub_10093BE60(*v0);
}

uint64_t sub_10093C070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10093D564(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10093C098()
{
  return qword_101199838[*v0];
}

uint64_t sub_10093C0B0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10093D538(a1);
  *a2 = result;
  return result;
}

void sub_10093C0D8(void *a1@<X8>)
{
  *a1 = &off_101502CA0;
}

uint64_t sub_10093C0E8(uint64_t a1, uint64_t a2)
{
  return sub_10093CE04(a1, a2, (uint64_t (*)(void))sub_10093C9FC, (uint64_t (*)(void))sub_10093CA54);
}

uint64_t sub_10093C114(uint64_t a1)
{
  unint64_t v2 = sub_10093CA54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10093C150(uint64_t a1)
{
  unint64_t v2 = sub_10093CA54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10093C190(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1005057FC(&qword_101688920);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  int64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_10093CA54();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *(_OWORD *)(v3 + 48);
  v15[2] = *(_OWORD *)(v3 + 32);
  v15[3] = v10;
  v15[4] = *(_OWORD *)(v3 + 64);
  uint64_t v16 = *(void *)(v3 + 80);
  long long v11 = *(_OWORD *)(v3 + 16);
  v15[0] = *(_OWORD *)v3;
  v15[1] = v11;
  char v14 = 0;
  sub_1007B1FF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_10093DE7C(v3 + 104, (uint64_t)v17);
    sub_10093DE7C((uint64_t)v17, (uint64_t)v15);
    char v14 = 5;
    sub_10093DEE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v15[0] = *(void *)(v3 + 120);
    char v14 = 6;
    sub_1005057FC((uint64_t *)&unk_101687A40);
    sub_1005573B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10093C434()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10093C43C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_10093C468())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_10093C488(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  v13[2] = a1[2];
  void v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  long long v9 = a2[4];
  long long v10 = a2[5];
  long long v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return sub_10093C18C(v13, v14) & 1;
}

double sub_10093C4FC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10093D820(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_10093C550(void *a1)
{
  return sub_10093C190(a1);
}

uint64_t sub_10093C59C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093DF38();

  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10093C5F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093DF38();

  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10093C644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10068E3DC();
  unint64_t v7 = sub_10093DF8C();

  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_10093C6B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093DF38();

  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_10093C700()
{
  return CRValueStruct.init(from:)();
}

uint64_t sub_10093C750()
{
  return CRValueStruct.encode(to:)();
}

uint64_t sub_10093C798(uint64_t a1)
{
  unint64_t v2 = sub_10093CB84();

  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

unint64_t sub_10093C7E8()
{
  unint64_t result = qword_1016888A8;
  if (!qword_1016888A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888A8);
  }
  return result;
}

unint64_t sub_10093C840()
{
  unint64_t result = qword_1016888B0;
  if (!qword_1016888B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888B0);
  }
  return result;
}

unint64_t sub_10093C89C()
{
  unint64_t result = qword_1016888B8;
  if (!qword_1016888B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888B8);
  }
  return result;
}

unint64_t sub_10093C8F4()
{
  unint64_t result = qword_1016888C0;
  if (!qword_1016888C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888C0);
  }
  return result;
}

unint64_t sub_10093C94C()
{
  unint64_t result = qword_1016888C8;
  if (!qword_1016888C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888C8);
  }
  return result;
}

unint64_t sub_10093C9A4()
{
  unint64_t result = qword_1016888D0;
  if (!qword_1016888D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888D0);
  }
  return result;
}

unint64_t sub_10093C9FC()
{
  unint64_t result = qword_1016888D8;
  if (!qword_1016888D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888D8);
  }
  return result;
}

unint64_t sub_10093CA54()
{
  unint64_t result = qword_1016888E0;
  if (!qword_1016888E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888E0);
  }
  return result;
}

unint64_t sub_10093CAAC()
{
  unint64_t result = qword_1016888E8;
  if (!qword_1016888E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888E8);
  }
  return result;
}

unint64_t sub_10093CB04()
{
  unint64_t result = qword_1016888F0;
  if (!qword_1016888F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016888F0);
  }
  return result;
}

uint64_t sub_10093CB58()
{
  return sub_1006BFA64(&qword_1016888F8, &qword_101688900);
}

unint64_t sub_10093CB84()
{
  unint64_t result = qword_101688908;
  if (!qword_101688908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688908);
  }
  return result;
}

uint64_t sub_10093CBD8(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_1005057FC(&qword_1016889B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  long long v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_10093E310();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[1] = a2;
    char v12 = 1;
    sub_1005057FC((uint64_t *)&unk_101687A40);
    sub_1005573B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10093CD64()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x6576727563;
  }
}

uint64_t sub_10093CDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10093E4EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10093CDC8(void *a1@<X8>)
{
  *a1 = &off_101503030;
}

uint64_t sub_10093CDD8(uint64_t a1, uint64_t a2)
{
  return sub_10093CE04(a1, a2, (uint64_t (*)(void))sub_10093E2B8, (uint64_t (*)(void))sub_10093E310);
}

uint64_t sub_10093CE04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v7 = a3();
  uint64_t v8 = a4();

  return static CodingKey<>.intCases.getter(a1, a2, v7, v8);
}

uint64_t sub_10093CE70(uint64_t a1)
{
  unint64_t v2 = sub_10093E310();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10093CEAC(uint64_t a1)
{
  unint64_t v2 = sub_10093E310();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10093CEE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10093E5D4(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_10093CF18(void *a1)
{
  return sub_10093CBD8(a1, *(void *)(v1 + 8));
}

uint64_t sub_10093CF38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093E7A4();

  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10093CF8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093E7A4();

  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10093CFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10093E1A8();
  unint64_t v7 = sub_10093E7F8();

  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_10093D050(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10093E7A4();

  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_10093D09C()
{
  return CRValueStruct.init(from:)();
}

uint64_t sub_10093D0EC()
{
  return CRValueStruct.encode(to:)();
}

uint64_t sub_10093D134(uint64_t a1)
{
  unint64_t v2 = sub_10093E440();

  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_10093D180(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v4;
  v16[4] = *(_OWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 80);
  long long v5 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v6;
  v14[4] = *(_OWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v7;
  if ((sub_1007B049C(v16, v14) & 1) == 0
    || *(float *)(a1 + 88) != *(float *)(a2 + 88)
    || *(float *)(a1 + 92) != *(float *)(a2 + 92)
    || *(float *)(a1 + 96) != *(float *)(a2 + 96)
    || *(float *)(a1 + 100) != *(float *)(a2 + 100))
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (!v8) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  if (*(float *)(a1 + 104) != COERCE_FLOAT(*(void *)(a2 + 104))) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  char v10 = sub_100ED60AC(v9, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a2 + 120);

  return sub_100ED60AC(v11, v12);
}

float sub_10093D2D8@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double v4 = sub_1007B16EC([a1 color], (uint64_t)&v35).n128_u64[0];
  int v5 = v35;
  char v6 = v36;
  uint64_t v7 = v37;
  uint64_t v8 = v38;
  uint64_t v9 = v39;
  uint64_t v10 = v40;
  uint64_t v11 = v41;
  uint64_t v33 = v43;
  uint64_t v34 = v42;
  uint64_t v31 = v45;
  uint64_t v32 = v44;
  uint64_t v30 = v46;
  [a1 angle:v4];
  double v13 = v12;
  [a1 offset];
  double v15 = v14;
  [a1 radius];
  double v17 = v16;
  [a1 opacity];
  double v19 = v18;
  if (([a1 isEnabled] & 1) == 0)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowData.swift", 83, 2, 48, (uint64_t)"If a shadow is not enabled, it should be nil", 44, 2u, (uint64_t)&_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowData.swift", 83, 2, 48);
  }
  self;
  uint64_t v20 = (void *)swift_dynamicCastObjCClass();
  if (v20)
  {
    [v20 curve];
    double v22 = v21;

    *(float *)&unsigned int v23 = v22;
    uint64_t v24 = v23;
    uint64_t v25 = &_swiftEmptyDictionarySingleton;
  }
  else
  {

    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  float result = v13;
  float v27 = v15;
  float v28 = v17;
  *(_DWORD *)a2 = v5;
  float v29 = v19;
  *(unsigned char *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v34;
  *(void *)(a2 + 56) = v33;
  *(void *)(a2 + 64) = v32;
  *(void *)(a2 + 72) = v31;
  *(void *)(a2 + 80) = v30;
  *(float *)(a2 + 88) = result;
  *(float *)(a2 + 92) = v27;
  *(float *)(a2 + 96) = v28;
  *(float *)(a2 + 100) = v29;
  *(void *)(a2 + 104) = v24;
  *(void *)(a2 + 112) = v25;
  *(void *)(a2 + 120) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_10093D538(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 7) {
    return 7;
  }
  else {
    return (0x5040302010006uLL >> (8 * (a1 + 1)));
  }
}

uint64_t sub_10093D564(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F6C6F63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7974696361706FLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001012629A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010123A720)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10093D820@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_1005057FC(&qword_101688910);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  id v51 = a1;
  sub_10050F848(a1, v10);
  sub_10093CA54();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v51);
    return swift_bridgeObjectRelease();
  }
  else
  {
    double v49 = a2;
    uint64_t v50 = v6;
    LOBYTE(v52) = 0;
    sub_1007B1FA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v79 = v60;
    int v11 = BYTE4(v60);
    uint64_t v46 = v61;
    uint64_t v47 = v62;
    uint64_t v12 = v64;
    uint64_t v44 = v65;
    uint64_t v45 = v63;
    uint64_t v13 = v67;
    uint64_t v14 = v69;
    uint64_t v42 = v68;
    uint64_t v43 = v66;
    uint64_t v15 = v70;
    char v80 = BYTE4(v60);
    LOBYTE(v60) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    unsigned int v17 = v16;
    int v40 = v11;
    uint64_t v41 = v13;
    LOBYTE(v60) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    unsigned int v19 = v18;
    LOBYTE(v60) = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    unsigned int v21 = v20;
    LOBYTE(v60) = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    unsigned int v23 = v22;
    LOBYTE(v52) = 5;
    sub_10093DDB8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v25 = v60;
    uint64_t v24 = v61;
    sub_1005057FC((uint64_t *)&unk_101687A40);
    char v81 = 6;
    sub_100557304();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v5);
    uint64_t v50 = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v26 = v25;
    uint64_t v39 = v25;
    LODWORD(v25) = v79;
    LODWORD(v52) = v79;
    BYTE4(v52) = v40;
    uint64_t v27 = v48;
    *((void *)&v52 + 1) = v46;
    *(void *)&long long v53 = v47;
    *((void *)&v53 + 1) = v45;
    *(void *)&long long v54 = v48;
    *((void *)&v54 + 1) = v44;
    *(void *)&long long v55 = v43;
    uint64_t v28 = v41;
    *((void *)&v55 + 1) = v41;
    *(void *)&long long v56 = v42;
    uint64_t v29 = v14;
    *((void *)&v56 + 1) = v14;
    *(void *)&long long v57 = v15;
    uint64_t v30 = v15;
    *((void *)&v57 + 1) = __PAIR64__(v19, v17);
    *(void *)&long long v58 = __PAIR64__(v23, v21);
    *((void *)&v58 + 1) = v26;
    *(void *)&long long v59 = v24;
    uint64_t v31 = v50;
    *((void *)&v59 + 1) = v50;
    sub_10068F444((uint64_t)&v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v51);
    LODWORD(v60) = v25;
    BYTE4(v60) = v80;
    uint64_t v61 = v46;
    uint64_t v62 = v47;
    uint64_t v63 = v45;
    uint64_t v64 = v27;
    uint64_t v65 = v44;
    uint64_t v66 = v43;
    uint64_t v67 = v28;
    uint64_t v68 = v42;
    uint64_t v69 = v29;
    uint64_t v70 = v30;
    unsigned int v71 = v17;
    unsigned int v72 = v19;
    unsigned int v73 = v21;
    unsigned int v74 = v23;
    uint64_t v75 = v39;
    uint64_t v76 = v24;
    uint64_t v77 = v31;
    uint64_t result = sub_10093DE0C((uint64_t)&v60);
    long long v33 = v57;
    uint64_t v34 = v49;
    v49[4] = v56;
    v34[5] = v33;
    long long v35 = v59;
    v34[6] = v58;
    v34[7] = v35;
    long long v36 = v53;
    _OWORD *v34 = v52;
    v34[1] = v36;
    long long v37 = v55;
    v34[2] = v54;
    v34[3] = v37;
  }
  return result;
}

unint64_t sub_10093DDB8()
{
  unint64_t result = qword_101688918;
  if (!qword_101688918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688918);
  }
  return result;
}

uint64_t sub_10093DE0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10093DE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101679B98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10093DEE4()
{
  unint64_t result = qword_101688928;
  if (!qword_101688928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688928);
  }
  return result;
}

unint64_t sub_10093DF38()
{
  unint64_t result = qword_101688930;
  if (!qword_101688930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688930);
  }
  return result;
}

unint64_t sub_10093DF8C()
{
  unint64_t result = qword_101688938;
  if (!qword_101688938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688938);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CRLShadowData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10093E0ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLShadowData.CodingKeys()
{
  return &type metadata for CRLShadowData.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLCurvedShadowData()
{
  return &type metadata for CRLCurvedShadowData;
}

unint64_t sub_10093E0F8()
{
  unint64_t result = qword_101688940;
  if (!qword_101688940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688940);
  }
  return result;
}

unint64_t sub_10093E150()
{
  unint64_t result = qword_101688948;
  if (!qword_101688948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688948);
  }
  return result;
}

unint64_t sub_10093E1A8()
{
  unint64_t result = qword_101688950;
  if (!qword_101688950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688950);
  }
  return result;
}

unint64_t sub_10093E208()
{
  unint64_t result = qword_101688958;
  if (!qword_101688958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688958);
  }
  return result;
}

unint64_t sub_10093E260()
{
  unint64_t result = qword_101688960;
  if (!qword_101688960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688960);
  }
  return result;
}

unint64_t sub_10093E2B8()
{
  unint64_t result = qword_101688968;
  if (!qword_101688968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688968);
  }
  return result;
}

unint64_t sub_10093E310()
{
  unint64_t result = qword_101688970;
  if (!qword_101688970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688970);
  }
  return result;
}

unint64_t sub_10093E368()
{
  unint64_t result = qword_101688978;
  if (!qword_101688978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688978);
  }
  return result;
}

unint64_t sub_10093E3C0()
{
  unint64_t result = qword_101688980;
  if (!qword_101688980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688980);
  }
  return result;
}

uint64_t sub_10093E414()
{
  return sub_1006BFA64(&qword_101688988, &qword_101688990);
}

unint64_t sub_10093E440()
{
  unint64_t result = qword_101688998;
  if (!qword_101688998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688998);
  }
  return result;
}

unint64_t sub_10093E498()
{
  unint64_t result = qword_1016889A0;
  if (!qword_1016889A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016889A0);
  }
  return result;
}

uint64_t sub_10093E4EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576727563 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010123A720)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_10093E5D4(void *a1)
{
  uint64_t v3 = sub_1005057FC(&qword_1016889A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10050F848(a1, a1[3]);
  sub_10093E310();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_1005057FC((uint64_t *)&unk_101687A40);
    char v11 = 1;
    sub_100557304();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = (void *)v10[1];
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_10093E7A4()
{
  unint64_t result = qword_1016889B8;
  if (!qword_1016889B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016889B8);
  }
  return result;
}

unint64_t sub_10093E7F8()
{
  unint64_t result = qword_1016889C0;
  if (!qword_1016889C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016889C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CRLCurvedShadowData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10093E918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLCurvedShadowData.CodingKeys()
{
  return &type metadata for CRLCurvedShadowData.CodingKeys;
}

unint64_t sub_10093E954()
{
  unint64_t result = qword_1016889C8;
  if (!qword_1016889C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016889C8);
  }
  return result;
}

uint64_t sub_10093E9A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 5;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 < 9)
    {
      unint64_t v4 = 1;
      goto LABEL_17;
    }
    if (v1 >= 0x21)
    {
      unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v7 = (uint8x16_t)vdupq_n_s8(v2);
      uint64_t v8 = (uint8x16_t *)(a1 + 49);
      unint64_t v9 = v3 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v10 = v7;
      do
      {
        uint8x16_t v7 = vmaxq_u8(v7, v8[-1]);
        uint8x16_t v10 = vmaxq_u8(v10, *v8);
        v8 += 2;
        v9 -= 32;
      }
      while (v9);
      uint8x16_t v11 = vmaxq_u8(v7, v10);
      v11.i8[0] = vmaxvq_u8(v11);
      uint64_t v2 = v11.u32[0];
      if (v3 == v6) {
        return v2;
      }
      if ((v3 & 0x18) == 0)
      {
        unint64_t v4 = v6 | 1;
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint8x8_t v12 = (uint8x8_t)vdup_n_s8(v2);
    uint64_t v13 = (uint8x8_t *)(v6 + a1 + 33);
    unint64_t v14 = v6 - (v3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v15 = *v13++;
      uint8x8_t v12 = vmax_u8(v12, v15);
      v14 += 8;
    }
    while (v14);
    v12.i8[0] = vmaxv_u8(v12);
    uint64_t v2 = v12.u32[0];
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8)) {
      return v2;
    }
LABEL_17:
    unint64_t v16 = v1 - v4;
    unsigned int v17 = (unsigned __int8 *)(v4 + a1 + 32);
    do
    {
      unsigned int v19 = *v17++;
      unsigned int v18 = v19;
      if (v2 <= v19) {
        uint64_t v2 = v18;
      }
      else {
        uint64_t v2 = v2;
      }
      --v16;
    }
    while (v16);
  }
  return v2;
}

uint64_t sub_10093EA98()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (void *)v0[3];
  *uint64_t v8 = v9;
  uint8x16_t v10 = *(void (**)(void, __n128))(v4 + 104);
  unsigned int v45 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v46 = (void (*)(void *, void, uint64_t))v10;
  v10(v8, v6);
  swift_retain();
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v47 = *(void (**)(void *, uint64_t))(v4 + 8);
  v47(v8, v3);
  swift_release();
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  type metadata accessor for SQLiteStatement();
  uint64_t inited = swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD000000000000013, 0x8000000101263310);
  swift_release();
  if (!v1)
  {
    uint64_t v43 = 0;
    uint8x8_t v15 = *(void **)(*(void *)(v14 + 16) + 32);
    *uint64_t v8 = v15;
    v46(v8, v45, v3);
    id v16 = v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    v47(v8, v3);
    if (v15)
    {
      type metadata accessor for SQLiteRowIterator();
      unsigned int v17 = (void *)swift_initStackObject();
      v17[4] = 0;
      v17[5] = 1;
      v17[2] = v14;
      _OWORD v17[3] = 0;
      uint64_t v44 = v14;
      uint64_t v18 = sub_10079ECE0();
      swift_setDeallocating();
      sub_1007A0344(v17[3], v17[4], v17[5]);
      if (!v18 || (uint64_t v19 = sub_10079BE94(0, v18), v21 = v20, swift_release(), (v21 & 1) != 0))
      {
        uint64_t inited = 0;
        uint64_t v22 = v44;
      }
      else
      {
        uint64_t v22 = v44;
        if (v19)
        {
          if (v19 != 1)
          {
            uint64_t v28 = (void *)v2[4];
            uint64_t v41 = sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t v29 = swift_initStackObject();
            *(_OWORD *)(v29 + 16) = xmmword_10117E810;
            *(void *)(v29 + 56) = &type metadata for Int;
            *(void *)(v29 + 64) = &protocol witness table for Int;
            *(void *)(v29 + 32) = v19;
            uint64_t v40 = v29 + 32;
            uint64_t v42 = v19;
            id v30 = v28;
            uint64_t v31 = static os_log_type_t.error.getter();
            sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v31, (uint64_t)"Invalid schema version detected: %{public}d", 43, 2, v29);
            swift_setDeallocating();
            uint64_t v43 = sub_1005057FC(&qword_101672B50);
            swift_arrayDestroy();

            uint64_t v32 = swift_initStackObject();
            *(_OWORD *)(v32 + 16) = xmmword_10117D8C0;
            *(void *)(v32 + 32) = v19;
            uint64_t v41 = v32 + 32;
            *(void *)(v32 + 56) = &type metadata for Int;
            *(void *)(v32 + 64) = &protocol witness table for Int;
            uint64_t v34 = v2[5];
            uint64_t v33 = v2[6];
            *(void *)(v32 + 96) = &type metadata for String;
            *(void *)(v32 + 104) = sub_100528BE4();
            *(void *)(v32 + 72) = v34;
            *(void *)(v32 + 80) = v33;
            swift_bridgeObjectRetain();
            sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117, (uint64_t)"Invalid schema version detected: %{public}d for database %{public}@", 67, 2u, v32);
            sub_1005598CC(v32, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117);
            uint64_t v35 = v44;
            swift_setDeallocating();
            swift_arrayDestroy();
            sub_1009479DC();
            swift_allocError();
            *long long v36 = v42;
            swift_willThrow();
            long long v37 = *(void **)(*(void *)(v35 + 16) + 32);
            *uint64_t v8 = v37;
            v46(v8, v45, v3);
            id v38 = v37;
            LOBYTE(v37) = _dispatchPreconditionTest(_:)();
            v47(v8, v3);
            if (v37)
            {
              uint64_t inited = v35 + 24;
              swift_beginAccess();
              uint64_t v39 = *(sqlite3_stmt **)(v35 + 24);
              if (v39)
              {
                sqlite3_finalize(v39);
                *(void *)uint64_t inited = 0;
              }
              goto LABEL_13;
            }
LABEL_23:
            __break(1u);
          }
          uint64_t inited = 1;
        }
        else
        {
          uint64_t inited = 0;
        }
      }
      unsigned int v23 = *(void **)(*(void *)(v22 + 16) + 32);
      *uint64_t v8 = v23;
      v46(v8, v45, v3);
      id v24 = v23;
      char v25 = _dispatchPreconditionTest(_:)();
      v47(v8, v3);
      if (v25)
      {
        swift_beginAccess();
        uint64_t v26 = *(sqlite3_stmt **)(v22 + 24);
        if (v26)
        {
          sqlite3_finalize(v26);
          *(void *)(v22 + 24) = 0;
        }
LABEL_13:
        swift_release();
        return inited;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  return inited;
}

uint64_t sub_10093F05C()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (void *)((char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *uint64_t v7 = v8;
  unint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v43 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v44 = (void (*)(void *, void, uint64_t))v9;
  uint64_t v45 = v3 + 104;
  v9(v7, v5);
  uint8x16_t v10 = v0;
  id v11 = v8;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v3 + 8);
  v13(v7, v2);

  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)&v10[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000013, 0x8000000101263310);
  swift_release();
  if (!v1)
  {
    uint64_t v42 = v10;
    unsigned int v17 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v7 = v17;
    v44(v7, v43, v2);
    id v18 = v17;
    LOBYTE(v17) = _dispatchPreconditionTest(_:)();
    v13(v7, v2);
    if (v17)
    {
      uint64_t v41 = v13;
      type metadata accessor for SQLiteRowIterator();
      uint64_t inited = (void *)swift_initStackObject();
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v16;
      inited[3] = 0;
      uint64_t v20 = sub_10079ECE0();
      swift_setDeallocating();
      sub_1007A0344(inited[3], inited[4], inited[5]);
      if (v20)
      {
        uint64_t v21 = sub_10079BE94(0, v20);
        char v23 = v22;
        swift_release();
        if (v23) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = v21;
        }
      }
      unint64_t v24 = sub_100AB1EB4(v20);
      if (v24 != 5)
      {
        uint64_t v14 = v24;
        long long v36 = *(void **)(*(void *)(v16 + 16) + 32);
        *uint64_t v7 = v36;
        v44(v7, v43, v2);
        id v37 = v36;
        LOBYTE(v36) = _dispatchPreconditionTest(_:)();
        v41(v7, v2);
        if (v36)
        {
          swift_beginAccess();
          id v38 = *(sqlite3_stmt **)(v16 + 24);
          if (v38)
          {
            sqlite3_finalize(v38);
            *(void *)(v16 + 24) = 0;
          }
          goto LABEL_12;
        }
LABEL_21:
        __break(1u);
      }
      uint64_t v40 = v20;
      char v25 = *(void **)&v42[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_logCategory];
      v39[0] = sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_10117E810;
      *(void *)(v26 + 56) = &type metadata for Int;
      *(void *)(v26 + 64) = &protocol witness table for Int;
      *(void *)(v26 + 32) = v20;
      id v27 = v25;
      uint64_t v28 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v27, (uint64_t)&_mh_execute_header, v28, (uint64_t)"Invalid schema version detected: %{public}d", 43, 2, v26);
      swift_setDeallocating();
      v39[1] = sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v14 = swift_initStackObject();
      *(_OWORD *)(v14 + 16) = xmmword_10117D8C0;
      *(void *)(v14 + 56) = &type metadata for Int;
      *(void *)(v14 + 64) = &protocol witness table for Int;
      *(void *)(v14 + 32) = v40;
      uint64_t v30 = *(void *)&v42[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeName];
      uint64_t v29 = *(void *)&v42[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeName + 8];
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = sub_100528BE4();
      *(void *)(v14 + 72) = v30;
      *(void *)(v14 + 80) = v29;
      swift_bridgeObjectRetain();
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117, (uint64_t)"Invalid schema version detected: %{public}d for database %{public}@", 67, 2u, v14);
      sub_1005598CC(v14, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117);
      swift_setDeallocating();
      swift_arrayDestroy();
      sub_1009479DC();
      swift_allocError();
      uint64_t *v31 = v40;
      swift_willThrow();
      uint64_t v32 = *(void **)(*(void *)(v16 + 16) + 32);
      *uint64_t v7 = v32;
      v44(v7, v43, v2);
      id v33 = v32;
      LOBYTE(v32) = _dispatchPreconditionTest(_:)();
      v41(v7, v2);
      if (v32)
      {
        swift_beginAccess();
        uint64_t v34 = *(sqlite3_stmt **)(v16 + 24);
        if (v34)
        {
          sqlite3_finalize(v34);
          *(void *)(v16 + 24) = 0;
        }
LABEL_12:
        swift_release();
        return v14;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return v14;
}

uint64_t sub_10093F63C(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  unint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint8x16_t v10 = *(void **)(v1 + 24);
  void *v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v31 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v31)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  swift_retain();
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v32 = *(void (**)(void *, uint64_t))(v5 + 8);
  v32(v9, v4);
  swift_release();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v1 + 16);
  unint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  unint64_t v34 = 0xD000000000000016;
  unint64_t v35 = 0x8000000101263260;
  uint64_t v33 = a1;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = v34;
  uint64_t v16 = v35;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v17 = sub_10079FC40(v13, v15, v16);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v19 = *(void **)(*(void *)(v17 + 16) + 32);
  void *v9 = v19;
  v31(v9, v11, v4);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  v32(v9, v4);
  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v21 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess();
  int v22 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v22 != 101) {
    goto LABEL_7;
  }
  char v23 = *(void **)(*(void *)(v17 + 16) + 32);
  void *v9 = v23;
  v31(v9, v11, v4);
  id v24 = v23;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  int v22 = ((uint64_t (*)(void *, uint64_t))v32)(v9, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    int v25 = v22;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = v25;
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0;
    swift_willThrow();
    id v27 = *(void **)(*(void *)(v17 + 16) + 32);
    void *v9 = v27;
    v31(v9, v11, v4);
    id v28 = v27;
    char v29 = _dispatchPreconditionTest(_:)();
    v32(v9, v4);
    if (v29) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v21)
  {
    sqlite3_finalize(*v21);
    *uint64_t v21 = 0;
  }
  return swift_release();
}

uint64_t sub_10093F9E0(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  unint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint8x16_t v10 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  void *v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v32 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v32)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v12 = v1;
  id v13 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v33 = *(void (**)(void *, uint64_t))(v5 + 8);
  v33(v9, v4);

  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  unint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  unint64_t v35 = 0xD000000000000016;
  unint64_t v36 = 0x8000000101263260;
  uint64_t v34 = a1;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v35;
  uint64_t v17 = v36;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v18 = sub_10079FC40(v14, v16, v17);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  id v20 = *(void **)(*(void *)(v18 + 16) + 32);
  void *v9 = v20;
  v32(v9, v11, v4);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  v33(v9, v4);
  if ((v20 & 1) == 0) {
    goto LABEL_13;
  }
  int v22 = (sqlite3_stmt **)(v18 + 24);
  swift_beginAccess();
  int v23 = sqlite3_step(*(sqlite3_stmt **)(v18 + 24));
  if (v23 != 101) {
    goto LABEL_7;
  }
  id v24 = *(void **)(*(void *)(v18 + 16) + 32);
  void *v9 = v24;
  v32(v9, v11, v4);
  id v25 = v24;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  int v23 = ((uint64_t (*)(void *, uint64_t))v33)(v9, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    int v26 = v23;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = v26;
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0;
    swift_willThrow();
    id v28 = *(void **)(*(void *)(v18 + 16) + 32);
    void *v9 = v28;
    v32(v9, v11, v4);
    id v29 = v28;
    char v30 = _dispatchPreconditionTest(_:)();
    v33(v9, v4);
    if (v30) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v22)
  {
    sqlite3_finalize(*v22);
    *int v22 = 0;
  }
  return swift_release();
}

uint64_t sub_10093FD98(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint8x16_t v10 = *(void **)(v3 + 24);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  swift_retain();
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = swift_release();
  if (v10)
  {
    uint64_t v13 = *(void *)(v3 + 16);
    type metadata accessor for SQLTransaction();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v13;
    *(unsigned char *)(inited + 24) = 0;
    swift_retain();
    uint64_t v15 = sub_10079EF08();
    if (!v2)
    {
      if (a1(v15))
      {
        sub_10079F3C8();
      }
      else
      {
        id v16 = *(id *)(v3 + 32);
        uint64_t v17 = static os_log_type_t.default.getter();
        sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"The block of SQL code returned false. This means we should roll back the transaction", 84, 2, (uint64_t)_swiftEmptyArrayStorage);

        sub_10079F70C();
      }
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1009400C8(uint64_t (*a1)(uint64_t))
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  uint8x16_t v10 = v1;
  id v11 = v9;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);

  if (v12)
  {
    uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
    type metadata accessor for SQLTransaction();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v13;
    *(unsigned char *)(inited + 24) = 0;
    swift_retain();
    uint64_t v15 = sub_10079EF08();
    if (!v2)
    {
      if (a1(v15))
      {
        sub_10079F3C8();
      }
      else
      {
        id v16 = *(id *)&v10[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_logCategory];
        uint64_t v17 = static os_log_type_t.default.getter();
        sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"The block of SQL code returned false. This means we should roll back the transaction", 84, 2, (uint64_t)_swiftEmptyArrayStorage);

        sub_10079F70C();
      }
    }
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_100940428(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  unsigned __int8 v8 = a1 & 1;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (void *)((char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned __int8 v52 = v8;
  id v51 = v4;
  uint64_t v15 = (void *)v4[3];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t, __n128))(v10 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v9, v12);
  swift_retain();
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v14, v9);
  swift_release();
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v48 = a4;
  uint64_t v17 = v51;
  uint64_t v18 = (void *)v51[4];
  uint64_t v19 = sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  long long v47 = xmmword_10117E810;
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &protocol witness table for Int;
  uint64_t v21 = v52;
  *(void *)(inited + 32) = v52;
  id v22 = v18;
  uint64_t v23 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v22, (uint64_t)&_mh_execute_header, v23, (uint64_t)"Migrating database to schema version %{public}d", 47, 2, inited);
  swift_setDeallocating();
  uint64_t v50 = sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  char v24 = sub_10093EA98();
  if (v5) {
    return;
  }
  char v25 = v24;
  uint64_t v26 = v19;
  uint64_t v27 = a2 & 1;
  v46[1] = v26;
  a2 = swift_initStackObject();
  *(_OWORD *)(a2 + 16) = xmmword_10117E800;
  *(void *)(a2 + 32) = v25 & 1;
  *(void *)(a2 + 56) = &type metadata for Int;
  *(void *)(a2 + 64) = &protocol witness table for Int;
  *(void *)(a2 + 72) = v27;
  *(void *)(a2 + 96) = &type metadata for Int;
  *(void *)(a2 + 104) = &protocol witness table for Int;
  *(void *)(a2 + 136) = &type metadata for Int;
  *(void *)(a2 + 144) = &protocol witness table for Int;
  *(void *)(a2 + 112) = v21;
  uint64_t v29 = v17[5];
  uint64_t v28 = v17[6];
  *(void *)(a2 + 176) = &type metadata for String;
  v46[0] = sub_100528BE4();
  *(void *)(a2 + 184) = v46[0];
  *(void *)(a2 + 152) = v29;
  *(void *)(a2 + 160) = v28;
  if ((v25 & 1) != v27)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v34 = 2;
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 189, (uint64_t)"Current schema version %{public}d doesn't match expected version %{public}d before migration to %{public}d in %{public}@ database", 129, 2u, a2);
    sub_100586FD4(a2, (uint64_t)"Current schema version %{public}d doesn't match expected version %{public}d before migration to %{public}d in %{public}@ database");
    uint64_t v42 = a2;
    uint64_t v43 = 189;
    goto LABEL_9;
  }
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_arrayDestroy();
  __chkstk_darwin(v30, v31);
  sub_10093FD98((uint64_t (*)(uint64_t))sub_100947A30);
  uint64_t v32 = v51;
  char v33 = sub_10093EA98();
  uint64_t v34 = swift_initStackObject();
  *(_OWORD *)(v34 + 16) = xmmword_10117DF40;
  *(void *)(v34 + 32) = v33 & 1;
  *(void *)(v34 + 56) = &type metadata for Int;
  *(void *)(v34 + 64) = &protocol witness table for Int;
  *(void *)(v34 + 96) = &type metadata for Int;
  *(void *)(v34 + 104) = &protocol witness table for Int;
  uint64_t v35 = v52;
  *(void *)(v34 + 72) = v52;
  uint64_t v36 = v32[5];
  uint64_t v37 = v32[6];
  *(void *)(v34 + 136) = &type metadata for String;
  *(void *)(v34 + 144) = v46[0];
  *(void *)(v34 + 112) = v36;
  *(void *)(v34 + 120) = v37;
  uint64_t v49 = v33 & 1;
  if (v49 != v35)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 207, (uint64_t)"Queried schema version %{public}d does not match expected (%{public}d) after migration transaction in %{public}@ database", 121, 2u, v34);
      sub_100586FD4(v34, (uint64_t)"Queried schema version %{public}d does not match expected (%{public}d) after migration transaction in %{public}@ database");
      uint64_t v42 = v34;
      uint64_t v43 = 207;
LABEL_9:
      sub_1005871AC(v42, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, v43);
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v44, v45);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  swift_arrayDestroy();
  id v38 = (void *)v32[4];
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = v47;
  *(void *)(v39 + 56) = &type metadata for Int;
  *(void *)(v39 + 64) = &protocol witness table for Int;
  *(void *)(v39 + 32) = v49;
  id v40 = v38;
  uint64_t v41 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v40, (uint64_t)&_mh_execute_header, v41, (uint64_t)"Successfully migrated database to schema version %{public}d", 59, 2, v39);
  swift_setDeallocating();
  swift_arrayDestroy();
}

uint64_t sub_100940A08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void *)(a1 + 16);
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10079FC40(v14, a2, a3);
  swift_release();
  if (v4) {
    return 1;
  }
  HIDWORD(v30) = a4;
  id v16 = *(void **)(*(void *)(v15 + 16) + 32);
  *uint64_t v13 = v16;
  uint64_t v17 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v32 = *(void (**)(void *, uint64_t, uint64_t))(v10 + 104);
  v32(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v18 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  char v33 = *(void (**)(void *, uint64_t))(v10 + 8);
  v33(v13, v9);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v31 = (sqlite3_stmt **)(v15 + 24);
  swift_beginAccess();
  int v19 = sqlite3_step(*(sqlite3_stmt **)(v15 + 24));
  if (v19 == 101)
  {
    id v20 = *(void **)(a1 + 24);
    *uint64_t v13 = v20;
    v32(v13, v17, v9);
    swift_retain();
    id v21 = v20;
    LOBYTE(v20) = _dispatchPreconditionTest(_:)();
    v33(v13, v9);
    swift_release();
    if (v20)
    {
      sub_10093F63C(BYTE4(v30) & 1);
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  int v22 = v19;
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v23 = v22;
  *(void *)(v23 + 8) = 0xD000000000000020;
  *(void *)(v23 + 16) = 0x8000000101263230;
  swift_willThrow();
  char v24 = *(void **)(*(void *)(v15 + 16) + 32);
  *uint64_t v13 = v24;
  v32(v13, v17, v9);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  v33(v13, v9);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    uint64_t v26 = *(void **)(*(void *)(v15 + 16) + 32);
    *uint64_t v13 = v26;
    v32(v13, v17, v9);
    id v27 = v26;
    LOBYTE(v26) = _dispatchPreconditionTest(_:)();
    v33(v13, v9);
    if (v26) {
      goto LABEL_9;
    }
LABEL_15:
    __break(1u);
  }
LABEL_9:
  uint64_t v28 = v31;
  if (*v31)
  {
    sqlite3_finalize(*v31);
    *uint64_t v28 = 0;
  }
  swift_release();
  return 1;
}

void sub_100940DEC()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (void (**)(void *, uint64_t, uint64_t))((char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v0 + 24);
  void *v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  unsigned int v82 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v82)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  swift_retain();
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  id v83 = *(void (**)(void *, uint64_t))(v5 + 8);
  v83(v9, v4);
  swift_release();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(v3 + 16);
  swift_retain();
  sub_10079D07C(3178502);
  swift_release();
  if (v1) {
    return;
  }
  char v80 = 0;
  uint64_t v81 = v3;
  uint64_t v14 = *(void **)(v13 + 32);
  void *v9 = v14;
  uint64_t v2 = v82;
  v82(v9, v11, v4);
  swift_retain();
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  v83(v9, v4);
  if ((v14 & 1) == 0) {
    goto LABEL_29;
  }
  sub_1007A0098(v13, 0xD00000000000001CLL, 0x8000000101262CC0);
  swift_release();
  swift_retain();
  sub_10079C23C();
  swift_release();
  id v16 = *(void **)(v13 + 32);
  void *v9 = v16;
  v2(v9, v11, v4);
  swift_retain();
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  v83(v9, v4);
  if ((v16 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_1007A0098(v13, 0xD00000000000001ALL, 0x8000000101262CE0);
  swift_release();
  id v18 = *(void **)(v13 + 32);
  void *v9 = v18;
  v2(v9, v11, v4);
  swift_retain();
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  v83(v9, v4);
  if ((v20 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1007A0098(v13, 0xD000000000000019, 0x8000000101262D00);
  swift_release();
  uint64_t v21 = v81;
  id v22 = *(id *)(v81 + 32);
  uint64_t v23 = static os_log_type_t.info.getter();
  sub_100BAC898((uint64_t)v22, (uint64_t)&_mh_execute_header, v23, (uint64_t)"Going to migrate schema version if necessary", 44, 2, (uint64_t)_swiftEmptyArrayStorage);

  char v24 = v80;
  char v25 = sub_10093EA98();
  uint64_t v2 = v24;
  if (v24)
  {
LABEL_32:
    double v88 = (void (*)(void, void, void))v2;
    swift_errorRetain();
    sub_1005057FC(&qword_101672BD0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v56 = v87;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117DF40;
    uint64_t v59 = *(void *)(v81 + 40);
    uint64_t v58 = *(void *)(v81 + 48);
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v60 = sub_100528BE4();
    *(void *)(inited + 32) = v59;
    *(void *)(inited + 40) = v58;
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 104) = &protocol witness table for Int;
    *(void *)(inited + 64) = v60;
    *(void *)(inited + 72) = v56;
    unsigned __int8 v75 = 0;
    uint64_t v76 = 1;
    uint64_t v77 = &byte_101502951;
    do
    {
      unsigned __int8 v79 = *v77++;
      unsigned __int8 v78 = v79;
      if (v79 & ~v75) {
        unsigned __int8 v75 = v78;
      }
      --v76;
    }
    while (v76);
    *(void *)(inited + 136) = &type metadata for Int;
    *(void *)(inited + 144) = &protocol witness table for Int;
    *(void *)(inited + 112) = v75 & 1;
    swift_bridgeObjectRetain();
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 233, (uint64_t)"Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.", 255, 2u, inited);
    sub_100586FD4(inited, (uint64_t)"Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.");
    uint64_t v61 = inited;
    uint64_t i = 233;
    goto LABEL_35;
  }
  int v26 = v25 & 1;
  int v27 = 0;
  uint64_t v28 = 1;
  uint64_t v29 = &byte_1015028B1;
  do
  {
    int v31 = *v29++;
    int v30 = v31;
    if (v31 & ~(_BYTE)v27) {
      int v27 = v30;
    }
    --v28;
  }
  while (v28);
  if ((((v26 == 0) ^ v27) & 1) == 0)
  {
    sub_1009417A8(v26);
    char v41 = sub_10093EA98();
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v42 = swift_initStackObject();
    *(_OWORD *)(v42 + 16) = xmmword_10117DF40;
    *(void *)(v42 + 32) = v41 & 1;
    *(void *)(v42 + 56) = &type metadata for Int;
    *(void *)(v42 + 64) = &protocol witness table for Int;
    uint64_t v43 = v42;
    unsigned __int8 v44 = 0;
    uint64_t v45 = 1;
    uint64_t v46 = &byte_101502901;
    do
    {
      unsigned __int8 v48 = *v46++;
      unsigned __int8 v47 = v48;
      if (v48 & ~v44) {
        unsigned __int8 v44 = v47;
      }
      --v45;
    }
    while (v45);
    *(void *)(v42 + 96) = &type metadata for Int;
    *(void *)(v42 + 104) = &protocol witness table for Int;
    *(void *)(v42 + 72) = v44 & 1;
    uint64_t v50 = *(void *)(v21 + 40);
    uint64_t v49 = *(void *)(v21 + 48);
    *(void *)(v42 + 136) = &type metadata for String;
    *(void *)(v42 + 144) = sub_100528BE4();
    *(void *)(v43 + 112) = v50;
    *(void *)(v43 + 120) = v49;
    unsigned __int8 v51 = 0;
    uint64_t v52 = 1;
    long long v53 = &byte_101502929;
    do
    {
      unsigned __int8 v55 = *v53++;
      unsigned __int8 v54 = v55;
      if (v55 & ~v51) {
        unsigned __int8 v51 = v54;
      }
      --v52;
    }
    while (v52);
    if (((v41 & 1) == 0) != (v51 & 1))
    {
      swift_setDeallocating();
      swift_bridgeObjectRetain();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
      return;
    }
    swift_bridgeObjectRetain();
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 246, (uint64_t)"Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{public}d for %{public}@ database", 142, 2u, v43);
    sub_100586FD4(v43, (uint64_t)"Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{public}d for %{public}@ database");
    uint64_t v61 = v43;
    for (uint64_t i = 246; ; uint64_t i = 235)
    {
LABEL_35:
      sub_1005871AC(v61, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, i);
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v63, v64);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_36:
      swift_errorRelease();
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v65 = swift_initStackObject();
      *(_OWORD *)(v65 + 16) = xmmword_10117DF40;
      uint64_t v66 = *(void *)(v81 + 40);
      uint64_t v67 = *(void *)(v81 + 48);
      *(void *)(v65 + 56) = &type metadata for String;
      unint64_t v68 = sub_100528BE4();
      *(void *)(v65 + 64) = v68;
      *(void *)(v65 + 32) = v66;
      *(void *)(v65 + 40) = v67;
      swift_getErrorValue();
      uint64_t v69 = v85;
      uint64_t v70 = v86;
      swift_bridgeObjectRetain();
      uint64_t v71 = Error.publicDescription.getter(v69, v70);
      *(void *)(v65 + 96) = &type metadata for String;
      *(void *)(v65 + 104) = v68;
      *(void *)(v65 + 72) = v71;
      *(void *)(v65 + 80) = v72;
      swift_getErrorValue();
      uint64_t v73 = Error.fullDescription.getter(v84);
      *(void *)(v65 + 136) = &type metadata for String;
      *(void *)(v65 + 144) = v68;
      *(void *)(v65 + 112) = v73;
      *(void *)(v65 + 120) = v74;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 235, (uint64_t)"Encountered an error while attempting to open the %{public}@ database: unable to fetch schema version. Error: %{public}@ %@", 123, 2u, v65);
      sub_100586FD4(v65, (uint64_t)"Encountered an error while attempting to open the %{public}@ database: unable to fetch schema version. Error: %{public}@ %@");
      uint64_t v61 = v65;
    }
  }
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = xmmword_10117E810;
  uint64_t v33 = v32;
  unsigned __int8 v34 = 0;
  uint64_t v35 = 1;
  uint64_t v36 = &byte_1015028D9;
  do
  {
    unsigned __int8 v38 = *v36++;
    unsigned __int8 v37 = v38;
    if (v38 & ~v34) {
      unsigned __int8 v34 = v37;
    }
    --v35;
  }
  while (v35);
  *(void *)(v32 + 56) = &type metadata for Int;
  *(void *)(v32 + 64) = &protocol witness table for Int;
  *(void *)(v32 + 32) = v34 & 1;
  id v39 = v22;
  uint64_t v40 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v39, (uint64_t)&_mh_execute_header, v40, (uint64_t)"No need to migrate database schema, already on latest version %{public}d", 72, 2, v33);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();
}

uint64_t sub_1009417A8(char a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + 24);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  swift_retain();
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v9, v4);
  uint64_t result = swift_release();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = a1 & 1;
  uint64_t result = sub_100E39C90(v13, (uint64_t)&off_101502868);
  if (v14)
  {
    uint64_t v21 = *(void **)(v1 + 32);
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    *(void *)(inited + 56) = &type metadata for Int;
    *(void *)(inited + 64) = &protocol witness table for Int;
    *(void *)(inited + 32) = v13;
    id v23 = v21;
    uint64_t v24 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v24, (uint64_t)"Received invalid currentSchema during _migrateSchema: %{public}d", 64, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    sub_1009479DC();
    swift_allocError();
    *char v25 = v13;
    return swift_willThrow();
  }
  uint64_t v15 = result + 1;
  if (__OFADD__(result, 1)) {
    goto LABEL_13;
  }
  if (v15 >= 2) {
    return result;
  }
  if (v15 < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v16 = *((unsigned __int8 *)&off_101502868 + v15 + 32);
  unint64_t v17 = sub_100941DA8(*((unsigned char *)&off_101502868 + v15 + 32));
  sub_100940428(v16, v13, v17, v18);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v15 != 1)
  {
    unint64_t v19 = sub_100941DA8(1);
    sub_100940428(1, v16, v19, v20);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100941A5C()
{
}

void *sub_100941A80(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if (qword_10166FBF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v19 = (void *)static OS_os_log.sideStore;
  v3[4] = static OS_os_log.sideStore;
  v3[5] = 1701079411;
  v3[6] = 0xE400000000000000;
  v3[7] = _swiftEmptyDictionarySingleton;
  sub_1005F7C80(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    id v20 = v19;
    sub_100522F00((uint64_t)v9, &qword_101672E90);
    if (qword_10166F128 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_100556B74(v10, (uint64_t)qword_10171A928);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v18, v21, v10);
    sub_100522F00(a1, &qword_101672E90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    id v22 = v19;
    URL.appendingPathComponent(_:)();
    sub_100522F00(a1, &qword_101672E90);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v3[3] = a2;
  type metadata accessor for SQLiteDatabase();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0;
  *(unsigned char *)(v23 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23 + OBJC_IVAR____TtC8Freeform14SQLiteDatabase_url, v18, v10);
  *(void *)(v23 + 32) = a2;
  v3[2] = v23;
  id v24 = a2;
  return v3;
}

unint64_t sub_100941DA8(char a1)
{
  if ((a1 & 1) == 0) {
    return 0xD000000000000015;
  }
  _StringGuts.grow(_:)(112);
  v2._countAndFlagsBits = 0x5420455441455243;
  v2._object = (void *)0xED000020454C4241;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000101262B80;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 10272;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._object = (void *)0x8000000101262BA0;
  v5._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x8000000101263280;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x6E6F6973726576;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000020;
  v8._object = (void *)0x80000001012632A0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x7265746E756F63;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  v10._object = (void *)0x80000001012632D0;
  String.append(_:)(v10);
  return 0;
}

void sub_100941F18(void *a1@<X8>)
{
  *a1 = &off_101502BA0;
}

uint64_t sub_100941F28(unsigned char *a1, unsigned char *a2)
{
  return *a2 & ~*a1 & 1;
}

uint64_t sub_100941F3C(unsigned char *a1, unsigned char *a2)
{
  return *a2 & 1 | ((*a1 & 1) == 0);
}

uint64_t sub_100941F50(unsigned char *a1, unsigned char *a2)
{
  return *a1 & 1 | ((*a2 & 1) == 0);
}

uint64_t sub_100941F64(unsigned char *a1, unsigned char *a2)
{
  return *a1 & ~*a2 & 1;
}

void sub_100941F78(void *a1@<X8>)
{
  *a1 = &off_101502BF0;
}

Swift::Int sub_100941F88()
{
  return Hasher._finalize()();
}

uint64_t sub_100942048()
{
  type metadata accessor for UUID();
  sub_100948528((unint64_t *)&qword_1016770E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100942104()
{
  return Hasher._finalize()();
}

void sub_1009421C4(void *a1@<X8>)
{
  *a1 = &off_101502BC8;
}

void sub_1009421D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5, v6);
  Swift::String v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v14 = *(void **)(v2 + 24);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v16 = (uint64_t *)(v2 + 56);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v2 + 56);
  if (!*(void *)(v17 + 16) || (unint64_t v18 = sub_1009563EC(a1), (v19 & 1) == 0))
  {
    swift_endAccess();
    sub_100947AB8(a1, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v16;
    uint64_t *v16 = 0x8000000000000000;
    sub_100977820(a2, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v16 = v36;
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)v8;
LABEL_7:
    sub_100947B20(v24, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess();
    if (qword_10166FBF0 == -1)
    {
LABEL_8:
      swift_beginAccess();
      uint64_t v26 = (void *)static OS_os_log.sideStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v28 = v26;
      uint64_t v29 = swift_bridgeObjectRetain();
      sub_100945EBC(v29, v30);
      swift_bridgeObjectRelease();
      sub_100948528(&qword_10167D0C8, 255, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
      uint64_t v31 = Dictionary.description.getter();
      uint64_t v33 = v32;
      swift_release();
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v28, (uint64_t)&_mh_execute_header, v34, (uint64_t)"In-memory boardLoadMarksCache: %{public}@", 41, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_10:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
  swift_endAccess();
  sub_100947AB8(a1, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
  BOOL v21 = __OFADD__(v20, a2);
  uint64_t v22 = v20 + a2;
  if (!v21)
  {
    swift_beginAccess();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v16;
    uint64_t *v16 = 0x8000000000000000;
    sub_100977820(v22, (uint64_t)v8, v23);
    uint64_t *v16 = v36;
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)v8;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_10094261C(uint64_t a1, int a2)
{
  uint64_t v4 = v2;
  uint64_t v80 = a1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + 24);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void))(v7 + 104);
  unsigned int v81 = enum case for DispatchPredicate.onQueue(_:);
  unsigned int v82 = (void (*)(void *, void, uint64_t))v12;
  uint64_t v83 = v7 + 104;
  v12(v10);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  char v14 = *(void (**)(void *, uint64_t))(v7 + 8);
  v14(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (a2)
  {
    unsigned __int8 v78 = v14;
    uint64_t v79 = v6;
    uint64_t v84 = 0;
    unint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v15._countAndFlagsBits = 0x4144505520202020;
    v15._object = (void *)0xEB00000000204554;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000101262B80;
    v16._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x5445532020202020;
    v17._object = (void *)0xE900000000000020;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x7265746E756F63;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 2112800;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = 0x7265746E756F63;
    v20._object = (void *)0xE700000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0x202020203F202B20;
    v21._object = (void *)0xEF20455245485720;
    String.append(_:)(v21);
    v22._object = (void *)0x8000000101262BA0;
    v22._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0x3F203D3D20;
    v23._object = (void *)0xE500000000000000;
    String.append(_:)(v23);
    uint64_t v24 = v3;
    uint64_t v25 = v84;
    uint64_t v26 = v85;
    uint64_t v27 = *(void *)(v4 + 16);
    type metadata accessor for SQLiteStatement();
    char inited = swift_initStackObject();
    uint64_t v29 = swift_retain();
    uint64_t v30 = v25;
    char v31 = inited;
    uint64_t v32 = sub_10079FC40(v29, v30, v26);
    swift_release();
    if (!v24)
    {
      uint64_t v33 = *(void **)(*(void *)(v32 + 16) + 32);
      *uint64_t v10 = v33;
      uint64_t v6 = v79;
      v82(v10, v81, v79);
      id v34 = v33;
      LOBYTE(v33) = _dispatchPreconditionTest(_:)();
      v78(v10, v6);
      if (v33)
      {
        uint64_t v77 = (sqlite3_stmt **)(v32 + 24);
        swift_beginAccess();
        sqlite3_bind_int(*(sqlite3_stmt **)(v32 + 24), 1, a2);
        uint64_t v35 = sub_100753FC0();
        uint64_t v6 = v32;
        uint64_t v37 = v35;
        unint64_t v38 = v36;
        sub_10079DCE4(v35, v36, 2);
        sub_100510084(v37, v38);
        id v39 = *(void **)(*(void *)(v6 + 16) + 32);
        *uint64_t v10 = v39;
        uint64_t v40 = v79;
        v82(v10, v81, v79);
        id v41 = v39;
        LOBYTE(v39) = _dispatchPreconditionTest(_:)();
        v78(v10, v40);
        if (v39)
        {
          uint64_t v42 = v6;
          uint64_t v43 = v77;
          int v44 = sqlite3_step(*v77);
          if (v44 != 101)
          {
            int v59 = v44;
            sub_10079FF00();
            swift_allocError();
            *(_DWORD *)uint64_t v60 = v59;
            *(void *)(v60 + 8) = 0;
            *(void *)(v60 + 16) = 0;
            swift_willThrow();
            uint64_t v61 = *(void **)(*(void *)(v6 + 16) + 32);
            *uint64_t v10 = v61;
            uint64_t v6 = v79;
            v82(v10, v81, v79);
            id v62 = v61;
            char v31 = _dispatchPreconditionTest(_:)();
            v78(v10, v6);
            if (v31)
            {
              if (*v43)
              {
                sqlite3_finalize(*v43);
                *uint64_t v43 = 0;
              }
              goto LABEL_18;
            }
            goto LABEL_33;
          }
          uint64_t v45 = *(void **)(v27 + 32);
          *uint64_t v10 = v45;
          uint64_t v6 = v79;
          v82(v10, v81, v79);
          id v46 = v45;
          LOBYTE(v45) = _dispatchPreconditionTest(_:)();
          v78(v10, v6);
          if (v45)
          {
            swift_beginAccess();
            sqlite3_int64 v47 = sqlite3_changes64(*(sqlite3 **)(v27 + 16));
            if (v47 == 1)
            {
              Swift::String v64 = *(void **)(*(void *)(v42 + 16) + 32);
              *uint64_t v10 = v64;
              uint64_t v6 = v79;
              v82(v10, v81, v79);
              id v65 = v64;
              LOBYTE(v64) = _dispatchPreconditionTest(_:)();
              v78(v10, v6);
              if (v64)
              {
                uint64_t v58 = *v43;
                char v31 = 1;
                if (*v43)
                {
LABEL_27:
                  sqlite3_finalize(v58);
                  *uint64_t v43 = 0;
                }
LABEL_18:
                swift_release();
                return v31 & 1;
              }
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
            v76[1] = 0;
            uint64_t v6 = v42;
            if (v47)
            {
              if (qword_10166FBF0 == -1)
              {
LABEL_24:
                swift_beginAccess();
                uint64_t v66 = (void *)static OS_os_log.sideStore;
                sub_1005057FC((uint64_t *)&unk_101672B40);
                uint64_t v67 = swift_initStackObject();
                *(_OWORD *)(v67 + 16) = xmmword_10117E810;
                id v68 = v66;
                uint64_t v69 = sub_100753038();
                uint64_t v71 = v70;
                *(void *)(v67 + 56) = &type metadata for String;
                *(void *)(v67 + 64) = sub_100528BE4();
                *(void *)(v67 + 32) = v69;
                *(void *)(v67 + 40) = v71;
                uint64_t v72 = static os_log_type_t.error.getter();
                sub_100BAC898((uint64_t)v68, (uint64_t)&_mh_execute_header, v72, (uint64_t)"Update to board load mark completed, but touched many rows for board id: %{public}@", 83, 2, v67);
                swift_setDeallocating();
                sub_1005057FC(&qword_101672B50);
                swift_arrayDestroy();

                uint64_t v73 = *(void **)(*(void *)(v6 + 16) + 32);
                *uint64_t v10 = v73;
                uint64_t v74 = v79;
                v82(v10, v81, v79);
                id v75 = v73;
                LOBYTE(v73) = _dispatchPreconditionTest(_:)();
                v78(v10, v74);
                if ((v73 & 1) == 0) {
                  __break(1u);
                }
                uint64_t v43 = v77;
                uint64_t v58 = *v77;
                char v31 = 1;
LABEL_26:
                if (v58) {
                  goto LABEL_27;
                }
                goto LABEL_18;
              }
LABEL_37:
              swift_once();
              goto LABEL_24;
            }
            if (qword_10166FBF0 == -1)
            {
LABEL_13:
              swift_beginAccess();
              unsigned __int8 v48 = (void *)static OS_os_log.sideStore;
              sub_1005057FC((uint64_t *)&unk_101672B40);
              uint64_t v49 = swift_initStackObject();
              *(_OWORD *)(v49 + 16) = xmmword_10117E810;
              id v50 = v48;
              uint64_t v51 = sub_100753038();
              uint64_t v53 = v52;
              *(void *)(v49 + 56) = &type metadata for String;
              *(void *)(v49 + 64) = sub_100528BE4();
              *(void *)(v49 + 32) = v51;
              *(void *)(v49 + 40) = v53;
              uint64_t v54 = static os_log_type_t.error.getter();
              sub_100BAC898((uint64_t)v50, (uint64_t)&_mh_execute_header, v54, (uint64_t)"Attempted to update board load mark, but row didn't exist for board with id: %{public}@", 87, 2, v49);
              swift_setDeallocating();
              sub_1005057FC(&qword_101672B50);
              swift_arrayDestroy();

              unsigned __int8 v55 = *(void **)(*(void *)(v6 + 16) + 32);
              *uint64_t v10 = v55;
              uint64_t v56 = v79;
              v82(v10, v81, v79);
              id v57 = v55;
              LOBYTE(v55) = _dispatchPreconditionTest(_:)();
              v78(v10, v56);
              if (v55)
              {
                char v31 = 0;
                uint64_t v43 = v77;
                uint64_t v58 = *v77;
                goto LABEL_26;
              }
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            swift_once();
            goto LABEL_13;
          }
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      __break(1u);
      goto LABEL_31;
    }
  }
  else
  {
    char v31 = 0;
  }
  return v31 & 1;
}

double *sub_100942F08()
{
  uint64_t Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row();
  uint64_t v103 = *(void *)(Marks - 8);
  uint64_t v104 = Marks;
  __chkstk_darwin(Marks, v3);
  uint64_t v107 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  uint64_t v106 = (uint64_t)&v99 - v7;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v108 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v102 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v101 = (uint64_t)&v99 - v16;
  __chkstk_darwin(v17, v18);
  uint64_t v105 = (uint64_t)&v99 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (unint64_t *)((char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = *(void **)(v0 + 24);
  *uint64_t v25 = (unint64_t)v26;
  unsigned int v27 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v28 = v21 + 104;
  uint64_t v116 = *(void (**)(void *, uint64_t, uint64_t))(v21 + 104);
  ((void (*)(unint64_t *, void, uint64_t, __n128))v116)(v25, enum case for DispatchPredicate.onQueue(_:), v20, v23);
  id v29 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  char v31 = *(void (**)(unint64_t *, uint64_t))(v21 + 8);
  uint64_t v30 = v21 + 8;
  char v117 = v31;
  v31(v25, v20);
  if ((v26 & 1) == 0) {
    goto LABEL_46;
  }
  unsigned int v115 = v27;
  uint64_t v113 = v30;
  uint64_t v118 = 0;
  unint64_t v119 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  uint64_t v118 = 0x205443454C4553;
  unint64_t v119 = 0xE700000000000000;
  v32._countAndFlagsBits = sub_1009473B8(0, 0xE000000000000000);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x204D4F524620;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._object = (void *)0x8000000101262B80;
  v34._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v34);
  uint64_t v35 = v118;
  uint64_t v36 = v119;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v37 = swift_retain();
  uint64_t v38 = sub_10079FC40(v37, v35, v36);
  uint64_t v109 = v1;
  if (v1)
  {
    swift_release();
    if (qword_10166FBF0 != -1) {
      goto LABEL_47;
    }
    goto LABEL_4;
  }
  uint64_t v47 = v38;
  swift_release();
  unsigned __int8 v48 = *(void **)(*(void *)(v47 + 16) + 32);
  *uint64_t v25 = (unint64_t)v48;
  uint64_t v49 = v115;
  id v50 = v116;
  v116(v25, v115, v20);
  id v51 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)();
  id v112 = v25;
  v117(v25, v20);
  if ((v48 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  type metadata accessor for SQLiteRowIterator();
  char inited = (uint64_t *)swift_initStackObject();
  inited[4] = 0;
  inited[5] = 1;
  inited[2] = v47;
  inited[3] = 0;
  uint64_t v99 = v47;
  swift_retain();
  Class v111 = inited;
  uint64_t v53 = sub_10079ECE0();
  if (!v53)
  {
    NSString v100 = _swiftEmptyArrayStorage;
LABEL_38:
    id v93 = v111;
    swift_setDeallocating();
    swift_release();
    sub_1007A0344(v93[3], v93[4], v93[5]);
    uint64_t v94 = v99;
    uint64_t v95 = *(void **)(*(void *)(v99 + 16) + 32);
    id v96 = v112;
    *id v112 = (unint64_t)v95;
    v50(v96, v49, v20);
    id v97 = v95;
    LOBYTE(v95) = _dispatchPreconditionTest(_:)();
    v117(v96, v20);
    if (v95)
    {
      swift_beginAccess();
      unsigned int v98 = *(sqlite3_stmt **)(v94 + 24);
      if (v98)
      {
        sqlite3_finalize(v98);
        *(void *)(v94 + 24) = 0;
      }
      swift_release();
      return v100;
    }
LABEL_49:
    __break(1u);
  }
  uint64_t v54 = v53;
  NSString v100 = _swiftEmptyArrayStorage;
  unsigned __int8 v55 = v112;
  while (1)
  {
    uint64_t v58 = *(void **)(*(void *)(v54 + 16) + 32);
    unint64_t *v55 = (unint64_t)v58;
    v50(v55, v49, v20);
    id v59 = v58;
    LODWORD(v114) = _dispatchPreconditionTest(_:)();
    uint64_t v60 = v28;
    uint64_t v61 = v117;
    v117(v55, v20);
    if ((v114 & 1) == 0) {
      break;
    }
    unint64_t v114 = *(void *)(*(void *)(v54 + 16) + 32);
    unint64_t *v55 = v114;
    v50(v55, v49, v20);
    id v62 = (id)v114;
    char v63 = _dispatchPreconditionTest(_:)();
    v61(v55, v20);
    if ((v63 & 1) == 0) {
      goto LABEL_43;
    }
    Swift::String v64 = (sqlite3_stmt **)(v54 + 24);
    swift_beginAccess();
    if (sqlite3_column_type(*(sqlite3_stmt **)(v54 + 24), 0) == 5)
    {
      unint64_t v114 = 0xF000000000000000;
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v66 = sqlite3_column_blob(*v64, 0);
      if (v66)
      {
        uint64_t v67 = v66;
        int v68 = sqlite3_column_bytes(*v64, 0);
        uint64_t v65 = sub_100670608(v67, v68);
        unint64_t v114 = v69;
      }
      else
      {
        uint64_t v65 = 0;
        unint64_t v114 = 0xF000000000000000;
      }
    }
    uint64_t v70 = *(void **)(*(void *)(v54 + 16) + 32);
    unint64_t *v55 = (unint64_t)v70;
    v116(v55, v115, v20);
    id v71 = v70;
    LOBYTE(v70) = _dispatchPreconditionTest(_:)();
    v117(v55, v20);
    if ((v70 & 1) == 0) {
      goto LABEL_44;
    }
    int v72 = sqlite3_column_type(*v64, 1);
    if (v72 == 5) {
      sqlite3_int64 v110 = 0;
    }
    else {
      sqlite3_int64 v110 = sqlite3_column_int64(*v64, 1);
    }
    uint64_t v73 = *(void **)(*(void *)(v54 + 16) + 32);
    unint64_t *v55 = (unint64_t)v73;
    v116(v55, v115, v20);
    id v74 = v73;
    LOBYTE(v73) = _dispatchPreconditionTest(_:)();
    v117(v55, v20);
    if ((v73 & 1) == 0) {
      goto LABEL_45;
    }
    if (sqlite3_column_type(*v64, 2) == 5 || (int v75 = sqlite3_column_int(*v64, 2), v114 >> 60 == 15) || v72 == 5)
    {
      if (qword_10166FBF0 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v56 = (id)static OS_os_log.sideStore;
      uint64_t v57 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v56, (uint64_t)&_mh_execute_header, v57, (uint64_t)"Failed to fetch some mark data for a particular row while fetching AllBoardLoadMarks", 84, 2, (uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_11;
    }
    int v76 = v75;
    unint64_t v77 = v114;
    sub_100510D4C(v65, v114);
    sub_100510D4C(v65, v77);
    uint64_t v78 = v109;
    sub_100753724(v65, v77, v108);
    if (v78)
    {
      swift_errorRelease();
      if (qword_10166FBF0 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v56 = (id)static OS_os_log.sideStore;
      uint64_t v79 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v56, (uint64_t)&_mh_execute_header, v79, (uint64_t)"Failed to convert a board identifier data into a board identifier while fetching AllBoardLoadMarks", 98, 2, (uint64_t)_swiftEmptyArrayStorage);
      sub_100514260(v65, v114);
      uint64_t v109 = 0;
LABEL_11:
      uint64_t v28 = v60;
      sub_100514260(v65, v114);

      swift_release();
      uint64_t v54 = sub_10079ECE0();
      uint64_t v49 = v115;
      id v50 = v116;
      if (!v54) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v109 = 0;
      uint64_t v80 = v102;
      sub_100947B80(v108, v102, type metadata accessor for CRLBoardIdentifierStorage);
      uint64_t v81 = v80;
      uint64_t v82 = v101;
      sub_100947B80(v81, v101, type metadata accessor for CRLBoardIdentifier);
      uint64_t v83 = v82;
      uint64_t v84 = v105;
      sub_100947B80(v83, v105, type metadata accessor for CRLBoardIdentifier);
      uint64_t v85 = v106;
      sub_100947AB8(v84, v106, type metadata accessor for CRLBoardIdentifier);
      uint64_t v86 = v104;
      *(void *)(v85 + *(int *)(v104 + 20)) = v110;
      *(_DWORD *)(v85 + *(int *)(v86 + 24)) = v76;
      sub_100947AB8(v85, v107, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        NSString v100 = (double *)sub_100F64810(0, *((void *)v100 + 2) + 1, 1, (unint64_t)v100);
      }
      uint64_t v28 = v60;
      uint64_t v87 = v100;
      unint64_t v89 = *((void *)v100 + 2);
      unint64_t v88 = *((void *)v100 + 3);
      if (v89 >= v88 >> 1) {
        uint64_t v87 = (double *)sub_100F64810(v88 > 1, v89 + 1, 1, (unint64_t)v100);
      }
      *((void *)v87 + 2) = v89 + 1;
      unint64_t v90 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      NSString v100 = v87;
      sub_100947B80(v107, (uint64_t)v87 + v90 + *(void *)(v103 + 72) * v89, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      swift_release();
      unint64_t v91 = v114;
      sub_100514260(v65, v114);
      sub_100514260(v65, v91);
      sub_100947B20(v106, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      sub_100947B20(v105, type metadata accessor for CRLBoardIdentifier);
      uint64_t v92 = sub_10079ECE0();
      uint64_t v49 = v115;
      id v50 = v116;
      uint64_t v54 = v92;
      if (!v92) {
        goto LABEL_38;
      }
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_once();
LABEL_4:
  swift_beginAccess();
  id v39 = (void *)static OS_os_log.sideStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v40 = swift_initStackObject();
  *(_OWORD *)(v40 + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v41 = v39;
  uint64_t v42 = Error.localizedDescription.getter();
  uint64_t v44 = v43;
  *(void *)(v40 + 56) = &type metadata for String;
  *(void *)(v40 + 64) = sub_100528BE4();
  *(void *)(v40 + 32) = v42;
  *(void *)(v40 + 40) = v44;
  uint64_t v45 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v41, (uint64_t)&_mh_execute_header, v45, (uint64_t)"Failed to fetch _fetchAllBoardLoadMarks with error %@", 53, 2, v40);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  return (double *)swift_willThrow();
}

uint64_t sub_100943B30()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = sub_10079FC40(v6, 0xD000000000000024, 0x8000000101263430);
  if (!v0)
  {
    uint64_t v8 = v7;
    swift_release();
    uint64_t v9 = *(void **)(*(void *)(v8 + 16) + 32);
    *uint64_t v5 = v9;
    uint64_t v10 = enum case for DispatchPredicate.onQueue(_:);
    Swift::String v33 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
    v33(v5, enum case for DispatchPredicate.onQueue(_:), v1);
    id v11 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    uint64_t v12 = *(void (**)(void *, uint64_t))(v2 + 8);
    v12(v5, v1);
    if ((v9 & 1) == 0)
    {
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    Swift::String v32 = v12;
    uint64_t v13 = (sqlite3_stmt **)(v8 + 24);
    swift_beginAccess();
    int v14 = sqlite3_step(*(sqlite3_stmt **)(v8 + 24));
    if (v14 == 101)
    {
      uint64_t v15 = *(void **)(*(void *)(v8 + 16) + 32);
      *uint64_t v5 = v15;
      v33(v5, v10, v1);
      id v16 = v15;
      char v17 = _dispatchPreconditionTest(_:)();
      v32(v5, v1);
      if (v17)
      {
        if (*v13)
        {
          sqlite3_finalize(*v13);
          *uint64_t v13 = 0;
        }
        return swift_release();
      }
      goto LABEL_15;
    }
    int v19 = v14;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v19;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0;
    swift_willThrow();
    uint64_t v21 = *(void **)(*(void *)(v8 + 16) + 32);
    *uint64_t v5 = v21;
    v33(v5, v10, v1);
    id v22 = v21;
    char v23 = _dispatchPreconditionTest(_:)();
    v32(v5, v1);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    if (*v13)
    {
      sqlite3_finalize(*v13);
      *(void *)(v8 + 24) = 0;
    }
  }
  swift_release();
  if (qword_10166FBF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v24 = (void *)static OS_os_log.sideStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v26 = v24;
  uint64_t v27 = Error.localizedDescription.getter();
  uint64_t v29 = v28;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v27;
  *(void *)(inited + 40) = v29;
  uint64_t v30 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v26, (uint64_t)&_mh_execute_header, v30, (uint64_t)"Failed to _clearAllBoardLoadMarks with error %@", 47, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  return swift_willThrow();
}

uint64_t sub_100943F98(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v2 + 24);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v24 = v2;
  uint64_t v5 = a2;
  if (qword_10166FBF0 != -1) {
LABEL_5:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v12 = (void *)static OS_os_log.sideStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  id v14 = v12;
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v18 = sub_100528BE4();
  *(void *)(inited + 32) = v15;
  *(void *)(inited + 40) = v17;
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 104) = &protocol witness table for Int;
  *(void *)(inited + 64) = v18;
  *(void *)(inited + 72) = v5;
  uint64_t v19 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v14, (uint64_t)&_mh_execute_header, v19, (uint64_t)"markBoardLoad for board %{public}@ by amount %{public}d", 55, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  __chkstk_darwin(v20, v21);
  *(&v23 - 4) = v24;
  *(&v23 - 3) = a1;
  *(&v23 - 2) = v5;
  sub_10093FD98((uint64_t (*)(uint64_t))sub_100945E98);
  return 0;
}

uint64_t sub_100944334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002094A4();
  uint64_t result = sub_1009474F4(a2);
  if (v3) {
    return 1;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    sub_10094261C(a2, a3);
    sub_1009421D4(a2, a3);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1009443CC()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLSideStore()
{
  return self;
}

uint64_t sub_100944448(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100948528(&qword_101688A90, a2, (void (*)(uint64_t))type metadata accessor for CRLSideStore);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1009444A4()
{
  unint64_t result = qword_101688A98;
  if (!qword_101688A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688A98);
  }
  return result;
}

unint64_t sub_1009444FC()
{
  unint64_t result = qword_101688AA0;
  if (!qword_101688AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688AA0);
  }
  return result;
}

unint64_t sub_100944550(uint64_t a1)
{
  unint64_t result = sub_100944578();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100944578()
{
  unint64_t result = qword_101688AF0;
  if (!qword_101688AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688AF0);
  }
  return result;
}

uint64_t sub_1009445CC()
{
  return sub_100523288(&qword_101688AF8, &qword_101688B00);
}

unint64_t sub_100944608(void *a1)
{
  a1[1] = sub_100944640();
  a1[2] = sub_100944694();
  unint64_t result = sub_1009446E8();
  a1[3] = result;
  return result;
}

unint64_t sub_100944640()
{
  unint64_t result = qword_101688B08;
  if (!qword_101688B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688B08);
  }
  return result;
}

unint64_t sub_100944694()
{
  unint64_t result = qword_101688B10;
  if (!qword_101688B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688B10);
  }
  return result;
}

unint64_t sub_1009446E8()
{
  unint64_t result = qword_101688B18;
  if (!qword_101688B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688B18);
  }
  return result;
}

unint64_t sub_100944740()
{
  unint64_t result = qword_101688B20;
  if (!qword_101688B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688B20);
  }
  return result;
}

uint64_t sub_100944794()
{
  return sub_100523288(&qword_101688B28, &qword_101688B30);
}

uint64_t sub_1009447D0()
{
  return sub_100944EA0((uint64_t)sub_100947A5C, (uint64_t)&unk_10151BA00);
}

uint64_t sub_1009447F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(v8 + 32);
  *uint64_t v7 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v2, v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v7, v2);
  if (v9)
  {
    swift_beginAccess();
    uint64_t result = sqlite3_close_v2(*(sqlite3 **)(v8 + 16));
    *(void *)(v8 + 16) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100944924@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100943F98(a1, 1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100944970(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v9);
  id v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8, v15);
  v20[1] = *(void *)(v1 + 24);
  sub_100947AB8(a1, (uint64_t)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CRLBoardIdentifier);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v1;
  sub_100947B80((uint64_t)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for CRLBoardIdentifier);
  aBlock[4] = sub_100944DEC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_10151B9D8;
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v22 = _swiftEmptyArrayStorage;
  sub_100948528((unint64_t *)&qword_1016747E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v21);
  return swift_release();
}

uint64_t sub_100944CF4()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100944DEC()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = sub_100943F98(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), -1);
  char v4 = v3 & 1;

  return sub_100541074(v2, v4);
}

uint64_t sub_100944E68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100944E78()
{
  return swift_release();
}

uint64_t sub_100944E80()
{
  return sub_100944EA0((uint64_t)sub_100947A64, (uint64_t)&unk_10151BA28);
}

uint64_t sub_100944EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v2 + 24);
  aBlock[4] = a1;
  uint64_t v19 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = a2;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100948528((unint64_t *)&qword_1016747E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

uint64_t sub_100945138(uint64_t a1)
{
  if (qword_10166FBF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v2 = (id)static OS_os_log.sideStore;
  uint64_t v3 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v2, (uint64_t)&_mh_execute_header, v3, (uint64_t)"clearBoardLoadMarks", 19, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_100943B30();
  swift_beginAccess();
  *(void *)(a1 + 56) = _swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease();
}

void sub_100945344(double **a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v37 = a1;
  uint64_t Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row();
  uint64_t v3 = *(void *)(Marks - 8);
  __chkstk_darwin(Marks, v4);
  uint64_t v40 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v35 - v8;
  if (qword_10166FBF0 != -1) {
    goto LABEL_19;
  }
  while (1)
  {
    swift_beginAccess();
    id v10 = (id)static OS_os_log.sideStore;
    uint64_t v11 = static os_log_type_t.default.getter();
    uint64_t v12 = _swiftEmptyArrayStorage;
    sub_100BAC898((uint64_t)v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)"fetchBoardLoadMarksThatCrashed", 30, 2, (uint64_t)_swiftEmptyArrayStorage);

    uint64_t v13 = (double *)v2;
    uint64_t v14 = sub_100942F08();
    unint64_t v15 = v2;
    if (v2)
    {
      unint64_t v16 = (void *)static OS_os_log.sideStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
      swift_getErrorValue();
      uint64_t v18 = v43;
      uint64_t v19 = v44;
      id v20 = v16;
      uint64_t v21 = Error.publicDescription.getter(v18, v19);
      uint64_t v23 = v22;
      *(void *)(inited + 56) = &type metadata for String;
      unint64_t v24 = sub_100528BE4();
      *(void *)(inited + 64) = v24;
      *(void *)(inited + 32) = v21;
      *(void *)(inited + 40) = v23;
      swift_getErrorValue();
      uint64_t v25 = Error.fullDescription.getter(v42);
      unint64_t v15 = (unint64_t)v13;
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 104) = v24;
      *(void *)(inited + 72) = v25;
      *(void *)(inited + 80) = v26;
      uint64_t v27 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v20, (uint64_t)&_mh_execute_header, v27, (uint64_t)"fetchBoardLoadMarksThatCrashed failed with error %{public} %@", 61, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v12 = v13;
      goto LABEL_17;
    }
    uint64_t v28 = v14;
    id v41 = _swiftEmptyArrayStorage;
    uint64_t v38 = *((void *)v14 + 2);
    if (!v38) {
      break;
    }
    unint64_t v36 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = _swiftEmptyArrayStorage;
    while (v29 < *((void *)v28 + 2))
    {
      unint64_t v31 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v32 = *(void *)(v3 + 72);
      sub_100947AB8((uint64_t)v28 + v31 + v32 * v29, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      if (*(int *)&v9[*(int *)(Marks + 24)] < 1)
      {
        sub_100947B20((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      }
      else
      {
        sub_100947B80((uint64_t)v9, v40, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1006BBAA4(0, *((void *)v30 + 2) + 1, 1);
        }
        uint64_t v30 = v41;
        unint64_t v2 = *((void *)v41 + 2);
        unint64_t v33 = *((void *)v41 + 3);
        if (v2 >= v33 >> 1)
        {
          sub_1006BBAA4(v33 > 1, v2 + 1, 1);
          uint64_t v30 = v41;
        }
        *((void *)v30 + 2) = v2 + 1;
        sub_100947B80(v40, (uint64_t)v30 + v31 + v2 * v32, (uint64_t (*)(void))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      }
      if (v38 == ++v29)
      {
        uint64_t v12 = v41;
        unint64_t v15 = v36;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    swift_once();
  }
LABEL_16:
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v34 = v37;
  *uint64_t v37 = v12;
  *((unsigned char *)v34 + 8) = v15 != 0;
}

void sub_1009457A0(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_retain();
  sub_10054626C(v3, v3);
  if (v1)
  {
    swift_release();
    if (qword_10166FBF0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v4 = (void *)static OS_os_log.sideStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    swift_getErrorValue();
    id v6 = v4;
    uint64_t v7 = Error.publicDescription.getter(v16, v17);
    uint64_t v9 = v8;
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v10 = sub_100528BE4();
    *(void *)(inited + 64) = v10;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v9;
    swift_getErrorValue();
    uint64_t v11 = Error.fullDescription.getter(v15);
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = v10;
    *(void *)(inited + 72) = v11;
    *(void *)(inited + 80) = v12;
    uint64_t v13 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v13, (uint64_t)"cleanUpBoardLoadMarksForAppTermination failed with error %{public} %@", 69, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    uint64_t v14 = v1;
  }
  else
  {
    swift_release();
    uint64_t v14 = 0;
  }
  *(void *)a1 = v14;
  *(unsigned char *)(a1 + 8) = v1 != 0;
}

uint64_t sub_100945974(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v43 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8, v4);
  id v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC(&qword_101688B50);
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v38 - v13;
  if (qword_10166FBF0 != -1) {
LABEL_42:
  }
    swift_once();
  swift_beginAccess();
  id v15 = (id)static OS_os_log.sideStore;
  uint64_t v16 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v15, (uint64_t)&_mh_execute_header, v16, (uint64_t)"cleanUpBoardLoadMarksForAppTermination", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

  id v39 = (void *)(a1 + 56);
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v40 = v17 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  int64_t v38 = v41 - 1;
  uint64_t v44 = v17;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v42 = v6;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      int64_t v25 = v23;
      unint64_t v26 = v24 | (v23 << 6);
      goto LABEL_7;
    }
    int64_t v30 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_41;
    }
    if (v30 >= v41)
    {
      int64_t v25 = v23;
      goto LABEL_13;
    }
    unint64_t v31 = *(void *)(v40 + 8 * v30);
    if (v31) {
      goto LABEL_11;
    }
    int64_t v25 = v23 + 2;
    if (v23 + 2 >= v41)
    {
      int64_t v25 = v23 + 1;
      goto LABEL_13;
    }
    unint64_t v31 = *(void *)(v40 + 8 * v25);
    if (v31)
    {
      int64_t v30 = v23 + 2;
      goto LABEL_11;
    }
    int64_t v36 = v23 + 3;
    if (v23 + 3 < v41) {
      break;
    }
LABEL_13:
    uint64_t v32 = sub_1005057FC(&qword_101688B38);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v10, 1, 1, v32);
    unint64_t v21 = 0;
LABEL_14:
    sub_100947BE8((uint64_t)v10, (uint64_t)v14);
    uint64_t v33 = sub_1005057FC(&qword_101688B38);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v14, 1, v33) == 1)
    {
      swift_release();
      *id v39 = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      return 1;
    }
    uint64_t v34 = *(void *)&v14[*(int *)(v33 + 48)];
    sub_100947B80((uint64_t)v14, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    if (v34 == 0x8000000000000000)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v35 = -v34;
    if (-v34 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_39;
    }
    if (v35 > 0x7FFFFFFF) {
      goto LABEL_40;
    }
    sub_10094261C((uint64_t)v6, v35);
    uint64_t result = sub_100947B20((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    int64_t v23 = v25;
    if (v1)
    {
      swift_release();
      return 1;
    }
  }
  unint64_t v31 = *(void *)(v40 + 8 * v36);
  if (v31)
  {
    int64_t v30 = v23 + 3;
    goto LABEL_11;
  }
  int64_t v37 = v23 + 4;
  if (v37 >= v41)
  {
    int64_t v25 = v36;
    goto LABEL_13;
  }
  unint64_t v31 = *(void *)(v40 + 8 * v37);
  if (v31)
  {
    int64_t v30 = v37;
LABEL_11:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v26 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v25 = v30;
LABEL_7:
    uint64_t v27 = v44;
    sub_100947AB8(*(void *)(v44 + 48) + *(void *)(v43 + 72) * v26, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    uint64_t v28 = *(void *)(v27 + 56);
    uint64_t v29 = sub_1005057FC(&qword_101688B38);
    *(void *)&v10[*(int *)(v29 + 48)] = *(void *)(v28 + 8 * v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v10, 0, 1, v29);
    id v6 = v42;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v30 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v30 >= v41)
    {
      int64_t v25 = v38;
      goto LABEL_13;
    }
    unint64_t v31 = *(void *)(v40 + 8 * v30);
    ++v37;
    if (v31) {
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100945E98()
{
  return sub_100944334(v0[2], v0[3], v0[4]) & 1;
}

uint64_t sub_100945EBC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_100946014((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v7;
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v3 = sub_100946014((unint64_t *)v8, v5, v3);
    swift_slowDealloc();
  }
  return v3;
}

uint64_t sub_100946014(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  unint64_t v26 = a1;
  uint64_t v30 = sub_1005057FC(&qword_101688B38);
  __chkstk_darwin(v30, v4);
  size_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7 - 8, v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v29) {
      return sub_1009466D4(v26, v25, v27, (void *)a3);
    }
    unint64_t v22 = *(void *)(v28 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v29) {
        return sub_1009466D4(v26, v25, v27, (void *)a3);
      }
      unint64_t v22 = *(void *)(v28 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v29) {
          return sub_1009466D4(v26, v25, v27, (void *)a3);
        }
        unint64_t v22 = *(void *)(v28 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v17 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    sub_100947AB8(*(void *)(a3 + 48) + *(void *)(v8 + 72) * v19, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    uint64_t v20 = *(void *)(*(void *)(a3 + 56) + 8 * v19);
    sub_100947AB8((uint64_t)v12, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    *(void *)&v6[*(int *)(v30 + 48)] = v20;
    sub_100522F00((uint64_t)v6, &qword_101688B38);
    uint64_t result = sub_100947B20((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    if (v20)
    {
      *(unint64_t *)((char *)v26 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return sub_1009466D4(v26, v25, v27, (void *)a3);
      }
    }
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v29) {
    return sub_1009466D4(v26, v25, v27, (void *)a3);
  }
  unint64_t v22 = *(void *)(v28 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v29) {
      return sub_1009466D4(v26, v25, v27, (void *)a3);
    }
    unint64_t v22 = *(void *)(v28 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1009462F8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v49 - 8);
  uint64_t v9 = __chkstk_darwin(v49, v8);
  unsigned __int8 v48 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v43 = (char *)&v38 - v12;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1005057FC(&qword_101688B58);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = result;
  id v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  int64_t v41 = a4;
  uint64_t v42 = v44 + 16;
  uint64_t v47 = v44 + 32;
  uint64_t v17 = result + 64;
  uint64_t v18 = v49;
  while (1)
  {
    if (v15)
    {
      uint64_t v45 = (v15 - 1) & v15;
      uint64_t v46 = v16;
      unint64_t v19 = __clz(__rbit64(v15)) | (v16 << 6);
    }
    else
    {
      uint64_t v20 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_40;
      }
      if (v20 >= v40) {
        return v14;
      }
      unint64_t v21 = v39[v20];
      uint64_t v22 = v16 + 1;
      if (!v21)
      {
        uint64_t v22 = v16 + 2;
        if (v16 + 2 >= v40) {
          return v14;
        }
        unint64_t v21 = v39[v22];
        if (!v21)
        {
          uint64_t v22 = v16 + 3;
          if (v16 + 3 >= v40) {
            return v14;
          }
          unint64_t v21 = v39[v22];
          if (!v21)
          {
            uint64_t v23 = v16 + 4;
            if (v16 + 4 >= v40) {
              return v14;
            }
            unint64_t v21 = v39[v23];
            if (!v21)
            {
              while (1)
              {
                uint64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v22 >= v40) {
                  return v14;
                }
                unint64_t v21 = v39[v22];
                ++v23;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v22 = v16 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v45 = (v21 - 1) & v21;
      uint64_t v46 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    unint64_t v24 = v43;
    uint64_t v25 = v44;
    uint64_t v26 = *(void *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v43, a4[6] + v26 * v19, v18);
    uint64_t v27 = *(void *)(a4[7] + 8 * v19);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v28(v48, v24, v18);
    sub_100948528((unint64_t *)&qword_1016770E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v29 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v32 = __clz(__rbit64((-1 << v30) & ~*(void *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v35 = v31 == v34;
        if (v31 == v34) {
          unint64_t v31 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v31);
      }
      while (v36 == -1);
      unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(void *)(v17 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(*(void *)(v14 + 48) + v32 * v26, v48, v49);
    *(void *)(*(void *)(v14 + 56) + 8 * v32) = v27;
    ++*(void *)(v14 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v41;
    unint64_t v15 = v45;
    uint64_t v16 = v46;
    if (!a3) {
      return v14;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1009466D4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v40 = (uint64_t)&v37 - v14;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1005057FC(&qword_101688B40);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v16 = result;
  int64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = result + 64;
  id v39 = a4;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v38) {
        return v16;
      }
      unint64_t v23 = v37[v22];
      ++v18;
      if (!v23)
      {
        uint64_t v18 = v22 + 1;
        if (v22 + 1 >= v38) {
          return v16;
        }
        unint64_t v23 = v37[v18];
        if (!v23)
        {
          uint64_t v18 = v22 + 2;
          if (v22 + 2 >= v38) {
            return v16;
          }
          unint64_t v23 = v37[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 3;
            if (v24 >= v38) {
              return v16;
            }
            unint64_t v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  return v16;
                }
                unint64_t v23 = v37[v18];
                ++v24;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v18 = v24;
          }
        }
      }
LABEL_24:
      unint64_t v17 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
    }
    uint64_t v25 = v40;
    uint64_t v26 = *(void *)(v41 + 72);
    sub_100947AB8(a4[6] + v26 * v21, v40, type metadata accessor for CRLBoardIdentifier);
    uint64_t v27 = *(void *)(a4[7] + 8 * v21);
    sub_100947B80(v25, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100948528((unint64_t *)&qword_1016770E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v19 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v19 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = sub_100947B80((uint64_t)v12, *(void *)(v16 + 48) + v31 * v26, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v16 + 56) + 8 * v31) = v27;
    ++*(void *)(v16 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    if (!a3) {
      return v16;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100946AD4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1005057FC(&qword_101688B60);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = 8 * v13;
    uint64_t v18 = *(void *)(*(void *)(v4 + 56) + v17);
    Swift::Int v19 = *(void *)(v8 + 40);
    id v20 = *(id *)(*(void *)(v4 + 48) + v17);
    swift_bridgeObjectRetain();
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v8 + 48) + v29) = v20;
    *(void *)(*(void *)(v8 + 56) + v29) = v18;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_100946D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v21 - v10;
  char v12 = static UUID.== infix(_:_:)();
  sub_100947AB8(a1, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  sub_100947AB8(a2, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  if ((v12 & 1) == 0)
  {
    sub_100947B20((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    sub_100947B20((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    return 0;
  }
  uint64_t v13 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v14 = *(void *)&v11[v13];
  uint64_t v15 = *(void *)&v11[v13 + 8];
  uint64_t v16 = &v7[v13];
  if (v14 == *(void *)v16 && v15 == *((void *)v16 + 1))
  {
    sub_100947B20((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    sub_100947B20((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
LABEL_10:
    uint64_t Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row();
    if (*(void *)(a1 + *(int *)(Marks + 20)) == *(void *)(a2 + *(int *)(Marks + 20))) {
      return *(_DWORD *)(a1 + *(int *)(Marks + 24)) == *(_DWORD *)(a2 + *(int *)(Marks + 24));
    }
    return 0;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_100947B20((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  sub_100947B20((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  BOOL result = 0;
  if (v18) {
    goto LABEL_10;
  }
  return result;
}

uint64_t *sub_100946F50()
{
  uint64_t v0 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v0 - 8, v1);
  unint64_t v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v3);
  BOOL v27 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10, v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8, v13);
  unint64_t v26 = sub_100656064();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100948528((unint64_t *)&qword_101676560, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v14 = &qword_101693440;
  sub_1005057FC(&qword_101693440);
  sub_100523288((unint64_t *)&qword_101676568, &qword_101693440);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  uint64_t v15 = v27;
  uint64_t v16 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for CRLBoardDataStoreProvider();
  uint64_t v17 = v28;
  sub_100E09C1C();
  if (v17)
  {
  }
  else
  {
    uint64_t v19 = v23;
    uint64_t v18 = (uint64_t)v24;
    uint64_t v20 = v25;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v24, v15, v25);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v20);
    type metadata accessor for CRLSideStore();
    swift_allocObject();
    id v21 = v16;
    uint64_t v14 = sub_100941A80(v18, v21);
    OS_dispatch_queue.sync<A>(execute:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v20);
  }
  return v14;
}

uint64_t sub_1009473B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    uint64_t v5 = a1;
    uint64_t v4 = (void *)a2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000101262BA0;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6E6F6973726576;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v5;
  v11._object = v4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x7265746E756F63;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  return v5;
}

uint64_t sub_1009474F4(uint64_t a1)
{
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  Swift::String v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v8 = *(void **)(v1 + 24);
  *Swift::String v7 = v8;
  Swift::String v9 = *(void (**)(void *))(v4 + 104);
  unsigned int v44 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  Swift::String v11 = *(void (**)(void *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v42 = (void (*)(void *, void, uint64_t))v9;
  uint64_t v43 = v11;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v12._countAndFlagsBits = 0xD00000000000001ALL;
  v12._object = (void *)0x8000000101262C80;
  String.append(_:)(v12);
  v13._object = (void *)0x8000000101262B80;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x202020202820;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000101262BA0;
  v15._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x20202020202CLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6E6F6973726576;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x20202020202CLL;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x7265746E756F63;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000016;
  v20._object = (void *)0x8000000101262CA0;
  String.append(_:)(v20);
  uint64_t v21 = v45;
  uint64_t v22 = v46;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v23 = swift_retain();
  uint64_t v24 = sub_10079FC40(v23, v21, v22);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v26 = sub_100753FC0();
  unint64_t v28 = v27;
  sub_10079DCE4(v26, v27, 1);
  sub_100510084(v26, v28);
  sqlite3_int64 v29 = sub_1002094A4();
  sub_10079D8A8(v29, 2);
  unint64_t v30 = *(void **)(*(void *)(v24 + 16) + 32);
  *Swift::String v7 = v30;
  v42(v7, v44, v3);
  id v31 = v30;
  char v32 = _dispatchPreconditionTest(_:)();
  v43(v7, v3);
  if ((v32 & 1) == 0) {
    goto LABEL_15;
  }
  unint64_t v33 = (sqlite3_stmt **)(v24 + 24);
  swift_beginAccess();
  int v34 = sqlite3_step(*(sqlite3_stmt **)(v24 + 24));
  if (v34 != 101) {
    goto LABEL_11;
  }
  uint64_t v35 = *(void **)(*(void *)(v24 + 16) + 32);
  *Swift::String v7 = v35;
  v42(v7, v44, v3);
  id v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  int v34 = ((uint64_t (*)(void *, uint64_t))v43)(v7, v3);
  if ((v35 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    int v37 = v34;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v38 = v37;
    *(void *)(v38 + 8) = 0;
    *(void *)(v38 + 16) = 0;
    swift_willThrow();
    id v39 = *(void **)(*(void *)(v24 + 16) + 32);
    *Swift::String v7 = v39;
    v42(v7, v44, v3);
    id v40 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)();
    v43(v7, v3);
    if (v39) {
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
LABEL_12:
  if (*v33)
  {
    sqlite3_finalize(*v33);
    *unint64_t v33 = 0;
  }
  return swift_release();
}

unint64_t sub_1009479DC()
{
  unint64_t result = qword_101688B48;
  if (!qword_101688B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688B48);
  }
  return result;
}

uint64_t sub_100947A30()
{
  return sub_100940A08(**(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), **(unsigned __int8 **)(v0 + 40)) & 1;
}

uint64_t sub_100947A5C()
{
  return sub_1009447F0(v0);
}

uint64_t sub_100947A64()
{
  return sub_100945138(v0);
}

uint64_t type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row()
{
  uint64_t result = qword_101688BC0;
  if (!qword_101688BC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100947AB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100947B20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100947B80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100947BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101688B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100947C50()
{
}

unsigned char *storeEnumTagSinglePayload for CRLSideStore.BoardLoadMarksColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100947D34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSideStore.BoardLoadMarksColumn()
{
  return &type metadata for CRLSideStore.BoardLoadMarksColumn;
}

uint64_t *sub_100947D6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
    Swift::String v9 = (uint64_t *)((char *)a1 + v8);
    id v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(_DWORD *)((char *)a1 + v12) = *(_DWORD *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100947E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v8 = (void *)(a1 + v7);
  Swift::String v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v11) = *(_DWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100947F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v8 = (void *)(a1 + v7);
  Swift::String v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + *(int *)(a3 + 24)) = *(_DWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100947FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for CRLBoardIdentifierStorage(0);
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100948058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v8 = (void *)(a1 + v7);
  Swift::String v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v12) = *(_DWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_100948100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100948114);
}

uint64_t sub_100948114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100948180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100948194);
}

uint64_t sub_100948194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_100948204()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CRLSideStore.Table(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100948348);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSideStore.Table()
{
  return &type metadata for CRLSideStore.Table;
}

unsigned char *storeEnumTagSinglePayload for CRLSideStore.SchemaVersion(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10094844CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSideStore.SchemaVersion()
{
  return &type metadata for CRLSideStore.SchemaVersion;
}

unint64_t sub_100948488()
{
  unint64_t result = qword_101688C00;
  if (!qword_101688C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688C00);
  }
  return result;
}

uint64_t sub_1009484DC()
{
  return sub_100948528(&qword_101688C08, 255, (void (*)(uint64_t))type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
}

uint64_t sub_100948528(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100948570()
{
  return sub_100523288(&qword_101688C10, &qword_101688C18);
}

unint64_t sub_1009485AC(uint64_t a1)
{
  unint64_t result = sub_1009485D4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1009485D4()
{
  unint64_t result = qword_101688C50;
  if (!qword_101688C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688C50);
  }
  return result;
}

unint64_t sub_10094862C()
{
  unint64_t result = qword_101688C58;
  if (!qword_101688C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688C58);
  }
  return result;
}

void sub_100948698()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CRLUSDZPlayPauseKnobTracker();
  [super beginMovingKnob];
  id v1 = [v0 knob];
  type metadata accessor for CRLUSDZPlayPauseKnob();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    char v3 = *(unsigned char *)(v2 + OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isBeingTracked);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isBeingTracked) = 1;
    if ((v3 & 1) == 0) {
      sub_10066E87C();
    }
  }
}

void sub_100948778()
{
  id v1 = (objc_class *)type metadata accessor for CRLUSDZPlayPauseKnobTracker();
  v8.receiver = v0;
  v8.super_class = v1;
  [super endMovingKnob];
  id v2 = [v0 knob];
  type metadata accessor for CRLUSDZPlayPauseKnob();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    objc_super v4 = (unsigned char *)v3;
    [v0 currentPosition];
    if (objc_msgSend(v4, "isHitByUnscaledPoint:inputType:", 0))
    {
      char v5 = (v4[OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isPlaying] & 1) == 0;
      v4[OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isPlaying] = v5;
      sub_10066E87C();
      sub_10050F848(&v0[OBJC_IVAR____TtC8Freeform27CRLUSDZPlayPauseKnobTracker_delegate], *(void *)&v0[OBJC_IVAR____TtC8Freeform27CRLUSDZPlayPauseKnobTracker_delegate + 24]);
      sub_100B70484(v5);
    }
    int v6 = v4[OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isBeingTracked];
    v4[OBJC_IVAR____TtC8Freeform20CRLUSDZPlayPauseKnob_isBeingTracked] = 0;
    if (v6 == 1) {
      sub_10066E87C();
    }
    v7.receiver = v0;
    v7.super_class = v1;
    [super endMovingKnob];
  }
}

id sub_10094896C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLUSDZPlayPauseKnobTracker();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLUSDZPlayPauseKnobTracker()
{
  return self;
}

uint64_t sub_1009489D4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100948A28()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLCheckedContinuationOnceCollection()
{
  return sub_100568E70();
}

uint64_t sub_100948A80()
{
  return swift_release();
}

uint64_t sub_100948B44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  __chkstk_darwin(v4 - 8, v5);
  objc_super v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v26 - v10;
  __chkstk_darwin(v12, v13);
  Swift::String v15 = (char *)&v26 - v14;
  if (!*(void *)(v1 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (Swift::String v16 = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (Swift::String v17 = v16, v18 = (*(uint64_t (**)(void))((swift_isaMask & *v16) + 0x2F0))(), v17, (v18 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v24, v25);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10094DD80(a1, (uint64_t)v15, type metadata accessor for CRLURLItemAtomicDataStruct);
    sub_10094DD80((uint64_t)v15, (uint64_t)v11, type metadata accessor for CRLURLItemAtomicDataStruct);
    swift_beginAccess();
    sub_10094DD80((uint64_t)v11, (uint64_t)v7, type metadata accessor for CRLURLItemAtomicDataStruct);
    swift_retain();
    sub_1005057FC(&qword_101682E40);
    CRRegister.wrappedValue.setter();
    sub_10094DD20((uint64_t)v11, type metadata accessor for CRLURLItemAtomicDataStruct);
    swift_endAccess();
    sub_10094DD20((uint64_t)v15, type metadata accessor for CRLURLItemAtomicDataStruct);
    swift_release();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (!Strong
      || (Swift::String v20 = Strong,
          char v21 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
          v20,
          (v21 & 1) == 0))
    {
      uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload);
      *(void *)(v2 + OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload) = 0;
    }
    return sub_10094DD20(a1, type metadata accessor for CRLURLItemAtomicDataStruct);
  }
  return result;
}

char *sub_100949540()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLAssetData();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  char v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v23 = (char *)&v54 - v22;
  uint64_t v24 = OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload;
  Swift::String v25 = *(char **)&v1[OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload];
  if (v25)
  {
    unsigned __int8 v55 = v5;
    uint64_t v27 = *(void *)&v25[OBJC_IVAR____TtC8Freeform8CRLAsset_storage + 24];
    uint64_t v26 = *(void *)&v25[OBJC_IVAR____TtC8Freeform8CRLAsset_storage + 32];
    Class v57 = v21;
    sub_10050F848(&v25[OBJC_IVAR____TtC8Freeform8CRLAsset_storage], v27);
    id v56 = v13;
    unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v26 + 24);
    uint64_t v58 = v25;
    v28(v27, v26);
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_101682E40);
    uint64_t v29 = (uint64_t)v55;
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v30 = (uint64_t)v56;
    sub_10094DD80(v29, (uint64_t)v56, (uint64_t (*)(void))type metadata accessor for CRLAssetData);
    sub_10094DD20(v29, type metadata accessor for CRLURLItemAtomicDataStruct);
    Class v31 = v57;
    (*(void (**)(char *, uint64_t, Class))(v15 + 16))(v18, v30, v57);
    sub_10094DD20(v30, (uint64_t (*)(void))type metadata accessor for CRLAssetData);
    LOBYTE(v30) = static UUID.== infix(_:_:)();
    char v32 = *(void (**)(char *, Class))(v15 + 8);
    v32(v18, v31);
    v32(v23, v31);
    if ((v30 & 1) == 0)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"metadataPayload", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 47, (uint64_t)"Cached CRLAsset instance has not been updated as expected.", 58, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"metadataPayload", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 47);
    }
    return v58;
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_101682E40);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    sub_10094DD80((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CRLAssetData);
    sub_10094DD20((uint64_t)v5, type metadata accessor for CRLURLItemAtomicDataStruct);
    uint64_t v58 = v1;
    int v34 = (char *)[v1 store];
    uint64_t v35 = *(void *)&v34[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 16));
    uint64_t v36 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
    int v37 = *(void **)&v34[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
    if (v37)
    {
      id v38 = *(id *)&v34[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
    }
    else
    {
      Class v57 = (Class)type metadata accessor for CRLAssetManager();
      id v39 = (char *)objc_allocWithZone(v57);
      swift_unknownObjectWeakInit();
      uint64_t v40 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
      type metadata accessor for CRLUnfairLock();
      uint64_t v41 = swift_allocObject();
      id v56 = v34;
      uint64_t v42 = v39;
      uint64_t v43 = (_DWORD *)swift_slowAlloc();
      *uint64_t v43 = 0;
      *(void *)(v41 + 16) = v43;
      atomic_thread_fence(memory_order_acq_rel);
      *(void *)&v39[v40] = v41;
      *(void *)&v42[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
      uint64_t v44 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
      *(void *)&v42[v44] = [self mapTableWithKeyOptions:517 valueOptions:0];
      *(void *)&v42[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
      uint64_t v45 = v56;
      swift_unknownObjectWeakAssign();

      v59.receiver = v42;
      v59.super_class = v57;
      id v46 = [super init];

      uint64_t v47 = *(void **)&v34[v36];
      *(void *)&v34[v36] = v46;
      id v38 = v46;

      int v37 = 0;
    }
    unsigned __int8 v48 = *(os_unfair_lock_s **)(v35 + 16);
    id v49 = v37;
    os_unfair_lock_unlock(v48);

    id v50 = v58;
    id v51 = (void *)sub_100F453C8(v9, v58, v38);

    sub_10094DD20((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CRLAssetData);
    uint64_t v52 = *(void **)&v50[v24];
    *(void *)&v50[v24] = v51;
    id v53 = v51;

    return (char *)v53;
  }
}

uint64_t sub_100949D64()
{
  uint64_t v0 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.url.getter();
  char v13 = static UTType.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_101682E40);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v14 = &v3[*(int *)(v0 + 20)];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v7, v14, v15);
    sub_10094DD20((uint64_t)v3, type metadata accessor for CRLURLItemAtomicDataStruct);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v7, 1, v15) != 1)
    {
      uint64_t v17 = URL.dataRepresentation.getter();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
      return v17;
    }
    sub_100522F00((uint64_t)v7, &qword_101672E90);
  }
  return 0;
}

uint64_t sub_10094A1D4()
{
  uint64_t v0 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_retain();
  sub_1005057FC(&qword_101682E40);
  CRRegister.wrappedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v9 = &v4[*(int *)(v1 + 28)];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  sub_10094DD20((uint64_t)v4, type metadata accessor for CRLURLItemAtomicDataStruct);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_100522F00((uint64_t)v8, &qword_101672E90);
    return 0;
  }
  else
  {
    uint64_t v12 = URL.absoluteString.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  }
  return v12;
}

id sub_10094A4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for CRLBoardItemParentAffinity();
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_101683E10);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v55 = (uint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  id v53 = (char *)&v51 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v57 = (uint64_t)&v51 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v58 = (uint64_t)&v51 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v52 = (uint64_t)&v51 - v27;
  __chkstk_darwin(v28, v29);
  Class v31 = (char *)&v51 - v30;
  uint64_t v56 = v4;
  swift_retain();
  char v32 = sub_100B78F38(1);
  swift_release();
  uint64_t v33 = (uint64_t)v32 + *(void *)(*v32 + 632);
  swift_beginAccess();
  sub_100522E9C(v33, (uint64_t)v12, (uint64_t *)&unk_101683E10);
  swift_retain();
  uint64_t v34 = sub_1005057FC((uint64_t *)&unk_101683E30);
  CRRegister.wrappedValue.getter();
  sub_100522E9C((uint64_t)v8, (uint64_t)v31, (uint64_t *)&unk_101674520);
  sub_10094DD20((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  sub_100522F00((uint64_t)v12, (uint64_t *)&unk_101683E10);
  swift_release();
  id v35 = v32;
  uint64_t v36 = (uint64_t)v62;
  sub_100B792AC(v59);
  if (v36)
  {
    sub_100522F00((uint64_t)v31, (uint64_t *)&unk_101674520);
    swift_release();
  }
  else
  {
    uint64_t v37 = v58;
    sub_100522E9C(v54, v58, (uint64_t *)&unk_101674520);
    id v62 = v31;
    sub_100522E9C((uint64_t)v31, v57, (uint64_t *)&unk_101674520);
    uint64_t v38 = type metadata accessor for UUID();
    uint64_t v39 = *(void *)(v38 - 8);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
    uint64_t v41 = v52;
    uint64_t v42 = (uint64_t)v53;
    uint64_t v59 = v34;
    if (v40 == 1)
    {
      sub_10051B3EC(v57, v52, (uint64_t *)&unk_101674520);
      swift_retain();
      sub_100522F00(v58, (uint64_t *)&unk_101674520);
    }
    else
    {
      swift_retain();
      sub_100522F00(v57, (uint64_t *)&unk_101674520);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v58, v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
    }
    sub_100522E9C(v41, v42, (uint64_t *)&unk_101674520);
    swift_beginAccess();
    uint64_t v43 = v55;
    sub_100522E9C(v42, v55, (uint64_t *)&unk_101674520);
    uint64_t v44 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    sub_1006063BC(v43, v45, (uint64_t *)&unk_101674520);
    v44(v61, 0);
    sub_100522F00(v42, (uint64_t *)&unk_101674520);
    swift_endAccess();
    sub_100522F00(v41, (uint64_t *)&unk_101674520);
    swift_release();
    id v46 = *(void **)(v56 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
    uint64_t v47 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLURLItem());
    *(void *)&v47[OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload] = 0;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v46;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v32;
    unsigned __int8 v48 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
    v60.receiver = v47;
    v60.super_class = v48;
    id v49 = v46;
    id v35 = [super init];
    sub_100522F00((uint64_t)v62, (uint64_t *)&unk_101674520);
  }
  return v35;
}

uint64_t sub_10094AB74()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 localizedStringForKey:v1 value:v2 table:0];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

id sub_10094ACE8()
{
  NSString v1 = *(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                        + 440);
  swift_retain();
  uint64_t v2 = v1(0);
  swift_release();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
  uint64_t v4 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLURLItem());
  *(void *)&v4[OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v3;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v2;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for CRLBoardItemBase(0);
  id v5 = v3;
  return [super init];
}

uint64_t sub_10094ADDC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRLURLItemCRDTData(0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_1005057FC(&qword_101688D50);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLURLItem();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v30 = a1;
    swift_unknownObjectRetain();
    uint64_t v29 = sub_100CF6354(v16, v1);
    uint64_t v17 = *(_UNKNOWN *****)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    if (*v17 != &off_101694560) {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (uint64_t)v17 + qword_10171B9D8;
    swift_beginAccess();
    sub_10094DD80(v18, (uint64_t)v10, type metadata accessor for CRLURLItemCRDTData);
    uint64_t v19 = *(_UNKNOWN *****)(v16 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    if (*v19 != &off_101694560) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (uint64_t)v19 + qword_10171B9D8;
    swift_beginAccess();
    sub_10094DD80(v20, (uint64_t)v6, type metadata accessor for CRLURLItemCRDTData);
    sub_10094DCDC(&qword_101688D60);
    CRStruct_1.actionUndoingDifference(from:)();
    sub_10094DD20((uint64_t)v6, type metadata accessor for CRLURLItemCRDTData);
    sub_10094DD20((uint64_t)v10, type metadata accessor for CRLURLItemCRDTData);
    uint64_t v21 = sub_1005057FC(&qword_101688D58);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v21) == 1)
    {
      sub_100522F00((uint64_t)v14, &qword_101688D50);
      memset(v31, 0, sizeof(v31));
      uint64_t v32 = 1;
    }
    else
    {
      uint64_t v32 = v21;
      uint64_t v23 = sub_1005767BC(v31);
      (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(v23, v14, v21);
    }
    uint64_t v24 = v29;
    swift_beginAccess();
    sub_10057D560((uint64_t)v31, 7);
    swift_endAccess();
    swift_unknownObjectRelease();
    return v24;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 112, (uint64_t)"Tried to generate undo from mismatched type", 43, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to generate undo from mismatched type");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 112);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v26, v27);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10094B240()
{
  uint64_t v1 = sub_1005057FC(&qword_101688D68);
  uint64_t v52 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v51 = type metadata accessor for CRLURLItemCRDTData(0);
  __chkstk_darwin(v51, v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = sub_1005057FC(&qword_101688D70);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v48 - v22;
  type metadata accessor for CRLURLItem();
  uint64_t v24 = swift_dynamicCastClass();
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v53 = v1;
    uint64_t v54 = v23;
    id v49 = v4;
    id v50 = v8;
    type metadata accessor for CRLBoardItemBase(0);
    if (swift_dynamicCastClass())
    {
      CKRecordID v26 = *(_UNKNOWN *****)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      if (*v26 != &off_101694560) {
        CKRecordID v26 = 0;
      }
      uint64_t v27 = (uint64_t)v26 + qword_10171B9D8;
      swift_beginAccess();
      sub_10094DD80(v27, (uint64_t)v15, type metadata accessor for CRLURLItemCRDTData);
      uint64_t v28 = *(_UNKNOWN *****)(v25 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      if (*v28 != &off_101694560) {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (uint64_t)v28 + qword_10171B9D8;
      swift_beginAccess();
      sub_10094DD80(v29, (uint64_t)v11, type metadata accessor for CRLURLItemCRDTData);
      sub_10094DCDC(&qword_101688D78);
      swift_unknownObjectRetain();
      uint64_t v30 = (uint64_t)v54;
      CRType.observableDifference(from:)();
      sub_10094DD20((uint64_t)v11, type metadata accessor for CRLURLItemCRDTData);
      sub_10094DD20((uint64_t)v15, type metadata accessor for CRLURLItemCRDTData);
      sub_100522E9C(v30, (uint64_t)v19, &qword_101688D70);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v19, 1, v53) == 1)
      {
        Class v31 = &qword_101688D70;
        uint64_t v32 = (uint64_t)v19;
      }
      else
      {
        uint64_t v33 = (uint64_t)v50;
        sub_10051B3EC((uint64_t)v19, (uint64_t)v50, &qword_10167D310);
        uint64_t v34 = (uint64_t)v49;
        sub_100522E9C(v33, (uint64_t)v49, &qword_10167D310);
        uint64_t v35 = type metadata accessor for CRValueObservableDifference();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35) != 1)
        {
          sub_100522F00(v34, &qword_10167D310);
          uint64_t v36 = sub_100F61B70(0, 1, 1, _swiftEmptyArrayStorage);
          unint64_t v40 = *((void *)v36 + 2);
          unint64_t v39 = *((void *)v36 + 3);
          if (v40 >= v39 >> 1) {
            uint64_t v36 = sub_100F61B70((double *)(v39 > 1), v40 + 1, 1, v36);
          }
          *((void *)v36 + 2) = v40 + 1;
          uint64_t v41 = &v36[2 * v40];
          v41[4] = 3.58302061e160;
          v41[5] = -3.91910665e202;
          sub_100522F00(v33, &qword_101688D68);
          if (*((void *)v36 + 2)) {
            goto LABEL_12;
          }
          goto LABEL_16;
        }
        sub_100522F00(v33, &qword_101688D68);
        Class v31 = &qword_10167D310;
        uint64_t v32 = v34;
      }
      sub_100522F00(v32, v31);
      uint64_t v36 = _swiftEmptyArrayStorage;
      if (*(void *)&_swiftEmptyArrayStorage[2])
      {
LABEL_12:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = _swiftEmptyDictionarySingleton;
        sub_100972448((uint64_t)v36, 7, isUniquelyReferenced_nonNull_native);
        uint64_t v38 = v55;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_17:
        sub_100522F00(v30, &qword_101688D70);
        return (uint64_t)v38;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v38 = _swiftEmptyDictionarySingleton;
      goto LABEL_17;
    }
    swift_unknownObjectRetain();
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 835, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift";
    uint64_t v44 = 83;
    uint64_t v45 = 835;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 124, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift";
    uint64_t v44 = 81;
    uint64_t v45 = 124;
  }
  sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)v43, v44, 2, v45);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v46, v47);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10094B920(uint64_t a1)
{
  uint64_t v3 = sub_1005057FC(&qword_101688D50);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = sub_1005057FC(&qword_101688D58);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10088B69C(a1);
  if (!v1)
  {
    uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform31CRLTransactableUndoingMutations_values);
    swift_beginAccess();
    uint64_t v18 = *v17;
    if (*(void *)(v18 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_100956360(7);
      if (v20)
      {
        sub_100522E9C(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v26, &qword_101672BF0);
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 1;
      }
      swift_bridgeObjectRelease();
      if (v29 != 1)
      {
        sub_10051B3EC((uint64_t)&v26, (uint64_t)v30, &qword_101672BF0);
        if (v31)
        {
          int v23 = swift_dynamicCast();
          uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
          v24(v10, v23 ^ 1u, 1, v11);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
          {
            (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
            (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v6, v15, v11);
            v24(v6, 0, 1, v11);
            swift_beginAccess();
            type metadata accessor for CRLURLItemCRDTData(0);
            sub_10094DCDC(&qword_101688D60);
            swift_retain();
            CRStruct_1.apply(_:)();
            swift_endAccess();
            swift_release();
            sub_100522F00((uint64_t)v6, &qword_101688D50);
            return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
          }
          return sub_100522F00((uint64_t)v10, &qword_101688D50);
        }
        uint64_t v21 = &qword_101672BF0;
        uint64_t v22 = (uint64_t *)v30;
LABEL_9:
        sub_100522F00((uint64_t)v22, v21);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
        return sub_100522F00((uint64_t)v10, &qword_101688D50);
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 1;
    }
    uint64_t v21 = (uint64_t *)&unk_1016725E0;
    uint64_t v22 = &v26;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10094BD28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  switch(a3)
  {
    case 7:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v11)
      {
LABEL_4:
        uint64_t v12 = *(void *)(a2 + 16);
        if (v12)
        {
          uint64_t v13 = OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload;
          uint64_t v14 = (void *)(a1 + OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data);
          swift_bridgeObjectRetain();
          uint64_t v15 = (uint64_t *)(a2 + 40);
          do
          {
            uint64_t v17 = *(v15 - 1);
            uint64_t v16 = *v15;
            BOOL v18 = v17 == 0x614463696D6F7461 && v16 == 0xEA00000000006174;
            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              unint64_t v19 = *(void **)((char *)v5 + v13);
              *(void *)((char *)v5 + v13) = 0;

              uint64_t v37 = &type metadata for Bool;
              v36[0] = 1;
              swift_beginAccess();
              sub_100522E9C((uint64_t)v36, (uint64_t)v35, &qword_101672BF0);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v21 = (void *)*v14;
              uint64_t v34 = (void *)*v14;
              *uint64_t v14 = 0x8000000000000000;
              unint64_t v23 = sub_1009563E8();
              uint64_t v24 = v21[2];
              BOOL v25 = (v22 & 1) == 0;
              uint64_t v26 = v24 + v25;
              if (__OFADD__(v24, v25))
              {
                __break(1u);
LABEL_30:
                __break(1u);
LABEL_31:
                type metadata accessor for CRLChangeProperty(0);
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x10094C230);
              }
              char v27 = v22;
              if (v21[3] >= v26)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  sub_10097C320();
                }
              }
              else
              {
                sub_10095F04C(v26, isUniquelyReferenced_nonNull_native);
                uint64_t v28 = sub_1009563E8();
                if ((v27 & 1) != (v29 & 1)) {
                  goto LABEL_31;
                }
                unint64_t v23 = v28;
              }
              if (v27)
              {
                sub_1006063BC((uint64_t)v35, v34[7] + 32 * v23, &qword_101672BF0);
              }
              else
              {
                v34[(v23 >> 6) + 8] |= 1 << v23;
                *(void *)(v34[6] + 8 * v23) = 49;
                sub_10051B3EC((uint64_t)v35, v34[7] + 32 * v23, &qword_101672BF0);
                uint64_t v30 = v34[2];
                BOOL v31 = __OFADD__(v30, 1);
                uint64_t v32 = v30 + 1;
                if (v31) {
                  goto LABEL_30;
                }
                v34[2] = v32;
              }
              *uint64_t v14 = v34;
              swift_bridgeObjectRelease();
              swift_endAccess();
              sub_100522F00((uint64_t)v36, &qword_101672BF0);
            }
            else
            {
              sub_1005057FC((uint64_t *)&unk_101672B40);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_10117E810;
              *(void *)(inited + 56) = &type metadata for String;
              *(void *)(inited + 64) = sub_100528BE4();
              *(void *)(inited + 32) = v17;
              *(void *)(inited + 40) = v16;
              swift_bridgeObjectRetain();
              sub_1005598CC(inited, (uint64_t)"populatePropertyMap(_:observedDifferenceLabels:withPropertyKey:snapshot:)", 73, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLURLItem.swift", 81, 2, 168);
              swift_setDeallocating();
              sub_1005057FC(&qword_101672B50);
              swift_arrayDestroy();
            }
            v15 += 2;
            --v12;
          }
          while (v12);
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_getObjectType();
        return sub_100892474(a1, a2, a3, a4, v5);
      }
      return result;
  }
}

double *sub_10094C2B8()
{
  uint64_t v0 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10088A634();
  swift_beginAccess();
  swift_retain();
  sub_1005057FC(&qword_101682E40);
  CRRegister.wrappedValue.getter();
  swift_endAccess();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, &v4[*(int *)(v1 + 28)], v9);
  sub_10094DD20((uint64_t)v4, type metadata accessor for CRLURLItemAtomicDataStruct);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100522F00((uint64_t)v8, &qword_101672E90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    uint64_t v15 = URL.absoluteString.getter();
    uint64_t v17 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = sub_100F61B70(0, *((void *)v14 + 2) + 1, 1, v14);
    }
    unint64_t v19 = *((void *)v14 + 2);
    unint64_t v18 = *((void *)v14 + 3);
    if (v19 >= v18 >> 1) {
      uint64_t v14 = sub_100F61B70((double *)(v18 > 1), v19 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v19 + 1;
    char v20 = &v14[2 * v19];
    *((void *)v20 + 4) = v15;
    *((void *)v20 + 5) = v17;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return v14;
}

void sub_10094C5F4()
{
}

id sub_10094C604()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLURLItem();
  return [super dealloc];
}

uint64_t sub_10094C64C()
{
  return type metadata accessor for CRLURLItem();
}

uint64_t type metadata accessor for CRLURLItem()
{
  uint64_t result = qword_101688D40;
  if (!qword_101688D40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10094C6A0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10094C6E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRLURLItemAtomicDataStruct(0);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_retain();
  sub_1005057FC(&qword_101682E40);
  CRRegister.wrappedValue.getter();
  swift_endAccess();
  swift_release();
  uint64_t v7 = &v6[*(int *)(v3 + 28)];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a1, v7, v8);
  sub_10094DD20((uint64_t)v6, type metadata accessor for CRLURLItemAtomicDataStruct);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
}

id sub_10094C898(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v111 = a1;
  uint64_t v108 = type metadata accessor for CRLAssetData();
  __chkstk_darwin(v108, v8);
  uint64_t v107 = &v90[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v112 = type metadata accessor for URL();
  uint64_t v117 = *(void *)(v112 - 8);
  __chkstk_darwin(v112, v10);
  uint64_t v106 = &v90[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v13);
  uint64_t v105 = &v90[-v14];
  uint64_t v15 = type metadata accessor for CRLURLItemCRDTData(0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v109 = &v90[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18, v19);
  sqlite3_int64 v110 = &v90[-v20];
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v101 = &v90[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v100 = sub_1005057FC((uint64_t *)&unk_101683E10);
  __chkstk_darwin(v100, v25);
  uint64_t v104 = &v90[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27, v28);
  unsigned int v115 = &v90[-v29];
  uint64_t v30 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v95 = &v90[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v33, v34);
  uint64_t v36 = &v90[-v35];
  uint64_t v93 = type metadata accessor for CRLBoardItemParentAffinity();
  __chkstk_darwin(v93, v37);
  unint64_t v39 = &v90[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v40, v41);
  id v113 = v4;
  unint64_t v114 = &v90[-v42];
  uint64_t v116 = a3;
  if (a4)
  {
    id v43 = v4;
    id v44 = a4;
  }
  else
  {
    id v45 = objc_allocWithZone((Class)CRLCanvasInfoGeometry);
    id v46 = v4;
    id v44 = [v45 init];
  }
  id v96 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v97 = v22 + 16;
  v96(v36, a2, v21);
  uint64_t v103 = a2;
  uint64_t v92 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v92(v36, 0, 1, v21);
  id v102 = a4;
  id v47 = v44;
  [v47 position];
  float v49 = v48;
  float v51 = v50;
  [v47 size];
  float v53 = v52;
  float v55 = v54;
  [v47 angle];
  float v57 = v56;
  unsigned int v91 = [v47 widthValid];
  unsigned __int8 v58 = [v47 heightValid];
  unsigned __int8 v59 = [v47 horizontalFlip];
  unsigned __int8 v60 = [v47 verticalFlip];
  uint64_t v99 = v22;
  unsigned __int8 v61 = v60;
  id v94 = v47;

  id v62 = v95;
  sub_100522E9C((uint64_t)v36, (uint64_t)v95, (uint64_t *)&unk_101674520);
  uint64_t v98 = v21;
  v92(v39, 1, 1, v21);
  uint64_t v63 = v93;
  *(void *)&v39[*(int *)(v93 + 24)] = _swiftEmptyDictionarySingleton;
  sub_1006063BC((uint64_t)v62, (uint64_t)v39, (uint64_t *)&unk_101674520);
  Swift::String v64 = (float *)&v39[*(int *)(v63 + 20)];
  *Swift::String v64 = v49;
  v64[1] = v51;
  v64[2] = v53;
  v64[3] = v55;
  v64[4] = v57;
  *((unsigned char *)v64 + 20) = v91;
  *((unsigned char *)v64 + 21) = v58;
  *((unsigned char *)v64 + 22) = v59;
  *((unsigned char *)v64 + 23) = v61;
  *((void *)v64 + 3) = _swiftEmptyDictionarySingleton;
  uint64_t v65 = v114;
  sub_10094DC74((uint64_t)v39, (uint64_t)v114, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
  sub_10094DD80((uint64_t)v65, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  sub_10051A41C(v120);
  sub_10051B3EC((uint64_t)v120, (uint64_t)v121, (uint64_t *)&unk_101683E20);
  uint64_t v66 = (uint64_t)v101;
  UUID.init()();
  uint64_t v67 = v115;
  sub_100FC2584(v66, (uint64_t)v39, 0, 0, 0, 0xE000000000000000, (uint64_t)v121, (uint64_t)v115);
  char v119 = 1;
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  uint64_t v68 = v117;
  unint64_t v69 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v117 + 16);
  uint64_t v70 = v105;
  uint64_t v71 = v112;
  v69(v105, v116, v112);
  if (qword_101670198 != -1) {
    swift_once();
  }
  uint64_t v72 = v98;
  uint64_t v73 = sub_100556B74(v98, (uint64_t)qword_10171CB50);
  uint64_t v74 = (uint64_t)v107;
  v96(v107, v73, v72);
  uint64_t v75 = v108;
  int v76 = (void *)(v74 + *(int *)(v108 + 20));
  *int v76 = 0;
  v76[1] = 0xE000000000000000;
  *(void *)(v74 + *(int *)(v75 + 24)) = _swiftEmptyDictionarySingleton;
  uint64_t v77 = (uint64_t)v106;
  v69(v106, (uint64_t)v70, v71);
  uint64_t v78 = v70;
  uint64_t v79 = v110;
  sub_100B796B4(v74, v77, (uint64_t)v110);
  uint64_t v80 = *(void (**)(unsigned char *, uint64_t))(v68 + 8);
  uint64_t v117 = v68 + 8;
  uint64_t v108 = (uint64_t)v80;
  v80(v78, v71);

  uint64_t v81 = (uint64_t)v67;
  uint64_t v82 = v104;
  sub_100522E9C(v81, (uint64_t)v104, (uint64_t *)&unk_101683E10);
  uint64_t v83 = v109;
  sub_10094DD80((uint64_t)v79, (uint64_t)v109, type metadata accessor for CRLURLItemCRDTData);
  type metadata accessor for CRLURLItemData(0);
  uint64_t v84 = swift_allocObject();
  sub_10094DC74((uint64_t)v83, v84 + qword_10171B9D8, type metadata accessor for CRLURLItemCRDTData);
  sub_10051B3EC((uint64_t)v82, v84 + *(void *)(*(void *)v84 + 632), (uint64_t *)&unk_101683E10);
  uint64_t v85 = sub_10068B398(0x1000000000000, 0x2000400000000, 0x1000000000000, 2);
  uint64_t v86 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLURLItem());
  *(void *)&v86[OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload] = 0;
  *(void *)&v86[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v111;
  *(void *)&v86[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v85;
  uint64_t v87 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
  v118.receiver = v86;
  v118.super_class = v87;
  id v88 = [super init];

  ((void (*)(uint64_t, uint64_t))v108)(v116, v71);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v103, v72);
  sub_10094DD20((uint64_t)v79, type metadata accessor for CRLURLItemCRDTData);
  sub_100522F00((uint64_t)v115, (uint64_t *)&unk_101683E10);
  sub_10094DD20((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v88;
}

id sub_10094D2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v107 = a4;
  uint64_t v108 = a3;
  uint64_t v102 = a1;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v103 = *(void *)(v7 - 8);
  uint64_t v104 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v98 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC((uint64_t *)&unk_10167D2B0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v96 = (uint64_t)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for CRLAssetData();
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94, v13);
  uint64_t v95 = (uint64_t)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRLURLItemCRDTData(0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v97 = (uint64_t)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v101 = (uint64_t)v83 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  unint64_t v90 = (char *)v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_1005057FC((uint64_t *)&unk_101683E10);
  __chkstk_darwin(v89, v25);
  uint64_t v93 = (uint64_t)v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  uint64_t v109 = (uint64_t)v83 - v29;
  uint64_t v30 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v88 = (uint64_t)v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)v83 - v35;
  uint64_t v86 = type metadata accessor for CRLBoardItemParentAffinity();
  __chkstk_darwin(v86, v37);
  unint64_t v39 = (char *)v83 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v42 = __chkstk_darwin(v40, v41);
  uint64_t v106 = (uint64_t)v83 - v43;
  if (a5) {
    id v44 = a5;
  }
  else {
    id v44 = [objc_allocWithZone((Class)CRLCanvasInfoGeometry) init];
  }
  id v45 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  uint64_t v105 = a2;
  v83[0] = v45;
  v83[1] = v22 + 16;
  v45(v36, a2, v21, v42);
  uint64_t v99 = v22;
  uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v85(v36, 0, 1, v21);
  id v91 = a5;
  id v46 = v44;
  [v46 position];
  float v48 = v47;
  float v50 = v49;
  [v46 size];
  float v52 = v51;
  float v54 = v53;
  [v46 angle];
  float v56 = v55;
  unsigned int v84 = [v46 widthValid];
  unsigned __int8 v57 = [v46 heightValid];
  unsigned __int8 v58 = [v46 horizontalFlip];
  unsigned __int8 v59 = [v46 verticalFlip];
  id v87 = v46;

  uint64_t v60 = v88;
  sub_100522E9C((uint64_t)v36, v88, (uint64_t *)&unk_101674520);
  uint64_t v100 = v21;
  v85(v39, 1, 1, v21);
  uint64_t v61 = v86;
  *(void *)&v39[*(int *)(v86 + 24)] = _swiftEmptyDictionarySingleton;
  sub_1006063BC(v60, (uint64_t)v39, (uint64_t *)&unk_101674520);
  id v62 = &v39[*(int *)(v61 + 20)];
  *(float *)id v62 = v48;
  *((float *)v62 + 1) = v50;
  *((float *)v62 + 2) = v52;
  *((float *)v62 + 3) = v54;
  *((float *)v62 + 4) = v56;
  v62[20] = v84;
  v62[21] = v57;
  v62[22] = v58;
  v62[23] = v59;
  *((void *)v62 + 3) = _swiftEmptyDictionarySingleton;
  uint64_t v63 = v106;
  sub_10094DC74((uint64_t)v39, v106, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
  sub_10094DD80(v63, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  sub_10051A41C(v112);
  sub_10051B3EC((uint64_t)v112, (uint64_t)v113, (uint64_t *)&unk_101683E20);
  uint64_t v64 = (uint64_t)v90;
  UUID.init()();
  sub_100FC2584(v64, (uint64_t)v39, 0, 0, 0, 0xE000000000000000, (uint64_t)v113, v109);
  char v111 = 1;
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  uint64_t v65 = v96;
  sub_100522E9C(v108, v96, (uint64_t *)&unk_10167D2B0);
  uint64_t v66 = v94;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v65, 1, v94) == 1)
  {
    uint64_t v67 = v95;
    if (qword_101670198 != -1) {
      swift_once();
    }
    uint64_t v68 = v100;
    uint64_t v69 = sub_100556B74(v100, (uint64_t)qword_10171CB50);
    ((void (*)(uint64_t, uint64_t, uint64_t))v83[0])(v67, v69, v68);
    uint64_t v70 = (void *)(v67 + *(int *)(v66 + 20));
    void *v70 = 0;
    v70[1] = 0xE000000000000000;
    *(void *)(v67 + *(int *)(v66 + 24)) = _swiftEmptyDictionarySingleton;
    sub_100522F00(v65, (uint64_t *)&unk_10167D2B0);
  }
  else
  {
    uint64_t v67 = v95;
    sub_10094DC74(v65, v95, (uint64_t (*)(void))type metadata accessor for CRLAssetData);
    uint64_t v68 = v100;
  }
  uint64_t v72 = v103;
  uint64_t v71 = v104;
  uint64_t v73 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v98, v107, v104);
  uint64_t v74 = v101;
  sub_100B796B4(v67, v73, v101);
  uint64_t v75 = v93;
  sub_100522E9C(v109, v93, (uint64_t *)&unk_101683E10);
  uint64_t v76 = v97;
  sub_10094DD80(v74, v97, type metadata accessor for CRLURLItemCRDTData);
  type metadata accessor for CRLURLItemData(0);
  uint64_t v77 = swift_allocObject();
  sub_10094DC74(v76, v77 + qword_10171B9D8, type metadata accessor for CRLURLItemCRDTData);
  sub_10051B3EC(v75, v77 + *(void *)(*(void *)v77 + 632), (uint64_t *)&unk_101683E10);
  uint64_t v78 = sub_10068B398(0x1000000000000, 0x2000400000000, 0x1000000000000, 2);
  uint64_t v79 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLURLItem());
  *(void *)&v79[OBJC_IVAR____TtC8Freeform10CRLURLItem__metadataPayload] = 0;
  *(void *)&v79[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v102;
  *(void *)&v79[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v78;
  uint64_t v80 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
  v110.receiver = v79;
  v110.super_class = v80;
  id v81 = [super init];

  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v107, v71);
  sub_100522F00(v108, (uint64_t *)&unk_10167D2B0);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v105, v68);
  sub_10094DD20(v74, type metadata accessor for CRLURLItemCRDTData);
  sub_100522F00(v109, (uint64_t *)&unk_101683E10);
  sub_10094DD20(v106, (uint64_t (*)(void))type metadata accessor for CRLBoardItemParentAffinity);
  return v81;
}

uint64_t sub_10094DC74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10094DCDC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CRLURLItemCRDTData(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10094DD20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10094DD80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10094DDE8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x676B636142707061;
      unint64_t v3 = 0xED0000646E756F72;
      break;
    case 2:
      uint64_t v5 = 0x6975516563726F66;
      unint64_t v3 = 0xE900000000000074;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1953068401;
      break;
    case 4:
      uint64_t v5 = 0x74657365524449;
      break;
    case 5:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6873617263;
      break;
    case 6:
      uint64_t v5 = 0x636142656E656373;
      unint64_t v3 = 0xEF646E756F72676BLL;
      break;
    case 7:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x726568746FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xED0000646E756F72;
      if (v5 == 0x676B636142707061) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE900000000000074;
      if (v5 != 0x6975516563726F66) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1953068401) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      if (v5 != 0x74657365524449) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6873617263) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v2 = 0x636142656E656373;
      unint64_t v6 = 0xEF646E756F72676BLL;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x726568746FLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094E084(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006174;
  unint64_t v3 = 0x61447463656A626FLL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x61447463656A626FLL;
  unint64_t v6 = 0xEA00000000006174;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x52436E6F6D6D6F63;
      unint64_t v6 = 0xEE00617461445444;
      break;
    case 2:
      unint64_t v6 = 0x80000001012356C0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000017;
      char v7 = "alternateCommonCRDTData";
      goto LABEL_6;
    case 4:
      unint64_t v5 = 0xD000000000000019;
      char v7 = "alternateSpecificCRDTData";
LABEL_6:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0x52436E6F6D6D6F63;
      unint64_t v2 = 0xEE00617461445444;
      break;
    case 2:
      unint64_t v2 = 0x80000001012356C0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000017;
      uint64_t v8 = "alternateCommonCRDTData";
      goto LABEL_12;
    case 4:
      unint64_t v3 = 0xD000000000000019;
      uint64_t v8 = "alternateSpecificCRDTData";
LABEL_12:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10094E25C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6E6572646C696863;
  }
  else {
    uint64_t v3 = 1835365481;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6E6572646C696863;
  }
  else {
    uint64_t v5 = 1835365481;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10094E2FC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F4E796B63697473;
  }
  else {
    uint64_t v3 = 0x786F6274786574;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000006574;
  }
  if (a2) {
    uint64_t v5 = 0x6F4E796B63697473;
  }
  else {
    uint64_t v5 = 0x786F6274786574;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006574;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10094E3A8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6863746566;
  }
  else {
    uint64_t v3 = 1702257011;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6863746566;
  }
  else {
    uint64_t v5 = 1702257011;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10094E444(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x73616C43657A6973;
    }
    else {
      uint64_t v3 = 0x73746E65746E6F63;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000073;
    }
    else {
      unint64_t v4 = 0xED0000656C616353;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x73616C43657A6973;
      }
      else {
        uint64_t v6 = 0x73746E65746E6F63;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000073;
      }
      else {
        unint64_t v7 = 0xED0000656C616353;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1835365481;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1835365481)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10094E570(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x49656C6261646F63;
  }
  else {
    uint64_t v3 = 0x654B70756B6F6F6CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000079;
  }
  else {
    unint64_t v4 = 0xEC0000006567616DLL;
  }
  if (a2) {
    uint64_t v5 = 0x49656C6261646F63;
  }
  else {
    uint64_t v5 = 0x654B70756B6F6F6CLL;
  }
  if (a2) {
    unint64_t v6 = 0xEC0000006567616DLL;
  }
  else {
    unint64_t v6 = 0xE900000000000079;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10094E624(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1701079400;
    }
    else {
      uint64_t v3 = 0x656C67676F74;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1701079400;
      }
      else {
        uint64_t v6 = 0x656C67676F74;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 2003789939;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 2003789939)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10094E718(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 0x6573616572636564;
  }
  else {
    uint64_t v2 = 0x6573616572636E69;
  }
  if (a2) {
    uint64_t v3 = 0x6573616572636564;
  }
  else {
    uint64_t v3 = 0x6573616572636E69;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10094E78C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x69726F7661666E75;
    }
    else {
      uint64_t v3 = 0x656C67676F74;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA00000000006574;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x69726F7661666E75;
      }
      else {
        uint64_t v6 = 0x656C67676F74;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEA00000000006574;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x657469726F766166;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x657469726F766166)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10094E8A8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6E49646567676F6CLL;
    }
    else {
      uint64_t v3 = 0x754F646567676F6CLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE900000000000074;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6E49646567676F6CLL;
      }
      else {
        uint64_t v6 = 0x754F646567676F6CLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE900000000000074;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x6E776F6E6B6E75;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x6E776F6E6B6E75)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10094E9CC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656C63726963;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x656C63726963;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701734764;
      break;
    case 2:
      unint64_t v3 = 0x8000000101235870;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v5 = 0x657261757173;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1918989427;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656C676E61697274;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1701734764) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0x8000000101235870;
      if (v5 != 0xD000000000000010) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 0x657261757173) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1918989427;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x656C676E61697274) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094EBA8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1684828002;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1684828002;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x63696C617469;
      break;
    case 2:
      uint64_t v5 = 0x6E696C7265646E75;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 3:
      uint64_t v5 = 0x6874656B69727473;
      unint64_t v3 = 0xED00006867756F72;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x63696C617469) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6E696C7265646E75;
      unint64_t v6 = 0xE900000000000065;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xED00006867756F72;
      if (v5 == 0x6874656B69727473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094ED40(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE90000000000006DLL;
  unint64_t v3 = 0x6574496472616F42;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6574496472616F42;
  unint64_t v6 = 0xE90000000000006DLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v5 = 0x6472616F42;
      break;
    case 2:
      unint64_t v5 = 0x74654D6472616F42;
      unint64_t v6 = 0xED00006174616461;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      char v7 = "FreehandDrawingBucket";
      goto LABEL_8;
    case 4:
      unint64_t v5 = 0x425F63696C627550;
      unint64_t v6 = 0xEC0000006472616FLL;
      break;
    case 5:
      unint64_t v6 = 0x8000000101235CA0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 6:
      unint64_t v5 = 0xD00000000000001CLL;
      char v7 = "Public_FreehandDrawingBucket";
LABEL_8:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 7:
      unint64_t v5 = 0x74696B64756F6C63;
      unint64_t v6 = 0xEE0065726168732ELL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x6472616F42) {
        goto LABEL_23;
      }
      goto LABEL_26;
    case 2:
      unint64_t v2 = 0xED00006174616461;
      if (v5 != 0x74654D6472616F42) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 3:
      unint64_t v3 = 0xD000000000000015;
      char v8 = "FreehandDrawingBucket";
      goto LABEL_21;
    case 4:
      unint64_t v2 = 0xEC0000006472616FLL;
      if (v5 != 0x425F63696C627550) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 5:
      unint64_t v2 = 0x8000000101235CA0;
      if (v5 != 0xD000000000000010) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 6:
      unint64_t v3 = 0xD00000000000001CLL;
      char v8 = "Public_FreehandDrawingBucket";
LABEL_21:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_22;
    case 7:
      unint64_t v2 = 0xEE0065726168732ELL;
      if (v5 != 0x74696B64756F6C63) {
        goto LABEL_26;
      }
      goto LABEL_23;
    default:
LABEL_22:
      if (v5 != v3) {
        goto LABEL_26;
      }
LABEL_23:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_26:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10094F024(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000065;
  unint64_t v3 = 0x6C61635377656976;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6C61635377656976;
  unint64_t v6 = 0xE900000000000065;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x4F746E65746E6F63;
      unint64_t v6 = 0xED00007465736666;
      break;
    case 2:
      unint64_t v5 = 0xD00000000000001CLL;
      char v7 = "versionFidelityAlertWasShown";
      goto LABEL_5;
    case 3:
      unint64_t v5 = 0xD000000000000021;
      char v7 = "freehandDrawingToolkitUIStateData";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v6 = 0x8000000101235790;
      unint64_t v5 = 0xD000000000000019;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xED00007465736666;
      if (v5 == 0x4F746E65746E6F63) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      unint64_t v3 = 0xD00000000000001CLL;
      char v8 = "versionFidelityAlertWasShown";
      goto LABEL_12;
    case 3:
      unint64_t v3 = 0xD000000000000021;
      char v8 = "freehandDrawingToolkitUIStateData";
LABEL_12:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_13;
    case 4:
      unint64_t v2 = 0x8000000101235790;
      if (v5 != 0xD000000000000019) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v3) {
        goto LABEL_17;
      }
LABEL_14:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_17:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10094F208(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 0x6C616E7265747865;
  }
  else {
    uint64_t v2 = 0x6C616E7265746E69;
  }
  if (a2) {
    uint64_t v3 = 0x6C616E7265747865;
  }
  else {
    uint64_t v3 = 0x6C616E7265746E69;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10094F27C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 5459817;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x534F64615069;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x534F63616DLL;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x534F6E6F69736976;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 5459817) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x534F64615069) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x534F63616DLL;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x534F6E6F69736976) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094F428(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6B63616C62;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6B63616C62;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702194274;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 2036429415;
      break;
    case 3:
      uint64_t v5 = 0x6E65657267;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x65676E61726FLL;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C70727570;
      break;
    case 6:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6579570;
      break;
    case 7:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x776F6C6C6579;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1702194274) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 2036429415) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      if (v5 != 0x6E65657267) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x65676E61726FLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x656C70727570) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 6579570;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x776F6C6C6579) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094F654(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = 0xD000000000000029;
  unint64_t v9 = 0x8000000101235A60;
  switch(a2)
  {
    case 0uLL:
      goto LABEL_11;
    case 1uLL:
      unint64_t v8 = 0xD000000000000023;
      uint64_t v10 = "com.apple.Freeform.system.font.thin";
      goto LABEL_10;
    case 2uLL:
      uint64_t v11 = "com.apple.Freeform.system.font.light";
      goto LABEL_15;
    case 3uLL:
      unint64_t v8 = 0xD000000000000026;
      uint64_t v10 = "com.apple.Freeform.system.font.regular";
      goto LABEL_10;
    case 4uLL:
      unint64_t v8 = 0xD000000000000025;
      uint64_t v10 = "com.apple.Freeform.system.font.medium";
      goto LABEL_10;
    case 5uLL:
      unint64_t v8 = 0xD000000000000027;
      uint64_t v10 = "com.apple.Freeform.system.font.semibold";
      goto LABEL_10;
    case 6uLL:
      unint64_t v8 = 0xD000000000000023;
      uint64_t v10 = "com.apple.Freeform.system.font.bold";
LABEL_10:
      unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      goto LABEL_11;
    case 7uLL:
      uint64_t v11 = "com.apple.Freeform.system.font.heavy";
      goto LABEL_15;
    case 8uLL:
      uint64_t v11 = "com.apple.Freeform.system.font.black";
LABEL_15:
      unint64_t v9 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      unint64_t v8 = 0xD000000000000024;
      if (a4 > 8) {
        goto LABEL_16;
      }
      goto LABEL_11;
    default:
      unint64_t v8 = a1;
      unint64_t v9 = a2;
      if (a4 <= 8)
      {
LABEL_11:
        unint64_t v12 = 0xD000000000000029;
        unint64_t v13 = 0x8000000101235A60;
        switch(a4)
        {
          case 0uLL:
            goto LABEL_24;
          case 1uLL:
            unint64_t v12 = 0xD000000000000023;
            uint64_t v14 = "com.apple.Freeform.system.font.thin";
            goto LABEL_23;
          case 2uLL:
            uint64_t v15 = "com.apple.Freeform.system.font.light";
            goto LABEL_28;
          case 3uLL:
            unint64_t v12 = 0xD000000000000026;
            uint64_t v14 = "com.apple.Freeform.system.font.regular";
            goto LABEL_23;
          case 4uLL:
            unint64_t v12 = 0xD000000000000025;
            uint64_t v14 = "com.apple.Freeform.system.font.medium";
            goto LABEL_23;
          case 5uLL:
            unint64_t v12 = 0xD000000000000027;
            uint64_t v14 = "com.apple.Freeform.system.font.semibold";
            goto LABEL_23;
          case 6uLL:
            unint64_t v12 = 0xD000000000000023;
            uint64_t v14 = "com.apple.Freeform.system.font.bold";
LABEL_23:
            unint64_t v13 = (unint64_t)(v14 - 32) | 0x8000000000000000;
LABEL_24:
            if (v8 != v12) {
              goto LABEL_31;
            }
            goto LABEL_29;
          case 7uLL:
            uint64_t v15 = "com.apple.Freeform.system.font.heavy";
            goto LABEL_28;
          case 8uLL:
            uint64_t v15 = "com.apple.Freeform.system.font.black";
LABEL_28:
            unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
            if (v8 == 0xD000000000000024) {
              goto LABEL_29;
            }
            goto LABEL_31;
          default:
            break;
        }
      }
LABEL_16:
      unint64_t v13 = a4;
      if (v8 != a3) {
        goto LABEL_31;
      }
LABEL_29:
      if (v9 == v13) {
        char v16 = 1;
      }
      else {
LABEL_31:
      }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_10051B3D8(a1, a2);
      sub_10051B3D8(a3, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16 & 1;
  }
}

uint64_t sub_10094F8F8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1954047348;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1954047348;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6570616873;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x616964656DLL;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x746E656D75636F64;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x746E656D6D6F63;
      break;
    case 5:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x6570616873) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x616964656DLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x746E656D75636F64) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x746E656D6D6F63;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6E776F6E6B6E75) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10094FAE4(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 7889261;
  }
  else {
    uint64_t v2 = 7235949;
  }
  if (a2) {
    uint64_t v3 = 7889261;
  }
  else {
    uint64_t v3 = 7235949;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10094FB54()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10094FC94()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10094FD98()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10094FE80()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10094FFE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009500E8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009501F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10051B3D8(a2, a3);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100950348()
{
  return Hasher._finalize()();
}

Swift::Int sub_100950498()
{
  return Hasher._finalize()();
}

Swift::Int sub_1009505AC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1009506A4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10095081C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10095092C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100950A44()
{
  return Hasher._finalize()();
}

uint64_t sub_100950B44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16)
    && (uint64_t result = sub_10095681C(result, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a2 + 56) + 40 * result;
    uint64_t v7 = *(void *)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = *(void **)(v6 + 24);
    char v11 = *(unsigned char *)(v6 + 32);
    id v12 = v10;
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = v10;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

id sub_100950C1C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_100955FC8(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 56) + 24 * v3;
  id v6 = *(id *)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  uint64_t v8 = *(void **)(v5 + 16);
  id v9 = *(id *)v5;
  id v10 = v7;
  id v11 = v8;
  return v6;
}

unint64_t sub_100950C90@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (uint64_t result = sub_100955FC8(result), (v5 & 1) != 0))
  {
    id v6 = (uint64_t *)(*(void *)(a2 + 56) + (result << 6));
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    uint64_t v9 = v6[2];
    id v10 = (void *)v6[3];
    id v11 = (void *)v6[4];
    uint64_t v12 = v6[5];
    uint64_t v13 = v6[6];
    uint64_t v14 = v6[7];
    id v15 = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = v10;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    id v10 = 0;
    id v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v9;
  a3[3] = v10;
  a3[4] = v11;
  a3[5] = v12;
  a3[6] = v13;
  a3[7] = v14;
  return result;
}

void *sub_100950D50(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_100956CAC((uint64_t)a1);
      if (v7)
      {
        char v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  sub_10050BF48(0, (unint64_t *)&qword_10167C060);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  char v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_100950E28(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_100956E24((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 8 * v6);
        swift_retain();
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for CRLSyncRecordGroup();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v9;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t *CRLMathCalculationController.mathHintsModeChangedNotificationName.unsafeMutableAddressor()
{
  if (qword_10166F568 != -1) {
    swift_once();
  }
  return &static CRLMathCalculationController.mathHintsModeChangedNotificationName;
}

unint64_t CRLMathHintsMode.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

uint64_t CalculateResult.crl_nonTrivialFormattedResult.getter()
{
  if ([v0 isTrivial]) {
    return 0;
  }
  id v2 = [v0 formattedResult];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

double *sub_100950FC8()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1005057FC(&qword_1016741B8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v97 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for CalculateExpression.TokenType();
  unint64_t v5 = *(void *)(v93 - 8);
  __chkstk_darwin(v93, v6);
  uint64_t v92 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v111 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = CalculateExpression.expression.getter();
  unint64_t v10 = v9;
  CalculateExpression.plain.getter();
  unint64_t v11 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
  swift_release();
  uint64_t v12 = v11;
  if (v11 >> 62)
  {
LABEL_61:
    uint64_t v68 = v12;
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v12 = v68;
    if (v13) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
LABEL_3:
      unint64_t v81 = v1;
      BOOL v98 = 0;
      unint64_t v14 = 0;
      unint64_t v91 = v12 & 0xC000000000000001;
      uint64_t v84 = v12 & 0xFFFFFFFFFFFFFF8;
      uint64_t v86 = v12;
      uint64_t v83 = v12 + 32;
      unint64_t v90 = (uint64_t (**)(char *, uint64_t))(v5 + 88);
      int v89 = enum case for CalculateExpression.TokenType.literal(_:);
      int v85 = enum case for CalculateExpression.TokenType.variable(_:);
      uint64_t v82 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = HIBYTE(v10) & 0xF;
      if ((v10 & 0x2000000000000000) == 0) {
        uint64_t v15 = v8 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v16 = 11;
      if (((v10 >> 60) & ((v8 & 0x800000000000000) == 0)) == 0) {
        uint64_t v16 = 7;
      }
      uint64_t v96 = v16 | (v15 << 16);
      unint64_t v88 = 4 * v15;
      unint64_t v1 = 15;
      uint64_t v95 = v10;
      uint64_t v94 = v8;
      uint64_t v87 = v13;
      while (1)
      {
        if (v91)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v18 = v12;
          BOOL v19 = __OFADD__(v14, 1);
          unint64_t v20 = v14 + 1;
          if (v19) {
            goto LABEL_58;
          }
        }
        else
        {
          if (v14 >= *(void *)(v84 + 16)) {
            goto LABEL_60;
          }
          uint64_t v18 = *(void *)(v83 + 8 * v14);
          uint64_t v12 = swift_retain();
          BOOL v19 = __OFADD__(v14, 1);
          unint64_t v20 = v14 + 1;
          if (v19)
          {
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
        }
        unint64_t v99 = v20;
        uint64_t v21 = dispatch thunk of CalculateExpression.Token.text.getter();
        unint64_t v23 = v22;
        if (String.count.getter() < 2)
        {
          uint64_t v100 = 0;
          unint64_t v5 = 0xE000000000000000;
        }
        else
        {
          uint64_t v100 = sub_100955E50(v21, v23);
          unint64_t v5 = v24;
        }
        id v25 = [objc_allocWithZone((Class)PKMathRecognitionToken) init];
        uint64_t v26 = v92;
        CalculateExpression.Token.type.getter();
        int v27 = (*v90)(v26, v93);
        if (v27 == v89)
        {
          uint64_t v12 = (uint64_t)[v25 setType:1];
        }
        else if (v27 == v85)
        {
          uint64_t v12 = (uint64_t)[v25 setType:2];
        }
        else
        {
          [v25 setType:0];
          uint64_t v12 = (*v82)(v92, v93);
        }
        if (v88 < v1 >> 14) {
          goto LABEL_59;
        }
        id v102 = v25;
        uint64_t v103 = v18;
        swift_bridgeObjectRetain();
        uint64_t v28 = String.subscript.getter();
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v107 = v28;
        uint64_t v108 = v30;
        uint64_t v109 = v32;
        uint64_t v110 = v34;
        unint64_t v105 = v21;
        unint64_t v106 = v23;
        uint64_t v35 = type metadata accessor for Locale();
        uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
        uint64_t v37 = (uint64_t)v97;
        v36(v97, 1, 1, v35);
        sub_1006F6734();
        unint64_t v101 = sub_10052E310();
        uint64_t v104 = StringProtocol.range<A>(of:options:range:locale:)();
        LOBYTE(v28) = v38;
        sub_100522F00(v37, &qword_1016741B8);
        swift_bridgeObjectRelease();
        if (v28)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = HIBYTE(v5) & 0xF;
          if ((v5 & 0x2000000000000000) == 0) {
            uint64_t v56 = v100 & 0xFFFFFFFFFFFFLL;
          }
          if (!v56) {
            goto LABEL_55;
          }
          swift_bridgeObjectRetain();
          uint64_t v57 = String.subscript.getter();
          uint64_t v59 = v58;
          uint64_t v61 = v60;
          uint64_t v63 = v62;
          uint64_t v64 = (double *)v100;
          swift_bridgeObjectRelease();
          uint64_t v107 = v57;
          uint64_t v108 = v59;
          uint64_t v109 = v61;
          uint64_t v110 = v63;
          unint64_t v105 = (unint64_t)v64;
          unint64_t v106 = v5;
          uint64_t v65 = (uint64_t)v97;
          v36(v97, 1, 1, v35);
          uint64_t v104 = StringProtocol.range<A>(of:options:range:locale:)();
          LOBYTE(v57) = v66;
          sub_100522F00(v65, &qword_1016741B8);
          swift_bridgeObjectRelease();
          if (v57)
          {
LABEL_55:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"pkTokens", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 450, (uint64_t)"Error parsing calculate tokens", 30, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"pkTokens", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 450);
            swift_bridgeObjectRelease();
            swift_release();

            swift_bridgeObjectRelease();
            return _swiftEmptyArrayStorage;
          }
          if ((v5 & 0x1000000000000000) == 0)
          {
LABEL_28:
            uint64_t v39 = String.UTF16View._nativeGetOffset(for:)();
            goto LABEL_29;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if ((v23 & 0x1000000000000000) == 0) {
            goto LABEL_28;
          }
        }
        uint64_t v39 = String.UTF16View._foreignCount()();
LABEL_29:
        uint64_t v40 = v39;
        id v41 = v102;
        if (objc_msgSend(v102, "type", v81)
          || (unint64_t v5 = *(void *)(dispatch thunk of CalculateExpression.Token.errors.getter() + 16),
              swift_bridgeObjectRelease(),
              v5))
        {
          unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v42 = dispatch thunk of CalculateExpression.Token.errors.getter();
          uint64_t v43 = *(void *)(v42 + 16);
          if (v43)
          {
            uint64_t v44 = v42 + 32;
            do
            {
              swift_getErrorValue();
              swift_errorRetain();
              uint64_t v45 = Error.localizedDescription.getter();
              uint64_t v47 = HIBYTE(v46) & 0xF;
              if ((v46 & 0x2000000000000000) == 0) {
                uint64_t v47 = v45 & 0xFFFFFFFFFFFFLL;
              }
              if (v47)
              {
                id v48 = [objc_allocWithZone((Class)PKMathRecognitionError) init];
                NSString v49 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v48 setErrorString:v49];

                id v50 = v48;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              swift_errorRelease();
              v44 += 8;
              --v43;
            }
            while (v43);
          }
          swift_bridgeObjectRelease();
          uint64_t v8 = v94;
          unint64_t v10 = v95;
          uint64_t v107 = v94;
          uint64_t v108 = v95;
          uint64_t v51 = String.Index.utf16Offset<A>(in:)();
          NSString v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v41 = v102;
          [v102 setText:v52];

          [v41 setCharacterRange:v51, v40];
          sub_10050BF48(0, &qword_101689170);
          swift_bridgeObjectRetain();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v41 setErrors:isa];

          id v54 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          unint64_t v5 = v105;
          if (v98)
          {
            swift_bridgeObjectRelease();
            BOOL v17 = 1;
          }
          else
          {
            if (v105 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v55 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
            BOOL v17 = v55 != 0;
          }
          BOOL v98 = v17;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v10 = v95;
          uint64_t v8 = v94;
        }
        unint64_t v14 = v99;
        unint64_t v1 = String.index(_:offsetBy:)();
        swift_release();

        if (v14 == v87)
        {
          swift_bridgeObjectRelease();
          if (!v98) {
            goto LABEL_63;
          }
          goto LABEL_71;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_63:
  if (CalculateExpression.error.getter())
  {
    swift_getErrorValue();
    uint64_t v69 = Error.localizedDescription.getter();
    unint64_t v71 = v70;
    swift_errorRelease();
    uint64_t v72 = HIBYTE(v71) & 0xF;
    if ((v71 & 0x2000000000000000) == 0) {
      uint64_t v72 = v69 & 0xFFFFFFFFFFFFLL;
    }
    if (!v72)
    {
      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
    id v73 = [objc_allocWithZone((Class)PKMathRecognitionError) init];
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v73 setErrorString:v74];

    id v75 = [objc_allocWithZone((Class)PKMathRecognitionToken) init];
    [v75 setType:5];
    [v75 setCharacterRange:0, String.count.getter()];
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v75 setText:v76];

    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_101177E70;
    *(void *)(v77 + 32) = v73;
    uint64_t v107 = v77;
    specialized Array._endMutation()();
    sub_10050BF48(0, &qword_101689170);
    id v78 = v73;
    Class v79 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v75 setErrors:v79];

    id v80 = v75;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
LABEL_71:
    swift_bridgeObjectRelease();
  }
  return (double *)v111;
}

_UNKNOWN **static CRLMathHintsMode.allCases.getter()
{
  return &off_101504318;
}

uint64_t sub_100951C68()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100951CC8()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_100951D18(void *a1@<X8>)
{
  *a1 = &off_101502E50;
}

Class sub_100951D8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  swift_beginAccess();
  type metadata accessor for UUID();
  sub_10050BF48(0, a4);
  sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v5.super.isa;
}

uint64_t sub_100951E8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, void *a6)
{
  type metadata accessor for UUID();
  sub_10050BF48(0, a4);
  sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = (uint64_t *)(a1 + *a6);
  swift_beginAccess();
  *unint64_t v10 = v9;
  return swift_bridgeObjectRelease();
}

NSString sub_100951F78()
{
  NSString result = String._bridgeToObjectiveC()();
  static CRLMathCalculationController.mathHintsModeChangedNotificationName = (uint64_t)result;
  return result;
}

id static CRLMathCalculationController.mathHintsModeChangedNotificationName.getter()
{
  return sub_1009520A0(&qword_10166F568, (void **)&static CRLMathCalculationController.mathHintsModeChangedNotificationName);
}

NSString sub_100951FF8()
{
  NSString result = String._bridgeToObjectiveC()();
  static CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName = (uint64_t)result;
  return result;
}

uint64_t *CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName.unsafeMutableAddressor()
{
  if (qword_10166F570 != -1) {
    swift_once();
  }
  return &static CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName;
}

id static CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName.getter()
{
  return sub_1009520A0(&qword_10166F570, (void **)&static CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName);
}

id sub_1009520A0(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

char *sub_100952110()
{
  uint64_t v1 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v39 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions;
  uint64_t v13 = v0;
  *(void *)&v0[v12] = sub_100A3BFAC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_pkExpressions;
  *(void *)&v13[v14] = sub_100A3C1CC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroups;
  *(void *)&v13[v15] = sub_100A3C1E0((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v13[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_mathHintsUserDefaultsObserver] = 0;
  *(void *)&v13[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_suspendCount] = 0;
  sub_1005057FC(&qword_101684328);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  BOOL v17 = (void *)CalculateKeyAllowPartialExpressions;
  *(void *)(inited + 32) = CalculateKeyAllowPartialExpressions;
  id v18 = objc_allocWithZone((Class)NSNumber);
  id v19 = v17;
  id v20 = [v18 initWithBool:1];
  uint64_t v21 = sub_10050BF48(0, (unint64_t *)&qword_101684330);
  *(void *)(inited + 40) = v20;
  unint64_t v22 = (void *)CalculateKeyConvertTrivial;
  *(void *)(inited + 64) = v21;
  *(void *)(inited + 72) = v22;
  id v23 = objc_allocWithZone((Class)NSNumber);
  id v24 = v22;
  id v25 = [v23 initWithBool:1];
  *(void *)(inited + 104) = v21;
  *(void *)(inited + 80) = v25;
  sub_100A3B9F0(inited);
  type metadata accessor for CalculateDocument();
  swift_allocObject();
  *(void *)&v13[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_calculateDocument] = CalculateDocument.init(expressions:options:synchronous:)();
  sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  int v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v28 = v38;
  v27(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v38);
  *(void *)&v13[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_pkExpressionsQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  v27(v7, v26, v28);
  *(void *)&v13[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroupsQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  uint64_t v29 = (objc_class *)type metadata accessor for CRLMathCalculationController();
  v41.receiver = v13;
  v41.super_class = v29;
  id v30 = [super init];
  uint64_t v31 = type metadata accessor for TaskPriority();
  uint64_t v32 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v39, 1, 1, v31);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  uint64_t v34 = (char *)v30;
  sub_1005912D0(v32, (uint64_t)&unk_1016890D8, v33);
  swift_release();
  id v40 = [self standardUserDefaults];
  swift_getKeyPath();
  uint64_t v35 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();

  swift_release();
  uint64_t v36 = *(void **)&v34[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_mathHintsUserDefaultsObserver];
  *(void *)&v34[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_mathHintsUserDefaultsObserver] = v35;

  return v34;
}

uint64_t sub_100952630()
{
  return _swift_task_switch(sub_10095264C, 0, 0);
}

uint64_t sub_10095264C()
{
  *(void *)(v0 + 16) = type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1009526E4, v2, v1);
}

uint64_t sub_1009526E4()
{
  swift_release();
  if (qword_10166F9A8 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_10095277C, 0, 0);
}

uint64_t sub_10095277C()
{
  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1005A5EF8, v2, v1);
}

id CRLMathCalculationController.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_mathHintsUserDefaultsObserver];
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CRLMathCalculationController();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLMathCalculationController()
{
  return self;
}

void CRLMathCalculationController.beginTrackingResultsFor(expression:containingDrawingLayoutOriginProvider:withSingleDrawingSortIndex:onUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v26 = a4;
  uint64_t v27 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalculateExpression.id.getter();
  uint64_t v16 = (uint64_t *)(v6 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  sub_100950C90((unint64_t)v15, v17, v29);
  swift_bridgeObjectRelease();
  id v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, v11);
  sub_1008731F0((uint64_t)v29);
  sub_10051B3EC((uint64_t)v29, (uint64_t)v30, &qword_101684360);
  if (v30[0])
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"beginTrackingResultsFor(expression:containingDrawingLayoutOriginProvider:withSingleDrawingSortIndex:onUpdate:)", 110, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 110, (uint64_t)"Tried to track a CalculateExpression that is already being tracked.", 67, 2u, (uint64_t)_swiftEmptyArrayStorage);
    char v25 = 2;
    id v23 = "Tried to track a CalculateExpression that is already being tracked.";
    uint64_t v24 = 67;
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"beginTrackingResultsFor(expression:containingDrawingLayoutOriginProvider:withSingleDrawingSortIndex:onUpdate:)", 110, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 110);
  }
  else
  {
    CalculateExpression.id.getter();
    *(void *)&long long v31 = v26;
    *((void *)&v31 + 1) = a5;
    uint64_t v32 = a1;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = v27;
    uint64_t v36 = a3;
    double v37 = a6;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v16;
    uint64_t *v16 = 0x8000000000000000;
    sub_1009764FC(&v31, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    uint64_t *v16 = v28;
    swift_bridgeObjectRelease();
    v18(v15, v11);
    swift_endAccess();
    uint64_t v20 = CalculateExpression.id.getter();
    __chkstk_darwin(v20, v21);
    __chkstk_darwin(v22, &v26 - 6);
    withObservationTracking<A>(_:onChange:)();
    v18(v15, v11);
  }
}

uint64_t CRLMathCalculationController.stopTrackingResultsFor(expression:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  CalculateExpression.id.getter();
  swift_beginAccess();
  sub_10095C658((uint64_t)v4, (uint64_t)v8);
  objc_super v5 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v5(v4, v0);
  swift_endAccess();
  sub_1008731F0((uint64_t)v8);
  CalculateExpression.id.getter();
  sub_100954C08((uint64_t)v4);
  v5(v4, v0);
  CalculateExpression.id.getter();
  sub_100955880((uint64_t)v4);
  return ((uint64_t (*)(unsigned char *, uint64_t))v5)(v4, v0);
}

void sub_100952EA8(unint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions);
  swift_beginAccess();
  uint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  sub_100950C90(a1, v11, v20);
  swift_bridgeObjectRelease();
  sub_10051B3EC((uint64_t)v20, (uint64_t)&v21, &qword_101684360);
  if ((void)v21)
  {
    uint64_t v13 = v23;
    uint64_t v12 = v24;
    long long v27 = v21;
    uint64_t v28 = v22;
    uint64_t v29 = v23;
    id v30 = v24;
    uint64_t v31 = v25;
    uint64_t v32 = v26;
    double v33 = a2;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    swift_beginAccess();
    id v14 = v12;
    swift_retain_n();
    swift_retain();
    swift_retain();
    id v15 = v13;
    id v16 = v14;
    swift_retain();
    swift_retain();
    id v17 = v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    sub_1009764FC(&v27, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v10 = v19;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    swift_endAccess();
    swift_release_n();

    swift_release_n();
    swift_release_n();
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateSingleDrawingSortIndexFor(for:to:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 134, (uint64_t)"Tried to update the sort index of an expression that is not being tracked.", 74, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateSingleDrawingSortIndexFor(for:to:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 134);
  }
}

uint64_t sub_1009532A4()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain_n();
  uint64_t v3 = sub_1006BA484(v2);
  swift_bridgeObjectRelease();
  uint64_t v7 = v3;
  sub_10098668C((uint64_t *)&v7);
  swift_bridgeObjectRelease();
  uint64_t v4 = *((void *)v7 + 2);
  if (v4)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 48;
    do
    {
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 64;
      --v4;
    }
    while (v4);
  }
  swift_release();
  return dispatch thunk of CalculateDocument.expressions.setter();
}

uint64_t sub_1009533F8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 56);
  uint64_t v3 = *(double (**)(void))(a2 + 40);
  double v4 = *(double *)(a2 + 56);
  double v5 = (*(double (**)(void))(a1 + 40))();
  double v7 = v6;
  double v9 = v3();
  if (vabdd_f64(v7, v8) <= 16.0 && v5 != v9) {
    goto LABEL_21;
  }
  if (v7 < v8) {
    return 1;
  }
  if (v8 >= v7)
  {
LABEL_21:
    if (sub_1003E86EC())
    {
      if (v9 < v5) {
        return 1;
      }
      if (v5 < v9) {
        return 0;
      }
      goto LABEL_14;
    }
    if (v5 < v9) {
      return 1;
    }
    if (v9 >= v5)
    {
LABEL_14:
      if (v2 >= v4)
      {
        if (v4 >= v2)
        {
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184, (uint64_t)"Should not get a tie when sorting calculate expressions.", 56, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184);
        }
        return 0;
      }
      return 1;
    }
  }
  return 0;
}

uint64_t CRLMathCalculationController.observedExpression(for:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100955FC8(a1);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  double v7 = (uint64_t *)(*(void *)(v4 + 56) + (v5 << 6));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  uint64_t v11 = (void *)v7[3];
  uint64_t v12 = (void *)v7[4];
  id v13 = v12;
  swift_retain();
  swift_retain();
  swift_retain_n();
  id v14 = v11;
  swift_bridgeObjectRelease();
  sub_10086FD4C(v8, v9, v10, v11, v12);
  return v10;
}

uint64_t CRLMathCalculationController.resultForExpressionWithUUID(_:locale:)(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(*v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_100955FC8(a1);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)(*(void *)(v6 + 56) + (v7 << 6));
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v12 = v9[2];
      id v13 = (void *)v9[3];
      id v14 = (void *)v9[4];
      id v15 = v14;
      swift_retain();
      swift_retain_n();
      swift_retain();
      id v16 = v13;
      swift_bridgeObjectRelease();
      sub_10086FD4C(v10, v11, v12, v13, v14);
      uint64_t v17 = CalculateExpression.result.getter();
      if (v17)
      {
        id v18 = (void *)v17;
        sub_1005057FC(&qword_101688D90);
        uint64_t v19 = type metadata accessor for Locale();
        uint64_t v20 = *(void *)(v19 - 8);
        unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_10117E810;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 16))(v22 + v21, a2, v19);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v18 setLocales:isa];

        if (([v18 isTrivial] & 1) == 0)
        {
          id v26 = [v18 formattedResult];
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_release();

          return v24;
        }
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

void (*CRLMathCalculationController.mathHintsMode.modify(uint64_t *a1))(uint64_t *a1)
{
  *a1 = -[CRLMathCalculationController mathHintsMode]_0();
  return sub_100953B5C;
}

void sub_100953B5C(uint64_t *a1)
{
}

void sub_100953B64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = CalculateExpression.expression.getter();
  unint64_t v12 = v11;
  id v13 = (void *)CalculateExpression.result.getter();
  uint64_t v14 = CalculateExpression.error.getter();
  uint64_t v32 = v6;
  if (v14)
  {
    *(void *)&long long v45 = v14;
    sub_1005057FC(&qword_101672BD0);
    sub_10050BF48(0, &qword_101689230);
    if (swift_dynamicCast()) {
      id v15 = (void *)v41;
    }
    else {
      id v15 = 0;
    }
  }
  else
  {
    id v15 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v16 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16
    || (uint64_t v17 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions),
        swift_beginAccess(),
        uint64_t v18 = *v17,
        swift_bridgeObjectRetain(),
        sub_100950C90(v33, v18, v36),
        swift_bridgeObjectRelease(),
        sub_10051B3EC((uint64_t)v36, (uint64_t)&v37, &qword_101684360),
        !(void)v37))
  {

    return;
  }
  long long v41 = v37;
  long long v42 = v38;
  long long v43 = v39;
  long long v44 = v40;
  id v31 = (id)*((void *)&v38 + 1);
  if (v13)
  {
    if (!*((void *)&v38 + 1)
      || (sub_10050BF48(0, &qword_101689238),
          id v19 = v31,
          id v20 = v13,
          char v21 = static NSObject.== infix(_:_:)(),
          v20,
          v19,
          (v21 & 1) == 0))
    {
LABEL_21:
      uint64_t v25 = v32;
      (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v9, v33, v5);
      unint64_t v33 = v5;
      id v30 = (void (*)(uint64_t))v41;
      long long v45 = v41;
      uint64_t v46 = a1;
      uint64_t v47 = v13;
      id v48 = v15;
      uint64_t v49 = *((void *)&v43 + 1);
      long long v50 = v44;
      swift_beginAccess();
      id v26 = v15;
      swift_retain();
      swift_retain();
      swift_retain();
      id v27 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = *v17;
      *uint64_t v17 = 0x8000000000000000;
      sub_1009764FC(&v45, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
      *uint64_t v17 = v34;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t))(v25 + 8))(v9, v33);
      swift_endAccess();
      if ((CalculateExpression.needsEvaluation.getter() & 1) != 0
        || (CalculateExpression.isEvaluating.getter() & 1) != 0)
      {
        swift_release();
        swift_release();

        sub_10051B3EC((uint64_t)&v43, (uint64_t)v35, &qword_101684370);
        sub_1006436E8(v35);
      }
      else
      {
        v30(a1);
        swift_release();

        swift_release();
        sub_10051B3EC((uint64_t)&v43, (uint64_t)v35, &qword_101684370);
        sub_1006436E8(v35);
      }
      goto LABEL_25;
    }
  }
  else if (*((void *)&v38 + 1))
  {
    goto LABEL_21;
  }
  id v22 = (id)v43;
  if (v15)
  {
    if (!(void)v43) {
      goto LABEL_21;
    }
    sub_10050BF48(0, &qword_101689230);
    id v22 = v22;
    id v23 = v15;
    char v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0) {
      goto LABEL_21;
    }
  }
  else if ((void)v43)
  {
    goto LABEL_21;
  }

  swift_release();
  swift_release();

LABEL_25:
  swift_release();
}

uint64_t (*sub_100953FD0(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v10 = __chkstk_darwin(v6, v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6, v10);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v12 + ((v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  id v13 = a1;
  swift_retain();
  return sub_100988B5C;
}

uint64_t sub_100954124(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v10 = &a1[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressions];
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100955FC8(a2);
    char v13 = v12;
    uint64_t result = swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v14 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
      type metadata accessor for MainActor();
      uint64_t v15 = a1;
      swift_retain();
      uint64_t v16 = static MainActor.shared.getter();
      uint64_t v17 = (void *)swift_allocObject();
      void v17[2] = v16;
      _OWORD v17[3] = &protocol witness table for MainActor;
      v17[4] = v15;
      v17[5] = a3;
      sub_1005912D0((uint64_t)v9, (uint64_t)&unk_101689228, (uint64_t)v17);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1009542A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10095439C, v8, v7);
}

uint64_t sub_10095439C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  swift_release();
  CalculateExpression.id.getter();
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v4;
  v6[3] = v5;
  id v6[4] = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v5;
  v7[3] = v1;
  v7[4] = v4;
  withObservationTracking<A>(_:onChange:)();
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t CRLMathCalculationController.pkMathRecognitionViewControllerSolvingStyle.getter()
{
  unint64_t v0 = -[CRLMathCalculationController mathHintsMode]_0();
  if (v0 < 3) {
    return 2 - v0;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_100954634(char a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_suspendCount;
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_suspendCount];
  uint64_t v5 = 1;
  if ((a1 & 1) == 0) {
    uint64_t v5 = -1;
  }
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(void *)&v2[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_suspendCount] = v7;
  if (v7 < 0)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"suspendCount", 12, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 324, (uint64_t)"Math solving suspend count should never go below zero. Did you call resumeSolving() without calling suspendSolving()?", 117, 2u, (uint64_t)_swiftEmptyArrayStorage);
    LOBYTE(v10) = 2;
    uint64_t v8 = "Math solving suspend count should never go below zero. Did you call resumeSolving() without calling suspendSolving()?";
    uint64_t v9 = 117;
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"suspendCount", 12, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 324);
    uint64_t v7 = *(void *)&v2[v3];
  }
  if (v4 < 1 == v7 > 0)
  {
    uint64_t v1 = self;
    [v1 begin];
    uint64_t v2 = (char *)[self defaultCenter];
    if (qword_10166F570 == -1)
    {
LABEL_8:
      [v2 postNotificationName:static CRLMathCalculationController.mathHintsSuspensionStatusChangedNotificationName object:0 userInfo:0 v8, v9, v10];

      [v1 commit];
      return;
    }
LABEL_12:
    swift_once();
    goto LABEL_8;
  }
}

uint64_t sub_100954818(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  char v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1008731E8;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_10151BF18;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  id v16 = a1;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release();
}

uint64_t sub_100954A48(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v7 = __chkstk_darwin(v4, v6).n128_u64[0];
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 uuid:v7];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_pkExpressions);
  swift_beginAccess();
  id v12 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v11;
  *uint64_t v11 = 0x8000000000000000;
  sub_1009766F4((uint64_t)v12, (uint64_t)v9, isUniquelyReferenced_nonNull_native, &qword_1016890C8);
  *uint64_t v11 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  return swift_endAccess();
}

uint64_t sub_100954C08(uint64_t a1)
{
  return sub_1009558B0(a1, (uint64_t)&OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_pkExpressionsQueue, (uint64_t)&unk_10151BFC8, (uint64_t)sub_1009889CC, (uint64_t)&unk_10151BFE0);
}

void sub_100954C38(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100954C78(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __n128 v7 = __chkstk_darwin(v3, v6);
  uint64_t v19 = 0;
  uint64_t v8 = *(NSObject **)&v1[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_pkExpressionsQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &v19;
  *(void *)(v10 + 24) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100988588;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100659320;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_1006D9628;
  aBlock[3] = &unk_10151BEC8;
  id v12 = _Block_copy(aBlock);
  uint64_t v13 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v19;
    swift_release();
    return v16;
  }
  return result;
}

uint64_t sub_100954EC0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __n128 v7 = __chkstk_darwin(v3, v6);
  uint64_t v19 = 0;
  uint64_t v8 = *(NSObject **)&v1[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroupsQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &v19;
  *(void *)(v10 + 24) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10098849C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1006591F0;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_1006D9628;
  aBlock[3] = &unk_10151BE50;
  id v12 = _Block_copy(aBlock);
  uint64_t v13 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v19;
    swift_release();
    return v16;
  }
  return result;
}

void sub_1009550F0(void **a1, uint64_t a2, uint64_t a3)
{
}

void sub_1009550FC(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (uint64_t *)(a2 + *a4);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_100955FC8(a3);
    if (v9)
    {
      uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
      id v11 = v10;
    }
    else
    {
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v12 = *a1;
  *a1 = v10;
}

id sub_1009551B4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a1;
  id v12 = (void *)a4(v10);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

  return v12;
}

uint64_t sub_1009552BC(uint64_t a1, void *a2)
{
  id v26 = a2;
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  id v12 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v14);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(void *)&v2[OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroupsQueue];
  static DispatchWorkItemFlags.barrier.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v12, v8);
  id v20 = v26;
  *(void *)(v19 + v18) = v26;
  aBlock[4] = sub_100988468;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_10151BDD8;
  char v21 = _Block_copy(aBlock);
  id v22 = v20;
  id v23 = v2;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v27);
  return swift_release();
}

uint64_t sub_1009555C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v11, a2, v6, v9);
  id v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroups);
  swift_beginAccess();
  if (a3)
  {
    id v13 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v12;
    *id v12 = 0x8000000000000000;
    sub_1009766F4((uint64_t)v13, (uint64_t)v11, isUniquelyReferenced_nonNull_native, &qword_1016890C0);
    *id v12 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  else
  {
    uint64_t v15 = (void *)sub_10095CE54((uint64_t)v11, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_1016890C0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  return swift_endAccess();
}

uint64_t sub_100955880(uint64_t a1)
{
  return sub_1009558B0(a1, (uint64_t)&OBJC_IVAR____TtC8Freeform28CRLMathCalculationController_expressionStrokeGroupsQueue, (uint64_t)&unk_10151BF78, (uint64_t)sub_1009889A0, (uint64_t)&unk_10151BF90);
}

uint64_t sub_1009558B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v15 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = *(void *)&v5[*(void *)v25[0]];
  static DispatchWorkItemFlags.barrier.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v21 + v20, v15, v11);
  aBlock[4] = v27;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = v28;
  id v22 = _Block_copy(aBlock);
  id v23 = v5;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v29);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v26);
  return swift_release();
}

void sub_100955B98(uint64_t a1, uint64_t a2)
{
}

void sub_100955BC0(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void (*a5)(unint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_100955FC8(a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = 0;
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v8;
    uint64_t v16 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10098315C((uint64_t (*)(void))&type metadata accessor for UUID, a4);
      uint64_t v13 = v16;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v9, v15);
    uint64_t v11 = *(void **)(*(void *)(v16 + 56) + 8 * v9);
    a5(v9, v16);
    *uint64_t v8 = v16;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
}

uint64_t sub_100955D1C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t CRLMathCalculationController.crlaxExpressionsInOrder.getter()
{
  return dispatch thunk of CalculateDocument.expressions.getter();
}

uint64_t sub_100955E50(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 4 * v2;
  while (1)
  {
    v4._countAndFlagsBits = String.subscript.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    if (v3 == (unint64_t)String.index(_:offsetBy:)() >> 14) {
      break;
    }
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
  }
  return 0;
}

unint64_t sub_100955F14(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_100957B04(a1, v2);
}

unint64_t sub_100955F50(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100957938(a1, a2, v4);
}

unint64_t sub_100955FC8(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1009582FC(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1009560A0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_100959C4C(a1, v2);
}

unint64_t sub_100956130(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 + 5);
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v6 = Hasher._finalize()();

  return sub_100957A1C(a1, a2, a3, v6);
}

unint64_t sub_1009561F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  Swift::Int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
  sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  Swift::Int v9 = Hasher._finalize()();
  return sub_100957BA0(a1, v9);
}

unint64_t sub_100956360(char a1)
{
  Hasher.init(_seed:)();
  CRLTransactablePropertyMapKeys.rawValue.getter(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100957DB8(a1, v2);
}

unint64_t sub_1009563EC(uint64_t a1)
{
  return sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

unint64_t sub_10095642C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, (unint64_t *)&qword_1016792E8);
}

unint64_t sub_10095647C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100958124(a1, v4);
}

unint64_t sub_1009564C0(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_100957B04(a1, v2);
}

unint64_t sub_100956528(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1009581EC(a1, v4, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);
}

unint64_t sub_10095657C(uint64_t a1)
{
  type metadata accessor for URL();
  sub_100988954((unint64_t *)&unk_101687A20, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1009582FC(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, (unint64_t *)&qword_10167BEB8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_100956650(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095849C(a1, v2);
}

unint64_t sub_10095678C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, (unint64_t *)&qword_101684330);
}

unint64_t sub_1009567DC(uint64_t a1)
{
  return sub_10095681C(a1, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
}

unint64_t sub_10095681C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  return sub_100958838(a1, v8, a2, a3, a4);
}

unint64_t sub_100956928(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, &qword_10167C510);
}

unint64_t sub_10095697C(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100DDAA58();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100958AA0(a1, v2);
}

unint64_t sub_1009569E8(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100959088(a1, v2);
}

unint64_t sub_100956A4C(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10060FFE8();
  Swift::Int v2 = Hasher._finalize()();
  return sub_10095A850(a1, v2, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item, (uint64_t (*)(char *, uint64_t))sub_100627FFC, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

unint64_t sub_100956B04(unsigned __int16 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_100959220(a1, v2);
}

unint64_t sub_100956B4C(uint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)a1);
  Hasher._combine(_:)(*(void *)(a1 + 8));
  Hasher._combine(_:)(*(void *)(a1 + 16));
  id v2 = *(id *)(a1 + 24);
  NSObject.hash(into:)();
  sub_1005D116C(a1);
  Selector.hash(into:)();
  Swift::Int v3 = Hasher._finalize()();

  return sub_1009592C0((uint64_t *)a1, v3);
}

unint64_t sub_100956BF8(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_100988954(&qword_101688E98, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100959400(a1, v2);
}

unint64_t sub_100956CAC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, &qword_10167BED0);
}

unint64_t sub_100956CFC(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095955C(a1, v2);
}

unint64_t sub_100956E24(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, (unint64_t *)&qword_101674210);
}

unint64_t sub_100956E74(char a1)
{
  char v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v3 = Hasher._finalize()();

  return sub_1009597C4(v2, v3);
}

unint64_t sub_100956EE4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1009581EC(a1, v4, (void (*)(void))type metadata accessor for CRLContainerItem);
}

unint64_t sub_100956F38(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100959880(a1 & 1, v2);
}

unint64_t sub_100956FC8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095997C(a1, v2);
}

unint64_t sub_1009570E8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100958724(a1, v4, (unint64_t *)&qword_10167AF10);
}

unint64_t sub_100957138(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_100959BD0(a1, a2, v4);
}

unint64_t sub_1009571B8(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100959DC4(a1 & 1, v2);
}

unint64_t sub_100957254(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100959EF4(a1, v2);
}

unint64_t sub_10095731C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095A098(a1, v2);
}

unint64_t sub_100957420(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10095A2A8(v2, a1);
}

unint64_t sub_100957468(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_10095A340(a1, v2);
}

unint64_t sub_1009574D0(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095A3E0(a1, v2);
}

unint64_t sub_100957584(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  Hasher.init(_seed:)();
  sub_100B8174C((int)&v10, a1, a2, a3, a4);
  Swift::Int v8 = Hasher._finalize()();

  return sub_10095A55C(a1, a2, a3, a4, v8);
}

unint64_t sub_10095761C(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095A70C(a1 & 1, v2);
}

unint64_t sub_1009576C8(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100511688();
  Swift::Int v2 = Hasher._finalize()();
  return sub_10095A850(a1, v2, type metadata accessor for CRLAssetReferrerIdentifier, type metadata accessor for CRLAssetReferrerIdentifier, (uint64_t (*)(char *, uint64_t))sub_100513994, type metadata accessor for CRLAssetReferrerIdentifier);
}

unint64_t sub_100957780(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1009581EC(a1, v4, (void (*)(void))type metadata accessor for CRLBoardItem);
}

unint64_t sub_1009577D4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1009581EC(a1, v4, (void (*)(void))type metadata accessor for CRLSceneInfo);
}

unint64_t sub_100957828(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1009581EC(a1, v4, (void (*)(void))type metadata accessor for CRLWPListStyle);
}

unint64_t sub_10095787C(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_101199FA0[a1]);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10095A9AC(a1, v2);
}

unint64_t sub_1009578F4(unsigned __int8 a1)
{
  Swift::Int v2 = sub_10095092C();

  return sub_10095AA60(a1, v2);
}

unint64_t sub_100957938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100957A1C(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    int v10 = a1;
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = (unsigned __int8 *)(v12 + 24 * v7);
      if (*v13 == v10)
      {
        uint64_t v14 = *((void *)v13 + 2);
        if (v14)
        {
          if (a3)
          {
            BOOL v15 = *((void *)v13 + 1) == a2 && v14 == a3;
            if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              return v7;
            }
          }
        }
        else if (!a3)
        {
          return v7;
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_100957B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100957BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v7 = __chkstk_darwin(v32, v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v33 = v2;
  uint64_t v13 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v14 = a2 & ~v13;
  uint64_t v31 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v25 = ~v13;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v30 = *(void *)(a1 + 16);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v29 = v15;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v15 + 32);
    uint64_t v27 = v15 + 32;
    uint64_t v16 = (void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      uint64_t v17 = *(void *)(*(void *)(*(void *)(v33 + 48) + 8 * v14) + 24);
      uint64_t v18 = swift_getObjectType();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 32);
      swift_retain();
      v19(v18, v17);
      v26(ObjectType, v29);
      char v20 = static UUID.== infix(_:_:)();
      uint64_t v21 = *v16;
      uint64_t v22 = v32;
      (*v16)(v9, v32);
      v21(v12, v22);
      swift_release();
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v25;
    }
    while (((*(void *)(v31 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_100957DB8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEA00000000006174;
      uint64_t v8 = 0x61446E6F6D6D6F63;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0x656E6961746E6F63;
          unint64_t v7 = 0xED00006174614472;
          break;
        case 2:
          unint64_t v9 = 0x446472616F62;
          goto LABEL_10;
        case 3:
          uint64_t v10 = 1734438249;
          goto LABEL_9;
        case 4:
          uint64_t v10 = 1769369453;
          goto LABEL_9;
        case 5:
          uint64_t v10 = 1885431923;
LABEL_9:
          unint64_t v9 = v10 & 0xFFFF0000FFFFFFFFLL | 0x446500000000;
LABEL_10:
          uint64_t v8 = v9 & 0xFFFFFFFFFFFFLL | 0x7461000000000000;
          unint64_t v7 = 0xE900000000000061;
          break;
        case 6:
          unint64_t v7 = 0xE800000000000000;
          unsigned int v11 = 1701603686;
          goto LABEL_14;
        case 7:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x617461446C7275;
          break;
        case 8:
          unint64_t v7 = 0xE800000000000000;
          unsigned int v11 = 2053403509;
LABEL_14:
          uint64_t v8 = v11 | 0x6174614400000000;
          break;
        case 9:
          uint64_t v8 = 0x646E616865657266;
          unint64_t v7 = 0xEC00000061746144;
          break;
        default:
          break;
      }
      unint64_t v12 = 0xEA00000000006174;
      switch(v6)
      {
        case 1:
          unint64_t v12 = 0xED00006174614472;
          if (v8 == 0x656E6961746E6F63) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 2:
          unint64_t v13 = 0x446472616F62;
          goto LABEL_26;
        case 3:
          uint64_t v14 = 1734438249;
          goto LABEL_25;
        case 4:
          uint64_t v14 = 1769369453;
          goto LABEL_25;
        case 5:
          uint64_t v14 = 1885431923;
LABEL_25:
          unint64_t v13 = v14 & 0xFFFF0000FFFFFFFFLL | 0x446500000000;
LABEL_26:
          unint64_t v12 = 0xE900000000000061;
          if (v8 == (v13 & 0xFFFFFFFFFFFFLL | 0x7461000000000000)) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 6:
          unint64_t v12 = 0xE800000000000000;
          if (v8 != 0x61746144656C6966) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 7:
          unint64_t v12 = 0xE700000000000000;
          if (v8 != 0x617461446C7275) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 8:
          unint64_t v12 = 0xE800000000000000;
          if (v8 != 0x617461447A647375) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 9:
          unint64_t v12 = 0xEC00000061746144;
          if (v8 != 0x646E616865657266) {
            goto LABEL_28;
          }
          goto LABEL_27;
        default:
          if (v8 != 0x61446E6F6D6D6F63) {
            goto LABEL_28;
          }
LABEL_27:
          if (v7 == v12)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_28:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100958124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10050BF84(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10050BFE0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1009581EC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    a3(0);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1009582FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8);
      sub_100988954(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10095849C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEA00000000006174;
      unint64_t v8 = 0x61447463656A626FLL;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x52436E6F6D6D6F63;
          unint64_t v7 = 0xEE00617461445444;
          break;
        case 2:
          unint64_t v7 = 0x80000001012356C0;
          unint64_t v8 = 0xD000000000000010;
          break;
        case 3:
          unint64_t v8 = 0xD000000000000017;
          unint64_t v7 = 0x80000001012356E0;
          break;
        case 4:
          unint64_t v8 = 0xD000000000000019;
          unint64_t v7 = 0x8000000101235700;
          break;
        default:
          break;
      }
      unint64_t v9 = 0x61447463656A626FLL;
      unint64_t v10 = 0xEA00000000006174;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xEE00617461445444;
          if (v8 == 0x52436E6F6D6D6F63) {
            goto LABEL_15;
          }
          goto LABEL_16;
        case 2:
          unint64_t v10 = 0x80000001012356C0;
          if (v8 != 0xD000000000000010) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 3:
          unint64_t v9 = 0xD000000000000017;
          unint64_t v10 = 0x80000001012356E0;
          goto LABEL_14;
        case 4:
          unint64_t v10 = 0x8000000101235700;
          if (v8 != 0xD000000000000019) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
LABEL_14:
          if (v8 != v9) {
            goto LABEL_16;
          }
LABEL_15:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100958724(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10050BF48(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100958838(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = a3(0) - 8;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  unint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v35 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v35 = v5 + 64;
  uint64_t v36 = v5;
  uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v24 = a2 & ~v23;
  if ((*(void *)(v5 + 64 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
  {
    uint64_t v25 = ~v23;
    uint64_t v26 = *(void *)(v20 + 72);
    do
    {
      sub_100988768(*(void *)(v36 + 48) + v26 * v24, (uint64_t)v22, a4);
      char v27 = static UUID.== infix(_:_:)();
      sub_100988768((uint64_t)v22, (uint64_t)v18, a4);
      sub_100988768(a1, (uint64_t)v14, a4);
      if (v27)
      {
        uint64_t v28 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        uint64_t v29 = *(void *)&v18[v28];
        uint64_t v30 = *(void *)&v18[v28 + 8];
        uint64_t v31 = &v14[v28];
        if (v29 == *(void *)v31 && v30 == *((void *)v31 + 1))
        {
          sub_1009888A0((uint64_t)v14, a5);
          sub_1009888A0((uint64_t)v18, a5);
          sub_1009888A0((uint64_t)v22, a5);
          return v24;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_1009888A0((uint64_t)v14, a5);
        sub_1009888A0((uint64_t)v18, a5);
        sub_1009888A0((uint64_t)v22, a5);
        if (v33) {
          return v24;
        }
      }
      else
      {
        sub_1009888A0((uint64_t)v14, a5);
        sub_1009888A0((uint64_t)v18, a5);
        sub_1009888A0((uint64_t)v22, a5);
      }
      unint64_t v24 = (v24 + 1) & v25;
    }
    while (((*(void *)(v35 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) != 0);
  }
  return v24;
}

unint64_t sub_100958AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  long long v40 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_1005057FC(&qword_10167BE58);
  __chkstk_darwin(v50, v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0) - 8;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  __chkstk_darwin(v14, v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v21 = a2 & ~v20;
  uint64_t v49 = v2 + 64;
  if (((*(void *)(v2 + 64 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
    return v21;
  }
  uint64_t v44 = v17;
  uint64_t v45 = v2;
  uint64_t v22 = *(void *)(v16 + 72);
  uint64_t v47 = ~v20;
  uint64_t v48 = v22;
  uint64_t v46 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  long long v38 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v42 = a1;
  uint64_t v43 = v5;
  while (2)
  {
    sub_100988768(*(void *)(v2 + 48) + v48 * v21, (uint64_t)v19, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    uint64_t v23 = (uint64_t)&v11[*(int *)(v50 + 48)];
    sub_100988768((uint64_t)v19, (uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100988768(a1, v23, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    uint64_t v24 = sub_1005057FC(&qword_101670F30);
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48);
    switch(v25((uint64_t)v11, 5, v24))
    {
      case 1u:
        if (v25(v23, 5, v24) != 1) {
          goto LABEL_15;
        }
        goto LABEL_28;
      case 2u:
        if (v25(v23, 5, v24) == 2) {
          goto LABEL_28;
        }
        goto LABEL_15;
      case 3u:
        if (v25(v23, 5, v24) == 3) {
          goto LABEL_28;
        }
        goto LABEL_15;
      case 4u:
        if (v25(v23, 5, v24) == 4) {
          goto LABEL_28;
        }
        goto LABEL_15;
      case 5u:
        if (v25(v23, 5, v24) != 5) {
          goto LABEL_15;
        }
        goto LABEL_28;
      default:
        uint64_t v26 = v44;
        sub_100988768((uint64_t)v11, v44, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v27 = *(int *)(v24 + 48);
        uint64_t v28 = *(void *)(v26 + v27 + 8);
        uint64_t v41 = *(void *)(v26 + v27);
        if (v25(v23, 5, v24))
        {
          swift_bridgeObjectRelease();
          (*v46)(v26, v43);
          uint64_t v2 = v45;
          a1 = v42;
LABEL_15:
          sub_100522F00((uint64_t)v11, &qword_10167BE58);
          goto LABEL_16;
        }
        uint64_t v39 = v28;
        uint64_t v29 = *(void *)(v23 + v27 + 8);
        uint64_t v37 = *(void *)(v23 + v27);
        uint64_t v30 = v40;
        uint64_t v31 = v43;
        (*v38)(v40, v23, v43);
        char v32 = static UUID.== infix(_:_:)();
        char v33 = *v46;
        (*v46)(v26, v31);
        if ((v32 & 1) == 0)
        {
          v33((uint64_t)v30, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1009888A0((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          uint64_t v2 = v45;
          a1 = v42;
          goto LABEL_16;
        }
        BOOL v34 = v41 == v37 && v39 == v29;
        uint64_t v2 = v45;
        if (!v34)
        {
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v33((uint64_t)v30, v31);
          a1 = v42;
          if (v35) {
            goto LABEL_28;
          }
          sub_1009888A0((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
LABEL_16:
          sub_1009888A0((uint64_t)v19, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          unint64_t v21 = (v21 + 1) & v47;
          if (((*(void *)(v49 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
            return v21;
          }
          continue;
        }
        swift_bridgeObjectRelease_n();
        v33((uint64_t)v30, v31);
LABEL_28:
        sub_1009888A0((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_1009888A0((uint64_t)v19, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        return v21;
    }
  }
}

unint64_t sub_100959088(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __n128 v7 = __chkstk_darwin(v4, v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v2;
  uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = a2 & ~v10;
  uint64_t v22 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v10;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v9, *(void *)(v24 + 48) + v16 * v11, v4, v7);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v9, v4);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v22 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_100959220(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1009592C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    uint64_t v9 = *a1;
    do
    {
      uint64_t v10 = *(void *)(v6 + 48);
      unint64_t v11 = (void *)(v10 + 40 * v5);
      if (*v11 == v9 && *(void *)(v10 + 40 * v5 + 8) == a1[1] && v11[2] == a1[2])
      {
        uint64_t v12 = (void *)v11[3];
        sub_10050BF48(0, (unint64_t *)&qword_101672E50);
        id v13 = v12;
        if (static NSObject.== infix(_:_:)())
        {
          char v14 = static Selector.== infix(_:_:)();

          if (v14) {
            return v5;
          }
        }
        else
        {
        }
      }
      unint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_100959400(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100988954(&qword_101688E98, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10095955C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE400000000000000;
      uint64_t v8 = 1954047348;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x6570616873;
          break;
        case 2:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x616964656DLL;
          break;
        case 3:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x746E656D75636F64;
          break;
        case 4:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x746E656D6D6F63;
          break;
        case 5:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x6E776F6E6B6E75;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1954047348;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE500000000000000;
          if (v8 == 0x6570616873) {
            goto LABEL_18;
          }
          goto LABEL_19;
        case 2:
          unint64_t v9 = 0xE500000000000000;
          if (v8 != 0x616964656DLL) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x746E656D75636F64) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 4:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x746E656D6D6F63;
          goto LABEL_17;
        case 5:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x6E776F6E6B6E75) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
LABEL_17:
          if (v8 != v10) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1009597C4(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100959880(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6573616572636564;
    }
    else {
      uint64_t v6 = 0x6573616572636E69;
    }
    while (1)
    {
      uint64_t v7 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6573616572636564 : 0x6573616572636E69;
      if (v7 == v6) {
        break;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v8 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_10095997C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE600000000000000;
      unint64_t v8 = 0x656C63726963;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701734764;
          break;
        case 2:
          unint64_t v7 = 0x8000000101235870;
          unint64_t v8 = 0xD000000000000010;
          break;
        case 3:
          unint64_t v8 = 0x657261757173;
          break;
        case 4:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1918989427;
          break;
        case 5:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x656C676E61697274;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE600000000000000;
      uint64_t v10 = 0x656C63726963;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE400000000000000;
          if (v8 == 1701734764) {
            goto LABEL_18;
          }
          goto LABEL_19;
        case 2:
          unint64_t v9 = 0x8000000101235870;
          if (v8 != 0xD000000000000010) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          if (v8 != 0x657261757173) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 4:
          unint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1918989427;
          goto LABEL_17;
        case 5:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x656C676E61697274) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
LABEL_17:
          if (v8 != v10) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100959BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      unint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_100959C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100959DC4(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6863746566;
    }
    else {
      uint64_t v6 = 1702257011;
    }
    if (a1) {
      unint64_t v7 = 0xE500000000000000;
    }
    else {
      unint64_t v7 = 0xE400000000000000;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6863746566 : 1702257011;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE400000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_100959EF4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x69726F7661666E75;
          unint64_t v8 = 0xEA00000000006574;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0xE600000000000000;
          uint64_t v7 = 0x656C67676F74;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE800000000000000;
            if (v7 != 0x657469726F766166) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v8 = 0xE800000000000000;
        uint64_t v7 = 0x657469726F766166;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x69726F7661666E75;
      }
      else {
        uint64_t v10 = 0x656C67676F74;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xEA00000000006574;
      }
      else {
        unint64_t v11 = 0xE600000000000000;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_10095A098(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE400000000000000;
      uint64_t v8 = 1684828002;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x63696C617469;
          break;
        case 2:
          uint64_t v8 = 0x6E696C7265646E75;
          unint64_t v7 = 0xE900000000000065;
          break;
        case 3:
          uint64_t v8 = 0x6874656B69727473;
          unint64_t v7 = 0xED00006867756F72;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1684828002;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE600000000000000;
          if (v8 == 0x63696C617469) {
            goto LABEL_14;
          }
          goto LABEL_15;
        case 2:
          uint64_t v10 = 0x6E696C7265646E75;
          unint64_t v9 = 0xE900000000000065;
          goto LABEL_11;
        case 3:
          unint64_t v9 = 0xED00006867756F72;
          if (v8 == 0x6874656B69727473) {
            goto LABEL_14;
          }
          goto LABEL_15;
        default:
LABEL_11:
          if (v8 != v10) {
            goto LABEL_15;
          }
LABEL_14:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_15:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_10095A2A8(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10095A340(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10095A3E0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 1701079400;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x656C67676F74;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE400000000000000;
            if (v8 != 2003789939) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v7 = 0xE400000000000000;
        uint64_t v8 = 2003789939;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 1701079400;
      }
      else {
        uint64_t v10 = 0x656C67676F74;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xE400000000000000;
      }
      else {
        unint64_t v11 = 0xE600000000000000;
      }
      if (v8 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_10095A55C(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  unint64_t i = a5 & ~(-1 << *(unsigned char *)(v5 + 32));
  if ((*(void *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
    uint64_t v8 = *(void *)(v5 + 48) + 32 * i;
    id v9 = *(id *)v8;
    uint64_t v10 = *(void **)(v8 + 8);
    uint64_t v11 = *(void *)(v8 + 16);
    unsigned __int8 v12 = *(unsigned char *)(v8 + 24);
    sub_10053BB6C(*(id *)v8, v10, v11, v12);
    unint64_t v24 = a1;
    LOBYTE(a1) = sub_100B834D0((unint64_t)v9, (unint64_t)v10, v11, v12, a1, a2, a3, a4);
    sub_10053BBA0(v9, v10, v11, v12);
    if ((a1 & 1) == 0)
    {
      for (unint64_t i = (i + 1) & ~v23;
            ((*(void *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0;
            unint64_t i = (i + 1) & ~v23)
      {
        uint64_t v16 = *(void *)(v5 + 48) + 32 * i;
        id v17 = *(id *)v16;
        char v18 = *(void **)(v16 + 8);
        uint64_t v19 = *(void *)(v16 + 16);
        unsigned __int8 v20 = *(unsigned char *)(v16 + 24);
        sub_10053BB6C(*(id *)v16, v18, v19, v20);
        char v21 = sub_100B834D0((unint64_t)v17, (unint64_t)v18, v19, v20, v24, a2, a3, a4);
        sub_10053BBA0(v17, v18, v19, v20);
        if (v21) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10095A70C(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6F4E796B63697473;
    }
    else {
      uint64_t v6 = 0x786F6274786574;
    }
    if (a1) {
      unint64_t v7 = 0xEA00000000006574;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6F4E796B63697473 : 0x786F6274786574;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xEA00000000006574 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_10095A850(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, uint64_t), uint64_t (*a6)(void))
{
  uint64_t v23 = a6;
  uint64_t v11 = a3(0) - 8;
  __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v17 = a2 & ~v16;
  if ((*(void *)(v6 + 64 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
  {
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v13 + 72);
    do
    {
      sub_100988768(*(void *)(v6 + 48) + v19 * v17, (uint64_t)v15, a4);
      char v20 = a5(v15, a1);
      sub_1009888A0((uint64_t)v15, v23);
      if (v20) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v18;
    }
    while (((*(void *)(v6 + 64 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  return v17;
}

unint64_t sub_10095A9AC(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = qword_101199FA0[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (qword_101199FA0[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (qword_101199FA0[*(char *)(v8 + result)] == v7) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10095AA60(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE500000000000000;
      uint64_t v8 = 0x6B63616C62;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 1702194274;
          break;
        case 2:
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 2036429415;
          break;
        case 3:
          uint64_t v8 = 0x6E65657267;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x65676E61726FLL;
          break;
        case 5:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x656C70727570;
          break;
        case 6:
          unint64_t v7 = 0xE300000000000000;
          uint64_t v8 = 6579570;
          break;
        case 7:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x776F6C6C6579;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE500000000000000;
      uint64_t v10 = 0x6B63616C62;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE400000000000000;
          if (v8 == 1702194274) {
            goto LABEL_24;
          }
          goto LABEL_25;
        case 2:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 2036429415) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 3:
          if (v8 != 0x6E65657267) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 4:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x65676E61726FLL) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 5:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x656C70727570) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 6:
          unint64_t v9 = 0xE300000000000000;
          if (v8 != 6579570) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 7:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x776F6C6C6579;
          goto LABEL_23;
        default:
LABEL_23:
          if (v8 != v10) {
            goto LABEL_25;
          }
LABEL_24:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_25:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_10095AD08(char a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a1;
  *(void *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_10095AE74(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100955FC8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097BB14();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_100587488(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095AF80(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1009561F4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097BDBC();
    uint64_t v7 = v10;
  }
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_100587780(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10095B058@<X0>(char a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100956360(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097C13C();
      uint64_t v11 = v12;
    }
    sub_10051B3EC(*(void *)(v11 + 56) + 32 * v6, (uint64_t)a2, &qword_101672BF0);
    sub_100587D84(v6, v11);
    *uint64_t v3 = v11;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
  }
  return result;
}

uint64_t sub_10095B130(uint64_t a1)
{
  return sub_10095CE54(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101689070);
}

uint64_t sub_10095B150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955FC8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100984D48((uint64_t *)&unk_101684F90, &qword_101688E28);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101684F90);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10051B3EC(v12 + *(void *)(v20 + 72) * v6, a2, (uint64_t *)&unk_101684F90);
    sub_100588230(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_1005057FC((uint64_t *)&unk_101684F90);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095B330(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_1016891D8);
}

uint64_t sub_10095B350(uint64_t a1, void (*a2)(unint64_t, uint64_t), uint64_t *a3)
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100955FC8(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100985420(a3);
    uint64_t v11 = v16;
  }
  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v8, v13);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10095B460(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101689020);
}

uint64_t sub_10095B480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955FC8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097CFAC();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v20 = v12;
    unint64_t v13 = *(void *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, *(void *)(v9 + 56) + v13, v11);
    sub_100588714(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095B648(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101689050);
}

uint64_t sub_10095B668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955FC8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100982BD4(type metadata accessor for CRLRealTimeEnter, &qword_1016891A0, type metadata accessor for CRLRealTimeEnter, type metadata accessor for CRLRealTimeEnter);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for CRLRealTimeEnter(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for CRLRealTimeEnter);
    sub_100588A18(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRLRealTimeEnter(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095B878(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10095642C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100986068(&qword_101689000);
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100588C34(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10095B948(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100955FC8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097D598();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_100588C38(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_10095BA64@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1009569E8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097DA14();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_100575CE8((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_100588F54(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10095BB90(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101688EF0);
}

uint64_t sub_10095BBB0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100956B4C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097E3F8();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10058920C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10095BC7C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097E60C(type metadata accessor for CRLBoardIdentifier, &qword_1016891F0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for CRLBoardIdentifier(0);
  sub_1009888A0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, type metadata accessor for CRLBoardIdentifier);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100589450(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095BDF0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100955FC8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097E874();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1005897A4(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095BEE8(uint64_t a1)
{
  return sub_10095C2F8(a1, (void (*)(unint64_t, uint64_t))sub_100589A9C, (uint64_t)type metadata accessor for CRLBoardIdentifier, (uint64_t)&unk_101688E88, (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t (*)(uint64_t)))sub_10097ECC4);
}

uint64_t sub_10095BF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097F550((uint64_t (*)(void))type metadata accessor for CRLBoardEntity, &qword_101688E40, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1009888A0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for CRLBoardIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for CRLBoardEntity();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
    sub_100589ADC(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRLBoardEntity();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095C178(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100956A4C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097E60C(type metadata accessor for CRLBoardPreviewImageCache.Item, &qword_101688E38, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  sub_1009888A0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, type metadata accessor for CRLBoardPreviewImageCache.Item);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100589AF4(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095C2B0(uint64_t a1)
{
  return sub_10095C2F8(a1, (void (*)(unint64_t, uint64_t))sub_100589A9C, (uint64_t)type metadata accessor for CRLBoardIdentifier, (uint64_t)&unk_101688F10, (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t (*)(uint64_t)))sub_10097FCB4);
}

uint64_t sub_10095C2F8(uint64_t a1, void (*a2)(unint64_t, uint64_t), uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t (*)(uint64_t a1), uint64_t (*)(uint64_t a1)))
{
  uint64_t v10 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v10;
  uint64_t v20 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a5(a3, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    uint64_t v15 = v20;
  }
  uint64_t v16 = *(void *)(v15 + 48);
  uint64_t v17 = type metadata accessor for CRLBoardIdentifier(0);
  sub_1009888A0(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v12, type metadata accessor for CRLBoardIdentifier);
  uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v12);
  a2(v12, v15);
  *uint64_t v10 = v15;
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_10095C480(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_1016891D0);
}

uint64_t sub_10095C4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955F50(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097FF18();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10058A720(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095C580(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955F50(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100982048(&qword_101689198);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10058A720(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095C658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955FC8(a1);
  LOBYTE(a1) = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v22 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10098173C();
      uint64_t v10 = v22;
    }
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * v6, v12);
    unint64_t v13 = *(void *)(v10 + 56) + (v6 << 6);
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = *(void *)(v13 + 24);
    uint64_t v16 = *(void *)(v13 + 32);
    long long v20 = *(_OWORD *)(v13 + 40);
    long long v21 = *(_OWORD *)v13;
    uint64_t v17 = *(void *)(v13 + 56);
    sub_10058AF74(v6, v10);
    *uint64_t v3 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    long long v19 = v20;
    long long v18 = v21;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
  }
  *(_OWORD *)a2 = v18;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 40) = v19;
  *(void *)(a2 + 56) = v17;
  return result;
}

uint64_t sub_10095C7A4(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101689168);
}

uint64_t sub_10095C7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100956E24(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1009823C4(type metadata accessor for CRLThrottleInfo, &qword_101689110, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for CRLThrottleInfo(0);
    uint64_t v18 = *(void *)(v11 - 8);
    sub_100988838(v10 + *(void *)(v18 + 72) * v6, a2, type metadata accessor for CRLThrottleInfo);
    sub_10058B274(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for CRLThrottleInfo(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

uint64_t sub_10095C9A0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100956E24(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100981E90();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10058ADC0(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10095CA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100956E24(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1009823C4((uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, &qword_101689100, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for CRLZoneSyncResultScenarios();
    uint64_t v18 = *(void *)(v11 - 8);
    sub_100988838(v10 + *(void *)(v18 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
    sub_10058B2A4(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for CRLZoneSyncResultScenarios();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

uint64_t sub_10095CC44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100955FC8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100982BD4(_s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_101689030, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
    sub_10058B4B8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095CE54(uint64_t a1, void (*a2)(unint64_t, uint64_t), uint64_t *a3)
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100955FC8(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10098315C((uint64_t (*)(void))&type metadata accessor for UUID, a3);
    uint64_t v11 = v16;
  }
  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v8, v13);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10095CF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1009835A4();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1009888A0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for CRLBoardIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_10058B4D0(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095D180(uint64_t a1)
{
  return sub_10095B350(a1, (void (*)(unint64_t, uint64_t))sub_10058822C, &qword_101689048);
}

uint64_t sub_10095D1A0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10095681C(a1, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10097ECC4(type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689058, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  sub_1009888A0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10058B4E8(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095D314(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10095681C(a1, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 2;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100984A90(type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689060, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  sub_1009888A0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + v4);
  sub_10058B528(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10095D488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100955F50(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100984448((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101688EE0);
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_10058BA50(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095D64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1009576C8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100984760();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRLAssetReferrerIdentifier(0);
    sub_1009888A0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for CRLAssetReferrerIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for CRLBoardIdentifier(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for CRLBoardIdentifier);
    sub_10058BC88(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRLBoardIdentifier(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_10095D814@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1009560A0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100985248(&qword_101688FB8);
      uint64_t v9 = v11;
    }

    sub_100575CE8((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_10058C2F8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10095D914@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v5 = a1 & 1;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1009571B8(v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1009856FC(type metadata accessor for CRLSyncScheduledActivity, &qword_101688F58, type metadata accessor for CRLSyncScheduledActivity, type metadata accessor for CRLSyncScheduledActivity);
      uint64_t v10 = v20;
    }
    uint64_t v11 = *(void *)(v10 + 56);
    uint64_t v12 = type metadata accessor for CRLSyncScheduledActivity(0);
    uint64_t v19 = *(void *)(v12 - 8);
    sub_100988838(v11 + *(void *)(v19 + 72) * v6, a2, type metadata accessor for CRLSyncScheduledActivity);
    sub_10058C858(v6, v10);
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v14 = a2;
    uint64_t v15 = 0;
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v17 = type metadata accessor for CRLSyncScheduledActivity(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v16 = v17;
    uint64_t v14 = a2;
    uint64_t v15 = 1;
  }

  return v13(v14, v15, 1, v16);
}

uint64_t sub_10095DAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata, &qword_101688E50, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1009888A0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for CRLBoardIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for CRLBoardViewModelMetadata(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for CRLBoardViewModelMetadata);
    sub_10058CAA8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRLBoardViewModelMetadata(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095DD2C(uint64_t a1)
{
  return sub_10095C2F8(a1, (void (*)(unint64_t, uint64_t))sub_100589A9C, (uint64_t)type metadata accessor for CRLBoardIdentifier, (uint64_t)&qword_101688E70, (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t (*)(uint64_t)))sub_10097FCB4);
}

uint64_t sub_10095DD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_101688E68, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1009888A0(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for CRLBoardIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100988838(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    sub_10058CE08(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10095DFBC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v6);
  char v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688ED8);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v39 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v41 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v40 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v43 = v9;
    uint64_t v44 = v8;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v40) {
          goto LABEL_34;
        }
        unint64_t v23 = v41[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v23 = v41[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v39;
              if (v46)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
                if (v37 >= 64) {
                  bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v41 = -1 << v37;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v41[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v23 = v41[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
      uint64_t v28 = v44;
      uint64_t v29 = v45;
      if (v46)
      {
        (*v47)(v44, v27, v45);
        long long v48 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21);
      }
      else
      {
        (*v42)(v44, v27, v45);
        long long v48 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21);
        swift_unknownObjectRetain();
      }
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v16 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v47)(*(void *)(v11 + 48) + v26 * v19, v28, v29);
      *(_OWORD *)(*(void *)(v11 + 56) + 16 * v19) = v48;
      ++*(void *)(v11 + 16);
      uint64_t v5 = v25;
      uint64_t v9 = v43;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10095E3E8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v6);
  char v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688ED0);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_40;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v40 = v2;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v27 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v28 = v27 | (v19 << 6);
      goto LABEL_31;
    }
    int64_t v29 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v29 >= v41) {
      break;
    }
    uint64_t v30 = v42;
    unint64_t v31 = v42[v29];
    ++v19;
    if (!v31)
    {
      int64_t v19 = v29 + 1;
      if (v29 + 1 >= v41) {
        goto LABEL_33;
      }
      unint64_t v31 = v42[v19];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v41)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v31 = v42[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v19 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_42;
            }
            if (v19 >= v41) {
              goto LABEL_33;
            }
            unint64_t v31 = v42[v19];
            ++v32;
            if (v31) {
              goto LABEL_30;
            }
          }
        }
        int64_t v19 = v32;
      }
    }
LABEL_30:
    unint64_t v15 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v19 << 6);
LABEL_31:
    uint64_t v37 = *(void *)(*(void *)(v9 + 48) + 8 * v28);
    long long v45 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v28);
    if ((v44 & 1) == 0)
    {
      swift_retain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    uint64_t v20 = *(void *)(v37 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v20 + 32))(ObjectType, v20);
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = v43;
    dispatch thunk of Hashable.hash(into:)();
    (*v16)(v8, v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v17 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v17 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v35 = v25 == v34;
        if (v25 == v34) {
          unint64_t v25 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v25);
      }
      while (v36 == -1);
      unint64_t v26 = __clz(__rbit64(~v36)) + (v25 << 6);
    }
    *(void *)(v17 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(void *)(*(void *)(v11 + 48) + 8 * v26) = v37;
    *(_OWORD *)(*(void *)(v11 + 56) + 16 * v26) = v45;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v30 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v9 + 32);
  if (v38 >= 64) {
    bzero(v30, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v30 = -1 << v38;
  }
  *(void *)(v9 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10095E800(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688FD8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_8:
  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v13 << 6);
    goto LABEL_22;
  }
  int64_t v17 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_42;
  }
  if (v17 >= v11)
  {
    swift_release();
    uint64_t v3 = v33;
    int64_t v18 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_37:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v18, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v18 = -1 << v31;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    int64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (v19) {
      goto LABEL_21;
    }
    int64_t v13 = v17 + 1;
    if (v17 + 1 >= v11) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v34 + 8 * v13);
    if (v19)
    {
LABEL_21:
      unint64_t v10 = (v19 - 1) & v19;
      unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        sub_100575CE8(v22, v35);
      }
      else {
        sub_100522D7C((uint64_t)v22, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v23 = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = v23 & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
        if (v30 != -1)
        {
          unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
          *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          *(unsigned char *)(*(void *)(v7 + 48) + v14) = v21;
          sub_100575CE8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
          ++*(void *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x10095EBF8);
    }
    int64_t v20 = v17 + 2;
    if (v20 < v11)
    {
      unint64_t v19 = *(void *)(v34 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          int64_t v13 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_43;
          }
          if (v13 >= v11) {
            goto LABEL_34;
          }
          unint64_t v19 = *(void *)(v34 + 8 * v13);
          ++v20;
          if (v19) {
            goto LABEL_21;
          }
        }
      }
      int64_t v13 = v20;
      goto LABEL_21;
    }
LABEL_34:
    swift_release();
    uint64_t v3 = v33;
    if (a2) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10095EC20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688FE8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v32 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v16 >= v31) {
      break;
    }
    unint64_t v17 = v32[v16];
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        break;
      }
      unint64_t v17 = v32[v12];
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v18 >= v31) {
          break;
        }
        unint64_t v17 = v32[v18];
        if (!v17)
        {
          while (1)
          {
            int64_t v12 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v31) {
              goto LABEL_34;
            }
            unint64_t v17 = v32[v12];
            ++v18;
            if (v17) {
              goto LABEL_21;
            }
          }
        }
        int64_t v12 = v18;
      }
    }
LABEL_21:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    char v19 = *(unsigned char *)(*(void *)(v5 + 48) + v15);
    uint64_t v20 = *(void *)(v5 + 56) + 32 * v15;
    if (a2) {
      sub_10051B3EC(v20, (uint64_t)v33, &qword_101672BF0);
    }
    else {
      sub_100522E9C(v20, (uint64_t)v33, &qword_101672BF0);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v25 = 0;
    unint64_t v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x10095F024);
      }
      BOOL v27 = v24 == v26;
      if (v24 == v26) {
        unint64_t v24 = 0;
      }
      v25 |= v27;
      uint64_t v28 = *(void *)(v11 + 8 * v24);
    }
    while (v28 == -1);
    unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v7 + 48) + v13) = v19;
    sub_10051B3EC((uint64_t)v33, *(void *)(v7 + 56) + 32 * v13, &qword_101672BF0);
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
    if (v29 >= 64) {
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      void *v32 = -1 << v29;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10095F04C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688E90);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        int64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      Swift::UInt v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      uint64_t v20 = *(void *)(v5 + 56) + 32 * v15;
      if (a2) {
        sub_10051B3EC(v20, (uint64_t)v31, &qword_101672BF0);
      }
      else {
        sub_100522E9C(v20, (uint64_t)v31, &qword_101672BF0);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = sub_10051B3EC((uint64_t)v31, *(void *)(v7 + 56) + 32 * v13, &qword_101672BF0);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10095F33C(uint64_t a1, int a2)
{
  return sub_100969DDC(a1, a2, &qword_101689070);
}

uint64_t sub_10095F348(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688FD0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v32 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= v31) {
      break;
    }
    unint64_t v17 = v32[v16];
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        break;
      }
      unint64_t v17 = v32[v12];
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v18 >= v31) {
          break;
        }
        unint64_t v17 = v32[v18];
        if (!v17)
        {
          while (1)
          {
            int64_t v12 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              goto LABEL_40;
            }
            if (v12 >= v31) {
              goto LABEL_33;
            }
            unint64_t v17 = v32[v12];
            ++v18;
            if (v17) {
              goto LABEL_21;
            }
          }
        }
        int64_t v12 = v18;
      }
    }
LABEL_21:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    char v19 = *(unsigned char *)(*(void *)(v5 + 48) + v15);
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    if ((a2 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v25 = 0;
    unint64_t v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x10095F72CLL);
      }
      BOOL v27 = v24 == v26;
      if (v24 == v26) {
        unint64_t v24 = 0;
      }
      v25 |= v27;
      uint64_t v28 = *(void *)(v11 + 8 * v24);
    }
    while (v28 == -1);
    unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v7 + 48) + v13) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v13) = v20;
    ++*(void *)(v7 + 16);
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
    if (v29 >= 64) {
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      void *v32 = -1 << v29;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10095F754(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688F08);
}

uint64_t sub_10095F760(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  sub_1005057FC(a3);
  int v49 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = *(void *)(v14 + 64);
  long long v45 = (void *)(v14 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v43 = v5;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  int v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v8;
  uint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v21 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v44) {
      break;
    }
    uint64_t v28 = v45;
    unint64_t v29 = v45[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v29 = v45[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v45[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v44) {
              goto LABEL_34;
            }
            unint64_t v29 = v45[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v48 + 72);
    unint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v49)
    {
      (*v20)(v11, v32, v7);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
    }
    else
    {
      (*v46)(v11, v32, v7);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
      swift_retain();
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v20)(*(void *)(v15 + 48) + v31 * v24, v11, v7);
    *(void *)(*(void *)(v15 + 56) + 8 * v24) = v33;
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v5 = v43;
  uint64_t v28 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v14 + 32);
  if (v41 >= 64) {
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v41;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v15;
  return result;
}

uint64_t sub_10095FB88(uint64_t a1, char a2)
{
  return sub_100967CD0(a1, a2, (uint64_t *)&unk_10169A250);
}

uint64_t sub_10095FB94(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688B58);
}

uint64_t sub_10095FBA0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_101688FF0);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    unint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_10095FFC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688F98);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100575CE8((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10050BF84(v25, (uint64_t)&v38);
      sub_100522D7C(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100575CE8(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009602DC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_101689210);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  int v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v6;
  long long v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    long long v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    sub_100988954((unint64_t *)&unk_101687A20, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  long long v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100960700(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016890E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009609B8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  int64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688F40);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v40 = v2;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    char v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v41) {
              goto LABEL_34;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = *(void *)(v43 + 72);
    uint64_t v31 = *(void *)(v9 + 56) + v30 * v22;
    if (v44)
    {
      sub_10051B3EC(v31, (uint64_t)v8, (uint64_t *)&unk_101674520);
    }
    else
    {
      sub_100522E9C(v31, (uint64_t)v8, (uint64_t *)&unk_101674520);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    void *v20 = v28;
    v20[1] = v29;
    uint64_t result = sub_10051B3EC((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19, (uint64_t *)&unk_101674520);
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v39;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100960D80(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v6);
  uint64_t v57 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  double v53 = (char *)&v46 - v10;
  uint64_t v11 = *v2;
  sub_1005057FC(&qword_101688EC0);
  int v54 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v48 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v46 = v3;
  int64_t v47 = (unint64_t)(v14 + 63) >> 6;
  int v49 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v50 = v5;
  uint64_t v51 = v11;
  while (1)
  {
    if (v17)
    {
      unint64_t v25 = __clz(__rbit64(v17));
      uint64_t v26 = (v17 - 1) & v17;
      unint64_t v27 = v25 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v47) {
      break;
    }
    uint64_t v29 = v48;
    unint64_t v30 = v48[v28];
    ++v21;
    if (!v30)
    {
      int64_t v21 = v28 + 1;
      if (v28 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v30 = v48[v21];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v46;
          if ((v54 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v48[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v21 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v47) {
              goto LABEL_34;
            }
            unint64_t v30 = v48[v21];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v31;
      }
    }
LABEL_21:
    uint64_t v26 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v21 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v5 + 72);
    unint64_t v33 = v32 * v27;
    unint64_t v34 = *(void *)(v11 + 48) + v32 * v27;
    unint64_t v55 = v26;
    int64_t v56 = v21;
    if (v54)
    {
      char v35 = *v18;
      uint64_t v37 = v52;
      unint64_t v36 = v53;
      (*v18)(v53, v34, v52);
    }
    else
    {
      char v35 = *v49;
      uint64_t v37 = v52;
      unint64_t v36 = v53;
      (*v49)(v53, v34, v52);
    }
    v35(v57, *(void *)(v11 + 56) + v33, v37);
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v38 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v39 = result & ~v38;
    unint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v39) & ~*(void *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v43 = v40 == v42;
        if (v40 == v42) {
          unint64_t v40 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v19 + 8 * v40);
      }
      while (v44 == -1);
      unint64_t v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    unint64_t v23 = v32 * v22;
    char v24 = *v18;
    (*v18)((char *)(*(void *)(v13 + 48) + v32 * v22), (unint64_t)v36, v37);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(void *)(v13 + 56) + v23, v57, v37);
    ++*(void *)(v13 + 16);
    uint64_t v5 = v50;
    uint64_t v11 = v51;
    unint64_t v17 = v55;
    int64_t v21 = v56;
  }
  swift_release();
  uint64_t v3 = v46;
  uint64_t v29 = v48;
  if ((v54 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v45 = 1 << *(unsigned char *)(v11 + 32);
  if (v45 >= 64) {
    bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v45;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100961224(uint64_t a1, char a2)
{
  return sub_10096A584(a1, a2, &qword_101688FC0);
}

uint64_t sub_100961230(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = sub_1005057FC(&qword_101674250);
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44, v6);
  BOOL v43 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1005057FC(&qword_101689208);
  int v42 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v40 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    char v41 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              if ((v42 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v38;
                goto LABEL_41;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
              if (v37 >= 64) {
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v40 = -1 << v37;
              }
              uint64_t v3 = v38;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(v8 + 56);
      uint64_t v25 = v8;
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v8 + 48) + v20);
      uint64_t v27 = v5;
      uint64_t v28 = *(void *)(v5 + 72);
      uint64_t v29 = v24 + v28 * v20;
      if (v42) {
        (*v16)(v43, v29, v44);
      }
      else {
        (*v41)(v43, v29, v44);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(unsigned char *)(*(void *)(v10 + 48) + v18) = v26;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v28 * v18, v43, v44);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v27;
      uint64_t v8 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1009615EC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_101688FF8);
  int v53 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  int v49 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  int64_t v47 = v3;
  int64_t v48 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v52 = v6;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v48) {
      break;
    }
    uint64_t v27 = v49;
    unint64_t v28 = v49[v26];
    ++v21;
    if (!v28)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v48) {
        goto LABEL_34;
      }
      unint64_t v28 = v49[v21];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v47;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v21 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v48) {
              goto LABEL_34;
            }
            unint64_t v28 = v49[v21];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v29;
      }
    }
LABEL_21:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v52 + 72);
    unint64_t v31 = *(void *)(v12 + 48) + v30 * v25;
    if (v53)
    {
      (*v18)(v9, v31, v5);
      uint64_t v32 = *(void *)(v12 + 56) + 24 * v25;
      long long v54 = *(_OWORD *)v32;
      id v33 = *(id *)(v32 + 16);
    }
    else
    {
      (*v50)(v9, v31, v5);
      uint64_t v34 = *(void *)(v12 + 56) + 24 * v25;
      long long v54 = *(_OWORD *)v34;
      BOOL v35 = *(void **)(v34 + 16);
      id v36 = (id)v54;
      id v37 = *((id *)&v54 + 1);
      id v33 = v35;
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v38 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v39 = result & ~v38;
    unint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v39) & ~*(void *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v43 = v40 == v42;
        if (v40 == v42) {
          unint64_t v40 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v19 + 8 * v40);
      }
      while (v44 == -1);
      unint64_t v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v30 * v22, v9, v5);
    uint64_t v23 = *(void *)(v13 + 56) + 24 * v22;
    *(_OWORD *)uint64_t v23 = v54;
    *(void *)(v23 + 16) = v33;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  uint64_t v27 = v49;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v45 = 1 << *(unsigned char *)(v12 + 32);
  if (v45 >= 64) {
    bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v45;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100961A54(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688EC8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100961D64(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688EB8);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v39 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    char v41 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v40 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    int64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v43 = v9;
    uint64_t v44 = v8;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v40) {
          goto LABEL_34;
        }
        unint64_t v23 = v41[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v23 = v41[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v39;
              if (v46)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
                if (v37 >= 64) {
                  bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v41 = -1 << v37;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v41[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v23 = v41[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
      uint64_t v28 = v44;
      uint64_t v29 = v45;
      if (v46)
      {
        (*v47)(v44, v27, v45);
        sub_100575CE8((_OWORD *)(*(void *)(v9 + 56) + 32 * v21), v48);
      }
      else
      {
        (*v42)(v44, v27, v45);
        sub_100522D7C(*(void *)(v9 + 56) + 32 * v21, (uint64_t)v48);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v16 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      (*v47)((char *)(*(void *)(v11 + 48) + v26 * v19), (unint64_t)v28, v29);
      uint64_t result = (uint64_t)sub_100575CE8(v48, (_OWORD *)(*(void *)(v11 + 56) + 32 * v19));
      ++*(void *)(v11 + 16);
      uint64_t v5 = v25;
      uint64_t v9 = v43;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100962160(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v6);
  long long v54 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  sub_1005057FC(&qword_101688E30);
  int v52 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  int v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v47 = v5 + 16;
  int64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v5;
  uint64_t v51 = v9;
  unint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v9 + 32);
  int v53 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v21 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45) {
      break;
    }
    uint64_t v28 = v46;
    unint64_t v29 = v46[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v29 = v46[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v45) {
              goto LABEL_34;
            }
            unint64_t v29 = v46[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v51 + 72);
    unint64_t v32 = *(void *)(v13 + 48) + v31 * v26;
    if (v52)
    {
      (*v20)(v12, v32, v8);
      uint64_t v33 = *(void *)(v13 + 56);
      uint64_t v34 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 32))(v54, v33 + v34 * v26, v55);
    }
    else
    {
      (*v48)(v12, v32, v8);
      uint64_t v35 = *(void *)(v13 + 56);
      uint64_t v34 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v54, v35 + v34 * v26, v55);
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*v20)((char *)(*(void *)(v15 + 48) + v31 * v24), (unint64_t)v12, v8);
    uint64_t result = (*v53)(*(void *)(v15 + 56) + v34 * v24, v54, v55);
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v3 = v44;
  uint64_t v28 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v43;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v15;
  return result;
}

uint64_t sub_10096265C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v80 = (uint64_t)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v9);
  Class v79 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v78 = (uint64_t)v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v71 - v16;
  uint64_t v18 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v87 = (uint64_t)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  uint64_t v82 = (char *)v71 - v24;
  uint64_t v25 = *v2;
  sub_1005057FC(&qword_101688E38);
  uint64_t v26 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v27 = v26;
  if (!*(void *)(v25 + 16)) {
    goto LABEL_54;
  }
  v71[0] = v2;
  uint64_t v28 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v29 = *(void *)(v25 + 64);
  id v73 = (void *)(v25 + 64);
  if (v28 < 64) {
    uint64_t v30 = ~(-1 << v28);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v31 = v30 & v29;
  int64_t v72 = (unint64_t)(v28 + 63) >> 6;
  id v75 = (void (**)(char *))(v8 + 32);
  NSString v74 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v32 = v26 + 64;
  swift_retain();
  int64_t v33 = 0;
  int v77 = a2;
  uint64_t v34 = v25;
  uint64_t v76 = v19;
  uint64_t v35 = (uint64_t)v82;
  v71[1] = v18;
  while (1)
  {
    if (v31)
    {
      uint64_t v85 = (v31 - 1) & v31;
      unint64_t v38 = __clz(__rbit64(v31)) | (v33 << 6);
      goto LABEL_22;
    }
    int64_t v39 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      goto LABEL_55;
    }
    if (v39 >= v72) {
      break;
    }
    unint64_t v40 = v73[v39];
    ++v33;
    if (!v40)
    {
      int64_t v33 = v39 + 1;
      if (v39 + 1 >= v72) {
        break;
      }
      unint64_t v40 = v73[v33];
      if (!v40)
      {
        int64_t v41 = v39 + 2;
        if (v41 >= v72) {
          break;
        }
        unint64_t v40 = v73[v41];
        if (!v40)
        {
          while (1)
          {
            int64_t v33 = v41 + 1;
            if (__OFADD__(v41, 1)) {
              goto LABEL_56;
            }
            if (v33 >= v72) {
              goto LABEL_48;
            }
            unint64_t v40 = v73[v33];
            ++v41;
            if (v40) {
              goto LABEL_21;
            }
          }
        }
        int64_t v33 = v41;
      }
    }
LABEL_21:
    uint64_t v85 = (v40 - 1) & v40;
    unint64_t v38 = __clz(__rbit64(v40)) + (v33 << 6);
LABEL_22:
    uint64_t v42 = *(void *)(v19 + 72);
    uint64_t v43 = *(void *)(v34 + 48) + v42 * v38;
    int64_t v86 = v33;
    uint64_t v84 = v42;
    if (a2)
    {
      sub_100988838(v43, v35, type metadata accessor for CRLBoardPreviewImageCache.Item);
      uint64_t v83 = *(void *)(*(void *)(v34 + 56) + 8 * v38);
    }
    else
    {
      sub_100988768(v43, v35, type metadata accessor for CRLBoardPreviewImageCache.Item);
      uint64_t v83 = *(void *)(*(void *)(v34 + 56) + 8 * v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    sub_100988768(v35, v87, type metadata accessor for CRLBoardPreviewImageCache.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v45 = v80;
        sub_100988838(v87, v80, type metadata accessor for CRLBoardIdentifier);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v52 = sub_1005057FC(&qword_10169FA80);
        uint64_t v53 = v87 + *(int *)(v52 + 48);
        uint64_t v45 = v80;
        sub_100988838(v87, v80, type metadata accessor for CRLBoardIdentifier);
        long long v54 = v17;
        uint64_t v55 = v79;
        uint64_t v56 = v34;
        uint64_t v57 = v81;
        ((void (*)(char *, uint64_t, uint64_t))*v75)(v79, v53, v81);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        LOBYTE(a2) = v77;
        swift_bridgeObjectRelease();
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v58 = v55;
        uint64_t v17 = v54;
        uint64_t v59 = v57;
        uint64_t v34 = v56;
        uint64_t v19 = v76;
        (*v74)(v58, v59);
      }
      sub_1009888A0(v45, type metadata accessor for CRLBoardIdentifier);
      uint64_t v35 = (uint64_t)v82;
    }
    else
    {
      sub_100988838(v87, (uint64_t)v17, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v46 = v78;
      sub_100988768((uint64_t)v17, v78, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v47 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v46, 5, v47))
      {
        case 1u:
          Swift::UInt v60 = 0;
          goto LABEL_37;
        case 2u:
          Swift::UInt v60 = 1;
          goto LABEL_37;
        case 3u:
          Swift::UInt v60 = 2;
          goto LABEL_37;
        case 4u:
          Swift::UInt v60 = 3;
          goto LABEL_37;
        case 5u:
          Swift::UInt v60 = 4;
LABEL_37:
          Hasher._combine(_:)(v60);
          break;
        default:
          int64_t v48 = v79;
          uint64_t v49 = v81;
          (*v75)(v79);
          Hasher._combine(_:)(5uLL);
          sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          String.hash(into:)();
          uint64_t v50 = v48;
          uint64_t v19 = v76;
          uint64_t v51 = v49;
          uint64_t v35 = (uint64_t)v82;
          (*v74)(v50, v51);
          LOBYTE(a2) = v77;
          swift_bridgeObjectRelease();
          break;
      }
      sub_1009888A0((uint64_t)v17, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    }
    Swift::Int v61 = Hasher._finalize()();
    uint64_t v62 = -1 << *(unsigned char *)(v27 + 32);
    unint64_t v63 = v61 & ~v62;
    unint64_t v64 = v63 >> 6;
    if (((-1 << v63) & ~*(void *)(v32 + 8 * (v63 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v63) & ~*(void *)(v32 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v65 = 0;
    unint64_t v66 = (unint64_t)(63 - v62) >> 6;
    do
    {
      if (++v64 == v66 && (v65 & 1) != 0)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        JUMPOUT(0x100962FF0);
      }
      BOOL v67 = v64 == v66;
      if (v64 == v66) {
        unint64_t v64 = 0;
      }
      v65 |= v67;
      uint64_t v68 = *(void *)(v32 + 8 * v64);
    }
    while (v68 == -1);
    unint64_t v36 = __clz(__rbit64(~v68)) + (v64 << 6);
LABEL_7:
    uint64_t v37 = v84;
    *(void *)(v32 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    sub_100988838(v35, *(void *)(v27 + 48) + v37 * v36, type metadata accessor for CRLBoardPreviewImageCache.Item);
    *(void *)(*(void *)(v27 + 56) + 8 * v36) = v83;
    ++*(void *)(v27 + 16);
    unint64_t v31 = v85;
    int64_t v33 = v86;
  }
LABEL_48:
  swift_release();
  uint64_t v3 = (uint64_t *)v71[0];
  if (a2)
  {
    uint64_t v69 = 1 << *(unsigned char *)(v34 + 32);
    if (v69 >= 64) {
      bzero(v73, ((unint64_t)(v69 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *id v73 = -1 << v69;
    }
    *(void *)(v34 + 16) = 0;
  }
LABEL_54:
  uint64_t result = swift_release();
  *uint64_t v3 = v27;
  return result;
}

uint64_t sub_100963008(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688F88);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    char v30 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((a2 & 1) == 0) {
      id v31 = v29;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(unsigned char *)(*(void *)(v7 + 56) + v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009632D0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688EF8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  uint64_t *v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      __int16 v27 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v19);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_WORD *)(*(void *)(v7 + 48) + 2 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100963584(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689200);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v23 = v22 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v39) {
      break;
    }
    BOOL v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v40 + 8 * v24);
    ++v13;
    if (!v26)
    {
      int64_t v13 = v24 + 1;
      if (v24 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v40 + 8 * v13);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v26 = *(void *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v13 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v26 = *(void *)(v40 + 8 * v13);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v27;
      }
    }
LABEL_30:
    unint64_t v10 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_31:
    uint64_t v32 = *(void *)(v5 + 48) + 40 * v23;
    Swift::UInt v33 = *(void *)(v32 + 16);
    long long v42 = *(_OWORD *)v32;
    long long v43 = *(_OWORD *)(v32 + 24);
    uint64_t v34 = *(void **)(*(void *)(v5 + 56) + 8 * v23);
    if ((v41 & 1) == 0)
    {
      id v35 = (id)v43;
      id v36 = v34;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v42);
    Hasher._combine(_:)(*((Swift::UInt *)&v42 + 1));
    Hasher._combine(_:)(v33);
    id v14 = (id)v43;
    NSObject.hash(into:)();

    Selector.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v20 = v42;
      long long v19 = v43;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v15) >> 6;
      long long v20 = v42;
      long long v19 = v43;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v30 = v17 == v29;
        if (v17 == v29) {
          unint64_t v17 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v17);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v21 = *(void *)(v7 + 48) + 40 * v18;
    *(_OWORD *)uint64_t v21 = v20;
    *(void *)(v21 + 16) = v33;
    *(_OWORD *)(v21 + 24) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v34;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  BOOL v25 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v25 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100963900(uint64_t a1, int a2)
{
  return sub_100963D30(a1, a2, &qword_1016891F0);
}

uint64_t sub_10096390C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_1016891F8);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  long long v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v6;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    unint64_t v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100963D30(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v42 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_1005057FC(a3);
  int v43 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  char v41 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v39 = v3;
  int64_t v40 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v40) {
      break;
    }
    int64_t v25 = v41;
    unint64_t v26 = v41[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v26 = v41[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v40) {
              goto LABEL_34;
            }
            unint64_t v26 = v41[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v42 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v43)
    {
      sub_100988838(v29, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      sub_100988768(v29, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v28 * v21, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v5 = v39;
  int64_t v25 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_10096418C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689080);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  unint64_t v32 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_8:
  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v13 << 6);
    goto LABEL_22;
  }
  int64_t v17 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_41;
  }
  if (v17 >= v11)
  {
    swift_release();
    uint64_t v3 = v32;
    uint64_t v18 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_36:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *uint64_t v18 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v33 + 8 * v17);
    ++v13;
    if (v19) {
      goto LABEL_21;
    }
    int64_t v13 = v17 + 1;
    if (v17 + 1 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v33 + 8 * v13);
    if (v19)
    {
LABEL_21:
      unint64_t v10 = (v19 - 1) & v19;
      unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v16);
      if ((a2 & 1) == 0) {
        sub_100510D4C(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = v22 & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
        if (v29 != -1)
        {
          unint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
          *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          *(unsigned char *)(*(void *)(v7 + 48) + v14) = v21;
          *(_OWORD *)(*(void *)(v7 + 56) + 16 * v14) = v34;
          ++*(void *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      JUMPOUT(0x100964554);
    }
    int64_t v20 = v17 + 2;
    if (v20 < v11)
    {
      unint64_t v19 = *(void *)(v33 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          int64_t v13 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_42;
          }
          if (v13 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = *(void *)(v33 + 8 * v13);
          ++v20;
          if (v19) {
            goto LABEL_21;
          }
        }
      }
      int64_t v13 = v20;
      goto LABEL_21;
    }
LABEL_33:
    swift_release();
    uint64_t v3 = v32;
    if (a2) {
      goto LABEL_36;
    }
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100964568(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101689078);
}

uint64_t sub_100964574(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v45 = a6;
  int64_t v48 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8, v11);
  int64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = *v6;
  sub_1005057FC(a4);
  int v47 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v44 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v42 = v6;
  int64_t v43 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v43) {
      break;
    }
    BOOL v28 = v44;
    unint64_t v29 = v44[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v29 = v44[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v44[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v43) {
              goto LABEL_34;
            }
            unint64_t v29 = v44[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v20 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v47)
    {
      sub_100988838(v32, (uint64_t)v13, v48);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
    }
    else
    {
      sub_100988768(v32, (uint64_t)v13, v45);
      uint64_t v33 = *(void *)(*(void *)(v14 + 56) + 8 * v26);
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = sub_100988838((uint64_t)v13, *(void *)(v16 + 48) + v31 * v24, v48);
    *(void *)(*(void *)(v16 + 56) + 8 * v24) = v33;
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v8 = v42;
  BOOL v28 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v14 + 32);
  if (v41 >= 64) {
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v28 = -1 << v41;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v16;
  return result;
}

uint64_t sub_1009649A8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v53 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1005057FC(&qword_101688E20);
  int v50 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v45 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int v47 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v46 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    for (i = v8; ; uint64_t v8 = i)
    {
      if (v14)
      {
        unint64_t v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v21 = v20 | (v17 << 6);
        uint64_t v22 = v53;
      }
      else
      {
        int64_t v23 = v17 + 1;
        uint64_t v22 = v53;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v46) {
          goto LABEL_34;
        }
        unint64_t v24 = v47[v23];
        ++v17;
        if (!v24)
        {
          int64_t v17 = v23 + 1;
          if (v23 + 1 >= v46) {
            goto LABEL_34;
          }
          unint64_t v24 = v47[v17];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v46)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v45;
              if (v50)
              {
                uint64_t v43 = 1 << *(unsigned char *)(v8 + 32);
                if (v43 >= 64) {
                  bzero(v47, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v47 = -1 << v43;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v47[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v17 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v46) {
                  goto LABEL_34;
                }
                unint64_t v24 = v47[v17];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v25;
          }
        }
LABEL_21:
        unint64_t v14 = (v24 - 1) & v24;
        unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
      }
      uint64_t v26 = *(void *)(v49 + 72);
      uint64_t v27 = *(void *)(v8 + 48) + v26 * v21;
      uint64_t v28 = 40 * v21;
      if (v50)
      {
        sub_100988838(v27, v22, type metadata accessor for CRLBoardIdentifier);
        uint64_t v29 = *(void *)(v8 + 56) + v28;
        uint64_t v30 = *(void *)(v29 + 8);
        uint64_t v52 = *(void *)v29;
        uint64_t v31 = *(void *)(v29 + 16);
        uint64_t v32 = *(void **)(v29 + 24);
        int v51 = *(unsigned __int8 *)(v29 + 32);
      }
      else
      {
        sub_100988768(v27, v22, type metadata accessor for CRLBoardIdentifier);
        uint64_t v33 = *(void *)(v8 + 56) + v28;
        uint64_t v34 = *(void *)v33;
        uint64_t v30 = *(void *)(v33 + 8);
        uint64_t v31 = *(void *)(v33 + 16);
        uint64_t v32 = *(void **)(v33 + 24);
        int v51 = *(unsigned __int8 *)(v33 + 32);
        id v35 = v32;
        uint64_t v52 = v34;
        swift_retain();
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v37 = result & ~v36;
      unint64_t v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v15 + 8 * (v37 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v37) & ~*(void *)(v15 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v39 = 0;
        unint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v41 = v38 == v40;
          if (v38 == v40) {
            unint64_t v38 = 0;
          }
          v39 |= v41;
          uint64_t v42 = *(void *)(v15 + 8 * v38);
        }
        while (v42 == -1);
        unint64_t v18 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = sub_100988838(v53, *(void *)(v10 + 48) + v26 * v18, type metadata accessor for CRLBoardIdentifier);
      uint64_t v19 = *(void *)(v10 + 56) + 40 * v18;
      *(void *)uint64_t v19 = v52;
      *(void *)(v19 + 8) = v30;
      *(void *)(v19 + 16) = v31;
      *(void *)(v19 + 24) = v32;
      *(unsigned char *)(v19 + 32) = v51;
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100964E58(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v46 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688E80);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v44 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v43) {
      break;
    }
    unint64_t v24 = v44;
    unint64_t v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v25 = v44[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v43) {
              goto LABEL_34;
            }
            unint64_t v25 = v44[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v46 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      sub_100988838(v28, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
    }
    else
    {
      sub_100988768(v28, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v32;
      uint64_t v31 = v32[1];
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_100988838((uint64_t)v8, *(void *)(v11 + 48) + v27 * v19, type metadata accessor for CRLBoardIdentifier);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    void *v20 = v30;
    v20[1] = v31;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v24 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_1009652C8(uint64_t a1, int a2)
{
  return sub_100965358(a1, a2, type metadata accessor for CRLBoardViewModelMetadata, &qword_101688E50, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
}

uint64_t sub_100965310(uint64_t a1, int a2)
{
  return sub_100965358(a1, a2, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, &qword_101688E40, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
}

uint64_t sub_100965358(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  int v47 = a6;
  int v51 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v52 = (uint64_t)&v44 - v12;
  uint64_t v13 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v49 = *(void *)(v13 - 8);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v6;
  sub_1005057FC(a4);
  int v50 = a2;
  uint64_t v18 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v19 = v18;
  if (*(void *)(v17 + 16))
  {
    uint64_t v44 = v6;
    uint64_t v20 = 1 << *(unsigned char *)(v17 + 32);
    uint64_t v21 = *(void *)(v17 + 64);
    uint64_t v46 = (void *)(v17 + 64);
    if (v20 < 64) {
      uint64_t v22 = ~(-1 << v20);
    }
    else {
      uint64_t v22 = -1;
    }
    unint64_t v23 = v22 & v21;
    int64_t v45 = (unint64_t)(v20 + 63) >> 6;
    uint64_t v24 = v18 + 64;
    uint64_t result = swift_retain();
    int64_t v26 = 0;
    while (1)
    {
      if (v23)
      {
        unint64_t v28 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        unint64_t v29 = v28 | (v26 << 6);
      }
      else
      {
        int64_t v30 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v30 >= v45) {
          goto LABEL_34;
        }
        unint64_t v31 = v46[v30];
        ++v26;
        if (!v31)
        {
          int64_t v26 = v30 + 1;
          if (v30 + 1 >= v45) {
            goto LABEL_34;
          }
          unint64_t v31 = v46[v26];
          if (!v31)
          {
            int64_t v32 = v30 + 2;
            if (v32 >= v45)
            {
LABEL_34:
              swift_release();
              uint64_t v8 = v44;
              if (v50)
              {
                uint64_t v43 = 1 << *(unsigned char *)(v17 + 32);
                if (v43 >= 64) {
                  bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v46 = -1 << v43;
                }
                *(void *)(v17 + 16) = 0;
              }
              break;
            }
            unint64_t v31 = v46[v32];
            if (!v31)
            {
              while (1)
              {
                int64_t v26 = v32 + 1;
                if (__OFADD__(v32, 1)) {
                  goto LABEL_41;
                }
                if (v26 >= v45) {
                  goto LABEL_34;
                }
                unint64_t v31 = v46[v26];
                ++v32;
                if (v31) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v26 = v32;
          }
        }
LABEL_21:
        unint64_t v23 = (v31 - 1) & v31;
        unint64_t v29 = __clz(__rbit64(v31)) + (v26 << 6);
      }
      uint64_t v33 = *(void *)(v49 + 72);
      uint64_t v34 = *(void *)(v17 + 48) + v33 * v29;
      if (v50)
      {
        sub_100988838(v34, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        uint64_t v35 = *(void *)(v48 + 72);
        sub_100988838(*(void *)(v17 + 56) + v35 * v29, v52, v51);
      }
      else
      {
        sub_100988768(v34, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        uint64_t v35 = *(void *)(v48 + 72);
        sub_100988768(*(void *)(v17 + 56) + v35 * v29, v52, v47);
      }
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v19 + 32);
      unint64_t v37 = result & ~v36;
      unint64_t v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v24 + 8 * (v37 >> 6))) != 0)
      {
        unint64_t v27 = __clz(__rbit64((-1 << v37) & ~*(void *)(v24 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v39 = 0;
        unint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v41 = v38 == v40;
          if (v38 == v40) {
            unint64_t v38 = 0;
          }
          v39 |= v41;
          uint64_t v42 = *(void *)(v24 + 8 * v38);
        }
        while (v42 == -1);
        unint64_t v27 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v24 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      sub_100988838((uint64_t)v16, *(void *)(v19 + 48) + v33 * v27, type metadata accessor for CRLBoardIdentifier);
      uint64_t result = sub_100988838(v52, *(void *)(v19 + 56) + v35 * v27, v51);
      ++*(void *)(v19 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v8 = v19;
  return result;
}

uint64_t sub_10096583C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v59 - 8);
  __chkstk_darwin(v59, v6);
  uint64_t v58 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v52 - v14;
  uint64_t v16 = *v2;
  sub_1005057FC(&qword_101688E48);
  int v64 = a2;
  uint64_t v17 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16)) {
    goto LABEL_49;
  }
  char v65 = v15;
  uint64_t v53 = v2;
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 64);
  uint64_t v62 = (void *)(v16 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1 << v19);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v20;
  int64_t v61 = (unint64_t)(v19 + 63) >> 6;
  long long v54 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v23 = v17 + 64;
  swift_retain();
  int64_t v24 = 0;
  uint64_t v25 = v16;
  uint64_t v56 = v12;
  uint64_t v57 = v16;
LABEL_10:
  if (v22)
  {
    unint64_t v35 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    unint64_t v36 = v35 | (v24 << 6);
    goto LABEL_32;
  }
  int64_t v37 = v24 + 1;
  if (__OFADD__(v24, 1)) {
    goto LABEL_50;
  }
  if (v37 >= v61)
  {
    swift_release();
    uint64_t v3 = v53;
    unint64_t v38 = v62;
    if (v64)
    {
LABEL_45:
      uint64_t v50 = 1 << *(unsigned char *)(v25 + 32);
      if (v50 >= 64) {
        bzero(v38, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v38 = -1 << v50;
      }
      *(void *)(v25 + 16) = 0;
    }
  }
  else
  {
    unint64_t v38 = v62;
    unint64_t v39 = v62[v37];
    ++v24;
    if (v39) {
      goto LABEL_31;
    }
    int64_t v24 = v37 + 1;
    if (v37 + 1 >= v61) {
      goto LABEL_42;
    }
    unint64_t v39 = v62[v24];
    if (v39)
    {
LABEL_31:
      unint64_t v22 = (v39 - 1) & v39;
      unint64_t v36 = __clz(__rbit64(v39)) + (v24 << 6);
LABEL_32:
      uint64_t v45 = *(void *)(v63 + 72);
      uint64_t v46 = *(void *)(v25 + 48) + v45 * v36;
      uint64_t v47 = (uint64_t)v65;
      if (v64) {
        sub_100988838(v46, (uint64_t)v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      }
      else {
        sub_100988768(v46, (uint64_t)v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      }
      uint64_t v48 = *(void *)(*(void *)(v25 + 56) + 8 * v36);
      Hasher.init(_seed:)();
      sub_100988768(v47, (uint64_t)v12, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v49 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v12, 5, v49))
      {
        case 1u:
          Hasher._combine(_:)(0);
          break;
        case 2u:
          Hasher._combine(_:)(1uLL);
          break;
        case 3u:
          Hasher._combine(_:)(2uLL);
          break;
        case 4u:
          Hasher._combine(_:)(3uLL);
          break;
        case 5u:
          Hasher._combine(_:)(4uLL);
          break;
        default:
          uint64_t v60 = *(void *)&v12[*(int *)(v49 + 48)];
          int64_t v26 = v58;
          unint64_t v27 = v12;
          uint64_t v28 = v59;
          (*v55)(v58, v27, v59);
          Hasher._combine(_:)(5uLL);
          sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          String.hash(into:)();
          uint64_t v29 = v28;
          uint64_t v12 = v56;
          (*v54)(v26, v29);
          uint64_t v25 = v57;
          swift_bridgeObjectRelease();
          break;
      }
      Swift::Int v30 = Hasher._finalize()();
      uint64_t v31 = -1 << *(unsigned char *)(v18 + 32);
      unint64_t v32 = v30 & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v23 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v34 = __clz(__rbit64((-1 << v32) & ~*(void *)(v23 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_9;
      }
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v31) >> 6;
      while (++v33 != v42 || (v41 & 1) == 0)
      {
        BOOL v43 = v33 == v42;
        if (v33 == v42) {
          unint64_t v33 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v23 + 8 * v33);
        if (v44 != -1)
        {
          unint64_t v34 = __clz(__rbit64(~v44)) + (v33 << 6);
LABEL_9:
          *(void *)(v23 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          sub_100988838((uint64_t)v65, *(void *)(v18 + 48) + v45 * v34, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          *(void *)(*(void *)(v18 + 56) + 8 * v34) = v48;
          ++*(void *)(v18 + 16);
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      JUMPOUT(0x100965E74);
    }
    int64_t v40 = v37 + 2;
    if (v40 < v61)
    {
      unint64_t v39 = v62[v40];
      if (!v39)
      {
        while (1)
        {
          int64_t v24 = v40 + 1;
          if (__OFADD__(v40, 1)) {
            goto LABEL_51;
          }
          if (v24 >= v61) {
            goto LABEL_42;
          }
          unint64_t v39 = v62[v24];
          ++v40;
          if (v39) {
            goto LABEL_31;
          }
        }
      }
      int64_t v24 = v40;
      goto LABEL_31;
    }
LABEL_42:
    swift_release();
    uint64_t v3 = v53;
    if (v64) {
      goto LABEL_45;
    }
  }
LABEL_49:
  uint64_t result = swift_release();
  *uint64_t v3 = v18;
  return result;
}

uint64_t sub_100965E8C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v82 = (uint64_t)v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v9);
  uint64_t v80 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v79 = (uint64_t)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v73 - v16;
  uint64_t v18 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v81 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  uint64_t v85 = (char *)v73 - v24;
  uint64_t v25 = *v2;
  sub_1005057FC(&qword_1016891E0);
  uint64_t v26 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v27 = v26;
  if (!*(void *)(v25 + 16)) {
    goto LABEL_53;
  }
  v73[0] = v2;
  uint64_t v28 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v29 = *(void *)(v25 + 64);
  id v75 = (void *)(v25 + 64);
  if (v28 < 64) {
    uint64_t v30 = ~(-1 << v28);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v31 = v30 & v29;
  int64_t v74 = (unint64_t)(v28 + 63) >> 6;
  int v77 = (void (**)(char *))(v8 + 32);
  uint64_t v76 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v32 = v26 + 64;
  swift_retain();
  int64_t v33 = 0;
  int v78 = a2;
  uint64_t v34 = v81;
  uint64_t v84 = v21;
  uint64_t v35 = (uint64_t)v85;
  v73[1] = v18;
  while (1)
  {
    if (v31)
    {
      uint64_t v88 = (v31 - 1) & v31;
      unint64_t v38 = __clz(__rbit64(v31)) | (v33 << 6);
      goto LABEL_22;
    }
    int64_t v39 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      goto LABEL_54;
    }
    if (v39 >= v74) {
      break;
    }
    unint64_t v40 = v75[v39];
    ++v33;
    if (!v40)
    {
      int64_t v33 = v39 + 1;
      if (v39 + 1 >= v74) {
        break;
      }
      unint64_t v40 = v75[v33];
      if (!v40)
      {
        int64_t v41 = v39 + 2;
        if (v41 >= v74) {
          break;
        }
        unint64_t v40 = v75[v41];
        if (!v40)
        {
          while (1)
          {
            int64_t v33 = v41 + 1;
            if (__OFADD__(v41, 1)) {
              goto LABEL_55;
            }
            if (v33 >= v74) {
              goto LABEL_48;
            }
            unint64_t v40 = v75[v33];
            ++v41;
            if (v40) {
              goto LABEL_21;
            }
          }
        }
        int64_t v33 = v41;
      }
    }
LABEL_21:
    uint64_t v88 = (v40 - 1) & v40;
    unint64_t v38 = __clz(__rbit64(v40)) + (v33 << 6);
LABEL_22:
    uint64_t v42 = *(void *)(v34 + 72);
    uint64_t v43 = *(void *)(v25 + 48) + v42 * v38;
    int64_t v89 = v33;
    uint64_t v87 = v42;
    if (a2)
    {
      sub_100988838(v43, v35, type metadata accessor for CRLBoardPreviewImageCache.Item);
      id v86 = *(id *)(*(void *)(v25 + 56) + 8 * v38);
    }
    else
    {
      sub_100988768(v43, v35, type metadata accessor for CRLBoardPreviewImageCache.Item);
      id v86 = *(id *)(*(void *)(v25 + 56) + 8 * v38);
    }
    Hasher.init(_seed:)();
    sub_100988768(v35, (uint64_t)v21, type metadata accessor for CRLBoardPreviewImageCache.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v45 = (uint64_t)v21;
        uint64_t v46 = v82;
        sub_100988838(v45, v82, type metadata accessor for CRLBoardIdentifier);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v52 = &v21[*(int *)(sub_1005057FC(&qword_10169FA80) + 48)];
        uint64_t v53 = (uint64_t)v21;
        uint64_t v46 = v82;
        sub_100988838(v53, v82, type metadata accessor for CRLBoardIdentifier);
        long long v54 = v17;
        uint64_t v55 = v80;
        uint64_t v56 = v25;
        uint64_t v57 = v83;
        ((void (*)(char *, char *, uint64_t))*v77)(v80, v52, v83);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        LOBYTE(a2) = v78;
        swift_bridgeObjectRelease();
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v58 = v55;
        uint64_t v17 = v54;
        uint64_t v59 = v57;
        uint64_t v25 = v56;
        uint64_t v34 = v81;
        (*v76)(v58, v59);
      }
      uint64_t v60 = type metadata accessor for CRLBoardIdentifier;
      uint64_t v61 = v46;
    }
    else
    {
      sub_100988838((uint64_t)v21, (uint64_t)v17, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v47 = v79;
      sub_100988768((uint64_t)v17, v79, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v48 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 5, v48))
      {
        case 1u:
          Swift::UInt v62 = 0;
          goto LABEL_37;
        case 2u:
          Swift::UInt v62 = 1;
          goto LABEL_37;
        case 3u:
          Swift::UInt v62 = 2;
          goto LABEL_37;
        case 4u:
          Swift::UInt v62 = 3;
          goto LABEL_37;
        case 5u:
          Swift::UInt v62 = 4;
LABEL_37:
          Hasher._combine(_:)(v62);
          break;
        default:
          uint64_t v49 = v80;
          uint64_t v50 = v83;
          (*v77)(v80);
          Hasher._combine(_:)(5uLL);
          sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          String.hash(into:)();
          int v51 = v49;
          uint64_t v34 = v81;
          (*v76)(v51, v50);
          LOBYTE(a2) = v78;
          swift_bridgeObjectRelease();
          break;
      }
      uint64_t v60 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      uint64_t v61 = (uint64_t)v17;
    }
    sub_1009888A0(v61, v60);
    Swift::Int v63 = Hasher._finalize()();
    uint64_t v64 = -1 << *(unsigned char *)(v27 + 32);
    unint64_t v65 = v63 & ~v64;
    unint64_t v66 = v65 >> 6;
    uint64_t v21 = v84;
    if (((-1 << v65) & ~*(void *)(v32 + 8 * (v65 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v65) & ~*(void *)(v32 + 8 * (v65 >> 6)))) | v65 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v35 = (uint64_t)v85;
      goto LABEL_7;
    }
    char v67 = 0;
    unint64_t v68 = (unint64_t)(63 - v64) >> 6;
    uint64_t v35 = (uint64_t)v85;
    do
    {
      if (++v66 == v68 && (v67 & 1) != 0)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        JUMPOUT(0x100966810);
      }
      BOOL v69 = v66 == v68;
      if (v66 == v68) {
        unint64_t v66 = 0;
      }
      v67 |= v69;
      uint64_t v70 = *(void *)(v32 + 8 * v66);
    }
    while (v70 == -1);
    unint64_t v36 = __clz(__rbit64(~v70)) + (v66 << 6);
LABEL_7:
    uint64_t v37 = v87;
    *(void *)(v32 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    sub_100988838(v35, *(void *)(v27 + 48) + v37 * v36, type metadata accessor for CRLBoardPreviewImageCache.Item);
    *(void *)(*(void *)(v27 + 56) + 8 * v36) = v86;
    ++*(void *)(v27 + 16);
    unint64_t v31 = v88;
    int64_t v33 = v89;
  }
LABEL_48:
  swift_release();
  uint64_t v3 = (uint64_t *)v73[0];
  if (a2)
  {
    uint64_t v71 = 1 << *(unsigned char *)(v25 + 32);
    if (v71 >= 64) {
      bzero(v75, ((unint64_t)(v71 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *id v75 = -1 << v71;
    }
    *(void *)(v25 + 16) = 0;
  }
LABEL_53:
  uint64_t result = swift_release();
  *uint64_t v3 = v27;
  return result;
}

uint64_t sub_100966828(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689248);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = v3;
    int64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_34;
        }
        unint64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v19 = v33[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_41;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v33 = -1 << v31;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(v5 + 56) + v21;
      if (a2) {
        sub_10051B3EC(v23, (uint64_t)v34, &qword_101674258);
      }
      else {
        sub_100522E9C(v23, (uint64_t)v34, &qword_101674258);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      uint64_t result = sub_10051B3EC((uint64_t)v34, *(void *)(v7 + 56) + v15, &qword_101674258);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100966B04(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_1016891C0);
  int v44 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = result;
  if (*(void *)(v10 + 16))
  {
    int64_t v14 = 0;
    uint64_t v15 = *(void *)(v10 + 64);
    int64_t v41 = (void *)(v10 + 64);
    uint64_t v16 = 1 << *(unsigned char *)(v10 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v18 = v17 & v15;
    int64_t v39 = v3;
    int64_t v40 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = v6;
    unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v20 = result + 64;
    uint64_t v21 = v12;
    while (1)
    {
      if (v18)
      {
        unint64_t v23 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v24 = v23 | (v14 << 6);
      }
      else
      {
        int64_t v25 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v25 >= v40) {
          goto LABEL_34;
        }
        unint64_t v26 = v41[v25];
        ++v14;
        if (!v26)
        {
          int64_t v14 = v25 + 1;
          if (v25 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v26 = v41[v14];
          if (!v26)
          {
            int64_t v27 = v25 + 2;
            if (v27 >= v40)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v39;
                goto LABEL_41;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v12 + 32);
              if (v37 >= 64) {
                bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v41 = -1 << v37;
              }
              uint64_t v3 = v39;
              *(void *)(v12 + 16) = 0;
              break;
            }
            unint64_t v26 = v41[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v14 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_43;
                }
                if (v14 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v26 = v41[v14];
                ++v27;
                if (v26) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v14 = v27;
          }
        }
LABEL_21:
        unint64_t v18 = (v26 - 1) & v26;
        unint64_t v24 = __clz(__rbit64(v26)) + (v14 << 6);
      }
      uint64_t v28 = *(void *)(v43 + 72);
      unint64_t v29 = *(void *)(v12 + 56) + v28 * v24;
      if (v44) {
        (*v19)(v9, v29, v5);
      }
      else {
        (*v42)(v9, v29, v5);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v20 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v31) & ~*(void *)(v20 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v12 = v21;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        uint64_t v12 = v21;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v20 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v22 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v13 + 56) + v28 * v22, v9, v5);
      ++*(void *)(v13 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100966EB8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688F28);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009671C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689158);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 16 * v21;
    uint64_t v32 = *(void **)v31;
    char v33 = *(unsigned char *)(v31 + 8);
    if ((v38 & 1) == 0)
    {
      id v34 = v30;
      sub_100626B48(v32, v33);
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = *(void *)(v7 + 56) + 16 * v18;
    *(void *)uint64_t v19 = v32;
    *(unsigned char *)(v19 + 8) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1009674B8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016891B8);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_20;
        }
        unint64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_20;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                uint64_t v19 = 1 << *(unsigned char *)(v5 + 32);
                if (v19 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v19;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_27;
                }
                if (v13 >= v11) {
                  goto LABEL_20;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = v18;
          }
        }
LABEL_19:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      unint64_t result = sub_10095AD08(*(unsigned char *)(*(void *)(v5 + 48) + v15), *(void *)(*(void *)(v5 + 56) + 8 * v15), v6);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_10096767C(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688F50);
}

uint64_t sub_100967688(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689180);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_37;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_37:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_46;
            }
            if (v13 >= v35) {
              goto LABEL_37;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v17);
    int v23 = *v22;
    uint64_t v25 = *((void *)v22 + 1);
    uint64_t v24 = *((void *)v22 + 2);
    char v26 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_10053974C(v26, (uint64_t)v38);
    }
    else
    {
      sub_1005498A4((uint64_t)v26, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v23 + 5);
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(unsigned char *)uint64_t v15 = v23;
    *(void *)(v15 + 8) = v25;
    *(void *)(v15 + 16) = v24;
    uint64_t result = sub_10053974C(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009679FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016891B0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      unint64_t v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        id v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100967CD0(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v34 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  *uint64_t v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100967F84(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016890A8);
  char v36 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v35 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v34) {
          goto LABEL_33;
        }
        unint64_t v21 = v35[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v21 = v35[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v34)
            {
LABEL_33:
              if (v36)
              {
                if (v33 >= 64) {
                  bzero(v35, 8 * v34);
                }
                else {
                  *int64_t v35 = v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v21 = v35[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 24 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      if ((v36 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 24 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      void v17[2] = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100968260(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688EA0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100968518(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689028);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100968840(uint64_t a1, char a2)
{
  return sub_100969014(a1, a2, &qword_101688EB0);
}

uint64_t sub_10096884C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688EA8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v36 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
    void *v19 = v31;
    v19[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100968B50(uint64_t a1, char a2)
{
  return sub_10096B7D0(a1, a2, &qword_101689128);
}

uint64_t sub_100968B5C(uint64_t a1, char a2)
{
  return sub_100971340(a1, a2, &qword_101689190);
}

uint64_t sub_100968B68(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v55 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101689188);
  int v54 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v50 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v48 = v2;
  int64_t v49 = (unint64_t)(v12 + 63) >> 6;
  int v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v56 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v52 = v6;
  uint64_t v53 = v9;
  uint64_t v61 = v5;
  unint64_t v19 = v55;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v49) {
      break;
    }
    int64_t v25 = v50;
    unint64_t v26 = v50[v24];
    ++v18;
    if (!v26)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v49) {
        goto LABEL_34;
      }
      unint64_t v26 = v50[v18];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v49)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v48;
          if ((v54 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v50[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v18 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v49) {
              goto LABEL_34;
            }
            unint64_t v26 = v50[v18];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v27;
      }
    }
LABEL_21:
    unint64_t v15 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v9 + 48) + v28 * v23;
    int64_t v60 = v18;
    if (v54)
    {
      (*v56)(v19, v29, v61);
      uint64_t v30 = (void **)(*(void *)(v9 + 56) + 48 * v23);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = v30[3];
      uint64_t v59 = v30[2];
      uint64_t v34 = v30[4];
      uint64_t v35 = v30[5];
      id v57 = v31;
      uint64_t v58 = v34;
    }
    else
    {
      (*v51)(v19, v29, v61);
      uint64_t v36 = *(void *)(v9 + 56) + 48 * v23;
      uint64_t v37 = *(void **)v36;
      uint64_t v32 = *(void **)(v36 + 8);
      uint64_t v38 = *(void **)(v36 + 16);
      uint64_t v33 = *(void **)(v36 + 24);
      uint64_t v35 = *(void **)(v36 + 40);
      uint64_t v58 = *(void **)(v36 + 32);
      uint64_t v59 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v57 = v37;
      id v39 = v32;
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v40 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v41 = result & ~v40;
    unint64_t v42 = v41 >> 6;
    if (((-1 << v41) & ~*(void *)(v16 + 8 * (v41 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v41) & ~*(void *)(v16 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v19 = v55;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v40) >> 6;
      unint64_t v19 = v55;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v45 = v42 == v44;
        if (v42 == v44) {
          unint64_t v42 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v16 + 8 * v42);
      }
      while (v46 == -1);
      unint64_t v20 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v56)(*(void *)(v11 + 48) + v28 * v20, v19, v61);
    unint64_t v21 = (void *)(*(void *)(v11 + 56) + 48 * v20);
    *unint64_t v21 = v57;
    v21[1] = v32;
    int64_t v18 = v60;
    v21[2] = v59;
    v21[3] = v33;
    v21[4] = v58;
    v21[5] = v35;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v52;
    uint64_t v9 = v53;
  }
  swift_release();
  uint64_t v3 = v48;
  int64_t v25 = v50;
  if ((v54 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v47 = 1 << *(unsigned char *)(v9 + 32);
  if (v47 >= 64) {
    bzero(v25, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v47;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100969008(uint64_t a1, char a2)
{
  return sub_100969014(a1, a2, &qword_101688F18);
}

uint64_t sub_100969014(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v40 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    int64_t v39 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v23 = v22 | (v14 << 6);
      }
      else
      {
        int64_t v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v39) {
          goto LABEL_33;
        }
        unint64_t v25 = v40[v24];
        ++v14;
        if (!v25)
        {
          int64_t v14 = v24 + 1;
          if (v24 + 1 >= v39) {
            goto LABEL_33;
          }
          unint64_t v25 = v40[v14];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v39)
            {
LABEL_33:
              swift_release();
              unint64_t v4 = v3;
              if (v41)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v6 + 32);
                if (v38 >= 64) {
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v38;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v40[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v14 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v25 = v40[v14];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v26;
          }
        }
LABEL_30:
        unint64_t v11 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      uint64_t v31 = 16 * v23;
      uint64_t v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v35 = (uint64_t *)(*(void *)(v6 + 56) + v31);
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      if ((v41 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v17 == v28;
          if (v17 == v28) {
            unint64_t v17 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v17);
        }
        while (v30 == -1);
        unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v34;
      v20[1] = v33;
      unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
      *unint64_t v21 = v37;
      v21[1] = v36;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_10096932C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101685CE8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100575CE8(v24, v35);
      }
      else
      {
        sub_100522D7C((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100575CE8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096962C(uint64_t a1, char a2)
{
  return sub_10096A584(a1, a2, &qword_101689240);
}

uint64_t sub_100969638(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689178);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        unint64_t v19 = v34[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v19 = v34[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v34 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v19 = v34[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      unint64_t v21 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v17);
      Swift::UInt v23 = *v21;
      Swift::UInt v22 = v21[1];
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v14);
      Swift::UInt *v15 = v23;
      v15[1] = v22;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096991C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  int v54 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101689160);
  int v53 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v47 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    int64_t v49 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v48 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v55 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v51 = v6;
    uint64_t v52 = v9;
    uint64_t v57 = v5;
    unint64_t v19 = v54;
    while (1)
    {
      if (v15)
      {
        unint64_t v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v23 = v22 | (v18 << 6);
      }
      else
      {
        int64_t v24 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v48) {
          goto LABEL_34;
        }
        unint64_t v25 = v49[v24];
        ++v18;
        if (!v25)
        {
          int64_t v18 = v24 + 1;
          if (v24 + 1 >= v48) {
            goto LABEL_34;
          }
          unint64_t v25 = v49[v18];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v48)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v47;
              if (v53)
              {
                uint64_t v45 = 1 << *(unsigned char *)(v9 + 32);
                if (v45 >= 64) {
                  bzero(v49, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v49 = -1 << v45;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v49[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v18 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v48) {
                  goto LABEL_34;
                }
                unint64_t v25 = v49[v18];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v26;
          }
        }
LABEL_21:
        unint64_t v15 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v18 << 6);
      }
      uint64_t v27 = *(void *)(v6 + 72);
      unint64_t v28 = *(void *)(v9 + 48) + v27 * v23;
      if (v53)
      {
        (*v55)(v19, v28, v57);
        unint64_t v29 = *(void *)(v9 + 56) + (v23 << 6);
        uint64_t v56 = *(void *)v29;
        long long v30 = *(_OWORD *)(v29 + 8);
        uint64_t v31 = *(void **)(v29 + 24);
        uint64_t v32 = *(void **)(v29 + 32);
        long long v58 = *(_OWORD *)(v29 + 40);
        long long v59 = v30;
        uint64_t v33 = *(void *)(v29 + 56);
      }
      else
      {
        (*v50)(v19, v28, v57);
        unint64_t v34 = *(void *)(v9 + 56) + (v23 << 6);
        uint64_t v56 = *(void *)v34;
        long long v35 = *(_OWORD *)(v34 + 8);
        uint64_t v31 = *(void **)(v34 + 24);
        uint64_t v32 = *(void **)(v34 + 32);
        long long v58 = *(_OWORD *)(v34 + 40);
        long long v59 = v35;
        uint64_t v33 = *(void *)(v34 + 56);
        id v36 = v32;
        swift_retain();
        swift_retain();
        swift_retain();
        id v37 = v31;
      }
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v38 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v39 = result & ~v38;
      unint64_t v40 = v39 >> 6;
      if (((-1 << v39) & ~*(void *)(v16 + 8 * (v39 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v39) & ~*(void *)(v16 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v19 = v54;
      }
      else
      {
        char v41 = 0;
        unint64_t v42 = (unint64_t)(63 - v38) >> 6;
        unint64_t v19 = v54;
        do
        {
          if (++v40 == v42 && (v41 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v43 = v40 == v42;
          if (v40 == v42) {
            unint64_t v40 = 0;
          }
          v41 |= v43;
          uint64_t v44 = *(void *)(v16 + 8 * v40);
        }
        while (v44 == -1);
        unint64_t v20 = __clz(__rbit64(~v44)) + (v40 << 6);
      }
      *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v55)(*(void *)(v11 + 48) + v27 * v20, v19, v57);
      unint64_t v21 = *(void *)(v11 + 56) + (v20 << 6);
      *(void *)unint64_t v21 = v56;
      *(_OWORD *)(v21 + 8) = v59;
      *(void *)(v21 + 24) = v31;
      *(void *)(v21 + 32) = v32;
      *(_OWORD *)(v21 + 40) = v58;
      *(void *)(v21 + 56) = v33;
      ++*(void *)(v11 + 16);
      uint64_t v6 = v51;
      uint64_t v9 = v52;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100969DD0(uint64_t a1, int a2)
{
  return sub_100969DDC(a1, a2, &qword_1016890C8);
}

uint64_t sub_100969DDC(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  sub_1005057FC(a3);
  int v49 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = *(void *)(v14 + 64);
  uint64_t v45 = (void *)(v14 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  BOOL v43 = v5;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v8;
  unint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v21 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v44) {
      break;
    }
    unint64_t v28 = v45;
    unint64_t v29 = v45[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v29 = v45[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v45[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v44) {
              goto LABEL_34;
            }
            unint64_t v29 = v45[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v48 + 72);
    unint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v49)
    {
      (*v20)(v11, v32, v7);
      id v33 = *(id *)(*(void *)(v14 + 56) + 8 * v26);
    }
    else
    {
      (*v46)(v11, v32, v7);
      id v33 = *(id *)(*(void *)(v14 + 56) + 8 * v26);
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v20)(*(void *)(v15 + 48) + v31 * v24, v11, v7);
    *(void *)(*(void *)(v15 + 56) + 8 * v24) = v33;
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v5 = v43;
  unint64_t v28 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v14 + 32);
  if (v41 >= 64) {
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v28 = -1 << v41;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v15;
  return result;
}

uint64_t sub_10096A204(uint64_t a1, int a2)
{
  return sub_10096B124(a1, a2, type metadata accessor for CRLThrottleInfo, &qword_101689110, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
}

uint64_t sub_10096A24C(uint64_t a1, int a2)
{
  return sub_10096FEDC(a1, a2, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, &qword_101689118, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
}

uint64_t sub_10096A294(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689140);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096A56C(uint64_t a1, char a2)
{
  return sub_100971340(a1, a2, &qword_101689138);
}

uint64_t sub_10096A578(uint64_t a1, char a2)
{
  return sub_10096A584(a1, a2, &qword_101688F68);
}

uint64_t sub_10096A584(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    id v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v37;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_10096A854(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689150);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096AB2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689130);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096AE44(uint64_t a1, char a2)
{
  return sub_10096B7D0(a1, a2, &qword_101688F70);
}

uint64_t sub_10096AE50(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689148);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        int64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12) {
          goto LABEL_33;
        }
        unint64_t v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          int64_t v15 = v22 + 1;
          if (v22 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v23 = v9[v15];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v31;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v23 = v9[v15];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
      {
        id v30 = v29;
        swift_unknownObjectRetain();
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        unint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v19) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096B124(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v47 = a6;
  uint64_t v9 = v6;
  uint64_t v11 = a3(0);
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = *v6;
  sub_1005057FC(a4);
  int v49 = a2;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v46 = (void *)(v15 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  int64_t v44 = v6;
  int64_t v45 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  while (1)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v45) {
      break;
    }
    uint64_t v29 = v46;
    unint64_t v30 = v46[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v30 = v46[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v9 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v46[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v45) {
              goto LABEL_34;
            }
            unint64_t v30 = v46[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void **)(*(void *)(v15 + 48) + 8 * v27);
    uint64_t v33 = *(void *)(v48 + 72);
    uint64_t v34 = *(void *)(v15 + 56) + v33 * v27;
    if (v49)
    {
      sub_100988838(v34, (uint64_t)v14, a5);
    }
    else
    {
      sub_100988768(v34, (uint64_t)v14, v47);
      id v35 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v17 + 40));
    uint64_t v36 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v22 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v37) & ~*(void *)(v22 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v22 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v25 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(void *)(*(void *)(v17 + 48) + 8 * v25) = v32;
    uint64_t result = sub_100988838((uint64_t)v14, *(void *)(v17 + 56) + v33 * v25, a5);
    ++*(void *)(v17 + 16);
  }
  swift_release();
  uint64_t v9 = v44;
  uint64_t v29 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v15 + 32);
  if (v43 >= 64) {
    bzero(v29, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v43;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v9 = v17;
  return result;
}

uint64_t sub_10096B4B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016890B0);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_33;
        }
        unint64_t v22 = v39[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v22 = v39[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v37;
              if (v41)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v39 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v22 = v39[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      int64_t v28 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 56) + 40 * v20);
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
      uint64_t v32 = (void *)v29[2];
      unint64_t v33 = v29[3];
      uint64_t v34 = (void *)v29[4];
      if ((v41 & 1) == 0)
      {
        id v35 = v28;
        sub_1008D0DA8(v30, v31, v32, v33, v34);
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v28;
      uint64_t v18 = (uint64_t *)(*(void *)(v7 + 56) + 40 * v17);
      *uint64_t v18 = v30;
      v18[1] = v31;
      v18[2] = (uint64_t)v32;
      v18[3] = v33;
      v18[4] = (uint64_t)v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096B7C4(uint64_t a1, char a2)
{
  return sub_10096B7D0(a1, a2, &qword_1016890F8);
}

uint64_t sub_10096B7D0(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_10096BAE4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689108);
  char v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v34 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      BOOL v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v30 = *v28;
      uint64_t v29 = (void *)v28[1];
      if ((v35 & 1) == 0) {
        id v31 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v30;
      v17[1] = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096BDC4(uint64_t a1, int a2)
{
  return sub_10096BE0C(a1, a2, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_101689030, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
}

uint64_t sub_10096BE0C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  int v54 = a6;
  int64_t v60 = a5;
  int64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v56 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v62 = (uint64_t)&v49 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  long long v58 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v6;
  sub_1005057FC(a4);
  int v57 = a2;
  uint64_t v18 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v19 = v18;
  if (!*(void *)(v17 + 16)) {
    goto LABEL_41;
  }
  uint64_t v61 = v13;
  uint64_t v20 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v21 = *(void *)(v17 + 64);
  uint64_t v52 = (void *)(v17 + 64);
  if (v20 < 64) {
    uint64_t v22 = ~(-1 << v20);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v21;
  uint64_t v50 = v6;
  int64_t v51 = (unint64_t)(v20 + 63) >> 6;
  int v53 = (void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  long long v59 = (void (**)(char *, unint64_t, uint64_t))(v14 + 32);
  uint64_t v24 = v18 + 64;
  uint64_t result = swift_retain();
  int64_t v26 = 0;
  uint64_t v55 = v17;
  Swift::UInt v27 = v58;
  while (1)
  {
    if (v23)
    {
      unint64_t v29 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v30 = v29 | (v26 << 6);
      goto LABEL_22;
    }
    int64_t v31 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v31 >= v51) {
      break;
    }
    uint64_t v32 = v52;
    unint64_t v33 = v52[v31];
    ++v26;
    if (!v33)
    {
      int64_t v26 = v31 + 1;
      if (v31 + 1 >= v51) {
        goto LABEL_34;
      }
      unint64_t v33 = v52[v26];
      if (!v33)
      {
        int64_t v34 = v31 + 2;
        if (v34 >= v51)
        {
LABEL_34:
          swift_release();
          int64_t v8 = v50;
          if ((v57 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v33 = v52[v34];
        if (!v33)
        {
          while (1)
          {
            int64_t v26 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              goto LABEL_43;
            }
            if (v26 >= v51) {
              goto LABEL_34;
            }
            unint64_t v33 = v52[v26];
            ++v34;
            if (v33) {
              goto LABEL_21;
            }
          }
        }
        int64_t v26 = v34;
      }
    }
LABEL_21:
    unint64_t v23 = (v33 - 1) & v33;
    unint64_t v30 = __clz(__rbit64(v33)) + (v26 << 6);
LABEL_22:
    uint64_t v35 = v14;
    uint64_t v36 = *(void *)(v14 + 72);
    unint64_t v37 = *(void *)(v17 + 48) + v36 * v30;
    if (v57)
    {
      (*v59)(v27, v37, v61);
      uint64_t v38 = *(void *)(v17 + 56);
      uint64_t v39 = *(void *)(v56 + 72);
      sub_100988838(v38 + v39 * v30, v62, v60);
    }
    else
    {
      (*v53)(v27, v37, v61);
      uint64_t v40 = *(void *)(v17 + 56);
      uint64_t v39 = *(void *)(v56 + 72);
      sub_100988768(v40 + v39 * v30, v62, v54);
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v41 = -1 << *(unsigned char *)(v19 + 32);
    unint64_t v42 = result & ~v41;
    unint64_t v43 = v42 >> 6;
    if (((-1 << v42) & ~*(void *)(v24 + 8 * (v42 >> 6))) != 0)
    {
      unint64_t v28 = __clz(__rbit64((-1 << v42) & ~*(void *)(v24 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
      Swift::UInt v27 = v58;
    }
    else
    {
      char v44 = 0;
      unint64_t v45 = (unint64_t)(63 - v41) >> 6;
      Swift::UInt v27 = v58;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v46 = v43 == v45;
        if (v43 == v45) {
          unint64_t v43 = 0;
        }
        v44 |= v46;
        uint64_t v47 = *(void *)(v24 + 8 * v43);
      }
      while (v47 == -1);
      unint64_t v28 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(void *)(v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    (*v59)((char *)(*(void *)(v19 + 48) + v36 * v28), (unint64_t)v27, v61);
    uint64_t result = sub_100988838(v62, *(void *)(v19 + 56) + v39 * v28, v60);
    ++*(void *)(v19 + 16);
    uint64_t v17 = v55;
    uint64_t v14 = v35;
  }
  swift_release();
  int64_t v8 = v50;
  uint64_t v32 = v52;
  if ((v57 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v48 = 1 << *(unsigned char *)(v17 + 32);
  if (v48 >= 64) {
    bzero(v32, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v32 = -1 << v48;
  }
  *(void *)(v17 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *int64_t v8 = v19;
  return result;
}

uint64_t sub_10096C300(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688B40);
  int v41 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v39 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  unint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    unint64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v38) {
              goto LABEL_34;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v40 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if (v41) {
      sub_100988838(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    else {
      sub_100988768(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_100988838((uint64_t)v8, *(void *)(v11 + 48) + v26 * v19, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  unint64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v36;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10096C74C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_1016890B8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    unint64_t v30 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        sub_100510D4C(v31, *((unint64_t *)&v31 + 1));
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096CA14(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v6);
  uint64_t v49 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  sub_1005057FC(&qword_101688E78);
  int v48 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  unint64_t v43 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int v41 = v2;
  int64_t v42 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v44 = v5 + 16;
  uint64_t v45 = v5;
  unint64_t v19 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v20 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  uint64_t v46 = v12;
  while (1)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v42) {
      break;
    }
    uint64_t v27 = v43;
    unint64_t v28 = v43[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v28 = v43[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v43[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v42) {
              goto LABEL_34;
            }
            unint64_t v28 = v43[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    uint64_t v31 = *(void *)(v12 + 48) + v30 * v25;
    if (v48)
    {
      sub_100988838(v31, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      uint64_t v32 = *(void *)(v45 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 32))(v49, *(void *)(v12 + 56) + v32 * v25, v50);
    }
    else
    {
      sub_100988768(v31, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      uint64_t v32 = *(void *)(v45 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v49, *(void *)(v12 + 56) + v32 * v25, v50);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v12 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v12 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    sub_100988838((uint64_t)v11, *(void *)(v14 + 48) + v30 * v23, type metadata accessor for CRLBoardIdentifier);
    uint64_t result = (*v19)(*(void *)(v14 + 56) + v32 * v23, v49, v50);
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v27 = v43;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v12 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v14;
  return result;
}

uint64_t sub_10096CF4C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689068);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096D254(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689040);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v30 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v30) {
          goto LABEL_33;
        }
        unint64_t v20 = v31[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v20 = v31[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v31[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v30) {
                  goto LABEL_33;
                }
                unint64_t v20 = v31[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      unint64_t v27 = *(void **)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        id v28 = v27;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096D520(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689038);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      id v33 = v32;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  char v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096D830(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688FB0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v36[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v36[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v38)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v36[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v28 = *(void *)(v5 + 48) + 32 * v20;
      id v29 = *(id *)v28;
      unint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(void *)(v28 + 16);
      unsigned __int8 v32 = *(unsigned char *)(v28 + 24);
      uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v38 & 1) == 0)
      {
        sub_10053BB6C(*(id *)v28, *(id *)(v28 + 8), *(void *)(v28 + 16), *(unsigned char *)(v28 + 24));
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_100B8174C((int)&v39, (unint64_t)v29, v30, v31, v32);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 32 * v17;
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v30;
      *(void *)(v18 + 16) = v31;
      *(unsigned char *)(v18 + 24) = v32;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096DB5C(uint64_t a1, int a2)
{
  return sub_10096E2FC(a1, a2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_101689018);
}

uint64_t sub_10096DB7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101689010);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v40 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v40 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v24 = *(void *)(v40 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_21:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if (a2)
    {
      long long v27 = *(_OWORD *)v26;
      long long v28 = *(_OWORD *)(v26 + 16);
      uint64_t v44 = *(void *)(v26 + 32);
      long long v42 = v27;
      long long v43 = v28;
    }
    else
    {
      sub_10050BF84(v26, (uint64_t)&v42);
    }
    uint64_t v29 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v30 = *(void *)(v29 + 24);
    long long v41 = *(_OWORD *)(v29 + 8);
    uint64_t v31 = *(void *)v29;
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v32 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v12 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v42;
    long long v18 = v43;
    *(void *)(v16 + 32) = v44;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v15;
    *(void *)uint64_t v19 = v31;
    *(_OWORD *)(v19 + 8) = v41;
    *(void *)(v19 + 24) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096DE9C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688E58);
  int v41 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  BOOL v37 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v39 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    int64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v38) {
              goto LABEL_34;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v40 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if (v41) {
      sub_100988838(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    else {
      sub_100988768(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_100988838((uint64_t)v8, *(void *)(v11 + 48) + v26 * v19, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  int64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v36;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10096E2F0(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688E10);
}

uint64_t sub_10096E2FC(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v53 = a3(0);
  uint64_t v8 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v9);
  uint64_t v52 = (char *)&v45 - v10;
  uint64_t v11 = *v4;
  sub_1005057FC(a4);
  int v51 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v48 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v46 = v4;
  int64_t v47 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v50 = v8;
  int64_t v18 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v47) {
      break;
    }
    uint64_t v27 = v48;
    unint64_t v28 = v48[v26];
    ++v21;
    if (!v28)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v28 = v48[v21];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v46;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v48[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v21 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v47) {
              goto LABEL_34;
            }
            unint64_t v28 = v48[v21];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v29;
      }
    }
LABEL_21:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v11 + 56);
    uint64_t v31 = v11;
    char v32 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v25);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = *(void *)(v50 + 72);
    uint64_t v36 = v30 + v35 * v25;
    if (v51)
    {
      (*v18)(v52, v36, v53);
    }
    else
    {
      (*v49)(v52, v36, v53);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v37 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v22 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    int64_t v23 = (void *)(*(void *)(v13 + 48) + 16 * v22);
    *int64_t v23 = v33;
    v23[1] = v34;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 56) + v35 * v22, v52, v53);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v31;
  }
  swift_release();
  uint64_t v6 = v46;
  uint64_t v27 = v48;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v11 + 32);
  if (v44 >= 64) {
    bzero(v27, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v44;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v13;
  return result;
}

uint64_t sub_10096E6E8(uint64_t a1, int a2)
{
  return sub_100964574(a1, a2, type metadata accessor for CRLBoardIdentifier, &qword_101688E60, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10096E730(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688F48);
}

uint64_t sub_10096E73C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v6);
  id v73 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v10);
  uint64_t v74 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  int v78 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  int v77 = (char *)&v65 - v22;
  uint64_t v23 = *v2;
  sub_1005057FC(&qword_1016891C8);
  int v76 = a2;
  uint64_t v24 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v25 = v24;
  if (*(void *)(v23 + 16))
  {
    unint64_t v66 = v2;
    uint64_t v26 = 1 << *(unsigned char *)(v23 + 32);
    uint64_t v27 = *(void *)(v23 + 64);
    unint64_t v68 = (void *)(v23 + 64);
    if (v26 < 64) {
      uint64_t v28 = ~(-1 << v26);
    }
    else {
      uint64_t v28 = -1;
    }
    unint64_t v29 = v28 & v27;
    int64_t v67 = (unint64_t)(v26 + 63) >> 6;
    uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    BOOL v69 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v30 = v24 + 64;
    uint64_t result = swift_retain();
    int64_t v32 = 0;
    uint64_t v34 = (uint64_t)v77;
    uint64_t v33 = (uint64_t)v78;
    uint64_t v71 = v17;
    int64_t v72 = v15;
    while (1)
    {
      if (v29)
      {
        uint64_t v81 = (v29 - 1) & v29;
        unint64_t v37 = __clz(__rbit64(v29)) | (v32 << 6);
      }
      else
      {
        int64_t v38 = v32 + 1;
        if (__OFADD__(v32, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v38 >= v67) {
          goto LABEL_37;
        }
        unint64_t v39 = v68[v38];
        ++v32;
        if (!v39)
        {
          int64_t v32 = v38 + 1;
          if (v38 + 1 >= v67) {
            goto LABEL_37;
          }
          unint64_t v39 = v68[v32];
          if (!v39)
          {
            int64_t v40 = v38 + 2;
            if (v40 >= v67)
            {
LABEL_37:
              swift_release();
              uint64_t v3 = v66;
              if (v76)
              {
                uint64_t v64 = 1 << *(unsigned char *)(v23 + 32);
                if (v64 >= 64) {
                  bzero(v68, ((unint64_t)(v64 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v68 = -1 << v64;
                }
                *(void *)(v23 + 16) = 0;
              }
              break;
            }
            unint64_t v39 = v68[v40];
            if (!v39)
            {
              while (1)
              {
                int64_t v32 = v40 + 1;
                if (__OFADD__(v40, 1)) {
                  goto LABEL_44;
                }
                if (v32 >= v67) {
                  goto LABEL_37;
                }
                unint64_t v39 = v68[v32];
                ++v40;
                if (v39) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v32 = v40;
          }
        }
LABEL_21:
        uint64_t v81 = (v39 - 1) & v39;
        unint64_t v37 = __clz(__rbit64(v39)) + (v32 << 6);
      }
      uint64_t v41 = *(void *)(v17 + 72);
      uint64_t v42 = *(void *)(v23 + 48) + v41 * v37;
      int64_t v82 = v32;
      uint64_t v80 = v41;
      if (v76)
      {
        sub_100988838(v42, v34, type metadata accessor for CRLAssetReferrerIdentifier);
        uint64_t v43 = *(void *)(v23 + 56);
        uint64_t v79 = *(void *)(v9 + 72);
        sub_100988838(v43 + v79 * v37, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
      }
      else
      {
        sub_100988768(v42, v34, type metadata accessor for CRLAssetReferrerIdentifier);
        uint64_t v44 = *(void *)(v23 + 56);
        uint64_t v79 = *(void *)(v9 + 72);
        sub_100988768(v44 + v79 * v37, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
      }
      Hasher.init(_seed:)();
      sub_100988768(v34, v33, type metadata accessor for CRLAssetReferrerIdentifier);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v45 = v33 + *(int *)(sub_1005057FC(&qword_101674240) + 48);
        uint64_t v46 = v73;
        uint64_t v47 = v16;
        uint64_t v48 = v9;
        uint64_t v49 = v23;
        uint64_t v50 = v75;
        (*v70)(v73, v33, v75);
        uint64_t v51 = v74;
        sub_100988838(v45, v74, type metadata accessor for CRLBoardIdentifier);
        Hasher._combine(_:)(1uLL);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v52 = v51;
        uint64_t v34 = (uint64_t)v77;
        sub_1009888A0(v52, type metadata accessor for CRLBoardIdentifier);
        uint64_t v53 = v46;
        uint64_t v54 = v50;
        uint64_t v23 = v49;
        uint64_t v9 = v48;
        uint64_t v16 = v47;
        uint64_t v17 = v71;
        uint64_t v15 = v72;
        (*v69)(v53, v54);
      }
      else
      {
        uint64_t v55 = v74;
        sub_100988838(v33, v74, type metadata accessor for CRLBoardIdentifier);
        Hasher._combine(_:)(0);
        sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v56 = v55;
        uint64_t v34 = (uint64_t)v77;
        sub_1009888A0(v56, type metadata accessor for CRLBoardIdentifier);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v57 = -1 << *(unsigned char *)(v25 + 32);
      unint64_t v58 = result & ~v57;
      unint64_t v59 = v58 >> 6;
      if (((-1 << v58) & ~*(void *)(v30 + 8 * (v58 >> 6))) != 0)
      {
        unint64_t v35 = __clz(__rbit64((-1 << v58) & ~*(void *)(v30 + 8 * (v58 >> 6)))) | v58 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v33 = (uint64_t)v78;
      }
      else
      {
        char v60 = 0;
        unint64_t v61 = (unint64_t)(63 - v57) >> 6;
        uint64_t v33 = (uint64_t)v78;
        do
        {
          if (++v59 == v61 && (v60 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v62 = v59 == v61;
          if (v59 == v61) {
            unint64_t v59 = 0;
          }
          v60 |= v62;
          uint64_t v63 = *(void *)(v30 + 8 * v59);
        }
        while (v63 == -1);
        unint64_t v35 = __clz(__rbit64(~v63)) + (v59 << 6);
      }
      uint64_t v36 = v80;
      *(void *)(v30 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
      sub_100988838(v34, *(void *)(v25 + 48) + v36 * v35, type metadata accessor for CRLAssetReferrerIdentifier);
      uint64_t result = sub_100988838((uint64_t)v15, *(void *)(v25 + 56) + v79 * v35, type metadata accessor for CRLBoardIdentifier);
      ++*(void *)(v25 + 16);
      unint64_t v29 = v81;
      int64_t v32 = v82;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v25;
  return result;
}

uint64_t sub_10096EF5C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v45 = a6;
  uint64_t v48 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = *v6;
  sub_1005057FC(a4);
  int v47 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v44 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v42 = v6;
  int64_t v43 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v43) {
      break;
    }
    uint64_t v28 = v44;
    unint64_t v29 = v44[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v29 = v44[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v44[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v43) {
              goto LABEL_34;
            }
            unint64_t v29 = v44[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v20 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = *(void *)(v14 + 48) + v31 * v26;
    if (v47) {
      sub_100988838(v32, (uint64_t)v13, v48);
    }
    else {
      sub_100988768(v32, (uint64_t)v13, v45);
    }
    char v33 = *(unsigned char *)(*(void *)(v14 + 56) + v26);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v35) & ~*(void *)(v21 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v21 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v24 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = sub_100988838((uint64_t)v13, *(void *)(v16 + 48) + v31 * v24, v48);
    *(unsigned char *)(*(void *)(v16 + 56) + v24) = v33;
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v8 = v42;
  uint64_t v28 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v14 + 32);
  if (v41 >= 64) {
    bzero(v28, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v41;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v16;
  return result;
}

uint64_t sub_10096F380(uint64_t a1, int a2)
{
  return sub_10096F394(a1, a2, (uint64_t *)&unk_10169A730, &qword_101688EE8);
}

uint64_t sub_10096F394(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  unint64_t v59 = a3;
  uint64_t v8 = sub_1005057FC(a3);
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v58 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v55 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v4;
  sub_1005057FC(a4);
  int v54 = a2;
  uint64_t v16 = v15;
  uint64_t v17 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v19 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v20 = *(void *)(v15 + 64);
  uint64_t v50 = (void *)(v15 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1 << v19);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v20;
  uint64_t v48 = v4;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  uint64_t v56 = (void (**)(char *, unint64_t, uint64_t))(v12 + 32);
  uint64_t v57 = v11;
  uint64_t v23 = v17 + 64;
  uint64_t result = swift_retain();
  int64_t v25 = 0;
  uint64_t v52 = v16;
  unint64_t v26 = v55;
  while (1)
  {
    if (v22)
    {
      unint64_t v28 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v29 = v28 | (v25 << 6);
      goto LABEL_22;
    }
    int64_t v30 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v49) {
      break;
    }
    uint64_t v31 = v50;
    unint64_t v32 = v50[v30];
    ++v25;
    if (!v32)
    {
      int64_t v25 = v30 + 1;
      if (v30 + 1 >= v49) {
        goto LABEL_34;
      }
      unint64_t v32 = v50[v25];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v49)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v48;
          if ((v54 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v32 = v50[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v25 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_43;
            }
            if (v25 >= v49) {
              goto LABEL_34;
            }
            unint64_t v32 = v50[v25];
            ++v33;
            if (v32) {
              goto LABEL_21;
            }
          }
        }
        int64_t v25 = v33;
      }
    }
LABEL_21:
    unint64_t v22 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v25 << 6);
    unint64_t v26 = v55;
LABEL_22:
    uint64_t v34 = v12;
    uint64_t v35 = *(void *)(v12 + 72);
    unint64_t v36 = *(void *)(v16 + 48) + v35 * v29;
    if (v54)
    {
      (*v56)(v26, v36, v57);
      uint64_t v37 = *(void *)(v16 + 56);
      uint64_t v38 = *(void *)(v53 + 72);
      sub_10051B3EC(v37 + v38 * v29, v58, v59);
    }
    else
    {
      (*v51)(v26, v36, v57);
      uint64_t v39 = *(void *)(v16 + 56);
      uint64_t v38 = *(void *)(v53 + 72);
      sub_100522E9C(v39 + v38 * v29, v58, v59);
    }
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v40 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v41 = result & ~v40;
    unint64_t v42 = v41 >> 6;
    if (((-1 << v41) & ~*(void *)(v23 + 8 * (v41 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v41) & ~*(void *)(v23 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v26 = v55;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v40) >> 6;
      unint64_t v26 = v55;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v45 = v42 == v44;
        if (v42 == v44) {
          unint64_t v42 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v23 + 8 * v42);
      }
      while (v46 == -1);
      unint64_t v27 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(void *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    (*v56)((char *)(*(void *)(v18 + 48) + v35 * v27), (unint64_t)v26, v57);
    uint64_t result = sub_10051B3EC(v58, *(void *)(v18 + 56) + v38 * v27, v59);
    ++*(void *)(v18 + 16);
    uint64_t v16 = v52;
    uint64_t v12 = v34;
  }
  swift_release();
  uint64_t v6 = v48;
  uint64_t v31 = v50;
  if ((v54 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v47 = 1 << *(unsigned char *)(v16 + 32);
  if (v47 >= 64) {
    bzero(v31, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v31 = -1 << v47;
  }
  *(void *)(v16 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v18;
  return result;
}

uint64_t sub_10096F874(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688FE0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    int64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        unint64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v19 = v33[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 8 * v17;
      Swift::UInt v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10096FB44(uint64_t a1, char a2)
{
  return sub_100971340(a1, a2, &qword_101688FC8);
}

uint64_t sub_10096FB50(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  char v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v35 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    unint64_t v19 = (void *)(v6 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    Swift::UInt v22 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
    uint64_t v23 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v17);
    if (v36)
    {
      sub_100575CE8(v23, v37);
    }
    else
    {
      sub_100522D7C((uint64_t)v23, (uint64_t)v37);
      id v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v25 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = v25 & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)sub_100575CE8(v37, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v19 = (void *)(v6 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v6 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_10096FE88(uint64_t a1, int a2)
{
  return sub_10095F760(a1, a2, &qword_101688F80);
}

uint64_t sub_10096FE94(uint64_t a1, int a2)
{
  return sub_10096BE0C(a1, a2, type metadata accessor for CRLBoardItemPeerSyncUpdate, &qword_101688F78, type metadata accessor for CRLBoardItemPeerSyncUpdate, type metadata accessor for CRLBoardItemPeerSyncUpdate);
}

uint64_t sub_10096FEDC(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v47 = a6;
  uint64_t v9 = v6;
  uint64_t v11 = a3(0);
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8, v12);
  int64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = *v6;
  sub_1005057FC(a4);
  int v49 = a2;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v46 = (void *)(v15 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  unint64_t v44 = v6;
  int64_t v45 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  while (1)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v45) {
      break;
    }
    char v29 = v46;
    unint64_t v30 = v46[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v30 = v46[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v9 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v46[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v45) {
              goto LABEL_34;
            }
            unint64_t v30 = v46[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    char v32 = *(unsigned char *)(*(void *)(v15 + 48) + v27);
    uint64_t v33 = *(void *)(v48 + 72);
    uint64_t v34 = *(void *)(v15 + 56) + v33 * v27;
    if (v49) {
      sub_100988838(v34, (uint64_t)v14, a5);
    }
    else {
      sub_100988768(v34, (uint64_t)v14, v47);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v22 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v36) & ~*(void *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v22 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v25 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(unsigned char *)(*(void *)(v17 + 48) + v25) = v32;
    uint64_t result = sub_100988838((uint64_t)v14, *(void *)(v17 + 56) + v33 * v25, a5);
    ++*(void *)(v17 + 16);
  }
  swift_release();
  uint64_t v9 = v44;
  char v29 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v15 + 32);
  if (v42 >= 64) {
    bzero(v29, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v29 = -1 << v42;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v9 = v17;
  return result;
}

uint64_t sub_1009702B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688F60);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v31 = v2;
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v32 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v32 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v31;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1009705D0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v47 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688FA8);
  int v48 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v45 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v44) {
      break;
    }
    int64_t v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v44) {
              goto LABEL_34;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v47 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v48)
    {
      sub_100988838(v28, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      char v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = (void *)v29[1];
    }
    else
    {
      sub_100988768(v28, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = (void *)v32[1];
      id v33 = v30;
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v19 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_100988838((uint64_t)v8, *(void *)(v11 + 48) + v27 * v19, type metadata accessor for CRLBoardIdentifier);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    void *v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v43;
  int64_t v24 = v45;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v9 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v41;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100970A44(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1005057FC(&qword_101688FA0);
  int v41 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v39 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  char v37 = v2;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    int64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v38) {
              goto LABEL_34;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v40 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if (v41) {
      sub_100988838(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    else {
      sub_100988768(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    }
    char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_100988838((uint64_t)v8, *(void *)(v11 + 48) + v26 * v19, type metadata accessor for CRLBoardIdentifier);
    *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  int64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v36;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100970E90(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v42 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_1005057FC(a3);
  int v43 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v41 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  BOOL v39 = v3;
  int64_t v40 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v40) {
      break;
    }
    int64_t v25 = v41;
    unint64_t v26 = v41[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v26 = v41[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v40) {
              goto LABEL_34;
            }
            unint64_t v26 = v41[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v42 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v43)
    {
      sub_100988838(v29, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      sub_100988768(v29, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v28 * v21, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v5 = v39;
  int64_t v25 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_1009712EC(uint64_t a1, int a2)
{
  return sub_100965358(a1, a2, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_101688E68, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
}

uint64_t sub_100971334(uint64_t a1, char a2)
{
  return sub_100971340(a1, a2, &qword_101688B60);
}

uint64_t sub_100971340(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1005057FC(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  BOOL v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    unint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  int64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100971614(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005057FC(&qword_101688F30);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    int64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    int v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      char v29 = *(unsigned char *)(*(void *)(v10 + 56) + v22);
      sub_100988954((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(unsigned char *)(*(void *)(v12 + 56) + v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100971A38(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1005057FC(&qword_101688F20);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v43 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int v41 = v2;
  int64_t v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v43 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v43 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v43 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v42) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v43 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (v44)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v47 = *(void *)(v25 + 32);
      long long v45 = v26;
      long long v46 = v27;
      uint64_t v28 = (id *)(*(void *)(v5 + 56) + 24 * v20);
      id v29 = *v28;
      id v30 = v28[1];
      id v31 = v28[2];
    }
    else
    {
      sub_10050BF84(v25, (uint64_t)&v45);
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v20;
      id v29 = *(id *)v32;
      id v30 = *(id *)(v32 + 8);
      id v31 = *(id *)(v32 + 16);
      sub_100988278(*(id *)v32, v30, v31);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v33 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    long long v16 = v45;
    long long v17 = v46;
    *(void *)(v15 + 32) = v47;
    *(_OWORD *)uint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 56) + 24 * v14);
    *unint64_t v18 = v29;
    v18[1] = v30;
    v18[2] = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100971D88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v29 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  int64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v4;
  unint64_t v16 = sub_100955FC8(a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v5;
    if (v20)
    {
LABEL_8:
      unint64_t v23 = (uint64_t *)(v22[7] + 16 * v16);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v25 = v29;
      *unint64_t v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_10097BB14();
    goto LABEL_7;
  }
  sub_10095DFBC(v19, a4 & 1);
  unint64_t v26 = sub_100955FC8(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  unint64_t v22 = *v5;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_10097A018(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t sub_100971F40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1009561F4(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10097BDBC();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_unknownObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10095E3E8(v15, a4 & 1);
  unint64_t v21 = sub_1009561F4(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    type metadata accessor for CRLTransactableHashableWrapper();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  BOOL v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  *(void *)(v18[6] + 8 * v12) = a3;
  unint64_t v23 = (void *)(v18[7] + 16 * v12);
  *unint64_t v23 = a1;
  v23[1] = a2;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_retain();
}

_OWORD *sub_1009720A8(_OWORD *a1, char a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100956360(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10097BF7C();
      goto LABEL_7;
    }
    sub_10095E800(v13, a3 & 1);
    unint64_t v19 = sub_100956360(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v17);
    return sub_100575CE8(a1, v17);
  }
LABEL_13:

  return sub_10097A0D8(v10, a2, a1, v16);
}

uint64_t sub_1009721E4(uint64_t a1, char a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100956360(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14) {
      return sub_1006063BC(a1, v16[7] + 32 * v10, &qword_101672BF0);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10097C13C();
    goto LABEL_7;
  }
  sub_10095EC20(v13, a3 & 1);
  unint64_t v18 = sub_100956360(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v18;
  char v16 = *v4;
  if (v14) {
    return sub_1006063BC(a1, v16[7] + 32 * v10, &qword_101672BF0);
  }
LABEL_11:

  return sub_10097A140(v10, a2, a1, v16);
}

uint64_t sub_100972310(uint64_t a1, Swift::UInt a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1009564C0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14) {
      return sub_1006063BC(a1, v16[7] + 32 * v10, &qword_101672BF0);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10097C320();
    goto LABEL_7;
  }
  sub_10095F04C(v13, a3 & 1);
  unint64_t v18 = sub_1009564C0(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for CRLChangeProperty(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v18;
  char v16 = *v4;
  if (v14) {
    return sub_1006063BC(a1, v16[7] + 32 * v10, &qword_101672BF0);
  }
LABEL_11:

  return sub_10097A1B4(v10, a2, a1, v16);
}

void sub_10097243C(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100972448(uint64_t a1, char a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100956360(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10097C528();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_10095F348(result, a3 & 1);
  uint64_t result = sub_100956360(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100972580(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101688F00);
}

uint64_t sub_10097258C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t v23 = sub_1005057FC((uint64_t *)&unk_101684F90);
      return sub_1006063BC(a1, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v15, (uint64_t *)&unk_101684F90);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100984D48((uint64_t *)&unk_101684F90, &qword_101688E28);
    goto LABEL_7;
  }
  sub_10096F394(v18, a3 & 1, (uint64_t *)&unk_101684F90, &qword_101688E28);
  unint64_t v25 = sub_100955FC8(a2);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097A228(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_100972778(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_1016891D8);
}

uint64_t sub_100972784(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v28 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_100955FC8(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_100985420(a4);
    goto LABEL_7;
  }
  sub_10095F760(v19, a3 & 1, a4);
  unint64_t v25 = sub_100955FC8(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  return sub_10097B598(v16, (uint64_t)v13, v28, v22, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100972954(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101689020);
}

uint64_t sub_100972960(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100975AFC(a1, a2, a3, (uint64_t *)&unk_10169A250);
}

uint64_t sub_10097296C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      *(void *)(v21[7] + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10097C704();
    goto LABEL_7;
  }
  sub_10095FBA0(result, a3 & 1);
  uint64_t result = sub_100955FC8(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = result;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097A310(v15, (uint64_t)v12, a1, v21);
}

_OWORD *sub_100972B08(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10095647C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10097C998();
      goto LABEL_7;
    }
    sub_10095FFC4(v13, a3 & 1);
    unint64_t v19 = sub_10095647C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10050BF84(a2, (uint64_t)v21);
      return sub_10097A3C8(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v17 = (_OWORD *)(v16[7] + 32 * v10);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v17);

  return sub_100575CE8(a1, v17);
}

void sub_100972C54(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_10095657C(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10098315C((uint64_t (*)(void))&type metadata accessor for URL, &qword_101689210);
    goto LABEL_7;
  }
  sub_1009602DC(v18, a3 & 1);
  unint64_t v23 = sub_10095657C(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v23;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  sub_10097B598(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(void))&type metadata accessor for URL);
}

_OWORD *sub_100972E2C(_OWORD *a1, void *a2, char a3)
{
  return sub_100978F98(a1, a2, a3, &qword_101689008, type metadata accessor for Key);
}

uint64_t sub_100972E4C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100955F14(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10097CB80();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_100960700(result, a3 & 1);
  uint64_t result = sub_100955F14(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100972F88(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_100955FC8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10097CFAC();
      goto LABEL_7;
    }
    sub_100960D80(v17, a3 & 1);
    unint64_t v24 = sub_100955FC8(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v11, a2, v8);
      return sub_10097A444(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v27 + 40);
  unint64_t v22 = v20[7] + *(void *)(v27 + 72) * v14;

  return v21(v22, a1, v8);
}

uint64_t sub_100973174(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101688F38);
}

uint64_t sub_100973180(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101689050);
}

id sub_10097318C(uint64_t a1, void *a2, char a3)
{
  return sub_10097603C(a1, a2, a3, (uint64_t (*)(void *))sub_100956528, &qword_1016891A8, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);
}

uint64_t sub_1009731C0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t v23 = type metadata accessor for CRLRealTimeEnter(0);
      return sub_1009887D0(a1, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v15, type metadata accessor for CRLRealTimeEnter);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100982BD4(type metadata accessor for CRLRealTimeEnter, &qword_1016891A0, type metadata accessor for CRLRealTimeEnter, type metadata accessor for CRLRealTimeEnter);
    goto LABEL_7;
  }
  sub_10096BE0C(v18, a3 & 1, type metadata accessor for CRLRealTimeEnter, &qword_1016891A0, type metadata accessor for CRLRealTimeEnter, type metadata accessor for CRLRealTimeEnter);
  unint64_t v25 = sub_100955FC8(a2);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  BOOL v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097B308(v15, (uint64_t)v12, a1, v21, type metadata accessor for CRLRealTimeEnter, type metadata accessor for CRLRealTimeEnter);
}

uint64_t sub_100973444(uint64_t a1, char a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100957468(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10097D308();
      goto LABEL_7;
    }
    sub_100961230(v13, a3 & 1);
    unint64_t v24 = sub_100957468(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = sub_1005057FC(&qword_101674250);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_10097A520(v10, a2, a1, v16);
}

id sub_1009735B0(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10095642C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100986068(&qword_101689000);
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100971340(v12, a3 & 1, &qword_101689000);
  unint64_t v18 = sub_10095642C((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_10050BF48(0, (unint64_t *)&qword_1016792E8);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v23;

  return a2;
}

void sub_100973734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)*v5;
  unint64_t v17 = sub_100955FC8(a4);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v6;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7] + 24 * v17;
      char v25 = *(void **)v24;
      char v26 = *(void **)(v24 + 8);

      uint64_t v27 = v30;
      *(void *)uint64_t v24 = a1;
      *(void *)(v24 + 8) = v27;
      *(void *)(v24 + 16) = v31;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a5 & 1) == 0)
  {
    sub_10097D598();
    goto LABEL_7;
  }
  sub_1009615EC(v20, a5 & 1);
  unint64_t v28 = sub_100955FC8(a4);
  if ((v21 & 1) != (v29 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v28;
  uint64_t v23 = *v6;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, v10);
  sub_10097A5D0(v17, (uint64_t)v14, a1, v30, v31, v23);
}

void sub_100973904(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100955F50(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10097D860();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100961A54(v15, a4 & 1);
  unint64_t v20 = sub_100955F50(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

_OWORD *sub_100973A74(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_1009569E8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_10097DA14();
      goto LABEL_7;
    }
    sub_100961D64(v18, a3 & 1);
    unint64_t v24 = sub_1009569E8(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      unint64_t v15 = v24;
      char v21 = *v4;
      if (v19) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return sub_10097A6A4(v15, (uint64_t)v12, a1, v21);
    }
LABEL_15:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v21 = *v4;
  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v22 = (_OWORD *)(v21[7] + 32 * v15);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v22);

  return sub_100575CE8(a1, v22);
}

uint64_t sub_100973C4C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_10097DCBC();
      goto LABEL_7;
    }
    sub_100962160(v18, a3 & 1);
    unint64_t v29 = sub_100955FC8(a2);
    if ((v19 & 1) == (v30 & 1))
    {
      unint64_t v15 = v29;
      char v21 = *v4;
      if (v19) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return sub_10097A764(v15, (uint64_t)v12, a1, v21);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v21 = *v4;
  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v22 = v21[7];
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v23 - 8);
  char v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  uint64_t v26 = v23;
  uint64_t v27 = v22 + *(void *)(v24 + 72) * v15;

  return v25(v27, a1, v26);
}

id sub_100973E50(char a1, void *a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100956928((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_10097E0AC();
LABEL_7:
    unint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      *(unsigned char *)(v15[7] + v9) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100963008((uint64_t)result, a3 & 1);
  id result = (id)sub_100956928((uint64_t)a2);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_17:
    sub_10050BF48(0, &qword_10167C510);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  unint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  *(void *)(v15[6] + 8 * v9) = a2;
  *(unsigned char *)(v15[7] + v9) = a1 & 1;
  uint64_t v17 = v15[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v19;

  return a2;
}

uint64_t sub_100973FBC(uint64_t a1, unsigned __int16 a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100956B04(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10097E250();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_WORD *)(v16[6] + 2 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1009632D0(result, a3 & 1);
  uint64_t result = sub_100956B04(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1009740F4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101688EF0);
}

void sub_100974100(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100956B4C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10097E3F8();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100963584(v13, a3 & 1);
  unint64_t v18 = sub_100956B4C(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  char v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v20 = v16[6] + 40 * v10;
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a2;
  *(_OWORD *)(v20 + 16) = v21;
  *(void *)(v20 + 32) = *(void *)(a2 + 32);
  *(void *)(v16[7] + 8 * v10) = a1;
  uint64_t v22 = v16[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v24;
  char v25 = *(void **)(a2 + 24);

  id v26 = v25;
}

uint64_t sub_100974274(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100974434(a1, a2, a3, &qword_1016891F0);
}

uint64_t sub_100974280(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    long long v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10097E874();
    goto LABEL_7;
  }
  sub_10096390C(v18, a3 & 1);
  unint64_t v24 = sub_100955FC8(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  long long v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097A310(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_100974428(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100974434(a1, a2, a3, &qword_1016891E8);
}

uint64_t sub_100974434(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10097E60C(type metadata accessor for CRLBoardIdentifier, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_100963D30(v19, a3 & 1, a4);
  unint64_t v25 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  return sub_10097A8B0(v16, (uint64_t)v13, a1, v22, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10097469C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1009746B4(a1, a2, a3, &qword_101688E88);
}

uint64_t sub_1009746A8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1009746B4(a1, a2, a3, &qword_101688E08);
}

uint64_t sub_1009746B4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10097ECC4(type metadata accessor for CRLBoardIdentifier, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_100964574(v19, a3 & 1, type metadata accessor for CRLBoardIdentifier, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  unint64_t v25 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  return sub_10097A974(v16, (uint64_t)v13, a1, v22, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void sub_10097494C(uint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[3];
  uint64_t v28 = a1[2];
  uint64_t v29 = v9;
  int v30 = *((unsigned __int8 *)a1 + 32);
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v3;
  unint64_t v16 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v4;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 40 * v16;
      unint64_t v24 = *(void **)(v23 + 24);
      swift_release();
      swift_release();
      swift_release();

      *(void *)uint64_t v23 = v7;
      *(void *)(v23 + 8) = v8;
      uint64_t v25 = v29;
      *(void *)(v23 + 16) = v28;
      *(void *)(v23 + 24) = v25;
      *(unsigned char *)(v23 + 32) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10097EF2C();
    goto LABEL_7;
  }
  sub_1009649A8(v19, a3 & 1);
  unint64_t v26 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v26;
  uint64_t v22 = *v4;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  v31[0] = v7;
  v31[1] = v8;
  v31[2] = v28;
  uint64_t v31[3] = v29;
  char v32 = v30;
  sub_10097AA20(v16, (uint64_t)v13, (uint64_t)v31, v22);
}

uint64_t sub_100974BA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_10095681C(a3, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v5;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 16 * v16);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v23 = a1;
      v23[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_10097F228();
    goto LABEL_7;
  }
  sub_100964E58(v19, a4 & 1);
  unint64_t v25 = sub_10095681C(a3, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v5;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a3, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  return sub_10097AAF8(v16, (uint64_t)v13, a1, a2, v22);
}

uint64_t sub_100974DA4(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for CRLBoardEntity();
      return sub_1009887D0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097F550((uint64_t (*)(void))type metadata accessor for CRLBoardEntity, &qword_101688E40, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
    goto LABEL_7;
  }
  sub_100965358(v17, a3 & 1, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, &qword_101688E40, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
  unint64_t v24 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B0E0(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
}

uint64_t sub_1009750A0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095697C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100982EFC(type metadata accessor for CRLBoardLibraryViewModel.Folder, &qword_101688E48, type metadata accessor for CRLBoardLibraryViewModel.Folder, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    goto LABEL_7;
  }
  sub_10096583C(result, a3 & 1);
  uint64_t result = sub_10095697C(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  return sub_10097B3FC(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardLibraryViewModel.Folder, type metadata accessor for CRLBoardLibraryViewModel.Folder);
}

void sub_100975280(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100956A4C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097FCB4(type metadata accessor for CRLBoardPreviewImageCache.Item, &qword_1016891E0, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
    goto LABEL_7;
  }
  sub_100965E8C(v17, a3 & 1);
  unint64_t v22 = sub_100956A4C(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardPreviewImageCache.Item);
  sub_10097A974(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

uint64_t sub_10097546C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100955F14(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14) {
      return sub_1006063BC(a1, v16[7] + 8 * v10, &qword_101674258);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10097F864();
    goto LABEL_7;
  }
  sub_100966828(v13, a3 & 1);
  unint64_t v18 = sub_100955F14(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v18;
  BOOL v16 = *v4;
  if (v14) {
    return sub_1006063BC(a1, v16[7] + 8 * v10, &qword_101674258);
  }
LABEL_11:

  return sub_10097AC08(v10, a2, a1, v16);
}

uint64_t sub_100975598(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  unint64_t v8 = sub_100987C40();
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v7 & 1) == 0;
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v12 = v7;
  uint64_t v13 = *(void *)(v6 + 24);
  if (v13 < v11 || (a2 & 1) == 0)
  {
    if (v13 >= v11 && (a2 & 1) == 0)
    {
      sub_10097FA34();
      goto LABEL_7;
    }
    sub_100966B04(v11, a2 & 1);
    uint64_t v22 = sub_100987C40();
    if ((v12 & 1) == (v23 & 1))
    {
      unint64_t v8 = v22;
      uint64_t v14 = *v3;
      if (v12) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v14 = *v3;
  if (v12)
  {
LABEL_8:
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
    uint64_t v19 = v16;
    uint64_t v20 = v15 + *(void *)(v17 + 72) * v8;
    return v18(v20, a1, v19);
  }
LABEL_13:

  return sub_10097AC80(v8, a1, v14);
}

uint64_t sub_1009756E4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_1016891D0);
}

uint64_t sub_1009756F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100955F50(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10097FF18();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100966EB8(result, a4 & 1);
  uint64_t result = sub_100955F50(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void sub_100975854(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v9 = (void *)*v4;
  unint64_t v11 = sub_100956CAC((uint64_t)a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 < v14 || (a4 & 1) == 0)
  {
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      sub_1009800C8();
      goto LABEL_9;
    }
    sub_1009671C4(v14, a4 & 1);
    unint64_t v17 = sub_100956CAC((uint64_t)a3);
    if ((v15 & 1) == (v18 & 1))
    {
      unint64_t v11 = v17;
      goto LABEL_9;
    }
LABEL_15:
    sub_10050BF48(0, &qword_10167BED0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_9:
  int v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v15)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = v20[7] + 16 * v11;
    sub_100541080(*(void **)v22, *(unsigned char *)(v22 + 8));
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_10097AD6C(v11, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_1009759B4(uint64_t a1, Swift::UInt a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1009564C0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100980630();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v16[6] + v20) = a2;
    *(void *)(v16[7] + v20) = a1;
    uint64_t v21 = v16[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_1009679FC(v13, a3 & 1);
  unint64_t v18 = sub_1009564C0(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100975AF0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100975AFC(a1, a2, a3, &qword_1016890A0);
}

uint64_t sub_100975AFC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100955F14(a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1009809A4(a4);
LABEL_7:
    unint64_t v18 = (void *)*v6;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v21 = 8 * v12;
    *(void *)(v18[6] + v21) = a2;
    *(void *)(v18[7] + v21) = a1;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_100967CD0(result, a3 & 1, a4);
  uint64_t result = sub_100955F14(a2);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    unint64_t v18 = (void *)*v6;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100975C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100955F14(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      swift_release();
      unint64_t result = swift_release();
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1009807E0();
    goto LABEL_7;
  }
  sub_100967F84(v17, a5 & 1);
  unint64_t v23 = sub_100955F14(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_10097AE34(v14, a4, a1, a2, a3, v20);
}

uint64_t sub_100975D98(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100955F14(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1009809A4(&qword_101688EA0);
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_100968260(result, a3 & 1);
  uint64_t result = sub_100955F14(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100975EDC(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100987CC0();
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100980D08();
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = (void *)(*(void *)(v16 + 56) + 16 * v10);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v17 = a1;
      v17[1] = a2;
      return result;
    }
LABEL_11:
    *(void *)(v16 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v19 = (void *)(*(void *)(v16 + 56) + 16 * v10);
    void *v19 = a1;
    v19[1] = a2;
    uint64_t v20 = *(void *)(v16 + 16);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      *(void *)(v16 + 16) = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_10096884C(result, a3 & 1);
  uint64_t result = sub_100987CC0();
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = *v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_100976008(uint64_t a1, void *a2, char a3)
{
  return sub_10097603C(a1, a2, a3, (uint64_t (*)(void *))sub_100956EE4, &qword_1016890E8, (void (*)(void))type metadata accessor for CRLContainerItem);
}

id sub_10097603C(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), uint64_t *a5, void (*a6)(void))
{
  unint64_t v10 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = a4(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100986068(a5);
LABEL_7:
    BOOL v21 = (void *)*v10;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100971340(v18, a3 & 1, a5);
  uint64_t v24 = a4(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_17:
    a6(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  BOOL v21 = (void *)*v10;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  v21[(v15 >> 6) + 8] |= 1 << v15;
  uint64_t v26 = 8 * v15;
  *(void *)(v21[6] + v26) = a2;
  *(void *)(v21[7] + v26) = a1;
  uint64_t v27 = v21[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v21[2] = v29;

  return a2;
}

uint64_t sub_1009761D8(long long *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 48 * v15;
      unint64_t v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      swift_bridgeObjectRelease();

      uint64_t result = swift_bridgeObjectRelease();
      long long v26 = a1[1];
      *(_OWORD *)uint64_t v22 = *a1;
      *(_OWORD *)(v22 + 16) = v26;
      *(_OWORD *)(v22 + 32) = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100980EC0();
    goto LABEL_7;
  }
  sub_100968B68(v18, a3 & 1);
  unint64_t v27 = sub_100955FC8(a2);
  if ((v19 & 1) != (v28 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v27;
  BOOL v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097AE84(v15, (uint64_t)v12, a1, v21);
}

_OWORD *sub_1009763A8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100955F50(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1009813B4();
      goto LABEL_7;
    }
    sub_10096932C(v15, a4 & 1);
    unint64_t v21 = sub_100955F50(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (_OWORD *)(v18[7] + 32 * v12);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v19);
    return sub_100575CE8(a1, v19);
  }
LABEL_13:
  sub_10097AF50(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_1009764FC(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      unint64_t v22 = v21[7] + (v15 << 6);
      unint64_t v23 = *(void **)(v22 + 24);
      uint64_t v24 = *(void **)(v22 + 32);
      swift_release();
      swift_release();
      swift_release();

      long long v25 = a1[1];
      *(_OWORD *)unint64_t v22 = *a1;
      *(_OWORD *)(v22 + 16) = v25;
      long long v26 = a1[3];
      *(_OWORD *)(v22 + 32) = a1[2];
      *(_OWORD *)(v22 + 48) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10098173C();
    goto LABEL_7;
  }
  sub_10096991C(v18, a3 & 1);
  unint64_t v27 = sub_100955FC8(a2);
  if ((v19 & 1) != (v28 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v27;
  unint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  sub_10097AFBC(v15, (uint64_t)v12, a1, v21);
}

void sub_1009766D0()
{
  sub_100953B64(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t (*sub_1009766DC())()
{
  return sub_100953FD0(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1009766E8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101689168);
}

void sub_1009766F4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_100955FC8(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = v27;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10098315C((uint64_t (*)(void))&type metadata accessor for UUID, a4);
    goto LABEL_7;
  }
  sub_100969DDC(v19, a3 & 1, a4);
  unint64_t v24 = sub_100955FC8(a2);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  unint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  sub_10097B598(v16, (uint64_t)v13, v27, v22, (uint64_t (*)(void))&type metadata accessor for UUID);
}

id sub_1009768D8(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  char v7 = (void *)*v3;
  unint64_t v9 = sub_100956E24((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    char v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t v17 = type metadata accessor for CRLThrottleInfo(0);
      return (id)sub_1009887D0(a1, v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, type metadata accessor for CRLThrottleInfo);
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1009823C4(type metadata accessor for CRLThrottleInfo, &qword_101689110, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
    goto LABEL_7;
  }
  sub_10096B124(v12, a3 & 1, type metadata accessor for CRLThrottleInfo, &qword_101689110, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
  unint64_t v19 = sub_100956E24((uint64_t)a2);
  if ((v13 & 1) != (v20 & 1))
  {
LABEL_15:
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v19;
  char v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10097B1C8(v9, (uint64_t)a2, a1, v15, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);

  return a2;
}

void sub_100976AF4(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100956CAC((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100981CF0(&qword_101688F68);
LABEL_7:
    char v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10096A584(v12, a3 & 1, &qword_101688F68);
  unint64_t v17 = sub_100956CAC((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_10050BF48(0, &qword_10167BED0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  char v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_100976C78(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for CRLZoneSyncResultScenarios();
      return sub_1009887D0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097F550((uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, &qword_101689090, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
    goto LABEL_7;
  }
  sub_100965358(v17, a3 & 1, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, &qword_101689090, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
  unint64_t v24 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B0E0(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
}

id sub_100976F74(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100956E24((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100981E90();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_release();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10096A854(v12, a3 & 1);
  unint64_t v18 = sub_100956E24((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v23;

  return a2;
}

uint64_t sub_1009770E8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101689120);
}

id sub_1009770F4(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100956E24((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t v17 = type metadata accessor for CRLZoneSyncResultScenarios();
      return (id)sub_1009887D0(a1, v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1009823C4((uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, &qword_101689100, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
    goto LABEL_7;
  }
  sub_10096B124(v12, a3 & 1, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, &qword_101689100, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);
  unint64_t v19 = sub_100956E24((uint64_t)a2);
  if ((v13 & 1) != (v20 & 1))
  {
LABEL_15:
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v19;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10097B1C8(v9, (uint64_t)a2, a1, v15, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios, (uint64_t (*)(void))type metadata accessor for CRLZoneSyncResultScenarios);

  return a2;
}

id sub_100977310(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100956CAC((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100982624();
      goto LABEL_7;
    }
    sub_10096B4B0(v12, a3 & 1);
    unint64_t v18 = sub_100956CAC((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    sub_10050BF48(0, &qword_10167BED0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = v15[7] + 40 * v9;
    return (id)sub_100988324(a1, v16);
  }
LABEL_13:
  sub_10097B270(v9, (uint64_t)a2, a1, v15);

  return a2;
}

void sub_10097745C(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1009564C0(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1009829DC();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;

      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    BOOL v22 = (void *)(v18[7] + 16 * v12);
    *BOOL v22 = a1;
    v22[1] = a2;
    uint64_t v23 = v18[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_10096BAE4(v15, a4 & 1);
  unint64_t v20 = sub_1009564C0(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    unint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  _s3__C4CodeOMa_0(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10097759C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    char v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t v23 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
      return sub_1009887D0(a1, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v15, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100982BD4(_s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_101689030, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
    goto LABEL_7;
  }
  sub_10096BE0C(v18, a3 & 1, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_101689030, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
  unint64_t v25 = sub_100955FC8(a2);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  char v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097B308(v15, (uint64_t)v12, a1, v21, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
}

uint64_t sub_100977820(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100982EFC(type metadata accessor for CRLBoardIdentifier, &qword_101688B40, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_10096C300(result, a3 & 1);
  uint64_t result = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B3FC(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100977A78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100955F14(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1009833F4();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = sub_100510084(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    char v21 = (void *)(v18[7] + 16 * v12);
    *char v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10096C74C(result, a4 & 1);
  uint64_t result = sub_100955F14(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100977BB8(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1009835A4();
      goto LABEL_7;
    }
    sub_10096CA14(v17, a3 & 1);
    unint64_t v28 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      return sub_10097B4A8(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100977E0C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100972784(a1, a2, a3, &qword_101689048);
}

uint64_t sub_100977E18(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097ECC4(type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689058, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
    goto LABEL_7;
  }
  sub_100964574(v17, a3 & 1, type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689058, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  unint64_t v23 = sub_10095681C(a2, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  return sub_10097A974(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
}

uint64_t sub_1009780B4(char a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100984A90(type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689060, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
    goto LABEL_7;
  }
  sub_10096EF5C(result, a3 & 1, type metadata accessor for CRLGloballyScopedBoardIdentifier, &qword_101689060, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  uint64_t result = sub_10095681C(a2, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  return sub_10097B808(v14, (uint64_t)v11, a1 & 1, v20, type metadata accessor for CRLGloballyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
}

void sub_100978348(uint64_t a1, unsigned __int8 a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100957468(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100983A94();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_10096D254(v13, a3 & 1);
  unint64_t v18 = sub_100957468(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100978480(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100955F50(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100983C38();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10096D520(v15, a4 & 1);
  unint64_t v20 = sub_100955F50(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t sub_1009785F0(uint64_t a1, char a2, double a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      unint64_t v20 = *v4;
      if (v18)
      {
LABEL_8:
        *(double *)(v20[7] + 8 * v14) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a2 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1009841B8();
      goto LABEL_7;
    }
    sub_10096DE9C(result, a2 & 1);
    uint64_t result = sub_10095681C(a1, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    if ((v18 & 1) == (v21 & 1))
    {
      unint64_t v14 = result;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100988768(a1, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      return sub_10097B6A4(v14, (uint64_t)v11, v20, a3);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1009787DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100955F50(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100984448((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101688EE0);
      goto LABEL_7;
    }
    sub_10096E2FC(v15, a4 & 1, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_101688EE0);
    unint64_t v26 = sub_100955F50(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for UUID();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_10097B758(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100978994(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1009746B4(a1, a2, a3, &qword_101688E18);
}

uint64_t sub_1009789A0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1009576C8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for CRLBoardIdentifier(0);
      return sub_1009887D0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for CRLBoardIdentifier);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100984760();
    goto LABEL_7;
  }
  sub_10096E73C(v17, a3 & 1);
  unint64_t v24 = sub_1009576C8(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLAssetReferrerIdentifier);
  return sub_10097B0E0(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLAssetReferrerIdentifier, type metadata accessor for CRLAssetReferrerIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100978B9C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1009746B4(a1, a2, a3, &qword_101689098);
}

uint64_t sub_100978BA8(char a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100984A90(type metadata accessor for CRLBoardIdentifier, &qword_1016890F0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_10096EF5C(result, a3 & 1, type metadata accessor for CRLBoardIdentifier, &qword_1016890F0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t result = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B808(v14, (uint64_t)v11, a1 & 1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100978E3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1009746B4(a1, a2, a3, &qword_101689088);
}

uint64_t sub_100978E48(uint64_t a1, Swift::UInt a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1009564C0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1009850AC();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_10096F874(result, a3 & 1);
  uint64_t result = sub_1009564C0(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_100978F78(_OWORD *a1, void *a2, char a3)
{
  return sub_100978F98(a1, a2, a3, &qword_101688FB8, type metadata accessor for Name);
}

_OWORD *sub_100978F98(_OWORD *a1, void *a2, char a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v8 = (void **)v5;
  uint64_t v11 = (void *)*v5;
  unint64_t v13 = sub_1009560A0((uint64_t)a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100985248(a4);
      goto LABEL_7;
    }
    sub_10096FB50(v16, a3 & 1, a4);
    unint64_t v22 = sub_1009560A0((uint64_t)a2);
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v8;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    a5(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v8;
  if (v17)
  {
LABEL_8:
    BOOL v20 = (_OWORD *)(v19[7] + 32 * v13);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v20);
    return sub_100575CE8(a1, v20);
  }
LABEL_13:
  sub_10097B8B4(v13, (uint64_t)a2, a1, v19);

  return a2;
}

id sub_1009790FC(uint64_t a1, void *a2, char a3)
{
  return sub_10097603C(a1, a2, a3, (uint64_t (*)(void *))sub_1009577D4, &qword_101688F90, (void (*)(void))type metadata accessor for CRLSceneInfo);
}

uint64_t sub_100979130(uint64_t a1, char a2, char a3)
{
  unint64_t v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1009571B8(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for CRLSyncScheduledActivity(0);
        return sub_1009887D0(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for CRLSyncScheduledActivity);
      }
      return sub_10097B91C(v10, v7, a1, v16, type metadata accessor for CRLSyncScheduledActivity, type metadata accessor for CRLSyncScheduledActivity);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1009856FC(type metadata accessor for CRLSyncScheduledActivity, &qword_101688F58, type metadata accessor for CRLSyncScheduledActivity, type metadata accessor for CRLSyncScheduledActivity);
      goto LABEL_7;
    }
    sub_10096FEDC(v13, a3 & 1, type metadata accessor for CRLSyncScheduledActivity, &qword_101688F58, type metadata accessor for CRLSyncScheduledActivity, type metadata accessor for CRLSyncScheduledActivity);
    unint64_t v20 = sub_1009571B8(v7);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_10097B91C(v10, v7, a1, v16, type metadata accessor for CRLSyncScheduledActivity, type metadata accessor for CRLSyncScheduledActivity);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100979314(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v9 = a3 & 1;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1009571B8(a3 & 1);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_release();
      uint64_t *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100985954();
    goto LABEL_7;
  }
  sub_1009702B0(v15, a4 & 1);
  unint64_t v21 = sub_1009571B8(v9);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_10097B9C8(v12, v9, a1, a2, v18);
}

uint64_t sub_100979444(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for CRLBoardViewModelMetadata(0);
      return sub_1009887D0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for CRLBoardViewModelMetadata);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata, &qword_101688E50, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
    goto LABEL_7;
  }
  sub_100965358(v17, a3 & 1, type metadata accessor for CRLBoardViewModelMetadata, &qword_101688E50, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
  unint64_t v24 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B0E0(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
}

void sub_100979740(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10097974C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
      return sub_1009887D0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_101688E68, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    goto LABEL_7;
  }
  sub_100965358(v17, a3 & 1, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_101688E68, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
  unint64_t v24 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  return sub_10097B0E0(v14, (uint64_t)v11, a1, v20, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
}

id sub_100979A48(uint64_t a1, void *a2, char a3)
{
  return sub_10097603C(a1, a2, a3, (uint64_t (*)(void *))sub_100957828, &qword_101688B60, (void (*)(void))type metadata accessor for CRLWPListStyle);
}

uint64_t sub_100979A7C(char a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_100955FC8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      *(unsigned char *)(v21[7] + v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10098620C();
    goto LABEL_7;
  }
  sub_100971614(result, a3 & 1);
  uint64_t result = sub_100955FC8(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = result;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10097BA5C(v15, (uint64_t)v12, a1, v21);
}

void sub_100979C18(void *a1, void *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10095647C(a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10098649C();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void **)(v20[7] + 24 * v14);
      sub_10057ADF4(*v21, v21[1], v21[2]);
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return;
    }
    goto LABEL_11;
  }
  sub_100971A38(v17, a5 & 1);
  unint64_t v22 = sub_10095647C(a4);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_16:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10050BF84(a4, (uint64_t)v31);
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v24 = v20[6] + 40 * v14;
  uint64_t v25 = v32;
  long long v26 = v31[1];
  *(_OWORD *)uint64_t v24 = v31[0];
  *(_OWORD *)(v24 + 16) = v26;
  *(void *)(v24 + 32) = v25;
  char v27 = (void *)(v20[7] + 24 * v14);
  *char v27 = a1;
  v27[1] = a2;
  v27[2] = a3;
  uint64_t v28 = v20[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  void v20[2] = v30;
}

void sub_100979DA4(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_100979DB0(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v4;
  unint64_t v16 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10097FCB4(type metadata accessor for CRLBoardIdentifier, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_100970E90(v19, a3 & 1, a4);
  unint64_t v24 = sub_10095681C(a2, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  unint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100988768(a2, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  sub_10097A974(v16, (uint64_t)v13, a1, v22, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10097A018(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  char v13 = (void *)(a5[7] + 16 * a1);
  *char v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

_OWORD *sub_10097A0D8(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_100575CE8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097A140(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_10051B3EC(a3, a4[7] + 32 * a1, &qword_101672BF0);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097A1B4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10051B3EC(a3, a4[7] + 32 * a1, &qword_101672BF0);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097A228(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101684F90);
  uint64_t result = sub_10051B3EC(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t *)&unk_101684F90);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_10097A310(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_10097A3C8(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100575CE8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10097A444(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10097A520(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = sub_1005057FC(&qword_101674250);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_10097A5D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a6[6];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  BOOL v15 = (void *)(a6[7] + 24 * a1);
  void *v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

_OWORD *sub_10097A6A4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_100575CE8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10097A764(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_10097A858(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097A8B0(a1, a2, a3, a4, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

uint64_t sub_10097A884(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097A8B0(a1, a2, a3, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10097A8B0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100988838(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10097A95C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097B598(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10097A974(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100988838(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10097AA20(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  char v10 = *(unsigned char *)(a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t result = sub_100988838(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  uint64_t v14 = a4[7] + 40 * a1;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v9;
  *(unsigned char *)(v14 + 32) = v10;
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_10097AAF8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t result = sub_100988838(a2, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_10097ABB4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097B0E0(a1, a2, a3, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
}

uint64_t sub_10097AC08(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10051B3EC(a3, a4[7] + 8 * a1, &qword_101674258);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097AC80(unint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v6 = *(void *)(a3 + 56);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6 + *(void *)(*(void *)(v7 - 8) + 72) * a1, a2, v7);
  uint64_t v9 = *(void *)(a3 + 16);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 16) = v11;
  }
  return result;
}

unint64_t sub_10097AD24(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_10097AD6C(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(unsigned char *)(v5 + 8) = a4 & 1;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10097ADBC(unint64_t a1, char a2, uint64_t a3, uint64_t a4, long long *a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = a6[6] + 24 * a1;
  *(unsigned char *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  uint64_t result = sub_10053974C(a5, a6[7] + 40 * a1);
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

unint64_t sub_10097AE34(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  *uint64_t v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t sub_10097AE84(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v11 = (_OWORD *)(a4[7] + 48 * a1);
  long long v12 = a3[2];
  long long v13 = *a3;
  v11[1] = a3[1];
  void v11[2] = v12;
  *uint64_t v11 = v13;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

_OWORD *sub_10097AF50(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100575CE8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10097AFBC(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v11 = (_OWORD *)(a4[7] + (a1 << 6));
  long long v12 = a3[3];
  void v11[2] = a3[2];
  v11[3] = v12;
  long long v13 = a3[1];
  *uint64_t v11 = *a3;
  v11[1] = v13;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10097B084(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097B1C8(a1, a2, a3, a4, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
}

uint64_t sub_10097B0B0(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  return sub_10097B91C(a1, a2, a3, a4, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
}

uint64_t sub_10097B0E0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v15 = a4[6];
  uint64_t v16 = a5(0);
  sub_100988838(a2, v15 + *(void *)(*(void *)(v16 - 8) + 72) * a1, a6);
  uint64_t v17 = a4[7];
  uint64_t v18 = a7(0);
  uint64_t result = sub_100988838(a3, v17 + *(void *)(*(void *)(v18 - 8) + 72) * a1, a8);
  uint64_t v20 = a4[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    a4[2] = v22;
  }
  return result;
}

uint64_t sub_10097B1C8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v10 = a4[7];
  uint64_t v11 = a5(0);
  uint64_t result = sub_100988838(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a6);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_10097B270(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1009882C8(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097B2DC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10097B308(a1, a2, a3, a4, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
}

uint64_t sub_10097B308(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a4[6];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  uint64_t v14 = a4[7];
  uint64_t v15 = a5(0);
  uint64_t result = sub_100988838(a3, v14 + *(void *)(*(void *)(v15 - 8) + 72) * a1, a6);
  uint64_t v17 = a4[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a4[2] = v19;
  }
  return result;
}

uint64_t sub_10097B3FC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100988838(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10097B4A8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CRLBoardIdentifier(0);
  sub_100988838(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_10097B598(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

unint64_t sub_10097B654(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a7[6] + 32 * result;
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  *(unsigned char *)(v7 + 24) = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t sub_10097B6A4(unint64_t a1, uint64_t a2, void *a3, double a4)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a3[6];
  uint64_t v9 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t result = sub_100988838(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  *(double *)(a3[7] + 8 * a1) = a4;
  uint64_t v11 = a3[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a3[2] = v13;
  }
  return result;
}

uint64_t sub_10097B758(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_10097B808(unint64_t a1, uint64_t a2, char a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100988838(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

_OWORD *sub_10097B8B4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100575CE8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10097B91C(unint64_t a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2 & 1;
  uint64_t v10 = a4[7];
  uint64_t v11 = a5(0);
  uint64_t result = sub_100988838(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a6);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_10097B9C8(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a5[6] + result) = a2 & 1;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_10097BA14(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_10097BA5C(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_10097BB14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  BOOL v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688ED8);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v26 = v7 + 64;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v28 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v17 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    uint64_t v19 = 16 * v17;
    unint64_t v20 = *(void *)(v9 + 48) + v18;
    BOOL v21 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    long long v29 = *(_OWORD *)(*(void *)(v7 + 56) + v19);
    v21(v20, v6, v2);
    *(_OWORD *)(*(void *)(v9 + 56) + v19) = v29;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097BDBC()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688ED0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    swift_retain();
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097BF7C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688FD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_100522D7C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = sub_100575CE8(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097C13C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688FE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_100522E9C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20, &qword_101672BF0);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = (void *)sub_10051B3EC((uint64_t)v20, *(void *)(v4 + 56) + 32 * v15, &qword_101672BF0);
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10097C320()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688E90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100522E9C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v23, &qword_101672BF0);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10051B3EC((uint64_t)v23, *(void *)(v4 + 56) + v18, &qword_101672BF0);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10097C508()
{
  return sub_10098315C((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101689070);
}

void *sub_10097C528()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688FD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097C6CC()
{
  return sub_100985420(&qword_101688F08);
}

void *sub_10097C6D8()
{
  return sub_100984D48((uint64_t *)&unk_101684F90, &qword_101688E28);
}

void *sub_10097C6EC()
{
  return sub_1009809A4((uint64_t *)&unk_10169A250);
}

void *sub_10097C6F8()
{
  return sub_100985420(&qword_101688B58);
}

void *sub_10097C704()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688FF0);
  int64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *int64_t v24 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v28 = v2 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + v18);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10097C998()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688F98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10050BF84(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100522D7C(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100575CE8(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097CB80()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016890E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097CD24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688F40);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v27 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_100522E9C(*(void *)(v6 + 56) + v21, (uint64_t)v5, (uint64_t *)&unk_101674520);
    unint64_t v22 = (void *)(*(void *)(v8 + 48) + v17);
    *unint64_t v22 = v19;
    v22[1] = v20;
    sub_10051B3EC((uint64_t)v5, *(void *)(v8 + 56) + v21, (uint64_t *)&unk_101674520);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v11 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097CFAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void **)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v37 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  char v36 = (char *)&v32 - v8;
  sub_1005057FC(&qword_101688EC0);
  uint64_t v9 = *v0;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v11;
    return result;
  }
  uint64_t v32 = v1;
  uint64_t result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    uint64_t result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v9 + 16);
  uint64_t v38 = v9;
  uint64_t v39 = v11;
  *(void *)(v11 + 16) = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v33 = v9 + 64;
  int64_t v34 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v35 = v3 + 2;
  uint64_t v19 = v36;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v34) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v33 + 8 * v29);
    ++v14;
    if (!v30)
    {
      int64_t v14 = v29 + 1;
      if (v29 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v33 + 8 * v14);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v18 = (v30 - 1) & v30;
    unint64_t v21 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    uint64_t v22 = v38;
    unint64_t v23 = v3[9] * v21;
    unint64_t v24 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v24(v19, *(void *)(v38 + 48) + v23, v2);
    unint64_t v25 = *(void *)(v22 + 56) + v23;
    uint64_t v26 = v37;
    v24(v37, v25, v2);
    uint64_t v27 = v39;
    int64_t v28 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v28(*(void *)(v39 + 48) + v23, v19, v2);
    uint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v28)(*(void *)(v27 + 56) + v23, v26, v2);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v32;
    uint64_t v11 = v39;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v33 + 8 * v31);
  if (v30)
  {
    int64_t v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v14 >= v34) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v33 + 8 * v14);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097D2A8()
{
  return sub_100985420(&qword_101688F38);
}

id sub_10097D2B4()
{
  return sub_100981CF0(&qword_101688FC0);
}

void *sub_10097D2C0()
{
  return sub_100982BD4(type metadata accessor for CRLRealTimeEnter, &qword_1016891A0, type metadata accessor for CRLRealTimeEnter, type metadata accessor for CRLRealTimeEnter);
}

void *sub_10097D308()
{
  uint64_t v1 = sub_1005057FC(&qword_101674250);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101689208);
  unint64_t v23 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v23 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    char v17 = *(unsigned char *)(*(void *)(v6 + 48) + v16);
    unint64_t v18 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 56) + v18, v1);
    *(unsigned char *)(*(void *)(v8 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 56) + v18, v5, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_10097D598()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688FF8);
  int64_t v31 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t *v31 = v8;
    return result;
  }
  id result = (id)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v32 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v35 = v2 + 16;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v27 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v27 >= v33) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v27);
    ++v11;
    if (!v28)
    {
      int64_t v11 = v27 + 1;
      if (v27 + 1 >= v33) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v32 + 8 * v11);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v28 - 1) & v28;
    unint64_t v16 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 24 * v16;
    uint64_t v19 = *(void *)(v6 + 56) + v18;
    unint64_t v20 = *(void **)(v19 + 16);
    unint64_t v21 = *(void *)(v8 + 48) + v17;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    long long v36 = *(_OWORD *)v19;
    v22(v21, v5, v1);
    uint64_t v23 = *(void *)(v8 + 56) + v18;
    uint64_t v24 = (void *)v36;
    *(_OWORD *)uint64_t v23 = v36;
    *(void *)(v23 + 16) = v20;
    id v25 = v24;
    id v26 = *((id *)&v36 + 1);
    id result = v20;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v33) {
    goto LABEL_23;
  }
  unint64_t v28 = *(void *)(v32 + 8 * v29);
  if (v28)
  {
    int64_t v11 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v11);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_10097D860()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688EC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097DA14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688EB8);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  unint64_t v23 = v1;
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v24 = v7 + 64;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    uint64_t v19 = 32 * v17;
    sub_100522D7C(*(void *)(v7 + 56) + v19, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
    id result = sub_100575CE8(v27, (_OWORD *)(*(void *)(v9 + 56) + v19));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097DCBC()
{
  uint64_t v44 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44, v1);
  uint64_t v43 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v46 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v3);
  int v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688E30);
  uint64_t v34 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v48 = v6;
  if (!v7)
  {
    id result = (void *)swift_release();
    uint64_t v33 = v48;
    uint64_t v32 = v34;
LABEL_25:
    uint64_t *v32 = v33;
    return result;
  }
  uint64_t v8 = v6;
  id result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v48;
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  uint64_t v45 = v5;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v35 = v5 + 64;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = v47;
  uint64_t v16 = v46;
  uint64_t v39 = v47 + 16;
  uint64_t v40 = v46 + 16;
  uint64_t v37 = v47 + 32;
  uint64_t v38 = v46 + 32;
  unint64_t v17 = v41;
  uint64_t v18 = v42;
  uint64_t v19 = v44;
  uint64_t v20 = v48;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v49 = v11;
      unint64_t v22 = v21 | (v11 << 6);
      uint64_t v23 = v45;
      goto LABEL_9;
    }
    int64_t v28 = v11 + 1;
    uint64_t v23 = v45;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    int64_t v30 = v11 + 1;
    if (!v29)
    {
      int64_t v30 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v29 - 1) & v29;
    int64_t v49 = v30;
    unint64_t v22 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v24 = *(void *)(v16 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v17, *(void *)(v23 + 48) + v24, v18);
    unint64_t v25 = *(void *)(v15 + 72) * v22;
    unint64_t v26 = *(void *)(v23 + 56) + v25;
    int64_t v27 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v43, v26, v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v20 + 48) + v24, v17, v18);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(void *)(v20 + 56) + v25, v27, v19);
    int64_t v11 = v49;
  }
  int64_t v31 = v28 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v32 = v34;
    uint64_t v33 = v48;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097E064()
{
  return sub_10097E60C(type metadata accessor for CRLBoardPreviewImageCache.Item, &qword_101688E38, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

id sub_10097E0AC()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688F88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    char v17 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = v16;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v17;
    id result = v16;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097E250()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10097E3F8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689200);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void **)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    long long v22 = *(_OWORD *)(v17 + 24);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v17;
    *(void *)(v21 + 16) = v20;
    *(_OWORD *)(v21 + 24) = v22;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id v23 = (id)v22;
    id result = v19;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097E5C4()
{
  return sub_10097E60C(type metadata accessor for CRLBoardIdentifier, &qword_1016891F0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void *sub_10097E60C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v31 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  int64_t v31 = v6;
  id result = (void *)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v18);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v32 + 72) * v24;
    sub_100988768(*(void *)(v11 + 48) + v25, (uint64_t)v10, v33);
    uint64_t v26 = 8 * v24;
    uint64_t v27 = *(void *)(*(void *)(v11 + 56) + 8 * v24);
    sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v25, v34);
    *(void *)(*(void *)(v13 + 56) + v26) = v27;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v22)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v31;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v15 + 8 * v30);
  if (v29)
  {
    int64_t v18 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v18);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10097E874()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_1016891F8);
  unint64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v24 = v8;
    return result;
  }
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v25 = v6 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10097EB0C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689080);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    long long v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
    id result = (void *)sub_100510D4C(v16, *((unint64_t *)&v16 + 1));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097ECB8()
{
  return sub_100985420(&qword_101689078);
}

void *sub_10097ECC4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v31 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  int64_t v31 = v6;
  id result = (void *)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v18);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v32 + 72) * v24;
    sub_100988768(*(void *)(v11 + 48) + v25, (uint64_t)v10, v33);
    uint64_t v26 = 8 * v24;
    uint64_t v27 = *(void *)(*(void *)(v11 + 56) + 8 * v24);
    sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v25, v34);
    *(void *)(*(void *)(v13 + 56) + v26) = v27;
    id result = (void *)swift_retain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v22)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v31;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v15 + 8 * v30);
  if (v29)
  {
    int64_t v18 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v18);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_10097EF2C()
{
  uint64_t v1 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v40 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v39 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688E20);
  int64_t v36 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v42 = v5;
  if (!v6)
  {
    id result = (char *)swift_release();
    uint64_t v35 = v42;
    uint64_t v34 = v36;
LABEL_25:
    uint64_t *v34 = v35;
    return result;
  }
  uint64_t v7 = v5;
  id result = (char *)(v5 + 64);
  uint64_t v9 = (char *)(v4 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  uint64_t v37 = v4 + 64;
  if (v7 != v4 || result >= &v9[8 * v10])
  {
    id result = (char *)memmove(result, v9, 8 * v10);
    uint64_t v7 = v42;
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = v4;
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = (uint64_t)v39;
  uint64_t v16 = v42;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v43 = v11;
      unint64_t v18 = v17 | (v11 << 6);
      uint64_t v19 = v41;
      goto LABEL_9;
    }
    int64_t v30 = v11 + 1;
    uint64_t v19 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v30);
    int64_t v32 = v11 + 1;
    if (!v31)
    {
      int64_t v32 = v30 + 1;
      if (v30 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v37 + 8 * v32);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v31 - 1) & v31;
    int64_t v43 = v32;
    unint64_t v18 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v40 + 72) * v18;
    sub_100988768(*(void *)(v19 + 48) + v20, v15, type metadata accessor for CRLBoardIdentifier);
    uint64_t v21 = 40 * v18;
    uint64_t v22 = *(void *)(v19 + 56) + 40 * v18;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v26 = *(void *)(v22 + 16);
    unint64_t v25 = *(void **)(v22 + 24);
    char v27 = *(unsigned char *)(v22 + 32);
    sub_100988838(v15, *(void *)(v16 + 48) + v20, type metadata accessor for CRLBoardIdentifier);
    uint64_t v28 = *(void *)(v16 + 56) + v21;
    *(void *)uint64_t v28 = v23;
    *(void *)(v28 + 8) = v24;
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = v25;
    *(unsigned char *)(v28 + 32) = v27;
    id v29 = v25;
    swift_retain();
    swift_retain();
    id result = (char *)swift_retain();
    int64_t v11 = v43;
  }
  int64_t v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v34 = v36;
    uint64_t v35 = v42;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v37 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097F228()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688E80);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v28 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v29 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v30 + 72) * v17;
    sub_100988768(*(void *)(v6 + 48) + v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    uint64_t v19 = 16 * v17;
    unint64_t v20 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v17);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    sub_100988838((uint64_t)v5, *(void *)(v8 + 48) + v18, type metadata accessor for CRLBoardIdentifier);
    uint64_t v23 = (void *)(*(void *)(v8 + 56) + v19);
    *uint64_t v23 = v21;
    v23[1] = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097F4C0()
{
  return sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata, &qword_101688E50, type metadata accessor for CRLBoardViewModelMetadata, type metadata accessor for CRLBoardViewModelMetadata);
}

void *sub_10097F508()
{
  return sub_10097F550((uint64_t (*)(void))type metadata accessor for CRLBoardEntity, &qword_101688E40, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity, (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
}

void *sub_10097F550(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v37 = a3;
  int64_t v38 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8, v12);
  unint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(a2);
  uint64_t v15 = *v4;
  uint64_t v16 = static _DictionaryStorage.copy(original:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v6 = v17;
    return result;
  }
  uint64_t v34 = v6;
  id result = (void *)(v16 + 64);
  uint64_t v19 = v15 + 64;
  unint64_t v20 = (unint64_t)((1 << *(unsigned char *)(v17 + 32)) + 63) >> 6;
  if (v17 != v15 || (unint64_t)result >= v19 + 8 * v20) {
    id result = memmove(result, (const void *)(v15 + 64), 8 * v20);
  }
  int64_t v21 = 0;
  *(void *)(v17 + 16) = *(void *)(v15 + 16);
  uint64_t v22 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(v15 + 64);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v27 = v26 | (v21 << 6);
      goto LABEL_9;
    }
    int64_t v30 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v25) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v30);
    ++v21;
    if (!v31)
    {
      int64_t v21 = v30 + 1;
      if (v30 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v19 + 8 * v21);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v24 = (v31 - 1) & v31;
    unint64_t v27 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_9:
    unint64_t v28 = *(void *)(v35 + 72) * v27;
    sub_100988768(*(void *)(v15 + 48) + v28, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    unint64_t v29 = *(void *)(v36 + 72) * v27;
    sub_100988768(*(void *)(v15 + 56) + v29, (uint64_t)v10, v37);
    sub_100988838((uint64_t)v14, *(void *)(v17 + 48) + v28, type metadata accessor for CRLBoardIdentifier);
    id result = (void *)sub_100988838((uint64_t)v10, *(void *)(v17 + 56) + v29, v38);
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v6 = v34;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v19 + 8 * v32);
  if (v31)
  {
    int64_t v21 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v21 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v21 >= v25) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v21);
    ++v32;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10097F864()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689248);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    sub_100522E9C(*(void *)(v2 + 56) + 8 * v15, (uint64_t)v21, &qword_101674258);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = (void *)sub_10051B3EC((uint64_t)v21, *(void *)(v4 + 56) + v16, &qword_101674258);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10097FA34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_1016891C0);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  unint64_t v24 = v1;
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v25 = v7 + 64;
  uint64_t v26 = v9;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 56) + v19, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v26 + 56) + v19, v6, v2);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v16)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    uint64_t v9 = v26;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10097FCB4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v31 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (id)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  unint64_t v31 = v6;
  id result = (id)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v18);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v32 + 72) * v24;
    sub_100988768(*(void *)(v11 + 48) + v25, (uint64_t)v10, v33);
    uint64_t v26 = 8 * v24;
    unint64_t v27 = *(void **)(*(void *)(v11 + 56) + v26);
    sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v25, v34);
    *(void *)(*(void *)(v13 + 56) + v26) = v27;
    id result = v27;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v22)
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t v6 = v31;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v15 + 8 * v30);
  if (v29)
  {
    int64_t v18 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v18);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10097FF18()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688F28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009800C8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689158);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void **)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v22 = v20;
    *(unsigned char *)(v22 + 8) = v21;
    id v23 = v17;
    id result = sub_100626B48(v20, v21);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100980294()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016891B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100980424()
{
  return sub_100985420(&qword_101688F50);
}

void *sub_100980430()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689180);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  }
  uint64_t v26 = v2 + 64;
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      int64_t v8 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v8);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 24 * v14;
    uint64_t v16 = *(void *)(v2 + 48) + 24 * v14;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = 40 * v14;
    sub_1005498A4(*(void *)(v2 + 56) + 40 * v14, (uint64_t)v27);
    uint64_t v21 = *(void *)(v4 + 48) + v15;
    *(unsigned char *)uint64_t v21 = v17;
    *(void *)(v21 + 8) = v18;
    *(void *)(v21 + 16) = v19;
    sub_10053974C(v27, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v8);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100980630()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016891B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009807D4()
{
  return sub_1009809A4(&qword_1016890A0);
}

void *sub_1009807E0()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016890A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v23 = (void *)(*(void *)(v4 + 56) + v18);
    *unint64_t v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
    swift_retain();
    id result = (void *)swift_retain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009809A4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    id result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100980B40()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689028);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100980CFC()
{
  return sub_1009811F0(&qword_101688EB0);
}

void *sub_100980D08()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688EA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 56) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 56) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100980EA8()
{
  return sub_10098282C(&qword_101689128);
}

void *sub_100980EB4()
{
  return sub_100986068(&qword_101689190);
}

char *sub_100980EC0()
{
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v1);
  uint64_t v41 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101689188);
  uint64_t v36 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v45 = v4;
  if (!v5)
  {
    id result = (char *)swift_release();
    uint64_t v35 = v45;
    uint64_t v34 = v36;
LABEL_25:
    uint64_t *v34 = v35;
    return result;
  }
  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  unint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v37 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v45;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v43 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = v45;
  uint64_t v40 = v44 + 16;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v39 = v44 + 32;
  uint64_t v15 = v44;
  uint64_t v17 = v41;
  uint64_t v16 = v42;
  while (1)
  {
    if (v13)
    {
      uint64_t v46 = (v13 - 1) & v13;
      int64_t v47 = v10;
      unint64_t v18 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v19 = v43;
      goto LABEL_9;
    }
    int64_t v30 = v10 + 1;
    uint64_t v19 = v43;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v30);
    int64_t v32 = v10 + 1;
    if (!v31)
    {
      int64_t v32 = v10 + 2;
      if (v10 + 2 >= v38) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v37 + 8 * v32);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    uint64_t v46 = (v31 - 1) & v31;
    int64_t v47 = v32;
    unint64_t v18 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v15 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v17, *(void *)(v19 + 48) + v20, v16);
    uint64_t v21 = 48 * v18;
    uint64_t v22 = *(void *)(v19 + 56) + 48 * v18;
    unint64_t v23 = *(void **)v22;
    int64_t v24 = *(void **)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 24);
    uint64_t v27 = *(void *)(v22 + 40);
    uint64_t v48 = *(void *)(v22 + 32);
    uint64_t v49 = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(void *)(v14 + 48) + v20, v17, v16);
    int64_t v28 = (void *)(*(void *)(v14 + 56) + v21);
    *int64_t v28 = v23;
    v28[1] = v24;
    v28[2] = v49;
    v28[3] = v26;
    v28[4] = v48;
    v28[5] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v29 = v23;
    id result = v24;
    unint64_t v13 = v46;
    int64_t v10 = v47;
  }
  uint64_t v33 = v10 + 3;
  if (v10 + 3 >= v38)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v34 = v36;
    uint64_t v35 = v45;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v37 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v10 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1009811E4()
{
  return sub_1009811F0(&qword_101688F18);
}

void *sub_1009811F0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v14) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v7 + 8 * v26);
    ++v10;
    if (!v27)
    {
      int64_t v10 = v26 + 1;
      if (v26 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v7 + 8 * v10);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v27 - 1) & v27;
    unint64_t v16 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = *(void *)(v3 + 56);
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v23 = *(void *)(v18 + v17);
    uint64_t v22 = *(void *)(v18 + v17 + 8);
    int64_t v24 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v24 = v20;
    v24[1] = v21;
    uint64_t v25 = (void *)(*(void *)(v5 + 56) + v17);
    *uint64_t v25 = v23;
    v25[1] = v22;
    swift_retain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v14) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v7 + 8 * v28);
  if (v27)
  {
    int64_t v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v7 + 8 * v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009813B4()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101685CE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100522D7C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100575CE8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10098159C()
{
  return sub_100981CF0(&qword_101689240);
}

void *sub_1009815A8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689178);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v22 = __clz(__rbit64(v20));
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = v22 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10098173C()
{
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v1);
  uint64_t v44 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101689160);
  uint64_t v39 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v48 = v4;
  if (!v5)
  {
    id result = (id)swift_release();
    uint64_t v37 = v48;
    uint64_t v36 = v39;
LABEL_25:
    *uint64_t v36 = v37;
    return result;
  }
  uint64_t v6 = v4;
  id result = (id)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v48;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v46 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v40 = v3 + 64;
  int64_t v41 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v48;
  uint64_t v42 = v47 + 32;
  uint64_t v43 = v47 + 16;
  uint64_t v14 = v47;
  unint64_t v15 = v44;
  uint64_t v16 = v45;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v49 = v9;
      unint64_t v18 = v17 | (v9 << 6);
      uint64_t v19 = v46;
      goto LABEL_9;
    }
    int64_t v32 = v9 + 1;
    uint64_t v19 = v46;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v32 >= v41) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v40 + 8 * v32);
    int64_t v34 = v9 + 1;
    if (!v33)
    {
      int64_t v34 = v32 + 1;
      if (v32 + 1 >= v41) {
        goto LABEL_23;
      }
      unint64_t v33 = *(void *)(v40 + 8 * v34);
      if (!v33) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v33 - 1) & v33;
    int64_t v49 = v34;
    unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v14 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v19 + 48) + v20, v16);
    unint64_t v21 = v18 << 6;
    unint64_t v22 = *(void *)(v19 + 56) + v21;
    uint64_t v23 = *(void *)v22;
    uint64_t v25 = *(void **)(v22 + 24);
    int64_t v24 = *(void **)(v22 + 32);
    uint64_t v26 = *(void *)(v22 + 56);
    unint64_t v27 = *(void *)(v13 + 48) + v20;
    int64_t v28 = *(void (**)(unint64_t, char *, uint64_t))(v14 + 32);
    long long v29 = *(_OWORD *)(v22 + 8);
    long long v50 = *(_OWORD *)(v22 + 40);
    long long v51 = v29;
    v28(v27, v15, v16);
    unint64_t v30 = *(void *)(v13 + 56) + v21;
    *(void *)unint64_t v30 = v23;
    *(_OWORD *)(v30 + 8) = v51;
    *(void *)(v30 + 24) = v25;
    *(void *)(v30 + 32) = v24;
    *(_OWORD *)(v30 + 40) = v50;
    *(void *)(v30 + 56) = v26;
    id v31 = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    id result = v25;
    int64_t v9 = v49;
  }
  int64_t v35 = v32 + 2;
  if (v35 >= v41)
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t v36 = v39;
    uint64_t v37 = v48;
    goto LABEL_25;
  }
  unint64_t v33 = *(void *)(v40 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v41) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v40 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100981A7C()
{
  return sub_10098315C((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016890C8);
}

id sub_100981A9C()
{
  return sub_1009823C4(type metadata accessor for CRLThrottleInfo, &qword_101689110, type metadata accessor for CRLThrottleInfo, type metadata accessor for CRLThrottleInfo);
}

void *sub_100981AE4()
{
  return sub_1009856FC(type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, &qword_101689118, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
}

void *sub_100981B2C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689140);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100981CD8()
{
  return sub_100986068(&qword_101689138);
}

id sub_100981CE4()
{
  return sub_100981CF0(&qword_101688F68);
}

id sub_100981CF0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    id v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100981E90()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689150);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10098203C()
{
  return sub_100982048(&qword_101689130);
}

void *sub_100982048(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009821F8()
{
  return sub_10098282C(&qword_101688F70);
}

void *sub_100982204()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689148);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id v20 = v17;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1009823C4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  unint64_t v33 = a3;
  int64_t v34 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v31 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (id)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  id v31 = v6;
  id result = (id)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v18);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_12:
    uint64_t v25 = 8 * v24;
    uint64_t v26 = *(void **)(*(void *)(v11 + 48) + 8 * v24);
    unint64_t v27 = *(void *)(v32 + 72) * v24;
    sub_100988768(*(void *)(v11 + 56) + v27, (uint64_t)v10, v33);
    *(void *)(*(void *)(v13 + 48) + v25) = v26;
    sub_100988838((uint64_t)v10, *(void *)(v13 + 56) + v27, v34);
    id result = v26;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v22)
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t v6 = v31;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v15 + 8 * v30);
  if (v29)
  {
    int64_t v18 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v18);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100982624()
{
  sub_1005057FC(&qword_1016890B0);
  int64_t v28 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    swift_release();
    *int64_t v28 = v3;
    return;
  }
  uint64_t v4 = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5) {
    memmove(v4, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v29 = v1 + 64;
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v11) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v7;
    if (!v26)
    {
      int64_t v7 = v25 + 1;
      if (v25 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v7);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v10 = (v26 - 1) & v26;
    unint64_t v13 = __clz(__rbit64(v26)) + (v7 << 6);
LABEL_12:
    uint64_t v14 = 8 * v13;
    uint64_t v15 = *(void **)(*(void *)(v1 + 48) + 8 * v13);
    uint64_t v16 = 40 * v13;
    uint64_t v17 = (uint64_t *)(*(void *)(v1 + 56) + v16);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = (void *)v17[2];
    unint64_t v21 = v17[3];
    int64_t v22 = (void *)v17[4];
    *(void *)(*(void *)(v3 + 48) + v14) = v15;
    unint64_t v23 = (uint64_t *)(*(void *)(v3 + 56) + v16);
    *unint64_t v23 = v18;
    v23[1] = v19;
    v23[2] = (uint64_t)v20;
    v23[3] = v21;
    v23[4] = (uint64_t)v22;
    id v24 = v15;
    sub_1008D0DA8(v18, v19, v20, v21, v22);
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v11) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    int64_t v7 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v7);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_100982820()
{
  return sub_10098282C(&qword_1016890F8);
}

void *sub_10098282C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1009829DC()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689108);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = (void *)v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v21;
    v22[1] = v20;
    id result = v20;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100982B8C()
{
  return sub_100982BD4(_s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_101689030, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
}

void *sub_100982BD4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v6 = a1(0);
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  int64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(a2);
  id v31 = v4;
  uint64_t v15 = *v4;
  uint64_t v16 = static _DictionaryStorage.copy(original:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v31 = v17;
    return result;
  }
  id result = (void *)(v16 + 64);
  unint64_t v19 = (unint64_t)((1 << *(unsigned char *)(v17 + 32)) + 63) >> 6;
  if (v17 != v15 || (unint64_t)result >= v15 + 64 + 8 * v19) {
    id result = memmove(result, (const void *)(v15 + 64), 8 * v19);
  }
  uint64_t v32 = v15 + 64;
  int64_t v20 = 0;
  *(void *)(v17 + 16) = *(void *)(v15 + 16);
  uint64_t v21 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(v15 + 64);
  uint64_t v35 = v11 + 16;
  int64_t v33 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v34 = v11 + 32;
  while (1)
  {
    if (v23)
    {
      unint64_t v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v25 = v24 | (v20 << 6);
      goto LABEL_9;
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v28 >= v33) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v32 + 8 * v28);
    ++v20;
    if (!v29)
    {
      int64_t v20 = v28 + 1;
      if (v28 + 1 >= v33) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v32 + 8 * v20);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v25 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_9:
    unint64_t v26 = *(void *)(v11 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, *(void *)(v15 + 48) + v26, v10);
    unint64_t v27 = *(void *)(v36 + 72) * v25;
    sub_100988768(*(void *)(v15 + 56) + v27, (uint64_t)v9, v37);
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(void *)(v17 + 48) + v26, v14, v10);
    id result = (void *)sub_100988838((uint64_t)v9, *(void *)(v17 + 56) + v27, v38);
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v33) {
    goto LABEL_23;
  }
  unint64_t v29 = *(void *)(v32 + 8 * v30);
  if (v29)
  {
    int64_t v20 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v20 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v20 >= v33) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v32 + 8 * v20);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100982EFC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  int64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v31 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  id v31 = v6;
  id result = (void *)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v18);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v32 + 72) * v24;
    sub_100988768(*(void *)(v11 + 48) + v25, (uint64_t)v10, v33);
    uint64_t v26 = 8 * v24;
    uint64_t v27 = *(void *)(*(void *)(v11 + 56) + v26);
    id result = (void *)sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v25, v34);
    *(void *)(*(void *)(v13 + 56) + v26) = v27;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v22)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v31;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v15 + 8 * v30);
  if (v29)
  {
    int64_t v18 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v18);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10098315C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v27 - v7;
  sub_1005057FC(a2);
  int64_t v28 = v2;
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *int64_t v28 = v11;
    return result;
  }
  id result = (id)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v29 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v32 = v5 + 16;
  int64_t v30 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v31 = v5 + 32;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v15);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v9 + 48) + v21, v4);
    uint64_t v22 = 8 * v20;
    unint64_t v23 = *(void **)(*(void *)(v9 + 56) + v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v11 + 48) + v21, v8, v4);
    *(void *)(*(void *)(v11 + 56) + v22) = v23;
    id result = v23;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v30) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009833F4()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016890B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)sub_100510D4C(v19, *((unint64_t *)&v19 + 1));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009835A4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  int64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688E78);
  int64_t v26 = v0;
  uint64_t v10 = *v0;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v26 = v12;
    return result;
  }
  id result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  int64_t v15 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v10 + 64);
  uint64_t v27 = v10 + 64;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v29 = v2 + 32;
  uint64_t v30 = v2 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v15);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v31 + 72) * v20;
    sub_100988768(*(void *)(v10 + 48) + v21, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    unint64_t v22 = *(void *)(v2 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v10 + 56) + v22, v1);
    sub_100988838((uint64_t)v9, *(void *)(v12 + 48) + v21, type metadata accessor for CRLBoardIdentifier);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v12 + 56) + v22, v5, v1);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28) {
    goto LABEL_23;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v15 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1009838E4()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689068);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100983A94()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689040);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100983C38()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689038);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 8 * v15;
    unint64_t v21 = *(void **)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v18;
    v22[1] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id v23 = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100983DF0()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688FB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v18 = *(void **)v17;
    uint64_t v19 = *(void **)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v24 = *(unsigned char *)(v17 + 24);
    *(void *)uint64_t v23 = *(void *)v17;
    *(void *)(v23 + 8) = v19;
    *(void *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 24) = v24;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    sub_10053BB6C(v18, v19, v20, v24);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100983FB8()
{
  return sub_100984448((uint64_t (*)(void))&type metadata accessor for URL, &qword_101689018);
}

void *sub_100983FD8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101689010);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    id result = (void *)sub_10050BF84(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v26);
    uint64_t v16 = (long long *)(*(void *)(v2 + 56) + 32 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    long long v18 = *v16;
    long long v19 = v16[1];
    uint64_t v20 = v27;
    long long v21 = v26[1];
    *(_OWORD *)uint64_t v17 = v26[0];
    *(_OWORD *)(v17 + 16) = v21;
    *(void *)(v17 + 32) = v20;
    uint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + 32 * v15);
    *uint64_t v22 = v18;
    v22[1] = v19;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009841B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688E58);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v27 = v1;
  id result = (void *)(v8 + 64);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v11 + 8 * v12) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v17) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v11 + 8 * v23);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v11 + 8 * v13);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    sub_100988768(*(void *)(v7 + 48) + v20, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v7 + 56) + v21);
    id result = (void *)sub_100988838((uint64_t)v6, *(void *)(v9 + 48) + v20, type metadata accessor for CRLBoardIdentifier);
    *(void *)(*(void *)(v9 + 56) + v21) = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v11 + 8 * v25);
  if (v24)
  {
    int64_t v13 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v11 + 8 * v13);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10098443C()
{
  return sub_100985420(&qword_101688E10);
}

void *sub_100984448(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v40 = a1(0);
  uint64_t v4 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v5);
  uint64_t v7 = (char *)&v34 - v6;
  sub_1005057FC(a2);
  uint64_t v35 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v41 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v33 = v41;
    uint64_t v32 = v35;
LABEL_28:
    uint64_t *v32 = v33;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v41;
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v8 + 64);
  uint64_t v36 = v8 + 64;
  int64_t v37 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v38 = v4 + 32;
  uint64_t v39 = v4 + 16;
  uint64_t v19 = v40;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v37) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    ++v15;
    if (!v30)
    {
      int64_t v15 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v15);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v30 - 1) & v30;
    unint64_t v21 = __clz(__rbit64(v30)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = 16 * v21;
    int64_t v23 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    unint64_t v26 = *(void *)(v4 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(void *)(v8 + 56) + v26, v19);
    uint64_t v27 = v41;
    int64_t v28 = (void *)(*(void *)(v41 + 48) + v22);
    *int64_t v28 = v24;
    v28[1] = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v27 + 56) + v26, v7, v19);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v37)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v32 = v35;
    uint64_t v33 = v41;
    goto LABEL_28;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v31);
  if (v30)
  {
    int64_t v15 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v15 >= v37) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v15);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10098470C()
{
  return sub_10097ECC4(type metadata accessor for CRLBoardIdentifier, &qword_101688E60, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void *sub_100984754()
{
  return sub_100985420(&qword_101688F48);
}

void *sub_100984760()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v31 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_1016891C8);
  uint64_t v10 = *v0;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v12;
    return result;
  }
  int64_t v29 = v1;
  id result = (void *)(v11 + 64);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v14 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_9;
    }
    int64_t v25 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v20) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v25 + 1;
      if (v25 + 1 >= v20) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v16);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v22 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_9:
    unint64_t v23 = *(void *)(v30 + 72) * v22;
    sub_100988768(*(void *)(v10 + 48) + v23, (uint64_t)v9, type metadata accessor for CRLAssetReferrerIdentifier);
    unint64_t v24 = *(void *)(v31 + 72) * v22;
    sub_100988768(*(void *)(v10 + 56) + v24, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    sub_100988838((uint64_t)v9, *(void *)(v12 + 48) + v23, type metadata accessor for CRLAssetReferrerIdentifier);
    id result = (void *)sub_100988838((uint64_t)v5, *(void *)(v12 + 56) + v24, type metadata accessor for CRLBoardIdentifier);
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v20)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v29;
    goto LABEL_25;
  }
  unint64_t v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    int64_t v16 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v16);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100984A90(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v30 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  uint64_t v30 = v6;
  id result = (void *)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v22) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v15 + 8 * v27);
    ++v18;
    if (!v28)
    {
      int64_t v18 = v27 + 1;
      if (v27 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v15 + 8 * v18);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v24 = __clz(__rbit64(v28)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v31 + 72) * v24;
    sub_100988768(*(void *)(v11 + 48) + v25, (uint64_t)v10, v32);
    char v26 = *(unsigned char *)(*(void *)(v11 + 56) + v24);
    id result = (void *)sub_100988838((uint64_t)v10, *(void *)(v13 + 48) + v25, v33);
    *(unsigned char *)(*(void *)(v13 + 56) + v24) = v26;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v22)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v15 + 8 * v29);
  if (v28)
  {
    int64_t v18 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v15 + 8 * v18);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100984CEC()
{
  return sub_10097ECC4(type metadata accessor for CRLBoardIdentifier, &qword_101689088, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void *sub_100984D34()
{
  return sub_100984D48((uint64_t *)&unk_10169A730, &qword_101688EE8);
}

void *sub_100984D48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = a1;
  uint64_t v4 = sub_1005057FC(a1);
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v8);
  uint64_t v41 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(a2);
  uint64_t v36 = v2;
  uint64_t v10 = *v2;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v47 = v11;
  if (!v12)
  {
    id result = (void *)swift_release();
    uint64_t v35 = v47;
    uint64_t v34 = v36;
LABEL_25:
    uint64_t *v34 = v35;
    return result;
  }
  uint64_t v13 = v11;
  id result = (void *)(v11 + 64);
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15)
  {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
    uint64_t v13 = v47;
  }
  uint64_t v37 = v10 + 64;
  int64_t v16 = 0;
  *(void *)(v13 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v46 = v10;
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  uint64_t v40 = v7 + 16;
  int64_t v38 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v39 = v7 + 32;
  unint64_t v21 = v41;
  uint64_t v20 = v42;
  uint64_t v22 = (uint64_t)v43;
  for (i = v47; ; id result = (void *)sub_10051B3EC(v22, *(void *)(i + 56) + v30, v29))
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v16 << 6);
      uint64_t v26 = v46;
      goto LABEL_9;
    }
    int64_t v31 = v16 + 1;
    uint64_t v26 = v46;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v38) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v37 + 8 * v31);
    ++v16;
    if (!v32)
    {
      int64_t v16 = v31 + 1;
      if (v31 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v37 + 8 * v16);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v19 = (v32 - 1) & v32;
    unint64_t v25 = __clz(__rbit64(v32)) + (v16 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v7 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v21, *(void *)(v26 + 48) + v27, v20);
    uint64_t v28 = *(void *)(v26 + 56);
    int64_t v29 = v45;
    unint64_t v30 = *(void *)(v44 + 72) * v25;
    sub_100522E9C(v28 + v30, v22, v45);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(i + 48) + v27, v21, v20);
  }
  int64_t v33 = v31 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v34 = v36;
    uint64_t v35 = v47;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v37 + 8 * v33);
  if (v32)
  {
    int64_t v16 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v16 >= v38) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v37 + 8 * v16);
    ++v33;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1009850AC()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688FE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10098523C()
{
  return sub_100986068(&qword_101688FC8);
}

id sub_100985248(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 32 * v16;
    sub_100522D7C(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    sub_100575CE8(v23, (_OWORD *)(*(void *)(v5 + 56) + v19));
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100985408()
{
  return sub_100986068(&qword_101688F90);
}

void *sub_100985414()
{
  return sub_100985420(&qword_101688F80);
}

void *sub_100985420(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(a1);
  unint64_t v27 = v1;
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v4 + 32;
  uint64_t v31 = v4 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(void *)(v8 + 48) + v20, v3);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v10 + 48) + v20, v7, v3);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1009856B4()
{
  return sub_100982BD4(type metadata accessor for CRLBoardItemPeerSyncUpdate, &qword_101688F78, type metadata accessor for CRLBoardItemPeerSyncUpdate, type metadata accessor for CRLBoardItemPeerSyncUpdate);
}

void *sub_1009856FC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  unint64_t v32 = a3;
  int64_t v33 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v30 - v9;
  sub_1005057FC(a2);
  uint64_t v11 = *v4;
  uint64_t v12 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v13;
    return result;
  }
  uint64_t v30 = v6;
  id result = (void *)(v12 + 64);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 64), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v22) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v15 + 8 * v27);
    ++v18;
    if (!v28)
    {
      int64_t v18 = v27 + 1;
      if (v27 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v15 + 8 * v18);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v24 = __clz(__rbit64(v28)) + (v18 << 6);
LABEL_12:
    char v25 = *(unsigned char *)(*(void *)(v11 + 48) + v24);
    unint64_t v26 = *(void *)(v31 + 72) * v24;
    sub_100988768(*(void *)(v11 + 56) + v26, (uint64_t)v10, v32);
    *(unsigned char *)(*(void *)(v13 + 48) + v24) = v25;
    id result = (void *)sub_100988838((uint64_t)v10, *(void *)(v13 + 56) + v26, v33);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v22)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v15 + 8 * v29);
  if (v28)
  {
    int64_t v18 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v18 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v15 + 8 * v18);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100985954()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688F60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    long long v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
    id result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100985AFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v31 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688FA8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v29 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v30 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v15) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v11;
    if (!v26)
    {
      int64_t v11 = v25 + 1;
      if (v25 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v11);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v26 - 1) & v26;
    unint64_t v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v31 + 72) * v17;
    sub_100988768(*(void *)(v6 + 48) + v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    uint64_t v19 = 16 * v17;
    uint64_t v20 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v17);
    uint64_t v22 = *v20;
    unint64_t v21 = (void *)v20[1];
    sub_100988838((uint64_t)v5, *(void *)(v8 + 48) + v18, type metadata accessor for CRLBoardIdentifier);
    unint64_t v23 = (void *)(*(void *)(v8 + 56) + v19);
    *unint64_t v23 = v22;
    v23[1] = v21;
    id v24 = v21;
    id result = (void *)swift_retain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v29;
    goto LABEL_25;
  }
  unint64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    int64_t v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100985D98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688FA0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  id v24 = v1;
  id result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v12);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v25 + 72) * v18;
    sub_100988768(*(void *)(v6 + 48) + v19, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    char v20 = *(unsigned char *)(*(void *)(v6 + 56) + v18);
    id result = (void *)sub_100988838((uint64_t)v5, *(void *)(v8 + 48) + v19, type metadata accessor for CRLBoardIdentifier);
    *(unsigned char *)(*(void *)(v8 + 56) + v18) = v20;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100986014()
{
  return sub_10097F550(type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_101688E68, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
}

void *sub_10098605C()
{
  return sub_100986068(&qword_101688B60);
}

void *sub_100986068(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10098620C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101688F30);
  int64_t v23 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v8;
    return result;
  }
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    char v18 = *(unsigned char *)(*(void *)(v6 + 56) + v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(unsigned char *)(*(void *)(v8 + 56) + v16) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10098649C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101688F20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    sub_10050BF84(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v27);
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    unint64_t v17 = *(void **)v16;
    char v18 = *(void **)(v16 + 8);
    int64_t v19 = *(void **)(v16 + 16);
    uint64_t v20 = *(void *)(v4 + 48) + 40 * v15;
    long long v21 = v27[0];
    long long v22 = v27[1];
    *(void *)(v20 + 32) = v28;
    *(_OWORD *)uint64_t v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    int64_t v23 = (void *)(*(void *)(v4 + 56) + 24 * v15);
    *int64_t v23 = v17;
    v23[1] = v18;
    _OWORD v23[2] = v19;
    id result = sub_100988278(v17, v18, v19);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10098668C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100F6A170(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1009866F8(v4);
  *a1 = v2;
}

void sub_1009866F8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 >= -1)
    {
      Swift::Int v7 = v5;
      if (v4 < 2)
      {
        uint64_t v10 = _swiftEmptyArrayStorage;
        __dst = (char *)&_swiftEmptyArrayStorage[4];
        unint64_t v91 = _swiftEmptyArrayStorage;
        if (v4 != 1)
        {
          unint64_t v32 = *(void *)&_swiftEmptyArrayStorage[2];
          if (v32 < 2) {
            goto LABEL_96;
          }
          goto LABEL_82;
        }
        uint64_t v96 = v1;
      }
      else
      {
        uint64_t v96 = v1;
        uint64_t v8 = v6 >> 1;
        uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v9 + 16) = v8;
        unint64_t v91 = (double *)v9;
        __dst = (char *)(v9 + 32);
      }
      uint64_t v11 = 0;
      unint64_t v90 = v3;
      uint64_t v12 = *v3;
      uint64_t v10 = _swiftEmptyArrayStorage;
      Swift::Int v92 = v7;
      Swift::Int v93 = v4;
      while (1)
      {
        char v13 = sub_100987080(&v97, v12, v4, v11);
        if (v96) {
          goto LABEL_96;
        }
        uint64_t v14 = v97;
        if (v13)
        {
          if (v97 < v11) {
            goto LABEL_118;
          }
          if (v11 < v97)
          {
            uint64_t v15 = v97 << 6;
            uint64_t v16 = v11 << 6;
            uint64_t v17 = v97;
            uint64_t v18 = v11;
            do
            {
              if (v18 != --v17)
              {
                if (!v12) {
                  goto LABEL_124;
                }
                int64_t v19 = (_OWORD *)(v12 + v16);
                uint64_t v20 = *(void *)(v12 + v16 + 16);
                uint64_t v21 = v12 + v15;
                uint64_t v22 = *(void *)(v12 + v16 + 56);
                long long v23 = *(_OWORD *)(v12 + v16 + 24);
                long long v24 = *(_OWORD *)(v12 + v16);
                long long v25 = *(_OWORD *)(v12 + v16 + 40);
                long long v26 = *(_OWORD *)(v12 + v15 - 16);
                long long v28 = *(_OWORD *)(v12 + v15 - 64);
                long long v27 = *(_OWORD *)(v12 + v15 - 48);
                v19[2] = *(_OWORD *)(v12 + v15 - 32);
                v19[3] = v26;
                _OWORD *v19 = v28;
                v19[1] = v27;
                *(_OWORD *)(v21 - 64) = v24;
                *(void *)(v21 - 48) = v20;
                *(_OWORD *)(v21 - 40) = v23;
                *(_OWORD *)(v21 - 24) = v25;
                *(void *)(v21 - 8) = v22;
              }
              ++v18;
              v15 -= 64;
              v16 += 64;
            }
            while (v18 < v17);
          }
        }
        if (v14 < v4)
        {
          if (__OFSUB__(v14, v11)) {
            goto LABEL_119;
          }
          if (v14 - v11 < v7)
          {
            if (__OFADD__(v11, v7)) {
              goto LABEL_121;
            }
            if (v11 + v7 >= v4) {
              uint64_t v29 = v4;
            }
            else {
              uint64_t v29 = v11 + v7;
            }
            if (v29 < v11)
            {
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
              break;
            }
            sub_100986D08(v11, v29, v14, v90);
            uint64_t v14 = v29;
          }
        }
        if (v14 < v11) {
          goto LABEL_117;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_100F697E0(0, *((void *)v10 + 2) + 1, 1, (uint64_t)v10);
        }
        unint64_t v31 = *((void *)v10 + 2);
        unint64_t v30 = *((void *)v10 + 3);
        unint64_t v32 = v31 + 1;
        uint64_t v94 = v14;
        if (v31 >= v30 >> 1) {
          uint64_t v10 = sub_100F697E0((double *)(v30 > 1), v31 + 1, 1, (uint64_t)v10);
        }
        *((void *)v10 + 2) = v32;
        int64_t v33 = v10 + 4;
        uint64_t v34 = (uint64_t *)&v10[2 * v31 + 4];
        uint64_t *v34 = v11;
        v34[1] = v14;
        if (v31)
        {
          while (1)
          {
            unint64_t v35 = v32 - 1;
            if (v32 >= 4)
            {
              uint64_t v40 = &v33[2 * v32];
              uint64_t v41 = *((void *)v40 - 8);
              uint64_t v42 = *((void *)v40 - 7);
              BOOL v46 = __OFSUB__(v42, v41);
              uint64_t v43 = v42 - v41;
              if (v46) {
                goto LABEL_102;
              }
              uint64_t v45 = *((void *)v40 - 6);
              uint64_t v44 = *((void *)v40 - 5);
              BOOL v46 = __OFSUB__(v44, v45);
              uint64_t v38 = v44 - v45;
              char v39 = v46;
              if (v46) {
                goto LABEL_103;
              }
              unint64_t v47 = v32 - 2;
              uint64_t v48 = &v33[2 * v32 - 4];
              uint64_t v50 = *(void *)v48;
              uint64_t v49 = *((void *)v48 + 1);
              BOOL v46 = __OFSUB__(v49, v50);
              uint64_t v51 = v49 - v50;
              if (v46) {
                goto LABEL_105;
              }
              BOOL v46 = __OFADD__(v38, v51);
              uint64_t v52 = v38 + v51;
              if (v46) {
                goto LABEL_108;
              }
              if (v52 >= v43)
              {
                uint64_t v70 = &v33[2 * v35];
                uint64_t v72 = *(void *)v70;
                uint64_t v71 = *((void *)v70 + 1);
                BOOL v46 = __OFSUB__(v71, v72);
                uint64_t v73 = v71 - v72;
                if (v46) {
                  goto LABEL_112;
                }
                BOOL v63 = v38 < v73;
                goto LABEL_69;
              }
            }
            else
            {
              if (v32 != 3)
              {
                uint64_t v64 = *((void *)v10 + 4);
                uint64_t v65 = *((void *)v10 + 5);
                BOOL v46 = __OFSUB__(v65, v64);
                uint64_t v57 = v65 - v64;
                char v58 = v46;
                goto LABEL_63;
              }
              uint64_t v37 = *((void *)v10 + 4);
              uint64_t v36 = *((void *)v10 + 5);
              BOOL v46 = __OFSUB__(v36, v37);
              uint64_t v38 = v36 - v37;
              char v39 = v46;
            }
            if (v39) {
              goto LABEL_104;
            }
            unint64_t v47 = v32 - 2;
            uint64_t v53 = &v33[2 * v32 - 4];
            uint64_t v55 = *(void *)v53;
            uint64_t v54 = *((void *)v53 + 1);
            BOOL v56 = __OFSUB__(v54, v55);
            uint64_t v57 = v54 - v55;
            char v58 = v56;
            if (v56) {
              goto LABEL_107;
            }
            unint64_t v59 = &v33[2 * v35];
            uint64_t v61 = *(void *)v59;
            uint64_t v60 = *((void *)v59 + 1);
            BOOL v46 = __OFSUB__(v60, v61);
            uint64_t v62 = v60 - v61;
            if (v46) {
              goto LABEL_110;
            }
            if (__OFADD__(v57, v62)) {
              goto LABEL_111;
            }
            if (v57 + v62 >= v38)
            {
              BOOL v63 = v38 < v62;
LABEL_69:
              if (v63) {
                unint64_t v35 = v47;
              }
              goto LABEL_71;
            }
LABEL_63:
            if (v58) {
              goto LABEL_106;
            }
            unint64_t v66 = &v33[2 * v35];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v46 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v46) {
              goto LABEL_109;
            }
            if (v69 < v57) {
              goto LABEL_79;
            }
LABEL_71:
            unint64_t v74 = v35 - 1;
            if (v35 - 1 >= v32)
            {
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
              goto LABEL_122;
            }
            if (!v12) {
              goto LABEL_123;
            }
            uint64_t v75 = v10;
            int v76 = &v33[2 * v74];
            uint64_t v77 = *(void *)v76;
            int v78 = &v33[2 * v35];
            double v79 = v78[1];
            sub_100987428((char *)(v12 + (*(void *)v76 << 6)), (char *)(v12 + (*(void *)v78 << 6)), v12 + (*(void *)&v79 << 6), __dst);
            if (*(uint64_t *)&v79 < v77) {
              goto LABEL_99;
            }
            if (v35 > *((void *)v75 + 2)) {
              goto LABEL_100;
            }
            *(void *)int v76 = v77;
            v33[2 * v74 + 1] = v79;
            unint64_t v80 = *((void *)v75 + 2);
            if (v35 >= v80) {
              goto LABEL_101;
            }
            uint64_t v10 = v75;
            unint64_t v32 = v80 - 1;
            memmove(&v33[2 * v35], v78 + 2, 16 * (v80 - 1 - v35));
            *((void *)v75 + 2) = v80 - 1;
            if (v80 <= 2) {
              goto LABEL_79;
            }
          }
        }
        unint64_t v32 = 1;
LABEL_79:
        Swift::Int v4 = v93;
        uint64_t v11 = v94;
        Swift::Int v7 = v92;
        if (v94 >= v93)
        {
          uint64_t v2 = 0;
          uint64_t v3 = v90;
          if (v32 < 2)
          {
LABEL_96:
            swift_bridgeObjectRelease();
            v91[2] = 0.0;
            swift_bridgeObjectRelease();
            return;
          }
LABEL_82:
          uint64_t v81 = *v3;
          while (1)
          {
            unint64_t v82 = v32 - 2;
            if (v32 < 2) {
              goto LABEL_113;
            }
            if (!v81) {
              goto LABEL_125;
            }
            uint64_t v83 = v10;
            double v84 = v10[2 * v82 + 4];
            double v85 = v10[2 * v32 + 3];
            sub_100987428((char *)(v81 + (*(void *)&v84 << 6)), (char *)(v81 + (*(void *)&v10[2 * v32 + 2] << 6)), v81 + (*(void *)&v85 << 6), __dst);
            if (v2) {
              goto LABEL_96;
            }
            if (*(uint64_t *)&v85 < *(uint64_t *)&v84) {
              goto LABEL_114;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v83 = sub_100F69F28((uint64_t)v10);
            }
            if (v82 >= *((void *)v83 + 2)) {
              goto LABEL_115;
            }
            id v86 = v83;
            uint64_t v87 = v83 + 4;
            uint64_t v88 = &v83[2 * v82 + 4];
            *uint64_t v88 = v84;
            v88[1] = v85;
            unint64_t v89 = *((void *)v83 + 2);
            if (v32 > v89) {
              goto LABEL_116;
            }
            memmove(&v87[2 * v32 - 2], &v87[2 * v32], 16 * (v89 - v32));
            *((void *)v86 + 2) = v89 - 1;
            unint64_t v32 = v89 - 1;
            uint64_t v10 = v86;
            if (v89 <= 2) {
              goto LABEL_96;
            }
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v4 < 0) {
    goto LABEL_120;
  }
  if (v4) {
    sub_100986D08(0, v4, 1, v3);
  }
}

void sub_100986D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v36 = *a4;
    uint64_t v4 = *a4 + (a3 << 6) + 56;
LABEL_6:
    uint64_t v6 = v36 + (a3 << 6);
    uint64_t v8 = *(void **)(v6 + 24);
    Swift::Int v7 = *(void **)(v6 + 32);
    uint64_t v9 = *(double (**)(id, uint64_t, uint64_t))(v6 + 40);
    uint64_t v10 = a1;
    uint64_t v35 = v4;
    double v11 = *(double *)(v6 + 56);
    uint64_t v37 = a3;
    while (1)
    {
      uint64_t v38 = v10;
      char v39 = *(double (**)(uint64_t, uint64_t, uint64_t))(v4 - 80);
      uint64_t v40 = *(void **)(v4 - 96);
      double v12 = *(double *)(v4 - 64);
      id v44 = *(id *)(v4 - 88);
      swift_retain();
      swift_retain();
      swift_retain();
      id v43 = v8;
      id v42 = v7;
      swift_retain();
      swift_retain();
      swift_retain();
      id v41 = v40;
      double v15 = v9(v41, v13, v14);
      double v17 = v16;
      double v22 = v39(v18, v19, v20);
      if (vabdd_f64(v17, v21) > 16.0 || v15 == v22)
      {
        if (v17 < v21) {
          goto LABEL_21;
        }
        if (v21 < v17) {
          goto LABEL_4;
        }
      }
      if (sub_1003E86EC())
      {
        if (v22 < v15) {
          goto LABEL_21;
        }
        if (v15 < v22) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v15 < v22) {
          goto LABEL_21;
        }
        if (v22 < v15) {
          goto LABEL_4;
        }
      }
      if (v11 >= v12)
      {
        if (v12 >= v11)
        {
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184, (uint64_t)"Should not get a tie when sorting calculate expressions.", 56, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184);
        }
LABEL_4:

        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();

        uint64_t v5 = v37;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v35 + 64;
        if (a3 == a2) {
          return;
        }
        goto LABEL_6;
      }
LABEL_21:

      swift_release();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();

      if (!v36)
      {
        __break(1u);
        return;
      }
      long long v24 = (_OWORD *)(v4 - 56);
      double v11 = *(double *)v4;
      long long v25 = (_OWORD *)(v4 - 120);
      long long v27 = *(_OWORD *)(v4 - 88);
      long long v26 = *(_OWORD *)(v4 - 72);
      *(void *)(v4 - 64) = *(void *)v4;
      v4 -= 64;
      uint64_t v28 = *(void *)(v4 + 8);
      uint64_t v29 = *(void *)(v4 + 16);
      uint64_t v30 = *(void *)(v4 + 24);
      uint64_t v8 = *(void **)(v4 + 32);
      long long v31 = v25[1];
      *long long v24 = *v25;
      v24[1] = v31;
      Swift::Int v7 = *(void **)(v4 + 40);
      uint64_t v9 = *(double (**)(id, uint64_t, uint64_t))(v4 + 48);
      uint64_t v32 = *(void *)(v4 + 56);
      _OWORD v24[2] = v27;
      v24[3] = v26;
      *(void *)(v4 - 56) = v28;
      *(void *)(v4 - 48) = v29;
      *(void *)(v4 - 40) = v30;
      *(void *)(v4 - 32) = v8;
      *(void *)(v4 - 24) = v7;
      *(void *)(v4 - 16) = v9;
      uint64_t v5 = v37;
      uint64_t v10 = v38 + 1;
      *(void *)(v4 - 8) = v32;
      if (v37 == v38 + 1) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_100987080(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 + 1 >= a3)
  {
    LOBYTE(v5) = 0;
    uint64_t v17 = a4 + 1;
    goto LABEL_5;
  }
  uint64_t v10 = (long long *)(a2 + ((a4 + 1) << 6));
  uint64_t v11 = *((void *)v10 + 2);
  uint64_t v12 = *((void *)v10 + 7);
  long long v58 = *v10;
  uint64_t v59 = v11;
  long long v60 = *(long long *)((char *)v10 + 24);
  long long v61 = *(long long *)((char *)v10 + 40);
  uint64_t v62 = v12;
  uint64_t v13 = (long long *)(a2 + (a4 << 6));
  uint64_t v14 = *((void *)v13 + 2);
  uint64_t v15 = *((void *)v13 + 7);
  long long v53 = *v13;
  uint64_t v54 = v14;
  long long v55 = *(long long *)((char *)v13 + 24);
  long long v56 = *(long long *)((char *)v13 + 40);
  uint64_t v57 = v15;
  int v16 = sub_1009533F8((uint64_t)&v58, (uint64_t)&v53);
  if (v4) {
    return v5 & 1;
  }
  LOBYTE(v5) = v16;
  uint64_t v19 = a4 + 2;
  if (a4 + 2 >= a3)
  {
    uint64_t v17 = a4 + 2;
    goto LABEL_5;
  }
  id v44 = a1;
  uint64_t v20 = a2 + (a4 << 6) + 96;
  uint64_t v45 = a3;
  int v46 = v16;
  while (1)
  {
    uint64_t v21 = *(void *)(v20 + 40);
    double v22 = *(void **)(v20 + 56);
    long long v23 = *(void **)(v20 + 64);
    uint64_t v52 = *(double (**)(id, uint64_t, uint64_t))(v20 + 72);
    double v24 = *(double *)(v20 + 88);
    uint64_t v48 = v19;
    uint64_t v49 = *(void **)(v20 - 8);
    uint64_t v50 = *(double (**)(uint64_t, uint64_t, uint64_t))(v20 + 8);
    double v25 = *(double *)(v20 + 24);
    id v47 = *(id *)v20;
    swift_retain();
    uint64_t v63 = v21;
    swift_retain();
    swift_retain();
    id v26 = v22;
    id v27 = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    id v28 = v49;
    double v31 = v52(v28, v29, v30);
    double v33 = v32;
    double v38 = v50(v34, v35, v36);
    BOOL v39 = vabdd_f64(v33, v37) > 16.0 || v31 == v38;
    uint64_t v51 = v26;
    if (v39)
    {
      if (v33 >= v37)
      {
        if (v37 >= v33) {
          goto LABEL_18;
        }
        uint64_t v40 = v27;
        int v41 = 0;
      }
      else
      {
        uint64_t v40 = v27;
LABEL_22:
        int v41 = 1;
      }
      int v5 = v46;
      id v43 = v47;
      goto LABEL_32;
    }
LABEL_18:
    uint64_t v40 = v27;
    if (sub_1003E86EC())
    {
      if (v38 < v31) {
        goto LABEL_22;
      }
      BOOL v42 = v31 < v38;
    }
    else
    {
      if (v31 < v38) {
        goto LABEL_22;
      }
      BOOL v42 = v38 < v31;
    }
    int v5 = v46;
    id v43 = v47;
    if (v42)
    {
LABEL_27:
      int v41 = 0;
      goto LABEL_32;
    }
    if (v24 >= v25)
    {
      if (v25 < v24) {
        goto LABEL_27;
      }
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184, (uint64_t)"Should not get a tie when sorting calculate expressions.", 56, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184);
      int v41 = 0;
    }
    else
    {
      int v41 = 1;
    }
LABEL_32:

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();

    if ((v5 ^ v41)) {
      break;
    }
    uint64_t v19 = v48 + 1;
    v20 += 64;
    uint64_t v17 = v45;
    if (v45 == v48 + 1) {
      goto LABEL_37;
    }
  }
  uint64_t v17 = v48;
LABEL_37:
  a1 = v44;
LABEL_5:
  *a1 = v17;
  return v5 & 1;
}

uint64_t sub_100987428(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int v5 = __src;
  uint64_t v6 = a2 - __src;
  uint64_t v7 = a2 - __src + 63;
  if (a2 - __src >= 0) {
    uint64_t v7 = a2 - __src;
  }
  uint64_t v8 = v7 >> 6;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 63;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 6;
  unint64_t v90 = __src;
  unint64_t v89 = __dst;
  uint64_t v69 = __dst;
  if (v8 >= v10 >> 6)
  {
    if (v9 < -63) {
      goto LABEL_81;
    }
    if (__dst != a2 || &a2[64 * v11] <= __dst)
    {
      double v37 = a2;
      memmove(__dst, a2, v11 << 6);
      a2 = v37;
    }
    double v38 = &__dst[64 * v11];
    uint64_t v88 = v38;
    unint64_t v90 = a2;
    if (v5 >= a2 || v9 < 64)
    {
LABEL_80:
      sub_100F69DB4((void **)&v90, (const void **)&v89, &v88);
      return 1;
    }
    BOOL v39 = (char *)(a3 - 64);
    double v85 = v5;
    while (1)
    {
      uint64_t v83 = v39;
      uint64_t v40 = (void *)*((void *)v38 - 5);
      int v41 = (void *)*((void *)v38 - 4);
      double v42 = *((double *)v38 - 1);
      uint64_t v71 = (void *)*((void *)a2 - 5);
      uint64_t v73 = (double (*)(uint64_t, uint64_t, uint64_t))*((void *)a2 - 3);
      uint64_t v75 = (double (*)(id, uint64_t, uint64_t))*((void *)v38 - 3);
      uint64_t v87 = a2;
      double v43 = *((double *)a2 - 1);
      id v81 = *((id *)a2 - 4);
      swift_retain();
      swift_retain();
      swift_retain();
      id v44 = v40;
      id v45 = v41;
      swift_retain();
      swift_retain();
      swift_retain();
      id v46 = v71;
      double v49 = v75(v46, v47, v48);
      double v51 = v50;
      double v56 = v73(v52, v53, v54);
      BOOL v57 = vabdd_f64(v51, v55) > 16.0 || v49 == v56;
      int v78 = v44;
      if (!v57) {
        break;
      }
      if (v51 >= v55)
      {
        if (v55 >= v51) {
          break;
        }
        char v58 = 0;
      }
      else
      {
        char v58 = 1;
      }
      uint64_t v59 = v83;
LABEL_68:
      long long v60 = v59 + 64;

      swift_release();
      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_release();

      if (v58)
      {
        long long v61 = v87 - 64;
        if (v60 != v87 || v59 >= v87)
        {
          long long v62 = *(_OWORD *)v61;
          long long v63 = *((_OWORD *)v87 - 3);
          long long v64 = *((_OWORD *)v87 - 1);
          *((_OWORD *)v59 + 2) = *((_OWORD *)v87 - 2);
          *((_OWORD *)v59 + 3) = v64;
          *(_OWORD *)uint64_t v59 = v62;
          *((_OWORD *)v59 + 1) = v63;
        }
        unint64_t v90 = v87 - 64;
      }
      else
      {
        uint64_t v88 = v38 - 64;
        long long v61 = v87;
        if (v60 < v38 || v59 >= v38 || v60 != v38)
        {
          long long v65 = *((_OWORD *)v38 - 4);
          long long v66 = *((_OWORD *)v38 - 3);
          long long v67 = *((_OWORD *)v38 - 1);
          *((_OWORD *)v59 + 2) = *((_OWORD *)v38 - 2);
          *((_OWORD *)v59 + 3) = v67;
          *(_OWORD *)uint64_t v59 = v65;
          *((_OWORD *)v59 + 1) = v66;
        }
        v38 -= 64;
      }
      if (v61 > v85)
      {
        BOOL v39 = v59 - 64;
        a2 = v61;
        if (v38 > v69) {
          continue;
        }
      }
      goto LABEL_80;
    }
    if (sub_1003E86EC())
    {
      uint64_t v59 = v83;
      if (v56 >= v49)
      {
        if (v49 < v56) {
          goto LABEL_67;
        }
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v59 = v83;
      if (v49 >= v56)
      {
        if (v56 < v49) {
          goto LABEL_67;
        }
LABEL_63:
        if (v42 >= v43)
        {
          if (v43 >= v42)
          {
            sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184, (uint64_t)"Should not get a tie when sorting calculate expressions.", 56, 2u, (uint64_t)_swiftEmptyArrayStorage);
            uint64_t v59 = v83;
            sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184);
          }
LABEL_67:
          char v58 = 0;
          goto LABEL_68;
        }
      }
    }
    char v58 = 1;
    goto LABEL_68;
  }
  if (v6 >= -63)
  {
    if (__dst != __src || &__src[64 * v8] <= __dst)
    {
      uint64_t v12 = a2;
      memmove(__dst, __src, v8 << 6);
      a2 = v12;
    }
    uint64_t v70 = &__dst[64 * v8];
    uint64_t v88 = v70;
    if ((unint64_t)a2 < a3 && v6 >= 64)
    {
      uint64_t v13 = v69;
      while (1)
      {
        double v84 = v5;
        id v86 = a2;
        uint64_t v14 = (void *)*((void *)a2 + 3);
        uint64_t v15 = (void *)*((void *)a2 + 4);
        double v16 = *((double *)a2 + 7);
        unint64_t v74 = (void *)*((void *)v13 + 3);
        int v76 = (double (*)(uint64_t, uint64_t, uint64_t))*((void *)v13 + 5);
        uint64_t v77 = (double (*)(id, uint64_t, uint64_t))*((void *)a2 + 5);
        double v17 = *((double *)v13 + 7);
        id v82 = *((id *)v13 + 4);
        swift_retain();
        swift_retain();
        swift_retain();
        id v80 = v14;
        id v79 = v15;
        swift_retain();
        swift_retain();
        swift_retain();
        id v18 = v74;
        double v21 = v77(v18, v19, v20);
        double v23 = v22;
        double v28 = v76(v24, v25, v26);
        if (vabdd_f64(v23, v27) > 16.0 || v21 == v28)
        {
          if (v23 < v27) {
            goto LABEL_27;
          }
          if (v27 < v23) {
            goto LABEL_32;
          }
        }
        if (sub_1003E86EC())
        {
          if (v28 < v21) {
            goto LABEL_27;
          }
          if (v21 < v28) {
            goto LABEL_32;
          }
        }
        else
        {
          if (v21 < v28) {
            goto LABEL_27;
          }
          if (v28 < v21) {
            goto LABEL_32;
          }
        }
        if (v16 < v17)
        {
LABEL_27:

          swift_release();
          swift_release();
          swift_release();

          swift_release();
          swift_release();
          swift_release();

          double v31 = v84;
          uint64_t v30 = v86;
          double v32 = v86 + 64;
          if (v84 == v86 && v84 < v32) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        if (v17 >= v16)
        {
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184, (uint64_t)"Should not get a tie when sorting calculate expressions.", 56, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateCalculateDocument()", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMathCalculationController.swift", 98, 2, 184);
        }
LABEL_32:

        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();

        double v33 = v13 + 64;
        double v31 = v84;
        uint64_t v69 = v13 + 64;
        uint64_t v30 = v13;
        if (v84 == v13)
        {
          double v32 = v86;
          v13 += 64;
          if (v84 < v33) {
            goto LABEL_37;
          }
        }
        else
        {
          double v32 = v86;
          v13 += 64;
        }
LABEL_36:
        long long v34 = *(_OWORD *)v30;
        long long v35 = *((_OWORD *)v30 + 1);
        long long v36 = *((_OWORD *)v30 + 3);
        *((_OWORD *)v31 + 2) = *((_OWORD *)v30 + 2);
        *((_OWORD *)v31 + 3) = v36;
        *(_OWORD *)double v31 = v34;
        *((_OWORD *)v31 + 1) = v35;
LABEL_37:
        int v5 = v31 + 64;
        if (v13 < v70)
        {
          a2 = v32;
          if ((unint64_t)v32 < a3) {
            continue;
          }
        }
        unint64_t v89 = v69;
        unint64_t v90 = v5;
        goto LABEL_80;
      }
    }
    goto LABEL_80;
  }
LABEL_81:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100987B9C()
{
  id v0 = [self defaultCenter];
  id v1 = v0;
  if (qword_10166F568 != -1)
  {
    swift_once();
    id v0 = v1;
  }
  [v0 postNotificationName:static CRLMathCalculationController.mathHintsModeChangedNotificationName object:0 userInfo:0];
}

uint64_t sub_100987C40()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return sub_100987C94(v0);
}

uint64_t sub_100987C94(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_100987CC0()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  return sub_100987C94(v0);
}

void _s8Freeform28CRLMathCalculationControllerC13mathHintsModeAA0bfG0Ovs_0(uint64_t a1)
{
  uint64_t v7 = &type metadata for CRLPencilAndPaperFeatureFlags;
  unint64_t v8 = sub_1005C5D40();
  v6[0] = 0;
  char v2 = isFeatureEnabled(_:)();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v6);
  if (v2)
  {
    uint64_t v7 = &type metadata for CRLFeatureFlags;
    unint64_t v8 = sub_1005396A8();
    v6[0] = 15;
    char v3 = isFeatureEnabled(_:)();
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v6);
    if (v3)
    {
      if (qword_10166F928 != -1) {
        swift_once();
      }
      uint64_t v4 = (unsigned char *)(qword_101692F10
                   + OBJC_IVAR____TtC8Freeform38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
      swift_beginAccess();
      if (*v4 == 1)
      {
        id v5 = [self standardUserDefaults];
        [v5 setInteger:a1 forKey:@"CRLMathRecognitionMode"];
      }
    }
  }
}

unint64_t sub_100987FB4()
{
  unint64_t result = qword_101688DA0;
  if (!qword_101688DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688DA0);
  }
  return result;
}

unint64_t sub_10098800C()
{
  unint64_t result = qword_101688DA8;
  if (!qword_101688DA8)
  {
    sub_100522D34(&qword_101688DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101688DA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLMathHintsMode()
{
  return &type metadata for CRLMathHintsMode;
}

uint64_t destroy for CRLMathCalculationControllerExpression(uint64_t a1)
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CRLMathCalculationControllerExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  swift_retain();
  id v6 = v4;
  id v7 = (id)v9;
  swift_retain();
  return a1;
}

void *assignWithCopy for CRLMathCalculationControllerExpression(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v5 = (void *)a1[3];
  id v6 = (void *)a2[3];
  a1[3] = v6;
  id v7 = v6;

  unint64_t v8 = (void *)a1[4];
  long long v9 = (void *)a2[4];
  a1[4] = v9;
  id v10 = v9;

  uint64_t v11 = a2[6];
  a1[5] = a2[5];
  a1[6] = v11;
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for CRLMathCalculationControllerExpression(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  uint64_t v5 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for CRLMathCalculationControllerExpression()
{
  return &type metadata for CRLMathCalculationControllerExpression;
}

id sub_100988278(id result, void *a2, void *a3)
{
  if (result)
  {
    id v4 = result;
    id v5 = a2;
    return a3;
  }
  return result;
}

uint64_t sub_1009882C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100988324(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100988380()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100988468()
{
  return sub_100988B74((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1009555C8);
}

uint64_t sub_100988480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100988490()
{
  return swift_release();
}

void sub_10098849C()
{
}

uint64_t sub_1009884A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009884BC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100988588()
{
}

void sub_100988594(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  sub_1009550FC(*(void ***)(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_1009885FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10098860C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10098864C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100988684()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100528D08;
  return _swift_task_switch(sub_10095264C, 0, 0);
}

const char *sub_100988728()
{
  return "CRLMathRecognitionMode";
}

id sub_100988734@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 CRLMathRecognitionMode];
  *a2 = result;
  return result;
}

uint64_t sub_100988768(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009887D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100988838(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009888A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100988900()
{
  unint64_t result = qword_101689218;
  if (!qword_101689218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101689218);
  }
  return result;
}

uint64_t sub_100988954(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1009889A0()
{
}

void sub_1009889CC()
{
}

void sub_1009889F4(void *a1, uint64_t *a2, void (*a3)(unint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  sub_100955BC0(*(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a1, a2, a3);
}

uint64_t sub_100988A74()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100988B5C()
{
  return sub_100988B74((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100954124);
}

uint64_t sub_100988B74(uint64_t (*a1)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v4, v1 + v3, v5);
}

uint64_t sub_100988C18()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100988C60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_100528488;
  return sub_1009542A8(a1, v4, v5, v7, v6);
}

uint64_t sub_100988D50@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v6 = *(void *)swift_dynamicCastClassUnconditional();
  (*(void (**)(void))(v6 + 760))();
  swift_retain();
  sub_1005057FC(&qword_101689320);
  CRRegister.wrappedValue.getter();
  int v7 = v9[3];
  sub_10099112C((uint64_t)v5, type metadata accessor for CRLWPShapeItemCRDTData);
  uint64_t result = swift_release();
  *a1 = v7;
  return result;
}

void sub_100988F6C()
{
  uint64_t v1 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6, v7);
  long long v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  __n128 v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(char **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (v15)
  {
    uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (v16)
    {
      (*(void (**)(__n128))(*(void *)v16 + 760))(v12);
      sub_100990654((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
      double v17 = v15;
      sub_10099112C((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v14, v1);
      sub_10099112C((uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
      id v18 = (void *)CRAttributedString.attributedString.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      [v18 length];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100989210()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                         + 288);
  uint64_t v4 = swift_retain();
  uint64_t v5 = (void *)v3(v4);
  swift_release();
  unsigned int v6 = [v5 widthValid];

  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + v2) + 288);
  uint64_t v8 = swift_retain();
  long long v9 = (void *)v7(v8);
  swift_release();
  unsigned int v10 = [v9 heightValid];

  return v10 ^ 1;
}

char *sub_100989314(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100989358(a1, a2);
}

char *sub_100989358(void *a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage] = 0;
  v2[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textIsVertical] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = a1;
  *(void *)&v2[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = a2;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for CRLBoardItemBase(0);
  id v5 = a1;
  swift_retain();
  [super init];
  sub_1005C6DF0((uint64_t)v19);
  sub_10051B3EC((uint64_t)v19, (uint64_t)v18, &qword_10168D670);
  id v7 = objc_allocWithZone((Class)type metadata accessor for CRLWPStorage());
  id v8 = v5;
  swift_retain();
  long long v9 = (char *)v6;
  id v10 = sub_100913E24(v8, a2, v18);

  swift_release();
  uint64_t v11 = OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage;
  __n128 v12 = *(void **)&v9[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage];
  *(void *)&v9[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage] = v10;

  uint64_t v13 = *(void **)&v9[v11];
  if (v13)
  {
    uint64_t v14 = v9;
    id v15 = v13;
    sub_1008FD30C((uint64_t)v9);
  }
  swift_release();
  return v9;
}

BOOL sub_1009894F4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0;
  uint64_t v3 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                         + 288);
  id v5 = v1;
  uint64_t v6 = swift_retain();
  id v7 = (void *)v4(v6);
  swift_release();
  unsigned int v8 = [v7 widthValid];

  if (v8)
  {
    long long v9 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + v3) + 288);
    uint64_t v10 = swift_retain();
    uint64_t v11 = (void *)v9(v10);
    swift_release();
    unsigned __int8 v12 = [v11 heightValid];

    if (v12)
    {

      return 0;
    }
  }
  id v14 = [v5 characterCount];

  return v14 == 0;
}

void sub_10098979C()
{
  uint64_t v1 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6, v7);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  __n128 v12 = __chkstk_darwin(v10 - 8, v11);
  id v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = *(char **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (v15)
  {
    uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (v16)
    {
      (*(void (**)(__n128))(*(void *)v16 + 760))(v12);
      sub_100990654((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
      objc_super v17 = v15;
      sub_10099112C((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v14, v1);
      sub_10099112C((uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
      id v18 = (void *)CRAttributedString.attributedString.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      id v19 = [v18 string];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      __break(1u);
    }
  }
}

char *sub_100989AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a4;
  uint64_t v52 = a2;
  uint64_t v5 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v53 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v49 = (uint64_t)&v49 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v55 = (uint64_t)&v49 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v51 = (uint64_t)&v49 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v50 = (uint64_t)&v49 - v27;
  __chkstk_darwin(v28, v29);
  double v31 = (char *)&v49 - v30;
  uint64_t v54 = v4;
  type metadata accessor for CRLWPShapeItemData(0);
  double v32 = *(uint64_t (**)(uint64_t))(*(void *)swift_dynamicCastClassUnconditional() + 440);
  swift_retain();
  uint64_t v33 = v32(1);
  swift_release();
  uint64_t v34 = v33 + *(void *)(*(void *)v33 + 632);
  swift_beginAccess();
  sub_100522E9C(v34, (uint64_t)v12, &qword_1016892B0);
  swift_retain();
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522E9C((uint64_t)v8, (uint64_t)v31, (uint64_t *)&unk_101674520);
  sub_10099112C((uint64_t)v8, type metadata accessor for CRLShapeItemParentAffinity);
  sub_100522F00((uint64_t)v12, &qword_1016892B0);
  swift_release();
  swift_beginAccess();
  long long v35 = (char *)v34;
  uint64_t v36 = (uint64_t)v58;
  sub_100F9A0B8(v56);
  swift_endAccess();
  if (v36)
  {
    swift_release();
    sub_100522F00((uint64_t)v31, (uint64_t *)&unk_101674520);
  }
  else
  {
    uint64_t v56 = v9;
    uint64_t v37 = v51;
    sub_100522E9C(v52, v51, (uint64_t *)&unk_101674520);
    char v58 = v31;
    sub_100522E9C((uint64_t)v31, v55, (uint64_t *)&unk_101674520);
    uint64_t v38 = type metadata accessor for UUID();
    uint64_t v39 = *(void *)(v38 - 8);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
    uint64_t v41 = v50;
    if (v40 == 1)
    {
      sub_10051B3EC(v55, v50, (uint64_t *)&unk_101674520);
      swift_retain();
      sub_100522F00(v37, (uint64_t *)&unk_101674520);
    }
    else
    {
      swift_retain();
      sub_100522F00(v55, (uint64_t *)&unk_101674520);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v37, v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
    }
    uint64_t v42 = v49;
    sub_100522E9C(v41, v49, (uint64_t *)&unk_101674520);
    swift_beginAccess();
    uint64_t v43 = v53;
    sub_100522E9C(v42, v53, (uint64_t *)&unk_101674520);
    id v44 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    sub_1006063BC(v43, v45, (uint64_t *)&unk_101674520);
    v44(v57, 0);
    sub_100522F00(v42, (uint64_t *)&unk_101674520);
    swift_endAccess();
    sub_100522F00(v41, (uint64_t *)&unk_101674520);
    swift_release();
    id v46 = *(void **)(v54 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
    id v47 = objc_allocWithZone((Class)type metadata accessor for CRLWPShapeItem());
    long long v35 = sub_100989358(v46, v33);
    sub_100522F00((uint64_t)v58, (uint64_t *)&unk_101674520);
  }
  return v35;
}

uint64_t sub_10098A03C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                         + 288);
  uint64_t v4 = swift_retain();
  uint64_t v5 = (void *)v3(v4);
  swift_release();
  unsigned int v6 = [v5 widthValid];

  if (v6
    && (uint64_t v7 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + v2) + 288),
        uint64_t v8 = swift_retain(),
        uint64_t v9 = (void *)v7(v8),
        swift_release(),
        unsigned __int8 v10 = [v9 heightValid],
        v9,
        (v10 & 1) != 0))
  {
    uint64_t v11 = *(void **)(v1 + v2);
    __n128 v12 = (uint64_t (**)(void))(*v11 + 408);
    uint64_t v13 = *v12;
    uint64_t v14 = (*v12)();
    if ((v15 & 1) != 0 && v14 == 1)
    {
      uint64_t v16 = *v11;
      uint64_t result = swift_conformsToProtocol2();
      if (result)
      {
        uint64_t v18 = *(uint64_t (**)(uint64_t))(v16 + 704);
        uint64_t v19 = swift_retain();
        uint64_t v20 = (void *)v18(v19);
        swift_release();
        id v21 = [v20 inferredAccessibilityDescriptionNoShapeNames];

        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        return v22;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      ((void (*)(uint64_t))v13)(v14);
      return sub_10088BE6C();
    }
  }
  else
  {
    id v23 = [self mainBundle];
    NSString v24 = String._bridgeToObjectiveC()();
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v23 localizedStringForKey:v24 value:v25 table:0];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v27;
  }
  return result;
}

id sub_10098A320(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_10098A390()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                         + 288);
  uint64_t v4 = swift_retain();
  NSString v5 = (void *)v3(v4);
  swift_release();
  unsigned int v6 = [v5 widthValid];

  if (v6
    && (uint64_t v7 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + v2) + 288),
        uint64_t v8 = swift_retain(),
        uint64_t v9 = (void *)v7(v8),
        swift_release(),
        unsigned __int8 v10 = [v9 heightValid],
        v9,
        (v10 & 1) != 0))
  {
    uint64_t v11 = *(void **)(v1 + v2);
    __n128 v12 = (uint64_t (**)(void))(*v11 + 408);
    uint64_t v13 = *v12;
    uint64_t v14 = (*v12)();
    if ((v15 & 1) != 0 && v14 == 1)
    {
      uint64_t v16 = *v11;
      uint64_t result = swift_conformsToProtocol2();
      if (result)
      {
        uint64_t v18 = *(uint64_t (**)(uint64_t))(v16 + 704);
        uint64_t v19 = swift_retain();
        uint64_t v20 = (void *)v18(v19);
        swift_release();
        id v21 = [v20 inferredLocalizedAccessibilityDescriptionPlaceholder];

        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        return v22;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      ((void (*)(uint64_t))v13)(v14);
      return sub_10088C380();
    }
  }
  else
  {
    id v23 = [self mainBundle];
    NSString v24 = String._bridgeToObjectiveC()();
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v23 localizedStringForKey:v24 value:v25 table:0];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v27;
  }
  return result;
}

void sub_10098A65C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v1) {
    goto LABEL_9;
  }
  id v6 = v1;
  id v2 = [v6 range];
  BOOL v4 = __OFADD__(v2, v3);
  int64_t v5 = (int64_t)v2 + v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < (uint64_t)v2)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  sub_100901520((uint64_t)v2, v5, 0, 0xE000000000000000, 1);
}

float sub_10098A8D4()
{
  uint64_t v0 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v4 = *(void *)swift_dynamicCastClassUnconditional();
  (*(void (**)(void))(v4 + 760))();
  swift_retain();
  sub_1005057FC(&qword_101689320);
  CRRegister.wrappedValue.getter();
  float v5 = *(float *)&v7[3];
  sub_10099112C((uint64_t)v3, type metadata accessor for CRLWPShapeItemCRDTData);
  swift_release();
  return v5;
}

uint64_t sub_10098AA68()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (v2 = Strong, char v3 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v2,
                     (v3 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v7, v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v4 = *(uint64_t (**)(unsigned char *))(*(void *)swift_dynamicCastClassUnconditional() + 776);
    swift_retain();
    float v5 = (void (*)(unsigned char *, void))v4(v9);
    type metadata accessor for CRLWPShapeItemCRDTData(0);
    sub_1005057FC(&qword_101689320);
    CRRegister.wrappedValue.setter();
    v5(v9, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_10098AD44()
{
  type metadata accessor for CRLWPShapeItemData(0);
  swift_dynamicCastClassUnconditional();
  swift_retain();
  uint64_t v0 = sub_1005DB5E0();
  swift_release();
  return v0;
}

uint64_t sub_10098AE04()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (v2 = Strong, char v3 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v2,
                     (v3 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v7, v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v4 = *(uint64_t (**)(unsigned char *))(*(void *)swift_dynamicCastClassUnconditional() + 776);
    swift_retain();
    float v5 = (void (*)(unsigned char *, void))v4(v9);
    type metadata accessor for CRLWPShapeItemCRDTData(0);
    type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
    sub_1005057FC(&qword_101675308);
    CRRegister.wrappedValue.setter();
    v5(v9, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_10098B1D0()
{
  uint64_t v0 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v0, v1);
  char v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v4 = *(void *)swift_dynamicCastClassUnconditional();
  (*(void (**)(void))(v4 + 760))();
  type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
  swift_retain();
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.getter();
  uint64_t v5 = v7[15];
  sub_10099112C((uint64_t)v3, type metadata accessor for CRLWPShapeItemCRDTData);
  swift_release();
  return v5;
}

uint64_t sub_10098B368()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (v2 = Strong, char v3 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v2,
                     (v3 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v7, v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v4 = *(uint64_t (**)(unsigned char *))(*(void *)swift_dynamicCastClassUnconditional() + 776);
    swift_retain();
    uint64_t v5 = (void (*)(unsigned char *, void))v4(v9);
    type metadata accessor for CRLWPShapeItemCRDTData(0);
    type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
    sub_1005057FC((uint64_t *)&unk_101689310);
    CRRegister.wrappedValue.setter();
    v5(v9, 0);
    return swift_release();
  }
  return result;
}

double sub_10098B5CC(double a1, double a2)
{
  char v3 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  double v4 = 0.0;
  if (v3)
  {
    int v7 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textIsVertical);
    id v8 = v3;
    if ((uint64_t)[v8 paragraphCount] >= 1
      && (uint64_t v9 = (char *)[v8 paragraphStyleAtCharIndex:0 effectiveRange:0]) != 0)
    {
      uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC8Freeform19CRLWPParagraphStyle_alignment];

      switch(v10)
      {
        case 1:

          if (v7) {
            double v4 = a2;
          }
          else {
            double v4 = a1;
          }
          break;
        case 2:

          if (v7) {
            double v12 = a2;
          }
          else {
            double v12 = a1;
          }
          double v4 = v12 * 0.5;
          break;
        case 4:
          unsigned int v13 = [v8 isWritingDirectionRightToLeftForParagraphAtParIndex:0];

          if (v7) {
            double v14 = a2;
          }
          else {
            double v14 = a1;
          }
          if (v13) {
            double v4 = v14;
          }
          else {
            double v4 = 0.0;
          }
          break;
        default:
          goto LABEL_5;
      }
    }
    else
    {
LABEL_5:
    }
  }
  return v4;
}

uint64_t sub_10098B720()
{
  return swift_release();
}

double sub_10098B818(void *a1, void *a2)
{
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    id v6 = (void *)v5;
    id v7 = a2;
    [v6 pathBoundsWithoutStroke];
    double v9 = v8;
    double v11 = v10;
    int v12 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textIsVertical);
    if ([a1 widthValid])
    {
      double v13 = 0.0;
      if (([a1 heightValid] & 1) == 0)
      {
        if (!v12) {
          goto LABEL_11;
        }
        goto LABEL_9;
      }
    }
    else if (v12)
    {
      sub_10098B720();
      double v13 = v14;
      if (([a1 heightValid] & 1) == 0) {
LABEL_9:
      }
        sub_10098B5CC(v9, v11);
    }
    else
    {
      double v13 = sub_10098B5CC(v9, v11);
      if (([a1 heightValid] & 1) == 0) {
LABEL_11:
      }
        sub_10098B720();
    }

    return v13;
  }
  return 0.0;
}

double sub_10098B9D0(void *a1, double a2, double a3)
{
  int v7 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textIsVertical);
  if ([a1 widthValid])
  {
    double v8 = 0.0;
    if (([a1 heightValid] & 1) == 0)
    {
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if (v7)
  {
    sub_10098B720();
    double v8 = v9;
    if (([a1 heightValid] & 1) == 0) {
LABEL_7:
    }
      sub_10098B5CC(a2, a3);
  }
  else
  {
    double v8 = sub_10098B5CC(a2, a3);
    if (([a1 heightValid] & 1) == 0) {
LABEL_9:
    }
      sub_10098B720();
  }
  return v8;
}

CGFloat sub_10098BB30@<D0>(void *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v9 = 0.0;
  if ([a1 widthValid]) {
    double v10 = a3;
  }
  else {
    double v10 = 0.0;
  }
  if ([a1 heightValid]) {
    double v11 = a4;
  }
  else {
    double v11 = 0.0;
  }
  [a1 transformBasedOnRect:0.0, 0.0, v10, v11];
  char v12 = *(unsigned char *)(v4 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textIsVertical);
  if ([a1 widthValid])
  {
    unsigned __int8 v13 = [a1 heightValid];
    double v14 = 0.0;
    if ((v13 & 1) == 0)
    {
      if ((v12 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else if (v12)
  {
    sub_10098B720();
    double v9 = v15;
    unsigned __int8 v16 = [a1 heightValid];
    double v14 = 0.0;
    if ((v16 & 1) == 0) {
LABEL_13:
    }
      double v14 = sub_10098B5CC(a3, a4);
  }
  else
  {
    double v9 = sub_10098B5CC(a3, a4);
    unsigned __int8 v17 = [a1 heightValid];
    double v14 = 0.0;
    if ((v17 & 1) == 0) {
LABEL_15:
    }
      sub_10098B720();
  }
  CGAffineTransformTranslate(&v21, &v22, -v9, -v14);
  CGFloat result = v21.a;
  long long v19 = *(_OWORD *)&v21.c;
  long long v20 = *(_OWORD *)&v21.tx;
  *a2 = *(_OWORD *)&v21.a;
  a2[1] = v19;
  a2[2] = v20;
  return result;
}

void *sub_10098BD44@<X0>(uint64_t *a1@<X8>)
{
  sub_100EC3284(v1, 1, (uint64_t)__src);
  a1[3] = (uint64_t)&type metadata for CRLWPShapePresetData;
  a1[4] = sub_100990F3C();
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  return memcpy((void *)(v3 + 16), __src, 0x370uLL);
}

BOOL sub_10098BDBC(unsigned __int8 a1)
{
  int v3 = (*(unsigned __int8 (**)(void))((swift_isaMask & *v1) + 0x440))();
  if (v3 != 6 && v3 == a1) {
    return 1;
  }
  uint64_t v4 = a1 + 1;
  if (v4 == 5) {
    return 1;
  }
  char v6 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x440))();
  if (v6 == 6) {
    return 0;
  }
  return !v6 && v4 == 6;
}

uint64_t sub_10098BED4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v3 = **(void **)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 704);
    uint64_t v6 = swift_retain();
    uint64_t v7 = v5(v6);
    swift_release();
    id v8 = [(id)v7 bezierPath];

    LOBYTE(v7) = [v8 isLineSegment];
    if (v7) {
      return 0;
    }
    uint64_t v9 = **(void **)(v1 + v2);
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      double v10 = *(uint64_t (**)(uint64_t))(v9 + 704);
      uint64_t v11 = swift_retain();
      uint64_t v12 = v10(v11);
      swift_release();
      id v13 = [(id)v12 bezierPath];

      LOBYTE(v12) = [v13 isLineSegment];
      if ((v12 & 1) == 0)
      {
        double v14 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + v2) + 288);
        uint64_t v15 = swift_retain();
        unsigned __int8 v16 = (void *)v14(v15);
        swift_release();
        unsigned int v17 = [v16 widthValid];

        if (v17)
        {
          uint64_t v18 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + v2) + 288);
          uint64_t v19 = swift_retain();
          long long v20 = (void *)v18(v19);
          swift_release();
          id v21 = [v20 heightValid];

          return (uint64_t)v21;
        }
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10098C178()
{
  return sub_10098C358(&qword_1016893A0);
}

uint64_t sub_10098C1E4()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    type metadata accessor for CRLFreehandDrawingItem();
    if ([v1 isKindOfClass:swift_getObjCClassFromMetadata()])
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152, (uint64_t)"Regular shapes should not be inside freehand drawings.", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152);
    }
  }
  return sub_10050BF48(0, &qword_101689398);
}

uint64_t sub_10098C344()
{
  return sub_10098C358((unint64_t *)&qword_101689390);
}

uint64_t sub_10098C358(unint64_t *a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    type metadata accessor for CRLFreehandDrawingItem();
    if ([v3 isKindOfClass:swift_getObjCClassFromMetadata()])
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152, (uint64_t)"Regular shapes should not be inside freehand drawings.", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152);
    }
  }
  return sub_10050BF48(0, a1);
}

char *sub_10098C47C()
{
  uint64_t v1 = v0;
  type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)swift_dynamicCastClassUnconditional() + 440);
  swift_retain();
  uint64_t v3 = v2(0);
  swift_release();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
  id v5 = objc_allocWithZone((Class)type metadata accessor for CRLWPShapeItem());
  return sub_100989358(v4, v3);
}

uint64_t sub_10098C568(uint64_t a1)
{
  uint64_t v3 = (int *)sub_1005057FC((uint64_t *)&unk_101689330);
  uint64_t v4 = *((void *)v3 - 1);
  __chkstk_darwin(v3, v5);
  uint64_t v41 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v7, v8);
  double v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  double v14 = (char *)&v41 - v13;
  uint64_t v15 = sub_1005057FC(&qword_101689328);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLWPShapeItem();
  uint64_t v19 = swift_dynamicCastClass();
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v43 = a1;
    swift_unknownObjectRetain();
    uint64_t v42 = sub_100CF6354(v20, v1);
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v21 = *(void *)swift_dynamicCastClassUnconditional();
    (*(void (**)(void))(v21 + 760))();
    uint64_t v22 = *(void *)swift_dynamicCastClassUnconditional();
    (*(void (**)(void))(v22 + 760))();
    sub_100990EF4(&qword_101689360, (void (*)(uint64_t))type metadata accessor for CRLWPShapeItemCRDTData);
    CRStruct_4.actionUndoingDifference(from:)();
    sub_10099112C((uint64_t)v10, type metadata accessor for CRLWPShapeItemCRDTData);
    sub_10099112C((uint64_t)v14, type metadata accessor for CRLWPShapeItemCRDTData);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v18, 1, v3) == 1)
    {
      sub_100522F00((uint64_t)v18, &qword_101689328);
      memset(v44, 0, sizeof(v44));
      uint64_t v45 = 1;
    }
    else
    {
      uint64_t v23 = v3[12];
      uint64_t v24 = (uint64_t)&v18[v23];
      uint64_t v25 = v3[16];
      uint64_t v26 = (uint64_t)&v18[v25];
      uint64_t v27 = v3[20];
      uint64_t v28 = (uint64_t)&v18[v27];
      uint64_t v29 = v41;
      uint64_t v30 = v41 + v23;
      uint64_t v31 = v41 + v25;
      uint64_t v32 = v41 + v27;
      sub_10051B3EC((uint64_t)v18, v41, &qword_101689340);
      sub_10051B3EC(v24, v30, &qword_101689348);
      sub_10051B3EC(v26, v31, &qword_101689350);
      sub_10051B3EC(v28, v32, &qword_101689358);
      uint64_t v45 = (uint64_t)v3;
      uint64_t v33 = sub_1005767BC(v44);
      uint64_t v34 = (uint64_t)v33 + v3[12];
      uint64_t v35 = (uint64_t)v33 + v3[16];
      uint64_t v36 = (uint64_t)v33 + v3[20];
      sub_10051B3EC(v29, (uint64_t)v33, &qword_101689340);
      sub_10051B3EC(v30, v34, &qword_101689348);
      sub_10051B3EC(v31, v35, &qword_101689350);
      sub_10051B3EC(v32, v36, &qword_101689358);
    }
    uint64_t v37 = v42;
    swift_beginAccess();
    sub_10057D560((uint64_t)v44, 5);
    swift_endAccess();
    swift_unknownObjectRelease();
    return v37;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 310, (uint64_t)"Tried to generate undo from mismatched type", 43, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to generate undo from mismatched type");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 310);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v39, v40);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10098CAC8(uint64_t a1)
{
  Swift::Int v93 = (int *)sub_1005057FC(&qword_101689368);
  uint64_t v3 = *((void *)v93 - 1);
  __chkstk_darwin(v93, v4);
  unint64_t v89 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v88 = (char *)&v84 - v8;
  __chkstk_darwin(v9, v10);
  uint64_t v85 = (uint64_t)&v84 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v90 = (uint64_t)&v84 - v14;
  uint64_t v15 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v84 - v21;
  uint64_t v23 = sub_1005057FC((uint64_t *)&unk_101689370);
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v84 - v29;
  type metadata accessor for CRLWPShapeItem();
  uint64_t v31 = swift_dynamicCastClass();
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v92 = a1;
    swift_unknownObjectRetain();
    uint64_t v91 = sub_100CF66BC(v32, v1);
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v33 = *(void *)swift_dynamicCastClassUnconditional();
    (*(void (**)(void))(v33 + 760))();
    uint64_t v34 = *(void *)swift_dynamicCastClassUnconditional();
    (*(void (**)(void))(v34 + 760))();
    sub_100990EF4(&qword_1016754C0, (void (*)(uint64_t))type metadata accessor for CRLWPShapeItemCRDTData);
    CRType.observableDifference(from:)();
    sub_10099112C((uint64_t)v18, type metadata accessor for CRLWPShapeItemCRDTData);
    sub_10099112C((uint64_t)v22, type metadata accessor for CRLWPShapeItemCRDTData);
    sub_100522E9C((uint64_t)v30, (uint64_t)v26, (uint64_t *)&unk_101689370);
    uint64_t v35 = v93;
    uint64_t v36 = (uint64_t)v30;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v3 + 48))(v26, 1, v93) == 1)
    {
      sub_100522F00((uint64_t)v26, (uint64_t *)&unk_101689370);
      uint64_t v37 = _swiftEmptyArrayStorage;
      uint64_t v38 = v91;
      if (*(void *)&_swiftEmptyArrayStorage[2])
      {
LABEL_4:
        if (*(void *)(v38 + 16) && (unint64_t v39 = sub_100956360(5), (v40 & 1) != 0))
        {
          uint64_t v95 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
          swift_bridgeObjectRetain();
          sub_1006E0CB8((uint64_t)v37);
          uint64_t v41 = v95;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v94 = v38;
          sub_100972448(v41, 5, isUniquelyReferenced_nonNull_native);
          uint64_t v38 = v94;
        }
        else
        {
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v95 = v38;
          sub_100972448((uint64_t)v37, 5, v59);
          uint64_t v38 = v95;
        }
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
    else
    {
      double v84 = v30;
      uint64_t v43 = v35[12];
      uint64_t v44 = v90;
      uint64_t v45 = v90 + v43;
      uint64_t v46 = v35[16];
      uint64_t v47 = v90 + v46;
      uint64_t v48 = v35[20];
      uint64_t v49 = v90 + v48;
      uint64_t v50 = (uint64_t)&v26[v43];
      uint64_t v51 = (uint64_t)&v26[v46];
      uint64_t v52 = (uint64_t)&v26[v48];
      sub_10051B3EC((uint64_t)v26, v90, &qword_101689380);
      sub_10051B3EC(v50, v45, &qword_1016892C0);
      sub_10051B3EC(v51, v47, &qword_1016892D0);
      sub_10051B3EC(v52, v49, &qword_10167D310);
      uint64_t v53 = v85;
      uint64_t v54 = v85 + v35[12];
      uint64_t v55 = v85 + v35[16];
      uint64_t v56 = v85 + v35[20];
      sub_100522E9C(v44, v85, &qword_101689380);
      uint64_t v86 = v45;
      sub_100522E9C(v45, v54, &qword_1016892C0);
      uint64_t v87 = v47;
      sub_100522E9C(v47, v55, &qword_1016892D0);
      sub_100522E9C(v49, v56, &qword_10167D310);
      uint64_t v57 = sub_1005057FC(&qword_101689388);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v53, 1, v57) == 1)
      {
        sub_100522F00(v56, &qword_10167D310);
        sub_100522F00(v55, &qword_1016892D0);
        sub_100522F00(v54, &qword_1016892C0);
        sub_100522F00(v53, &qword_101689380);
        uint64_t v38 = v91;
        uint64_t v36 = (uint64_t)v84;
        uint64_t v58 = (uint64_t)v88;
      }
      else
      {
        sub_100522F00(v53, &qword_101689380);
        sub_100522F00(v56, &qword_10167D310);
        sub_100522F00(v55, &qword_1016892D0);
        sub_100522F00(v54, &qword_1016892C0);
        uint64_t v38 = v91;
        uint64_t v36 = (uint64_t)v84;
        uint64_t v58 = (uint64_t)v88;
        if (!*(void *)(v91 + 16) || (sub_100956360(5), (v60 & 1) == 0))
        {
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 331, (uint64_t)"If superData has changed, super should have built keys for it already.", 70, 2u, (uint64_t)_swiftEmptyArrayStorage);
          uint64_t v36 = (uint64_t)v84;
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 331);
        }
      }
      uint64_t v61 = v58 + v93[12];
      uint64_t v62 = v58 + v93[16];
      uint64_t v63 = v58 + v93[20];
      uint64_t v64 = v90;
      sub_100522E9C(v90, v58, &qword_101689380);
      sub_100522E9C(v86, v61, &qword_1016892C0);
      sub_100522E9C(v87, v62, &qword_1016892D0);
      sub_100522E9C(v49, v63, &qword_10167D310);
      uint64_t v65 = sub_1005057FC(&qword_1016892C8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v61, 1, v65) == 1)
      {
        sub_100522F00(v63, &qword_10167D310);
        sub_100522F00(v62, &qword_1016892D0);
        sub_100522F00(v61, &qword_1016892C0);
        sub_100522F00(v58, &qword_101689380);
        uint64_t v37 = _swiftEmptyArrayStorage;
        uint64_t v66 = (uint64_t)v89;
        long long v67 = v93;
      }
      else
      {
        uint64_t v68 = v49;
        sub_100522F00(v61, &qword_1016892C0);
        sub_100522F00(v63, &qword_10167D310);
        sub_100522F00(v62, &qword_1016892D0);
        sub_100522F00(v58, &qword_101689380);
        uint64_t v37 = sub_100F61B70(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v70 = *((void *)v37 + 2);
        unint64_t v69 = *((void *)v37 + 3);
        uint64_t v66 = (uint64_t)v89;
        if (v70 >= v69 >> 1) {
          uint64_t v37 = sub_100F61B70((double *)(v69 > 1), v70 + 1, 1, v37);
        }
        *((void *)v37 + 2) = v70 + 1;
        uint64_t v71 = &v37[2 * v70];
        v71[4] = -2.31584178e77;
        *((void *)v71 + 5) = 0x8000000101263FF0;
        uint64_t v49 = v68;
        long long v67 = v93;
      }
      uint64_t v72 = v66 + v67[12];
      uint64_t v73 = v66 + v67[16];
      uint64_t v74 = v66 + v67[20];
      sub_100522E9C(v64, v66, &qword_101689380);
      sub_100522E9C(v86, v72, &qword_1016892C0);
      sub_100522E9C(v87, v73, &qword_1016892D0);
      sub_100522E9C(v49, v74, &qword_10167D310);
      uint64_t v75 = sub_1005057FC((uint64_t *)&unk_1016892D8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v73, 1, v75) == 1)
      {
        sub_100522F00(v64, &qword_101689368);
        sub_100522F00(v74, &qword_10167D310);
        sub_100522F00(v73, &qword_1016892D0);
        sub_100522F00(v72, &qword_1016892C0);
        int v76 = &qword_101689380;
        uint64_t v77 = v66;
      }
      else
      {
        sub_100522F00(v73, &qword_1016892D0);
        sub_100522F00(v74, &qword_10167D310);
        sub_100522F00(v72, &qword_1016892C0);
        sub_100522F00(v66, &qword_101689380);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v37 = sub_100F61B70(0, *((void *)v37 + 2) + 1, 1, v37);
        }
        unint64_t v79 = *((void *)v37 + 2);
        unint64_t v78 = *((void *)v37 + 3);
        if (v79 >= v78 >> 1) {
          uint64_t v37 = sub_100F61B70((double *)(v78 > 1), v79 + 1, 1, v37);
        }
        *((void *)v37 + 2) = v79 + 1;
        id v80 = &v37[2 * v79];
        v80[4] = -2.31584178e77;
        *((void *)v80 + 5) = 0x8000000101263FD0;
        int v76 = &qword_101689368;
        uint64_t v77 = v64;
      }
      sub_100522F00(v77, v76);
      if (*((void *)v37 + 2)) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_28:
    sub_100522F00(v36, (uint64_t *)&unk_101689370);
    return v38;
  }
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 322, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
  sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 322);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v82, v83);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10098D69C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1005057FC(&qword_101689328);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v13 = (int *)sub_1005057FC((uint64_t *)&unk_101689330);
  uint64_t v14 = *((void *)v13 - 1);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10088B69C(a1);
  if (!v2)
  {
    uint64_t v19 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform31CRLTransactableUndoingMutations_values);
    swift_beginAccess();
    uint64_t v20 = *v19;
    if (*(void *)(v20 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_100956360(5);
      if (v22)
      {
        sub_100522E9C(*(void *)(v20 + 56) + 32 * v21, (uint64_t)&v45, &qword_101672BF0);
      }
      else
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 1;
      }
      swift_bridgeObjectRelease();
      if (v48 != 1)
      {
        sub_10051B3EC((uint64_t)&v45, (uint64_t)v49, &qword_101672BF0);
        if (v50)
        {
          int v27 = swift_dynamicCast();
          uint64_t v28 = *(void (**)(char *, void, uint64_t, int *))(v14 + 56);
          v28(v12, v27 ^ 1u, 1, v13);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13) != 1)
          {
            uint64_t v29 = v13[12];
            uint64_t v30 = (uint64_t)&v17[v29];
            uint64_t v31 = v13[16];
            uint64_t v43 = v28;
            uint64_t v44 = &v17[v31];
            uint64_t v32 = v13[20];
            uint64_t v51 = &v17[v32];
            uint64_t v33 = (uint64_t)&v12[v29];
            char v40 = &v12[v31];
            uint64_t v41 = &v17[v29];
            uint64_t v42 = &v12[v32];
            sub_10051B3EC((uint64_t)v12, (uint64_t)v17, &qword_101689340);
            sub_10051B3EC(v33, v30, &qword_101689348);
            sub_10051B3EC((uint64_t)v40, (uint64_t)v44, &qword_101689350);
            sub_10051B3EC((uint64_t)v42, (uint64_t)v51, &qword_101689358);
            uint64_t v42 = *(char **)(v3 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
            type metadata accessor for CRLWPShapeItemData(0);
            uint64_t v34 = swift_dynamicCastClassUnconditional();
            uint64_t v35 = (uint64_t)&v8[v13[12]];
            uint64_t v36 = (uint64_t)&v8[v13[16]];
            uint64_t v37 = (uint64_t)&v8[v13[20]];
            sub_100522E9C((uint64_t)v17, (uint64_t)v8, &qword_101689340);
            sub_100522E9C((uint64_t)v41, v35, &qword_101689348);
            sub_100522E9C((uint64_t)v44, v36, &qword_101689350);
            sub_100522E9C((uint64_t)v51, v37, &qword_101689358);
            v43(v8, 0, 1, v13);
            uint64_t v38 = *(uint64_t (**)(unsigned char *))(*(void *)v34 + 776);
            swift_retain();
            unint64_t v39 = (void (*)(unsigned char *, void))v38(v49);
            type metadata accessor for CRLWPShapeItemCRDTData(0);
            sub_100990EF4(&qword_101689360, (void (*)(uint64_t))type metadata accessor for CRLWPShapeItemCRDTData);
            CRStruct_4.apply(_:)();
            sub_100522F00((uint64_t)v8, &qword_101689328);
            v39(v49, 0);
            swift_release();
            uint64_t v25 = (uint64_t *)&unk_101689330;
            uint64_t v26 = (uint64_t)v17;
            return sub_100522F00(v26, v25);
          }
LABEL_10:
          uint64_t v25 = &qword_101689328;
          uint64_t v26 = (uint64_t)v12;
          return sub_100522F00(v26, v25);
        }
        uint64_t v23 = &qword_101672BF0;
        uint64_t v24 = (uint64_t *)v49;
LABEL_9:
        sub_100522F00((uint64_t)v24, v23);
        (*(void (**)(char *, uint64_t, uint64_t, int *))(v14 + 56))(v12, 1, 1, v13);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 1;
    }
    uint64_t v23 = (uint64_t *)&unk_1016725E0;
    uint64_t v24 = &v45;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10098DB80(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v215 = a2;
  uint64_t v9 = sub_1005057FC(&qword_1016892B8);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v214 = (uint64_t)v197 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v197 - v14;
  uint64_t v221 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v221, v16);
  uint64_t v220 = (uint64_t)v197 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v219 = (uint64_t)v197 - v20;
  uint64_t v21 = sub_1005057FC(&qword_1016892C0);
  __chkstk_darwin(v21 - 8, v22);
  v218 = (char *)v197 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1005057FC(&qword_1016892C8);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v213 = (uint64_t)v197 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)v197 - v30;
  __chkstk_darwin(v32, v33);
  uint64_t v222 = (uint64_t)v197 - v34;
  uint64_t v237 = type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
  __chkstk_darwin(v237, v35);
  uint64_t v231 = (uint64_t)v197 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v38);
  uint64_t v230 = (uint64_t)v197 - v39;
  uint64_t v240 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v240, v40);
  v217 = (char *)v197 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v235 = (char *)v197 - v44;
  __chkstk_darwin(v45, v46);
  v238 = (char *)v197 - v47;
  uint64_t v48 = sub_1005057FC(&qword_1016892D0);
  __chkstk_darwin(v48 - 8, v49);
  v229 = (char *)v197 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v228 = sub_1005057FC((uint64_t *)&unk_1016892D8);
  uint64_t v51 = *(void *)(v228 - 8);
  __chkstk_darwin(v228, v52);
  uint64_t v227 = (uint64_t)v197 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLWPShapeItem();
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  uint64_t v55 = a5;
  uint64_t v56 = *(void *)(result + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  uint64_t v239 = type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v233 = swift_dynamicCastClassUnconditional();
  if (a3 != 5)
  {
    uint64_t ObjectType = (ProtocolDescriptor *)swift_getObjectType();
    swift_unknownObjectRetain();
    swift_retain();
    sub_100A9EB60(a1, v215, a3, a4, v236, ObjectType, v55);
    swift_unknownObjectRelease();
    return swift_release();
  }
  uint64_t v206 = v56;
  uint64_t v234 = *(void *)(v215 + 16);
  if (!v234)
  {
    swift_unknownObjectRetain();
    swift_retain();
    v195 = _swiftEmptyArrayStorage;
    if (*(void *)&_swiftEmptyArrayStorage[2]) {
      goto LABEL_101;
    }
    goto LABEL_103;
  }
  v204 = v31;
  uint64_t v216 = v24;
  v205 = v15;
  uint64_t v199 = v55;
  uint64_t v198 = a1;
  uint64_t v57 = (void *)(a1 + OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data);
  uint64_t v209 = OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage;
  uint64_t v232 = v215 + 32;
  v211 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v226 = (unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  uint64_t v200 = a4;
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v58 = 0;
  v212 = _swiftEmptyArrayStorage;
  v223 = "allowsChangeShape";
  unint64_t v225 = 0x8000000101263FD0;
  v207 = "wpShapeStyleData";
  unint64_t v210 = 0x8000000101263FF0;
  while (1)
  {
    uint64_t v61 = (uint64_t *)(v232 + 16 * v58);
    uint64_t v62 = *v61;
    uint64_t v63 = v61[1];
    if ((*v61 != 0xD000000000000010 || v63 != v225) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    uint64_t v64 = *(void *)swift_dynamicCastClassUnconditional();
    uint64_t v65 = (uint64_t)v238;
    (*(void (**)(void))(v64 + 760))();
    uint64_t v66 = v240;
    uint64_t v67 = v230;
    sub_100990654(v65 + *(int *)(v240 + 24), v230, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
    uint64_t v68 = sub_10099112C(v65, type metadata accessor for CRLWPShapeItemCRDTData);
    uint64_t v69 = (uint64_t)v235;
    (*(void (**)(uint64_t))(*(void *)v233 + 760))(v68);
    uint64_t v70 = v69 + *(int *)(v66 + 24);
    uint64_t v71 = v231;
    sub_100990654(v70, v231, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
    sub_10099112C(v69, type metadata accessor for CRLWPShapeItemCRDTData);
    sub_100990EF4((unint64_t *)&unk_101689300, (void (*)(uint64_t))type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
    uint64_t v72 = v229;
    CRType.observableDifference(from:)();
    sub_10099112C(v71, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
    uint64_t v73 = (uint64_t)v72;
    sub_10099112C(v67, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
    uint64_t v74 = v228;
    if ((*v226)(v72, 1, v228) == 1)
    {
      uint64_t v59 = (uint64_t)v72;
      char v60 = &qword_1016892D0;
    }
    else
    {
      uint64_t v75 = *(int *)(v74 + 48);
      uint64_t v76 = v227;
      uint64_t v77 = v227 + v75;
      uint64_t v78 = *(int *)(v74 + 64);
      uint64_t v79 = v227 + v78;
      uint64_t v80 = v73;
      uint64_t v81 = v73 + v75;
      uint64_t v82 = v80 + v78;
      sub_10051B3EC(v80, v227, &qword_10167D310);
      sub_10051B3EC(v81, v77, &qword_10167D310);
      uint64_t v224 = v79;
      sub_10051B3EC(v82, v79, &qword_10167D310);
      uint64_t v83 = type metadata accessor for CRValueObservableDifference();
      double v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 48);
      if (v84(v76, 1, v83) != 1)
      {
        uint64_t v85 = *(void *)swift_dynamicCastClassUnconditional();
        uint64_t v86 = (uint64_t)v238;
        (*(void (**)(void))(v85 + 760))();
        swift_retain();
        sub_1005057FC(&qword_101689320);
        CRRegister.wrappedValue.getter();
        int v87 = v243;
        sub_10099112C(v86, type metadata accessor for CRLWPShapeItemCRDTData);
        swift_release();
        v245 = &type metadata for Float;
        LODWORD(v243) = v87;
        swift_beginAccess();
        sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v241 = (void *)*v57;
        *uint64_t v57 = 0x8000000000000000;
        sub_100972310((uint64_t)v242, 0x1DuLL, isUniquelyReferenced_nonNull_native);
        *uint64_t v57 = v241;
        swift_bridgeObjectRelease();
        swift_endAccess();
        sub_100522F00((uint64_t)&v243, &qword_101672BF0);
      }
      if (v84(v77, 1, v83) != 1)
      {
        uint64_t v89 = *(void *)swift_dynamicCastClassUnconditional();
        uint64_t v90 = (uint64_t)v217;
        (*(void (**)(void))(v89 + 760))();
        swift_retain();
        sub_1005057FC(&qword_101675308);
        CRRegister.wrappedValue.getter();
        uint64_t v91 = v243;
        int v92 = v244;
        sub_10099112C(v90, type metadata accessor for CRLWPShapeItemCRDTData);
        swift_release();
        if (v92) {
          uint64_t v91 = 0;
        }
        type metadata accessor for CRLWPVerticalAlignment(0);
        v245 = v93;
        uint64_t v243 = v91;
        swift_beginAccess();
        sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
        char v94 = swift_isUniquelyReferenced_nonNull_native();
        v241 = (void *)*v57;
        *uint64_t v57 = 0x8000000000000000;
        sub_100972310((uint64_t)v242, 0x1EuLL, v94);
        *uint64_t v57 = v241;
        swift_bridgeObjectRelease();
        swift_endAccess();
        sub_100522F00((uint64_t)&v243, &qword_101672BF0);
      }
      if (v84(v224, 1, v83) != 1)
      {
        uint64_t v95 = *(void *)swift_dynamicCastClassUnconditional();
        uint64_t v96 = (uint64_t)v238;
        (*(void (**)(void))(v95 + 760))();
        swift_retain();
        sub_1005057FC((uint64_t *)&unk_101689310);
        CRRegister.wrappedValue.getter();
        char v97 = v243;
        sub_10099112C(v96, type metadata accessor for CRLWPShapeItemCRDTData);
        swift_release();
        v245 = &type metadata for Bool;
        LOBYTE(v243) = v97;
        swift_beginAccess();
        sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
        char v98 = swift_isUniquelyReferenced_nonNull_native();
        v241 = (void *)*v57;
        *uint64_t v57 = 0x8000000000000000;
        sub_100972310((uint64_t)v242, 0x1FuLL, v98);
        *uint64_t v57 = v241;
        swift_bridgeObjectRelease();
        swift_endAccess();
        sub_100522F00((uint64_t)&v243, &qword_101672BF0);
      }
      uint64_t v59 = v227;
      char v60 = (uint64_t *)&unk_1016892D8;
    }
    sub_100522F00(v59, v60);
LABEL_7:
    if (++v58 == v234)
    {
      swift_bridgeObjectRelease();
      a4 = v200;
      uint64_t v55 = v199;
      a1 = v198;
      v195 = v212;
      if (*((void *)v212 + 2))
      {
LABEL_101:
        v196 = (ProtocolDescriptor *)swift_getObjectType();
        sub_100A9EB60(a1, (uint64_t)v195, 5, a4, v236, v196, v55);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return swift_release();
      }
LABEL_103:
      swift_unknownObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  if ((v62 != 0xD000000000000013 || v63 != v210) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      double v122 = v212;
    }
    else {
      double v122 = sub_100F61B70(0, *((void *)v212 + 2) + 1, 1, v212);
    }
    unint64_t v124 = *((void *)v122 + 2);
    unint64_t v123 = *((void *)v122 + 3);
    if (v124 >= v123 >> 1) {
      double v122 = sub_100F61B70((double *)(v123 > 1), v124 + 1, 1, v122);
    }
    *((void *)v122 + 2) = v124 + 1;
    v212 = v122;
    uint64_t v125 = &v122[2 * v124];
    *((void *)v125 + 4) = v62;
    *((void *)v125 + 5) = v63;
    goto LABEL_7;
  }
  uint64_t v99 = *(void *)swift_dynamicCastClassUnconditional();
  uint64_t v100 = (uint64_t)v238;
  (*(void (**)(void))(v99 + 760))();
  uint64_t v101 = v240;
  uint64_t v102 = v219;
  sub_100990654(v100 + *(int *)(v240 + 20), v219, type metadata accessor for CRLWPStorageCRDTData);
  uint64_t v103 = sub_10099112C(v100, type metadata accessor for CRLWPShapeItemCRDTData);
  uint64_t v104 = (uint64_t)v235;
  (*(void (**)(uint64_t))(*(void *)v233 + 760))(v103);
  uint64_t v105 = v104 + *(int *)(v101 + 20);
  uint64_t v106 = v220;
  sub_100990654(v105, v220, type metadata accessor for CRLWPStorageCRDTData);
  sub_10099112C(v104, type metadata accessor for CRLWPShapeItemCRDTData);
  sub_100990EF4(&qword_101687300, (void (*)(uint64_t))type metadata accessor for CRLWPStorageCRDTData);
  uint64_t v107 = (uint64_t)v218;
  CRType.observableDifference(from:)();
  sub_10099112C(v106, type metadata accessor for CRLWPStorageCRDTData);
  sub_10099112C(v102, type metadata accessor for CRLWPStorageCRDTData);
  uint64_t v108 = v216;
  if ((*v211)(v107, 1, v216) == 1)
  {
    sub_100522F00(v107, &qword_1016892C0);
    uint64_t v109 = v236;
LABEL_94:
    uint64_t v193 = *(void *)&v109[v209];
    if (!v193) {
      goto LABEL_113;
    }
    *(unsigned char *)(v193 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) = 0;
    *(unsigned char *)(v193 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges) = 0;
    goto LABEL_7;
  }
  uint64_t v110 = *(int *)(v108 + 48);
  uint64_t v111 = v222;
  uint64_t v112 = v222 + v110;
  uint64_t v113 = v107 + v110;
  sub_10051B3EC(v107, v222, &qword_1016892B8);
  sub_10051B3EC(v113, v112, &qword_1016892B8);
  uint64_t v114 = *(int *)(v108 + 48);
  uint64_t v115 = (uint64_t)v204;
  uint64_t v116 = (uint64_t)&v204[v114];
  sub_100522E9C(v111, (uint64_t)v204, &qword_1016892B8);
  sub_100522E9C(v112, v116, &qword_1016892B8);
  uint64_t v117 = v115;
  uint64_t v118 = (uint64_t)v205;
  sub_10051B3EC(v117, (uint64_t)v205, &qword_1016892B8);
  uint64_t v119 = sub_1005057FC(&qword_1016892E8);
  uint64_t v120 = *(void *)(v119 - 8);
  uint64_t v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  uint64_t v224 = v120 + 48;
  v208 = v121;
  if (v121(v118, 1, v119) == 1)
  {
    sub_100522F00(v116, &qword_1016892B8);
    sub_100522F00(v118, &qword_1016892B8);
    goto LABEL_62;
  }
  uint64_t v203 = v112;
  uint64_t v126 = CRAttributedString.ObservableDifference.edits.getter();
  uint64_t v201 = v120;
  CGAffineTransform v127 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
  uint64_t v202 = v119;
  v127(v118, v119);
  sub_100522F00(v116, &qword_1016892B8);
  uint64_t v128 = *(void *)(v126 + 16);
  if (!v128)
  {
LABEL_61:
    swift_bridgeObjectRelease();
    uint64_t v112 = v203;
    uint64_t v119 = v202;
    uint64_t v120 = v201;
LABEL_62:
    uint64_t v159 = v213;
    uint64_t v160 = v213 + *(int *)(v216 + 48);
    sub_100522E9C(v222, v213, &qword_1016892B8);
    sub_100522E9C(v112, v160, &qword_1016892B8);
    uint64_t v161 = v214;
    sub_10051B3EC(v160, v214, &qword_1016892B8);
    if (v208(v161, 1, v119) == 1)
    {
      sub_100522F00(v159, &qword_1016892B8);
      sub_100522F00(v161, &qword_1016892B8);
LABEL_93:
      uint64_t v109 = v236;
      sub_100522F00(v222, &qword_1016892C8);
      goto LABEL_94;
    }
    uint64_t v162 = CRAttributedString.ObservableDifference.edits.getter();
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v161, v119);
    sub_100522F00(v159, &qword_1016892B8);
    uint64_t v163 = *(void *)(v162 + 16);
    if (!v163)
    {
LABEL_92:
      swift_bridgeObjectRelease();
      goto LABEL_93;
    }
    uint64_t v224 = v162;
    uint64_t v164 = (unsigned char *)(v162 + 56);
    while (1)
    {
      uint64_t v166 = *((void *)v164 - 3);
      uint64_t v165 = *((void *)v164 - 2);
      uint64_t v167 = *((void *)v164 - 1);
      if (*v164 == 1)
      {
        v245 = (void *)sub_1005057FC((uint64_t *)&unk_1016892F0);
        uint64_t v168 = swift_allocObject();
        uint64_t v243 = v168;
        *(void *)(v168 + 16) = v166;
        *(void *)(v168 + 24) = v165;
        *(void *)(v168 + 32) = v167;
        *(unsigned char *)(v168 + 40) = 1;
        swift_beginAccess();
        sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
        char v169 = swift_isUniquelyReferenced_nonNull_native();
        v241 = (void *)*v57;
        v170 = v241;
        *uint64_t v57 = 0x8000000000000000;
        unint64_t v172 = sub_1009563E8();
        uint64_t v173 = v170[2];
        BOOL v174 = (v171 & 1) == 0;
        uint64_t v175 = v173 + v174;
        if (__OFADD__(v173, v174)) {
          goto LABEL_108;
        }
        char v176 = v171;
        if (v170[3] >= v175)
        {
          if (v169)
          {
            v179 = v241;
            if ((v171 & 1) == 0) {
              goto LABEL_81;
            }
          }
          else
          {
            sub_10097C320();
            v179 = v241;
            if ((v176 & 1) == 0) {
              goto LABEL_81;
            }
          }
        }
        else
        {
          sub_10095F04C(v175, v169);
          uint64_t v177 = sub_1009563E8();
          if ((v176 & 1) != (v178 & 1)) {
            goto LABEL_114;
          }
          unint64_t v172 = v177;
          v179 = v241;
          if ((v176 & 1) == 0)
          {
LABEL_81:
            v179[(v172 >> 6) + 8] |= 1 << v172;
            *(void *)(v179[6] + 8 * v172) = 27;
            sub_10051B3EC((uint64_t)v242, v179[7] + 32 * v172, &qword_101672BF0);
            uint64_t v190 = v179[2];
            BOOL v156 = __OFADD__(v190, 1);
            uint64_t v191 = v190 + 1;
            if (v156) {
              goto LABEL_111;
            }
LABEL_87:
            v179[2] = v191;
            goto LABEL_67;
          }
        }
      }
      else
      {
        v245 = (void *)sub_1005057FC((uint64_t *)&unk_1016892F0);
        uint64_t v180 = swift_allocObject();
        uint64_t v243 = v180;
        *(void *)(v180 + 16) = v166;
        *(void *)(v180 + 24) = v165;
        *(void *)(v180 + 32) = v167;
        *(unsigned char *)(v180 + 40) = 0;
        swift_beginAccess();
        sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
        char v181 = swift_isUniquelyReferenced_nonNull_native();
        v241 = (void *)*v57;
        v182 = v241;
        *uint64_t v57 = 0x8000000000000000;
        unint64_t v172 = sub_1009563E8();
        uint64_t v184 = v182[2];
        BOOL v185 = (v183 & 1) == 0;
        uint64_t v186 = v184 + v185;
        if (__OFADD__(v184, v185)) {
          goto LABEL_107;
        }
        char v187 = v183;
        if (v182[3] >= v186)
        {
          if (v181)
          {
            v179 = v241;
            if ((v183 & 1) == 0) {
              goto LABEL_86;
            }
          }
          else
          {
            sub_10097C320();
            v179 = v241;
            if ((v187 & 1) == 0) {
              goto LABEL_86;
            }
          }
        }
        else
        {
          sub_10095F04C(v186, v181);
          uint64_t v188 = sub_1009563E8();
          if ((v187 & 1) != (v189 & 1)) {
            goto LABEL_114;
          }
          unint64_t v172 = v188;
          v179 = v241;
          if ((v187 & 1) == 0)
          {
LABEL_86:
            v179[(v172 >> 6) + 8] |= 1 << v172;
            *(void *)(v179[6] + 8 * v172) = 28;
            sub_10051B3EC((uint64_t)v242, v179[7] + 32 * v172, &qword_101672BF0);
            uint64_t v192 = v179[2];
            BOOL v156 = __OFADD__(v192, 1);
            uint64_t v191 = v192 + 1;
            if (v156) {
              goto LABEL_112;
            }
            goto LABEL_87;
          }
        }
      }
      sub_1006063BC((uint64_t)v242, v179[7] + 32 * v172, &qword_101672BF0);
LABEL_67:
      *uint64_t v57 = v179;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_100522F00((uint64_t)&v243, &qword_101672BF0);
      v164 += 32;
      if (!--v163) {
        goto LABEL_92;
      }
    }
  }
  v197[1] = v126;
  id v129 = (unsigned char *)(v126 + 56);
  while (1)
  {
    uint64_t v131 = *((void *)v129 - 3);
    uint64_t v130 = *((void *)v129 - 2);
    uint64_t v132 = *((void *)v129 - 1);
    if (*v129 == 1) {
      break;
    }
    v245 = (void *)sub_1005057FC((uint64_t *)&unk_1016892F0);
    uint64_t v145 = swift_allocObject();
    uint64_t v243 = v145;
    *(void *)(v145 + 16) = v131;
    *(void *)(v145 + 24) = v130;
    *(void *)(v145 + 32) = v132;
    *(unsigned char *)(v145 + 40) = 0;
    swift_beginAccess();
    sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
    char v146 = swift_isUniquelyReferenced_nonNull_native();
    v241 = (void *)*v57;
    id v147 = v241;
    *uint64_t v57 = 0x8000000000000000;
    unint64_t v137 = sub_1009563E8();
    uint64_t v149 = v147[2];
    BOOL v150 = (v148 & 1) == 0;
    uint64_t v151 = v149 + v150;
    if (__OFADD__(v149, v150)) {
      goto LABEL_106;
    }
    char v152 = v148;
    if (v147[3] >= v151)
    {
      if (v146)
      {
        id v144 = v241;
        if ((v148 & 1) == 0) {
          goto LABEL_55;
        }
      }
      else
      {
        sub_10097C320();
        id v144 = v241;
        if ((v152 & 1) == 0) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      sub_10095F04C(v151, v146);
      uint64_t v153 = sub_1009563E8();
      if ((v152 & 1) != (v154 & 1)) {
        goto LABEL_114;
      }
      unint64_t v137 = v153;
      id v144 = v241;
      if ((v152 & 1) == 0)
      {
LABEL_55:
        v144[(v137 >> 6) + 8] |= 1 << v137;
        *(void *)(v144[6] + 8 * v137) = 26;
        sub_10051B3EC((uint64_t)v242, v144[7] + 32 * v137, &qword_101672BF0);
        uint64_t v158 = v144[2];
        BOOL v156 = __OFADD__(v158, 1);
        uint64_t v157 = v158 + 1;
        if (v156) {
          goto LABEL_110;
        }
LABEL_56:
        v144[2] = v157;
        goto LABEL_36;
      }
    }
LABEL_35:
    sub_1006063BC((uint64_t)v242, v144[7] + 32 * v137, &qword_101672BF0);
LABEL_36:
    *uint64_t v57 = v144;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_100522F00((uint64_t)&v243, &qword_101672BF0);
    v129 += 32;
    if (!--v128) {
      goto LABEL_61;
    }
  }
  v245 = (void *)sub_1005057FC((uint64_t *)&unk_1016892F0);
  uint64_t v133 = swift_allocObject();
  uint64_t v243 = v133;
  *(void *)(v133 + 16) = v131;
  *(void *)(v133 + 24) = v130;
  *(void *)(v133 + 32) = v132;
  *(unsigned char *)(v133 + 40) = 1;
  swift_beginAccess();
  sub_100522E9C((uint64_t)&v243, (uint64_t)v242, &qword_101672BF0);
  char v134 = swift_isUniquelyReferenced_nonNull_native();
  v241 = (void *)*v57;
  double v135 = v241;
  *uint64_t v57 = 0x8000000000000000;
  unint64_t v137 = sub_1009563E8();
  uint64_t v138 = v135[2];
  BOOL v139 = (v136 & 1) == 0;
  uint64_t v140 = v138 + v139;
  if (!__OFADD__(v138, v139))
  {
    char v141 = v136;
    if (v135[3] >= v140)
    {
      if (v134)
      {
        id v144 = v241;
        if ((v136 & 1) == 0) {
          goto LABEL_50;
        }
      }
      else
      {
        sub_10097C320();
        id v144 = v241;
        if ((v141 & 1) == 0) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      sub_10095F04C(v140, v134);
      uint64_t v142 = sub_1009563E8();
      if ((v141 & 1) != (v143 & 1)) {
        goto LABEL_114;
      }
      unint64_t v137 = v142;
      id v144 = v241;
      if ((v141 & 1) == 0)
      {
LABEL_50:
        v144[(v137 >> 6) + 8] |= 1 << v137;
        *(void *)(v144[6] + 8 * v137) = 25;
        sub_10051B3EC((uint64_t)v242, v144[7] + 32 * v137, &qword_101672BF0);
        uint64_t v155 = v144[2];
        BOOL v156 = __OFADD__(v155, 1);
        uint64_t v157 = v155 + 1;
        if (v156) {
          goto LABEL_109;
        }
        goto LABEL_56;
      }
    }
    goto LABEL_35;
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  type metadata accessor for CRLChangeProperty(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double *sub_10098F5F8()
{
  uint64_t v1 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10088A634();
  uint64_t v15 = result;
  uint64_t v16 = *(char **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v16) {
    return v15;
  }
  uint64_t v17 = *(void *)&v16[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v17)
  {
    (*(void (**)(void))(*(void *)v17 + 760))();
    sub_100990654((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    uint64_t v18 = v16;
    sub_10099112C((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v13, v1);
    sub_10099112C((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    uint64_t v19 = (void *)CRAttributedString.attributedString.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    id v20 = [v19 string];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = sub_100F61B70(0, *((void *)v15 + 2) + 1, 1, v15);
      }
      unint64_t v26 = *((void *)v15 + 2);
      unint64_t v25 = *((void *)v15 + 3);
      if (v26 >= v25 >> 1) {
        uint64_t v15 = sub_100F61B70((double *)(v25 > 1), v26 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v26 + 1;
      uint64_t v27 = &v15[2 * v26];
      *((void *)v27 + 4) = v21;
      *((void *)v27 + 5) = v23;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v15;
  }
  __break(1u);
  return result;
}

void sub_10098F914()
{
}

id sub_10098F924()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLWPShapeItem();
  return [super dealloc];
}

uint64_t sub_10098F96C()
{
  return type metadata accessor for CRLWPShapeItem();
}

uint64_t type metadata accessor for CRLWPShapeItem()
{
  uint64_t result = qword_101689278;
  if (!qword_101689278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10098F9C0()
{
  return swift_updateClassMetadata2();
}

id sub_10098FAC8(void *a1)
{
  type metadata accessor for CRLBoardItemSelection();
  id v3 = [a1 mostSpecificSelectionOfClass:swift_getObjCClassFromMetadata()];
  if (!v3) {
    return v3;
  }
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = v4;
  uint64_t v6 = OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems;
  uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems);
  if ((v7 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v7 + 16) == 1) {
      goto LABEL_7;
    }
LABEL_14:

    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = __CocoaSet.count.getter();
  swift_bridgeObjectRelease();
  if (v8 != 1) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v9 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  char v10 = sub_1006E5050(v1, v9);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_14;
  }
  sub_10050BF48(0, (unint64_t *)&qword_101683830);
  id v11 = [a1 mostSpecificSelectionOfClass:swift_getObjCClassFromMetadata()];
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = v11;
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {

    goto LABEL_14;
  }
  id v14 = [a1 indexForSelection:v13];
  id v15 = [a1 indexForSelection:v5];

  if (v15 >= v14) {
    return 0;
  }
  id v3 = *(id *)&v1[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage];
  if (v3) {
    id v16 = v3;
  }
  return v3;
}

id sub_10098FDE0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v1) {
    return [objc_allocWithZone((Class)NSEnumerator) init];
  }
  objc_super v2 = self;
  id v3 = v1;
  id v4 = [v2 arrayWithObject:v3];
  id v5 = [v4 objectEnumerator];

  return v5;
}

uint64_t sub_10098FED4@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, void *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S0>, unsigned __int8 a10)
{
  uint64_t v41 = a4;
  uint64_t v44 = a8;
  uint64_t v45 = a6;
  uint64_t v43 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  int v42 = a10;
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101689290);
  __chkstk_darwin(v13 - 8, v14);
  id v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1005057FC((uint64_t *)&unk_101674610);
  __chkstk_darwin(v17 - 8, v18);
  id v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  unint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CRLShapeItemCRDTData(0);
  uint64_t v28 = __chkstk_darwin(v26 - 8, v27);
  uint64_t v30 = (char *)&v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v38 - v32;
  sub_100A9CC94(a1, v39, v40, v41, 0.0, 1, (uint64_t)&v38 - v32);
  if ((unint64_t)(a7 - 1) >= 3) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = a7;
  }
  float v49 = a9;
  CRRegister.init(wrappedValue:)();
  uint64_t v47 = v34;
  char v48 = 0;
  sub_1005057FC((uint64_t *)&unk_1016892A0);
  sub_1009902A0();
  CRRegister.init(wrappedValue:)();
  char v46 = v42;
  CRRegister.init(wrappedValue:)();
  *(void *)&v25[*(int *)(v21 + 28)] = &_swiftEmptyDictionarySingleton;
  sub_100990654((uint64_t)v33, (uint64_t)v30, type metadata accessor for CRLShapeItemCRDTData);
  sub_100990654(v43, (uint64_t)v20, type metadata accessor for CRLWPStorageCRDTData);
  uint64_t v35 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v20, 0, 1, v35);
  sub_100990654((uint64_t)v25, (uint64_t)v16, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
  uint64_t v36 = v45;
  sub_1008EF10C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100786F64);
  sub_1005D9280((uint64_t)v30, (uint64_t)v20, (uint64_t)v16, (uint64_t)v36, v44);
  sub_10099112C((uint64_t)v25, type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData);
  return sub_10099112C((uint64_t)v33, type metadata accessor for CRLShapeItemCRDTData);
}

unint64_t sub_1009902A0()
{
  unint64_t result = qword_101675388;
  if (!qword_101675388)
  {
    sub_100522D34((uint64_t *)&unk_1016892A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101675388);
  }
  return result;
}

id sub_1009902FC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, float a9, void *a10, void *a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v14 = v13;
  float v49 = a8;
  uint64_t v50 = a7;
  uint64_t v52 = (uint64_t)a6;
  uint64_t v53 = a2;
  uint64_t v45 = a11;
  char v46 = a10;
  uint64_t v47 = a12;
  uint64_t v48 = a3;
  int v44 = a13;
  uint64_t v21 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  unint64_t v25 = &v43[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23, v26);
  uint64_t v28 = &v43[-v27];
  uint64_t v29 = sub_1005057FC(&qword_1016892B0);
  uint64_t v31 = __chkstk_darwin(v29 - 8, v30);
  uint64_t v33 = &v43[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v31, v34);
  uint64_t v36 = &v43[-v35];
  id v51 = a1;
  sub_100A9CEF0(a2, a5, a6, 0, 0, (uint64_t)&v43[-v35]);
  uint64_t v37 = v48;
  sub_10098FED4(v49, v50, v46, v45, v48, a4, v47, (uint64_t)v28, a9, v44);
  sub_1008EF10C(a4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005DF280);
  sub_100522E9C((uint64_t)v36, (uint64_t)v33, &qword_1016892B0);
  sub_100990654((uint64_t)v28, (uint64_t)v25, type metadata accessor for CRLWPShapeItemCRDTData);
  type metadata accessor for CRLWPShapeItemData(0);
  uint64_t v38 = swift_allocObject();
  sub_100803F1C((uint64_t)v25, v38 + *(void *)(*(void *)v38 + 752));
  *(void *)(v38 + qword_10169E700) = 0;
  sub_10051B3EC((uint64_t)v33, v38 + *(void *)(*(void *)v38 + 632), &qword_1016892B0);
  uint64_t v39 = sub_10068B398(0x1000000000000, 0x2000400000000, 0x1000000000000, 2);
  id v40 = (id)(*(uint64_t (**)(id, void *))(v14 + 1432))(v51, v39);
  sub_100A9AF5C(v52);

  sub_10099112C(v37, type metadata accessor for CRLWPStorageCRDTData);
  uint64_t v41 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v53, v41);
  sub_10099112C((uint64_t)v28, type metadata accessor for CRLWPShapeItemCRDTData);
  sub_100522F00((uint64_t)v36, &qword_1016892B0);
  return v40;
}

uint64_t sub_100990654(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009906BC(void *a1, char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, float a9, void *a10, void *a11, uint64_t a12, char a13)
{
  double v84 = a8;
  uint64_t v85 = a7;
  uint64_t v100 = a6;
  uint64_t v83 = a5;
  uint64_t v86 = a4;
  uint64_t v101 = a2;
  uint64_t v91 = a1;
  uint64_t v15 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v88 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v93 = (uint64_t)&v77 - v20;
  uint64_t v21 = sub_1005057FC(&qword_1016892B0);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  uint64_t v87 = (uint64_t)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v77 - v26;
  uint64_t v99 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v99 - 8);
  __chkstk_darwin(v99, v28);
  char v98 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for CRLWPStorageCRDTData(0);
  uint64_t v31 = __chkstk_darwin(v82, v30);
  uint64_t v95 = (uint64_t)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v33);
  uint64_t v89 = (char *)&v77 - v34;
  uint64_t v35 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v38 = __chkstk_darwin(v35, v37);
  id v40 = (char *)&v77 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v38, v41);
  int v44 = (char *)&v77 - v43;
  __chkstk_darwin(v42, v45);
  char v94 = (char *)&v77 - v46;
  unint64_t v47 = sub_1005D3BF8();
  id v48 = a3;
  unint64_t v81 = v47;
  CRAttributedString.init(_:)();
  uint64_t v96 = v36;
  uint64_t v97 = v35;
  float v49 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v49(v44, v40, v35);
  id v50 = [v48 length];
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v44;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = sub_1005D3C5C;
  *(void *)(v52 + 24) = v51;
  aBlock[4] = sub_1005D3C74;
  void aBlock[5] = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100F9A6C0;
  aBlock[3] = &unk_10151C0A8;
  uint64_t v53 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v48 enumerateAttributesInRange:0 options:v50 usingBlock:v53];

  _Block_release(v53);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v35)
  {
    __break(1u);
  }
  else
  {
    uint64_t v79 = a12;
    uint64_t v78 = a11;
    uint64_t v55 = v94;
    uint64_t v56 = v44;
    uint64_t v57 = v97;
    v49(v94, v56, v97);
    swift_release();
    uint64_t v58 = (uint64_t)v89;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v89, v55, v57);
    uint64_t v59 = v82;
    CRAttributedString.init(_:)();
    *(void *)(v58 + *(int *)(v59 + 24)) = &_swiftEmptyDictionarySingleton;
    uint64_t v60 = v90;
    uint64_t v61 = (uint64_t)v98;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v98, v101, v99);
    uint64_t v62 = v95;
    sub_100990654(v58, v95, type metadata accessor for CRLWPStorageCRDTData);
    uint64_t v63 = (uint64_t)v27;
    uint64_t v64 = v27;
    uint64_t v80 = v27;
    uint64_t v66 = v91;
    uint64_t v65 = v92;
    sub_100A9CEF0(v61, v83, v100, 0, 0, v63);
    uint64_t v67 = v93;
    uint64_t v68 = v86;
    sub_10098FED4(v84, v85, a10, v78, v62, v86, v79, v93, a9, a13 & 1);
    sub_1008EF10C(v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005DF280);
    uint64_t v69 = (uint64_t)v64;
    uint64_t v70 = v87;
    sub_100522E9C(v69, v87, &qword_1016892B0);
    uint64_t v71 = v88;
    sub_100990654(v67, v88, type metadata accessor for CRLWPShapeItemCRDTData);
    type metadata accessor for CRLWPShapeItemData(0);
    uint64_t v72 = swift_allocObject();
    sub_100803F1C(v71, v72 + *(void *)(*(void *)v72 + 752));
    *(void *)(v72 + qword_10169E700) = 0;
    sub_10051B3EC(v70, v72 + *(void *)(*(void *)v72 + 632), &qword_1016892B0);
    uint64_t v73 = sub_10068B398(0x1000000000000, 0x2000400000000, 0x1000000000000, 2);
    id v74 = (id)(*(uint64_t (**)(void *, void *))(v65 + 1432))(v66, v73);
    sub_100A9AF5C((uint64_t)v100);

    sub_10099112C(v95, type metadata accessor for CRLWPStorageCRDTData);
    uint64_t v75 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v76 = v99;
    v75(v98, v99);
    sub_10099112C(v67, type metadata accessor for CRLWPShapeItemCRDTData);
    sub_100522F00((uint64_t)v80, &qword_1016892B0);
    v75(v101, v76);
    sub_10099112C(v58, type metadata accessor for CRLWPStorageCRDTData);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v97);
    return (uint64_t)v74;
  }
  return result;
}

uint64_t sub_100990EAC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100990EBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100990ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100990EDC()
{
  return swift_release();
}

uint64_t sub_100990EE4()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100990EF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100990F3C()
{
  unint64_t result = qword_1016893A8;
  if (!qword_1016893A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016893A8);
  }
  return result;
}

uint64_t sub_100990F90()
{
  if (*(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 160))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 216))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 344))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 536))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 592))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 632);
  if (v1 != 255) {
    sub_10051ACA0(*(void *)(v0 + 616), *(void *)(v0 + 624), v1 & 1);
  }
  if (*(void *)(v0 + 776))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 896, 7);
}

uint64_t sub_10099112C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10099118C(char *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  uint64_t v51 = v4;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v58, a1, sizeof(v58));
  unint64_t v54 = sub_100AA1074(v58);
  float v49 = a1;
  sub_10051B3EC((uint64_t)(a1 + 856), (uint64_t)v57, (uint64_t *)&unk_1016892A0);
  sub_10051B3EC((uint64_t)v57, (uint64_t)v59, (uint64_t *)&unk_1016892A0);
  if (v59[8]) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v59[0];
  }
  uint64_t v44 = v8;
  uint64_t KeyPath = swift_getKeyPath();
  char v10 = (objc_class *)sub_1005057FC((uint64_t *)&unk_101683720);
  id v11 = objc_allocWithZone(v10);
  uint64_t v12 = (void *)((char *)v11 + *(void *)((swift_isaMask & *v11) + 0xF0));
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v45 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v13 = *(void (**)(uint64_t))(**(void **)&v1[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] + 256);
  unint64_t v47 = v1;
  uint64_t v43 = v1;
  uint64_t v14 = v11;
  uint64_t v15 = swift_retain();
  v13(v15);
  swift_release();
  uint64_t v16 = (char *)v14 + *(void *)((swift_isaMask & *v14) + 0xD8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  id v48 = v7;
  v51 += 32;
  uint64_t v46 = v17;
  v17(v16, v7, v50);
  *(void *)((char *)v14 + *(void *)((swift_isaMask & *v14) + 0xE0)) = v44;
  *(void *)((char *)v14 + *(void *)((swift_isaMask & *v14) + 0xE8)) = KeyPath;
  swift_retain();

  v53.receiver = v14;
  v53.super_class = v10;
  uint64_t v18 = v43;
  [super init];

  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  int v19 = *((_DWORD *)v49 + 212);
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = (objc_class *)sub_1005057FC((uint64_t *)&unk_1016893B0);
  uint64_t v22 = objc_allocWithZone(v21);
  uint64_t v23 = (void *)((char *)v22 + *(void *)((swift_isaMask & *v22) + 0xF0));
  *uint64_t v23 = 0;
  v23[1] = 0xE000000000000000;
  uint64_t v24 = *(void (**)(uint64_t))(**(void **)&v47[v45] + 256);
  unint64_t v47 = v18;
  uint64_t v25 = v22;
  uint64_t v26 = swift_retain();
  uint64_t v27 = v48;
  v24(v26);
  swift_release();
  v46(&v25[*(void *)((swift_isaMask & *(void *)v25) + 0xD8)], v27, v50);
  *(_DWORD *)&v25[*(void *)((swift_isaMask & *(void *)v25) + 0xE0)] = v19;
  *(void *)&v25[*(void *)((swift_isaMask & *(void *)v25) + 0xE8)] = v20;
  swift_retain();

  v52.receiver = v25;
  v52.super_class = v21;
  uint64_t v28 = v47;
  [super init];

  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v29 = *(void **)&v28[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage];
  if (!v29)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commandsToApplyStyle(_:store:)", 30, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 247, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commandsToApplyStyle(_:store:)", 30, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 247);
    return v54;
  }
  id v30 = v29;
  id v31 = [v30 range];
  uint64_t v33 = v32;
  uint64_t result = NSNotFound.getter();
  if (v31 == (id)result)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commandsToApplyStyle(_:store:)", 30, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 248, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commandsToApplyStyle(_:store:)", 30, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeItem.swift", 85, 2, 248);
LABEL_14:

    return v54;
  }
  if (!__OFADD__(v31, v33))
  {
    uint64_t v56 = *((void *)v49 + 105);
    long long v35 = *(_OWORD *)(v49 + 808);
    v55[12] = *(_OWORD *)(v49 + 792);
    v55[13] = v35;
    v55[14] = *(_OWORD *)(v49 + 824);
    long long v36 = *(_OWORD *)(v49 + 744);
    v55[8] = *(_OWORD *)(v49 + 728);
    v55[9] = v36;
    long long v37 = *(_OWORD *)(v49 + 776);
    v55[10] = *(_OWORD *)(v49 + 760);
    v55[11] = v37;
    long long v38 = *(_OWORD *)(v49 + 680);
    v55[4] = *(_OWORD *)(v49 + 664);
    v55[5] = v38;
    long long v39 = *(_OWORD *)(v49 + 712);
    v55[6] = *(_OWORD *)(v49 + 696);
    v55[7] = v39;
    long long v40 = *(_OWORD *)(v49 + 616);
    v55[0] = *(_OWORD *)(v49 + 600);
    v55[1] = v40;
    long long v41 = *(_OWORD *)(v49 + 648);
    v55[2] = *(_OWORD *)(v49 + 632);
    v55[3] = v41;
    sub_1008F4D7C((uint64_t)v55, (uint64_t)v31, (uint64_t)v31 + v33, v28);
    sub_1006E1FE0(v42);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10099185C()
{
  return sub_10098AA68();
}

void sub_100991884()
{
  if ([self isInternalOSInstall])
  {
    id v0 = [self standardUserDefaults];
    NSString v1 = String._bridgeToObjectiveC()();
    unsigned __int8 v2 = [v0 BOOLForKey:v1];

    char v3 = v2 ^ 1;
  }
  else
  {
    char v3 = 0;
  }
  byte_10171B090 = v3;
}

id sub_100991944()
{
  id result = [self isInternalOSInstall];
  byte_10171B091 = (char)result;
  return result;
}

uint64_t sub_100991978@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v44 = a4;
  uint64_t v6 = type metadata accessor for URLComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for URLQueryItem();
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v11);
  long long v41 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC(&qword_10167BF28);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(string:)();
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v17(v16, 1, v6))
  {
    sub_1005057FC(&qword_10167CFC0);
    long long v36 = a1;
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_101186E40;
    long long v37 = a3;
    URLQueryItem.init(name:value:)();
    URLQueryItem.init(name:value:)();
    uint64_t v38 = v7;
    long long v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v6;
    v45[0] = 1452296;
    dispatch thunk of CustomStringConvertible.description.getter();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = v38;
    uint64_t v6 = (uint64_t)v39;
    URLQueryItem.init(name:value:)();
    URLQueryItem.init(name:value:)();
    a3 = v37;
    URLQueryItem.init(name:value:)();
    URLComponents.queryItems.setter();
    a1 = v36;
  }
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  if (a1)
  {
    uint64_t v18 = v17;
    id v19 = a1;
    v20._countAndFlagsBits = sub_100992164((uint64_t)v19);
    String.append(_:)(v20);

    uint64_t v17 = v18;
    swift_bridgeObjectRelease();
  }
  if (a3)
  {
    v21._countAndFlagsBits = v43;
    v21._object = a3;
    String.append(_:)(v21);
  }
  uint64_t v22 = HIBYTE(v47) & 0xF;
  if ((v47 & 0x2000000000000000) == 0) {
    uint64_t v22 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v22 && !v17(v16, 1, v6))
  {
    long long v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v17;
    uint64_t v43 = (uint64_t)v10;
    uint64_t v27 = (void (*)(void *, void))URLComponents.queryItems.modify();
    if (*v26)
    {
      uint64_t v28 = v26;
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      unint64_t v29 = *v28;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v28 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v29 = sub_100F631B4(0, *(void *)(v29 + 16) + 1, 1, v29);
        *uint64_t v28 = v29;
      }
      unint64_t v32 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      if (v32 >= v31 >> 1)
      {
        unint64_t v29 = sub_100F631B4(v31 > 1, v32 + 1, 1, v29);
        *uint64_t v28 = v29;
      }
      uint64_t v34 = v39;
      uint64_t v33 = v40;
      *(void *)(v29 + 16) = v32 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v29+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v32, v41, v33);
      v27(v45, 0);
      char v10 = (char *)v43;
      unsigned int v23 = v34(v16, 1, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      v27(v45, 0);
      char v10 = (char *)v43;
      unsigned int v23 = v39(v16, 1, v6);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned int v23 = v17(v16, 1, v6);
  }
  if (v23)
  {
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v44, 1, 1, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v16, v6);
    URLComponents.url.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return sub_100992104((uint64_t)v16);
}

void sub_100991FD0()
{
  id v0 = [self sharedApplication];
  URL._bridgeToObjectiveC()(v1);
  char v3 = v2;
  sub_100A3B668((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_1009920AC();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 openURL:v3 options:isa completionHandler:0];
}

unint64_t sub_1009920AC()
{
  unint64_t result = qword_101671788;
  if (!qword_101671788)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671788);
  }
  return result;
}

uint64_t sub_100992104(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_10167BF28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100992164(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = 0x203A6472616F42;
  unint64_t v28 = 0xE700000000000000;
  uint64_t v14 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform8CRLBoard_data) + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100530898(v15, (uint64_t)v13);
  sub_1005057FC(&qword_101674450);
  CRRegister.wrappedValue.getter();
  uint64_t v16 = v26[0];
  uint64_t v17 = (void *)v26[1];
  sub_1005387C0((uint64_t)v13, type metadata accessor for CRLBoardCRDTData);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 2108704;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(a1 + v14) + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100530898(v20, (uint64_t)v13);
  swift_retain();
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  sub_1005387C0((uint64_t)v13, type metadata accessor for CRLBoardCRDTData);
  swift_release();
  Swift::String v21 = (uint64_t *)(*(void *)(a1 + v14) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  swift_bridgeObjectRetain();
  sub_100753370((uint64_t)v5, v22, v23, (uint64_t)v9);
  v24._countAndFlagsBits = sub_100753038();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  sub_1005387C0((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  return v27;
}

__uint64_t static CRLRealTimeSyncMonotonicClock.currentTime.getter()
{
  return clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
}

ValueMetadata *type metadata accessor for CRLRealTimeSyncMonotonicClock()
{
  return &type metadata for CRLRealTimeSyncMonotonicClock;
}

uint64_t sub_100992424()
{
  NSString v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C2F8;
  uint64_t v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 0x200000000;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7 & 0xFFFFFFFFFFLL;
}

uint64_t sub_100992588(float a1)
{
  id v3 = [self mainBundle];
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 localizedStringForKey:v4 value:v5 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10117E810;
  *(void *)(v7 + 56) = &type metadata for Float;
  *(void *)(v7 + 64) = &protocol witness table for Float;
  *(float *)(v7 + 32) = a1;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v4) = UIAccessibilityAnnouncementNotification;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  UIAccessibilityPostNotification((UIAccessibilityNotifications)v4, v8);

  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = 0;
  v16[4] = sub_100565100;
  _OWORD v16[5] = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = *(void *)"";
  v16[2] = sub_1005B74EC;
  v16[3] = &unk_10151C2D0;
  uint64_t v11 = _Block_copy(v16);
  swift_retain();
  swift_release();
  [v9 enumerateEditorsOnStackUsingBlock:v11];
  _Block_release(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 24);
  swift_unknownObjectRetain();
  uint64_t result = swift_release();
  if (v12)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, float))(v13 + 32))(ObjectType, v13, a1);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10099282C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C2A8;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_10099299C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C280;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 2;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_100992B00()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C258;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 2;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_100992C64()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C230;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 2;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 104))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_100992DC8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C208;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 2;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 136))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_100992F2C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C1E0;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 200))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_10099309C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C1B8;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 216))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_10099320C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C190;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 512;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 272))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t sub_100993370()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  _DWORD v9[4] = sub_100565100;
  v9[5] = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = *(void *)"";
  _OWORD v9[2] = sub_1005B74EC;
  v9[3] = &unk_10151C168;
  id v3 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v1 enumerateEditorsOnStackUsingBlock:v3];
  _Block_release(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_unknownObjectRetain();
  swift_release();
  if (!v4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 168))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

id sub_1009934E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLMiniFormatterTextDataProvider();
  [super dealloc];
}

uint64_t type metadata accessor for CRLMiniFormatterTextDataProvider()
{
  return self;
}

uint64_t sub_100993538()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100993570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100993580()
{
  return swift_release();
}

uint64_t *sub_1009935D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = type metadata accessor for AttributedString();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_1005057FC(&qword_101678470);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v20 = a3[7];
    Swift::String v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_1005057FC(&qword_101672E90);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)a1 + v26;
    unint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for UTType();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_1005057FC((uint64_t *)&unk_101676160);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  return a1;
}

uint64_t sub_100993978(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = a1 + a2[8];
  uint64_t v12 = type metadata accessor for UTType();
  uint64_t v15 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v11, 1, v12);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    return v14(v11, v12);
  }
  return result;
}

uint64_t sub_100993BC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (const void *)(a2 + v8);
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_1005057FC(&qword_101678470);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_1005057FC(&qword_101672E90);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for UTType();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_1005057FC((uint64_t *)&unk_101676160);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

uint64_t sub_100993F10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_1005057FC(&qword_101678470);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_12:
    uint64_t v27 = sub_1005057FC(&qword_101672E90);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_13:
  uint64_t v28 = a3[8];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = type metadata accessor for UTType();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 24))(v29, v30, v31);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    uint64_t v36 = sub_1005057FC((uint64_t *)&unk_101676160);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_100994388(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_1005057FC(&qword_101678470);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_1005057FC(&qword_101672E90);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for UTType();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_1005057FC((uint64_t *)&unk_101676160);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t sub_1009946C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for AttributedString();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_1005057FC(&qword_101678470);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  int v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    uint64_t v29 = sub_1005057FC(&qword_101672E90);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = a3[8];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = type metadata accessor for UTType();
  uint64_t v34 = *(void *)(v33 - 8);
  int v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    uint64_t v38 = sub_1005057FC((uint64_t *)&unk_101676160);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_100994B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100994B3C);
}

uint64_t sub_100994B3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  uint64_t v14 = sub_1005057FC(&qword_101678470);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = a3[6];
LABEL_13:
    uint64_t v10 = a1 + v16;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    goto LABEL_14;
  }
  uint64_t v17 = sub_1005057FC(&qword_101672E90);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v15 = *(void *)(v17 - 8);
    uint64_t v16 = a3[7];
    goto LABEL_13;
  }
  uint64_t v18 = sub_1005057FC((uint64_t *)&unk_101676160);
  int v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[8];

  return v19(v21, a2, v20);
}

uint64_t sub_100994D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100994D38);
}

uint64_t sub_100994D38(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[5] + 8) = a2;
    return result;
  }
  uint64_t v13 = sub_1005057FC(&qword_101678470);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_1005057FC(&qword_101672E90);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_9;
  }
  uint64_t v17 = sub_1005057FC((uint64_t *)&unk_101676160);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[8];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata accessor for CRLSEManifestItem(uint64_t a1)
{
  return sub_100512D5C(a1, (uint64_t *)&unk_101689440);
}

void sub_100994F34()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100995C64(319, &qword_101689450, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    if (v1 <= 0x3F)
    {
      sub_100995C64(319, (unint64_t *)&qword_10167E5C0, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F)
      {
        sub_100995C64(319, (unint64_t *)&unk_101689458, (void (*)(uint64_t))&type metadata accessor for UTType);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t *sub_1009950D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_1005057FC((uint64_t *)&unk_101674520);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100995280(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10099536C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1005057FC((uint64_t *)&unk_101674520);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1009954CC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1009956C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1005057FC((uint64_t *)&unk_101674520);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *sub_1009957FC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1009959C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009959DC);
}

uint64_t sub_1009959DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100995AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100995AB8);
}

uint64_t sub_100995AB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CRLSEImportManifest(uint64_t a1)
{
  return sub_100512D5C(a1, qword_1016894F0);
}

void sub_100995B9C()
{
  sub_100995C64(319, (unint64_t *)&qword_101671F90, (void (*)(uint64_t))&type metadata accessor for UUID);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100995C64(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100995CB8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1005057FC(&qword_101689590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10050F848(a1, a1[3]);
  sub_1009970B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for UUID();
  sub_100997104(&qword_101671E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for CRLSEImportManifest(0);
    char v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 28));
    v12[15] = 3;
    sub_1005057FC(&qword_101689540);
    sub_100997268(&qword_101689598, &qword_1016895A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100995F2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1005057FC(&qword_101689530);
  uint64_t v29 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLSEImportManifest(0);
  __chkstk_darwin(v11, v12);
  char v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  char v16 = (uint64_t *)&v14[*(int *)(v11 + 20)];
  uint64_t *v16 = 0;
  v16[1] = 0;
  uint64_t v31 = v11;
  uint64_t v33 = *(int *)(v11 + 28);
  uint64_t v34 = a1;
  *(void *)&v14[v33] = _swiftEmptyArrayStorage;
  sub_10050F848(a1, a1[3]);
  sub_1009970B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v34);
    sub_100522F00((uint64_t)v14, (uint64_t *)&unk_101674520);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = v29;
    uint64_t v18 = v30;
    char v39 = 0;
    sub_100997104(&qword_101671E58, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1006063BC((uint64_t)v7, (uint64_t)v14, (uint64_t *)&unk_101674520);
    char v38 = 1;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t *v16 = v19;
    v16[1] = v21;
    char v37 = 2;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = (uint64_t *)&v14[*(int *)(v31 + 24)];
    *uint64_t v23 = v22;
    v23[1] = v24;
    sub_1005057FC(&qword_101689540);
    char v36 = 3;
    sub_100997268(&qword_101689548, &qword_101689550);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v32);
    uint64_t v25 = v35;
    uint64_t v26 = v33;
    swift_bridgeObjectRelease();
    *(void *)&v14[v26] = v25;
    sub_1009971A0((uint64_t)v14, v18, type metadata accessor for CRLSEImportManifest);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v34);
    return sub_100997208((uint64_t)v14, type metadata accessor for CRLSEImportManifest);
  }
}

uint64_t sub_100996388()
{
  uint64_t result = 0x4955556472616F62;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D614E72656E776FLL;
      break;
    case 2:
      uint64_t result = 0x656C746974;
      break;
    case 3:
      uint64_t result = 0x736D657469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100996414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100997714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10099643C(uint64_t a1)
{
  unint64_t v2 = sub_1009970B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100996478(uint64_t a1)
{
  unint64_t v2 = sub_1009970B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009964B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100995F2C(a1, a2);
}

uint64_t sub_1009964CC(void *a1)
{
  return sub_100995CB8(a1);
}

uint64_t sub_1009964E4(void *a1)
{
  uint64_t v3 = sub_1005057FC(&qword_101689578);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10050F848(a1, a1[3]);
  sub_10099714C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for UUID();
  sub_100997104(&qword_101671E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for CRLSEManifestItem(0);
    v9[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[13] = 2;
    type metadata accessor for AttributedString();
    sub_100997104(&qword_101689580, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9[12] = 3;
    type metadata accessor for URL();
    sub_100997104(&qword_101687A68, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9[11] = 4;
    type metadata accessor for UTType();
    sub_100997104(&qword_101689588, (void (*)(uint64_t))&type metadata accessor for UTType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_100996808@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_1005057FC((uint64_t *)&unk_101676160);
  __chkstk_darwin(v3 - 8, v4);
  id v48 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v6 - 8, v7);
  float v49 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_101678470);
  __chkstk_darwin(v9 - 8, v10);
  objc_super v52 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v12);
  objc_super v53 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_1005057FC(&qword_101689558);
  uint64_t v50 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v14);
  char v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRLSEManifestItem(0);
  uint64_t v18 = (int *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = &v21[v18[7]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v61 = (uint64_t *)v22;
  uint64_t v23 = (uint64_t)&v21[v18[8]];
  uint64_t v24 = type metadata accessor for AttributedString();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v59 = v23;
  v25(v23, 1, 1, v24);
  uint64_t v26 = (uint64_t)&v21[v18[9]];
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v58 = v26;
  v28(v26, 1, 1, v27);
  uint64_t v29 = (uint64_t)&v21[v18[10]];
  uint64_t v30 = type metadata accessor for UTType();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
  uint64_t v57 = v29;
  v31(v29, 1, 1, v30);
  sub_10050F848(a1, a1[3]);
  sub_10099714C();
  uint64_t v55 = v16;
  uint64_t v32 = (uint64_t)v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v32)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)a1);
    uint64_t v38 = v58;
    uint64_t v37 = v59;
    uint64_t v39 = v57;
    swift_bridgeObjectRelease();
    sub_100522F00(v37, &qword_101678470);
    sub_100522F00(v38, &qword_101672E90);
    return sub_100522F00(v39, (uint64_t *)&unk_101676160);
  }
  else
  {
    v46[1] = v30;
    void v46[2] = v27;
    uint64_t v33 = v51;
    uint64_t v34 = (uint64_t)v52;
    uint64_t v60 = a1;
    char v66 = 0;
    sub_100997104(&qword_101671E58, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v36 = v53;
    uint64_t v35 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v21, v36, v35);
    char v65 = 1;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    long long v41 = v61;
    *uint64_t v61 = v40;
    v41[1] = v42;
    char v64 = 2;
    sub_100997104(&qword_101689568, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1006063BC(v34, v59, &qword_101678470);
    char v63 = 3;
    sub_100997104(&qword_101687A38, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v43 = (uint64_t)v49;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1006063BC(v43, v58, &qword_101672E90);
    char v62 = 4;
    sub_100997104(&qword_101689570, (void (*)(uint64_t))&type metadata accessor for UTType);
    uint64_t v44 = (uint64_t)v48;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v55, v56);
    sub_1006063BC(v44, v57, (uint64_t *)&unk_101676160);
    sub_1009971A0((uint64_t)v21, v47, type metadata accessor for CRLSEManifestItem);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v60);
    return sub_100997208((uint64_t)v21, type metadata accessor for CRLSEManifestItem);
  }
}

uint64_t sub_100996F38()
{
  uint64_t result = 0x444955556D657469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656C746974;
      break;
    case 2:
      uint64_t result = 0x7475626972747461;
      break;
    case 3:
      uint64_t result = 7107189;
      break;
    case 4:
      uint64_t result = 0x495455616964656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100996FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009978D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100997008(uint64_t a1)
{
  unint64_t v2 = sub_10099714C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100997044(uint64_t a1)
{
  unint64_t v2 = sub_10099714C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100997080@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100996808(a1, a2);
}

uint64_t sub_100997098(void *a1)
{
  return sub_1009964E4(a1);
}

unint64_t sub_1009970B0()
{
  unint64_t result = qword_101689538;
  if (!qword_101689538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689538);
  }
  return result;
}

uint64_t sub_100997104(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10099714C()
{
  unint64_t result = qword_101689560;
  if (!qword_101689560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689560);
  }
  return result;
}

uint64_t sub_1009971A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100997208(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100997268(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100522D34(&qword_101689540);
    sub_100997104(a2, (void (*)(uint64_t))type metadata accessor for CRLSEManifestItem);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CRLSEManifestItem.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009973C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSEManifestItem.CodingKeys()
{
  return &type metadata for CRLSEManifestItem.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CRLSEImportManifest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009974CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSEImportManifest.CodingKeys()
{
  return &type metadata for CRLSEImportManifest.CodingKeys;
}

unint64_t sub_100997508()
{
  unint64_t result = qword_1016895A8;
  if (!qword_1016895A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895A8);
  }
  return result;
}

unint64_t sub_100997560()
{
  unint64_t result = qword_1016895B0;
  if (!qword_1016895B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895B0);
  }
  return result;
}

unint64_t sub_1009975B8()
{
  unint64_t result = qword_1016895B8;
  if (!qword_1016895B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895B8);
  }
  return result;
}

unint64_t sub_100997610()
{
  unint64_t result = qword_1016895C0;
  if (!qword_1016895C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895C0);
  }
  return result;
}

unint64_t sub_100997668()
{
  unint64_t result = qword_1016895C8;
  if (!qword_1016895C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895C8);
  }
  return result;
}

unint64_t sub_1009976C0()
{
  unint64_t result = qword_1016895D0;
  if (!qword_1016895D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016895D0);
  }
  return result;
}

uint64_t sub_100997714(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4955556472616F62 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E72656E776FLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1009978D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444955556D657469 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEE00747865546465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x495455616964656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100997AFC()
{
  uint64_t v1 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v1 - 8, v2);
  unsigned int v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  if (type metadata accessor for CRLURLEditor()) {
    ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  }
  else {
    ObjCClassFromMetadatCGFloat a = 0;
  }
  id v12 = [v10 mostSpecificCurrentEditorOfClass:ObjCClassFromMetadata];
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_8;
  }
  sub_100814784((uint64_t)v4);
  swift_unknownObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_8:
    sub_100522F00((uint64_t)v4, &qword_101672E90);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
  sub_100997E64();
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v13;
}

uint64_t sub_100997D24()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController];
  if (type metadata accessor for CRLURLEditor()) {
    ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  }
  else {
    ObjCClassFromMetadatCGFloat a = 0;
  }
  [v1 mostSpecificCurrentEditorOfClass:ObjCClassFromMetadata];
  if (swift_dynamicCastClass())
  {
    v5[3] = type metadata accessor for CRLMiniFormatterURLDataProvider();
    v5[0] = v0;
    uint64_t v3 = v0;
    sub_100811D3C();
    swift_unknownObjectRelease();
    return sub_100522F00((uint64_t)v5, &qword_101672BF0);
  }
  else
  {
    return swift_unknownObjectRelease();
  }
}

id sub_100997E0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLMiniFormatterURLDataProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLMiniFormatterURLDataProvider()
{
  return self;
}

unint64_t sub_100997E64()
{
  unint64_t result = qword_10168E250;
  if (!qword_10168E250)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10168E250);
  }
  return result;
}

uint64_t sub_100997EBC()
{
  uint64_t v0 = sub_1005057FC(&qword_101673B40);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v4 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0], v5);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v15 = type metadata accessor for TypeDisplayRepresentation();
  sub_100568B28(v15, qword_10171B098);
  sub_100556B74(v15, (uint64_t)qword_10171B098);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v4 + 104))(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v17[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v3, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

unint64_t sub_1009981A8()
{
  uint64_t v0 = sub_1005057FC(&qword_10167D138);
  __chkstk_darwin(v0 - 8, v1);
  char v64 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1005057FC(&qword_101673B40);
  __chkstk_darwin(v3 - 8, v4);
  char v63 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v7);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v14 = type metadata accessor for LocalizedStringResource();
  uint64_t v60 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  objc_super v53 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101689670);
  uint64_t v18 = sub_1005057FC(&qword_101689678);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = v18 - 8;
  uint64_t v61 = v18 - 8;
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v48 = v20;
  uint64_t v49 = 2 * v20;
  uint64_t v23 = swift_allocObject();
  long long v54 = xmmword_10117DF40;
  uint64_t v50 = v23;
  *(_OWORD *)(v23 + 16) = xmmword_10117DF40;
  unint64_t v62 = v23 + v22;
  unint64_t v47 = v23 + v22 + *(int *)(v21 + 56);
  *(unsigned char *)(v23 + v22) = 0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v39[1] = v6 + 104;
  uint64_t v51 = v24;
  uint64_t v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v26 = v52;
  ((void (*)(char *))v24)(v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v59(v63, 1, 1, v14);
  uint64_t v57 = type metadata accessor for DisplayRepresentation.Image();
  uint64_t v27 = *(void *)(v57 - 8);
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v58 = v27 + 56;
  v56(v64, 1, 1, v57);
  uint64_t v46 = sub_1005057FC(&qword_101682DA8);
  uint64_t v55 = v15 + 56;
  uint64_t v28 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v41 = *(void *)(v15 + 72);
  uint64_t v42 = 2 * v41;
  uint64_t v44 = ((v28 + 32) & ~v28) + 3 * v41;
  uint64_t v45 = (v28 + 32) & ~v28;
  uint64_t v43 = v28 | 7;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v54;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v29 = v51;
  v51(v9, v25, v26);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v29(v9, v25, v26);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v29(v9, v25, v26);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v31 = v63;
  uint64_t v30 = v64;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)();
  uint64_t v32 = (unsigned char *)(v62 + v48);
  v48 += v62 + *(int *)(v61 + 56);
  unsigned char *v32 = 1;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v29(v9, v25, v26);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v59(v31, 1, 1, v60);
  v56(v30, 1, 1, v57);
  *(_OWORD *)(swift_allocObject() + 16) = v54;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v33 = v26;
  uint64_t v34 = v26;
  uint64_t v35 = v51;
  v51(v9, v25, v33);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v35(v9, v25, v34);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v35(v9, v25, v34);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v37 = v63;
  char v36 = v64;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)();
  *(unsigned char *)(v62 + v49) = 2;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v35(v9, v25, v52);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v59(v37, 1, 1, v60);
  v56(v36, 1, 1, v57);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t result = sub_100A3C1F4(v50);
  qword_10171B0B0 = result;
  return result;
}

uint64_t sub_100998BCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10094E78C(*a1, *a2);
}

unint64_t sub_100998BDC()
{
  unint64_t result = qword_101689600;
  if (!qword_101689600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689600);
  }
  return result;
}

Swift::Int sub_100998C30()
{
  return Hasher._finalize()();
}

uint64_t sub_100998CD4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100998D64()
{
  return Hasher._finalize()();
}

unint64_t sub_100998E04@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1009995B8(*a1);
  *a2 = result;
  return result;
}

void sub_100998E34(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xEA00000000006574;
  uint64_t v5 = 0x69726F7661666E75;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656C67676F74;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x657469726F766166;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_100998E98()
{
  unint64_t result = qword_101689608;
  if (!qword_101689608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689608);
  }
  return result;
}

unint64_t sub_100998EF0()
{
  unint64_t result = qword_101689610;
  if (!qword_101689610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689610);
  }
  return result;
}

unint64_t sub_100998F48()
{
  unint64_t result = qword_101689618;
  if (!qword_101689618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689618);
  }
  return result;
}

unint64_t sub_100998FA0()
{
  unint64_t result = qword_101689620;
  if (!qword_101689620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689620);
  }
  return result;
}

unint64_t sub_100998FF8()
{
  unint64_t result = qword_101689628;
  if (!qword_101689628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689628);
  }
  return result;
}

unint64_t sub_100999050()
{
  unint64_t result = qword_101689630;
  if (!qword_101689630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689630);
  }
  return result;
}

unint64_t sub_1009990A8()
{
  unint64_t result = qword_101689638;
  if (!qword_101689638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689638);
  }
  return result;
}

uint64_t sub_1009990FC@<X0>(uint64_t a1@<X8>)
{
  if (qword_10166F588 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_100556B74(v2, (uint64_t)qword_10171B098);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1009991A4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1009991F4()
{
  unint64_t result = qword_101689640;
  if (!qword_101689640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689640);
  }
  return result;
}

uint64_t sub_100999248(uint64_t a1)
{
  unint64_t v2 = sub_1009991F4();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100999298()
{
  unint64_t result = qword_101689648;
  if (!qword_101689648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689648);
  }
  return result;
}

unint64_t sub_1009992F0()
{
  unint64_t result = qword_101689650;
  if (!qword_101689650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689650);
  }
  return result;
}

unint64_t sub_100999348()
{
  unint64_t result = qword_101689658;
  if (!qword_101689658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689658);
  }
  return result;
}

uint64_t sub_10099939C()
{
  if (qword_10166F590 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1009993F8(uint64_t a1)
{
  unint64_t v2 = sub_1009990A8();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100999448()
{
  unint64_t result = qword_101689660;
  if (!qword_101689660)
  {
    sub_100522D34(&qword_101689668);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689660);
  }
  return result;
}

void sub_1009994A4(void *a1@<X8>)
{
  *a1 = &off_1015030D8;
}

unsigned char *storeEnumTagSinglePayload for CRLFavoriteOperation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100999580);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLFavoriteOperation()
{
  return &type metadata for CRLFavoriteOperation;
}

unint64_t sub_1009995B8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101504350, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100999604(uint64_t a1)
{
  uint64_t result = sub_100F27B7C(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return sub_100666D74(result, v3, 0, a1);
  }
}

unint64_t sub_100999680(uint64_t a1)
{
  unint64_t result = sub_100F27B7C(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  unint64_t v5 = result;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  if (result == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = sub_100666DC4(result, v3, 0, a1);
  }
  return v7 | ((unint64_t)(v5 == v6) << 32);
}

uint64_t sub_100999714@<X0>(_OWORD *a1@<X8>)
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter();
  swift_getObjectType();
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
  if (v2 == result)
  {
    char v4 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v4)
    {
      uint64_t result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100999830(uint64_t a1)
{
  return sub_100999C94(a1, sub_1006678A4, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100666E14);
}

uint64_t sub_10099985C(uint64_t a1)
{
  return sub_100999C94(a1, sub_1006678A4, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100666E2C);
}

uint64_t sub_100999888(uint64_t a1)
{
  uint64_t result = sub_100F27B7C(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_100668150(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t sub_100999908(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_10099A5F8(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_1009999E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_100999A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100F27B7C(a1);
  if (v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    return sub_1006674D0(result, v5, a1, a2);
  }
  return result;
}

uint64_t sub_100999AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100999B64(a1, (uint64_t (*)(void))sub_100F27B7C, type metadata accessor for CRLBoardIdentifier, (void (*)(void))sub_1006674B4, a2);
}

uint64_t sub_100999AF8(uint64_t a1)
{
  return sub_100999C94(a1, sub_1006678A4, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100667528);
}

uint64_t sub_100999B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100999B64(a1, (uint64_t (*)(void))sub_100F27B7C, type metadata accessor for CRLBoardLibraryViewModel.Item, (void (*)(void))sub_100667550, a2);
}

uint64_t sub_100999B64@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = a2();
  if (v11) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v10)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v12 = a3(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a5;
    uint64_t v16 = 1;
  }
  else
  {
    a4();
    uint64_t v17 = a3(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v14 = v17;
    uint64_t v15 = a5;
    uint64_t v16 = 0;
  }

  return v13(v15, v16, 1, v14);
}

uint64_t sub_100999C68(uint64_t a1)
{
  return sub_100999C94(a1, sub_1006678A4, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100667614);
}

uint64_t sub_100999C94(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = __CocoaSet.startIndex.getter();
    uint64_t v8 = v7;
    __CocoaSet.endIndex.getter();
    char v9 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_10056A4C4(v6, v8, v5 != 0);
      return 0;
    }
LABEL_7:
    uint64_t v10 = a3(v6, v8, v5 != 0, a1);
    sub_10056A4C4(v6, v8, v5 != 0);
    return v10;
  }
  uint64_t result = a2(a1);
  if ((v13 & 1) == 0)
  {
    uint64_t v8 = v12;
    if (*(_DWORD *)(a1 + 36) == v12)
    {
      uint64_t v6 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Error.publicDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v83 = a2;
  uint64_t v5 = sub_1005057FC(&qword_101689680);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v84 = (uint64_t)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v81 = v8;
  uint64_t v82 = v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v80 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v79 = (char *)&v72 - v14;
  uint64_t v15 = type metadata accessor for Mirror();
  uint64_t v78 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = *(void *)(a1 - 8);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)&v72 - v26;
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v72 - v29;
  uint64_t v31 = v3;
  *(void *)&long long v87 = swift_getDynamicType();
  swift_getMetatypeMetadata();
  uint64_t v32 = String.init<A>(reflecting:)();
  uint64_t v34 = v33;
  sub_10099A500();
  if (!swift_dynamicCastMetatype())
  {
    id v74 = v23;
    uint64_t v75 = v27;
    uint64_t v76 = v34;
    uint64_t v77 = v32;
    uint64_t v37 = v79;
    char v36 = v80;
    uint64_t v83 = v15;
    v88[1] = a1;
    uint64_t v38 = sub_1005767BC((uint64_t *)&v87);
    uint64_t v39 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v85 + 16);
    uint64_t v40 = v31;
    v39(v38, v31, a1);
    Mirror.init(reflecting:)();
    uint64_t v41 = v84;
    Mirror.displayStyle.getter();
    uint64_t v43 = v81;
    uint64_t v42 = v82;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v41, 1, v81) == 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v19, v83);
      sub_100522F00(v84, &qword_101689680);
      return v77;
    }
    uint64_t v55 = a1;
    uint64_t v72 = v40;
    uint64_t v73 = v19;
    uint64_t v56 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v37, v84, v43);
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v36, enum case for Mirror.DisplayStyle.enum(_:), v43);
    char v57 = static Mirror.DisplayStyle.== infix(_:_:)();
    uint64_t v58 = v42 + 8;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v42 + 8);
    v59(v36, v43);
    if ((v57 & 1) == 0)
    {
      *(void *)&long long v87 = 0;
      *((void *)&v87 + 1) = 0xE000000000000000;
      v64._countAndFlagsBits = v77;
      v64._object = v76;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._countAndFlagsBits = 40;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
      _print_unlocked<A, B>(_:_:)();
      v66._countAndFlagsBits = 41;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      uint64_t v44 = v87;
      v59(v56, v43);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v73, v83);
      return v44;
    }
    uint64_t v82 = v58;
    Mirror.children.getter();
    sub_100999714(&v87);
    swift_release();
    if (v88[3])
    {
      uint64_t v60 = (void *)*((void *)&v87 + 1);
      uint64_t v61 = v87;
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v88);
      unint64_t v62 = v75;
      v39((uint64_t *)v75, v72, v55);
      char v63 = v74;
      if (v60)
      {
LABEL_16:
        (*(void (**)(char *, uint64_t))(v85 + 8))(v62, v55);
        uint64_t v68 = v83;
        uint64_t v69 = v78;
        *(void *)&long long v87 = v77;
        *((void *)&v87 + 1) = v76;
        v70._countAndFlagsBits = 46;
        v70._object = (void *)0xE100000000000000;
        String.append(_:)(v70);
        v71._countAndFlagsBits = v61;
        v71._object = v60;
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        uint64_t v44 = v87;
        v59(v56, v81);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v73, v68);
        return v44;
      }
    }
    else
    {
      sub_100522F00((uint64_t)&v87, &qword_101689688);
      unint64_t v62 = v75;
      v39((uint64_t *)v75, v72, a1);
      char v63 = v74;
    }
    v39((uint64_t *)v63, (uint64_t)v62, v55);
    uint64_t v61 = String.init<A>(describing:)();
    uint64_t v60 = v67;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v30, v3, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v45, v30, a1);
  }
  uint64_t v46 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  *(void *)&long long v87 = 0;
  *((void *)&v87 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  *(void *)&long long v87 = 0x20726F727245534ELL;
  *((void *)&v87 + 1) = 0xEF3D6E69616D6F44;
  id v47 = [v46 domain];
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;

  v51._countAndFlagsBits = v48;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0x3D65646F4320;
  v52._object = (void *)0xE600000000000000;
  String.append(_:)(v52);
  id v86 = [v46 code];
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v53);

  swift_bridgeObjectRelease();
  return v87;
}

unint64_t sub_10099A500()
{
  unint64_t result = qword_10168D3C0;
  if (!qword_10168D3C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10168D3C0);
  }
  return result;
}

uint64_t Error.fullDescription.getter(uint64_t a1)
{
  __chkstk_darwin(a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(reflecting:)();
}

unint64_t sub_10099A5F8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_10099A698(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_10099A708(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_10099A698(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_1009B7FE8(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10099A708(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      void v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

id CRLiOSParticipantContactViewController.__allocating_init(contact:doneAction:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return CRLiOSParticipantContactViewController.init(contact:doneAction:)(a1, a2);
}

double sub_10099A860()
{
  double result = 500.0;
  xmmword_101689690 = xmmword_10119A700;
  return result;
}

id CRLiOSParticipantContactViewController.init(contact:doneAction:)(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC8Freeform38CRLiOSParticipantContactViewController_contact] = a1;
  id v5 = self;
  uint64_t v6 = v2;
  id v7 = a1;
  id v8 = [v5 viewControllerForContact:v7];
  id v9 = [objc_allocWithZone((Class)CNContactStore) init];
  [v8 setContactStore:v9];

  [v8 setAllowsEditing:0];
  id v10 = [v8 navigationItem];
  sub_10099AA10();
  id v11 = a2;
  v17.value.super.super.Class isa = (Class)a2;
  v17.is_nil = 0;
  Class isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v17, v18).super.super.isa;
  [v10 setRightBarButtonItem:isa];

  *(void *)&v6[OBJC_IVAR____TtC8Freeform38CRLiOSParticipantContactViewController_contactViewController] = v8;
  id v13 = v8;

  v16.receiver = v6;
  v16.super_class = (Class)type metadata accessor for CRLiOSParticipantContactViewController();
  id v14 = [super initWithRootViewController:v13];
  [v14 setModalInPresentation:0];

  return v14;
}

unint64_t sub_10099AA10()
{
  unint64_t result = qword_101674470;
  if (!qword_101674470)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101674470);
  }
  return result;
}

uint64_t type metadata accessor for CRLiOSParticipantContactViewController()
{
  return self;
}

Swift::Void __swiftcall CRLiOSParticipantContactViewController.viewDidLayoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for CRLiOSParticipantContactViewController();
  [super viewDidLayoutSubviews];
  if (qword_10166F598 != -1) {
    swift_once();
  }
  [v0 setPreferredContentSize:xmmword_101689690];
}

id CRLiOSParticipantContactViewController.__allocating_init(navigationBarClass:toolbarClass:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  ObjCClassFromMetadatCGFloat a = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v3 = swift_getObjCClassFromMetadata();
LABEL_4:
  id v5 = objc_allocWithZone(v2);

  return [v5 initWithNavigationBarClass:ObjCClassFromMetadata toolbarClass:v3];
}

void CRLiOSParticipantContactViewController.init(navigationBarClass:toolbarClass:)()
{
}

id CRLiOSParticipantContactViewController.__allocating_init(rootViewController:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithRootViewController:a1];

  return v3;
}

void CRLiOSParticipantContactViewController.init(rootViewController:)()
{
}

void CRLiOSParticipantContactViewController.init(nibName:bundle:)()
{
}

id CRLiOSParticipantContactViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSParticipantContactViewController();
  return [super dealloc];
}

ValueMetadata *type metadata accessor for CRLTipConnectionLinesOnSelection()
{
  return &type metadata for CRLTipConnectionLinesOnSelection;
}

uint64_t sub_10099AE60()
{
  uint64_t v0 = sub_1005057FC(&qword_10167A2C0);
  sub_100568B28(v0, qword_10171B0B8);
  sub_100556B74(v0, (uint64_t)qword_10171B0B8);
  return Tips.Event.init<>(id:)();
}

uint64_t sub_10099AEC8(uint64_t a1)
{
  return sub_10099AF84(a1, qword_10171B0D0);
}

uint64_t sub_10099AEEC(uint64_t a1)
{
  return sub_10099AF84(a1, qword_10171B0E8);
}

uint64_t sub_10099AF18(uint64_t a1)
{
  return sub_10099AF84(a1, qword_10171B100);
}

uint64_t sub_10099AF3C(uint64_t a1)
{
  return sub_10099AF84(a1, qword_10171B118);
}

uint64_t sub_10099AF60(uint64_t a1)
{
  return sub_10099AF84(a1, qword_10171B130);
}

uint64_t sub_10099AF84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1005057FC(&qword_10169FA10);
  sub_100568B28(v3, a2);
  sub_100556B74(v3, (uint64_t)a2);
  return Tips.Parameter.init<A>(_:_:_:_:)();
}

uint64_t sub_10099B028@<X0>(uint64_t *a1@<X8>)
{
  return sub_10099B030(1, a1);
}

uint64_t sub_10099B030@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1005057FC(&qword_10167A358);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_1005057FC(&qword_10167A360);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  id v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100523288(&qword_10167A368, &qword_10167A360);
  static PredicateExpressions.build_Arg<A>(_:)();
  v15[15] = a1;
  static PredicateExpressions.build_Arg<A>(_:)();
  a2[3] = sub_1005057FC(&qword_10167A370);
  a2[4] = sub_1006A14B4();
  sub_1005767BC(a2);
  sub_100523288(&qword_10167A390, &qword_10167A358);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10099B274@<X0>(uint64_t *a1@<X8>)
{
  return sub_10099B030(0, a1);
}

uint64_t sub_10099B27C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v1 = type metadata accessor for PredicateExpressions.ComparisonOperator();
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v37 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v35 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1005057FC(&qword_10167A2D8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_10167A2E0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1005057FC(&qword_10167A2E8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  UIMenu_optional v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1005057FC(&qword_1016896F0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v33 = v19;
  uint64_t v34 = v20;
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100523288(&qword_10167A300, &qword_10167A2E0);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_getKeyPath();
  sub_100523288(&qword_1016896F8, &qword_10167A2E8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  uint64_t v41 = 1;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  uint64_t v26 = v37;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v35, enum case for PredicateExpressions.ComparisonOperator.lessThan(_:), v37);
  uint64_t v27 = sub_1005057FC(&qword_101689700);
  uint64_t v28 = v38;
  v38[3] = v27;
  v28[4] = sub_10099C4B8();
  sub_1005767BC(v28);
  sub_100523288(&qword_101689718, &qword_1016896F0);
  sub_100523288(&qword_10167A350, &qword_10167A2D8);
  uint64_t v29 = v33;
  uint64_t v30 = v39;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v23, v29);
}

uint64_t sub_10099B768()
{
  return sub_10099BAD0();
}

uint64_t sub_10099B79C()
{
  uint64_t v0 = sub_1005057FC(&qword_1016896E0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Tips.IgnoresDisplayFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC(&qword_1016896E8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.IgnoresDisplayFrequency.init(_:)();
  static Tips.OptionsBuilder.buildExpression<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v18 = v5;
  uint64_t v19 = &protocol witness table for Tips.IgnoresDisplayFrequency;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
  uint64_t v18 = v10;
  uint64_t v19 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v16 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v16;
}

uint64_t sub_10099BA38@<X0>(uint64_t *a1@<X8>)
{
  sub_1005C6E70();
  uint64_t result = Tip.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10099BA7C()
{
  unint64_t result = qword_1016896D8;
  if (!qword_1016896D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016896D8);
  }
  return result;
}

uint64_t sub_10099BAD0()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 localizedStringForKey:v1 value:v2 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10052E310();
  return Text.init<A>(_:)();
}

uint64_t sub_10099BBD8()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 localizedStringForKey:v1 value:v2 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10052E310();
  return Text.init<A>(_:)();
}

uint64_t sub_10099BCC8()
{
  uint64_t v0 = sub_1005057FC(&qword_10167A2C0);
  uint64_t v29 = *(void *)(v0 - 8);
  uint64_t v30 = v0;
  __chkstk_darwin(v0, v1);
  uint64_t v31 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1005057FC(&qword_10169FA10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Tips.Rule();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10166F5C8 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100556B74(v3, (uint64_t)qword_10171B130);
  swift_beginAccess();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v14(v7, v13, v3);
  Tips.Rule.init<A>(_:_:)();
  v28[2] = static Tips.RuleBuilder.buildExpression(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v12, v8);
  uint64_t v16 = v8;
  if (qword_10166F5A8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100556B74(v3, (uint64_t)qword_10171B0D0);
  swift_beginAccess();
  v14(v7, v17, v3);
  Tips.Rule.init<A>(_:_:)();
  v28[1] = static Tips.RuleBuilder.buildExpression(_:)();
  v15(v12, v16);
  uint64_t v18 = v15;
  if (qword_10166F5B0 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_100556B74(v3, (uint64_t)qword_10171B0E8);
  swift_beginAccess();
  v14(v7, v19, v3);
  Tips.Rule.init<A>(_:_:)();
  v28[0] = static Tips.RuleBuilder.buildExpression(_:)();
  v18(v12, v16);
  if (qword_10166F5B8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100556B74(v3, (uint64_t)qword_10171B100);
  swift_beginAccess();
  v14(v7, v20, v3);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  v18(v12, v16);
  uint64_t v21 = v18;
  uint64_t v22 = v16;
  if (qword_10166F5C0 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100556B74(v3, (uint64_t)qword_10171B118);
  swift_beginAccess();
  v14(v7, v23, v3);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  v21(v12, v22);
  if (qword_10166F5A0 != -1) {
    swift_once();
  }
  uint64_t v24 = v30;
  uint64_t v25 = sub_100556B74(v30, (uint64_t)qword_10171B0B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v25, v24);
  type metadata accessor for Tips.EmptyDonation();
  sub_1006A1230(&qword_10167A2C8);
  sub_1006A1230(&qword_10167A2D0);
  Tips.Rule.init<A>(_:_:)();
  static Tips.RuleBuilder.buildExpression(_:)();
  v21(v12, v22);
  static Tips.RuleBuilder.buildPartialBlock(first:)();
  swift_bridgeObjectRelease();
  static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_10099C448()
{
  return sub_1006A1230(&qword_10167A2C8);
}

uint64_t sub_10099C47C()
{
  return sub_1006A1230(&qword_10167A2D0);
}

unint64_t sub_10099C4B8()
{
  unint64_t result = qword_101689708;
  if (!qword_101689708)
  {
    sub_100522D34(&qword_101689700);
    sub_10099C558();
    sub_100523288(&qword_10167A340, &qword_10167A2D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689708);
  }
  return result;
}

unint64_t sub_10099C558()
{
  unint64_t result = qword_101689710;
  if (!qword_101689710)
  {
    sub_100522D34(&qword_1016896F0);
    sub_1006A12E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689710);
  }
  return result;
}

id sub_10099C688()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  [v2 begin];
  [v2 setDisableActions:1];
  uint64_t v3 = (CGRect *)&v0[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect];
  if (CGRectIsEmpty(*(CGRect *)&v0[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect])
    || CGRectIsNull(*v3)
    || CGRectIsInfinite(*v3))
  {
    [v0 setMask:0];
  }
  else
  {
    CGMutablePathRef Mutable = CGPathCreateMutable();
    if (v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_invertClipping] == 1)
    {
      CGMutablePathRef.addRect(_:transform:)();
      uint64_t v6 = &kCAFillRuleEvenOdd;
    }
    else
    {
      uint64_t v6 = &kCAFillRuleNonZero;
    }
    uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_maskLayer];
    [v7 setFillRule:*v6];
    CGMutablePathRef.addRect(_:transform:)();
    [v7 setPath:Mutable 0x3FF0000000000000 0 0 0x3FF0000000000000 0 0];
    id v8 = [self blackColor];
    id v9 = [v8 CGColor];

    [v7 setFillColor:v9];
    [v1 setMask:v7];
  }

  return [v2 commit];
}

id sub_10099C934(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect];
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_invertClipping] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_renderRect];
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  uint64_t v5 = OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_maskLayer;
  id v6 = objc_allocWithZone((Class)CAShapeLayer);
  uint64_t v7 = v1;
  *(void *)&v1[v5] = [v6 init];

  sub_10050F848(a1, a1[3]);
  uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for CRLSceneCaptureSnapshotLayer.CRLSceneCaptureContentClippingLayer();
  [super initWithLayer:v8];
  swift_unknownObjectRelease();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)a1);
  return v9;
}

id sub_10099CA74(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect];
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_invertClipping] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_renderRect];
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  uint64_t v5 = OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_maskLayer;
  id v6 = objc_allocWithZone((Class)CAShapeLayer);
  uint64_t v7 = v1;
  *(void *)&v1[v5] = [v6 init];

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for CRLSceneCaptureSnapshotLayer.CRLSceneCaptureContentClippingLayer();
  [super initWithCoder:a1];

  return v8;
}

id sub_10099CB64()
{
  return sub_10099CC2C(type metadata accessor for CRLSceneCaptureSnapshotLayer.CRLSceneCaptureContentClippingLayer);
}

id sub_10099CC14()
{
  return sub_10099CC2C(type metadata accessor for CRLSceneCaptureSnapshotLayer);
}

id sub_10099CC2C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLSceneCaptureSnapshotLayer()
{
  return self;
}

uint64_t type metadata accessor for CRLSceneCaptureSnapshotLayer.CRLSceneCaptureContentClippingLayer()
{
  return self;
}

char *sub_10099CD08(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_1005FCB30(a3, (uint64_t)v67);
  double v9 = *(double *)v67;
  double v10 = *(double *)&v67[1];
  double v11 = *(double *)&v67[2];
  double v12 = *(double *)&v67[3];
  sub_1005FCB30(a4, (uint64_t)v66);
  double v13 = *(double *)v66;
  double v14 = *(double *)&v66[1];
  double v15 = *(double *)&v66[2];
  double v16 = *(double *)&v66[3];
  uint64_t v17 = OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_chromeClippingLayer;
  id v18 = objc_allocWithZone((Class)CALayer);
  uint64_t v19 = v4;
  *(void *)&v4[v17] = [v18 init];
  uint64_t v20 = OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer;
  *(void *)&v19[v20] = [objc_allocWithZone((Class)type metadata accessor for CRLSceneCaptureSnapshotLayer.CRLSceneCaptureContentClippingLayer()) init];
  id v21 = [a1 snapshotViewAfterScreenUpdates:0];
  if (v21)
  {
    uint64_t v22 = v21;
    id v64 = a2;
    id v23 = [v21 layer];
    *(void *)&v19[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_renderLayer] = v23;

    v65.receiver = v19;
    v65.super_class = (Class)type metadata accessor for CRLSceneCaptureSnapshotLayer();
    id v24 = [super init];
    sub_1005FCB30(a4, (uint64_t)v69);
    char v25 = v69[32];
    uint64_t v26 = (char *)v24;
    if (v25)
    {
      [a1 bounds];
      double v13 = v27;
      double v14 = v28;
      double v15 = v29;
      double v16 = v30;
    }
    sub_1005FCB30(a3, (uint64_t)v68);
    if (v68[32])
    {
      double v11 = v15;
      double v12 = v16;
      double v9 = 0.0;
      double v10 = 0.0;
    }
    [v26 setMasksToBounds:1, 0.0];
    [v26 setFrame:v13, v14, v15, v16];
    uint64_t v31 = OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer;
    uint64_t v32 = *(void **)&v26[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer];
    [v32 setMasksToBounds:0];
    [v32 setFrame:v9, v10, v11, v12];
    [v26 addSublayer:v32];
    uint64_t v33 = OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_chromeClippingLayer;
    uint64_t v34 = *(void **)&v26[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_chromeClippingLayer];
    [v34 setMasksToBounds:1];
    id v35 = v34;
    [v35 frame];
    [v35 setFrame:];

    uint64_t v36 = *(void **)&v26[v31];
    id v37 = *(id *)&v26[v33];
    [v36 frame];
    double v39 = sub_100064680(0.0, 0.0, v38);
    double v41 = v40;
    [v37 frame];
    [v37 setFrame:v39, v41];

    [*(id *)&v26[v31] addSublayer:*(void *)&v26[v33]];
    uint64_t v42 = OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_renderLayer;
    id v43 = *(id *)&v26[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_renderLayer];
    [a1 frame];
    [v43 frame];
    [v43 setFrame:];

    uint64_t v44 = *(void **)&v26[v42];
    double v45 = sub_100064680(0.0, 0.0, v13);
    double v47 = v46;
    id v48 = v44;
    [v48 frame];
    [v48 setFrame:v45, v47];

    uint64_t v49 = *(void **)&v26[v42];
    [*(id *)&v26[v33] addSublayer:v49];
    uint64_t v50 = (char *)*(id *)&v26[v31];
    id v51 = v49;
    [v51 bounds];
    [v51 convertRect:v50 toLayer:];
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;

    uint64_t v60 = &v50[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_renderRect];
    *(void *)uint64_t v60 = v53;
    *((void *)v60 + 1) = v55;
    *((void *)v60 + 2) = v57;
    *((void *)v60 + 3) = v59;
    sub_10099C688();

    uint64_t v61 = v26;
    [v64 addSublayer:v61];
  }
  else
  {

    unint64_t v62 = *(void **)&v19[v20];
    type metadata accessor for CRLSceneCaptureSnapshotLayer();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v61;
}

id sub_10099D170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = (uint64_t)&v4[OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardDataManaging];
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_chunkSizes] = _swiftEmptyArrayStorage;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_dataCache] = _swiftEmptyDictionarySingleton;
  v4[OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_hasReachedLastChunk] = 0;
  sub_1005498A4(a1, (uint64_t)v15);
  swift_beginAccess();
  double v10 = v4;
  sub_10099D650((uint64_t)v15, v9);
  swift_endAccess();
  double v11 = &v10[OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardType];
  *(void *)double v11 = a2;
  *((void *)v11 + 1) = a3;

  v14.receiver = v10;
  v14.super_class = ObjectType;
  [super init];
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
  return v12;
}

uint64_t sub_10099D280(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardType);
  if (a1 < 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t type metadata accessor for CRLPasteboardReadChannel()
{
  return self;
}

uint64_t sub_10099D650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101689800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10099D6B8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v102 = a4;
  uint64_t v104 = a1;
  uint64_t v6 = type metadata accessor for DispatchData();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  double v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a3 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardDataManaging;
  swift_beginAccess();
  sub_10099E34C(v11, (uint64_t)&v109);
  if (!v110)
  {
    sub_10099E3B4((uint64_t)&v109);
LABEL_31:
    static DispatchData.empty.getter();
    double v41 = (void *)DispatchData._bridgeToObjectiveC()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_42;
  }
  sub_10053974C(&v109, (uint64_t)v112);
  if (a2 <= 0)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v112);
    goto LABEL_31;
  }
  uint64_t v95 = v10;
  uint64_t v96 = v7;
  uint64_t v97 = v6;
  uint64_t v98 = a3;
  unint64_t v105 = a2;
  uint64_t v12 = v104;
  if (v104 < 0)
  {
    double v17 = 0.0;
    uint64_t v19 = 0;
    uint64_t v39 = 0;
    unint64_t v16 = 0;
    unint64_t v20 = 0xF000000000000000;
    goto LABEL_34;
  }
  double v13 = (double **)(a3 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_chunkSizes);
  uint64_t v14 = OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_hasReachedLastChunk;
  uint64_t v103 = (void *)(a3 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardType);
  swift_beginAccess();
  double v15 = (char *)v14;
  unint64_t v16 = 0;
  double v17 = 0.0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0xF000000000000000;
  uint64_t v101 = v15;
  while (1)
  {
    if (v16 >= *((void *)*v13 + 2))
    {
      int v21 = v15[a3];
      if (v21 != 1)
      {
        uint64_t v22 = (uint64_t)v19;
        uint64_t v23 = v113;
        uint64_t v24 = v114;
        sub_10050F848(v112, v113);
        uint64_t v25 = *v103;
        uint64_t v26 = v103[1];
        if (v16)
        {
          *(void *)&long long v109 = *v103;
          *((void *)&v109 + 1) = v26;
          swift_bridgeObjectRetain();
          v27._countAndFlagsBits = 46;
          v27._object = (void *)0xE100000000000000;
          String.append(_:)(v27);
          unint64_t v107 = v16;
          v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          uint64_t v26 = *((void *)&v109 + 1);
          uint64_t v25 = v109;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v25, v26, v23, v24);
        unint64_t v31 = v30;
        sub_100514260(v22, v20);
        swift_bridgeObjectRelease();
        if (v31 >> 60 == 15)
        {
          double v17 = 0.0;
          LOBYTE(v21) = 1;
          uint64_t v32 = v98;
          double v15 = v101;
          v101[v98] = 1;
          uint64_t v19 = (void *)v29;
          unint64_t v20 = v31;
          a3 = v32;
          a2 = v105;
          uint64_t v12 = v104;
        }
        else
        {
          a2 = v105;
          double v17 = 0.0;
          switch(v31 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v29), v29)) {
                goto LABEL_96;
              }
              *(void *)&double v17 = HIDWORD(v29) - (int)v29;
LABEL_18:
              sub_100510D4C(v29, v31);
LABEL_19:
              swift_beginAccess();
              id v35 = *v13;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *double v13 = v35;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                id v35 = sub_100F629F0(0, *((void *)v35 + 2) + 1, 1, v35);
                *double v13 = v35;
              }
              unint64_t v38 = *((void *)v35 + 2);
              unint64_t v37 = *((void *)v35 + 3);
              if (v38 >= v37 >> 1)
              {
                id v35 = sub_100F629F0((double *)(v37 > 1), v38 + 1, 1, v35);
                *double v13 = v35;
              }
              *((void *)v35 + 2) = v38 + 1;
              v35[v38 + 4] = v17;
              swift_endAccess();
              sub_100514260(v29, v31);
              LOBYTE(v21) = 0;
              uint64_t v19 = (void *)v29;
              unint64_t v20 = v31;
              a3 = v98;
              uint64_t v12 = v104;
              double v15 = v101;
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v29 + 16);
              uint64_t v33 = *(void *)(v29 + 24);
              *(void *)&double v17 = v33 - v34;
              if (!__OFSUB__(v33, v34)) {
                goto LABEL_18;
              }
              goto LABEL_97;
            case 3uLL:
              goto LABEL_19;
            default:
              *(void *)&double v17 = BYTE6(v31);
              goto LABEL_19;
          }
        }
      }
    }
    else
    {
      LOBYTE(v21) = 0;
      double v17 = (*v13)[v16 + 4];
    }
    uint64_t v39 = v18 + *(void *)&v17;
    if (__OFADD__(v18, *(void *)&v17))
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v39 > v12) {
      break;
    }
    unint64_t v40 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_84;
    }
    ++v16;
    v18 += *(void *)&v17;
    if (v21)
    {
      unint64_t v16 = v40;
      goto LABEL_34;
    }
  }
  uint64_t v39 = v18;
LABEL_34:
  if (__OFADD__(v39, *(void *)&v17))
  {
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"read(fromOffset:length:handler:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardReadChannel.swift", 91, 2, 126, (uint64_t)"Code is wrong, we should have calculated the chunk sizes.", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Code is wrong, we should have calculated the chunk sizes.");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"read(fromOffset:length:handler:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardReadChannel.swift", 91, 2, 126);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v93, v94);
    _Block_release(v102);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10099E32CLL);
  }
  if (v39 + *(void *)&v17 <= v12)
  {
    sub_100514260((uint64_t)v19, v20);
    goto LABEL_41;
  }
  uint64_t v103 = v19;
  if (v20 >> 60 != 15)
  {
    sub_1005498A4((uint64_t)v112, (uint64_t)&v109);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&v109);
    id v51 = v19;
    unint64_t v48 = v20;
LABEL_47:
    uint64_t v55 = (unint64_t *)(a3 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_dataCache);
    swift_beginAccess();
    sub_1005FA2A0((uint64_t)v103, v20);
    sub_100510D4C((uint64_t)v51, v48);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v106 = *v55;
    unint64_t *v55 = 0x8000000000000000;
    uint64_t v49 = a3;
    sub_100977A78((uint64_t)v51, v48, v16, v56);
    unint64_t *v55 = v106;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v103 = v51;
    sub_100510084((uint64_t)v51, v48);
LABEL_48:
    uint64_t v57 = OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_pasteboardType;
    uint64_t v99 = (double **)(v49 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_chunkSizes);
    swift_beginAccess();
    uint64_t v58 = v12 - v39;
    uint64_t v59 = v103;
    if (!__OFSUB__(v12, v39))
    {
      uint64_t v100 = (unint64_t *)(v98 + v57);
      uint64_t v101 = v102 + 16;
      while (2)
      {
        if (!__OFSUB__(*(void *)&v17, v58))
        {
          if (*(void *)&v17 - v58 >= a2) {
            uint64_t v60 = a2;
          }
          else {
            uint64_t v60 = *(void *)&v17 - v58;
          }
          if (!__OFADD__(v58, v60))
          {
            if (v58 + v60 >= v58)
            {
              sub_100510D4C((uint64_t)v59, v48);
              uint64_t v103 = v59;
              unint64_t v105 = v48;
              uint64_t v61 = Data.subdata(in:)();
              unint64_t v63 = v62;
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              sub_100510084(v61, v63);
              id v65 = [(objc_class *)isa crl_dispatchData];

              (*((void (**)(char *, void, id, void))v102 + 2))(v102, 0, v65, 0);
              BOOL v66 = __OFADD__(v12, v60);
              uint64_t v67 = v12 + v60;
              if (!v66)
              {
                BOOL v66 = __OFSUB__(a2, v60);
                uint64_t v68 = a2 - v60;
                if (!v66)
                {
                  if (v68 < 1)
                  {
                    uint64_t v90 = v103;
                    unint64_t v91 = v105;
                    sub_100514260((uint64_t)v103, v105);

                    sub_100510084((uint64_t)v90, v91);
LABEL_82:
                    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v112);
                    uint64_t v92 = v95;
                    static DispatchData.empty.getter();
                    double v41 = (void *)DispatchData._bridgeToObjectiveC()();
                    (*(void (**)(char *, uint64_t))(v96 + 8))(v92, v97);
                    (*((void (**)(char *, uint64_t, void *, void))v102 + 2))(v102, 1, v41, 0);
                    goto LABEL_43;
                  }
                  uint64_t v104 = v67;
                  uint64_t v69 = v68;
                  uint64_t v70 = v16 + 1;
                  if (!__OFADD__(v16, 1))
                  {
                    BOOL v66 = __OFADD__(v39, *(void *)&v17);
                    v39 += *(void *)&v17;
                    if (!v66)
                    {
                      uint64_t v72 = v113;
                      uint64_t v71 = v114;
                      sub_10050F848(v112, v113);
                      unint64_t v73 = *v100;
                      unint64_t v74 = v100[1];
                      if (v70 <= 0)
                      {
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        unint64_t v107 = *v100;
                        unint64_t v108 = v74;
                        swift_bridgeObjectRetain();
                        v75._countAndFlagsBits = 46;
                        v75._object = (void *)0xE100000000000000;
                        String.append(_:)(v75);
                        unint64_t v106 = v16 + 1;
                        v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                        String.append(_:)(v76);
                        swift_bridgeObjectRelease();
                        unint64_t v73 = v107;
                        unint64_t v74 = v108;
                      }
                      uint64_t v77 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v71 + 8))(v73, v74, v72, v71);
                      unint64_t v79 = v78;
                      uint64_t v80 = v103;
                      sub_100514260((uint64_t)v103, v105);
                      swift_bridgeObjectRelease();
                      if (v79 >> 60 != 15)
                      {
                        double v17 = 0.0;
                        uint64_t v81 = v99;
                        switch(v79 >> 62)
                        {
                          case 1uLL:
                            if (__OFSUB__(HIDWORD(v77), v77)) {
                              goto LABEL_93;
                            }
                            *(void *)&double v17 = HIDWORD(v77) - (int)v77;
LABEL_73:
                            sub_100510D4C(v77, v79);
LABEL_74:
                            uint64_t v84 = *((void *)*v81 + 2);
                            BOOL v85 = v70 < v84;
                            if (v70 == v84)
                            {
                              swift_beginAccess();
                              id v86 = *v81;
                              char v87 = swift_isUniquelyReferenced_nonNull_native();
                              void *v81 = v86;
                              if ((v87 & 1) == 0)
                              {
                                id v86 = sub_100F629F0(0, *((void *)v86 + 2) + 1, 1, v86);
                                void *v81 = v86;
                              }
                              unint64_t v89 = *((void *)v86 + 2);
                              unint64_t v88 = *((void *)v86 + 3);
                              if (v89 >= v88 >> 1)
                              {
                                id v86 = sub_100F629F0((double *)(v88 > 1), v89 + 1, 1, v86);
                                *uint64_t v99 = v86;
                              }
                              *((void *)v86 + 2) = v89 + 1;
                              v86[v89 + 4] = v17;
                              swift_endAccess();
                              a2 = v69;
                              uint64_t v80 = v103;
                            }
                            else
                            {
                              a2 = v69;
                              if (!v85) {
                                goto LABEL_98;
                              }
                            }

                            sub_100514260(v77, v79);
                            sub_100510084((uint64_t)v80, v105);
                            ++v16;
                            unint64_t v48 = v79;
                            uint64_t v59 = (void *)v77;
                            uint64_t v12 = v104;
                            uint64_t v58 = v104 - v39;
                            if (!__OFSUB__(v104, v39)) {
                              continue;
                            }
                            goto LABEL_85;
                          case 2uLL:
                            uint64_t v83 = *(void *)(v77 + 16);
                            uint64_t v82 = *(void *)(v77 + 24);
                            *(void *)&double v17 = v82 - v83;
                            if (!__OFSUB__(v82, v83)) {
                              goto LABEL_73;
                            }
                            goto LABEL_94;
                          case 3uLL:
                            goto LABEL_74;
                          default:
                            *(void *)&double v17 = BYTE6(v79);
                            goto LABEL_74;
                        }
                      }

                      sub_100510084((uint64_t)v80, v105);
                      *(unsigned char *)(v98 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_hasReachedLastChunk) = 1;
                      goto LABEL_82;
                    }
                    goto LABEL_92;
                  }
LABEL_91:
                  __break(1u);
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
LABEL_94:
                  __break(1u);
                  goto LABEL_95;
                }
LABEL_90:
                __break(1u);
                goto LABEL_91;
              }
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        break;
      }
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v42 = (uint64_t *)(a3 + OBJC_IVAR____TtC8Freeform24CRLPasteboardReadChannel_dataCache);
  swift_beginAccess();
  uint64_t v43 = *v42;
  if (*(void *)(*v42 + 16))
  {
    unint64_t v44 = sub_100955F14(v16);
    if (v45)
    {
      uint64_t v46 = *(void *)(v43 + 56) + 16 * v44;
      double v47 = *(void **)v46;
      unint64_t v48 = *(void *)(v46 + 8);
      swift_endAccess();
      uint64_t v103 = v47;
      sub_100510D4C((uint64_t)v47, v48);
      uint64_t v49 = v98;
      goto LABEL_48;
    }
  }
  swift_endAccess();
  sub_1005498A4((uint64_t)v112, (uint64_t)&v109);
  uint64_t v52 = v111;
  sub_10050F848(&v109, v110);
  uint64_t v53 = sub_10099D280(v16);
  id v51 = (void *)(*(uint64_t (**)(uint64_t))(v52 + 8))(v53);
  unint64_t v48 = v54;
  swift_bridgeObjectRelease();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&v109);
  if (v48 >> 60 != 15)
  {
    sub_100510D4C((uint64_t)v51, v48);
    a3 = v98;
    a2 = v105;
    uint64_t v12 = v104;
    goto LABEL_47;
  }
LABEL_41:
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v112);
  uint64_t v50 = v95;
  static DispatchData.empty.getter();
  double v41 = (void *)DispatchData._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v50, v97);
LABEL_42:
  (*((void (**)(char *, uint64_t, void *, void))v102 + 2))(v102, 1, v41, 0);
LABEL_43:
}

uint64_t sub_10099E34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101689800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10099E3B4(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC((uint64_t *)&unk_101689800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UUID.aas_hashSHA256(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v34 = sub_1005057FC(&qword_101689810);
  __chkstk_darwin(v34, v1);
  Swift::String v3 = (double *)((char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for SHA256Digest();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v8);
  double v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.uuid.getter();
  UUID.uuid.getter();
  UUID.init(uuid:)();
  uint64_t v15 = sub_1009A01DC((uint64_t)v14);
  unint64_t v17 = v16;
  sub_1009A06F0((unint64_t *)&qword_101672020, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  uint64_t v18 = (uint64_t)v10;
  unint64_t v36 = v17;
  switch(v17 >> 62)
  {
    case 1uLL:
      if (v15 >> 32 < (int)v15) {
        __break(1u);
      }
      unint64_t v31 = v10;
      unint64_t v25 = v36;
      sub_100510D4C(v15, v36);
      uint64_t v26 = v38;
      sub_10099EAEC((int)v15, v15 >> 32);
      uint64_t v21 = v26;
      uint64_t v22 = v15;
      unint64_t v23 = v25;
      uint64_t v18 = (uint64_t)v31;
      goto LABEL_9;
    case 2uLL:
      uint64_t v19 = *(void *)(v15 + 24);
      unint64_t v31 = *(char **)(v15 + 16);
      sub_100510D4C(v15, v17);
      swift_retain();
      swift_retain();
      uint64_t v20 = v38;
      sub_10099EAEC((uint64_t)v31, v19);
      if (v20)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x10099EA20);
      }
      uint64_t v21 = 0;
      swift_release();
      swift_release();
      uint64_t v22 = v15;
      unint64_t v23 = v17;
LABEL_9:
      sub_100510084(v22, v23);
      uint64_t v24 = v35;
      goto LABEL_10;
    case 3uLL:
      memset(v39, 0, 14);
      goto LABEL_6;
    default:
      v39[0] = v15;
      LOWORD(v39[1]) = v17;
      BYTE2(v39[1]) = BYTE2(v17);
      BYTE3(v39[1]) = BYTE3(v17);
      BYTE4(v39[1]) = BYTE4(v17);
      BYTE5(v39[1]) = BYTE5(v17);
LABEL_6:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_100510084(v15, v17);
      uint64_t v24 = v35;
      uint64_t v21 = v38;
LABEL_10:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v4);
      uint64_t v27 = v37;
      (*(void (**)(double *, uint64_t, uint64_t))(v24 + 16))(v3, v18, v37);
      *(void *)((char *)v3 + *(int *)(v34 + 36)) = 16;
      uint64_t v28 = sub_10099EBCC(v3);
      sub_100522F00((uint64_t)v3, &qword_101689810);
      if (*(void *)(v28 + 16) >= 0x10uLL)
      {
        unint64_t v31 = (char *)v18;
        LODWORD(v35) = *(unsigned __int8 *)(v28 + 39);
        LODWORD(v34) = *(unsigned __int8 *)(v28 + 38);
        uint64_t v38 = v21;
        uint64_t v33 = v15;
        swift_release();
        UUID.init(uuid:)();
        sub_100510084(v33, v36);
        return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v37);
      }
      else
      {
        swift_release();
        sub_1009A03DC();
        swift_allocError();
        swift_willThrow();
        sub_100510084(v15, v36);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v18, v27);
      }
  }
}

uint64_t UUID.aas_xor(_:)()
{
  return UUID.init(uuid:)();
}

uint64_t sub_10099EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_1009A06F0((unint64_t *)&qword_101672020, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10099EBCC(double *a1)
{
  uint64_t v3 = type metadata accessor for SHA256Digest();
  __n128 v5 = __chkstk_darwin(v3, v4);
  (*(void (**)(char *, double *, uint64_t, __n128))(v7 + 16))((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3, v5);
  sub_1009A06F0(&qword_101672028, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t result = sub_1005057FC(&qword_101689810);
  uint64_t v9 = *(void *)((char *)a1 + *(int *)(result + 36));
  uint64_t v10 = v31;
  if (!v9 || (unint64_t v11 = v32, v12 = *(void *)(v31 + 16), v32 == v12))
  {
    uint64_t result = swift_bridgeObjectRelease();
    size_t v1 = 0;
    a1 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  if ((v32 & 0x8000000000000000) == 0)
  {
    if (v32 < *(void *)(v31 + 16))
    {
      size_t v1 = 0;
      a1 = _swiftEmptyArrayStorage;
      uint64_t v13 = v9 - 1;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      uint64_t v15 = v12 - 1;
      uint64_t v30 = v15;
      while (1)
      {
        char v16 = *(unsigned char *)(v10 + v11 + 32);
        if (!v1)
        {
          unint64_t v17 = *((void *)a1 + 3);
          if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_32;
          }
          int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          sub_1005057FC(&qword_10167E468);
          uint64_t v20 = (double *)swift_allocObject();
          size_t v21 = 2 * j__malloc_size_1(v20) - 64;
          *((void *)v20 + 2) = v19;
          *((void *)v20 + 3) = v21;
          unint64_t v22 = (unint64_t)(v20 + 4);
          size_t v23 = *((void *)a1 + 3) >> 1;
          if (*((void *)a1 + 2))
          {
            if (v20 != a1 || v22 >= (unint64_t)a1 + v23 + 32) {
              memmove(v20 + 4, a1 + 4, v23);
            }
            a1[2] = 0.0;
          }
          uint64_t v14 = (double *)(v22 + v23);
          size_t v1 = (v21 >> 1) - v23;
          uint64_t result = swift_release();
          a1 = v20;
          uint64_t v15 = v30;
        }
        BOOL v25 = __OFSUB__(v1--, 1);
        if (v25) {
          break;
        }
        *(unsigned char *)uint64_t v14 = v16;
        if (!v13 || v15 == v11) {
          goto LABEL_26;
        }
        ++v11;
        uint64_t v14 = (double *)((char *)v14 + 1);
        --v13;
        if (v11 >= *(void *)(v10 + 16)) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_27:
    unint64_t v26 = *((void *)a1 + 3);
    if (v26 < 2) {
      return (uint64_t)a1;
    }
    unint64_t v27 = v26 >> 1;
    BOOL v25 = __OFSUB__(v27, v1);
    unint64_t v28 = v27 - v1;
    if (!v25)
    {
      *((void *)a1 + 2) = v28;
      return (uint64_t)a1;
    }
    goto LABEL_33;
  }
LABEL_34:
  __break(1u);
  return result;
}

void sub_10099EE6C(unint64_t a1)
{
  uint64_t v84 = type metadata accessor for IndexSet.Index();
  uint64_t v72 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v2);
  uint64_t v83 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v5);
  uint64_t v82 = (char *)&v71 - v6;
  uint64_t v7 = type metadata accessor for IndexSet();
  unint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v86 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_10167B268);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (unint64_t *)((char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v89 = sub_1005057FC(&qword_101689830);
  __chkstk_darwin(v89, v15);
  unint64_t v17 = (unint64_t *)((char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)a1 >> 62)
  {
LABEL_83:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((*(void *)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v19 = sub_1009A06F0((unint64_t *)&unk_10168A9B0, (void (*)(uint64_t))&type metadata accessor for IndexSet);
  uint64_t v20 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v20 < v18) {
    uint64_t v18 = v20;
  }
  if (v18 <= 0)
  {
    unint64_t v73 = _swiftEmptyArrayStorage;
    unint64_t v24 = *(void *)&_swiftEmptyArrayStorage[3];
  }
  else
  {
    sub_1005057FC(&qword_101689848);
    size_t v21 = (void *)swift_allocObject();
    int64_t v22 = j__malloc_size_1(v21);
    uint64_t v23 = v22 - 32;
    if (v22 < 32) {
      uint64_t v23 = v22 - 17;
    }
    unint64_t v24 = 2 * (v23 >> 4);
    v21[2] = v18;
    v21[3] = v24;
    unint64_t v73 = (double *)v21;
  }
  sub_1009A0688(a1, (uint64_t)v14);
  a1 = *v14;
  *unint64_t v17 = *v14;
  v17[1] = 0;
  BOOL v25 = v86;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v86, (char *)v14 + *(int *)(v11 + 52), v7);
  uint64_t v26 = v89;
  unint64_t v74 = (char *)v17 + *(int *)(v89 + 52);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v85 = *(int *)(v26 + 56);
  *((unsigned char *)v17 + v85) = 0;
  if (v18 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t *)v18;
    unint64_t v71 = v8;
    unint64_t v75 = v24 >> 1;
    uint64_t v80 = v17;
    unint64_t v81 = v7;
    if (v18)
    {
      unint64_t v27 = v73;
      unint64_t v8 = (unint64_t)v74;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v70)
        {
LABEL_14:
          unint64_t v28 = 0;
          uint64_t v11 = v8 + *(int *)(sub_1005057FC(&qword_101689838) + 36);
          unint64_t v78 = (void (**)(char *, char *, unint64_t))(v72 + 8);
          unint64_t v79 = (void (**)(char *, uint64_t, uint64_t))(v72 + 16);
          Swift::String v76 = (void (**)(char *, unint64_t))(v71 + 8);
          uint64_t v77 = (void (**)(char *, unint64_t, unint64_t))(v71 + 16);
          v75 -= v18;
          uint64_t v29 = (uint64_t)(v27 + 6);
          uint64_t v30 = v84;
          uint64_t v7 = v72 + 8;
          while (1)
          {
            if ((a1 & 0xC000000000000001) != 0)
            {
              id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v32 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_75;
              }
            }
            else
            {
              if ((v28 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
                goto LABEL_83;
              }
              if (v28 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_74;
              }
              id v31 = *(id *)(a1 + 8 * v28 + 32);
              unint64_t v32 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_75;
              }
            }
            id v88 = v31;
            uint64_t v89 = v29;
            char v87 = (void (**)(char *, uint64_t, uint64_t))v14;
            v17[1] = v32;
            a1 = v8;
            uint64_t v33 = v82;
            (*v79)(v82, v11, v30);
            sub_1009A06F0(&qword_101689840, (void (*)(uint64_t))&type metadata accessor for IndexSet);
            uint64_t v34 = v83;
            unint64_t v35 = v81;
            dispatch thunk of Collection.endIndex.getter();
            sub_1009A06F0(&qword_10168A9C0, (void (*)(uint64_t))&type metadata accessor for IndexSet.Index);
            char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v37 = *(void (**)(char *, uint64_t))v7;
            (*(void (**)(char *, uint64_t))v7)(v34, v30);
            v37(v33, v30);
            if (v36) {
              goto LABEL_90;
            }
            uint64_t v38 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
            uint64_t v40 = *v39;
            v38(v90, 0);
            double v41 = v86;
            (*v77)(v86, a1, v35);
            dispatch thunk of Collection.formIndex(after:)();
            (*v76)(v41, v35);
            uint64_t v19 = v89;
            *(void *)(v89 - 16) = v88;
            *(void *)(v19 - 8) = v40;
            uint64_t v14 = (unint64_t *)((char *)v87 - 1);
            unint64_t v17 = v80;
            unint64_t v8 = a1;
            if (v87 == (void (**)(char *, uint64_t, uint64_t))1) {
              break;
            }
            if (*((unsigned char *)v80 + v85)) {
              goto LABEL_76;
            }
            a1 = *v80;
            unint64_t v28 = v80[1];
            if (*v80 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            uint64_t v29 = v19 + 16;
            if (v28 == v42) {
              goto LABEL_77;
            }
          }
          if ((*((unsigned char *)v80 + v85) & 1) == 0) {
            goto LABEL_33;
          }
          goto LABEL_68;
        }
      }
      else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_14;
      }
      __break(1u);
      goto LABEL_89;
    }
    unint64_t v8 = (unint64_t)v74;
    uint64_t v19 = (uint64_t)(v73 + 4);
LABEL_33:
    a1 = *v17;
    BOOL v25 = (char *)v17[1];
    if (!(*v17 >> 62))
    {
      if (v25 != *(char **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_35;
      }
      goto LABEL_67;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 != (char *)v69)
  {
LABEL_35:
    uint64_t v11 = v8 + *(int *)(sub_1005057FC(&qword_101689838) + 36);
    char v87 = (void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    unint64_t v79 = (void (**)(char *, uint64_t, uint64_t))(v72 + 8);
    uint64_t v77 = (void (**)(char *, unint64_t, unint64_t))(v71 + 8);
    unint64_t v78 = (void (**)(char *, char *, unint64_t))(v71 + 16);
    uint64_t v14 = (unint64_t *)(v72 + 8);
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v44 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_80;
        }
      }
      else
      {
        if (((unint64_t)v25 & 0x8000000000000000) != 0) {
          goto LABEL_78;
        }
        if ((unint64_t)v25 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_79;
        }
        id v43 = *(id *)(a1 + 8 * (void)v25 + 32);
        unint64_t v44 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_80;
        }
      }
      id v88 = v43;
      uint64_t v89 = v19;
      v17[1] = v44;
      uint64_t v7 = (uint64_t)v82;
      unint64_t v17 = (void *)v84;
      (*v87)(v82, v11, v84);
      sub_1009A06F0(&qword_101689840, (void (*)(uint64_t))&type metadata accessor for IndexSet);
      unint64_t v8 = (unint64_t)v83;
      char v45 = v74;
      a1 = v81;
      dispatch thunk of Collection.endIndex.getter();
      sub_1009A06F0(&qword_10168A9C0, (void (*)(uint64_t))&type metadata accessor for IndexSet.Index);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v47 = (void (*)(uint64_t, void *))*v14;
      ((void (*)(unint64_t, void *))*v14)(v8, v17);
      v47(v7, v17);
      if (v46) {
        break;
      }
      unint64_t v48 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v50 = *v49;
      v48(v90, 0);
      id v51 = v86;
      (*v78)(v86, v45, a1);
      dispatch thunk of Collection.formIndex(after:)();
      ((void (*)(char *, unint64_t))*v77)(v51, a1);
      if (v75)
      {
        unint64_t v17 = v80;
        uint64_t v52 = (void *)v89;
        unint64_t v53 = v75 - 1;
        if (__OFSUB__(v75, 1)) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v7 = (uint64_t)v73;
        unint64_t v54 = *((void *)v73 + 3);
        if ((uint64_t)((v54 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_82;
        }
        int64_t v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
        if (v55 <= 1) {
          uint64_t v56 = 1;
        }
        else {
          uint64_t v56 = v55;
        }
        sub_1005057FC(&qword_101689848);
        uint64_t v57 = (void *)swift_allocObject();
        int64_t v58 = j__malloc_size_1(v57);
        uint64_t v59 = v58 - 32;
        if (v58 < 32) {
          uint64_t v59 = v58 - 17;
        }
        uint64_t v60 = v59 >> 4;
        v57[2] = v56;
        v57[3] = 2 * (v59 >> 4);
        unint64_t v61 = (unint64_t)(v57 + 4);
        unint64_t v8 = *(void *)(v7 + 24) >> 1;
        if (*(void *)(v7 + 16))
        {
          unint64_t v62 = (const void *)(v7 + 32);
          if (v57 != (void *)v7 || v61 >= (unint64_t)v62 + 16 * v8) {
            memmove(v57 + 4, v62, 16 * v8);
          }
          *(void *)(v7 + 16) = 0;
        }
        uint64_t v52 = (void *)(v61 + 16 * v8);
        unint64_t v63 = (v60 & 0x7FFFFFFFFFFFFFFFLL) - v8;
        swift_release();
        unint64_t v73 = (double *)v57;
        unint64_t v17 = v80;
        BOOL v64 = __OFSUB__(v63, 1);
        unint64_t v53 = v63 - 1;
        if (v64) {
          goto LABEL_81;
        }
      }
      *uint64_t v52 = v88;
      v52[1] = v50;
      if (*((unsigned char *)v17 + v85)) {
        goto LABEL_69;
      }
      unint64_t v75 = v53;
      a1 = *v17;
      BOOL v25 = (char *)v17[1];
      if (*v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v65 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v19 = (uint64_t)(v52 + 2);
      if (v25 == (char *)v65) {
        goto LABEL_67;
      }
    }

    unint64_t v17 = v80;
  }
LABEL_67:
  *((unsigned char *)v17 + v85) = 1;
LABEL_68:
  unint64_t v53 = v75;
LABEL_69:
  sub_100522F00((uint64_t)v17, &qword_101689830);
  unint64_t v66 = *((void *)v73 + 3);
  if (v66 < 2) {
    return;
  }
  unint64_t v67 = v66 >> 1;
  BOOL v64 = __OFSUB__(v67, v53);
  unint64_t v68 = v67 - v53;
  if (!v64)
  {
    *((void *)v73 + 2) = v68;
    return;
  }
LABEL_89:
  __break(1u);
LABEL_90:

  __break(1u);
}

uint64_t sub_10099F920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101672EB0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v95 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v85 = (char *)&v80 - v9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v103 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  Swift::String v94 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v84 = (char *)&v80 - v15;
  uint64_t v16 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v100 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v104 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18, v20);
  uint64_t v89 = (uint64_t)&v80 - v21;
  uint64_t v102 = sub_1005057FC(&qword_101674738);
  uint64_t v22 = *(void *)(v102 - 8);
  uint64_t v24 = __chkstk_darwin(v102, v23);
  uint64_t v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v83 = (uint64_t)&v80 - v29;
  __chkstk_darwin(v28, v30);
  uint64_t v86 = v22;
  uint64_t v87 = (uint64_t)&v80 - v31;
  unint64_t v32 = *(void *)(a1 + 16);
  unint64_t v33 = *(void *)(a2 + 16);
  if (v33 >= v32) {
    int64_t v34 = *(void *)(a1 + 16);
  }
  else {
    int64_t v34 = *(void *)(a2 + 16);
  }
  uint64_t v98 = a2;
  unint64_t v99 = v32;
  unint64_t v101 = v33;
  if (!v34)
  {
    uint64_t v52 = *(unsigned __int8 *)(v22 + 80);
    double v53 = _swiftEmptyArrayStorage[3];
    uint64_t v82 = (v52 + 32) & ~v52;
    uint64_t v90 = _swiftEmptyArrayStorage;
    id v43 = (char *)_swiftEmptyArrayStorage + v82;
    uint64_t v88 = *(void *)&v53 >> 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32 <= v33)
    {
LABEL_50:
      unint64_t v61 = v90;
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v76 = *((void *)v61 + 3);
      if (v76 >= 2)
      {
        unint64_t v77 = v76 >> 1;
        BOOL v75 = __OFSUB__(v77, v88);
        unint64_t v78 = v77 - v88;
        if (v75)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        *((void *)v61 + 2) = v78;
      }
      return (uint64_t)v61;
    }
    goto LABEL_18;
  }
  uint64_t v97 = a1;
  sub_1005057FC(&qword_101689828);
  uint64_t v35 = *(void *)(v22 + 72);
  unint64_t v36 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v81 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v37 = (char *)swift_allocObject();
  size_t v38 = j__malloc_size_1(v37);
  if (!v35)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v38 - v36 != 0x8000000000000000 || v35 != -1)
  {
    uint64_t v96 = v10;
    uint64_t v40 = 0;
    uint64_t v41 = (uint64_t)(v38 - v36) / v35;
    uint64_t v82 = v36;
    uint64_t v42 = (double *)v37;
    id v43 = &v37[v36];
    uint64_t v44 = v103;
    *((void *)v42 + 2) = v34;
    *((void *)v42 + 3) = 2 * v41;
    uint64_t v92 = v44 + 56;
    uint64_t v93 = v44 + 16;
    uint64_t v90 = v42;
    uint64_t v91 = v44 + 48;
    char v45 = (void (**)(char *, unint64_t, uint64_t))(v44 + 32);
    uint64_t v88 = (v41 & 0x7FFFFFFFFFFFFFFFLL) - v34;
    uint64_t v46 = v96;
    do
    {
      if (v32 == v40)
      {
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      sub_10076F9F8(v97+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v40, (uint64_t)v104);
      if (v101 == v40) {
        goto LABEL_56;
      }
      int64_t v47 = v34;
      uint64_t v48 = v103;
      unint64_t v32 = (unint64_t)v95;
      (*(void (**)(char *, unint64_t, uint64_t))(v103 + 16))(v95, v98+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v40, v46);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v48 + 56))(v32, 0, 1, v46);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v48 + 48))(v32, 1, v46) == 1) {
        goto LABEL_66;
      }
      ++v40;
      uint64_t v49 = *v45;
      uint64_t v50 = v94;
      (*v45)(v94, v32, v46);
      id v51 = &v26[*(int *)(v102 + 48)];
      sub_1009A05B8((uint64_t)v104, (uint64_t)v26);
      v49(v51, (unint64_t)v50, v46);
      sub_1009A061C((uint64_t)v26, (uint64_t)v43);
      v43 += v35;
      int64_t v34 = v47;
      unint64_t v32 = v99;
    }
    while (v47 != v40);
    a1 = v97;
    swift_bridgeObjectRetain();
    a2 = v98;
    swift_bridgeObjectRetain();
    unint64_t v33 = v101;
    uint64_t v10 = v96;
    uint64_t v52 = v81;
    if (v32 <= v101) {
      goto LABEL_50;
    }
LABEL_18:
    uint64_t v104 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56);
    uint64_t v95 = (char *)(v103 + 48);
    uint64_t v96 = v103 + 16;
    uint64_t v93 = v52 | 7;
    Swift::String v94 = (char *)(v103 + 32);
    if (v34 <= (uint64_t)v33) {
      unint64_t v54 = v33;
    }
    else {
      unint64_t v54 = v34;
    }
    uint64_t v97 = v54;
    while (v32 != v34)
    {
      sub_10076F9F8(a1+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v34, v89);
      if (v33 == v34)
      {
        uint64_t v55 = (uint64_t)v85;
        (*v104)(v85, 1, 1, v10);
LABEL_49:
        sub_1009A055C(v89);
        sub_100522F00(v55, &qword_101672EB0);
        goto LABEL_50;
      }
      uint64_t v55 = (uint64_t)v85;
      if (v97 == v34) {
        goto LABEL_58;
      }
      uint64_t v56 = v103;
      (*(void (**)(char *, unint64_t, uint64_t))(v103 + 16))(v85, a2+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v34, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v55, 0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v55, 1, v10) == 1) {
        goto LABEL_49;
      }
      uint64_t v57 = *(void (**)(uint64_t, unint64_t, uint64_t))v94;
      unint64_t v32 = (unint64_t)v84;
      (*(void (**)(char *, uint64_t, uint64_t))v94)(v84, v55, v10);
      uint64_t v58 = v83;
      uint64_t v59 = v83 + *(int *)(v102 + 48);
      sub_1009A05B8(v89, v83);
      v57(v59, v32, v10);
      sub_1009A061C(v58, v87);
      uint64_t v60 = v88;
      if (v88)
      {
        unint64_t v61 = v90;
        unint64_t v32 = v99;
      }
      else
      {
        unint64_t v62 = *((void *)v90 + 3);
        uint64_t v63 = v82;
        if ((uint64_t)((v62 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_60;
        }
        int64_t v64 = v62 & 0xFFFFFFFFFFFFFFFELL;
        if (v64 <= 1) {
          uint64_t v65 = 1;
        }
        else {
          uint64_t v65 = v64;
        }
        sub_1005057FC(&qword_101689828);
        uint64_t v66 = *(void *)(v86 + 72);
        unint64_t v61 = (double *)swift_allocObject();
        size_t v67 = j__malloc_size_1(v61);
        if (!v66) {
          goto LABEL_61;
        }
        int64_t v68 = v67 - v63;
        if (v67 - v63 == 0x8000000000000000 && v66 == -1) {
          goto LABEL_62;
        }
        uint64_t v70 = v63;
        uint64_t v71 = v68 / v66;
        *((void *)v61 + 2) = v65;
        *((void *)v61 + 3) = 2 * (v68 / v66);
        uint64_t v72 = (char *)v61 + v70;
        uint64_t v73 = *((void *)v90 + 3) >> 1;
        uint64_t v74 = v73 * v66;
        if (*((void *)v90 + 2))
        {
          if (v61 < v90 || v72 >= (char *)v90 + v82 + v74)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v61 != v90)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v90[2] = 0.0;
        }
        id v43 = &v72[v74];
        uint64_t v60 = (v71 & 0x7FFFFFFFFFFFFFFFLL) - v73;
        swift_release();
        a2 = v98;
        unint64_t v32 = v99;
      }
      BOOL v75 = __OFSUB__(v60, 1);
      uint64_t v88 = v60 - 1;
      unint64_t v33 = v101;
      if (v75) {
        goto LABEL_59;
      }
      ++v34;
      sub_1009A061C(v87, (uint64_t)v43);
      v43 += *(void *)(v86 + 72);
      uint64_t v90 = v61;
      if (v32 == v34) {
        goto LABEL_51;
      }
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1009A055C((uint64_t)v104);
  uint64_t result = sub_100522F00(v32, &qword_101672EB0);
  __break(1u);
  return result;
}

uint64_t sub_1009A01DC(uint64_t a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(length:)();
  UUID.uuid.getter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  uint64_t v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return 0x1000000000;
}

unint64_t sub_1009A03DC()
{
  unint64_t result = qword_101689818;
  if (!qword_101689818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689818);
  }
  return result;
}

unint64_t sub_1009A0434()
{
  unint64_t result = qword_101689820;
  if (!qword_101689820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689820);
  }
  return result;
}

unsigned char *_s14CombiningErrorOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1009A0524);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UUID.CombiningError()
{
  return &type metadata for UUID.CombiningError;
}

uint64_t sub_1009A055C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1009A05B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009A061C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101674738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009A0688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_10167B268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009A06F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CRLPresentedPopoverTextEditingBehaviorProvidingSwiftHelper()
{
  return self;
}

uint64_t sub_1009A07D8(void *a1)
{
  if (!a1) {
    return 2;
  }
  uint64_t v9 = a1;
  sub_1009A08B0();
  id v2 = a1;
  sub_1005057FC(&qword_101689878);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_1009A08F0((uint64_t)v7);
    return 2;
  }
  sub_10053974C(v7, (uint64_t)v10);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  sub_10050F848(v10, v11);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4) & 1;
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v10);
  return v5;
}

unint64_t sub_1009A08B0()
{
  unint64_t result = qword_1016745A0;
  if (!qword_1016745A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016745A0);
  }
  return result;
}

uint64_t sub_1009A08F0(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101689880);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1009A0950(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  v6[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_wantsLinkViewSublayerTransformAdjustedHitTestFrame] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_backgroundLayer] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_spinnerLayer] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_lineWidth] = 0x4000000000000000;
  v31.receiver = v6;
  v31.super_class = (Class)type metadata accessor for CRLIndeterminateRoundSpinnerView();
  uint64_t v13 = (char *)[super initWithFrame:a3, a4, a5, a6];
  id v14 = [v13 layer];
  id v15 = [self clearColor];
  id v16 = [v15 CGColor];

  [v14 setBackgroundColor:v16];
  [v13 bounds];
  id v19 = sub_1009A1634(v17, v18);
  id v20 = [v13 layer];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 addSublayer:v19];
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"addBackgroundLayer()", 20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 106, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"addBackgroundLayer()", 20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 106);
  }
  uint64_t v22 = *(void **)&v13[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_backgroundLayer];
  *(void *)&v13[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_backgroundLayer] = v19;

  id v23 = sub_1009A1070();
  uint64_t v24 = *(void **)&v13[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_spinnerLayer];
  *(void *)&v13[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_spinnerLayer] = v23;

  v30[3] = swift_getObjectType();
  v30[0] = a1;
  id v25 = objc_allocWithZone((Class)UITapGestureRecognizer);
  uint64_t v26 = v13;
  swift_unknownObjectRetain();
  uint64_t v27 = _bridgeAnythingToObjectiveC<A>(_:)();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v30);
  id v28 = [v25 initWithTarget:v27 action:a2];
  swift_unknownObjectRelease();
  [v26 addGestureRecognizer:v28];

  swift_unknownObjectRelease();
  return v26;
}

id sub_1009A0CD8(uint64_t a1, CGFloat a2, CGFloat a3)
{
  if (*((unsigned char *)v3
       + OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_wantsLinkViewSublayerTransformAdjustedHitTestFrame) == 1)
  {
    if (![v3 isHidden])
    {
      v12.origin.double x = sub_1009A0E28();
      v11.double x = a2;
      v11.double y = a3;
      if (CGRectContainsPoint(v12, v11)) {
        return v3;
      }
    }
    v9.receiver = v3;
    v9.super_class = (Class)type metadata accessor for CRLIndeterminateRoundSpinnerView();
    [super hitTest:a1 withEvent:a2];
  }
  else
  {
    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for CRLIndeterminateRoundSpinnerView();
    [super hitTest:a1 withEvent:a2];
  }
  return v8;
}

double sub_1009A0E28()
{
  if ((v0[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_wantsLinkViewSublayerTransformAdjustedHitTestFrame] & 1) == 0)
  {
    LOBYTE(v9) = 2;
    uint64_t v8 = 69;
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"adjustedFrame", 13, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 77);
  }
  id v1 = [v0 superview];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 frame];
    CGFloat v3 = CGRectGetWidth(v11) * 0.5;
    [v0 frame];
    double v4 = v3 - CGRectGetWidth(v12) * 0.5;
    [v2 frame];
    CGRectGetHeight(v13);
    [v0 frame];
    CGRectGetHeight(v14);
    [v0 frame];
    CGRectGetWidth(v15);
    [v0 frame];
    CGRectGetHeight(v16);
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"adjustedFrame", 13, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 78, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    LOBYTE(v10) = 2;
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"adjustedFrame", 13, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 78);
    [v0 frame:invalid nil found when unwrapping value:39:v10];
    return v5;
  }
  return v4;
}

id sub_1009A1070()
{
  id v1 = [v0 layer];
  if (v1)
  {
    uint64_t v2 = v1;
    double v3 = sub_1009A1414();
    id v5 = sub_1009A12A4(v3, v4);
    uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_backgroundLayer];
    if (v6) {
      [v6 addSublayer:v5];
    }
    [v5 setAnchorPoint:0.5, 0.5];
    id v7 = v5;
    [v2 bounds];
    [v7 setPosition:sub_100065738(v8, v9, v10, v11)];
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"addSpinnerLayer()", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 91, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"addSpinnerLayer()", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 91);
    return 0;
  }
  return v7;
}

void sub_1009A11D0()
{
  uint64_t v1 = OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_spinnerLayer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_spinnerLayer);
  if (v2
    || (id v3 = sub_1009A1070(),
        double v4 = *(void **)(v0 + v1),
        *(void *)(v0 + v1) = v3,
        v4,
        (uint64_t v2 = *(void **)(v0 + v1)) != 0))
  {
    [v2 removeAllAnimations];
    id v5 = *(void **)(v0 + v1);
    if (v5)
    {
      id v6 = v5;
      id v7 = sub_1009A178C();
      id v8 = String._bridgeToObjectiveC()();
      [v6 addAnimation:v7 forKey:v8];
    }
  }
}

id sub_1009A12A4(double a1, double a2)
{
  uint64_t v3 = v2;
  id v6 = [objc_allocWithZone((Class)CAShapeLayer) init];
  [v6 setFrame:0.0, 0.0, a1, a2];
  CGMutablePathRef Mutable = CGPathCreateMutable();
  double v8 = sub_100064070();
  sub_100065738(v8, v9, v10, v11);
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  [v6 setPath:Mutable 0x3FF0000000000000 0 0 0x3FF0000000000000 0 0];

  [v6 setLineWidth:*(double *)(v3 + OBJC_IVAR____TtC8Freeform32CRLIndeterminateRoundSpinnerView_lineWidth)];
  id v12 = [objc_allocWithZone((Class)CRLColor) initWithWhite:0.3 alpha:1.0];
  id v13 = [v12 CGColor];

  [v6 setStrokeColor:v13];
  [v6 setFillColor:0];
  return v6;
}

double sub_1009A1414()
{
  [v0 bounds];
  if (CGRectGetWidth(v5) <= 15.0 || ([v0 bounds], CGRectGetHeight(v6) <= 15.0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"spinnerSize", 11, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 183, (uint64_t)"Spinner is too small!", 21, 2u, (uint64_t)_swiftEmptyArrayStorage);
    LOBYTE(v4) = 2;
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"spinnerSize", 11, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLIndeterminateRoundSpinnerView.swift", 108, 2, 183);
    [v0 bounds:@"Spinner is too small!" 21 v4];
    return v2;
  }
  else
  {
    [v0 bounds];
    double v1 = CGRectGetWidth(v7) + -15.0;
    [v0 bounds];
    CGRectGetHeight(v8);
  }
  return v1;
}

id sub_1009A1590()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLIndeterminateRoundSpinnerView();
  [super dealloc];
}

uint64_t type metadata accessor for CRLIndeterminateRoundSpinnerView()
{
  return self;
}

id sub_1009A1634(double a1, double a2)
{
  id v4 = [objc_allocWithZone((Class)CAShapeLayer) init];
  [v4 setFrame:0.0, 0.0, a1, a2];
  CGMutablePathRef Mutable = CGPathCreateMutable();
  double v6 = sub_100064070();
  sub_100065738(v6, v7, v8, v9);
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  [v4 setPath:Mutable 0x3FF0000000000000 0 0 0x3FF0000000000000 0 0];

  [v4 setLineWidth:0.0];
  [v4 setStrokeColor:0];
  id v10 = [objc_allocWithZone((Class)CRLColor) initWithWhite:1.0 alpha:0.75];
  id v11 = [v10 CGColor];

  [v4 setFillColor:v11];
  return v4;
}

id sub_1009A178C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self animationWithKeyPath:v0];

  objc_super v2 = self;
  id v3 = v1;
  id v4 = [v2 functionWithName:kCAValueFunctionRotateZ];
  [v3 setValueFunction:v4];

  [v3 setDuration:2.0];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  [v3 setFromValue:isa];

  Class v6 = Double._bridgeToObjectiveC()().super.super.isa;
  [v3 setToValue:v6];

  LODWORD(v7) = 2139095040;
  [v3 setRepeatCount:v7];
  id v8 = v3;
  CFTimeInterval v9 = CACurrentMediaTime();
  double v10 = sub_100407E24(v9 * 0.5);
  [v8 setTimeOffset:v10 + v10];

  return v8;
}

void *sub_1009A1908(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v10 = v8;
  uint64_t v30 = a6;
  uint64_t v31 = a8;
  uint64_t v33 = a5;
  uint64_t v29 = a4;
  uint64_t v32 = *v8;
  uint64_t v15 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v15 - 8, v16);
  double v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a1, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  id v21 = objc_allocWithZone((Class)CRLZipFileWriter);
  id v22 = sub_1009A33CC((uint64_t)v18);
  if (v9)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
    swift_deallocPartialClassInstance();
  }
  else
  {
    id v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
    type metadata accessor for CRLFileWriteAssistant.WriteCoordinatorChannelProvider();
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v25 = v29;
    _OWORD v24[2] = v23;
    v24[3] = v25;
    uint64_t v26 = v30;
    v24[4] = v33;
    v24[5] = v26;
    v24[6] = a7;
    void v10[2] = v24;
    void v10[3] = a2;
    uint64_t v27 = v31;
    v10[4] = a3;
    v10[5] = v27;
  }
  return v10;
}

uint64_t sub_1009A1B28(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  v3[36] = v4;
  v3[37] = *(void *)(v4 - 8);
  v3[38] = swift_task_alloc();
  return _swift_task_switch(sub_1009A1BEC, 0, 0);
}

uint64_t sub_1009A1BEC()
{
  id v1 = *(void **)(v0 + 280);
  if (v1[5]) {
    uint64_t v2 = 7;
  }
  else {
    uint64_t v2 = 3;
  }
  uint64_t v3 = v1[2];
  *(void *)(v0 + 312) = v3;
  CGRect v5 = (void *)v1[3];
  uint64_t v4 = (void *)v1[4];
  *(void *)(v0 + 208) = type metadata accessor for CRLFileWriteAssistant.WriteCoordinatorChannelProvider();
  *(void *)(v0 + 216) = &off_10151C5A8;
  *(void *)(v0 + 184) = v3;
  type metadata accessor for CRLSerializableObjectWriteCoordinator();
  long long v11 = *(_OWORD *)(v0 + 264);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 320) = inited;
  *(void *)(inited + 96) = 0;
  *(_OWORD *)(inited + 16) = v11;
  sub_10053974C((long long *)(v0 + 184), inited + 32);
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = v4;
  *(void *)(inited + 88) = v2;
  swift_unknownObjectRetain();
  swift_retain();
  id v7 = v5;
  id v8 = v4;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v9;
  void *v9 = v0;
  v9[1] = sub_1009A1D38;
  return sub_1009AD4AC();
}

uint64_t sub_1009A1D38()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1009A215C;
  }
  else {
    uint64_t v2 = sub_1009A1E4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009A1E4C()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = *(void **)(v0[39] + 16);
  v0[43] = v4;
  sub_100656064();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DispatchQoS.QoSClass.default(_:), v2);
  id v5 = v4;
  uint64_t v6 = static OS_dispatch_queue.global(qos:)();
  v0[44] = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[2] = v0;
  v0[3] = sub_1009A1FC8;
  uint64_t v7 = swift_continuation_init();
  v0[28] = _NSConcreteStackBlock;
  v0[29] = 0x40000000;
  v0[30] = sub_1009A2258;
  v0[31] = &unk_10151C5C8;
  v0[32] = v7;
  [v5 closeWithQueue:v6 completion:v0 + 28];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1009A1FC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 360) = v1;
  if (v1) {
    uint64_t v2 = sub_1009A21CC;
  }
  else {
    uint64_t v2 = sub_1009A20D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009A20D8()
{
  uint64_t v2 = (void *)v0[43];
  uint64_t v1 = (void *)v0[44];
  swift_release();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009A215C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1009A21CC()
{
  uint64_t v1 = (void *)v0[44];
  uint64_t v2 = (void *)v0[43];
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009A2258(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_1005057FC(&qword_101672BD0);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

id sub_1009A22F0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)(v0 + 16);
  NSString v7 = String._bridgeToObjectiveC()();
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  [v6 beginEntryWithName:v7 force32BitSize:0 lastModificationDate:isa size:0 CRC:0 forceCalculatingSizeAndCRCForPreservingLastModificationDate:0];

  id result = [objc_allocWithZone((Class)CRLZipFileWriteChannel) initWithArchiveWriter:v6];
  if (!result) {
    __break(1u);
  }
  return result;
}

id sub_1009A2438()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)(v0 + 16);
  NSString v7 = String._bridgeToObjectiveC()();
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  [v6 beginEntryWithName:v7 force32BitSize:0 lastModificationDate:isa size:0 CRC:0 forceCalculatingSizeAndCRCForPreservingLastModificationDate:0];

  id result = [objc_allocWithZone((Class)CRLZipFileWriteChannel) initWithArchiveWriter:v6];
  if (!result) {
    __break(1u);
  }
  return result;
}

id sub_1009A2580()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = [v7 pathExtension];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v9 = [v6 stringByAppendingPathComponent:v8];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void **)(v0 + 16);
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  [v10 beginEntryWithName:v9 force32BitSize:0 lastModificationDate:isa size:0 CRC:0 forceCalculatingSizeAndCRCForPreservingLastModificationDate:0];

  id result = [objc_allocWithZone((Class)CRLZipFileWriteChannel) initWithArchiveWriter:v10];
  if (!result) {
    __break(1u);
  }
  return result;
}

id sub_1009A2778()
{
  return sub_1009A22F0();
}

id sub_1009A279C()
{
  return sub_1009A2438();
}

id sub_1009A27C0()
{
  return sub_1009A2580();
}

uint64_t sub_1009A27E4()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLFileWriteAssistant()
{
  return self;
}

uint64_t type metadata accessor for CRLFileWriteAssistant.WriteCoordinatorChannelProvider()
{
  return self;
}

uint64_t sub_1009A2874(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1009A2934, 0, 0);
}

uint64_t sub_1009A2934()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  (*(void (**)(uint64_t, uint64_t, void))(v0[5] + 16))(v1, v2 + OBJC_IVAR____TtC8Freeform26CRLBoardFileWriteAssistant_url, v0[4]);
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform26CRLBoardFileWriteAssistant_store);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform26CRLBoardFileWriteAssistant_context);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform26CRLBoardFileWriteAssistant_options);
  type metadata accessor for CRLFileWriteAssistant();
  v0[7] = swift_allocObject();
  sub_1009A1908(v1, v3, v4, 0x6472616F62, 0xE500000000000000, 0x617461646174656DLL, 0xE800000000000000, v5);
  NSString v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *NSString v6 = v0;
  v6[1] = sub_1009A2AD4;
  uint64_t v7 = v0[2];
  return sub_1009A1B28(v7, (uint64_t)&off_10152A240);
}

uint64_t sub_1009A2AD4()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1009A2C54;
  }
  else {
    uint64_t v2 = sub_1009A2BE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009A2BE8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1009A2C54()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1009A2E3C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1009A2F00;
  return sub_1009A2874((uint64_t)v6);
}

uint64_t sub_1009A2F00()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1009A315C()
{
  return type metadata accessor for CRLBoardFileWriteAssistant();
}

uint64_t type metadata accessor for CRLBoardFileWriteAssistant()
{
  uint64_t result = qword_101689A98;
  if (!qword_101689A98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009A31B0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLFileWriteAssistantOptions()
{
  return &type metadata for CRLFileWriteAssistantOptions;
}

unint64_t sub_1009A3270()
{
  unint64_t result = qword_101689AA8;
  if (!qword_101689AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689AA8);
  }
  return result;
}

unint64_t sub_1009A32C8()
{
  unint64_t result = qword_101689AB0;
  if (!qword_101689AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689AB0);
  }
  return result;
}

unint64_t sub_1009A3320()
{
  unint64_t result = qword_101689AB8;
  if (!qword_101689AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689AB8);
  }
  return result;
}

unint64_t sub_1009A3378()
{
  unint64_t result = qword_101689AC0;
  if (!qword_101689AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101689AC0);
  }
  return result;
}

id sub_1009A33CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4) != 1)
  {
    URL._bridgeToObjectiveC()(v6);
    uint64_t v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  id v13 = 0;
  id v9 = [v2 initWithURL:v7 error:&v13];

  if (v9)
  {
    id v10 = v13;
  }
  else
  {
    id v11 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1009A352C()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1009A3574()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528488;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_101689AD8 + dword_101689AD8);
  return v6(v2, v3, v4);
}

unint64_t sub_1009A3630(char a1)
{
  unint64_t result = 0x6564496472616F62;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000025;
      break;
    case 4:
      unint64_t result = 0x6174614474647263;
      break;
    case 5:
      unint64_t result = 0x436C616974726170;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1009A3720()
{
  return sub_1009A3630(*v0);
}

uint64_t sub_1009A3728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009A472C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009A3750(uint64_t a1)
{
  unint64_t v2 = sub_1009A4484();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009A378C(uint64_t a1)
{
  unint64_t v2 = sub_1009A4484();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009A37C8()
{
  sub_10050F994(v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_boardIdentifier);
  sub_100514260(*(void *)(v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData), *(void *)(v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData + 8));
  sub_100514260(*(void *)(v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData), *(void *)(v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_1009A3854()
{
  return type metadata accessor for CRLBoardRealTimeChangeRecord();
}

uint64_t type metadata accessor for CRLBoardRealTimeChangeRecord()
{
  uint64_t result = qword_101689B20;
  if (!qword_101689B20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009A38A8()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1009A395C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1005057FC(&qword_101689BE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_1009A4484();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  sub_1009A44D8(&qword_101671E68, (void (*)(uint64_t))type metadata accessor for CRLGloballyScopedBoardIdentifier);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData);
    char v12 = 4;
    sub_10060D344();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData);
    char v12 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1009A3C18(void *a1)
{
  uint64_t v4 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v4, v5);
  id v23 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1005057FC(&qword_101689BD8);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v7);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_1009A4484();
  uint64_t v25 = v9;
  uint64_t v10 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v11 = v22;
    LOBYTE(v26) = 0;
    sub_1009A44D8(&qword_101671E50, (void (*)(uint64_t))type metadata accessor for CRLGloballyScopedBoardIdentifier);
    uint64_t v13 = (uint64_t)v23;
    uint64_t v12 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10050F930(v13, v1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_boardIdentifier);
    LOBYTE(v26) = 1;
    *(void *)(v1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_minRequiredVersion) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 2;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_raw_minRequiredVersionForGoodEnoughFidelity;
    *(void *)uint64_t v15 = v14;
    *(unsigned char *)(v15 + 8) = v16 & 1;
    LOBYTE(v26) = 3;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = v1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_raw_minRequiredVersionForFullFidelity;
    *(void *)uint64_t v19 = v17;
    *(unsigned char *)(v19 + 8) = v20 & 1;
    char v27 = 4;
    sub_10060D184();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)(v1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData) = v26;
    char v27 = 5;
    id v21 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, v12);
    *(_OWORD *)(v10 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData) = v26;
  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1009A4028()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_minRequiredVersion);
}

uint64_t sub_1009A403C(uint64_t *a1, uint64_t *a2)
{
  return sub_1009A4148(*a1, *a2);
}

uint64_t sub_1009A4048@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1009A3C18(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1009A40A0(void *a1)
{
  return sub_1009A395C(a1);
}

uint64_t sub_1009A40C4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1009A44D8(&qword_1016816D0, (void (*)(uint64_t))type metadata accessor for CRLBoardRealTimeChangeRecord);
  uint64_t result = sub_1009A44D8(&qword_10167AC48, (void (*)(uint64_t))type metadata accessor for CRLBoardRealTimeChangeRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1009A4148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_boardIdentifier;
  uint64_t v13 = a2 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_boardIdentifier;
  char v14 = static UUID.== infix(_:_:)();
  sub_1009A4420(v12, (uint64_t)v11);
  sub_1009A4420(v13, (uint64_t)v7);
  if ((v14 & 1) == 0)
  {
    sub_10050F994((uint64_t)v7);
    sub_10050F994((uint64_t)v11);
    goto LABEL_22;
  }
  uint64_t v15 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v16 = *(void *)&v11[v15];
  uint64_t v17 = *(void *)&v11[v15 + 8];
  double v18 = &v7[v15];
  if (v16 == *(void *)v18 && v17 == *((void *)v18 + 1))
  {
    sub_10050F994((uint64_t)v7);
    sub_10050F994((uint64_t)v11);
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_10050F994((uint64_t)v7);
    sub_10050F994((uint64_t)v11);
    char v21 = 0;
    if ((v20 & 1) == 0) {
      return v21 & 1;
    }
  }
  uint64_t v22 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData);
  unint64_t v23 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData + 8);
  uint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData);
  unint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData + 8);
  if (v23 >> 60 != 15)
  {
    if (v25 >> 60 == 15) {
      goto LABEL_14;
    }
    sub_1005FA2A0(*(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData + 8));
    sub_1005FA2A0(v24, v25);
    char v28 = sub_1008D44A8(v22, v23, v24, v25);
    sub_100514260(v24, v25);
    sub_100514260(v22, v23);
    if (v28) {
      goto LABEL_16;
    }
LABEL_22:
    char v21 = 0;
    return v21 & 1;
  }
  if (v25 >> 60 != 15)
  {
LABEL_14:
    sub_1005FA2A0(*(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_crdtData + 8));
    sub_1005FA2A0(v24, v25);
    sub_100514260(v22, v23);
    uint64_t v26 = v24;
    unint64_t v27 = v25;
LABEL_21:
    sub_100514260(v26, v27);
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v29 = a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData;
  uint64_t v30 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData);
  unint64_t v31 = *(void *)(v29 + 8);
  uint64_t v32 = a2 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData;
  uint64_t v33 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform28CRLBoardRealTimeChangeRecord_partialCRDTData);
  unint64_t v34 = *(void *)(v32 + 8);
  if (v31 >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      sub_1005FA2A0(v30, *(void *)(v29 + 8));
      sub_1005FA2A0(v33, v34);
      char v21 = sub_1008D44A8(v30, v31, v33, v34);
      sub_100514260(v33, v34);
      sub_100514260(v30, v31);
      return v21 & 1;
    }
    goto LABEL_20;
  }
  if (v34 >> 60 != 15)
  {
LABEL_20:
    sub_1005FA2A0(v30, *(void *)(v29 + 8));
    sub_1005FA2A0(v33, v34);
    sub_100514260(v30, v31);
    uint64_t v26 = v33;
    unint64_t v27 = v34;
    goto LABEL_21;
  }
  char v21 = 1;
  return v21 & 1;
}

uint64_t sub_1009A4420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1009A4484()
{
  unint64_t result = qword_101689BE0;
  if (!qword_101689BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689BE0);
  }
  return result;
}

uint64_t sub_1009A44D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CRLBoardRealTimeChangeRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1009A45ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardRealTimeChangeRecord.CodingKeys()
{
  return &type metadata for CRLBoardRealTimeChangeRecord.CodingKeys;
}

unint64_t sub_1009A4628()
{
  unint64_t result = qword_101689BF0;
  if (!qword_101689BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689BF0);
  }
  return result;
}

unint64_t sub_1009A4680()
{
  unint64_t result = qword_101689BF8;
  if (!qword_101689BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689BF8);
  }
  return result;
}

unint64_t sub_1009A46D8()
{
  unint64_t result = qword_101689C00;
  if (!qword_101689C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689C00);
  }
  return result;
}

uint64_t sub_1009A472C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6564496472616F62 && a2 == 0xEF7265696669746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010123C470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000002BLL && a2 == 0x8000000101264C40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x8000000101264C70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6174614474647263 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x436C616974726170 && a2 == 0xEF61746144544452)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

int64x2_t sub_1009A49E0()
{
  int64x2_t result = vdupq_n_s64(0x4040000000000000uLL);
  xmmword_101689C08 = (__int128)result;
  return result;
}

void sub_1009A49F8()
{
  id v0 = [self tintColor];
  id v1 = [self configurationWithHierarchicalColor:v0];

  qword_101689C18 = (uint64_t)v1;
}

id sub_1009A4A6C()
{
  id result = [self configurationWithPointSize:16.0];
  qword_101689C20 = (uint64_t)result;
  return result;
}

id sub_1009A4AAC()
{
  uint64_t v1 = OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___stackView;
  BOOL v2 = *(void **)(v0
                + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___stackView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___stackView);
  }
  else
  {
    id v4 = sub_1009A5C38();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    BOOL v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1009A4B0C()
{
  return sub_1009A51CC(&OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___gridButton, (uint64_t (*)(uint64_t))sub_1009A4B2C);
}

void sub_1009A4B2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v39 - v9;
  static UIButton.Configuration.plain()();
  sub_10050BF48(0, (unint64_t *)&qword_101672600);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v12 = a1 + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_delegate;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  v39[1] = v12;
  if (Strong)
  {
    unsigned int v14 = [Strong isCanvasDotGridEnabled];
    swift_unknownObjectRelease();
    if (v14)
    {
      if (qword_10166F5E0 != -1) {
        swift_once();
      }
      id v15 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [self imageNamed:v16];

      if (v17) {
        goto LABEL_12;
      }
      __break(1u);
    }
  }
  if (qword_10166F5D8 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_101689C18;
  if (qword_10166F5E0 != -1) {
    swift_once();
  }
  id v15 = [(id)qword_101689C20 configurationByApplyingConfiguration:v18];
  NSString v19 = String._bridgeToObjectiveC()();
  id v17 = [self imageNamed:v19];

  if (!v17)
  {
    __break(1u);
    return;
  }
LABEL_12:
  id v20 = [v17 imageWithSymbolConfiguration:v15];

  UIButton.Configuration.image.setter();
  id v21 = [self clearColor];
  uint64_t v22 = (void (*)(uint64_t *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.backgroundColor.setter();
  v22(v40, 0);
  sub_10050BF48(0, (unint64_t *)&unk_101672590);
  unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v39[0] = v2;
  v23(v7, v10, v2);
  id v24 = v11;
  unint64_t v25 = (void *)UIButton.init(configuration:primaryAction:)();
  [v25 setPointerInteractionEnabled:1];
  [v25 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v26 = self;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_10117DF50;
  id v28 = [v25 heightAnchor];
  if (qword_10166F5D0 != -1) {
    swift_once();
  }
  id v29 = objc_retainAutoreleasedReturnValue(objc_msgSend(v28, "constraintEqualToConstant:", *((double *)&xmmword_101689C08
                                                                                           + 1)));

  *(void *)(v27 + 32) = v29;
  id v30 = [v25 widthAnchor];
  id v31 = [v30 constraintEqualToConstant:*(double *)&xmmword_101689C08];

  *(void *)(v27 + 40) = v31;
  v40[0] = v27;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v26 activateConstraints:isa];

  id v33 = [self mainBundle];
  NSString v34 = String._bridgeToObjectiveC()();
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v33 localizedStringForKey:v34 value:v35 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v37)
  {
    [v37 isCanvasDotGridEnabled];
    swift_unknownObjectRelease();
  }
  uint64_t v38 = v39[0];
  sub_1009A715C(v25);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v38);
}

id sub_1009A51AC()
{
  return sub_1009A51CC(&OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___connectorButton, (uint64_t (*)(uint64_t))sub_1009A5230);
}

id sub_1009A51CC(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void sub_1009A5230(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v38 - v9;
  static UIButton.Configuration.plain()();
  sub_10050BF48(0, (unint64_t *)&qword_101672600);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v12 = a1 + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_delegate;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  v38[1] = v12;
  if (Strong)
  {
    unsigned int v14 = [Strong isConnectorModeEnabled];
    swift_unknownObjectRelease();
    if (v14)
    {
      if (qword_10166F5E0 != -1) {
        swift_once();
      }
      id v15 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [self imageNamed:v16];

      if (v17) {
        goto LABEL_10;
      }
      __break(1u);
    }
  }
  if (qword_10166F5E0 != -1) {
    swift_once();
  }
  id v15 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
  NSString v18 = String._bridgeToObjectiveC()();
  id v17 = [self imageNamed:v18];

  if (!v17)
  {
    __break(1u);
    return;
  }
LABEL_10:
  id v19 = [v17 imageWithSymbolConfiguration:v15];

  UIButton.Configuration.image.setter();
  id v20 = [self clearColor];
  id v21 = (void (*)(uint64_t *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.backgroundColor.setter();
  v21(v39, 0);
  sub_10050BF48(0, (unint64_t *)&unk_101672590);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v38[0] = v2;
  v22(v7, v10, v2);
  id v23 = v11;
  id v24 = (void *)UIButton.init(configuration:primaryAction:)();
  [v24 setPointerInteractionEnabled:1];
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v25 = self;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10117DF50;
  id v27 = [v24 heightAnchor];
  if (qword_10166F5D0 != -1) {
    swift_once();
  }
  id v28 = objc_retainAutoreleasedReturnValue(objc_msgSend(v27, "constraintEqualToConstant:", *((double *)&xmmword_101689C08
                                                                                           + 1)));

  *(void *)(v26 + 32) = v28;
  id v29 = [v24 widthAnchor];
  id v30 = [v29 constraintEqualToConstant:*(double *)&xmmword_101689C08];

  *(void *)(v26 + 40) = v30;
  v39[0] = v26;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 activateConstraints:isa];

  id v32 = [self mainBundle];
  NSString v33 = String._bridgeToObjectiveC()();
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v32 localizedStringForKey:v33 value:v34 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v36 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v36)
  {
    [v36 isConnectorModeEnabled];
    swift_unknownObjectRelease();
  }
  uint64_t v37 = v38[0];
  sub_1009A715C(v24);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v37);
}

void sub_1009A5894(uint64_t a1, uint64_t a2, SEL *a3, SEL *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v8)
    {
      unsigned int v9 = [v8 *a3];
      swift_unknownObjectRelease();
      uint64_t v10 = v9 ^ 1;
    }
    else
    {
      uint64_t v10 = 1;
    }
    uint64_t v11 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v11)
    {
      [v11 *a4:v10];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

id sub_1009A5964()
{
  uint64_t v1 = OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___separator;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___separator);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___separator);
  }
  else
  {
    id v4 = sub_1009A59C4();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1009A59C4()
{
  id v0 = [objc_allocWithZone((Class)UIView) init];
  id v1 = [self tertiarySystemFillColor];
  [v0 setBackgroundColor:v1];

  id v2 = [v0 layer];
  [v2 setMasksToBounds:1];

  id v3 = [v0 layer];
  [v3 setCornerRadius:1.0];

  id v4 = [v0 layer];
  [v4 setCornerCurve:kCACornerCurveContinuous];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v5 = self;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10117DF50;
  id v7 = [v0 heightAnchor];
  id v8 = [v7 constraintEqualToConstant:44.0];

  *(void *)(v6 + 32) = v8;
  id v9 = [v0 widthAnchor];
  id v10 = [v9 constraintEqualToConstant:1.0];

  *(void *)(v6 + 40) = v10;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 activateConstraints:isa];

  return v0;
}

id sub_1009A5C38()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = Strong;
    if ([Strong documentIsSharedReadOnly])
    {
      swift_unknownObjectRelease();
    }
    else
    {
      unsigned __int8 v2 = [v1 isInFollowingMode];
      swift_unknownObjectRelease();
      if ((v2 & 1) == 0)
      {
        sub_1009A51AC();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          goto LABEL_6;
        }
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    sub_1009A4B0C();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v3) {
        goto LABEL_20;
      }
    }
    if (v3 >= 1) {
      break;
    }
    __break(1u);
LABEL_22:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1009A5964();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v4 = 0;
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)&_swiftEmptyArrayStorage[v4 + 4];
    }
    id v7 = v5;
    ++v4;
    LODWORD(v6) = 1144750080;
    [v5 setContentHuggingPriority:1 forAxis:v6];
  }
  while (v3 != v4);
LABEL_20:
  swift_bridgeObjectRelease_n();
  id v8 = objc_allocWithZone((Class)UIStackView);
  sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithArrangedSubviews:isa];

  [v10 setDistribution:3];
  [v10 setAlignment:0];
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v10 setInsetsLayoutMarginsFromSafeArea:0];
  [v10 setLayoutMarginsRelativeArrangement:1];
  [v10 setDirectionalLayoutMargins:0.0, 6.0, 0.0, 6.0];
  return v10;
}

void sub_1009A5FA0()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unsigned __int8 v2 = Strong;
    if ([Strong documentIsSharedReadOnly])
    {
      swift_unknownObjectRelease();
    }
    else
    {
      unsigned int v3 = [v2 isInFollowingMode];
      swift_unknownObjectRelease();
      if (!v3)
      {
        double v4 = 89.0;
        goto LABEL_6;
      }
    }
  }
  double v4 = 44.0;
LABEL_6:
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewWidthConstraint);
  if (!v5)
  {
    __break(1u);
    return;
  }
  [v5 setConstant:v4];
  double v6 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v6) {
    goto LABEL_11;
  }
  id v7 = v6;
  if ([v6 documentIsSharedReadOnly])
  {
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  unsigned __int8 v8 = [v7 isInFollowingMode];
  swift_unknownObjectRelease();
  if (v8)
  {
LABEL_11:
    id v9 = sub_1009A4AAC();
    id v10 = [v9 arrangedSubviews];

    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v12 >= 2)
    {
      id v13 = sub_1009A4AAC();
      id v14 = sub_1009A51AC();
      [v13 removeArrangedSubview:v14];

      id v15 = sub_1009A51AC();
      [v15 removeFromSuperview];

      id v16 = sub_1009A4AAC();
      id v17 = sub_1009A5964();
      [v16 removeArrangedSubview:v17];

      id v25 = sub_1009A5964();
      [v25 removeFromSuperview];
LABEL_15:

      return;
    }
    return;
  }
  id v18 = sub_1009A4AAC();
  id v19 = [v18 arrangedSubviews];

  sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v21 == 1)
  {
    id v22 = sub_1009A4AAC();
    id v23 = sub_1009A51AC();
    [v22 insertArrangedSubview:v23 atIndex:0];

    id v24 = sub_1009A4AAC();
    id v25 = sub_1009A5964();
    [v24 insertArrangedSubview:atIndex:];

    goto LABEL_15;
  }
}

void sub_1009A6344()
{
  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for CRLiOSFloatingBoardViewControlsViewController();
  [super viewDidLoad];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_5;
  }
  unsigned __int8 v2 = Strong;
  if ([Strong documentIsSharedReadOnly])
  {
    swift_unknownObjectRelease();
LABEL_5:
    uint64_t v4 = 0x4046000000000000;
    goto LABEL_6;
  }
  unsigned int v3 = [v2 isInFollowingMode];
  swift_unknownObjectRelease();
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v4 = 0x4056400000000000;
LABEL_6:
  double v5 = *(double *)&v4;
  id v6 = sub_1009A4AAC();
  id v7 = [v6 widthAnchor];

  id v8 = [v7 constraintEqualToConstant:v5];
  uint64_t v9 = OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewWidthConstraint;
  id v10 = *(void **)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewWidthConstraint];
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewWidthConstraint] = v8;

  id v11 = sub_1009A4AAC();
  id v12 = [v11 heightAnchor];

  id v13 = [v12 constraintEqualToConstant:44.0];
  uint64_t v14 = OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewHeightConstraint;
  id v15 = *(void **)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewHeightConstraint];
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewHeightConstraint] = v13;

  id v16 = sub_1009A4AAC();
  id v17 = self;
  id v18 = [v17 systemBackgroundColor];
  [v16 setBackgroundColor:v18];

  id v19 = sub_1009A4AAC();
  id v20 = [v19 layer];

  [v20 setCornerCurve:kCACornerCurveContinuous];
  id v21 = sub_1009A4AAC();
  id v22 = [v21 layer];

  [v22 setShadowOffset:0.0, 3.0];
  id v23 = sub_1009A4AAC();
  id v24 = [v23 layer];

  LODWORD(v25) = 1034147594;
  [v24 setShadowOpacity:v25];

  id v26 = sub_1009A4AAC();
  id v27 = [v26 layer];

  [v27 setShadowRadius:7.0];
  id v28 = sub_1009A4AAC();
  id v29 = [v28 layer];

  [v29 setBorderWidth:0.5];
  id v30 = sub_1009A4AAC();
  id v31 = [v30 layer];

  [v31 setCornerRadius:10.0];
  id v32 = sub_1009A4AAC();
  id v33 = [v32 layer];

  id v34 = [v17 blackColor];
  id v35 = [v34 colorWithAlphaComponent:0.08];

  id v36 = [v35 CGColor];
  [v33 setBorderColor:v36];

  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_10117DF50;
  uint64_t v38 = *(void **)&v0[v9];
  if (v38)
  {
    uint64_t v39 = v37;
    *(void *)(v37 + 32) = v38;
    uint64_t v40 = *(void **)&v0[v14];
    if (v40)
    {
      uint64_t v41 = self;
      *(void *)(v39 + 40) = v40;
      specialized Array._endMutation()();
      sub_10050BF48(0, (unint64_t *)&qword_101674200);
      id v42 = v38;
      id v43 = v40;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v41 activateConstraints:isa];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1009A6814()
{
  uint64_t v0 = sub_1005057FC(&qword_10168A8B0);
  uint64_t v2 = __chkstk_darwin(v0 - 8, v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  id v7 = (char *)&v21 - v6;
  id v8 = sub_1009A4B0C();
  UIButton.configuration.getter();
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9))
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      unsigned int v11 = [Strong isCanvasDotGridEnabled];
      swift_unknownObjectRelease();
      if (v11)
      {
        if (qword_10166F5E0 != -1) {
          swift_once();
        }
        id v12 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
        NSString v13 = String._bridgeToObjectiveC()();
        id v14 = [self imageNamed:v13];

        if (v14)
        {
LABEL_14:
          id v17 = [v14 imageWithSymbolConfiguration:v12];

          UIButton.Configuration.image.setter();
          UIButton.configuration.setter();

          goto LABEL_15;
        }
        __break(1u);
      }
    }
    if (qword_10166F5D8 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_101689C18;
    if (qword_10166F5E0 != -1) {
      swift_once();
    }
    id v12 = [(id)qword_101689C20 configurationByApplyingConfiguration:v15];
    NSString v16 = String._bridgeToObjectiveC()();
    id v14 = [self imageNamed:v16];

    if (!v14)
    {
      __break(1u);
      return;
    }
    goto LABEL_14;
  }
  sub_1009A7030((uint64_t)v7, (uint64_t)v4);
  UIButton.configuration.setter();

  sub_1009A7098((uint64_t)v7);
LABEL_15:
  id v18 = sub_1009A4B0C();
  id v19 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v19)
  {
    [v19 isCanvasDotGridEnabled];
    swift_unknownObjectRelease();
  }
  sub_1009D815C();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setAccessibilityValue:v20];
}

void sub_1009A6BA8()
{
  uint64_t v0 = sub_1005057FC(&qword_10168A8B0);
  uint64_t v2 = __chkstk_darwin(v0 - 8, v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  id v7 = (char *)&v20 - v6;
  id v8 = sub_1009A51AC();
  UIButton.configuration.getter();
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9))
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      unsigned int v11 = [Strong isConnectorModeEnabled];
      swift_unknownObjectRelease();
      if (v11)
      {
        if (qword_10166F5E0 != -1) {
          swift_once();
        }
        id v12 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
        NSString v13 = String._bridgeToObjectiveC()();
        id v14 = [self imageNamed:v13];

        if (v14)
        {
LABEL_12:
          id v16 = [v14 imageWithSymbolConfiguration:v12];

          UIButton.Configuration.image.setter();
          UIButton.configuration.setter();

          goto LABEL_13;
        }
        __break(1u);
      }
    }
    if (qword_10166F5E0 != -1) {
      swift_once();
    }
    id v12 = [(id)qword_101689C20 configurationByApplyingConfiguration:0];
    NSString v15 = String._bridgeToObjectiveC()();
    id v14 = [self imageNamed:v15];

    if (!v14)
    {
      __break(1u);
      return;
    }
    goto LABEL_12;
  }
  sub_1009A7030((uint64_t)v7, (uint64_t)v4);
  UIButton.configuration.setter();

  sub_1009A7098((uint64_t)v7);
LABEL_13:
  id v17 = sub_1009A51AC();
  id v18 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v18)
  {
    [v18 isConnectorModeEnabled];
    swift_unknownObjectRelease();
  }
  sub_1009D815C();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setAccessibilityValue:v19];
}

id sub_1009A6F3C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSFloatingBoardViewControlsViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLiOSFloatingBoardViewControlsViewController()
{
  return self;
}

uint64_t sub_1009A7030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_10168A8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009A7098(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_10168A8B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1009A70F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1009A7130(uint64_t a1)
{
  sub_1009A5894(a1, v1, (SEL *)&selRef_isConnectorModeEnabled, (SEL *)&selRef_setIsConnectorModeEnabled_);
}

void sub_1009A715C(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 setAccessibilityLabel:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  [a1 setLargeContentTitle:v3];

  sub_1009D815C();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setAccessibilityValue:v4];

  [a1 setShowsLargeContentViewer:1];
  id v5 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) init];
  [a1 addInteraction:v5];
}

void sub_1009A727C(uint64_t a1)
{
  sub_1009A5894(a1, v1, (SEL *)&selRef_isCanvasDotGridEnabled, (SEL *)&selRef_setIsCanvasDotGridEnabled_);
}

void sub_1009A72A8()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___stackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewWidthConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController_stackViewHeightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___gridButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___connectorButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Freeform45CRLiOSFloatingBoardViewControlsViewController____lazy_storage___separator] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1009A7364(uint64_t a1@<X8>)
{
  id v3 = [*(id *)&v1[OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_interactiveCanvasController] canvasView];
  if (v3)
  {
    NSString v4 = v3;
    id v5 = [v3 canvasLayer];

    v8[3] = type metadata accessor for CRLiOSBoardViewController();
    v8[4] = &off_10152F990;
    v8[0] = v1;
    sub_1009AC434((uint64_t)v8, (uint64_t)v7);
    uint64_t v6 = v1;
    sub_100804920(v5, (uint64_t)v7, a1);
    sub_100522F00((uint64_t)v8, &qword_1016826C8);
    if (*(void *)a1) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"canvasAnimator", 14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 26, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"canvasAnimator", 14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 26);
}

double *sub_1009A74D4(void *a1, unint64_t a2)
{
  NSString v2 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1005057FC((uint64_t *)&unk_101676C10);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10117DF50;
      *(void *)(v6 + 32) = a1;
      *(void *)(v6 + 40) = v5;
      unsigned int v11 = (double *)v6;
      specialized Array._endMutation()();
      NSString v2 = v11;
      id v7 = a1;
      a1 = (void *)v5;
      goto LABEL_4;
    case 3uLL:
      return v2;
    default:
      sub_1005057FC((uint64_t *)&unk_101676C10);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_101177E70;
      *(void *)(v4 + 32) = a1;
      id v10 = (double *)v4;
      specialized Array._endMutation()();
      NSString v2 = v10;
LABEL_4:
      id v8 = a1;
      break;
  }
  return v2;
}

char *sub_1009A75C8(uint64_t a1)
{
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_snapshotViewWrapper);
  [v3 safeAreaInsets];
  double v5 = v4;
  double v25 = v6;
  [v3 frame];
  CGFloat MinX = CGRectGetMinX(v30);
  [v3 frame];
  double MinY = CGRectGetMinY(v31);
  [v3 frame];
  CGFloat Width = CGRectGetWidth(v32);
  [v3 frame];
  double Height = CGRectGetHeight(v33);
  [v3 frame];
  double v10 = CGRectGetMinX(v34);
  [v3 frame];
  CGFloat v11 = CGRectGetMinY(v35);
  id v12 = *(void **)(a1 + 24);
  [v12 visibleBoundsRect];
  double v14 = v13;
  [v12 visibleBoundsRect];
  double v16 = v15;
  id v17 = sub_100E3CC3C();
  id v18 = [v17 layer];

  if (!v18)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"newClippedSnapshotLayerForSceneNavigation(canvasAnimator:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 584, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"newClippedSnapshotLayerForSceneNavigation(canvasAnimator:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 584);
    return 0;
  }
  v26[0] = v25 + v10;
  v26[1] = v11;
  _OWORD v26[2] = v14;
  void v26[3] = v16;
  char v27 = 0;
  *(CGFloat *)id v28 = MinX;
  *(double *)&v28[1] = v5 + MinY;
  *(CGFloat *)&v28[2] = Width;
  *(double *)&void v28[3] = Height - v5;
  char v29 = 0;
  objc_allocWithZone((Class)type metadata accessor for CRLSceneCaptureSnapshotLayer());
  id v19 = v3;
  id v20 = v18;
  uint64_t v21 = sub_10099CD08(v19, v20, (uint64_t)v26, (uint64_t)v28);
  if (!v21)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"newClippedSnapshotLayerForSceneNavigation(canvasAnimator:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 585, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"newClippedSnapshotLayerForSceneNavigation(canvasAnimator:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 585);

    return 0;
  }
  id v22 = v21;

  return v22;
}

uint64_t sub_1009A78AC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v46 = a1;
  uint64_t v9 = type metadata accessor for CRLCanvasLayerAnimationProvider();
  __chkstk_darwin(v9 - 8, v10);
  id v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  double v16 = (char *)&v45 - v15;
  __chkstk_darwin(v17, v18);
  id v20 = (char *)&v45 - v19;
  __chkstk_darwin(v21, v22);
  id v24 = (char *)&v45 - v23;
  __chkstk_darwin(v25, v26);
  id v28 = (char *)&v45 - v27;
  __chkstk_darwin(v29, v30);
  CGRect v32 = (char *)&v45 - v31;
  *(double *)uint64_t v50 = a2;
  *(double *)&v50[1] = a3;
  *(double *)&v50[2] = a4;
  *(double *)&v50[3] = a5;
  char v51 = 62;
  if (qword_10166F728 != -1) {
    swift_once();
  }
  uint64_t v33 = qword_10171B540;
  if (qword_10166F730 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_10171B548;
  if (qword_10166F738 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_10171B550;
  if (qword_10166F740 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_10171B558;
  sub_1006006C8((uint64_t)v50, (uint64_t)v48);
  v47[0] = v33;
  v47[1] = v34;
  v47[2] = v35;
  v47[3] = v36;
  v47[4] = 0;
  v48[33] = 0;
  int v49 = 131586;
  sub_100B78AFC((uint64_t)v47, (uint64_t)v12);
  sub_1006FB684((uint64_t)v47);
  sub_10054BD5C((uint64_t)v50);
  sub_100DE3C68((uint64_t)v16, 1.0);
  sub_1009ACDB0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_100DE3DFC((uint64_t)v20, 23.25);
  sub_1009ACDB0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_100DE3FA0((uint64_t)v24, 23.25);
  sub_1009ACDB0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_100DE4124((uint64_t)v28, 1.0);
  sub_1009ACDB0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACAF8((uint64_t)v28, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v37 = type metadata accessor for CRLCanvasLayerAnimation();
  uint64_t v38 = (uint64_t)&v24[*(int *)(v37 + 48)];
  uint64_t v40 = *(void *)(v38 + 24);
  uint64_t v39 = *(void *)(v38 + 32);
  sub_1005231B4(v38, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 120))(1, v40, v39);
  sub_1009AC838((uint64_t)v24, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACDB0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACAF8((uint64_t)v32, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v41 = (uint64_t)&v28[*(int *)(v37 + 48)];
  uint64_t v42 = *(void *)(v41 + 24);
  uint64_t v43 = *(void *)(v41 + 32);
  sub_1005231B4(v41, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 192))(1, v42, v43);
  sub_1009AC838((uint64_t)v28, v46, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  return sub_1009ACDB0((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
}

uint64_t sub_1009A7CC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = (id *)a2;
  uint64_t v3 = type metadata accessor for CRLBasicLayerAnimation();
  __chkstk_darwin(v3, v4);
  double v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v28 - v9;
  __chkstk_darwin(v11, v12);
  uint64_t v29 = (uint64_t)&v28 - v13;
  v32[0] = 1065353216;
  char v33 = 6;
  if (qword_10166F720 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)qword_10171B538;
  sub_1006006C8((uint64_t)v32, (uint64_t)v31);
  id v28 = v14;
  id v15 = a1;
  UUID.init()();
  swift_unknownObjectWeakInit();
  double v16 = &v6[*(int *)(v3 + 28)];
  uint64_t v17 = type metadata accessor for CRLLayerAnimationDisplayLink.Handler();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v18(&v6[*(int *)(v3 + 32)], 1, 1, v17);
  swift_unknownObjectWeakAssign();

  sub_100549A0C((uint64_t)v31, (uint64_t)(v6 + 24));
  *(_OWORD *)(v6 + 8) = xmmword_10117EE20;
  *(void *)double v6 = v28;
  *((void *)v6 + 36) = 0;
  *((_DWORD *)v6 + 74) = 131586;
  sub_10054BD5C((uint64_t)v32);
  sub_1009ACAF8((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  *((void *)v10 + 2) = 0x3FC0A3D70A3D70A4;
  sub_1009ACDB0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v19 = v29;
  sub_1009ACAF8((uint64_t)v10, v29, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  v32[3] = &type metadata for CRLBasicLayerAnimation.Def;
  v32[4] = sub_10054CB94();
  v32[0] = swift_allocObject();
  sub_100549A68(v19, v32[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v32, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 297) = 1;
  sub_1005FF368((uint64_t)v32);
  sub_1009ACDB0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  id v20 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v21) = 0.25;
  LODWORD(v22) = 0.5;
  LODWORD(v23) = 1.0;
  id v24 = [v20 initWithControlPoints:v21 :0.0 :v22 :v23];
  id v25 = sub_100A67E84();

  uint64_t v26 = v30;
  sub_1009ACAF8(v19, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);

  *uint64_t v26 = v25;
  return sub_1009ACDB0(v19, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
}

uint64_t sub_1009A8018@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, double *a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>, CGFloat a7@<D2>, CGFloat a8@<D3>)
{
  v226 = a4;
  uint64_t v15 = type metadata accessor for CRLCanvasLayerAnimationProvider();
  __chkstk_darwin(v15, v16);
  uint64_t v223 = (uint64_t)&v218 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v224 = (uint64_t)&v218 - v20;
  __chkstk_darwin(v21, v22);
  uint64_t v225 = (uint64_t)&v218 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v227 = (uint64_t)&v218 - v26;
  uint64_t v27 = *(void **)(a1 + 24);
  double v28 = sub_100065738(a5, a6, a7, a8);
  double v30 = v29;
  [v27 visibleUnscaledRect];
  double v33 = sub_100066FC4(a7, a8, v31, v32);
  CGFloat v239 = sub_10006402C(v28, v30, v33);
  CGFloat v35 = v34;
  double v37 = v36;
  double v39 = v38;
  [v27 visibleUnscaledRect];
  double v41 = v40;
  double v43 = v42;
  double v46 = sub_100065738(v44, v45, v40, v42);
  double v48 = v47;
  [v27 visibleUnscaledRect];
  double v51 = sub_100066FC4(v41, v43, v49, v50);
  double v52 = sub_10006402C(v46, v48, v51);
  double v54 = v53;
  double v56 = v55;
  double v58 = v57;
  [v27 unobscuredScrollViewFrame];
  double v61 = sub_10006729C(0, v56, v58, v59, v60) / v56;
  double v63 = v62 / v58;
  if (v63 < v61) {
    double v61 = v63;
  }
  double v234 = sub_100407E48(v61, 0.1, 4.0);
  [v27 unobscuredScrollViewFrame];
  double v66 = sub_10006729C(0, v37, v39, v64, v65) / v37;
  double v68 = v67 / v39;
  if (v68 < v66) {
    double v66 = v68;
  }
  double v69 = sub_100407E48(v66, 0.1, 4.0);
  double v70 = v239;
  double v233 = v69;
  uint64_t v219 = a1;
  sub_100803FE4(0, 1, v239, v35, v37, v39, v69);
  CGFloat v237 = v54;
  CGFloat v238 = v52;
  double v235 = v58;
  double v236 = v56;
  [v27 convertUnscaledToBoundsRect:v52, v54, v56, v58];
  CGFloat v232 = v71;
  CGFloat v221 = v73;
  CGFloat v222 = v72;
  CGFloat v220 = v74;
  CGFloat v229 = v37;
  CGFloat v230 = v35;
  CGFloat v228 = v39;
  [v27 convertUnscaledToBoundsRect:v70, v35, v37, v39];
  CGFloat v76 = v75;
  CGFloat v78 = v77;
  CGFloat v80 = v79;
  CGFloat v82 = v81;
  id v231 = a2;
  uint64_t v83 = *(char **)&a2[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer];
  [v83 frame];
  CGFloat v85 = v84;
  CGFloat v87 = v86;
  double v89 = v88;
  double v91 = v90;
  v218 = *(char **)&a3[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer];
  [v218 frame];
  v277.origin.double x = v92;
  v277.origin.double y = v93;
  v277.size.double width = v94;
  v277.size.double height = v95;
  CGFloat v242 = v87;
  CGFloat v243 = v85;
  v273.origin.double x = v85;
  v273.origin.double y = v87;
  double v240 = v91;
  double v241 = v89;
  v273.size.double width = v89;
  v273.size.double height = v91;
  if (!CGRectEqualToRect(v273, v277))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"sceneMotionCrossfadeNavigationAnimation(canvasAnimator:offscreenSnapshotLayer:onscreenSnapshotLayer:sceneRect:)", 111, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 205, (uint64_t)"Snapshot layers have different frames! This is unexpected; math may be incorrect.",
      81,
      2u,
      (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"sceneMotionCrossfadeNavigationAnimation(canvasAnimator:offscreenSnapshotLayer:onscreenSnapshotLayer:sceneRect:)", 111, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 205);
  }
  double v96 = v233 / v234;
  CGFloat v98 = v240;
  CGFloat v97 = v241;
  double v233 = v233 / v234 * v240;
  double v234 = v96 * v241;
  double v99 = sub_100065738(v232, v222, v221, v220);
  double v100 = v99 - sub_100065738(v76, v78, v80, v82);
  [v27 unobscuredScrollViewFrame];
  double v102 = v235;
  double v101 = v236;
  double v105 = sub_10006729C(0, v236, v235, v103, v104) / v101;
  double v107 = v106 / v102;
  if (v107 >= v105) {
    double v108 = v105;
  }
  else {
    double v108 = v107;
  }
  double v109 = sub_100065738(v243, v242, v97, v98);
  double v111 = sub_100064698(v109, v110, v100);
  double v113 = sub_10006402C(v111, v112, v234);
  double v233 = v115;
  double v234 = v114;
  CGFloat v232 = v116;
  uint64_t v117 = v219;
  uint64_t v118 = *(void **)(v219 + 8);
  [v118 minimumPinchViewScale];
  double v120 = v119;
  [v118 maximumPinchViewScale];
  double v122 = sub_100407E48(v108, v120, v121);
  double v123 = sub_100065738(v238, v237, v101, v102);
  double v125 = v124;
  [*(id *)(v117 + 16) adjustedContentInset];
  CGFloat v130 = sub_100804D18((uint64_t)&v265, v122, v123, v125, v126, v127, v128, v129);
  id v131 = v231;
  [v231 bounds];
  double v133 = v132;
  double v135 = v134;
  double v137 = v136;
  double v139 = v138;
  sub_100066B80(v132, v134, v136, v138);
  CGFloat v222 = v113;
  sub_100066AC4(v113, v234, v233, v232, v140, v141, v142, v143);
  double v145 = v144;
  double v147 = v146;
  double v149 = v148;
  double v151 = v150;
  [v131 convertRect:v83 toLayer:v133];
  double v153 = v152;
  double v155 = v154;
  double v157 = v156;
  double v159 = v158;
  double v160 = v149;
  double v161 = v157;
  double v162 = v151;
  double v163 = v159;
  [v131 convertRect:v83 toLayer:v145];
  CGFloat v165 = v164;
  CGFloat v167 = v166;
  CGFloat v169 = v168;
  CGFloat v171 = v170;
  v274.origin.double x = v153;
  v274.origin.double y = v155;
  v274.size.double width = v161;
  v274.size.double height = v163;
  v278.origin.double x = v165;
  v278.origin.double y = v167;
  v278.size.double width = v169;
  v278.size.double height = v171;
  if (CGRectIntersectsRect(v274, v278))
  {
    v275.origin.double x = v153;
    v275.origin.double y = v155;
    v275.size.double width = v161;
    v275.size.double height = v163;
    v279.origin.double x = v165;
    v279.origin.double y = v167;
    v279.size.double width = v169;
    v279.size.double height = v171;
    CGRect v276 = CGRectIntersection(v275, v279);
    sub_100066B80(v276.origin.x, v276.origin.y, v276.size.width, v276.size.height);
    sub_100066AC4(v153, v155, v161, v163, v172, v173, v174, v175);
    uint64_t v177 = v176;
    uint64_t v179 = v178;
    uint64_t v181 = v180;
    uint64_t v183 = v182;
    uint64_t v184 = &v218[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect];
    *(void *)uint64_t v184 = v176;
    *((void *)v184 + 1) = v178;
    *((void *)v184 + 2) = v180;
    *((void *)v184 + 3) = v182;
    sub_10099C688();
    BOOL v185 = &v83[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_clippingRect];
    *(void *)BOOL v185 = v177;
    *((void *)v185 + 1) = v179;
    *((void *)v185 + 2) = v181;
    *((void *)v185 + 3) = v183;
    sub_10099C688();
    v83[OBJC_IVAR____TtCC8Freeform28CRLSceneCaptureSnapshotLayer35CRLSceneCaptureContentClippingLayer_invertClipping] = 1;
    sub_10099C688();
  }
  sub_1005057FC((uint64_t *)&unk_101683FC0);
  uint64_t v186 = swift_allocObject();
  *(_OWORD *)(v186 + 16) = xmmword_10117E800;
  long long v253 = v269;
  long long v254 = v270;
  long long v255 = v271;
  long long v256 = v272;
  long long v249 = v265;
  long long v250 = v266;
  long long v251 = v267;
  long long v252 = v268;
  long long v187 = *(_OWORD *)&CATransform3DIdentity.m33;
  long long v261 = *(_OWORD *)&CATransform3DIdentity.m31;
  long long v262 = v187;
  long long v188 = *(_OWORD *)&CATransform3DIdentity.m43;
  long long v263 = *(_OWORD *)&CATransform3DIdentity.m41;
  long long v264 = v188;
  long long v189 = *(_OWORD *)&CATransform3DIdentity.m13;
  long long v257 = *(_OWORD *)&CATransform3DIdentity.m11;
  long long v258 = v189;
  long long v190 = *(_OWORD *)&CATransform3DIdentity.m23;
  long long v259 = *(_OWORD *)&CATransform3DIdentity.m21;
  long long v260 = v190;
  v247[10] = v259;
  v247[11] = v190;
  v247[8] = v257;
  v247[9] = v189;
  v247[14] = v263;
  v247[15] = v188;
  v247[12] = v261;
  v247[13] = v187;
  v247[2] = v267;
  v247[3] = v268;
  v247[0] = v265;
  v247[1] = v266;
  v247[6] = v271;
  v247[7] = v272;
  v247[4] = v269;
  v247[5] = v270;
  char v248 = 52;
  if (qword_10166F728 != -1) {
    swift_once();
  }
  uint64_t v191 = qword_10171B540;
  if (qword_10166F730 != -1) {
    swift_once();
  }
  uint64_t v192 = qword_10171B548;
  if (qword_10166F738 != -1) {
    swift_once();
  }
  uint64_t v193 = qword_10171B550;
  if (qword_10166F740 != -1) {
    swift_once();
  }
  uint64_t v194 = qword_10171B558;
  sub_1006006C8((uint64_t)v247, (uint64_t)v245);
  v244[0] = v191;
  v244[1] = v192;
  v244[2] = v193;
  v244[3] = v194;
  v244[4] = 0;
  v245[33] = 0;
  int v246 = 131586;
  uint64_t v195 = v223;
  sub_100B78AFC((uint64_t)v244, v223);
  sub_1006FB684((uint64_t)v244);
  sub_10054BD5C((uint64_t)v247);
  uint64_t v196 = v224;
  sub_100DE3C68(v224, 1.0);
  sub_1009ACDB0(v195, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v197 = v225;
  sub_100DE3DFC(v225, 150.0);
  sub_1009ACDB0(v196, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v198 = v227;
  sub_100DE3FA0(v227, 23.25);
  sub_1009ACDB0(v197, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  *(void *)(v186 + 56) = v15;
  *(void *)(v186 + 64) = &off_101517F00;
  uint64_t v199 = sub_1005767BC((uint64_t *)(v186 + 32));
  sub_100DE4124((uint64_t)v199, 1.0);
  sub_1009ACDB0(v198, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v200 = type metadata accessor for CRLSpringLayerAnimation();
  *(void *)(v186 + 96) = v200;
  *(void *)(v186 + 104) = &off_101534738;
  uint64_t v201 = sub_1005767BC((uint64_t *)(v186 + 72));
  double v203 = v242;
  double v202 = v243;
  double v205 = v240;
  double v204 = v241;
  double v206 = v222;
  double v208 = v233;
  double v207 = v234;
  double v209 = v232;
  sub_1009A8B44((uint64_t)a3, (uint64_t)v201, v243, v242, v241, v240, v222, v234, v233, v232);
  *(void *)(v186 + 136) = v200;
  *(void *)(v186 + 144) = &off_101534738;
  unint64_t v210 = sub_1005767BC((uint64_t *)(v186 + 112));
  sub_1009A8B44((uint64_t)v131, (uint64_t)v210, v202, v203, v204, v205, v206, v207, v208, v209);
  *(void *)(v186 + 176) = type metadata accessor for CRLBasicLayerAnimation();
  *(void *)(v186 + 184) = &off_10150AF08;
  v211 = sub_1005767BC((uint64_t *)(v186 + 152));
  sub_1009A8FF0(a3, (uint64_t)v211, v238, v237, v236, v235, v239, v230, v229, v228);
  double v212 = sub_1006C9744(v186, 0.0);
  uint64_t v214 = v213;
  double v215 = v212;
  swift_setDeallocating();
  sub_1005057FC((uint64_t *)&unk_101683FE0);
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  v217 = v226;
  *(void *)v226 = v214;
  v217[1] = v215;
  return result;
}

uint64_t sub_1009A8B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  uint64_t v48 = a2;
  uint64_t v19 = type metadata accessor for CRLSpringLayerAnimation();
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v46 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v46 = (uint64_t)&v46 - v29;
  __chkstk_darwin(v30, v31);
  double v47 = (uint64_t *)((char *)&v46 - v32);
  double v33 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer);
  sub_1009ACE10((uint64_t)v53);
  *(double *)&long long v54 = a3;
  *((double *)&v54 + 1) = a4;
  *(double *)&long long v55 = a5;
  *((double *)&v55 + 1) = a6;
  *(double *)&long long v56 = a7;
  *((double *)&v56 + 1) = a8;
  *(double *)&long long v57 = a9;
  *((double *)&v57 + 1) = a10;
  sub_10051B3EC((uint64_t)v53, (uint64_t)v58, &qword_1016758E0);
  v50[10] = v58[6];
  v50[11] = v58[7];
  char v51 = v59;
  v50[6] = v58[2];
  v50[7] = v58[3];
  v50[8] = v58[4];
  v50[9] = v58[5];
  v50[2] = v56;
  v50[3] = v57;
  v50[4] = v58[0];
  v50[5] = v58[1];
  v50[0] = v54;
  v50[1] = v55;
  char v52 = 60;
  if (qword_10166F728 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_10171B540;
  if (qword_10166F730 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_10171B548;
  if (qword_10166F738 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_10171B550;
  if (qword_10166F740 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_10171B558;
  sub_1006006C8((uint64_t)v50, (uint64_t)v49);
  id v38 = v33;
  UUID.init()();
  swift_unknownObjectWeakInit();
  double v39 = &v22[*(int *)(v19 + 28)];
  uint64_t v40 = type metadata accessor for CRLLayerAnimationDisplayLink.Handler();
  double v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
  v41(v39, 1, 1, v40);
  v41(&v22[*(int *)(v19 + 32)], 1, 1, v40);
  swift_unknownObjectWeakAssign();

  sub_100549A0C((uint64_t)v49, (uint64_t)(v22 + 40));
  *((void *)v22 + 4) = 0;
  *(void *)uint64_t v22 = v34;
  *((void *)v22 + 1) = v35;
  *((void *)v22 + 2) = v36;
  *((void *)v22 + 3) = v37;
  *((void *)v22 + 38) = 0;
  *((_DWORD *)v22 + 78) = 131586;
  sub_10054BD5C((uint64_t)v50);
  sub_1009ACAF8((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  *((void *)v26 + 2) = 0x3FF0000000000000;
  sub_1009ACDB0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  uint64_t v42 = v46;
  sub_1009ACAF8((uint64_t)v26, v46, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  *(void *)(v42 + 24) = 0x4062C00000000000;
  sub_1009ACDB0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  double v43 = v47;
  sub_1009ACAF8(v42, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  *double v43 = 0x4037400000000000;
  sub_1009ACDB0(v42, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  uint64_t v44 = v48;
  sub_1009ACAF8((uint64_t)v43, v48, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  *(void *)(v44 + 8) = 0x3FF0000000000000;
  return sub_1009ACDB0((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
}

uint64_t sub_1009A8FF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>, CGFloat a9@<D6>, CGFloat a10@<D7>)
{
  uint64_t v48 = (id *)a2;
  uint64_t v19 = type metadata accessor for CRLBasicLayerAnimation();
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v46 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v47 = (uint64_t)&v46 - v29;
  v52.origin.double x = a3;
  v52.origin.double y = a4;
  v52.size.double width = a5;
  v52.size.double height = a6;
  v53.origin.double x = a7;
  v53.origin.double y = a8;
  v53.size.double width = a9;
  v53.size.double height = a10;
  BOOL v30 = CGRectIntersectsRect(v52, v53);
  float v31 = 1.0;
  if (v30) {
    float v31 = 0.0;
  }
  LODWORD(v50[0]) = 1065353216;
  *((float *)v50 + 1) = v31;
  char v51 = 6;
  if (qword_10166F720 != -1) {
    swift_once();
  }
  uint64_t v32 = (void *)qword_10171B538;
  sub_1006006C8((uint64_t)v50, (uint64_t)v49);
  id v46 = v32;
  id v33 = a1;
  UUID.init()();
  swift_unknownObjectWeakInit();
  uint64_t v34 = &v22[*(int *)(v19 + 28)];
  uint64_t v35 = type metadata accessor for CRLLayerAnimationDisplayLink.Handler();
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  v36(v34, 1, 1, v35);
  v36(&v22[*(int *)(v19 + 32)], 1, 1, v35);
  swift_unknownObjectWeakAssign();

  sub_100549A0C((uint64_t)v49, (uint64_t)(v22 + 24));
  *(_OWORD *)(v22 + 8) = xmmword_10117EE20;
  *(void *)uint64_t v22 = v46;
  *((void *)v22 + 36) = 0;
  *((_DWORD *)v22 + 74) = 131586;
  sub_10054BD5C((uint64_t)v50);
  sub_1009ACAF8((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  *((void *)v26 + 2) = 0x3FC0A3D70A3D70A4;
  sub_1009ACDB0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v37 = v47;
  sub_1009ACAF8((uint64_t)v26, v47, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  v50[3] = &type metadata for CRLBasicLayerAnimation.Def;
  v50[4] = sub_10054CB94();
  v50[0] = swift_allocObject();
  sub_100549A68(v37, v50[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v50, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 297) = 1;
  sub_1005FF368((uint64_t)v50);
  sub_1009ACDB0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  id v38 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v39) = 0.25;
  LODWORD(v40) = 0.5;
  LODWORD(v41) = 1.0;
  id v42 = [v38 initWithControlPoints:v39 :0.0 :v40 :v41];
  id v43 = sub_100A67E84();

  uint64_t v44 = v48;
  sub_1009ACAF8(v37, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);

  *uint64_t v44 = v43;
  return sub_1009ACDB0(v37, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
}

uint64_t sub_1009A93B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v199 = (char *)a2;
  long long v187 = a3;
  uint64_t v190 = type metadata accessor for CRLSpringLayerAnimation();
  __chkstk_darwin(v190, v12);
  uint64_t v191 = (uint64_t)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for CRLCanvasLayerAnimationProvider();
  __chkstk_darwin(v189, v14);
  uint64_t v181 = (uint64_t)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v182 = (uint64_t)&v165 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v165 - v21;
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v165 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v184 = (uint64_t)&v165 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v186 = (uint64_t)&v165 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v188 = (uint64_t)&v165 - v35;
  uint64_t v183 = a1;
  uint64_t v36 = *(void **)(a1 + 24);
  double v37 = sub_100065738(a4, a5, a6, a7);
  double v39 = v38;
  [v36 visibleUnscaledRect];
  double v42 = sub_100066FC4(a6, a7, v40, v41);
  double v43 = sub_10006402C(v37, v39, v42);
  CGFloat v197 = v44;
  CGFloat v198 = v43;
  double v46 = v45;
  double v48 = v47;
  [v36 visibleUnscaledRect];
  double v50 = v49;
  double v52 = v51;
  double v55 = sub_100065738(v53, v54, v49, v51);
  double v57 = v56;
  [v36 visibleUnscaledRect];
  double v60 = sub_100066FC4(v50, v52, v58, v59);
  double v61 = sub_10006402C(v55, v57, v60);
  double v63 = v62;
  double v65 = v64;
  uint64_t v175 = *(void *)&v66;
  uint64_t v176 = *(uint64_t **)&v61;
  double v67 = sub_100065738(v61, v66, v62, v64);
  double v69 = sub_10006402C(v67, v68, v46);
  CGFloat v194 = v70;
  double v72 = v71;
  double v74 = v73;
  [v36 unobscuredScrollViewFrame];
  double v77 = sub_10006729C(0, v63, v65, v75, v76) / v63;
  double v79 = v78 / v65;
  if (v79 < v77) {
    double v77 = v79;
  }
  double v180 = sub_100407E48(v77, 0.1, 4.0);
  [v36 unobscuredScrollViewFrame];
  double v82 = sub_10006729C(0, v72, v74, v80, v81);
  CGFloat v192 = v74;
  CGFloat v193 = v72;
  double v83 = v82 / v72;
  double v85 = v84 / v74;
  if (v85 < v83) {
    double v83 = v85;
  }
  double v86 = sub_100407E48(v83, 0.1, 4.0);
  [v36 unobscuredScrollViewFrame];
  double v89 = sub_10006729C(0, v46, v48, v87, v88);
  CGFloat v195 = v48;
  CGFloat v196 = v46;
  double v90 = v89 / v46;
  double v92 = v91 / v48;
  if (v92 < v90) {
    double v90 = v92;
  }
  double v93 = sub_100407E48(v90, 0.1, 4.0);
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  uint64_t v95 = Double.description.getter();
  uint64_t v97 = v96;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v98 = sub_100528BE4();
  *(void *)(inited + 64) = v98;
  *(void *)(inited + 32) = v95;
  *(void *)(inited + 40) = v97;
  uint64_t v99 = Double.description.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v98;
  *(void *)(inited + 72) = v99;
  *(void *)(inited + 80) = v100;
  double v177 = v93;
  if (!sub_100934114(v86, v93))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"sceneScaleAndScrollNavigationAnimation(canvasAnimator:snapshotLayer:sceneRect:)", 79, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 335, (uint64_t)"From (%@) and to (%@) view scale values should be nearly the same for .scaleAndScroll animation", 95, 2u, inited);
    sub_1005598CC(inited, (uint64_t)"sceneScaleAndScrollNavigationAnimation(canvasAnimator:snapshotLayer:sceneRect:)", 79, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 335);
  }
  swift_bridgeObjectRelease();
  double v102 = v193;
  double v101 = v194;
  double v103 = v192;
  sub_100803FE4(0, 1, v69, v194, v193, v192, v86);
  CGFloat v185 = v69;
  [v36 convertUnscaledToBoundsRect:v69, v101, v102, v103];
  CGFloat v171 = v105;
  CGFloat v172 = v104;
  CGFloat v169 = v107;
  CGFloat v170 = v106;
  CGFloat v108 = v197;
  CGFloat v109 = v198;
  CGFloat v111 = v195;
  CGFloat v110 = v196;
  [v36 convertUnscaledToBoundsRect:v198, v197, v196, v195];
  CGFloat v167 = v113;
  CGFloat v168 = v112;
  CGFloat v165 = v115;
  CGFloat v166 = v114;
  [*(id *)&v199[OBJC_IVAR____TtC8Freeform28CRLSceneCaptureSnapshotLayer_coordinateSpaceLayer] frame];
  CGFloat v117 = v116;
  double v119 = v118;
  CGFloat v178 = v121;
  CGFloat v179 = v120;
  sub_1005057FC((uint64_t *)&unk_101683FC0);
  uint64_t v122 = swift_initStackObject();
  *(_OWORD *)(v122 + 16) = xmmword_10117DF40;
  v205[0] = v176;
  v205[1] = v175;
  *(double *)&v205[2] = v63;
  *(double *)&v205[3] = v65;
  *(CGFloat *)&v205[4] = v109;
  *(CGFloat *)&v205[5] = v108;
  *(CGFloat *)&v205[6] = v110;
  *(CGFloat *)&v205[7] = v111;
  char v206 = 61;
  if (qword_10166F728 != -1) {
    swift_once();
  }
  uint64_t v175 = qword_10171B540;
  if (qword_10166F730 != -1) {
    swift_once();
  }
  uint64_t v123 = qword_10171B548;
  if (qword_10166F738 != -1) {
    swift_once();
  }
  uint64_t v124 = qword_10171B550;
  if (qword_10166F740 != -1) {
    swift_once();
  }
  uint64_t v176 = (uint64_t *)(v122 + 32);
  double v173 = v119;
  double v174 = v117;
  CGFloat v125 = v119;
  double v127 = v178;
  double v126 = v179;
  double v128 = sub_100065738(v117, v125, v179, v178);
  double v130 = v129;
  double v131 = sub_100065738(v172, v171, v170, v169);
  double v132 = sub_100065738(v168, v167, v166, v165);
  double v133 = sub_100064698(v128, v130, v131 - v132);
  double v180 = sub_10006402C(v133, v134, v177 / v180 * v126);
  double v136 = v135;
  double v138 = v137;
  double v140 = v139;
  uint64_t v141 = qword_10171B558;
  sub_1006006C8((uint64_t)v205, (uint64_t)v203);
  v200[0] = v175;
  v200[1] = v123;
  v200[2] = v124;
  uint64_t v201 = (ValueMetadata *)v141;
  unint64_t v202 = 0;
  v203[33] = 0;
  int v204 = 131586;
  uint64_t v142 = v181;
  sub_100B78AFC((uint64_t)v200, v181);
  sub_1006FB684((uint64_t)v200);
  sub_10054BD5C((uint64_t)v205);
  uint64_t v143 = v182;
  sub_100DE3C68(v182, 1.0);
  sub_1009ACDB0(v142, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_100DE3DFC((uint64_t)v22, 150.0);
  sub_1009ACDB0(v143, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_100DE3FA0((uint64_t)v26, 23.25);
  sub_1009ACDB0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v144 = v184;
  sub_100DE4124(v184, 1.0);
  sub_1009ACDB0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACAF8(v144, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v145 = type metadata accessor for CRLCanvasLayerAnimation();
  uint64_t v146 = (uint64_t)&v26[*(int *)(v145 + 48)];
  uint64_t v147 = *(void *)(v146 + 24);
  uint64_t v148 = *(void *)(v146 + 32);
  sub_1005231B4(v146, v147);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 120))(1, v147, v148);
  uint64_t v149 = v186;
  sub_1009AC838((uint64_t)v26, v186, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACDB0(v144, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACAF8(v149, v144, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v150 = v144 + *(int *)(v145 + 48);
  uint64_t v151 = *(void *)(v150 + 24);
  uint64_t v152 = *(void *)(v150 + 32);
  sub_1005231B4(v150, v151);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 192))(1, v151, v152);
  uint64_t v153 = v188;
  sub_1009AC838(v144, v188, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  sub_1009ACDB0(v149, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  *(void *)(v122 + 56) = v189;
  *(void *)(v122 + 64) = &off_101517F00;
  double v154 = sub_1005767BC(v176);
  sub_1009ACAF8(v153, (uint64_t)v154, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  *((unsigned char *)v154 + 88) = 1;
  sub_1009ACDB0(v153, (uint64_t (*)(void))type metadata accessor for CRLCanvasLayerAnimationProvider);
  uint64_t v155 = v191;
  double v156 = v199;
  sub_1009A8B44((uint64_t)v199, v191, v174, v173, v126, v127, v180, v136, v138, v140);
  *(void *)(v122 + 96) = v190;
  *(void *)(v122 + 104) = &off_101534738;
  double v157 = sub_1005767BC((uint64_t *)(v122 + 72));
  sub_1009ACAF8(v155, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  uint64_t v201 = &type metadata for CRLSpringLayerAnimation.Def;
  unint64_t v202 = sub_100860DAC();
  v200[0] = swift_allocObject();
  sub_100823384((uint64_t)v157, v200[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v200, (uint64_t)&type metadata for CRLSpringLayerAnimation.Def) + 315) = 1;
  sub_100F7DF84((uint64_t)v200);
  sub_1009ACDB0(v155, (uint64_t (*)(void))type metadata accessor for CRLSpringLayerAnimation);
  *(void *)(v122 + 136) = type metadata accessor for CRLBasicLayerAnimation();
  *(void *)(v122 + 144) = &off_10150AF08;
  double v158 = sub_1005767BC((uint64_t *)(v122 + 112));
  sub_1009A9E60(v156, (uint64_t)v158, v185, v194, v193, v192, v198, v197, v196, v195);
  double v159 = sub_1006C9744(v122, 0.0);
  uint64_t v161 = v160;
  double v162 = v159;
  swift_setDeallocating();
  sub_1005057FC((uint64_t *)&unk_101683FE0);
  uint64_t result = swift_arrayDestroy();
  double v164 = v187;
  *(void *)long long v187 = v161;
  v164[1] = v162;
  return result;
}

uint64_t sub_1009A9E60@<X0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>, CGFloat a9@<D6>, CGFloat a10@<D7>)
{
  uint64_t v55 = a2;
  uint64_t v19 = type metadata accessor for CRLBasicLayerAnimation();
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v51 - v25;
  __chkstk_darwin(v27, v28);
  CGFloat v53 = (id *)((char *)&v51 - v29);
  __chkstk_darwin(v30, v31);
  uint64_t v54 = (uint64_t)&v51 - v32;
  v61.origin.double x = a3;
  v61.origin.double y = a4;
  v61.size.double width = a5;
  v61.size.double height = a6;
  v62.origin.double x = a7;
  v62.origin.double y = a8;
  v62.size.double width = a9;
  v62.size.double height = a10;
  BOOL v33 = CGRectIntersectsRect(v61, v62);
  float v34 = 1.0;
  if (v33) {
    float v34 = 0.0;
  }
  LODWORD(v57[0]) = 1065353216;
  *((float *)v57 + 1) = v34;
  char v60 = 6;
  if (qword_10166F720 != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)qword_10171B538;
  sub_1006006C8((uint64_t)v57, (uint64_t)v56);
  id v52 = v35;
  id v36 = a1;
  UUID.init()();
  swift_unknownObjectWeakInit();
  double v37 = &v22[*(int *)(v19 + 28)];
  uint64_t v38 = type metadata accessor for CRLLayerAnimationDisplayLink.Handler();
  double v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  v39(v37, 1, 1, v38);
  v39(&v22[*(int *)(v19 + 32)], 1, 1, v38);
  swift_unknownObjectWeakAssign();

  sub_100549A0C((uint64_t)v56, (uint64_t)(v22 + 24));
  *(_OWORD *)(v22 + 8) = xmmword_10117EE20;
  *(void *)uint64_t v22 = v52;
  *((void *)v22 + 36) = 0;
  *((_DWORD *)v22 + 74) = 131586;
  sub_10054BD5C((uint64_t)v57);
  sub_1009ACAF8((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  *((void *)v26 + 2) = 0x3FC0A3D70A3D70A4;
  sub_1009ACDB0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  id v40 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v41) = 0.25;
  LODWORD(v42) = 0.5;
  LODWORD(v43) = 1.0;
  id v44 = [v40 initWithControlPoints:v41 :0.0 :v42 :v43];
  id v45 = sub_100A67E84();

  double v46 = v53;
  sub_1009ACAF8((uint64_t)v26, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);

  *double v46 = v45;
  sub_1009ACDB0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v47 = v54;
  sub_1009ACAF8((uint64_t)v46, v54, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  double v58 = &type metadata for CRLBasicLayerAnimation.Def;
  unint64_t v48 = sub_10054CB94();
  unint64_t v59 = v48;
  v57[0] = swift_allocObject();
  sub_100549A68(v47, v57[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v57, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 297) = 1;
  sub_1005FF368((uint64_t)v57);
  sub_1009ACDB0((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v49 = v55;
  sub_1009ACAF8(v47, v55, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  double v58 = &type metadata for CRLBasicLayerAnimation.Def;
  unint64_t v59 = v48;
  v57[0] = swift_allocObject();
  sub_100549A68(v49, v57[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v57, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 299) = 1;
  sub_1005FF368((uint64_t)v57);
  return sub_1009ACDB0(v47, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
}

uint64_t sub_1009AA2B0(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v13 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1009A7364((uint64_t)v49);
  if (!*(void *)&v49[0])
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"animateToScene(sceneRect:completionHandler:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 413, (uint64_t)"Unable to animate, could not resolve canvas animator from board view controller's ICC.", 86, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"animateToScene(sceneRect:completionHandler:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 413);
  }
  sub_10051B3EC((uint64_t)v49, (uint64_t)&v43, (uint64_t *)&unk_10169AED0);
  if ((void)v43)
  {
    v49[3] = v46;
    v49[4] = v47;
    uint64_t v50 = v48;
    v49[1] = v44;
    v49[2] = v45;
    v49[0] = v43;
    [*((id *)&v44 + 1) visibleUnscaledRect];
    uint64_t v19 = OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_isAnimatingToScene;
    if ((v6[OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_isAnimatingToScene] & 1) == 0)
    {
      double v21 = v17;
      double v22 = v18;
      double v23 = sub_100065738(a3, a4, a5, a6);
      double v25 = v24;
      double v26 = sub_100066FC4(a5, a6, v21, v22);
      double v27 = sub_10006402C(v23, v25, v26);
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      v6[v19] = 1;
      sub_100E41378();
      uint64_t v34 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v16, 1, 1, v34);
      sub_1005CFBF0((uint64_t)v49, (uint64_t)&v43);
      type metadata accessor for MainActor();
      uint64_t v35 = v6;
      sub_1005173A0(a1);
      uint64_t v36 = static MainActor.shared.getter();
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = &protocol witness table for MainActor;
      long long v38 = v46;
      *(_OWORD *)(v37 + 64) = v45;
      *(_OWORD *)(v37 + 80) = v38;
      *(_OWORD *)(v37 + 96) = v47;
      uint64_t v39 = v48;
      long long v40 = v44;
      *(_OWORD *)(v37 + 32) = v43;
      *(_OWORD *)(v37 + 48) = v40;
      *(void *)(v37 + 112) = v39;
      *(void *)(v37 + 120) = v35;
      *(double *)(v37 + 128) = v27;
      *(void *)(v37 + 136) = v29;
      *(void *)(v37 + 144) = v31;
      *(void *)(v37 + 152) = v33;
      *(void *)(v37 + 160) = a1;
      *(void *)(v37 + 168) = a2;
      uint64_t v20 = sub_1005912D0((uint64_t)v16, (uint64_t)&unk_101689CA0, v37);
      sub_1005CFCF0((uint64_t)v49);
      return v20;
    }
    sub_1005CFCF0((uint64_t)v49);
  }
  else
  {
    sub_100522F00((uint64_t)&v43, (uint64_t *)&unk_10169AED0);
  }
  return 0;
}

uint64_t sub_1009AA634(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 144) = a10;
  *(void *)(v11 + 152) = a11;
  *(double *)(v11 + 128) = a3;
  *(double *)(v11 + 136) = a4;
  *(double *)(v11 + 112) = a1;
  *(double *)(v11 + 120) = a2;
  *(void *)(v11 + 96) = a8;
  *(void *)(v11 + 104) = a9;
  *(void *)(v11 + 160) = type metadata accessor for MainActor();
  *(void *)(v11 + 168) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v11 + 176) = v13;
  *(void *)(v11 + 184) = v12;
  return _swift_task_switch(sub_1009AA6DC, v13, v12);
}

uint64_t sub_1009AA6DC()
{
  double v63 = (double *)(v0 + 2);
  uint64_t v1 = v0[12];
  NSString v2 = *(void **)(v1 + 24);
  [v2 beginDynamicOperation];
  uint64_t v3 = self;
  [v3 flush];
  [v3 begin];
  sub_1009AAD88();
  [v3 commit];
  [v3 begin];
  uint64_t v4 = sub_1009AC624(v1);
  unint64_t v6 = v5;
  v0[24] = v4;
  v0[25] = v5;
  CGRect v61 = v4;
  uint64_t v7 = sub_1009A74D4(v4, v5);
  sub_1009AAE6C((unint64_t)v7);
  swift_bridgeObjectRelease();
  [v3 commit];
  [v3 begin];
  sub_1009AB1C4();
  [v3 commit];
  [v3 begin];
  id v8 = [v2 mathCalculationController];
  sub_100954634(1);

  switch(v6 >> 62)
  {
    case 1uLL:
      CGFloat v46 = *((double *)v0 + 16);
      CGFloat v45 = *((double *)v0 + 17);
      CGFloat v48 = *((double *)v0 + 14);
      CGFloat v47 = *((double *)v0 + 15);
      uint64_t v49 = v0[12];
      uint64_t v50 = (void *)(v6 & 0x3FFFFFFFFFFFFFFFLL);
      v0[5] = &type metadata for CRLLayerAnimationGroup;
      v0[6] = &off_10150F5C8;
      uint64_t v51 = v61;
      id v52 = v50;
      uint64_t v34 = v0 + 2;
      sub_1009A8018(v49, v51, v52, v63, v48, v47, v46, v45);

      break;
    case 2uLL:
      CGFloat v36 = *((double *)v0 + 16);
      CGFloat v35 = *((double *)v0 + 17);
      CGFloat v38 = *((double *)v0 + 14);
      CGFloat v37 = *((double *)v0 + 15);
      uint64_t v39 = v0[12];
      v0[5] = &type metadata for CRLLayerAnimationGroup;
      v0[6] = &off_10150F5C8;
      uint64_t v34 = v0 + 2;
      sub_1009A93B8(v39, (uint64_t)v61, v63, v38, v37, v36, v35);
      sub_1009AC7E4(v61, v6);
      break;
    case 3uLL:
      double v41 = *((double *)v0 + 16);
      double v40 = *((double *)v0 + 17);
      double v43 = *((double *)v0 + 14);
      double v42 = *((double *)v0 + 15);
      v0[5] = type metadata accessor for CRLCanvasLayerAnimationProvider();
      v0[6] = &off_101517F00;
      uint64_t v34 = v0 + 2;
      long long v44 = sub_1005767BC((uint64_t *)v63);
      sub_1009A78AC((uint64_t)v44, v43, v42, v41, v40);
      break;
    default:
      CGFloat v10 = *((double *)v0 + 16);
      CGFloat v9 = *((double *)v0 + 17);
      CGFloat v12 = *((double *)v0 + 14);
      CGFloat v11 = *((double *)v0 + 15);
      v0[10] = type metadata accessor for CRLBasicLayerAnimation();
      v0[11] = &off_10150AF08;
      uint64_t v13 = sub_1005767BC(v0 + 7);
      double v14 = sub_100065738(v12, v11, v10, v9);
      double v16 = v15;
      double v17 = v61;
      [v2 visibleUnscaledRect];
      double v20 = sub_100066FC4(v10, v9, v18, v19);
      double v21 = sub_10006402C(v14, v16, v20);
      CGFloat v23 = v22;
      double v25 = v24;
      double v27 = v26;
      [v2 unobscuredScrollViewFrame];
      double v30 = sub_10006729C(0, v25, v27, v28, v29) / v25;
      double v32 = v31 / v27;
      if (v32 >= v30) {
        double v33 = v30;
      }
      else {
        double v33 = v32;
      }
      sub_100803FE4(0, 1, v21, v23, v25, v27, v33);
      sub_1009A7CC4(v17, (uint64_t)v13);
      sub_1009AC7E4(v61, v6);
      uint64_t v34 = v0 + 2;
      sub_10053974C((long long *)(v0 + 7), (uint64_t)v63);
      break;
  }
  uint64_t v53 = v0[19];
  uint64_t v54 = v0[18];
  uint64_t v56 = v0[16];
  uint64_t v55 = v0[17];
  int8x16_t v62 = *((int8x16_t *)v0 + 6);
  long long v64 = *((_OWORD *)v0 + 7);
  [v3 commit:v62.i64[0]];
  uint64_t v57 = static MainActor.shared.getter();
  v0[26] = v57;
  uint64_t v58 = swift_task_alloc();
  v0[27] = v58;
  *(void *)(v58 + 16) = v34;
  *(int8x16_t *)(v58 + 24) = vextq_s8(v62, v62, 8uLL);
  *(_OWORD *)(v58 + 40) = v64;
  *(void *)(v58 + 56) = v56;
  *(void *)(v58 + 64) = v55;
  *(void *)(v58 + 72) = v54;
  *(void *)(v58 + 80) = v53;
  unint64_t v59 = (void *)swift_task_alloc();
  v0[28] = v59;
  *unint64_t v59 = v0;
  v59[1] = sub_1009AABA4;
  return withCheckedContinuation<A>(isolation:function:_:)(v59, v57, &protocol witness table for MainActor, 0xD00000000000002CLL, 0x8000000101264EF0, sub_1009AC7CC, v58, (char *)&type metadata for () + 8);
}

uint64_t sub_1009AABA4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 184);
  uint64_t v3 = *(void *)(v1 + 176);
  return _swift_task_switch(sub_1009AAD04, v3, v2);
}

uint64_t sub_1009AAD04()
{
  uint64_t v2 = (void *)v0[24];
  unint64_t v1 = v0[25];
  swift_release();
  sub_1009AC7E4(v2, v1);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)(v0 + 2));
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009AAD88()
{
  sub_1009AB7D8();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      unint64_t v6 = v5;
      ++v4;
      uint64_t v7 = v5;
      sub_1009AD038(&v7);
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009AAE6C(unint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_scenesNavigationCrossfadeSnapshotLayers;
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_scenesNavigationCrossfadeSnapshotLayers);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_43;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v4 + 8 * i + 32);
    }
    CGFloat v9 = v8;
    [v8 removeFromSuperlayer];
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (result)
    {
LABEL_12:
      if (v10 >= 1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          for (uint64_t j = 0; j != v10; ++j)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          for (uint64_t k = 0; k != v10; ++k)
          {
            id v13 = *(id *)(a1 + 8 * k + 32);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        goto LABEL_25;
      }
LABEL_43:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_12;
    }
  }
LABEL_25:
  swift_bridgeObjectRelease();
  *(void *)(v22 + v3) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void *)(v22 + v3);
  if (v14 >> 62) {
    goto LABEL_40;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v16 = 4;
    while (1)
    {
      id v17 = (v14 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v14 + 8 * v16);
      double v18 = v17;
      uint64_t v19 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      id v20 = sub_100E3CC3C();
      id v21 = [v20 layer];

      if (!v21)
      {

        goto LABEL_36;
      }
      [v21 addSublayer:v18];

      ++v16;
      if (v19 == v15) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
  }
LABEL_36:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1009AB1C4()
{
  sub_1009AB7D8();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      unint64_t v6 = v5;
      ++v4;
      id v7 = [v5 layer];
      NSString v8 = String._bridgeToObjectiveC()();
      [v7 removeAnimationForKey:v8];
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009AB2F8(uint64_t a1, void *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a10;
  uint64_t v18 = sub_1005057FC(&qword_101682E08);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  __chkstk_darwin(v18, v21);
  uint64_t v22 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a2[3];
  v31[0] = a2[4];
  v31[1] = (uint64_t)sub_10050F848(a2, v23);
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1005CFBF0(a8, (uint64_t)v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, v18);
  unint64_t v25 = (*(unsigned __int8 *)(v19 + 80) + 160) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v26 = swift_allocObject();
  long long v27 = v33[3];
  *(_OWORD *)(v26 + 56) = v33[2];
  *(_OWORD *)(v26 + 72) = v27;
  *(_OWORD *)(v26 + 88) = v33[4];
  long long v28 = v33[1];
  *(_OWORD *)(v26 + 24) = v33[0];
  *(void *)(v26 + 16) = v24;
  *(void *)(v26 + 104) = v34;
  *(_OWORD *)(v26 + 40) = v28;
  *(double *)(v26 + 112) = a3;
  *(double *)(v26 + 120) = a4;
  *(double *)(v26 + 128) = a5;
  *(double *)(v26 + 136) = a6;
  uint64_t v29 = v32;
  *(void *)(v26 + 144) = a9;
  *(void *)(v26 + 152) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v26 + v25, v22, v18);
  swift_retain();
  sub_1005173A0(a9);
  sub_100F5EFAC(0, 1, 1, 0, 0, (uint64_t)sub_1009ACF80, v26, v23, v31[0]);
  swift_release();
  return swift_release();
}

uint64_t sub_1009AB544(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v14 = (unsigned char *)Strong;
    uint64_t v15 = *(void **)(a6 + 24);
    [v15 viewScale];
    sub_100803FE4(0, 1, a1, a2, a3, a4, v16);
    [v15 willEndDynamicOperation];
    [v15 endDynamicOperation];
    v14[OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_isAnimatingToScene] = 0;
    sub_100E41378();
    id v17 = [v15 mathCalculationController];
    sub_100954634(0);

    sub_1005057FC(&qword_101689CA8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    *(void *)(inited + 32) = 0;
    uint64_t v20 = inited;
    specialized Array._endMutation()();
    sub_1009AB6D8(v20);
    swift_bridgeObjectRelease();
  }
  if (a7) {
    a7();
  }
  sub_1005057FC(&qword_101682E08);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1009AB6D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v1; ++i)
    {
      uint64_t v4 = *(void **)(a1 + 8 * i + 32);
      if (v4)
      {
        id v5 = v4;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
  }
  sub_1009AAE6C((unint64_t)_swiftEmptyArrayStorage);

  return swift_bridgeObjectRelease();
}

void sub_1009AB7D8()
{
  uint64_t v1 = v0;
  uint64_t v17 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v17 - 8);
  *(void *)&double v4 = __chkstk_darwin(v17, v3).n128_u64[0];
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 subviews:v4];
  unint64_t v16 = sub_1009ACFF8();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = _swiftEmptyArrayStorage;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_17;
  }
LABEL_3:
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v15 = 0x8000000101265130;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v8 + 8 * v10 + 32);
      }
      unint64_t v19 = v16;
      id v18 = v11;
      id v12 = v11;
      Mirror.init(reflecting:)();
      Mirror.subjectType.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v17);
      if (_typeName(_:qualified:)() == 0xD00000000000001CLL && v13 == v15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
        {

          goto LABEL_7;
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_7:
      if (v9 == ++v10)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1009ABA6C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  type metadata accessor for AppEntityVisualState();
  v2[7] = swift_task_alloc();
  type metadata accessor for CRLBoardCRDTData(0);
  v2[8] = swift_task_alloc();
  type metadata accessor for UUID();
  v2[9] = swift_task_alloc();
  type metadata accessor for CRLBoardIdentifier(0);
  v2[10] = swift_task_alloc();
  sub_1005057FC(&qword_101691F20);
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CRLBoardEntity();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[16] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[17] = v5;
  v2[18] = v4;
  return _swift_task_switch(sub_1009ABC50, v5, v4);
}

uint64_t sub_1009ABC50()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(char **)(*(void *)(v0[6] + OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_editingCoordinator)
                + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  uint64_t v5 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  uint64_t v6 = *(void *)&v4[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_1009ACAF8(v6, v3, type metadata accessor for CRLBoardCRDTData);
  uint64_t v7 = v4;
  swift_retain();
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  sub_1009ACDB0(v3, type metadata accessor for CRLBoardCRDTData);
  swift_release();
  unint64_t v8 = (uint64_t *)(*(void *)&v4[v5] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  swift_bridgeObjectRetain();
  sub_100753370(v2, v9, v10, v1);

  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016A09D0 + dword_1016A09D0);
  id v11 = (void *)swift_task_alloc();
  v0[19] = v11;
  *id v11 = v0;
  v11[1] = sub_1009ABE14;
  uint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  return v15(v12, v13);
}

uint64_t sub_1009ABE14()
{
  uint64_t v3 = *v1;
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + 80);
  if (v0)
  {
    swift_errorRelease();
    sub_1009ACDB0(v4, type metadata accessor for CRLBoardIdentifier);
    uint64_t v5 = *(void *)(v3 + 136);
    uint64_t v6 = *(void *)(v3 + 144);
    uint64_t v7 = sub_1009AC174;
  }
  else
  {
    sub_1009ACDB0(v4, type metadata accessor for CRLBoardIdentifier);
    uint64_t v5 = *(void *)(v3 + 136);
    uint64_t v6 = *(void *)(v3 + 144);
    uint64_t v7 = sub_1009ABF80;
  }
  return _swift_task_switch(v7, v5, v6);
}

id sub_1009ABF80()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100522F00(*(void *)(v0 + 88), &qword_101691F20);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 48);
    sub_1009AC838(*(void *)(v0 + 88), *(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
    if ([v4 isViewLoaded])
    {
      id result = [*(id *)(v0 + 48) view];
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = result;
      sub_1009ACAF8(*(void *)(v0 + 120), *(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
      AppEntityVisualState.init(isSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:)();
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation());
      sub_10057B450();
      uint64_t v7 = (void *)AppEntityViewAnnotation.init<A>(entity:state:)();
      UIView.annotate(with:)();
    }
    sub_1009ACDB0(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for CRLBoardEntity);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v8();
}

uint64_t sub_1009AC174()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  sub_100522F00(v0[11], &qword_101691F20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1009AC260(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100528D08;
  return sub_1009ABA6C(a1);
}

id sub_1009AC2F8()
{
  uint64_t v1 = type metadata accessor for AppEntityVisualState();
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)&double v4 = __chkstk_darwin(v1, v3).n128_u64[0];
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  id result = [v7 isViewLoaded];
  if (result)
  {
    id result = [v7 view];
    if (result)
    {
      uint64_t v9 = result;
      AppEntityVisualState.init(isSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:)();
      UIView.updateAppEntityAnnotation(with:)();

      return (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1009AC418()
{
  return AppEntityVisualState.init(isSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:)();
}

uint64_t sub_1009AC434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_1016826C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009AC49C()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 88)) {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 64);
  }
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 160)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 176, 7);
}

uint64_t sub_1009AC524(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = *((void *)v1 + 15);
  double v8 = v1[16];
  double v9 = v1[17];
  double v10 = v1[18];
  double v11 = v1[19];
  uint64_t v13 = *((void *)v1 + 20);
  uint64_t v12 = *((void *)v1 + 21);
  char v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *char v14 = v2;
  v14[1] = sub_100528488;
  return sub_1009AA634(v8, v9, v10, v11, a1, v4, v5, v6, v7, v13, v12);
}

char *sub_1009AC624(uint64_t a1)
{
  uint64_t v2 = sub_1009A75C8(a1);
  if (!v2)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"sceneNavigationAnimationType(canvasAnimator:forSceneRect:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 108, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"sceneNavigationAnimationType(canvasAnimator:forSceneRect:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 108);
    return 0;
  }
  uint64_t v3 = v2;
  if (([self isReduceMotionEnabled] & 1) == 0 && !sub_1009A75C8(a1))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"sceneNavigationAnimationType(canvasAnimator:forSceneRect:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 115, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"sceneNavigationAnimationType(canvasAnimator:forSceneRect:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLBoardViewController.swift", 98, 2, 115);

    return 0;
  }
  return v3;
}

uint64_t sub_1009AC7CC(uint64_t a1)
{
  return sub_1009AB2F8(a1, *(void **)(v1 + 16), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

void sub_1009AC7E4(void *a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 && v3 != 2)
  {
    if (v3 != 1) {
      return;
    }
    uint64_t v4 = a2 & 0x3FFFFFFFFFFFFFFFLL;

    a1 = (void *)v4;
  }
}

uint64_t sub_1009AC838(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009AC8A0()
{
  uint64_t v1 = (id *)(v0 + 40);
  switch(*(unsigned char *)(v0 + 296))
  {
    case 0:
    case 0x22:
      if (*(void *)(v0 + 64)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v1);
      }
      if (*(void *)(v0 + 96)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 72);
      }
      break;
    case 1:
    case 0x23:
      if (*(void *)(v0 + 64)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v1);
      }
      break;
    case 0x12:
    case 0x14:
    case 0x1C:
    case 0x1E:

      break;
    case 0x13:
    case 0x15:
    case 0x1D:
    case 0x1F:

      break;
    case 0x20:
    case 0x24:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 0x21:
    case 0x25:
      goto LABEL_17;
    case 0x3A:

      break;
    case 0x3F:

      if (*(void *)(v0 + 160)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 136);
      }
      goto LABEL_17;
    case 0x40:

      if (*(void *)(v0 + 128)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 104);
      }
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 316, 7);
}

uint64_t sub_1009ACAF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009ACB60()
{
  uint64_t v1 = (id *)(v0 + 56);
  switch(*(unsigned char *)(v0 + 312))
  {
    case 0:
    case 0x22:
      if (*(void *)(v0 + 80)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v1);
      }
      if (*(void *)(v0 + 112)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 88);
      }
      break;
    case 1:
    case 0x23:
      if (*(void *)(v0 + 80)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v1);
      }
      break;
    case 0x12:
    case 0x14:
    case 0x1C:
    case 0x1E:

      break;
    case 0x13:
    case 0x15:
    case 0x1D:
    case 0x1F:

      break;
    case 0x20:
    case 0x24:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 0x21:
    case 0x25:
      goto LABEL_17;
    case 0x3A:

      break;
    case 0x3F:

      if (*(void *)(v0 + 176)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 152);
      }
      goto LABEL_17;
    case 0x40:

      if (*(void *)(v0 + 144)) {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 120);
      }
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 332, 7);
}

uint64_t sub_1009ACDB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_1009ACE10(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1009ACE30()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009ACE68()
{
  uint64_t v1 = sub_1005057FC(&qword_101682E08);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();

  if (*(void *)(v0 + 80)) {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 56);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144)) {
    swift_release();
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 160) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return _swift_deallocObject(v0, v7, v5);
}

uint64_t sub_1009ACF80()
{
  sub_1005057FC(&qword_101682E08);
  uint64_t v1 = *((void *)v0 + 2);
  CGFloat v2 = v0[14];
  CGFloat v3 = v0[15];
  CGFloat v4 = v0[16];
  CGFloat v5 = v0[17];
  uint64_t v6 = (void (*)(void))*((void *)v0 + 18);

  return sub_1009AB544(v2, v3, v4, v5, v1, (uint64_t)(v0 + 3), v6);
}

unint64_t sub_1009ACFF8()
{
  unint64_t result = qword_1016725F0;
  if (!qword_1016725F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016725F0);
  }
  return result;
}

uint64_t sub_1009AD038(void **a1)
{
  uint64_t v2 = type metadata accessor for CRLBasicLayerAnimation();
  __chkstk_darwin(v2, v3);
  CGFloat v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v37 = (uint64_t)&v35 - v8;
  __chkstk_darwin(v9, v10);
  uint64_t v39 = (uint64_t)&v35 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v40 = (uint64_t)&v35 - v14;
  __chkstk_darwin(v15, v16);
  uint64_t v41 = (uint64_t)&v35 - v17;
  id v18 = *a1;
  v43[0] = 0;
  char v46 = 6;
  if (qword_10166F720 != -1) {
    swift_once();
  }
  id v36 = (id)qword_10171B538;
  id v19 = [v18 layer];
  sub_1006006C8((uint64_t)v43, (uint64_t)v42);
  UUID.init()();
  swift_unknownObjectWeakInit();
  uint64_t v20 = *(int *)(v2 + 28);
  id v38 = v18;
  uint64_t v21 = &v5[v20];
  uint64_t v22 = type metadata accessor for CRLLayerAnimationDisplayLink.Handler();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  v23(&v5[*(int *)(v2 + 32)], 1, 1, v22);
  swift_unknownObjectWeakAssign();

  sub_100549A0C((uint64_t)v42, (uint64_t)(v5 + 24));
  *(_OWORD *)(v5 + 8) = xmmword_10117EE20;
  *(void *)CGFloat v5 = v36;
  *((void *)v5 + 36) = 0;
  *((_DWORD *)v5 + 74) = 131586;
  sub_10054BD5C((uint64_t)v43);
  uint64_t v24 = v37;
  sub_1009ACAF8((uint64_t)v5, v37, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  *(void *)(v24 + 16) = 0;
  sub_1009ACDB0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v25 = v39;
  sub_1009ACAF8(v24, v39, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  long long v44 = &type metadata for CRLBasicLayerAnimation.Def;
  unint64_t v26 = sub_10054CB94();
  unint64_t v45 = v26;
  v43[0] = swift_allocObject();
  sub_100549A68(v25, v43[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v43, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 297) = 0;
  sub_1005FF368((uint64_t)v43);
  sub_1009ACDB0(v24, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v27 = v40;
  sub_1009ACAF8(v25, v40, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  long long v44 = &type metadata for CRLBasicLayerAnimation.Def;
  unint64_t v45 = v26;
  v43[0] = swift_allocObject();
  sub_100549A68(v27, v43[0] + 16);
  *(unsigned char *)(sub_1005231B4((uint64_t)v43, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def) + 298) = 0;
  sub_1005FF368((uint64_t)v43);
  sub_1009ACDB0(v25, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  uint64_t v28 = v41;
  sub_1009ACAF8(v27, v41, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  long long v44 = &type metadata for CRLBasicLayerAnimation.Def;
  unint64_t v45 = v26;
  v43[0] = swift_allocObject();
  sub_100549A68(v28, v43[0] + 16);
  uint64_t v29 = sub_1005231B4((uint64_t)v43, (uint64_t)&type metadata for CRLBasicLayerAnimation.Def);
  double v30 = *(void **)(v29 + 288);
  *(void *)(v29 + 288) = kCAFillModeBoth;
  double v31 = kCAFillModeBoth;

  sub_1005FF368((uint64_t)v43);
  sub_1009ACDB0(v27, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
  id v32 = sub_100805048();
  NSString v33 = String._bridgeToObjectiveC()();
  [v38 addAnimation:v32 forKey:v33];

  return sub_1009ACDB0(v28, (uint64_t (*)(void))type metadata accessor for CRLBasicLayerAnimation);
}

uint64_t sub_1009AD4AC()
{
  v1[31] = v0;
  sub_1005057FC(&qword_101672E90);
  v1[32] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[33] = v2;
  v1[34] = *(void *)(v2 - 8);
  v1[35] = swift_task_alloc();
  sub_1005057FC((uint64_t *)&unk_101674160);
  v1[36] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CRLProto_Data(0);
  v1[37] = v3;
  v1[38] = *(void *)(v3 - 8);
  v1[39] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v1[40] = v4;
  v1[41] = *(void *)(v4 - 8);
  v1[42] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CRLProto_ObjectMetadata.AssetInfo(0);
  v1[43] = v5;
  v1[44] = *(void *)(v5 - 8);
  v1[45] = swift_task_alloc();
  v1[46] = type metadata accessor for CRLArchivedObjectMetadataRepresentation();
  v1[47] = swift_task_alloc();
  return _swift_task_switch(sub_1009AD73C, 0, 0);
}

uint64_t sub_1009AD73C()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  sub_10050F848(v1 + 4, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  v0[48] = v4;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)v0[31];
  uint64_t v7 = v6[2];
  uint64_t v8 = v6[3];
  uint64_t v9 = (void *)v6[9];
  uint64_t v10 = (void *)v6[10];
  uint64_t v11 = v6[11];
  v0[49] = v11;
  type metadata accessor for CRLSerializableObjectWriter();
  v0[50] = swift_initStackObject();
  swift_unknownObjectRetain();
  id v12 = v9;
  id v13 = v10;
  swift_unknownObjectRetain();
  v0[51] = sub_1005806A8(v7, v8, (uint64_t)v12, (uint64_t)v13, v5, v11);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[52] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1009AD974;
  uint64_t v15 = v0[47];
  return sub_1005807DC(v15);
}

uint64_t sub_1009AD974()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1009AFAB4;
  }
  else {
    uint64_t v2 = sub_1009ADAB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009ADAB4()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 424);
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(*(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 368) + 20));
    *(void *)(v0 + 456) = v4;
    *(void *)(v3 + 96) = v4;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if ((v1 & 2) != 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v0 + 376) + 8);
      *(void *)(v0 + 464) = v10;
      uint64_t v11 = *(void *)(v10 + 16);
      *(void *)(v0 + 472) = v11;
      if (v11)
      {
        uint64_t v12 = *(void *)(v0 + 352);
        int v13 = *(_DWORD *)(v12 + 80);
        *(_DWORD *)(v0 + 528) = v13;
        uint64_t v14 = *(void *)(v12 + 72);
        *(void *)(v0 + 480) = v14;
        uint64_t v15 = swift_bridgeObjectRetain();
        uint64_t v16 = 0;
        while (1)
        {
          *(void *)(v0 + 488) = v16;
          uint64_t v17 = *(void *)(v0 + 360);
          uint64_t v18 = *(void *)(v0 + 344);
          uint64_t v19 = *(void *)(v0 + 296);
          uint64_t v20 = *(void *)(v0 + 304);
          uint64_t v21 = *(void *)(v0 + 288);
          sub_1009B0894(v15 + ((v13 + 32) & ~(unint64_t)v13) + v14 * v16, v17);
          sub_1005CC4F0(v17 + *(int *)(v18 + 28), v21);
          int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19);
          uint64_t v23 = *(_OWORD **)(v0 + 312);
          if (v22 == 1)
          {
            uint64_t v24 = *(void *)(v0 + 288);
            *uint64_t v23 = xmmword_101180360;
            UnknownStorage.init()();
            sub_100522F00(v24, (uint64_t *)&unk_101674160);
          }
          else
          {
            sub_1005CC5B8(*(void *)(v0 + 288), (uint64_t)v23);
          }
          uint64_t v25 = *(uint64_t **)(v0 + 312);
          uint64_t v26 = *v25;
          unint64_t v27 = v25[1];
          sub_100510D4C(*v25, v27);
          sub_1009B08F8((uint64_t)v25, type metadata accessor for CRLProto_Data);
          UUID.init(crl_data:)(v26, v27);
          if (v2) {
            break;
          }
          if (*(void *)(*(void *)(v0 + 456) + 16) && (unint64_t v28 = sub_100955FC8(*(void *)(v0 + 336)), (v29 & 1) != 0))
          {
            uint64_t v30 = *(void *)(v0 + 264);
            uint64_t v31 = *(void *)(v0 + 272);
            uint64_t v32 = *(void *)(v0 + 256);
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16))(v32, *(void *)(*(void *)(v0 + 456) + 56) + *(void *)(v31 + 72) * v28, v30);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v30);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) != 1)
            {
              uint64_t v55 = *(uint64_t **)(v0 + 360);
              uint64_t v56 = *(void **)(v0 + 248);
              (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 256), *(void *)(v0 + 264));
              uint64_t v57 = v56[7];
              uint64_t v58 = v56[8];
              sub_10050F848(v56 + 4, v57);
              uint64_t v59 = UUID.uuidString.getter();
              uint64_t v61 = v60;
              uint64_t v62 = *v55;
              uint64_t v63 = v55[1];
              long long v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 24);
              swift_bridgeObjectRetain();
              uint64_t v65 = v64(v59, v61, v62, v63, v57, v58);
              *(void *)(v0 + 496) = v65;
              CGFloat v66 = (void *)v65;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v67 = objc_allocWithZone((Class)CRLFileIOChannel);
              URL._bridgeToObjectiveC()(v68);
              CGFloat v70 = v69;
              *(void *)(v0 + 240) = 0;
              id v71 = [v67 initForReadingURL:v69 error:v0 + 240];
              *(void *)(v0 + 504) = v71;

              double v72 = *(void **)(v0 + 240);
              if (v71)
              {
                uint64_t ObjectType = swift_getObjectType();
                id v74 = v72;
                id v75 = v71;
                double v76 = (void *)swift_task_alloc();
                *(void *)(v0 + 512) = v76;
                *double v76 = v0;
                v76[1] = sub_1009AEFF8;
                return sub_10077A6D0((uint64_t)v75, ObjectType);
              }
              uint64_t v9 = *(void **)(v0 + 384);
              uint64_t v85 = *(void *)(v0 + 360);
              uint64_t v86 = *(void *)(v0 + 376);
              uint64_t v77 = *(void *)(v0 + 328);
              uint64_t v84 = *(void *)(v0 + 336);
              uint64_t v78 = *(void *)(v0 + 272);
              uint64_t v82 = *(void *)(v0 + 280);
              uint64_t v83 = *(void *)(v0 + 320);
              uint64_t v81 = *(void *)(v0 + 264);
              id v79 = v72;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              [v66 close];
              swift_release();
              swift_unknownObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v82, v81);
              (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v84, v83);
              sub_1009B08F8(v85, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
              uint64_t v52 = v86;
LABEL_26:
              sub_1009B08F8(v52, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
              goto LABEL_27;
            }
          }
          else
          {
            (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 272) + 56))(*(void *)(v0 + 256), 1, 1, *(void *)(v0 + 264));
          }
          sub_100522F00(*(void *)(v0 + 256), &qword_101672E90);
          if (qword_10166FA18 != -1) {
            swift_once();
          }
          NSString v33 = *(uint64_t **)(v0 + 360);
          swift_beginAccess();
          uint64_t v34 = (void *)static OS_os_log.crlSerializableObject;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
          id v36 = v34;
          uint64_t v37 = UUID.uuidString.getter();
          uint64_t v39 = v38;
          *(void *)(inited + 56) = &type metadata for String;
          unint64_t v40 = sub_100528BE4();
          *(void *)(inited + 64) = v40;
          *(void *)(inited + 32) = v37;
          *(void *)(inited + 40) = v39;
          uint64_t v42 = *v33;
          uint64_t v41 = v33[1];
          *(void *)(inited + 96) = &type metadata for String;
          *(void *)(inited + 104) = v40;
          *(void *)(inited + 72) = v42;
          *(void *)(inited + 80) = v41;
          swift_bridgeObjectRetain();
          uint64_t v43 = static os_log_type_t.default.getter();
          sub_100BAC898((uint64_t)v36, (uint64_t)&_mh_execute_header, v43, (uint64_t)"Skipping writing asset without backing file URL. assetID=%@, assetFilename=%@", 77, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v44 = *(void *)(v0 + 472);
          uint64_t v45 = *(void *)(v0 + 360);
          uint64_t v46 = *(void *)(v0 + 488) + 1;
          (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
          sub_1009B08F8(v45, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
          if (v46 == v44) {
            goto LABEL_28;
          }
          uint64_t v2 = 0;
          uint64_t v14 = *(void *)(v0 + 480);
          uint64_t v16 = *(void *)(v0 + 488) + 1;
          LOBYTE(v13) = *(unsigned char *)(v0 + 528);
          uint64_t v15 = *(void *)(v0 + 464);
        }
        uint64_t v50 = *(void *)(v0 + 376);
        uint64_t v9 = *(void **)(v0 + 384);
        uint64_t v51 = *(void *)(v0 + 360);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1009B08F8(v51, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
        swift_bridgeObjectRelease();
        uint64_t v52 = v50;
        goto LABEL_26;
      }
      swift_bridgeObjectRetain();
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v54 = *(void *)(v0 + 376);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1009B08F8(v54, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
    }
    else
    {
      sub_1009B08F8(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
      swift_release();
      swift_bridgeObjectRelease();
    }
    [*(id *)(v0 + 384) close];
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
LABEL_30:
    return v53();
  }
  uint64_t v5 = *(void **)(v0 + 248);
  uint64_t v6 = v5[7];
  uint64_t v7 = v5[8];
  sub_10050F848(v5 + 4, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  *(void *)(v0 + 432) = v8;
  if (v2)
  {
    uint64_t v9 = *(void **)(v0 + 384);
    sub_1009B08F8(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
    swift_release();
LABEL_27:
    [v9 close];
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_30;
  }
  uint64_t v47 = v8;
  CGFloat v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v48;
  *CGFloat v48 = v0;
  v48[1] = sub_1009AE540;
  uint64_t v49 = *(void *)(v0 + 376);
  v48[3] = v47;
  v48[4] = v49;
  return _swift_task_switch(sub_1009AFF60, 0, 0);
}

uint64_t sub_1009AE540()
{
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1009AFBC4;
  }
  else {
    uint64_t v2 = sub_1009AE680;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009AE680()
{
  [*(id *)(v0 + 432) close];
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(*(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 368) + 20));
  *(void *)(v0 + 456) = v4;
  *(void *)(v3 + 96) = v4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  if ((v2 & 2) == 0)
  {
    sub_1009B08F8(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)(*(void *)(v0 + 376) + 8);
  *(void *)(v0 + 464) = v5;
  uint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v0 + 472) = v6;
  if (!v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v0 + 352);
  int v8 = *(_DWORD *)(v7 + 80);
  *(_DWORD *)(v0 + 528) = v8;
  uint64_t v9 = *(void *)(v7 + 72);
  *(void *)(v0 + 480) = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  while (1)
  {
    *(void *)(v0 + 488) = v11;
    uint64_t v12 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 344);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 288);
    sub_1009B0894(v10 + ((v8 + 32) & ~(unint64_t)v8) + v9 * v11, v12);
    sub_1005CC4F0(v12 + *(int *)(v13 + 28), v16);
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
    uint64_t v18 = *(_OWORD **)(v0 + 312);
    if (v17 == 1)
    {
      uint64_t v19 = *(void *)(v0 + 288);
      *uint64_t v18 = xmmword_101180360;
      UnknownStorage.init()();
      sub_100522F00(v19, (uint64_t *)&unk_101674160);
    }
    else
    {
      sub_1005CC5B8(*(void *)(v0 + 288), (uint64_t)v18);
    }
    uint64_t v20 = *(uint64_t **)(v0 + 312);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_100510D4C(*v20, v22);
    sub_1009B08F8((uint64_t)v20, type metadata accessor for CRLProto_Data);
    UUID.init(crl_data:)(v21, v22);
    if (v1)
    {
      uint64_t v43 = *(void *)(v0 + 376);
      uint64_t v42 = *(void **)(v0 + 384);
      uint64_t v44 = *(void *)(v0 + 360);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1009B08F8(v44, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    if (*(void *)(*(void *)(v0 + 456) + 16) && (unint64_t v23 = sub_100955FC8(*(void *)(v0 + 336)), (v24 & 1) != 0))
    {
      uint64_t v25 = *(void *)(v0 + 264);
      uint64_t v26 = *(void *)(v0 + 272);
      uint64_t v27 = *(void *)(v0 + 256);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16))(v27, *(void *)(*(void *)(v0 + 456) + 56) + *(void *)(v26 + 72) * v23, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) != 1)
      {
        CGFloat v48 = *(uint64_t **)(v0 + 360);
        uint64_t v49 = *(void **)(v0 + 248);
        uint64_t v50 = v49 + 4;
        (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 256), *(void *)(v0 + 264));
        uint64_t v51 = v49[7];
        uint64_t v52 = v49[8];
        sub_10050F848(v50, v51);
        uint64_t v53 = UUID.uuidString.getter();
        uint64_t v55 = v54;
        uint64_t v57 = *v48;
        uint64_t v56 = v48[1];
        uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 24);
        swift_bridgeObjectRetain();
        uint64_t v59 = v58(v53, v55, v57, v56, v51, v52);
        *(void *)(v0 + 496) = v59;
        uint64_t v60 = (void *)v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v61 = objc_allocWithZone((Class)CRLFileIOChannel);
        URL._bridgeToObjectiveC()(v62);
        long long v64 = v63;
        *(void *)(v0 + 240) = 0;
        id v65 = [v61 initForReadingURL:v63 error:v0 + 240];
        *(void *)(v0 + 504) = v65;

        CGFloat v66 = *(void **)(v0 + 240);
        if (v65)
        {
          uint64_t ObjectType = swift_getObjectType();
          id v68 = v66;
          id v69 = v65;
          CGFloat v70 = (void *)swift_task_alloc();
          *(void *)(v0 + 512) = v70;
          void *v70 = v0;
          v70[1] = sub_1009AEFF8;
          return sub_10077A6D0((uint64_t)v69, ObjectType);
        }
        uint64_t v43 = *(void *)(v0 + 376);
        uint64_t v42 = *(void **)(v0 + 384);
        uint64_t v71 = *(void *)(v0 + 328);
        uint64_t v77 = *(void *)(v0 + 336);
        uint64_t v78 = *(void *)(v0 + 360);
        uint64_t v76 = *(void *)(v0 + 320);
        uint64_t v72 = *(void *)(v0 + 272);
        uint64_t v75 = *(void *)(v0 + 280);
        uint64_t v74 = *(void *)(v0 + 264);
        id v73 = v66;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        [v60 close];
        swift_release();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v75, v74);
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v77, v76);
        sub_1009B08F8(v78, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
LABEL_20:
        sub_1009B08F8(v43, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
        [v42 close];
        swift_unknownObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_24;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 272) + 56))(*(void *)(v0 + 256), 1, 1, *(void *)(v0 + 264));
    }
    sub_100522F00(*(void *)(v0 + 256), &qword_101672E90);
    if (qword_10166FA18 != -1) {
      swift_once();
    }
    unint64_t v28 = *(uint64_t **)(v0 + 360);
    swift_beginAccess();
    char v29 = (void *)static OS_os_log.crlSerializableObject;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    id v31 = v29;
    uint64_t v32 = UUID.uuidString.getter();
    uint64_t v34 = v33;
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v35 = sub_100528BE4();
    *(void *)(inited + 64) = v35;
    *(void *)(inited + 32) = v32;
    *(void *)(inited + 40) = v34;
    uint64_t v37 = *v28;
    uint64_t v36 = v28[1];
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = v35;
    *(void *)(inited + 72) = v37;
    *(void *)(inited + 80) = v36;
    swift_bridgeObjectRetain();
    uint64_t v38 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v31, (uint64_t)&_mh_execute_header, v38, (uint64_t)"Skipping writing asset without backing file URL. assetID=%@, assetFilename=%@", 77, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    uint64_t v39 = *(void *)(v0 + 472);
    uint64_t v40 = *(void *)(v0 + 360);
    uint64_t v41 = *(void *)(v0 + 488) + 1;
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
    sub_1009B08F8(v40, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
    if (v41 == v39) {
      break;
    }
    uint64_t v1 = 0;
    uint64_t v9 = *(void *)(v0 + 480);
    uint64_t v11 = *(void *)(v0 + 488) + 1;
    LOBYTE(v8) = *(unsigned char *)(v0 + 528);
    uint64_t v10 = *(void *)(v0 + 464);
  }
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v46 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1009B08F8(v46, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
LABEL_23:
  [*(id *)(v0 + 384) close];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
LABEL_24:
  return v45();
}

uint64_t sub_1009AEFF8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 504);
  if (v0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1009AFD0C;
  }
  else
  {

    uint64_t v4 = sub_1009AF174;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009AF174()
{
  uint64_t v1 = *(void **)(v0 + 496);
  uint64_t v2 = *(void **)(v0 + 504);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  [v2 close];

  [v1 close];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 472);
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 488) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
  sub_1009B08F8(v8, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
  if (v9 != v7)
  {
    while (1)
    {
      uint64_t v12 = *(void *)(v0 + 480);
      uint64_t v13 = *(void *)(v0 + 488) + 1;
      *(void *)(v0 + 488) = v13;
      uint64_t v14 = *(void *)(v0 + 360);
      uint64_t v15 = *(void *)(v0 + 344);
      uint64_t v16 = *(void *)(v0 + 296);
      uint64_t v17 = *(void *)(v0 + 304);
      uint64_t v18 = *(void *)(v0 + 288);
      sub_1009B0894(*(void *)(v0 + 464)+ ((*(unsigned __int8 *)(v0 + 528) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 528))+ v12 * v13, v14);
      sub_1005CC4F0(v14 + *(int *)(v15 + 28), v18);
      int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16);
      uint64_t v20 = *(_OWORD **)(v0 + 312);
      if (v19 == 1)
      {
        uint64_t v21 = *(void *)(v0 + 288);
        _OWORD *v20 = xmmword_101180360;
        UnknownStorage.init()();
        sub_100522F00(v21, (uint64_t *)&unk_101674160);
      }
      else
      {
        sub_1005CC5B8(*(void *)(v0 + 288), (uint64_t)v20);
      }
      unint64_t v22 = *(uint64_t **)(v0 + 312);
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      sub_100510D4C(*v22, v24);
      sub_1009B08F8((uint64_t)v22, type metadata accessor for CRLProto_Data);
      UUID.init(crl_data:)(v23, v24);
      if (v6) {
        break;
      }
      if (*(void *)(*(void *)(v0 + 456) + 16) && (unint64_t v25 = sub_100955FC8(*(void *)(v0 + 336)), (v26 & 1) != 0))
      {
        uint64_t v27 = *(void *)(v0 + 264);
        uint64_t v28 = *(void *)(v0 + 272);
        uint64_t v29 = *(void *)(v0 + 256);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))(v29, *(void *)(*(void *)(v0 + 456) + 56) + *(void *)(v28 + 72) * v25, v27);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) != 1)
        {
          CGFloat v48 = *(uint64_t **)(v0 + 360);
          uint64_t v49 = *(void **)(v0 + 248);
          (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 256), *(void *)(v0 + 264));
          uint64_t v50 = v49[7];
          uint64_t v51 = v49[8];
          sub_10050F848(v49 + 4, v50);
          uint64_t v52 = UUID.uuidString.getter();
          uint64_t v54 = v53;
          uint64_t v55 = *v48;
          uint64_t v56 = v48[1];
          uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 24);
          swift_bridgeObjectRetain();
          uint64_t v58 = v57(v52, v54, v55, v56, v50, v51);
          *(void *)(v0 + 496) = v58;
          uint64_t v59 = (void *)v58;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v60 = objc_allocWithZone((Class)CRLFileIOChannel);
          URL._bridgeToObjectiveC()(v61);
          uint64_t v63 = v62;
          *(void *)(v0 + 240) = 0;
          id v64 = [v60 initForReadingURL:v62 error:v0 + 240];
          *(void *)(v0 + 504) = v64;

          id v65 = *(void **)(v0 + 240);
          if (v64)
          {
            uint64_t ObjectType = swift_getObjectType();
            id v67 = v65;
            id v68 = v64;
            id v69 = (void *)swift_task_alloc();
            *(void *)(v0 + 512) = v69;
            *id v69 = v0;
            v69[1] = sub_1009AEFF8;
            return sub_10077A6D0((uint64_t)v68, ObjectType);
          }
          uint64_t v44 = *(void *)(v0 + 376);
          uint64_t v45 = *(void **)(v0 + 384);
          uint64_t v77 = *(void *)(v0 + 360);
          uint64_t v70 = *(void *)(v0 + 328);
          uint64_t v76 = *(void *)(v0 + 336);
          uint64_t v75 = *(void *)(v0 + 320);
          uint64_t v71 = *(void *)(v0 + 272);
          uint64_t v74 = *(void *)(v0 + 280);
          uint64_t v73 = *(void *)(v0 + 264);
          id v72 = v65;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          [v59 close];
          swift_release();
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v74, v73);
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v76, v75);
          sub_1009B08F8(v77, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
LABEL_17:
          sub_1009B08F8(v44, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
          [v45 close];
          swift_unknownObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 272) + 56))(*(void *)(v0 + 256), 1, 1, *(void *)(v0 + 264));
      }
      sub_100522F00(*(void *)(v0 + 256), &qword_101672E90);
      if (qword_10166FA18 != -1) {
        swift_once();
      }
      uint64_t v30 = *(uint64_t **)(v0 + 360);
      swift_beginAccess();
      id v31 = (void *)static OS_os_log.crlSerializableObject;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
      id v33 = v31;
      uint64_t v34 = UUID.uuidString.getter();
      uint64_t v36 = v35;
      *(void *)(inited + 56) = &type metadata for String;
      unint64_t v37 = sub_100528BE4();
      *(void *)(inited + 64) = v37;
      *(void *)(inited + 32) = v34;
      *(void *)(inited + 40) = v36;
      uint64_t v39 = *v30;
      uint64_t v38 = v30[1];
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 104) = v37;
      *(void *)(inited + 72) = v39;
      *(void *)(inited + 80) = v38;
      swift_bridgeObjectRetain();
      uint64_t v40 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v33, (uint64_t)&_mh_execute_header, v40, (uint64_t)"Skipping writing asset without backing file URL. assetID=%@, assetFilename=%@", 77, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v41 = *(void *)(v0 + 472);
      uint64_t v42 = *(void *)(v0 + 360);
      uint64_t v43 = *(void *)(v0 + 488) + 1;
      (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
      sub_1009B08F8(v42, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
      uint64_t v6 = 0;
      if (v43 == v41) {
        goto LABEL_2;
      }
    }
    uint64_t v44 = *(void *)(v0 + 376);
    uint64_t v45 = *(void **)(v0 + 384);
    uint64_t v46 = *(void *)(v0 + 360);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1009B08F8(v46, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_2:
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1009B08F8(v10, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
  [*(id *)(v0 + 384) close];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
  return v11();
}

uint64_t sub_1009AFAB4()
{
  uint64_t v1 = *(void **)(v0 + 384);
  swift_release();
  [v1 close];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1009AFBC4()
{
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void **)(v0 + 384);
  [*(id *)(v0 + 432) close];
  swift_unknownObjectRelease();
  swift_release();
  sub_1009B08F8(v2, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
  [v1 close];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1009AFD0C()
{
  uint64_t v2 = (void *)v0[62];
  uint64_t v1 = (void *)v0[63];
  uint64_t v3 = (void *)v0[48];
  uint64_t v12 = v0[45];
  uint64_t v13 = v0[47];
  uint64_t v4 = v0[41];
  uint64_t v10 = v0[40];
  uint64_t v11 = v0[42];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[33];
  [v1 close];

  [v2 close];
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v10);
  sub_1009B08F8(v12, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
  sub_1009B08F8(v13, (uint64_t (*)(void))type metadata accessor for CRLArchivedObjectMetadataRepresentation);
  [v3 close];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1009AFED0(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1009AFF60, 0, 0);
}

uint64_t sub_1009AFF60()
{
  type metadata accessor for CRLProto_ObjectMetadata(0);
  sub_1009B0958();
  uint64_t v1 = Message.serializedData(partial:)();
  v0[5] = v1;
  v0[6] = v2;
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(v1) - v1;
      if (__OFSUB__(HIDWORD(v1), v1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_9:
      if (v3 < 0) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
LABEL_3:
      v0[2] = v3;
      uint64_t v4 = sub_1009B6AEC((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
      uint64_t v6 = v5;
      v0[7] = v4;
      v0[8] = v5;
      uint64_t ObjectType = swift_getObjectType();
      v0[9] = ObjectType;
      uint64_t v8 = (void *)swift_task_alloc();
      v0[10] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_1009B01CC;
      return sub_1007794E8(v4, v6, ObjectType);
    case 2uLL:
      uint64_t v11 = *(void *)(v1 + 16);
      uint64_t v10 = *(void *)(v1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v3 = v10 - v11;
      if (!v12) {
        goto LABEL_9;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_3;
    default:
      uint64_t v3 = BYTE6(v2);
      goto LABEL_3;
  }
}

uint64_t sub_1009B01CC()
{
  unint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1009B057C, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[12] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1009B0394;
    uint64_t v4 = v2[9];
    uint64_t v5 = v2[6];
    uint64_t v6 = v2[5];
    return sub_1007794E8(v6, v5, v4);
  }
}

uint64_t sub_1009B0394()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1009B0624;
  }
  else {
    unint64_t v2 = sub_1009B04D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009B04D4()
{
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  sub_100510084(v0[7], v0[8]);
  sub_100510084(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009B057C()
{
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  sub_100510084(v0[7], v0[8]);
  sub_100510084(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009B0624()
{
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[6];
  sub_100510084(v0[7], v0[8]);
  sub_100510084(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1009B06CC()
{
  swift_unknownObjectRelease();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v0 + 32);

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLSerializableObjectWriteCoordinator()
{
  return self;
}

id sub_1009B0748(uint64_t a1)
{
  unint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = [v2 initForReadingURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t sub_1009B0894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLProto_ObjectMetadata.AssetInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009B08F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1009B0958()
{
  unint64_t result = qword_101689D88;
  if (!qword_101689D88)
  {
    type metadata accessor for CRLProto_ObjectMetadata(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689D88);
  }
  return result;
}

void sub_1009B09EC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v5 = v3;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v9 = [a1 getBoardItemForUUID:isa];

  if (!v9) {
    goto LABEL_7;
  }
  type metadata accessor for CRLWPStickyNoteItem();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {

LABEL_7:
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetStickyPreset.swift", 97, 2, 26, (uint64_t)"Unable to retrieve sticky note board item.", 42, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unable to retrieve sticky note board item.");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetStickyPreset.swift", 97, 2, 26);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v14, v15);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v11 = v10;
  id v12 = v9;
  sub_10103405C(v11, (uint64_t)&off_101518040);

  if (v4)
  {
  }
  else
  {
    sub_100F9B78C(*(unsigned char *)(v5 + OBJC_IVAR____TtC8Freeform25CRLCommandSetStickyPreset_preset));
    id v13 = v12;
    sub_101023724(v11, (uint64_t)&off_101518040, a3);
  }
}

uint64_t sub_1009B0C18()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform25CRLCommandSetStickyPreset_id;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_1009B0C84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandSetStickyPreset();
  return [super dealloc];
}

uint64_t sub_1009B0D28()
{
  return type metadata accessor for CRLCommandSetStickyPreset();
}

uint64_t type metadata accessor for CRLCommandSetStickyPreset()
{
  uint64_t result = qword_101689DB8;
  if (!qword_101689DB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009B0D7C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for CRLRectData(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLRectData()
{
  return &type metadata for CRLRectData;
}

ValueMetadata *type metadata accessor for CRLSizeData()
{
  return &type metadata for CRLSizeData;
}

ValueMetadata *type metadata accessor for CRLPointData()
{
  return &type metadata for CRLPointData;
}

unint64_t sub_1009B0E54()
{
  unint64_t result = qword_101689DC8;
  if (!qword_101689DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DC8);
  }
  return result;
}

uint64_t sub_1009B0EA8@<X0>(float *a1@<X8>)
{
  return sub_1009B1488((uint64_t (*)(void, __n128))type metadata accessor for CRLProto_Point, &qword_101689E10, (void (*)(uint64_t))type metadata accessor for CRLProto_Point, a1);
}

uint64_t sub_1009B0F04(uint64_t a1)
{
  return sub_1009B1100(*v1, v1[1], a1, type metadata accessor for CRLProto_Point, &qword_101689E10, (void (*)(uint64_t))type metadata accessor for CRLProto_Point);
}

void sub_1009B0F68(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1009B0FC4(void *a1)
{
  return sub_1009B1240(a1, type metadata accessor for CRLProto_Point, &qword_101689E10, (void (*)(uint64_t))type metadata accessor for CRLProto_Point, *v1, v1[1]);
}

uint64_t sub_1009B1024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1009B17DC(a1, a2, a3, a4, (uint64_t (*)(void))sub_1009B2714, (uint64_t (*)(void))sub_1009B2768);
}

unint64_t sub_1009B1054()
{
  unint64_t result = qword_101689DD0;
  if (!qword_101689DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DD0);
  }
  return result;
}

unint64_t sub_1009B10AC()
{
  unint64_t result = qword_101689DD8;
  if (!qword_101689DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DD8);
  }
  return result;
}

uint64_t sub_1009B1100(float a1, float a2, uint64_t a3, uint64_t (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v11 = a4(0);
  __chkstk_darwin(v11, v12);
  CKRecordID v14 = (float *)((char *)&v19 - v13);
  UnknownStorage.init()();
  *CKRecordID v14 = a1;
  v14[1] = a2;
  sub_1009B2508(a5, a6);
  uint64_t v15 = Message.serializedData(partial:)();
  unint64_t v17 = v16;
  uint64_t result = sub_1009B25B8((uint64_t)v14, (uint64_t (*)(void))a6);
  if (!v6)
  {
    dispatch thunk of CREncoder.valueContainer()();
    dispatch thunk of CREncoder.CRValueContainer.encode(_:)();
    swift_release();
    return sub_100510084(v15, v17);
  }
  return result;
}

uint64_t sub_1009B1240(void *a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), float a5, float a6)
{
  uint64_t v12 = a2(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (float *)((char *)v20 - v14);
  UnknownStorage.init()();
  float *v15 = a5;
  v15[1] = a6;
  sub_1009B2508(a3, a4);
  uint64_t v16 = Message.serializedData(partial:)();
  unint64_t v18 = v17;
  uint64_t result = sub_1009B25B8((uint64_t)v15, (uint64_t (*)(void))a4);
  if (!v6)
  {
    sub_10050F848(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    v20[1] = v16;
    _OWORD v20[2] = v18;
    sub_1005231B4((uint64_t)v21, v22);
    sub_10060D344();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    sub_100510084(v16, v18);
    return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v21);
  }
  return result;
}

Swift::Int sub_1009B13BC(float a1, float a2)
{
  Hasher.init(_seed:)();
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = LODWORD(a1);
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = LODWORD(a2);
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1009B142C@<X0>(float *a1@<X8>)
{
  return sub_1009B1488((uint64_t (*)(void, __n128))type metadata accessor for CRLProto_Size, &qword_101689E08, (void (*)(uint64_t))type metadata accessor for CRLProto_Size, a1);
}

uint64_t sub_1009B1488@<X0>(uint64_t (*a1)(void, __n128)@<X3>, unint64_t *a2@<X4>, void (*a3)(uint64_t)@<X5>, float *a4@<X8>)
{
  dispatch thunk of CRDecoder.valueContainer()();
  if (v4) {
    return swift_release();
  }
  uint64_t v15 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  unint64_t v10 = v9;
  swift_release();
  float v11 = sub_1009B1EE0(v15, v10, a1, a2, a3);
  int v13 = v12;
  sub_100510084(v15, v10);
  uint64_t result = swift_release();
  *a4 = v11;
  *((_DWORD *)a4 + 1) = v13;
  return result;
}

uint64_t sub_1009B157C(uint64_t a1)
{
  return sub_1009B1100(*v1, v1[1], a1, type metadata accessor for CRLProto_Size, &qword_101689E08, (void (*)(uint64_t))type metadata accessor for CRLProto_Size);
}

void sub_1009B15DC(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1009B1638(void *a1@<X0>, uint64_t (*a2)(void, __n128)@<X3>, unint64_t *a3@<X4>, void (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  float v7 = sub_1009B2098(a1, a2, a3, a4);
  if (!v5)
  {
    *(float *)a5 = v7;
    *(_DWORD *)(a5 + 4) = v8;
  }
}

uint64_t sub_1009B1674(void *a1)
{
  return sub_1009B1240(a1, type metadata accessor for CRLProto_Size, &qword_101689E08, (void (*)(uint64_t))type metadata accessor for CRLProto_Size, *v1, v1[1]);
}

BOOL sub_1009B16D4(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int sub_1009B1700()
{
  return sub_1009B13BC(*v0, v0[1]);
}

void sub_1009B1708()
{
  Swift::UInt32 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *v0;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1009B1750()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v2;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1009B17B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1009B17DC(a1, a2, a3, a4, (uint64_t (*)(void))sub_1009B26C0, (uint64_t (*)(void))sub_1009B1864);
}

uint64_t sub_1009B17DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a5();
  uint64_t v11 = a6();

  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v10, v11);
}

unint64_t sub_1009B1864()
{
  unint64_t result = qword_101689DE0;
  if (!qword_101689DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DE0);
  }
  return result;
}

unint64_t sub_1009B18BC()
{
  unint64_t result = qword_101689DE8;
  if (!qword_101689DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DE8);
  }
  return result;
}

unint64_t sub_1009B1914()
{
  unint64_t result = qword_101689DF0;
  if (!qword_101689DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101689DF0);
  }
  return result;
}

uint64_t sub_1009B1968(float a1, float a2, float a3, float a4)
{
  uint64_t v9 = type metadata accessor for CRLProto_Rect(0);
  __chkstk_darwin(v9, v10);
  int v12 = (float *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()();
  *int v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  v12[3] = a4;
  sub_1009B2508(&qword_101689E00, (void (*)(uint64_t))type metadata accessor for CRLProto_Rect);
  uint64_t v13 = Message.serializedData(partial:)();
  unint64_t v15 = v14;
  uint64_t result = sub_1009B25B8((uint64_t)v12, type metadata accessor for CRLProto_Rect);
  if (!v4)
  {
    dispatch thunk of CREncoder.valueContainer()();
    dispatch thunk of CREncoder.CRValueContainer.encode(_:)();
    swift_release();
    return sub_100510084(v13, v15);
  }
  return result;
}