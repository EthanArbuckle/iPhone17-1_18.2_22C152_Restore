void sub_100004248(uint64_t a1)
{
  int64_t v2;
  void *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  CGPoint v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  float64x2_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v42;
  double *v43;
  double v44;
  float64x2_t *v45;
  double v46;
  double v47;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  v3 = (void *)(a1 + 80);
  sub_10000453C(a1 + 80, v2);
  v4 = *(double *)(a1 + 104) * 0.5;
  if (v4 == 0.0)
  {
    v5 = *(void *)(a1 + 72);
    v6 = v2 - v5;
    if (v2 > v5)
    {
      v7 = 88 * v5;
      do
      {
        v8 = *(void *)(a1 + 48) + v7;
        v9 = *(void *)(a1 + 80) + v7;
        v11 = *(_OWORD *)(v8 + 48);
        v10 = *(_OWORD *)(v8 + 64);
        v12 = *(_OWORD *)(v8 + 32);
        *(void *)(v9 + 80) = *(void *)(v8 + 80);
        *(_OWORD *)(v9 + 48) = v11;
        *(_OWORD *)(v9 + 64) = v10;
        *(_OWORD *)(v9 + 32) = v12;
        v13 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = v13;
        v7 += 88;
        --v6;
      }
      while (v6);
    }
    *(void *)(a1 + 72) = *(void *)(a1 + 32);
  }
  else
  {
    v14 = *(void *)(a1 + 72);
    if (v14 >= v2)
    {
      v21 = *(void *)(a1 + 72);
    }
    else
    {
      v15 = dbl_101174CB0[*(void *)(a1 + 112) == 1];
      v16 = v4 / v15;
      v17 = vcvtpd_s64_f64(v16);
      v18 = v15 * (double)(uint64_t)ceil(v16);
      v19 = (2 * v17) | 1;
      if (v19 <= 1) {
        v19 = 1;
      }
      v20 = *(void *)(a1 + 48);
      v21 = *(void *)(a1 + 72);
      do
      {
        v22 = v20 + 88 * v14;
        v23 = *(void *)(a1 + 80) + 88 * v14;
        v24 = *(_OWORD *)(v22 + 16);
        *(_OWORD *)v23 = *(_OWORD *)v22;
        *(_OWORD *)(v23 + 16) = v24;
        v25 = *(_OWORD *)(v22 + 32);
        v26 = *(_OWORD *)(v22 + 48);
        v27 = *(_OWORD *)(v22 + 64);
        *(void *)(v23 + 80) = *(void *)(v22 + 80);
        *(_OWORD *)(v23 + 48) = v26;
        *(_OWORD *)(v23 + 64) = v27;
        *(_OWORD *)(v23 + 32) = v25;
        v20 = *(void *)(a1 + 48);
        v28 = *(void *)(a1 + 72) - 1;
        if ((v17 & 0x8000000000000000) == 0)
        {
          v29 = 0;
          v30 = CGPointZero;
          v31 = v20 + 88 * v14;
          v33 = *(double *)(v31 + 48);
          v32 = (double *)(v31 + 48);
          v34 = v33;
          v35 = v33 - v18;
          v36 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 56) - v20) >> 3) - 1;
          v37 = 0.0;
          do
          {
            if (v34 == v35)
            {
              if (v28 <= v14) {
                v28 = v14;
              }
              v38 = *(float64x2_t *)(v20 + 88 * v14);
            }
            else
            {
              v39 = v32;
              v40 = v14;
              if (v14 >= 1)
              {
                while (*v39 > v35)
                {
                  v39 -= 11;
                  if (v40-- <= 1)
                  {
                    v40 = 0;
                    break;
                  }
                }
              }
              if (v40 <= v36) {
                v42 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 56) - v20) >> 3) - 1;
              }
              else {
                v42 = v40;
              }
              v43 = (double *)(v20 + 136 + 88 * v40);
              while (v42 != v40)
              {
                ++v40;
                v44 = *v43;
                v43 += 11;
                if (v44 >= v35)
                {
                  v42 = v40 - 1;
                  break;
                }
              }
              v45 = (float64x2_t *)(v20 + 88 * v42);
              v46 = v45[3].f64[0];
              if (v28 <= v42) {
                v28 = v42;
              }
              if (v46 <= v35)
              {
                v38 = *v45;
                if (v42 != v36)
                {
                  v47 = *(double *)(v20 + 88 * (v42 + 1) + 48) - v46;
                  if (v28 <= v42 + 1) {
                    v28 = v42 + 1;
                  }
                  if (v47 != 0.0) {
                    v38 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v20 + 88 * (v42 + 1)), v38), (v35 - v46) / v47));
                  }
                }
              }
              else
              {
                v38 = *v45;
              }
            }
            v35 = v15 + v35;
            v30 = (CGPoint)vaddq_f64((float64x2_t)v30, v38);
            v37 = v37 + 1.0;
            ++v29;
          }
          while (v29 != v19);
          if (v37 > 0.0) {
            *(float64x2_t *)(*v3 + 88 * v14) = vmulq_n_f64((float64x2_t)v30, 1.0 / v37);
          }
        }
        if (*(unsigned char *)(a1 + 16) || v28 < *(_DWORD *)(a1 + 32) - 1) {
          v21 = ++v14;
        }
        else {
          ++v14;
        }
      }
      while (v14 != v2);
    }
    *(void *)(a1 + 72) = v21;
  }
}

void sub_10000453C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100004C6C((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 88 * a2;
  }
}

uint64_t sub_100004580(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 120));
  *(void *)a1 = off_1014CAB60;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014CABC8;
  BOOL v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100004604(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 120));
  *(void *)a1 = off_1014CAB60;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014CABC8;
  BOOL v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }

  operator delete();
}

void sub_1000046A8(void *a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t v6 = a1[1];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v6 + 16))(v6, a2, a3);
  }
  a1[3] = v3;
  a1[14] = a2;
  uint64_t v7 = objc_opt_class();
  v8 = +[NSUserDefaults standardUserDefaults];
  v9 = [v8 objectForKey:@"internalSettings.pathSmoothing.timeInterval"];
  sub_1002469D0(v7, v9);
  id v12 = (id)objc_claimAutoreleasedReturnValue();

  v10 = v12;
  if (v12)
  {
    [v12 doubleValue];
    a1[13] = v11;
    v10 = v12;
  }
}

void sub_1000047A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000047C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_10000481C()
{
}

uint64_t sub_1000048A4(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 56))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  sub_100004F68(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v6 + 8) - (*(void *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

void *sub_100004958(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_1000049E8(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_10000453C(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

uint64_t sub_100004A80(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_100004A88()
{
  return 0;
}

void *sub_100004A90(void *a1)
{
  *a1 = off_1014CAB60;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014CABC8;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100004B0C(void *a1)
{
  *a1 = off_1014CAB60;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014CABC8;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_100004BA8(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_100004C0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_100004C6C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 88 * ((88 * a2 - 88) / 0x58) + 88;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL) {
      sub_100004E40();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      id v12 = (char *)sub_100004EE8(v4, v11);
    }
    else {
      id v12 = 0;
    }
    v14 = &v12[88 * v8];
    v15 = &v12[88 * v11];
    size_t v16 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v20;
        long long v21 = *(_OWORD *)(v18 - 56);
        long long v22 = *(_OWORD *)(v18 - 40);
        long long v23 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v23;
        *(_OWORD *)(v14 - 40) = v22;
        *(_OWORD *)(v14 - 56) = v21;
        v14 -= 88;
        v18 -= 88;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_100004E40()
{
}

void sub_100004E58(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100004EB4(exception, a1);
}

void sub_100004EA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100004EB4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_100004EE8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_100004F34();
  }
  return operator new(88 * a2);
}

void sub_100004F34()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

char *sub_100004F68(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) < a5)
  {
    size_t v13 = *(void **)a1;
    unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x2E8BA2E8BA2E8BALL) {
      sub_100004E40();
    }
    uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x1745D1745D1745DLL) {
      unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v43 = v9;
    if (v18) {
      v19 = (char *)sub_100004EE8(v9, v18);
    }
    else {
      v19 = 0;
    }
    v31 = &v19[88 * v15];
    __p = v19;
    v40 = v31;
    v42 = &v19[88 * v18];
    uint64_t v32 = 88 * a5;
    v33 = &v31[88 * a5];
    do
    {
      long long v34 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v7;
      *((_OWORD *)v31 + 1) = v34;
      long long v35 = *((_OWORD *)v7 + 2);
      long long v36 = *((_OWORD *)v7 + 3);
      long long v37 = *((_OWORD *)v7 + 4);
      *((void *)v31 + 10) = *((void *)v7 + 10);
      *((_OWORD *)v31 + 3) = v36;
      *((_OWORD *)v31 + 4) = v37;
      *((_OWORD *)v31 + 2) = v35;
      v31 += 88;
      v7 += 88;
      v32 -= 88;
    }
    while (v32);
    v41 = v33;
    v5 = (char *)sub_100005264((void **)a1, (uint64_t)&__p, v5);
    if (v41 != v40) {
      v41 = &v40[(v41 - v40 - 88) % 0x58uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - __dst) >> 3) >= a5)
  {
    long long v21 = &__src[88 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[88 * a5];
    v25 = &v23[-88 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        long long v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v25;
        *((_OWORD *)v26 + 1) = v27;
        long long v28 = *((_OWORD *)v25 + 2);
        long long v29 = *((_OWORD *)v25 + 3);
        long long v30 = *((_OWORD *)v25 + 4);
        *((void *)v26 + 10) = *((void *)v25 + 10);
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 88;
        v26 += 88;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[88 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100005210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100005264(void **a1, uint64_t a2, char *__src)
{
  v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      long long v11 = *(_OWORD *)(v8 - 56);
      long long v12 = *(_OWORD *)(v8 - 40);
      long long v13 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 88);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v13;
      *(_OWORD *)(v9 - 40) = v12;
      *(_OWORD *)(v9 - 56) = v11;
      v8 -= 88;
      v9 -= 88;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v14 = a1[1];
  uint64_t v15 = *(void *)(a2 + 16);
  int64_t v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v14 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v15 + v16;
  uint64_t v17 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v17;
  unint64_t v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v18;
  v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v19;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_100005500(id a1)
{
  uint64_t v1 = +[NSSet setWithArray:&off_10155C158];
  unint64_t v2 = (void *)qword_1016A8D50;
  qword_1016A8D50 = v1;
}

void sub_10000559C(id a1)
{
  v23[0] = @"SimSun";
  int64_t v22 = +[NSBundle mainBundle];
  long long v21 = [v22 localizedStringForKey:@"SimSun" value:0 table:0];
  v24[0] = v21;
  v23[1] = @"NSimSun";
  uint64_t v20 = +[NSBundle mainBundle];
  v19 = [v20 localizedStringForKey:@"NSimSun" value:0 table:0];
  v24[1] = v19;
  v23[2] = @"STZhongsong";
  unint64_t v18 = +[NSBundle mainBundle];
  uint64_t v17 = [v18 localizedStringForKey:@"STZhongsong" value:0 table:0];
  v24[2] = v17;
  v23[3] = @"FangSong";
  int64_t v16 = +[NSBundle mainBundle];
  uint64_t v15 = [v16 localizedStringForKey:@"FangSong" value:0 table:0];
  v24[3] = v15;
  v23[4] = @"Calibri";
  unint64_t v14 = +[NSBundle mainBundle];
  long long v13 = [v14 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[4] = v13;
  v23[5] = @"Calibri-Bold";
  uint64_t v1 = +[NSBundle mainBundle];
  unint64_t v2 = [v1 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[5] = v2;
  v23[6] = @"Calibri-Italic";
  unint64_t v3 = +[NSBundle mainBundle];
  uint64_t v4 = [v3 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[6] = v4;
  v23[7] = @"Calibri-BoldItalic";
  v5 = +[NSBundle mainBundle];
  uint64_t v6 = [v5 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[7] = v6;
  v23[8] = @"Calibri-Light";
  uint64_t v7 = +[NSBundle mainBundle];
  uint64_t v8 = [v7 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[8] = v8;
  v23[9] = @"Calibri-LightItalic";
  uint64_t v9 = +[NSBundle mainBundle];
  long long v10 = [v9 localizedStringForKey:@"Calibri" value:0 table:0];
  v24[9] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:10];
  long long v12 = (void *)qword_1016A8D60;
  qword_1016A8D60 = v11;
}

void sub_100005E80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100005EC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006A8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006AD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006B14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006B58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006B9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100006BE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100007220(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007448(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000769C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007FA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100007FE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000823C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100008280(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000086B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100008C60(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_100008CA4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

uint64_t sub_100008CCC()
{
  return v0;
}

void sub_100008CEC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Cu);
}

void sub_100009458(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = *(void (**)(uint64_t, void))(v1 + 16);
    uint64_t v3 = *(void *)(a1 + 40);
    v2(v3, 0);
  }
  else
  {
    +[NSError crl_fileReadUnknownErrorWithUserInfo:](NSError, "crl_fileReadUnknownErrorWithUserInfo:");
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v4);
  }
}

void sub_100009720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009748(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100009758(uint64_t a1)
{
}

void sub_100009760(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000099F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100009A38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100009E5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100009EA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100009EE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  unint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100009F28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  unint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_10000A298(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addEntry:a2];
}

void sub_10000A2A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000A2E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000A570(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  unint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10000A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000A814(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 64))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    id v3 = *(id *)(v2 + 56);
    if (!v3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CAF90);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010661D4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CAFB0);
      }
      id v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101066114(v5);
      }
      id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipFileArchive copyToTemporaryLocationRelativeToURL:error:]_block_invoke");
      uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipFileArchive.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:323 isFatal:0 description:"File should be opened."];
    }
    [*(id *)(a1 + 32) createTemporaryDirectoryRelativeToURL:*(void *)(a1 + 40)];
    uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 64) URLByAppendingPathComponent:@"Temp.zip"];
    if (v8)
    {
      uint64_t v9 = [CRLFileIOChannel alloc];
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
      id obj = *(id *)(v10 + 40);
      id v11 = [(CRLFileIOChannel *)v9 initForStreamWritingURL:v8 error:&obj];
      objc_storeStrong((id *)(v10 + 40), obj);
    }
    else
    {
      id v11 = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v11 != 0;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      uint64_t v35 = 0;
      long long v36 = &v35;
      uint64_t v37 = 0x3032000000;
      v38 = sub_100009748;
      v39 = sub_100009758;
      id v40 = 0;
      id v12 = dispatch_group_create();
      dispatch_group_enter(v12);
      long long v13 = [v3 readChannel];
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10000AE88;
      v31[3] = &unk_1014CB000;
      long long v34 = &v35;
      unint64_t v14 = v12;
      uint64_t v32 = v14;
      id v15 = v11;
      id v33 = v15;
      [v13 readFromOffset:0 length:-1 handler:v31];

      dispatch_group_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
      [v15 close];

      int64_t v16 = v36;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v36[5] == 0;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (id)v16[5]);
        if (qword_101719A68 != -1) {
          dispatch_once(&qword_101719A68, &stru_1014CB020);
        }
        uint64_t v17 = off_10166B498;
        if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
        {
          long long v23 = [*(id *)(a1 + 40) path];
          v24 = [v8 path];
          v25 = (objc_class *)objc_opt_class();
          NSStringFromClass(v25);
          id v26 = (id)objc_claimAutoreleasedReturnValue();
          id v27 = [(id)v36[5] domain];
          id v28 = [(id)v36[5] code];
          uint64_t v29 = v36[5];
          *(_DWORD *)buf = 138413570;
          uint64_t v43 = v23;
          __int16 v44 = 2112;
          v45 = v24;
          __int16 v46 = 2114;
          id v47 = v26;
          __int16 v48 = 2114;
          id v49 = v27;
          __int16 v50 = 2048;
          id v51 = v28;
          __int16 v52 = 2112;
          uint64_t v53 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v17, OS_LOG_TYPE_ERROR, "Failed to copy zip file from %@ to %@. errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", buf, 0x3Eu);
        }
      }

      _Block_object_dispose(&v35, 8);
      id v11 = 0;
    }
    else
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014CB040);
      }
      unint64_t v18 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10106607C(v18, v8);
      }
    }
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    if (*(unsigned char *)(v19 + 24))
    {
      uint64_t v20 = *(void **)(a1 + 32);
      uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
      id v30 = *(id *)(v21 + 40);
      unsigned __int8 v22 = [v20 reopenWithTemporaryURL:v8 error:&v30];
      objc_storeStrong((id *)(v21 + 40), v30);
      uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      unsigned __int8 v22 = 0;
    }
    *(unsigned char *)(v19 + 24) = v22;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      [*(id *)(a1 + 32) removeTemporaryDirectory];
    }

    [v3 waitForAccessToEnd];
  }
}

void sub_10000ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000AE00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000AE44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000AE88(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  unint64_t v8 = a4;
  uint64_t v9 = (void *)v8;
  if (v7 && !(v8 | *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000AF98;
    v14[3] = &unk_1014CAFD8;
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    id v15 = *(id *)(a1 + 32);
    [v10 writeData:v7 handler:v14];
  }
  if (a2)
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v13 = *(void *)(v11 + 40);
      id v12 = (id *)(v11 + 40);
      if (!v13) {
        objc_storeStrong(v12, a4);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_10000AF98(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a2)
  {
    id v11 = v7;
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v10 = *(void *)(v8 + 40);
      uint64_t v9 = (id *)(v8 + 40);
      if (!v10) {
        objc_storeStrong(v9, a4);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    id v7 = v11;
  }
}

void sub_10000B014(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10000B058(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_10000B150(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 48);
  return result;
}

void sub_10000B254(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 56);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = dup((int)[v2 fileDescriptor]);
    if ((v4 & 0x80000000) != 0)
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014CB0F8);
      }
      id v12 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_101066328(v12);
      }
    }
    else
    {
      uint64_t v5 = v4;
      if (([*(id *)(a1 + 32) options] & 0x10) != 0 && fcntl(v5, 48, 1) == -1)
      {
        if (qword_101719A68 != -1) {
          dispatch_once(&qword_101719A68, &stru_1014CB0B0);
        }
        id v6 = off_10166B498;
        if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
          sub_1010662A0(v6);
        }
      }
      [v3 beginAccess];
      id v7 = [CRLFileIOChannel alloc];
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10000B4B8;
      v13[3] = &unk_1014CB0D8;
      int v15 = v5;
      id v14 = v3;
      id v8 = [(CRLFileIOChannel *)v7 initForReadingDescriptor:v5 cleanupHandler:v13];
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CB118);
    }
    id v11 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106625C(v11);
    }
  }
}

void sub_10000B474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_10000B4B8(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 40));
  id v2 = *(void **)(a1 + 32);

  return _[v2 endAccess];
}

void sub_10000B4F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10000B538(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

ssize_t sub_10000B630(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (v2) {
    ssize_t result = (ssize_t)[v2 fileDescriptor];
  }
  else {
    ssize_t result = 0xFFFFFFFFLL;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (int)result >= 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    char v4 = 0;
    ssize_t result = read(result, &v4, 0);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result == 0;
  }
  return result;
}

void sub_10000BA74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000BAB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10000BC00(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_10000BCC4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000BCF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void sub_10000C120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C190(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000C1D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000C218(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000C25C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPLayoutManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10000C318(void *a1)
{
}

void sub_10000C3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10000CB90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000CBD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000CC18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000CC5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10000D80C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000D850(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000D894(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000D8D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000DA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DBFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000DC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DDE0()
{
  operator delete();
}

uint64_t sub_10000DF10(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(void *)(a2 + 10) = result;
  return result;
}

void sub_10000DF28(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_10000E22C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000E270(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000E798(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000E7DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000EAA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000EAE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000ED04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000ED48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000F9A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10000F9E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10000FA28(id a1, NSValue *a2)
{
  [(NSValue *)a2 rangeValue];
  return v2 > 1;
}

uint64_t sub_10000FC28()
{
  if (qword_1016A8D90 != -1) {
    dispatch_once(&qword_1016A8D90, &stru_1014CB4C0);
  }
  return qword_1016A8D88;
}

void sub_10000FC6C(id a1)
{
  qword_1016A8D88 = (uint64_t)CGColorSpaceCreateDeviceRGB();
}

uint64_t sub_10000FC8C()
{
  if (qword_1016A8DA0 != -1) {
    dispatch_once(&qword_1016A8DA0, &stru_1014CB4E0);
  }
  return qword_1016A8D98;
}

void sub_10000FCD0(id a1)
{
  qword_1016A8D98 = (uint64_t)CGColorSpaceCreateDeviceCMYK();
}

uint64_t sub_10000FCF0()
{
  if (qword_1016A8DB0 != -1) {
    dispatch_once(&qword_1016A8DB0, &stru_1014CB500);
  }
  return qword_1016A8DA8;
}

void sub_10000FD34(id a1)
{
  qword_1016A8DA8 = (uint64_t)CGColorSpaceCreateDeviceGray();
}

uint64_t sub_10000FD54()
{
  if (qword_1016A8DC0 != -1) {
    dispatch_once(&qword_1016A8DC0, &stru_1014CB520);
  }
  return qword_1016A8DB8;
}

void sub_10000FD98(id a1)
{
  qword_1016A8DB8 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!qword_1016A8DB8) {
    qword_1016A8DB8 = (uint64_t)CGColorSpaceCreateDeviceRGB();
  }
}

uint64_t sub_10000FDD8()
{
  if (qword_1016A8DD0 != -1) {
    dispatch_once(&qword_1016A8DD0, &stru_1014CB540);
  }
  return qword_1016A8DC8;
}

void sub_10000FE1C(id a1)
{
  qword_1016A8DC8 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  if (!qword_1016A8DC8) {
    qword_1016A8DC8 = (uint64_t)CGColorSpaceCreateDeviceRGB();
  }
}

CGColorRef sub_10000FE5C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (qword_1016A8D90 != -1) {
    dispatch_once(&qword_1016A8D90, &stru_1014CB4C0);
  }
  return CGColorCreate((CGColorSpaceRef)qword_1016A8D88, components);
}

CGColorRef sub_10000FEE4()
{
  double v0 = sub_100407E74();
  double v1 = sub_100407E74();
  double v2 = sub_100407E74();

  return sub_10000FE5C(v0, v1, v2, 1.0);
}

CGPatternRef sub_10000FF34(CGImageRef image, long long *a2)
{
  if (!image)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB560);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066BB0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB580);
    }
    uint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    uint64_t v5 = +[NSString stringWithUTF8String:"CGPatternRef  _Nonnull CRLCGPatternCreateWithImageAndTransform(CGImageRef _Nonnull, const CGAffineTransform * _Nullable)"];
    id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:224 isFatal:0 description:"can't create an image pattern without an image"];
  }
  CGImageRetain(image);
  CGFloat y = CGPointZero.y;
  size_t Width = CGImageGetWidth(image);
  size_t Height = CGImageGetHeight(image);
  if (a2)
  {
    long long v10 = a2[1];
    long long v15 = *a2;
    long long v16 = v10;
    long long v11 = a2[2];
  }
  else
  {
    long long v12 = *(_OWORD *)&CGAffineTransformIdentity.c;
    long long v15 = *(_OWORD *)&CGAffineTransformIdentity.a;
    long long v16 = v12;
    long long v11 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  }
  long long v17 = v11;
  v18.size.height = (double)Height;
  v18.size.width = (double)Width;
  *(_OWORD *)&v14.a = v15;
  *(_OWORD *)&v14.c = v16;
  *(_OWORD *)&v14.tx = v11;
  v18.origin.x = CGPointZero.x;
  v18.origin.CGFloat y = y;
  return CGPatternCreate(image, v18, &v14, (double)Width, v18.size.height, kCGPatternTilingConstantSpacing, 1, (const CGPatternCallbacks *)&unk_1014CB5A0);
}

void sub_10001012C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100010170(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000101B4(CGImage *a1, CGContext *a2)
{
  CGFloat y = CGPointZero.y;
  double Width = (double)CGImageGetWidth(a1);
  double Height = (double)CGImageGetHeight(a1);
  CGFloat x = CGPointZero.x;
  CGFloat v8 = y;
  double v9 = Width;

  CGContextDrawImage(a2, *(CGRect *)&x, a1);
}

CGColorRef sub_10001022C(CGImage *a1, long long *a2)
{
  double v2 = sub_10000FF34(a1, a2);
  Pattern = CGColorSpaceCreatePattern(0);
  uint64_t v6 = 0x3FF0000000000000;
  CGColorRef v4 = CGColorCreateWithPattern(Pattern, v2, (const CGFloat *)&v6);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v2);
  return v4;
}

CGColorRef sub_1000102C4(CGColorSpace *a1, double a2, double a3, double a4, double a5)
{
  v9[1] = a5;
  sub_100010370(&components, &v8, v9, a2, a3, a4);
  if (!a1)
  {
    if (qword_1016A8D90 != -1) {
      dispatch_once(&qword_1016A8D90, &stru_1014CB4C0);
    }
    a1 = (CGColorSpace *)qword_1016A8D88;
  }
  return CGColorCreate(a1, &components);
}

double *sub_100010370(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6 = a4 * 6.0;
  BOOL v7 = a4 == 1.0;
  double v8 = 0.0;
  if (!v7) {
    double v8 = v6;
  }
  uint64_t v9 = (uint64_t)v8;
  double v10 = v8 - (double)(uint64_t)v8;
  double v11 = (1.0 - a5) * a6;
  double v12 = (1.0 - a5 * v10) * a6;
  double v13 = (1.0 - a5 * (1.0 - v10)) * a6;
  double v14 = a6;
  double v15 = v13;
  switch(v9)
  {
    case 0:
      goto LABEL_10;
    case 1:
      double v14 = v12;
      double v15 = a6;
      goto LABEL_10;
    case 2:
      double v14 = v11;
      double v15 = a6;
      double v11 = v13;
      goto LABEL_10;
    case 3:
      double v14 = v11;
      double v15 = v12;
      goto LABEL_8;
    case 4:
      double v14 = v13;
      double v15 = v11;
LABEL_8:
      double v11 = a6;
      goto LABEL_10;
    case 5:
      double v14 = a6;
      double v15 = v11;
      double v11 = v12;
LABEL_10:
      *ssize_t result = v14;
      *a2 = v15;
      *a3 = v11;
      break;
    default:
      return result;
  }
  return result;
}

double sub_100010450(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4) {
      double v7 = a4;
    }
    else {
      double v7 = a5;
    }
    if (a4 >= a6) {
      double v8 = a6;
    }
    else {
      double v8 = a4;
    }
    BOOL v9 = a5 < a4 || a5 < a6;
    if (v9) {
      double v10 = a6;
    }
    else {
      double v10 = a5;
    }
    if (v9) {
      double v11 = v7;
    }
    else {
      double v11 = v8;
    }
  }
  else
  {
    if (a5 >= a6) {
      double v11 = a6;
    }
    else {
      double v11 = a5;
    }
    double v10 = a4;
  }
  double v12 = 0.0;
  if (v10 <= 0.0)
  {
    double v14 = 0.0;
  }
  else
  {
    double v13 = v10 - v11;
    double v14 = (v10 - v11) / v10;
    if (v14 != 0.0)
    {
      double v15 = (v10 - a5) / v13;
      double v16 = (v10 - a6) / v13;
      if (v10 == a4)
      {
        if (v11 == a5) {
          double v12 = v16 + 5.0;
        }
        else {
          double v12 = 1.0 - v15;
        }
      }
      else
      {
        BOOL v18 = v10 == a5;
        double v19 = (v10 - a4) / v13;
        if (v18)
        {
          if (v11 == a6) {
            double v12 = v19 + 1.0;
          }
          else {
            double v12 = 3.0 - v16;
          }
        }
        else if (v11 == a4)
        {
          double v12 = v15 + 3.0;
        }
        else
        {
          double v12 = 5.0 - v19;
        }
      }
    }
  }
  *a3 = v10;
  double result = v12 / 6.0;
  *a1 = v12 / 6.0;
  *a2 = v14;
  return result;
}

BOOL sub_10001054C(CGColor *a1)
{
  return CGColorGetAlpha(a1) == 0.0;
}

CGFloat sub_10001056C(CGColor *a1)
{
  if (a1)
  {
    ColorSpace = CGColorGetColorSpace(a1);
    CGColorSpaceModel Model = CGColorSpaceGetModel(ColorSpace);
    switch(Model)
    {
      case kCGColorSpaceModelMonochrome:
        return *CGColorGetComponents(a1);
      case kCGColorSpaceModelCMYK:
        Components = CGColorGetComponents(a1);
        double v11 = Components[3];
        double v12 = 1.0 - fmin(v11 + *Components * (1.0 - v11), 1.0);
        double v13 = 1.0 - fmin(v11 + Components[1] * (1.0 - v11), 1.0);
        double v14 = 1.0 - fmin(v11 + Components[2] * (1.0 - v11), 1.0);
        double v5 = fmax(fmax(v12, v13), v14) + fmin(fmin(v12, v13), v14);
        return v5 * 0.5;
      case kCGColorSpaceModelRGB:
        CGColorRef v4 = CGColorGetComponents(a1);
        double v5 = fmax(fmax(*v4, v4[1]), v4[2]) + fmin(fmin(*v4, v4[1]), v4[2]);
        return v5 * 0.5;
    }
    NSLog(@"WARNING: Testing lightness of unsupported color model");
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB5B8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066C38();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB5D8);
    }
    double v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v6);
    }
    double v7 = +[NSString stringWithUTF8String:"CGFloat CRLColorLightness(CGColorRef _Nonnull)"];
    double v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:459 isFatal:0 description:"Trying to get lightness of a nil color"];
  }
  return 0.0;
}

void sub_100010774(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000107B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGFloat sub_1000107FC(CGColor *a1)
{
  if (a1)
  {
    ColorSpace = CGColorGetColorSpace(a1);
    CGColorSpaceModel Model = CGColorSpaceGetModel(ColorSpace);
    switch(Model)
    {
      case kCGColorSpaceModelMonochrome:
        return *CGColorGetComponents(a1);
      case kCGColorSpaceModelCMYK:
        Components = CGColorGetComponents(a1);
        double v11 = Components[3];
        double v5 = 1.0
           - fmin(v11 + Components[2] * (1.0 - v11), 1.0)
           + 1.0
           - fmin(v11 + *Components * (1.0 - v11), 1.0)
           + 1.0
           - fmin(v11 + Components[1] * (1.0 - v11), 1.0);
        return v5 / 3.0;
      case kCGColorSpaceModelRGB:
        CGColorRef v4 = CGColorGetComponents(a1);
        double v5 = *v4 + v4[1] + v4[2];
        return v5 / 3.0;
    }
    NSLog(@"WARNING: Testing lightness of unsupported color model");
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB5F8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066CC0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB618);
    }
    double v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v6);
    }
    double v7 = +[NSString stringWithUTF8String:"CGFloat CRLColorAverageLightness(CGColorRef _Nonnull)"];
    double v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:488 isFatal:0 description:"Trying to get lightness of a nil color"];
  }
  return 0.0;
}

void sub_1000109EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100010A30(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGContext *sub_100010A74(int a1, double a2, CGFloat a3, CGFloat a4)
{
  if (qword_1016A8D90 != -1) {
    dispatch_once(&qword_1016A8D90, &stru_1014CB4C0);
  }
  double v8 = CGBitmapContextCreate(0, (unint64_t)(a2 * a4), (unint64_t)(a3 * a4), 8uLL, (4 * (unint64_t)(a2 * a4) + 31) & 0xFFFFFFFFFFFFFFE0, (CGColorSpaceRef)qword_1016A8D88, 0x2002u);
  if (!v8)
  {
    unsigned int v9 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB638);
    }
    double v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110402;
      unsigned int v18 = v9;
      __int16 v19 = 2082;
      uint64_t v20 = "CGContextRef CRLCreateRGBABitmapContext(CGSize, CGFloat, BOOL)";
      __int16 v21 = 2082;
      unsigned __int8 v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m";
      __int16 v23 = 1024;
      int v24 = 504;
      __int16 v25 = 2048;
      unint64_t v26 = (unint64_t)(a2 * a4);
      __int16 v27 = 2048;
      unint64_t v28 = (unint64_t)(a3 * a4);
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CGBitmapContextCreate returns nil CGContextRef for width %ld, height %ld", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB658);
    }
    double v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v11);
    }
    double v12 = +[NSString stringWithUTF8String:"CGContextRef CRLCreateRGBABitmapContext(CGSize, CGFloat, BOOL)"];
    double v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 504, 0, "CGBitmapContextCreate returns nil CGContextRef for width %ld, height %ld", (unint64_t)(a2 * a4), (unint64_t)(a3 * a4));
  }
  CGAffineTransformMakeScale(&transform, a4, a4);
  CGContextConcatCTM(v8, &transform);
  if (a1)
  {
    CGContextTranslateCTM(v8, 0.0, a3);
    CGAffineTransformMakeScale(&v15, 1.0, -1.0);
    CGContextConcatCTM(v8, &v15);
  }
  return v8;
}

unint64_t sub_100010D48(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

void sub_100010D54(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100010D98(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100010F00(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100011130(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100011174(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100011350(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  int v9 = *(unsigned __int8 *)(v8 + 24);
  if (v7 && *(unsigned char *)(v8 + 24))
  {
    *(unsigned char *)(v8 + 24) = 0;
    [*(id *)(a1 + 32) handleFailureWithHandler:*(void *)(a1 + 40) error:v7];
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  if (v9)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    if (!*(_DWORD *)(v10 + 24))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        [*(id *)(a1 + 32) prepareBuffer];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
        uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) processData:v11 inflateResult:v10 + 24 CRC:*(void *)(*(void *)(a1 + 72)+ 8)+ 24 isDone:a2 handler:*(void *)(a1 + 40)];
    }
  }
}

void sub_100011698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000116B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v8 = a2;
  if (HIDWORD(a5))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CB700);
    }
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_101066E9C();
    }
LABEL_49:
    uint64_t v11 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    goto LABEL_50;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (!*(_DWORD *)(v9 + 64))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB720);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066F10();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CB740);
    }
    id v30 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v30);
    }
    v31 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke");
    uint64_t v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v31 file:v32 lineNumber:129 isFatal:0 description:"Buffer should have been initialized."];

    goto LABEL_49;
  }
  *(_DWORD *)(v9 + 40) = a5;
  *(void *)(*(void *)(a1 + 32) + 32) = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = 1;
  if (*(_DWORD *)(v10 + 40))
  {
    double v12 = (int **)(a1 + 56);
    while (1)
    {
      if (**v12)
      {
LABEL_51:
        uint64_t v11 = 1;
        goto LABEL_50;
      }
      int v13 = inflate((z_streamp)(v10 + 32), 0);
      **double v12 = v13;
      if ((v13 + 5) > 6 || ((1 << (v13 + 5)) & 0x61) == 0) {
        break;
      }
      int v15 = v13;
      uint64_t v10 = *(void *)(a1 + 32);
      if (v13 == 1 || !*(_DWORD *)(v10 + 64))
      {
        size_t v16 = *(void *)(v10 + 144);
        size_t v17 = v16 - *(unsigned int *)(v10 + 64);
        if (*(unsigned char *)(v10 + 28))
        {
          unsigned int v18 = *(unsigned int **)(a1 + 64);
          if (v18)
          {
            uLong v19 = *v18;
            uint64_t v20 = *(const Bytef **)(v10 + 152);
            if (HIDWORD(v17))
            {
              unsigned int v39 = +[CRLAssertionHandler _atomicIncrementAssertCount];
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014CB780);
              }
              log = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109890;
                unsigned int v42 = v39;
                __int16 v43 = 2082;
                __int16 v44 = "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke_2";
                __int16 v45 = 2082;
                __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m";
                __int16 v47 = 1024;
                int v48 = 153;
                _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
              }
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014CB7A0);
              }
              os_log_t loga = (os_log_t)off_10166B4A0;
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
              {
                logb = loga;
                uint64_t v35 = +[CRLAssertionHandler packedBacktraceString];
                *(_DWORD *)buf = 67109378;
                unsigned int v42 = v39;
                __int16 v43 = 2114;
                __int16 v44 = v35;
                _os_log_error_impl((void *)&_mh_execute_header, logb, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
              }
              id v40 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke");
              long long v34 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m"];
              +[CRLAssertionHandler handleFailureInFunction:v40 file:v34 lineNumber:153 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

              uInt v21 = -1;
            }
            else
            {
              uInt v21 = v16 - *(_DWORD *)(v10 + 64);
            }
            **(_DWORD **)(a1 + 64) = crc32(v19, v20, v21);
            uint64_t v10 = *(void *)(a1 + 32);
            size_t v16 = *(void *)(v10 + 144);
          }
        }
        dispatch_data_t v22 = dispatch_data_create(*(const void **)(v10 + 152), v16, 0, _dispatch_data_destructor_free);
        dispatch_data_t v23 = v22;
        if (*(void *)(*(void *)(a1 + 32) + 144) == v17) {
          dispatch_data_t subrange = v22;
        }
        else {
          dispatch_data_t subrange = dispatch_data_create_subrange(v22, 0, v17);
        }
        dispatch_data_t v25 = subrange;
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        *(void *)(*(void *)(a1 + 32) + 144) = 0;
        *(void *)(*(void *)(a1 + 32) + 152) = 0;
        uint64_t v26 = *(void *)(a1 + 32);
        size_t v27 = *(void *)(v26 + 16);
        BOOL v28 = v27 >= v17;
        size_t v29 = v27 - v17;
        if (!v28) {
          size_t v29 = 0;
        }
        *(void *)(v26 + 16) = v29;
        if (v15 != 1) {
          [*(id *)(a1 + 32) prepareBuffer];
        }

        uint64_t v10 = *(void *)(a1 + 32);
      }
      if (!*(_DWORD *)(v10 + 40)) {
        goto LABEL_51;
      }
    }
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CB760);
    }
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_101066FAC();
    }
    goto LABEL_49;
  }
LABEL_50:

  return v11;
}

void sub_100011CB4(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100011CF8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100011D3C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100011D80(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100011DC4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100011E08(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100011E4C(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100011E90(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100011FD0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10001243C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100012468(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10001306C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000130B0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013314(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013358(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013548(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001358C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013780(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000137C4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000139B4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000139F8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013C04(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013C48(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013E2C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100013E70(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000140A8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000140EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000142FC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100014340(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100014608(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001464C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100014828(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001486C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000162DC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100016320(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000166F8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001673C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100016780(uint64_t a1)
{
  [*(id *)(a1 + 32) p_updateAllButtons];
  double v2 = *(void **)(a1 + 32);

  return [v2 layoutIfNeeded];
}

void sub_100018374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001838C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _crlaxShouldPreventMakingVisible];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100018594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001871C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100018BD8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100018C1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100018C60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100018CA4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000190CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100019154(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100019198(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

_OWORD *sub_1000191DC(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CGColorRef v4 = a2;
    double v5 = (uint64_t **)result;
    double v6 = (void *)result + 1;
    do
    {
      id result = sub_10001C29C(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      id v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          id v8 = v7;
          id v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          id v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CGColorRef v4 = v8;
        }
        while (!v9);
      }
      CGColorRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100019544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  sub_10001D134(a10);
  id v30 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + 8) = v30;
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10001958C(uint64_t a1, uint64_t a2)
{
  return sub_10001D51C(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_100019598(uint64_t a1)
{
  return sub_10001D134(a1 + 48);
}

void sub_1000195A0(uint64_t a1, void *a2)
{
  double v2 = a2 + 1;
  id v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (!v5
        || (*(unsigned int (**)(uint64_t, void, double, double, double))(v5 + 16))(v5, v3[6], *((double *)v3 + 4), *((double *)v3 + 5), *((double *)v3 + 7)))
      {
        double v6 = sub_1000653B4(*(double *)(a1 + 48), *(double *)(a1 + 56), *((double *)v3 + 4), *((double *)v3 + 5));
        if (v6 <= *(double *)(a1 + 64))
        {
          if (!sub_10001B6C8((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), v3 + 6)) {
            goto LABEL_8;
          }
          id v7 = (double *)sub_10001CDB8((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), v3 + 6);
          if (!v7) {
            sub_10001D180("unordered_map::at: key not found");
          }
          if (v6 < v7[9])
          {
LABEL_8:
            sub_10001D210((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), v3 + 6);
            uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8) + 48;
            double v9 = *(double *)(a1 + 56);
            double v10 = *((double *)v3 + 4);
            double v11 = *((double *)v3 + 5);
            double v12 = *((double *)v3 + 6);
            double v13 = *((double *)v3 + 7);
            v17[0] = *(double *)(a1 + 48);
            v17[1] = v9;
            v17[2] = v10;
            v17[3] = v11;
            v17[4] = v12;
            v17[5] = v13;
            v17[6] = sub_1000653B4(v17[0], v9, v10, v11);
            sub_10001D28C(v8, v3 + 6, v3 + 6, (uint64_t)v17);
          }
        }
      }
      double v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          double v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          id v3 = v15;
        }
        while (!v16);
      }
      id v3 = v15;
    }
    while (v15 != v2);
  }
}

void sub_100019778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Unwind_Resume(a1);
}

void sub_100019B1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100019B60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_100019BA4(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100019BC8(uint64_t a1)
{
  double v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100019BE0(uint64_t a1, double **a2)
{
  double v2 = (double *)(a2 + 1);
  id v3 = *a2;
  if (*a2 != (double *)(a2 + 1))
  {
    do
    {
      double v6 = v3[4];
      double v5 = v3[5];
      uint64_t v34 = 0;
      double v35 = 0.0;
      [*(id *)(a1 + 32) distanceToPoint:&v34 elementIndex:&v35 tValue:1 threshold:v6 findClosestMatch:v5 *(double *)(a1 + 48)];
      if (v7 <= *(double *)(a1 + 48))
      {
        [*(id *)(a1 + 32) pointAt:v34 fromElement:v35];
        double v9 = v8;
        double v11 = v10;
        double v12 = *(void **)(*(void *)(a1 + 40) + 8);
        uint64_t v13 = *((void *)v3 + 6);
        uint64_t v14 = *((void *)v3 + 7);
        double v15 = sub_1000653B4(v8, v10, v6, v5);
        double v16 = v15;
        size_t v17 = (void *)v12[7];
        unint64_t v18 = v12[8];
        if ((unint64_t)v17 >= v18)
        {
          uint64_t v20 = (unsigned char *)v12[6];
          uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (((char *)v17 - v20) >> 3);
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) > 0x492492492492492) {
            sub_100004E40();
          }
          unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v18 - (void)v20) >> 3);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x249249249249249) {
            unint64_t v24 = 0x492492492492492;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            dispatch_data_t v25 = (char *)sub_10001D4D0((uint64_t)(v12 + 8), v24);
            uint64_t v20 = (unsigned char *)v12[6];
            size_t v17 = (void *)v12[7];
          }
          else
          {
            dispatch_data_t v25 = 0;
          }
          uint64_t v26 = (double *)&v25[56 * v21];
          double *v26 = v9;
          v26[1] = v11;
          v26[2] = v6;
          v26[3] = v5;
          *((void *)v26 + 4) = v13;
          *((void *)v26 + 5) = v14;
          v26[6] = v16;
          size_t v27 = v26;
          if (v17 != (void *)v20)
          {
            do
            {
              long long v28 = *(_OWORD *)(v17 - 7);
              long long v29 = *(_OWORD *)(v17 - 5);
              long long v30 = *(_OWORD *)(v17 - 3);
              *(v27 - 1) = *((double *)v17 - 1);
              *(_OWORD *)(v27 - 3) = v30;
              *(_OWORD *)(v27 - 5) = v29;
              *(_OWORD *)(v27 - 7) = v28;
              v27 -= 7;
              v17 -= 7;
            }
            while (v17 != (void *)v20);
            uint64_t v20 = (unsigned char *)v12[6];
          }
          uLong v19 = v26 + 7;
          v12[6] = v27;
          v12[7] = v26 + 7;
          v12[8] = &v25[56 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(double *)size_t v17 = v9;
          *((double *)v17 + 1) = v11;
          *((double *)v17 + 2) = v6;
          *((double *)v17 + 3) = v5;
          v17[4] = v13;
          uLong v19 = v17 + 7;
          v17[5] = v14;
          *((double *)v17 + 6) = v15;
        }
        v12[7] = v19;
      }
      v31 = (double *)*((void *)v3 + 1);
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          v31 = *(double **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (double *)*((void *)v3 + 2);
          BOOL v33 = *(void *)v32 == (void)v3;
          id v3 = v32;
        }
        while (!v33);
      }
      id v3 = v32;
    }
    while (v32 != v2);
  }
}

void sub_100019E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100019FA8(uint64_t a1, void *a2, unsigned char *a3)
{
  id v3 = (double *)(a2 + 1);
  CGColorRef v4 = (double *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    double v7 = *(double *)(a1 + 40);
    double v8 = *(double *)(a1 + 48);
    double v9 = *(double *)(a1 + 56);
    do
    {
      if (sub_1000643CC(v4[4], v4[5], v7, v8) <= v9)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        *a3 = 1;
      }
      double v10 = (double *)*((void *)v4 + 1);
      if (v10)
      {
        do
        {
          double v11 = v10;
          double v10 = *(double **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          double v11 = (double *)*((void *)v4 + 2);
          BOOL v12 = *(void *)v11 == (void)v4;
          CGColorRef v4 = v11;
        }
        while (!v12);
      }
      CGColorRef v4 = v11;
    }
    while (v11 != v3);
  }
}

void sub_10001A358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A3D0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001A414(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10001A458(uint64_t a1, void *a2)
{
  double v2 = a2 + 1;
  id v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      double v5 = sub_10001CDB8((void *)(*(void *)(a1 + 32) + 56), v3 + 6);
      if (v5) {
        id v6 = (id)v5[3];
      }
      else {
        id v6 = 0;
      }
      if (*((unsigned char *)v3 + 64)) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 72;
      }
      double v8 = *(double *)(a1 + v7);
      if (([*(id *)(a1 + 40) containsObject:v6] & 1) == 0)
      {
        if (objc_msgSend(*(id *)(a1 + 48), "isAnyPathNearPoint:withSearchThreshold:", *((double *)v3 + 4), *((double *)v3 + 5), v8 + 1.0))
        {
          [*(id *)(a1 + 56) distanceToPoint:0 elementIndex:0 tValue:0 threshold:0 findClosestMatch:*((double *)v3 + 4) *((double *)v3 + 5) v8];
          if (v9 <= v8) {
            [*(id *)(a1 + 40) addObject:v6];
          }
        }
      }

      double v10 = (void *)v3[1];
      if (v10)
      {
        do
        {
          double v11 = v10;
          double v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          double v11 = (void *)v3[2];
          BOOL v12 = *v11 == (void)v3;
          id v3 = v11;
        }
        while (!v12);
      }
      id v3 = v11;
    }
    while (v11 != v2);
  }
}

void sub_10001A574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_10001BC78(v18, a18);
  sub_10001BC78((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

id sub_10001AEA8(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  v11.CGFloat x = a2;
  v11.CGFloat y = a3;
  id result = (id)CGRectContainsPoint(*(CGRect *)(a1 + 40), v11);
  if (result)
  {
    *(CGFloat *)double v9 = a2;
    *(CGFloat *)&v9[1] = a3;
    double v9[2] = *(void *)(a1 + 72);
    *(double *)&v9[3] = a4;
    char v10 = 0;
    return [*(id *)(a1 + 32) p_addPointInfoStruct:v9];
  }
  return result;
}

void sub_10001B024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10001B044(uint64_t a1, double a2, double a3)
{
  id result = [*(id *)(a1 + 32) containsPoint:];
  if (result)
  {
    char v9 = 1;
    *(double *)double v8 = a2;
    *(double *)&v8[1] = a3;
    uint64_t v7 = *(void **)(a1 + 40);
    v8[2] = *(void *)(a1 + 48);
    v8[3] = 0x7FEFFFFFFFFFFFFFLL;
    return [v7 p_addPointInfoStruct:v8];
  }
  return result;
}

void sub_10001B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001B480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

double *sub_10001B580(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v7[0] = a3;
  v7[1] = a4;
  id result = sub_10001C7D0((void *)(*(void *)(a1 + 32) + 8), v7);
  if (result) {
    return (double *)(*(uint64_t (**)(void, double *, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), result + 4, a2);
  }
  return result;
}

void *sub_10001B6C8(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  id v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  id result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      id result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_10001B77C(uint64_t a1, unint64_t *a2, void *a3, id *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    CGPoint v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  void *v14 = i;
  *(void *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10001B9B8(_Unwind_Exception *a1)
{
  sub_10001BC20(v2, v1);
  _Unwind_Resume(a1);
}

void sub_10001B9D4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10001BAC4(a1, prime);
    }
  }
}

void sub_10001BAC4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100004F34();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      CGPoint v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *CGPoint v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            CGPoint v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          CGPoint v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_10001BC20(uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_10001BC78(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10001BC78(a1, *a2);
    sub_10001BC78(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_10001BCCC(uint64_t a1, unint64_t *a2, id *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    CGPoint v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v8;
  sub_10001BF1C(i + 2, a3, a4);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  void *v14 = i;
  *(void *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10001BF00(_Unwind_Exception *a1)
{
  sub_10001BF84(v2, v1);
  _Unwind_Resume(a1);
}

void *sub_10001BF1C(void *a1, id *a2, uint64_t *a3)
{
  id v5 = *a2;
  uint64_t v6 = *a3;
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = a3 + 1;
  uint64_t v8 = a3[1];
  a1[2] = v8;
  unint64_t v9 = a1 + 2;
  uint64_t v10 = a3[2];
  a1[3] = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *a3 = (uint64_t)v7;
    *uint64_t v7 = 0;
    a3[2] = 0;
  }
  else
  {
    a1[1] = v9;
  }
  return a1;
}

void sub_10001BF84(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_10001BC78(a2 + 24, *(void **)(a2 + 32));
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void *sub_10001BFE8(uint64_t a1, unint64_t *a2, uint64_t a3, id **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  id v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *unint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10001C228(_Unwind_Exception *a1)
{
  sub_10001BF84(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C244(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_1000191DC((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10001C284(_Unwind_Exception *a1)
{
  sub_10001BC78(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_10001C29C(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10001C32C(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x48uLL);
    long long v9 = *(_OWORD *)(a4 + 16);
    double v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    *((void *)v7 + 8) = *(void *)(a4 + 32);
    sub_10001C4D8(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10001C32C(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  long long v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_10001C530((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_10001C530((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      id v14 = (void *)a2[1];
      do
      {
        float v15 = v14;
        id v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        float v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10001C530((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (sub_10001C530((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_10001C598((uint64_t)a1, a3, a5);
}

uint64_t *sub_10001C4D8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  id v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  id result = sub_10001C638(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL sub_10001C530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a3 + 16);
  if (v3 != v4) {
    return v3 < v4;
  }
  BOOL v5 = *(double *)a2 < *(double *)a3;
  if (*(double *)a2 != *(double *)a3) {
    return v5;
  }
  double v6 = *(double *)(a2 + 8);
  double v7 = *(double *)(a3 + 8);
  BOOL v5 = v6 < v7;
  if (v6 != v7) {
    return v5;
  }
  double v8 = *(double *)(a2 + 24);
  double v9 = *(double *)(a3 + 24);
  BOOL v5 = v8 < v9;
  if (v8 != v9) {
    return v5;
  }
  if (*(unsigned char *)(a2 + 32)) {
    BOOL v11 = *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32);
  }
  else {
    BOOL v11 = 1;
  }
  return !v11;
}

void *sub_10001C598(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        double v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_10001C530(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        BOOL v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_10001C530(v7, v9, a3)) {
        break;
      }
      BOOL v5 = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    double v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_10001C638(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            double v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

double *sub_10001C7D0(void *a1, double *a2)
{
  double v2 = a2[1];
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = *a2;
  }
  if (v2 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4 ^ *(void *)&v3;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v8 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v9 = *(double ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (id result = *v9; result; id result = *(double **)result)
  {
    unint64_t v11 = *((void *)result + 1);
    if (v11 == v6)
    {
      if (result[2] == *a2 && result[3] == v2) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10001C8A4(uint64_t **a1, uint64_t a2)
{
  double v3 = sub_10001C8F8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10001C988(a1, v3);
  operator delete(v4);
  return 1;
}

void *sub_10001C8F8(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)(a1 + 8);
  double v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = sub_10001C530(v5, (uint64_t)(v3 + 4), a2);
    unint64_t v8 = v3 + 1;
    if (!v7)
    {
      unint64_t v8 = v3;
      unint64_t v6 = v3;
    }
    double v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_10001C530(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t *sub_10001C988(uint64_t **a1, uint64_t *a2)
{
  double v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      double v3 = v2;
      double v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      double v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10001C9FC(v6, a2);
  return v3;
}

uint64_t *sub_10001C9FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  double v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      double v3 = a2;
      goto LABEL_7;
    }
    do
    {
      double v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *unint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      id result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *double v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      id result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        id result = v7;
      }
      BOOL v7 = *(uint64_t **)(*v7 + 8);
    }
    float v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      float v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *BOOL v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        double v7[2] = (uint64_t)v15;
        float v16 = v7;
      }
      else
      {
        float v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      unint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    float v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      BOOL v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    double v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      id result = v7;
    }
    BOOL v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  size_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    size_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *size_t v20 = (uint64_t)v7;
    double v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *sub_10001CD80(void *a1, unint64_t *a2)
{
  id result = sub_10001CDB8(a1, a2);
  if (result)
  {
    sub_10001CE6C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_10001CDB8(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  id result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      id result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10001CE6C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10001CEC4(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void *sub_10001CEC4@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    BOOL v7 = v6;
    char v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *BOOL v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_10001CFF8(void *a1, unint64_t *a2)
{
  id result = sub_10001D030(a1, a2);
  if (result)
  {
    sub_10001D0E8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_10001D030(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL) {
    uint64_t v5 = *(void *)&v2 <= v3 ? v3 % *(void *)&v2 : *a2;
  }
  else {
    uint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  char v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  id result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      id result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10001D0E8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10001CEC4(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3) {
    sub_10001BF84((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_10001D134(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_10001D180(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10001D1DC(exception, a1);
}

void sub_10001D1C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10001D1DC(std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t *sub_10001D210(void *a1, unint64_t *a2)
{
  id result = sub_10001CDB8(a1, a2);
  if (result)
  {
    sub_10001D248(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_10001D248(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10001CEC4(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

char *sub_10001D28C(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  long long v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 40) = v14;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a4 + 32);
  *((void *)v12 + 9) = *(void *)(a4 + 48);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)uint64_t v12 = *v22;
LABEL_38:
    *uint64_t v22 = v12;
    goto LABEL_39;
  }
  *(void *)uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v23 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10001D4BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001D4D0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_100004F34();
  }
  return operator new(56 * a2);
}

uint64_t sub_10001D51C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)id result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *sub_10001D58C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_10001D608(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001D5EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001D608(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_100004E40();
  }
  id result = (char *)sub_10001D4D0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

_OWORD *sub_10001D660(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_10001C598((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    long long v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((void *)v6 + 8) = *(void *)(a3 + 32);
    sub_10001C4D8(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t sub_10001D6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_10001C29C((uint64_t **)a1, v4, a2, a2);
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_10001D758(_Unwind_Exception *a1)
{
  sub_10001BC78(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double *sub_10001D770(uint64_t a1, double *a2, uint64_t a3)
{
  double v5 = a2[1];
  double v6 = *a2;
  if (*a2 == 0.0) {
    double v6 = 0.0;
  }
  uint64_t v7 = *((void *)a2 + 1);
  if (v5 == 0.0) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 ^ *(void *)&v6;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 ^ *(void *)&v6;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(double ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (id result = *v11; result; id result = *(double **)result)
      {
        unint64_t v13 = *((void *)result + 1);
        if (v13 == v8)
        {
          if (result[2] == *a2 && result[3] == v5) {
            return result;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_10001D9C8(a1, v8, a3, (uint64_t)v23);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v23[0] = *v21;
    *uint64_t v21 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v23[0])
    {
      unint64_t v22 = *(void *)(*(void *)v23[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v23[0];
    }
  }
  id result = (double *)v23[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_10001D9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11)
{
  if (a10) {
    sub_10001DA54((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001D9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  id result = operator new(0x38uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *id result = 0;
  result[1] = a2;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  unint64_t v9 = (void *)(a3 + 24);
  uint64_t v10 = *(void *)(a3 + 24);
  result[4] = *(void *)(a3 + 16);
  result[5] = v10;
  unint64_t v11 = (char *)(result + 5);
  uint64_t v12 = *(void *)(a3 + 32);
  result[6] = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *(void *)(a3 + 16) = v9;
    void *v9 = 0;
    *(void *)(a3 + 32) = 0;
  }
  else
  {
    result[4] = v11;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10001DA54(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_10001BC78((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void *sub_10001DAB0(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10001B9D4(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *unint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10001DCE0(_Unwind_Exception *a1)
{
  sub_10001BC20(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DCFC(uint64_t a1)
{
  sub_10001DD38(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001DD38(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      sub_10001BC78((uint64_t)(v2 + 4), v2[5]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t sub_10001DD80(uint64_t a1)
{
  sub_10001DDBC(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001DDBC(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_10001DE00(uint64_t a1)
{
  sub_10001DE3C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001DE3C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *(void **)v2;
      sub_10001BC78((uint64_t)v2 + 24, *((void **)v2 + 4));

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10001DEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001DF00(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_10001E990((void **)a1, a2 - v2);
  }
}

void sub_10001DFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_10001E428(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = __src;
  double v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      sub_100004E40();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      size_t v19 = (char *)sub_10001EAB0(a1 + 16, v18);
    }
    else {
      size_t v19 = 0;
    }
    uint64_t v20 = &v19[16 * v16];
    __p = v19;
    uint64_t v27 = v20;
    long long v28 = v20;
    long long v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        unint64_t v23 = (char *)sub_10001EAB0(v8, v22);
        uint64_t v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        long long v29 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v3;
    long long v28 = v20 + 16;
    unint64_t v4 = (char *)sub_10001EC38((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    uint8x8_t v9 = __src + 16;
    uint64_t v10 = v6 - 16;
    unint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_10001E638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001E758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E990(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_10001EAB0(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    unint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_10001EAB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100004F34();
  }
  return operator new(16 * a2);
}

char *sub_10001EAE8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    id result = sub_10001EBF4(v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      size_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    id result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    size_t v19 = v16;
LABEL_18:
    id result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

char *sub_10001EBF4(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100004E40();
  }
  id result = (char *)sub_10001EAB0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10001EC38(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(void **)(a2 + 8);
  double v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

id sub_10001F988(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_buildMenuTitles:forSelectionPath:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_10001FAB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLiOSCanvasViewControllerAccessibility;
  return [super showEditMenuForSelectionPath:v1];
}

void sub_10002073C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100020780(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100020D4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100020D90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100020DD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100020E18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100021BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, id *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak((id *)(v20 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_100021C14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained crlaxKnobPositionAdjustedByDistance:0 inDirection:*(double *)(a1 + 48)];
  [v4 crlaxMoveKnobToRepPositionInNaturalSpace:];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_100021D04;
  v7[3] = &unk_1014CBF60;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100021CF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100021D04(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);
}

uint64_t sub_100021D60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained crlaxKnobPositionAdjustedByDistance:1 inDirection:*(double *)(a1 + 48)];
  [v4 crlaxMoveKnobToRepPositionInNaturalSpace:];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_100021E50;
  v7[3] = &unk_1014CBF60;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100021E3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100021E50(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);
}

uint64_t sub_100021EAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained crlaxKnobPositionAdjustedByDistance:2 inDirection:*(double *)(a1 + 48)];
  [v4 crlaxMoveKnobToRepPositionInNaturalSpace];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_100021F9C;
  v7[3] = &unk_1014CBF60;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100021F88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100021F9C(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);
}

uint64_t sub_100021FF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained crlaxKnobPositionAdjustedByDistance:3 inDirection:*(double *)(a1 + 48)];
  [v4 crlaxMoveKnobToRepPositionInNaturalSpace:];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_1000220E8;
  v7[3] = &unk_1014CBF60;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_1000220D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000220E8(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);
}

uint64_t sub_100022144(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v12 = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v5 = [WeakRetained knob];
  double v6 = [v5 crlaxCreateKnobTracker];

  unint64_t v7 = (objc_class *)objc_opt_class();
  uint64_t v8 = __CRLAccessibilityCastAsClass(v7, (uint64_t)v6, 1, &v12);
  if (v12) {
    abort();
  }
  uint64_t v9 = (void *)v8;

  uint64_t v10 = [*(id *)(a1 + 32) knob];
  [v10 crlaxPositionInUnscaledCanvas];
  [v9 crlaxAccessibilityRequestsDuplicateItemInsertFromKnobAt];

  return 1;
}

BOOL sub_100022460(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v10 = 0;
  uint64_t v4 = [*(id *)(a1 + 32) knob];
  double v5 = [v4 crlaxCreateKnobTracker];

  double v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = __CRLAccessibilityCastAsClass(v6, (uint64_t)v5, 1, &v10);
  if (v10) {
    abort();
  }
  uint64_t v8 = (void *)v7;

  if (v8) {
    [v8 crlaxAccessibilityRequestsConnectionTo:*(double *)(a1 + 40), *(double *)(a1 + 48)];
  }

  return v8 != 0;
}

id sub_100022514(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) knob];
  id v3 = [*(id *)(a1 + 32) parentRep];
  [v3 crlaxConvertNaturalPointFromUnscaledCanvas:*(double *)(a1 + 48), *(double *)(a1 + 56)];
  [v2 crlaxMoveKnobToRepPositionInNaturalSpace:1];

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);

  return _objc_msgSend(v4, "i_crlaxEnsureReciprocalConnectionsAfterConnectingConnectionLineToRep:", v5);
}

uint64_t sub_10002268C(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) knob];
  id v3 = [*(id *)(a1 + 32) parentRep];
  [v3 crlaxConvertNaturalPointFromUnscaledCanvas:*(double *)(a1 + 40), *(double *)(a1 + 48)];
  [v2 crlaxMoveKnobToRepPositionInNaturalSpace:1];

  return 1;
}

void sub_100022A1C(uint64_t a1)
{
}

id sub_100022CE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) disconnectConnectedConnectionLineEndIfNecessary];
}

id sub_100022E44(id a1, PHPickerResult *a2)
{
  return [(PHPickerResult *)a2 itemProvider];
}

void sub_100023290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  objc_destroyWeak(v38);
  objc_destroyWeak(v37);
  _Block_object_dispose((const void *)(v39 - 160), 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  objc_destroyWeak((id *)(v39 - 168));
  _Unwind_Resume(a1);
}

void sub_10002330C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

uint64_t sub_10002334C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002335C(uint64_t a1)
{
}

void sub_100023364(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000234C4;
  v20[3] = &unk_1014CC178;
  long long v25 = *(_OWORD *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 64);
  v20[4] = *(void *)(a1 + 32);
  objc_copyWeak(&v28, (id *)(a1 + 80));
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 72);
  id v24 = v10;
  uint64_t v27 = v11;
  id v12 = v7;
  id v21 = v12;
  id v13 = v8;
  id v22 = v13;
  id v14 = v9;
  id v23 = v14;
  unint64_t v15 = objc_retainBlock(v20);
  ((void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))v15[2])(v15, v16, v17, v18, v19);

  objc_destroyWeak(&v28);
}

void sub_1000234B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000234C4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
  {
    if (qword_101719A40 != -1) {
      dispatch_once(&qword_101719A40, &stru_1014CC0A8);
    }
    unint64_t v2 = off_101669E50;
    if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = *(void **)(a1 + 32);
      uint64_t v4 = v2;
      uint64_t v5 = [v3 publicString];
      double v6 = [*(id *)(a1 + 32) privateString];
      *(_DWORD *)buf = 138543618;
      BOOL v33 = v5;
      __int16 v34 = 2112;
      double v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Ignoring results because user cancelled asset loading", buf, 0x16u);
    }
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

    if (WeakRetained)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
      {
        if (qword_101719A40 != -1) {
          dispatch_once(&qword_101719A40, &stru_1014CC0E8);
        }
        id v8 = off_101669E50;
        if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = *(void **)(a1 + 32);
          id v10 = v8;
          uint64_t v11 = [v9 publicString];
          id v12 = [*(id *)(a1 + 32) privateString];
          *(_DWORD *)buf = 138543618;
          BOOL v33 = v11;
          __int16 v34 = 2112;
          double v35 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Dismissing progress UI.", buf, 0x16u);
        }
        id v13 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100023A48;
        v27[3] = &unk_1014CC130;
        v27[4] = *(void *)(a1 + 32);
        id v31 = *(id *)(a1 + 64);
        id v28 = *(id *)(a1 + 40);
        id v29 = *(id *)(a1 + 48);
        id v30 = *(id *)(a1 + 56);
        [v13 dismissViewControllerAnimated:1 completion:v27];
      }
      else
      {
        if (qword_101719A40 != -1) {
          dispatch_once(&qword_101719A40, &stru_1014CC150);
        }
        id v21 = off_101669E50;
        if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = *(void **)(a1 + 32);
          id v23 = v21;
          id v24 = [v22 publicString];
          long long v25 = [*(id *)(a1 + 32) privateString];
          *(_DWORD *)buf = 138543618;
          BOOL v33 = v24;
          __int16 v34 = 2112;
          double v35 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Assets loaded. Calling completion handler.", buf, 0x16u);
        }
        uint64_t v26 = *(void *)(a1 + 64);
        if (v26) {
          (*(void (**)(uint64_t, void, void, void))(v26 + 16))(v26, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
        }
      }
    }
    else
    {
      if (qword_101719A40 != -1) {
        dispatch_once(&qword_101719A40, &stru_1014CC0C8);
      }
      id v14 = off_101669E50;
      if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v15 = *(void **)(a1 + 32);
        uint64_t v16 = v14;
        uint64_t v17 = [v15 publicString];
        uint64_t v18 = [*(id *)(a1 + 32) privateString];
        *(_DWORD *)buf = 138543618;
        BOOL v33 = v17;
        __int16 v34 = 2112;
        double v35 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ User dismissed picker before assets loaded", buf, 0x16u);
      }
      uint64_t v19 = *(void *)(a1 + 64);
      if (v19)
      {
        uint64_t v20 = +[NSError errorWithDomain:NSCocoaErrorDomain code:3072 userInfo:0];
        (*(void (**)(uint64_t, void, void, void *))(v19 + 16))(v19, 0, 0, v20);
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
}

void sub_100023988(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

void sub_1000239C8(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

void sub_100023A08(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

uint64_t sub_100023A48(uint64_t a1)
{
  if (qword_101719A40 != -1) {
    dispatch_once(&qword_101719A40, &stru_1014CC108);
  }
  unint64_t v2 = off_101669E50;
  if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v5 = [v3 publicString];
    double v6 = [*(id *)(a1 + 32) privateString];
    int v8 = 138543618;
    id v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Finished dismissing progress UI. Calling completion handler.", (uint8_t *)&v8, 0x16u);
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
  return result;
}

void sub_100023B78(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

void sub_100023BB8(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

void sub_100023BF8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 8) + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  unint64_t v2 = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 32) + 8) + 32);

  os_unfair_lock_unlock(v2);
}

void sub_100023C54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
  if (WeakRetained)
  {
    int v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
    if (!v3)
    {
      uint64_t v4 = +[NSBundle mainBundle];
      uint64_t v5 = [v4 localizedStringForKey:@"Inserting…" value:0 table:0];

      [*(id *)(a1 + 32) fractionCompleted];
      if (v6 == 1.0 || fabs(v6 + -1.0) < 0.01)
      {
        id v7 = +[NSProgress discreteProgressWithTotalUnitCount:-1];
      }
      else
      {
        id v7 = *(id *)(a1 + 32);
      }
      int v8 = v7;
      uint64_t v9 = +[UIAlertController crl_progressAlertControllerWithTitle:v5 message:0 preferredStyle:1 progress:v7];
      uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      id v12 = +[NSBundle mainBundle];
      id v13 = [v12 localizedStringForKey:@"Cancel" value:0 table:0];
      id v21 = _NSConcreteStackBlock;
      uint64_t v22 = 3221225472;
      id v23 = sub_100023F78;
      id v24 = &unk_1014CC210;
      id v14 = *(void **)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 40);
      id v26 = v14;
      unint64_t v15 = +[UIAlertAction actionWithTitle:v13 style:1 handler:&v21];

      [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addAction:v15, v21, v22, v23, v24, v25];
      if (qword_101719A40 != -1) {
        dispatch_once(&qword_101719A40, &stru_1014CC230);
      }
      uint64_t v16 = off_101669E50;
      if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void **)(a1 + 40);
        uint64_t v18 = v16;
        uint64_t v19 = [v17 publicString];
        uint64_t v20 = [*(id *)(a1 + 40) privateString];
        *(_DWORD *)buf = 138543618;
        id v28 = v19;
        __int16 v29 = 2112;
        id v30 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Presenting progress", buf, 0x16u);
      }
      [WeakRetained presentViewController:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) animated:1 completion:0];
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
  }
}

void sub_100023F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_101719A40 != -1) {
    dispatch_once(&qword_101719A40, &stru_1014CC1E8);
  }
  uint64_t v4 = off_101669E50;
  if (os_log_type_enabled((os_log_t)off_101669E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    double v6 = v4;
    id v7 = [v5 publicString];
    int v8 = [*(id *)(a1 + 32) privateString];
    int v9 = 138543618;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ User cancelled asset loading", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) cancel];
}

void sub_1000240A8(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

void sub_1000240E8(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("PHPickerViewControllerCRLAdditionsLogCat");
  unint64_t v2 = off_101669E50;
  off_101669E50 = v1;
}

uint64_t sub_10002428C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100024368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000243C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPRenderer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100024CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100024D74(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100024DB8(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100024DFC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v8 = result;
    char v9 = 1;
    do
    {
      double v10 = *(double *)(v4 + 8);
      double v11 = *(double *)(v4 + 16);
      sub_1001BAAC4(v20, v4);
      double v12 = *(double *)(*(void *)(v8 + 40) + 40);
      double v13 = *(double *)(v8 + 48);
      CGContextSaveGState(*(CGContextRef *)(*(void *)(v8 + 32) + 16));
      CGContextTranslateCTM(*(CGContextRef *)(*(void *)(v8 + 32) + 16), v10 + v12, v11 + v13);
      [*(id *)(v8 + 32) p_setCTMAndTextPositionForFragment:*(void *)(v8 + 40) state:*(void *)(v8 + 56)];
      if (*(unsigned char *)(v8 + 64)
        || (*(_WORD *)(*(void *)(v8 + 40) + 24) & 0x420) != 0
        || *(void *)(*(void *)(v8 + 56) + 56)
        || *(unsigned char *)(v8 + 65))
      {
        id v14 = *(void **)(v8 + 32);
        sub_1001BAAC4(v19, v20);
        LOBYTE(v17) = v9 & 1;
        [v14 p_drawTextInRunsForLine:v19 fragment:*(void *)(v8 + 40) state:*(void *)(v8 + 56) listLabel:0 a3:a4 baseRange:*(void *)(v4 + 24) isFirstLineRef:*(void *)(v4 + 32) v17];
        sub_1001BAAFC(v19);
      }
      else
      {
        unint64_t v15 = *(CGContext **)(*(void *)(v8 + 32) + 16);
        CGAffineTransformMakeScale(&transform, 1.0, -1.0);
        CGContextConcatCTM(v15, &transform);
        uint64_t v16 = (const __CTLine *)sub_1001BAB78((uint64_t)v20);
        CTLineDraw(v16, *(CGContextRef *)(*(void *)(v8 + 32) + 16));
      }
      CGContextRestoreGState(*(CGContextRef *)(*(void *)(v8 + 32) + 16));
      uint64_t result = sub_1001BAAFC(v20);
      char v9 = 0;
      v4 += 104;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_100024F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_10002556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100025624(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100025668(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100025728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100025F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100025FF0(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100026034(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100026078(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000260BC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000267A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100026854(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100026898(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000268DC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100026920(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100027110(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100027154(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000275B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000275DC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100027620(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000279D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100027A38(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100027A7C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100027AC0(int a1, NSRange range1)
{
  NSUInteger length = range1.length;
  NSUInteger location = range1.location;
  uint64_t v5 = v4;
  range1.NSUInteger length = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  NSUInteger v7 = range1.location;
  range1.NSUInteger location = length;
  if (!NSIntersectionRange(range1, *(&range1 + 8)).length)
  {
    v20.NSUInteger location = location;
    v20.NSUInteger length = length;
    NSRange v8 = NSIntersectionRange(v20, *(NSRange *)(v5 + 56));
    if (v8.length)
    {
      double v9 = sub_100153EB4(*(void *)(v5 + 72), v8.location, 1, 1, 0);
      double v10 = rint(sub_100153EB4(*(void *)(v5 + 72), v8.location + v8.length, 1, 1, 0) - v9);
      if (v10 >= 0.0) {
        double v11 = v10;
      }
      else {
        double v11 = -v10;
      }
      if (v10 >= 0.0) {
        double v10 = -0.0;
      }
      if (v11 != 0.0)
      {
        double v12 = v9 + v10;
        double v13 = fmod(v11, 4.0);
        if (v13 <= 1.0) {
          double v14 = -v13;
        }
        else {
          double v14 = 4.0 - v13;
        }
        double v15 = fmax(v11 + v14, 4.0);
        double v16 = sub_100152DC4(*(void *)(v5 + 72));
        if (*(unsigned char *)(v5 + 184))
        {
          double v17 = floor(v16 - *(double *)(v5 + 104)) - 1.79999995;
        }
        else if (*(unsigned char *)(v5 + 185))
        {
          double v17 = floor(v16 + *(double *)(v5 + 120));
        }
        else
        {
          double v17 = floor(v16) + 1.79999995;
        }
        uint64_t v18 = *(void **)(v5 + 32);
        [v18 p_strokeLineFromPoint:v12 toPoint:v17 width:v12 + v15];
      }
    }
  }
}

void sub_100027D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100027E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100028348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_1000284C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100028B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_100029080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100029148(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002918C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100029D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  _Unwind_Resume(a1);
}

void sub_100029E9C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLDefaultCat");
  unint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100029EE0(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100029F24(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002A4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_10002A52C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002A570(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002A6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10002AD04(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002AD48(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002B000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002B244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10002B3D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10002B450(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_10002B434(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002B450(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100004E40();
  }
  uint64_t result = (char *)sub_10002B494((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10002B494(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100004F34();
  }
  return operator new(8 * a2);
}

void *sub_10002B4CC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001EBF4(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_10002B528(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B598(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("CRLPasteboard.ActivePasteboards", v3);
  unint64_t v2 = (void *)qword_1016A8DF8;
  qword_1016A8DF8 = (uint64_t)v1;
}

void sub_10002B650(id a1)
{
  id v1 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:5 capacity:1];
  unint64_t v2 = (void *)qword_1016A8E08;
  qword_1016A8E08 = (uint64_t)v1;
}

void sub_10002B7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B7E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002B7F0(uint64_t a1)
{
}

void sub_10002B7F8(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 48) activePasteboards];
  uint64_t v2 = [v5 objectForKey:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002B910(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 32), "pasteboardClass")), "initWithGeneralPasteboard");
  uint64_t v3 = (void *)qword_1016A8E18;
  qword_1016A8E18 = (uint64_t)v2;

  uint64_t v4 = [*(id *)(a1 + 32) activePasteboardsQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B9C0;
  block[3] = &unk_1014CC6D8;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v4, block);
}

void sub_10002B9C0(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) activePasteboards];
  uint64_t v1 = qword_1016A8E18;
  id v2 = [(id)qword_1016A8E18 name];
  [v3 setObject:v1 forKey:v2];
}

void sub_10002BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002BB88(uint64_t a1)
{
  id v9 = [*(id *)(a1 + 48) activePasteboards];
  uint64_t v2 = [v9 objectForKey:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v5 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 48), "pasteboardClass")), "initWithPasteboardName:create:", *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    NSUInteger v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v8) {
      [v9 setObject:v8 forKey:*(void *)(a1 + 32)];
    }
  }
}

void sub_10002BD1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) activePasteboards];
  uint64_t v3 = [*(id *)(a1 + 32) name];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    uint64_t v5 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CC720);
    }
    uint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101067F38((uint64_t)v3, v5, v6);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CC740);
    }
    NSUInteger v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v7);
    }
    uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLPasteboard pasteboardWithUniqueName]_block_invoke");
    id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 185, 0, "Pasteboard already exists with unique name %{public}@", v3);
  }
  [v2 setObject:*(void *)(a1 + 32) forKey:v3];
}

void sub_10002BEC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002BF0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C094(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 48) activePasteboards];
  uint64_t v2 = [*(id *)(a1 + 32) name];
  uint64_t v3 = [v10 objectForKey:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v6 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 48), "pasteboardClass")), "initWithNativePasteboard:", *(void *)(a1 + 32));
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v9) {
      [v10 setObject:v9 forKey:v2];
    }
  }
}

void sub_10002C860(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) pasteboardWithName:@"com.apple.freeform.stylepasteboard" create:1];
  uint64_t v2 = (void *)qword_1016A8E28;
  qword_1016A8E28 = v1;
}

void sub_10002C9C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10002D1E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002D228(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002D990(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002D9D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_10002F248(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10002F28C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F2D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F314(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = [*(id *)(a1 + 32) pasteboardPropertyListForType:v3];
  id v6 = (void *)v5;
  if (v5)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(a1 + 40) + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    id v9 = v3;
    uint64_t v10 = v5;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    [v7 addPasteboardItem:v8];
  }
}

void sub_10002F414(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F458(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F900(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002F944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002FB04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002FB48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002FE8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10002FED0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100030420(uint64_t a1)
{
  if (a1) {
    return 2;
  }
  else {
    return (a1 << 62 >> 63) & 3;
  }
}

CFStringRef sub_1000304B8()
{
  return (id)kUTTypeJPEG2000;
}

id sub_1000304C8()
{
  if (qword_1016A8E40 != -1) {
    dispatch_once(&qword_1016A8E40, &stru_1014CC9F8);
  }
  double v0 = (void *)qword_1016A8E38;

  return v0;
}

void sub_10003051C(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:kUTTypePICT];
  uint64_t v2 = (void *)qword_1016A8E38;
  qword_1016A8E38 = v1;

  if (!qword_1016A8E38)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCA18);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010681C8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCA38);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLPICTUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 108, 0, "invalid nil value for '%{public}s'", "pictUTType");
  }
}

void sub_1000306A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000306E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100030728()
{
  if (qword_1016A8E50 != -1) {
    dispatch_once(&qword_1016A8E50, &stru_1014CCA58);
  }
  double v0 = (void *)qword_1016A8E48;

  return v0;
}

void sub_10003077C(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.mail.email"];
  uint64_t v2 = (void *)qword_1016A8E48;
  qword_1016A8E48 = v1;

  if (!qword_1016A8E48)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCA78);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106825C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCA98);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLMailEmailMessageUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 138, 0, "invalid nil value for '%{public}s'", "CRLMailEmailMessageType");
  }
}

void sub_1000308FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100030940(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100030984()
{
  if (qword_1016A8E60 != -1) {
    dispatch_once(&qword_1016A8E60, &stru_1014CCAB8);
  }
  double v0 = (void *)qword_1016A8E58;

  return v0;
}

void sub_1000309D8(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.notes.richtext"];
  uint64_t v2 = (void *)qword_1016A8E58;
  qword_1016A8E58 = v1;

  if (!qword_1016A8E58)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCAD8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010682F0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCAF8);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLNotesRichTextUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 148, 0, "invalid nil value for '%{public}s'", "CRLRichTextType");
  }
}

void sub_100030B58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100030B9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100030BE0()
{
  if (qword_1016A8E70 != -1) {
    dispatch_once(&qword_1016A8E70, &stru_1014CCB18);
  }
  double v0 = (void *)qword_1016A8E68;

  return v0;
}

void sub_100030C34(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.drawing"];
  uint64_t v2 = (void *)qword_1016A8E68;
  qword_1016A8E68 = v1;

  if (!qword_1016A8E68)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCB38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101068384();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCB58);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLDrawingUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 158, 0, "invalid nil value for '%{public}s'", "CRLDrawingType");
  }
}

void sub_100030DB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100030DF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100030E3C()
{
  if (qword_1016A8E80 != -1) {
    dispatch_once(&qword_1016A8E80, &stru_1014CCB78);
  }
  double v0 = (void *)qword_1016A8E78;

  return v0;
}

void sub_100030E90(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.notes.table"];
  uint64_t v2 = (void *)qword_1016A8E78;
  qword_1016A8E78 = v1;

  if (!qword_1016A8E78)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCB98);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101068418();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCBB8);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLNotesTableUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 168, 0, "invalid nil value for '%{public}s'", "CRLTableType");
  }
}

void sub_100031010(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100031054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100031098()
{
  if (qword_1016A8E90 != -1) {
    dispatch_once(&qword_1016A8E90, &stru_1014CCBD8);
  }
  double v0 = (void *)qword_1016A8E88;

  return v0;
}

void sub_1000310EC(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.ical.ics"];
  uint64_t v2 = (void *)qword_1016A8E88;
  qword_1016A8E88 = v1;

  if (!qword_1016A8E88)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCBF8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010684AC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCC18);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLiCalICSEventUTType(void)_block_invoke"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 180, 0, "invalid nil value for '%{public}s'", "CRLiCalEventType");
  }
}

void sub_10003126C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000312B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100031348(id a1)
{
  v3[0] = @"com.apple.freeform.CRLNativeMetadata";
  v3[1] = @"com.apple.freeform.CRLNativeData";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:2];
  uint64_t v2 = (void *)qword_1016A8E98;
  qword_1016A8E98 = v1;
}

void sub_100031428(id a1)
{
  CFArrayRef v1 = CGImageSourceCopyTypeIdentifiers();
  uint64_t v2 = [UTTypePDF identifier];
  v6[0] = v2;
  v6[1] = @"com.adobe.encapsulated-postscript";
  v6[2] = @"com.adobe.illustrator.ai-image";
  id v3 = +[NSArray arrayWithObjects:v6 count:3];
  uint64_t v4 = [(__CFArray *)v1 arrayByAddingObjectsFromArray:v3];
  uint64_t v5 = (void *)qword_1016A8EA8;
  qword_1016A8EA8 = v4;
}

void sub_1000315A0(uint64_t a1)
{
  CFArrayRef v1 = [*(id *)(a1 + 32) supportedImageTypes];
  uint64_t v2 = objc_opt_new();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = +[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v7), (void)v11);
        if (v8) {
          [v2 addObject:v8];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  id v9 = [v2 copy];
  uint64_t v10 = (void *)qword_1016A8EB8;
  qword_1016A8EB8 = (uint64_t)v9;
}

void sub_100031748(id a1)
{
  v3[0] = @"com.apple.atx";
  v3[1] = @"org.khronos.astc";
  void v3[2] = @"org.khronos.ktx";
  v3[3] = @"com.microsoft.cur";
  v3[4] = @"public.radiance";
  v3[5] = @"public.pbm";
  v3[6] = @"public.pvr";
  v3[7] = @"com.microsoft.dds";
  v3[8] = @"org.khronos.ktx2";
  v3[9] = @"public.avis";
  v3[10] = @"com.sony.axr-raw-image";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:11];
  uint64_t v2 = (void *)qword_1016A8EC8;
  qword_1016A8EC8 = v1;
}

id sub_100032520()
{
  if (qword_1016A8EE0 != -1) {
    dispatch_once(&qword_1016A8EE0, &stru_1014CCC98);
  }
  double v0 = (void *)qword_1016A8ED8;

  return v0;
}

void sub_100032574(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"com.apple.mapkit.map-item"];
  uint64_t v2 = (void *)qword_1016A8ED8;
  qword_1016A8ED8 = v1;

  if (!qword_1016A8ED8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCCB8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101068540();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCCD8);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    id v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLMapKitMapItemUTType(void)_block_invoke"];
    id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 351, 0, "invalid nil value for '%{public}s'", "CRLMapKitMapItemUTType");
  }
}

void sub_1000326F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100032738(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10003277C()
{
  if (qword_1016A8EF0 != -1) {
    dispatch_once(&qword_1016A8EF0, &stru_1014CCCF8);
  }
  double v0 = (void *)qword_1016A8EE8;

  return v0;
}

void sub_1000327D0(id a1)
{
  uint64_t v1 = +[UTType typeWithIdentifier:@"public.heics"];
  uint64_t v2 = (void *)qword_1016A8EE8;
  qword_1016A8EE8 = v1;

  if (!qword_1016A8EE8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCD18);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010685D4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CCD38);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    id v4 = +[NSString stringWithUTF8String:"UTType * _Nonnull CRLHEICSUTType(void)_block_invoke"];
    id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 366, 0, "invalid nil value for '%{public}s'", "CRLHEICSUTType");
  }
}

void sub_100032950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100032994(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033060(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000330A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000335B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000335FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033684(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033878(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100033BAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100034254(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000342F4;
  block[3] = &unk_1014CBE50;
  uint64_t v4 = *(void *)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1000342F4(id *a1)
{
  if (!*((unsigned char *)a1[4] + 8))
  {
    uint64_t v2 = +[NSMutableDictionary dictionary];
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v3 = [a1[5] allKeys];
    id v4 = [v3 countByEnumeratingWithState:&v54 objects:v61 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v55;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v55 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v54 + 1) + 8 * i);
          id v9 = [a1[4] strokeUUIDsToDrawingShapeItems];
          uint64_t v10 = [v9 objectForKey:v8];

          uint64_t v11 = [a1[5] objectForKey:v8];
          long long v12 = (void *)v11;
          if (v10) {
            BOOL v13 = v11 == 0;
          }
          else {
            BOOL v13 = 1;
          }
          if (!v13)
          {
            long long v14 = [v10 pencilKitStrokePathCompactData];
            double v15 = v14;
            if (v14 && [v14 shouldSolveMath]) {
              [v12 _setFlags:((unint64_t)[v12 _flags] | 0x20000000000)];
            }
            [v2 setObject:v10 forKey:v12];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v54 objects:v61 count:16];
      }
      while (v5);
    }

    __int16 v44 = [[CRLFreehandDrawingStraightenHelper alloc] initWithInteractiveCanvasController:a1[6]];
    __int16 v45 = objc_alloc_init(_TtC8Freeform15CRLCommandGroup);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    double v16 = v2;
    double v17 = [v2 allKeys];
    id v18 = [v17 countByEnumeratingWithState:&v50 objects:v60 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v51;
      do
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(void *)v51 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void *)(*((void *)&v50 + 1) + 8 * (void)j);
          id v23 = [v16 objectForKey:v22, v44];
          uint64_t v59 = v22;
          id v24 = +[NSArray arrayWithObjects:&v59 count:1];
          uint64_t v25 = [(CRLFreehandDrawingStraightenHelper *)v44 commandForStraighteningShapeItem:v23 toStrokesInUnscaledSpace:v24];

          [(CRLCommandGroup *)v45 addCommand:v25];
        }
        id v19 = [v17 countByEnumeratingWithState:&v50 objects:v60 count:16];
      }
      while (v19);
    }

    id v26 = [a1[6] commandController];
    uint64_t v27 = [a1[6] canvasEditor];
    id v28 = [v16 allValues];
    __int16 v29 = +[NSSet setWithArray:v28];
    id v30 = [v27 selectionPathWithInfos:v29];

    id v31 = [[CRLCommandSelectionBehavior alloc] initWithForwardSelectionPath:v30 reverseSelectionPath:v30];
    [v26 openGroup];
    [v26 enqueueCommand:v45];
    [v26 closeGroupWithSelectionBehavior:v31];
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v32 = [v16 allValues];
    id v33 = [v32 countByEnumeratingWithState:&v46 objects:v58 count:16];
    if (v33)
    {
      id v34 = v33;
      uint64_t v35 = *(void *)v47;
      while (2)
      {
        for (k = 0; k != v34; k = (char *)k + 1)
        {
          if (*(void *)v47 != v35) {
            objc_enumerationMutation(v32);
          }
          if (!objc_msgSend(*((id *)a1[4] + 8), "containsObject:", *(void *)(*((void *)&v46 + 1) + 8 * (void)k), v44))
          {

            [a1[4] p_removeCurrentSelectionView];
            [*((id *)a1[4] + 8) removeAllObjects];
            goto LABEL_34;
          }
        }
        id v34 = [v32 countByEnumeratingWithState:&v46 objects:v58 count:16];
        if (v34) {
          continue;
        }
        break;
      }
    }

    [a1[4] p_removeCurrentSelectionView];
    [*((id *)a1[4] + 8) removeAllObjects];
    uint64_t v37 = [v16 allValues];
    id v38 = [v37 mutableCopy];
    uint64_t v39 = a1[4];
    id v40 = (void *)v39[8];
    v39[8] = v38;

LABEL_34:
  }
  v41 = [a1[6] editingCoordinator:v44];
  [v41 resumeCollaborationWithReason:@"CRLFreehandDrawingAsyncStraightenStrokes"];

  [*((id *)a1[4] + 11) endIgnoringUserInteractionSafely];
  unsigned int v42 = a1[4];
  __int16 v43 = (void *)v42[11];
  v42[11] = 0;
}

void sub_100034C20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100034C64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100034F40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100034F84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003529C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000352E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000357FC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) smartSelectionView];
  [v1 setAlpha:0.0];
}

void sub_100035FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100035FC8(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    [a1[4] setRecognitionEnabled:1];
    id v3 = [a1[4] indexableContent];
    id v4 = [v3 presentableTextRepresentation];
    id v5 = [v4 componentsSeparatedByString:@"\n"];
    uint64_t v6 = +[NSMutableArray array];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003619C;
    v10[3] = &unk_1014CCFA8;
    v10[4] = v6;
    [v5 enumerateObjectsUsingBlock:v10];
    if (v5 && [a1[5] length])
    {
      id v7 = +[NSNotificationCenter defaultCenter];
      id v8 = a1[5];
      v11[0] = @"CRLActiveBoardDidUpdateDrawingIndexedContentsBoardIdentifierString";
      v11[1] = @"CRLActiveBoardDidUpdateDrawingIndexedContents";
      v12[0] = v8;
      v12[1] = v6;
      id v9 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];
      [v7 postNotificationName:@"CRLActiveBoardDidUpdateDrawingIndexedContentsNotification" object:0 userInfo:v9];
    }
    [a1[4] cancelOngoingRecognitionRequests];
  }
}

void sub_10003619C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 length]) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_1000362B8(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000363C0(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000367D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100036818(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100036A58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100036A9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100037270(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000372B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000380D0(id a1, id a2)
{
  id v2 = a2;
  id v3 = +[NSCharacterSet whitespaceCharacterSet];
  id v4 = [v2 stringByTrimmingCharactersInSet:v3];

  return v4;
}

void sub_1000391A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000391EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000394AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000394F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000399F8(void *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 4;
}

uint64_t sub_100039A08(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4) {
    return 0;
  }
  else {
    return *(void *)(*a1 + 16 * a2);
  }
}

uint64_t sub_100039A2C(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 0;
  }
  else {
    return *(void *)(v1 - 16);
  }
}

void **sub_100039A48(uint64_t *a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void **)(a1 + 2);
  unint64_t v6 = a1[2];
  id v7 = (void *)a1[1];
  if ((unint64_t)v7 >= v6)
  {
    long long v16 = v3;
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_100004E40();
    }
    uint64_t v11 = v6 - *a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = a1 + 2;
    BOOL v13 = (char *)sub_10001EAB0((uint64_t)result, v12);
    long long v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    *(_OWORD *)long long v14 = v16;
    v17[2] = v14 + 16;
    sub_100039D5C(a1, v17);
    id v8 = (void *)a1[1];
    uint64_t result = sub_100039EE4(v17);
  }
  else
  {
    *id v7 = v3;
    v7[1] = v4;
    id v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_100039B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100039EE4((void **)va);
  _Unwind_Resume(a1);
}

__n64 sub_100039B6C(uint64_t *a1, char a2)
{
  result.n64_u64[0] = *(unint64_t *)&CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  if (v6 != *a1)
  {
    if (a2)
    {
      uint64_t v9 = *(CGFloat **)(v6 - 16);
      v6 -= 16;
      v11.origin.CGFloat x = v9[9];
      v11.origin.CGFloat y = v9[10];
      v11.size.CGFloat width = v9[11];
      v11.size.CGFloat height = v9[12] - v9[20];
      *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, v11);
      uint64_t v7 = *a1;
    }
    while (v6 != v7)
    {
      uint64_t v10 = *(void *)(v6 - 16);
      v6 -= 16;
      *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, *(CGRect *)(v10 + 72));
    }
  }
  return result;
}

void sub_100039BEC(double ***a1, double a2, double a3)
{
  long long v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v7 = *v3;
      v3 += 2;
      sub_10015DD9C(v7, a2, a3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_100039C3C(uint64_t *a1, double a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    return 0;
  }
  else
  {
    unsigned int v4 = 0;
    do
    {
      double v5 = *(double *)(*(void *)v2 + 32);
      if (v5 == a2)
      {
        ++v4;
      }
      else if (v5 > a2)
      {
        return v4;
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
  return v4;
}

NSUInteger sub_100039C84(uint64_t a1)
{
  uint64_t v1 = (NSRange *)&xmmword_101176F48;
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = v2 - *(void *)a1;
  if (v2 == *(void *)a1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v4 = **(long long ***)a1;
  if (*((uint64_t *)v4 + 3) < 0) {
    unsigned int v4 = &xmmword_101176F48;
  }
  v5.NSUInteger location = *(void *)v4;
  if (v3 >= 0x11)
  {
    uint64_t v6 = *(NSRange **)(v2 - 16);
    if ((v6[1].length & 0x8000000000000000) == 0) {
      uint64_t v1 = v6;
    }
    v5.NSUInteger length = *((void *)v4 + 1);
    v5.NSUInteger location = NSUnionRange(v5, *v1).location;
  }
  return v5.location;
}

void sub_100039CE8(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_100039D5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100039DD4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100039DD4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100039E68((uint64_t)v12);
  return v10;
}

uint64_t sub_100039E68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100039EA0(a1);
  }
  return a1;
}

void sub_100039EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100039CE8(v3);
    }
    v1 += 16;
  }
}

void **sub_100039EE4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100039F18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unsigned int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_100039CE8(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_100039F6C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unsigned int v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_100039CE8(v4);
    }
  }
  a1[1] = v2;
}

void sub_10003A1A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003A1E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003AB94(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) crlaxTarget];
  [v1 i_togglePlayPauseTriggeredFromKnob];
}

UIPointerStyle *__cdecl sub_10003B170(id a1, UIButton *a2, UIPointerEffect *a3, UIPointerShape *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  +[UIPointerInteraction crl_toolbarRoundedRectWidth];
  double v8 = v7;
  +[UIPointerInteraction crl_toolbarRoundedRectHeight];
  uint64_t v9 = [(UIButton *)v6 imageView];
  uint64_t v10 = (void *)v9;
  if (v9) {
    CGRect v11 = (void *)v9;
  }
  else {
    CGRect v11 = v6;
  }
  id v12 = v11;

  char v13 = [(UIPointerEffect *)v5 preview];
  long long v14 = [v13 target];
  long long v15 = [v14 container];

  [v12 bounds];
  [v12 convertPoint:v15 toView:sub_100065738(v16, v17, v18, v19)];
  double v21 = v20;
  double v23 = v22;

  double v24 = sub_10006402C(v21, v23, v8);
  double v26 = v25;
  double v28 = v27;
  double v30 = v29;
  +[UIPointerInteraction crl_toolbarRoundedRectCornerRadius];
  uint64_t v32 = +[UIPointerShape shapeWithRoundedRect:cornerRadius:](UIPointerShape, "shapeWithRoundedRect:cornerRadius:", v24, v26, v28, v30, v31);
  id v33 = +[UIPointerStyle styleWithEffect:v5 shape:v32];

  return (UIPointerStyle *)v33;
}

void sub_10003B660(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003B6A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003B6E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003B72C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003B91C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003B960(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C2B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C2F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C33C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C380(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C6A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10003C6E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10003C7BC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 17) = *(unsigned char *)(a1 + 40);
  [*(id *)(a1 + 32) didChangeConfiguration];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 layoutIfNeeded];
}

id sub_10003F328(void *a1)
{
  id v1 = a1;
  +[CRLDescription descriptionWithObject:format:](CRLDescription, "descriptionWithObject:format:", v1, @"; count=%lu",
  uint64_t v2 = [v1 count]);
  if ([v1 count])
  {
    unint64_t v3 = 0;
    do
    {
      unsigned int v4 = +[NSString stringWithFormat:@"[%lu]", v3];
      uint64_t v5 = [v1 objectAtIndexedSubscript:v3];
      [v2 addField:v4, @"%@", v5 format];

      ++v3;
    }
    while (v3 < (unint64_t)[v1 count]);
  }
  [v2 setFieldOptionCommaSeparated];
  uint64_t v6 = [v2 descriptionString];

  return v6;
}

__CFString *sub_10003F44C(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    ClassName = object_getClassName(v1);
    if (isKindOfClass) {
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"(%s*)%p; count=%lu",
    }
        ClassName,
        v1,
        [v1 count]);
    else {
    unsigned int v4 = +[NSString stringWithFormat:@"(%s*)%p", ClassName, v1, v6];
    }
  }
  else
  {
    unsigned int v4 = @"<nil>";
  }

  return v4;
}

void sub_1000403D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100040414(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_1000405A0(uint64_t a1)
{
  __n128 result = *(__n128 *)(*(void *)(a1 + 32) + 72);
  *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = result;
  return result;
}

void sub_100040650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000406CC;
  block[3] = &unk_1014CBBB0;
  block[4] = v1;
  dispatch_sync(v2, block);
}

void sub_1000406CC(uint64_t a1)
{
  unint64_t v3 = (id *)(a1 + 32);
  id v2 = *(id *)(a1 + 32);
  if (*((void *)v2 + 5) || (v4 = [*((id *)v2 + 7) count], id v2 = *v3, v4))
  {
    *((unsigned char *)v2 + 97) = 1;
    *((void *)*v3 + 13) = 1;
    goto LABEL_4;
  }
  uint64_t v13 = *((void *)v2 + 13);
  if (!*((void *)v2 + 4))
  {
    if (v13) {
      goto LABEL_4;
    }
    uint64_t v19 = 2;
    goto LABEL_39;
  }
  if (!v13)
  {
    if (CRLWPShapeLayout.columnsAreLeftToRight.getter())
    {
      long long v14 = [*v3 imageData];
      id v15 = [v14 length];
      id v1 = (id)sub_100454998();

      if (v15 > v1)
      {
        CGFloat v16 = CGImageSourceGetType(*((CGImageSourceRef *)*v3 + 4));
        if (v16)
        {
          CGFloat v17 = sub_1000304B8();
          id v1 = [v16 crl_conformsToUTI:v17];

          if (v1)
          {
            *((void *)*v3 + 13) = 4;
            *((unsigned char *)*v3 + 97) = 0;
          }
        }
      }
    }
    if (!*((void *)*v3 + 13))
    {
      CGFloat v18 = [(CGImage *)*v3 p_newImageFromSource:*((void *)*v3 + 4)];
      *((unsigned char *)*v3 + 97) = v18 != 0;
      CGImageRelease(v18);
      id v2 = *v3;
      if (*((unsigned char *)*v3 + 97)) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = 3;
      }
LABEL_39:
      *((void *)v2 + 13) = v19;
    }
  }
LABEL_4:
  uint64_t v5 = *v3;
  if (!*((void *)*v3 + 13))
  {
    int v6 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD418);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010691D0((uint64_t)v3, v6);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD438);
    }
    double v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010690A0(v7);
    }
    double v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider isValid]_block_invoke");
    id v1 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v1, 174, 0, "Didn't update validation failure type during validation! isValid? %i", *((unsigned __int8 *)*v3 + 97));

    uint64_t v5 = *v3;
  }
  if (!v5[97])
  {
    if (qword_101719A58 != -1) {
      dispatch_once(&qword_101719A58, &stru_1014CD458);
    }
    uint64_t v9 = off_10166A168;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = [*v3 imageData];
      if (v10)
      {
        id v1 = [*v3 imageData];
        CGRect v11 = (objc_class *)objc_opt_class();
        NSStringFromClass(v11);
        id v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v12 = @"Nil";
      }
      double v20 = [*v3 imageData];
      double v21 = [v20 filename];
      double v22 = [*v3 imageData];
      double v23 = [v22 assetUUID];
      double v24 = [v23 UUIDString];
      id v25 = [*v3 validationStatus];
      *(_DWORD *)buf = 138544130;
      double v27 = v12;
      __int16 v28 = 2112;
      double v29 = v21;
      __int16 v30 = 2114;
      double v31 = v24;
      __int16 v32 = 2048;
      id v33 = v25;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "bitmap image <%{public}@: filename=%@, assetUUID=%{public}@>  not valid. status %zi", buf, 0x2Au);

      if (v10)
      {
      }
    }
  }
}

void sub_100040B20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100040B64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100040BA8(id a1)
{
  id v1 = sub_100401ECC("CRLBitmapImageProviderValidationCat");
  id v2 = off_10166A168;
  off_10166A168 = v1;
}

void sub_100040DBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100040E00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100041390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000413B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000413F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100041438(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004147C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000414C0(id a1)
{
  id v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  id v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_100041500(void *a1)
{
  uint64_t v2 = a1[4];
  if (a1[6] == 1)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(v2 + 40);
    CGImageRetain(*(CGImageRef *)(*(void *)(a1[5] + 8) + 24));
  }
  else if ((unint64_t)[*(id *)(v2 + 56) count] >= 2)
  {
    unint64_t v3 = *(void **)(a1[4] + 56);
    id v4 = +[NSNumber numberWithInteger:a1[6]];
    uint64_t v5 = [v3 objectForKeyedSubscript:v4];

    if (v5) {
      *(void *)(*(void *)(a1[5] + 8) + 24) = CGImageRetain((CGImageRef)[v5 CGImage]);
    }
  }
  if (!*(void *)(*(void *)(a1[5] + 8) + 24) && [*(id *)(a1[4] + 56) count])
  {
    uint64_t v6 = a1[6];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    double v7 = [*(id *)(a1[4] + 56) allKeys];
    id v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = v6 ^ 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)v23;
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v11) {
            objc_enumerationMutation(v7);
          }
          long long v14 = (char *)[*(id *)(*((void *)&v22 + 1) + 8 * i) integerValue];
          uint64_t v15 = a1[6];
          CGFloat v16 = &v14[-v15];
          if ((uint64_t)&v14[-v15] < 0) {
            CGFloat v16 = (char *)(v15 - (void)v14);
          }
          if (v10 >= 0) {
            unint64_t v17 = v10;
          }
          else {
            unint64_t v17 = -v10;
          }
          if ((unint64_t)v16 <= v17)
          {
            if ((uint64_t)v14 >= v12) {
              uint64_t v18 = v12;
            }
            else {
              uint64_t v18 = (uint64_t)v14;
            }
            if (v16 == (char *)v17) {
              uint64_t v12 = v18;
            }
            else {
              uint64_t v12 = (uint64_t)v14;
            }
            uint64_t v10 = v12 - v15;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v9);
    }
    else
    {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }

    uint64_t v19 = *(void **)(a1[4] + 56);
    double v20 = +[NSNumber numberWithInteger:v12];
    double v21 = [v19 objectForKeyedSubscript:v20];
    *(void *)(*(void *)(a1[5] + 8) + 24) = [v21 CGImage];

    CGImageRetain(*(CGImageRef *)(*(void *)(a1[5] + 8) + 24));
  }
}

void sub_1000418F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef sub_10004190C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100041BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100041C08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100041C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGImageRef sub_100041C90(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

CGImageRef sub_100041CB8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 48);
  return CGImageRetain(*(CGImageRef *)(*(void *)(a1 + 32) + 48));
}

void sub_100041EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100041EF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100041F3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGImageRef sub_100041F80(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100042750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042774(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000427B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000427FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100042840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100042884(id a1)
{
  id v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_1000428C4(id a1)
{
  id v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_100042904(id a1)
{
  id v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

CGImageRef sub_100042944(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_10004296C(id a1)
{
  id v1 = sub_100401ECC("CRLImageResampleOptimizationCat");
  uint64_t v2 = off_10166A160;
  off_10166A160 = v1;
}

void sub_100042C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

BOOL sub_100042C4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  return *(double *)(a1 + 40) <= *(double *)(v1 + 32) && *(double *)(a1 + 48) <= *(double *)(v1 + 40);
}

BOOL sub_100042C80(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  return *(double *)(v1 + 32) > 1.0 && *(double *)(v1 + 40) > 1.0;
}

BOOL sub_100042CB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  return *(double *)(v1 + 32) > *(double *)(a1 + 40) || *(double *)(v1 + 40) > *(double *)(a1 + 48);
}

void sub_100042FC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_1000431BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000431D8(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 56);
  unint64_t v3 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  id v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = CGImageRetain((CGImageRef)[v4 CGImage]);
    if (qword_101719A48 != -1) {
      dispatch_once(&qword_101719A48, &stru_1014CD748);
    }
    uint64_t v5 = off_10166A158;
    if (os_log_type_enabled((os_log_t)off_10166A158, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[6];
      double v7 = *(CGImage **)(*(void *)(a1[5] + 8) + 24);
      id v8 = v5;
      size_t Width = CGImageGetWidth(v7);
      size_t Height = CGImageGetHeight(*(CGImageRef *)(*(void *)(a1[5] + 8) + 24));
      int v11 = 134218496;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      size_t v14 = Width;
      __int16 v15 = 2048;
      size_t v16 = Height;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "using existing 1/%zu image (%zu, %zu)", (uint8_t *)&v11, 0x20u);
    }
  }
}

void sub_100043358(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_100043398(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 56);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    uint64_t v2 = *(void **)(a1[4] + 56);
  }
  uint64_t v6 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  double v7 = [v2 objectForKeyedSubscript:v6];

  if (!v7)
  {
    uint64_t v8 = a1[5];
    id v9 = *(void **)(a1[4] + 56);
    uint64_t v10 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    [v9 setObject:v8 forKeyedSubscript:v10];

    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1[4] + 136), 0xFFFFFFFFFFFFFFFFLL);
    *(unsigned char *)(a1[4] + 144) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1[4] + 136));
    int v11 = (void *)a1[4];
    [v11 p_updateEstimatedSize];
  }
}

uint64_t sub_100043580(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 88);
  return result;
}

uint64_t sub_100043654(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 96);
  return result;
}

void sub_1000437A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000437C4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 64);
  return result;
}

BOOL sub_1000437E0(uint64_t a1)
{
  BOOL result = CGColorSpaceIsWideGamutRGB(*(CGColorSpaceRef *)(a1 + 48));
  uint64_t v3 = 1;
  if (!result) {
    uint64_t v3 = 2;
  }
  *(void *)(*(void *)(a1 + 32) + 64) = v3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 64);
  return result;
}

intptr_t sub_100043B94(uint64_t a1)
{
  if (qword_101719A48 != -1) {
    dispatch_once(&qword_101719A48, &stru_1014CD790);
  }
  uint64_t v2 = off_10166A158;
  if (os_log_type_enabled((os_log_t)off_10166A158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 134217984;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning to flush provider %p", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v4 = *(CFTypeRef **)(a1 + 32);
  if (v4[5])
  {
    CFRelease(v4[5]);
    *(void *)(*(void *)(a1 + 32) + 40) = 0;
    uint64_t v4 = *(CFTypeRef **)(a1 + 32);
  }
  if (v4[6])
  {
    CFRelease(v4[6]);
    *(void *)(*(void *)(a1 + 32) + 48) = 0;
    uint64_t v4 = *(CFTypeRef **)(a1 + 32);
  }
  if (v4[4])
  {
    CFRelease(v4[4]);
    *(void *)(*(void *)(a1 + 32) + 32) = 0;
    uint64_t v4 = *(CFTypeRef **)(a1 + 32);
  }
  if ([(CFTypeRef *)v4 i_loadState] == 1) {
    [*(id *)(a1 + 32) setI_loadState:0];
  }
  [*(id *)(*(void *)(a1 + 32) + 56) removeAllObjects];
  *(void *)(*(void *)(a1 + 32) + 152) = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  *(unsigned char *)(*(void *)(a1 + 32) + 144) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136));
}

void sub_100043D40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void sub_1000440E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLImageResampleOptimizationCat");
  uint64_t v2 = off_10166A160;
  off_10166A160 = v1;
}

void *sub_100044124(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 32);
  if (result[6])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD7D0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101069A88();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD7F0);
    }
    uint64_t v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010690A0(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider p_loadFullSizedImageIfNecessary]_block_invoke");
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"];
    +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:754 isFatal:0 description:"Should never load full-sized image if we have been asked to load the largest safe image!"];

    BOOL result = *(void **)(a1 + 32);
  }
  if (!result[5])
  {
    BOOL result = [result i_loadState];
    if (result != 2)
    {
      int v6 = *(CFTypeRef **)(a1 + 32);
      id v7 = (id)v6[4];
      if (v7)
      {
        CFRetain(v6[4]);
      }
      else
      {
        id v7 = [(CFTypeRef *)v6 p_newCGImageSource];
        if (!v7)
        {
          id v8 = 0;
LABEL_19:
          *(void *)(*(void *)(a1 + 32) + 40) = v8;
          BOOL v9 = 1;
          if (v8) {
            uint64_t v10 = 1;
          }
          else {
            uint64_t v10 = 2;
          }
          [*(id *)(a1 + 32) setI_loadState:v10];
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v11 = *(void *)(a1 + 32);
          if (!*(unsigned char *)(v11 + 144)) {
            BOOL v9 = *(void *)(v11 + 40) != 0;
          }
          *(unsigned char *)(v11 + 144) = v9;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136));
          return [*(id *)(a1 + 32) p_updateEstimatedSize];
        }
      }
      id v8 = [*(id *)(a1 + 32) p_newImageFromSource:v7];
      if (v8) {
        [*(id *)(a1 + 32) p_configureOrientationAndSizeFromImageSource:v7 andImage:v8];
      }
      CFRelease(v7);
      goto LABEL_19;
    }
  }
  return result;
}

void sub_100044364(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000443A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100044598(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLImageResampleOptimizationCat");
  uint64_t v2 = off_10166A160;
  off_10166A160 = v1;
}

void *sub_1000445D8(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 32);
  if (result[5])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD830);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101069B10();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CD850);
    }
    uint64_t v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010690A0(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider p_loadLargestSafeImageIfNecessary]_block_invoke");
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"];
    +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:803 isFatal:0 description:"Should never load largestSafeImage if we can load the full-sized image!"];

    BOOL result = *(void **)(a1 + 32);
  }
  if (!result[6])
  {
    BOOL result = [result i_loadState];
    if (result != 2)
    {
      int v6 = *(CFTypeRef **)(a1 + 32);
      id v7 = (id)v6[4];
      if (v7)
      {
        CFRetain(v6[4]);
      }
      else
      {
        id v7 = [(CFTypeRef *)v6 p_newCGImageSource];
        if (!v7)
        {
          id v14 = 0;
LABEL_21:
          *(void *)(*(void *)(a1 + 32) + 48) = v14;
          BOOL v15 = 1;
          if (v14) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = 2;
          }
          [*(id *)(a1 + 32) setI_loadState:v16];
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v17 = *(void *)(a1 + 32);
          if (!*(unsigned char *)(v17 + 144)) {
            BOOL v15 = *(void *)(v17 + 48) != 0;
          }
          *(unsigned char *)(v17 + 144) = v15;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136));
          return [*(id *)(a1 + 32) p_updateEstimatedSize];
        }
      }
      if (qword_101719A48 != -1) {
        dispatch_once(&qword_101719A48, &stru_1014CD870);
      }
      id v8 = off_10166A158;
      if (os_log_type_enabled((os_log_t)off_10166A158, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        CGFloat v10 = *(double *)(a1 + 40);
        CGFloat v11 = *(double *)(a1 + 48);
        uint64_t v12 = v8;
        v22.CGFloat width = v10;
        v22.CGFloat height = v11;
        __int16 v13 = NSStringFromCGSize(v22);
        int v18 = 134218242;
        uint64_t v19 = v9;
        __int16 v20 = 2114;
        double v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "provider:%p creating new largest safe image of size:%{public}@ ", (uint8_t *)&v18, 0x16u);
      }
      id v14 = [*(id *)(a1 + 32) p_newImageOfSize:v7 fromSource:*(double *)(a1 + 40)];
      CFRelease(v7);
      goto LABEL_21;
    }
  }
  return result;
}

void sub_1000448F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100044934(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100044978(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLBitmapImageResampleCat");
  uint64_t v2 = off_10166A158;
  off_10166A158 = v1;
}

void *sub_100044A34(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 32);
  if (!result[4])
  {
    BOOL result = [result i_loadState];
    if (result != 2)
    {
      if (CRLWPShapeLayout.columnsAreLeftToRight.getter())
      {
        uint64_t v3 = [*(id *)(a1 + 32) imageData];
        char v4 = sub_1004565A4(v3);

        if ((v4 & 1) == 0)
        {
          [*(id *)(a1 + 32) setI_loadState:2];
          *(void *)(*(void *)(a1 + 32) + 104) = 4;
        }
      }
      BOOL result = [*(id *)(a1 + 32) i_loadState];
      if (result != 2)
      {
        id v5 = [*(id *)(a1 + 32) p_newCGImageSource];
        if (v5)
        {
          [*(id *)(a1 + 32) p_configureOrientationAndSizeFromImageSource:v5 andImage:0];
          uint64_t v6 = 1;
        }
        else
        {
          uint64_t v6 = 2;
        }
        *(void *)(*(void *)(a1 + 32) + 32) = v5;
        [*(id *)(a1 + 32) setI_loadState:v6];
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v7 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v7 + 144)) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = *(void *)(v7 + 32) != 0;
        }
        *(unsigned char *)(v7 + 144) = v8;
        uint64_t v9 = *(NSObject **)(*(void *)(a1 + 32) + 136);
        return (void *)dispatch_semaphore_signal(v9);
      }
    }
  }
  return result;
}

intptr_t sub_100044F58(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 40) = *(void *)(a1 + 40);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 144)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(void *)(v2 + 40) != 0;
  }
  *(unsigned char *)(v2 + 144) = v3;
  char v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);

  return dispatch_semaphore_signal(v4);
}

void sub_1000450B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000450D0(void *result)
{
  uint64_t v1 = *(void *)(result[4] + 32);
  if (v1)
  {
    *(void *)(*(void *)(result[5] + 8) + 24) = v1;
    BOOL result = *(void **)(*(void *)(result[5] + 8) + 24);
    if (result) {
      return CFRetain(result);
    }
  }
  return result;
}

void sub_100045340(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100045384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1000455B4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 32);
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_100045680(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t sub_1000456A0(double a1, double a2)
{
  if (a1 == 0.0 && a2 == -1.0) {
    return 0;
  }
  if (a1 == 1.0 && a2 == -1.0) {
    return 1;
  }
  if (a1 == 1.0 && a2 == 0.0) {
    return 2;
  }
  if (a1 == 1.0 && a2 == 1.0) {
    return 3;
  }
  if (a1 == 0.0 && a2 == 1.0) {
    return 4;
  }
  if (a1 == -1.0 && a2 == 1.0) {
    return 5;
  }
  if (a1 == -1.0 && a2 == 0.0) {
    return 6;
  }
  if (a1 == -1.0 && a2 == -1.0) {
    return 7;
  }
  int v7 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014CD8F8);
  }
  BOOL v8 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67110402;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = "CRLTracingDirection directionForVector(CGPoint)";
    __int16 v17 = 2082;
    int v18 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm";
    __int16 v19 = 1024;
    int v20 = 73;
    __int16 v21 = 2048;
    double v22 = a1;
    __int16 v23 = 2048;
    double v24 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't find direction for invalid vector (%f, %f)", buf, 0x36u);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014CD918);
  }
  uint64_t v9 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = +[CRLAssertionHandler packedBacktraceString];
    sub_101069C40(v10, (uint64_t)buf, v7);
  }

  CGFloat v11 = +[NSString stringWithUTF8String:"CRLTracingDirection directionForVector(CGPoint)"];
  uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 73, 0, "can't find direction for invalid vector (%f, %f)", *(void *)&a1, *(void *)&a2);

  return 8;
}

void sub_100045974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004599C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000459E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_100045A24(long long *a1, long long *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a5 - a3;
  double v7 = a6 - a4;
  if (v6 == -0.5 && v7 == -0.5)
  {
    long long v19 = xmmword_101174FC0;
    int v20 = &xmmword_101174FD0;
LABEL_30:
    *a1 = v19;
    __n128 result = (__n128)*v20;
    *a2 = *v20;
    return result;
  }
  if (v6 == 0.5 && v7 == -0.5)
  {
    long long v19 = xmmword_101174FD0;
    int v20 = &xmmword_101174FE0;
    goto LABEL_30;
  }
  if (v6 == 0.5 && v7 == 0.5)
  {
    long long v19 = xmmword_101174FE0;
    int v20 = &xmmword_101174FF0;
    goto LABEL_30;
  }
  if (v6 == -0.5 && v7 == 0.5)
  {
    long long v19 = xmmword_101174FF0;
    int v20 = &xmmword_101174FC0;
    goto LABEL_30;
  }
  int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014CD938);
  }
  __int16 v13 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101069C98(v12, v13);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014CD958);
  }
  int v14 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
  {
    __int16 v15 = +[CRLAssertionHandler packedBacktraceString];
    sub_101069C40(v15, (uint64_t)&v21, v12);
  }

  uint64_t v16 = +[NSString stringWithUTF8String:"void nextPivotAndBlackVectors(CGPoint, CGPoint, CGPoint &, CGPoint &)"];
  __int16 v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm"];
  +[CRLAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:106 isFatal:0 description:"unexpected pivot and black points while tracing"];

  return result;
}

void sub_100045C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045C7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100045CC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100045D04(void *a1, uint64_t *a2, double a3)
{
  id v5 = a1;
  v58 = a2;
  BOOL v8 = a2;
  double v7 = (long long *)*a2;
  double v6 = (long long *)v8[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  if (v9 > 0x31) {
    goto LABEL_12;
  }
  double width = CGRectNull.size.width;
  double height = CGRectNull.size.height;
  if (v6 != v7)
  {
    double x = CGRectNull.origin.x;
    CGFloat y = CGRectNull.origin.y;
    if (v9 <= 1) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    }
    uint64_t v15 = (uint64_t)v7 + 8;
    do
    {
      double x = sub_100065928(x, y, width, height, *(double *)(v15 - 8));
      v15 += 24;
      --v14;
    }
    while (v14);
  }
  if (width >= 5.0 && height >= 5.0)
  {
LABEL_12:
    v62 = 0;
    long long v57 = v5;
    __int16 v17 = (double *)sub_100046F5C((uint64_t)&v62, 1uLL);
    long long v19 = *v7;
    v17[2] = *((double *)v7 + 2);
    *(_OWORD *)__int16 v17 = v19;
    int v20 = v17 + 3;
    __p = v17;
    v62 = (char *)&v17[3 * v18];
    v61 = v17 + 3;
    if (v9 != 1)
    {
      unint64_t v21 = 0;
      while (1)
      {
        uint64_t v59 = (char *)v20;
        uint64_t v22 = *v58;
        unint64_t v23 = v21 + 1;
        unint64_t v24 = v21 + 2;
        if (v21 + 2 < v9) {
          break;
        }
        ++v21;
LABEL_31:
        id v40 = (long long *)(v22 + 24 * v21);
        if (v59 >= v62)
        {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (char *)__p) >> 3) + 1;
          if (v42 > 0xAAAAAAAAAAAAAAALL) {
            sub_100004E40();
          }
          if (0x5555555555555556 * ((v62 - (char *)__p) >> 3) > v42) {
            unint64_t v42 = 0x5555555555555556 * ((v62 - (char *)__p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v62 - (char *)__p) >> 3) >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            __int16 v44 = (char *)sub_100046F5C((uint64_t)&v62, v43);
          }
          else {
            __int16 v44 = 0;
          }
          __int16 v45 = &v44[8 * ((v59 - (char *)__p) >> 3)];
          long long v46 = *v40;
          *((void *)v45 + 2) = *((void *)v40 + 2);
          *(_OWORD *)__int16 v45 = v46;
          long long v47 = v61;
          long long v48 = (double *)v45;
          if (v61 != __p)
          {
            do
            {
              long long v49 = *(_OWORD *)(v47 - 3);
              *(v48 - 1) = *(v47 - 1);
              *(_OWORD *)(v48 - 3) = v49;
              v48 -= 3;
              v47 -= 3;
            }
            while (v47 != __p);
            long long v47 = __p;
          }
          int v20 = (double *)(v45 + 24);
          __p = v48;
          v62 = &v44[24 * v43];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          long long v41 = *v40;
          *((void *)v59 + 2) = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v59 = v41;
          int v20 = (double *)(v59 + 24);
        }
        v61 = v20;
        if (v21 >= v9 - 1) {
          goto LABEL_48;
        }
      }
      long long v25 = (double *)(v22 + 24 * v21);
      double v26 = *v25;
      double v27 = v25[1];
      __int16 v28 = v25 + 4;
      ++v21;
      unint64_t v29 = v24;
      while (1)
      {
        if (v23 >= v29)
        {
          LOBYTE(v39) = 1;
        }
        else
        {
          __int16 v30 = (double *)(v22 + 24 * v29);
          double v32 = *v30;
          double v31 = v30[1];
          double v33 = *v30 - v26;
          id v34 = v28;
          unint64_t v35 = v24;
          do
          {
            double v36 = (v31 - v27) * (*(v34 - 1) - v26);
            double v37 = v33 * (*v34 - v27);
            if (v36 == v37)
            {
              BOOL v39 = 1;
            }
            else
            {
              float v38 = vabdd_f64(v36, v37) / sub_1000653B4(v32, v31, v26, v27);
              BOOL v39 = v38 <= a3;
            }
            if (v35 >= v29) {
              break;
            }
            ++v35;
            v34 += 3;
          }
          while (v39);
          if (!v39) {
            goto LABEL_27;
          }
        }
        unint64_t v21 = v29;
LABEL_27:
        if (++v29 >= v9 || !v39) {
          goto LABEL_31;
        }
      }
    }
LABEL_48:
    long long v50 = __p;
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v20 - __p);
    if (v51 < 3)
    {
      id v5 = v57;
      if (!__p) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
    double v52 = *__p;
    double v53 = __p[1];
    id v5 = v57;
    if ((char *)v20 - (char *)__p == 72 && v52 == __p[6] && v53 == __p[7]) {
      goto LABEL_59;
    }
    [v57 moveToPoint:v52, v53, v57];
    uint64_t v55 = 0;
    unint64_t v56 = v51 - 1;
    do
    {
      [v5 lineToPoint:__p[v55 + 3], __p[v55 + 4]];
      v55 += 3;
      --v56;
    }
    while (v56);
    [v5 closePath];
    long long v50 = __p;
    if (__p) {
LABEL_59:
    }
      operator delete(v50);
  }
LABEL_60:
}

void sub_100046110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000467E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,void *a32)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10001BC78((uint64_t)&a31, a32);

  _Unwind_Resume(a1);
}

void sub_100046EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10001BC78((uint64_t)&a25, a26);

  _Unwind_Resume(a1);
}

void *sub_100046F5C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100004F34();
  }
  return operator new(24 * a2);
}

uint64_t *sub_100046FA4(uint64_t **a1, double *a2, _OWORD *a3)
{
  id v5 = (void **)sub_100047028((uint64_t)a1, &v9, a2);
  double v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    double v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_10001C4D8(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_100047028(uint64_t a1, void *a2, double *a3)
{
  id v5 = *(uint64_t **)(a1 + 8);
  __n128 result = (void *)(a1 + 8);
  char v4 = v5;
  if (v5)
  {
    double v7 = *a3;
    double v6 = a3[1];
    while (1)
    {
      while (1)
      {
        BOOL v8 = v4;
        double v9 = *((double *)v4 + 5);
        if (v6 >= v9) {
          break;
        }
LABEL_6:
        char v4 = (uint64_t *)*v4;
        __n128 result = v8;
        if (!*v8) {
          goto LABEL_18;
        }
      }
      if (v6 == v9)
      {
        double v10 = *((double *)v4 + 4);
        if (v7 < v10) {
          goto LABEL_6;
        }
        if (v9 >= v6 && v10 >= v7) {
          goto LABEL_18;
        }
      }
      else if (v9 >= v6)
      {
        goto LABEL_18;
      }
      __n128 result = v4 + 1;
      char v4 = (uint64_t *)v4[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
  }
  BOOL v8 = result;
LABEL_18:
  *a2 = v8;
  return result;
}

uint64_t sub_100047098(uint64_t **a1, double *a2)
{
  BOOL v3 = (uint64_t *)sub_1000470EC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  char v4 = v3;
  sub_10001C988(a1, v3);
  operator delete(v4);
  return 1;
}

double *sub_1000470EC(uint64_t a1, double *a2)
{
  char v4 = *(double **)(a1 + 8);
  uint64_t v2 = (double *)(a1 + 8);
  BOOL v3 = v4;
  if (!v4) {
    return v2;
  }
  double v5 = *a2;
  double v6 = a2[1];
  double v7 = v2;
  do
  {
    double v8 = v3[5];
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (v3[4] < v5) {
          ++v3;
        }
        else {
          double v7 = v3;
        }
      }
      else
      {
        double v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    BOOL v3 = *(double **)v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  double v9 = v7[5];
  if (v6 < v9 || v6 == v9 && v5 < v7[4]) {
    return v2;
  }
  return v7;
}

void sub_10004749C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000474E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100047A90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100047AD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100047CAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100047CF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004841C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_100048460(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000484A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000484E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004852C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100048570(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000485B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000485F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100048608(uint64_t a1)
{
}

void sub_100048610(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v3 = *((void *)*v2 + 3);
  if (v3 != 1)
  {
    if (v3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CDAF8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106A3E4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CDB18);
      }
      char v4 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v4);
      }
      double v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke");
      double v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 496, 0, "Guide state unexpected when do second pass on begin generation! %lu", *((void *)*v2 + 3));
    }
    else
    {
      *((void *)*v2 + 3) = 1;
    }
  }
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)*v2 + 2));
  if (*((void *)*v2 + 14))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDB38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106A35C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDB58);
    }
    double v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v7);
    }
    double v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke");
    double v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"];
    +[CRLAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:502 isFatal:0 description:"Did not end previous alignment operation before beginning new one"];
  }
  id v10 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(void **)(v11 + 176);
  *(void *)(v11 + 176) = v10;

  id v13 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 88);
  *(void *)(v14 + 88) = v13;

  id v16 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void **)(v17 + 80);
  *(void *)(v17 + 80) = v16;

  id v19 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v20 = *(void *)(a1 + 32);
  unint64_t v21 = *(void **)(v20 + 112);
  *(void *)(v20 + 112) = v19;

  id v22 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v23 = *(void *)(a1 + 32);
  unint64_t v24 = *(void **)(v23 + 120);
  *(void *)(v23 + 120) = v22;

  id v25 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v26 = *(void *)(a1 + 32);
  double v27 = *(void **)(v26 + 128);
  *(void *)(v26 + 128) = v25;

  id v28 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v29 = *(void *)(a1 + 32);
  __int16 v30 = *(void **)(v29 + 136);
  *(void *)(v29 + 136) = v28;

  id v31 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v32 = *(void *)(a1 + 32);
  double v33 = *(void **)(v32 + 144);
  *(void *)(v32 + 144) = v31;

  id v34 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v35 = *(void *)(a1 + 32);
  double v36 = *(void **)(v35 + 152);
  *(void *)(v35 + 152) = v34;

  if (*(unsigned char *)(a1 + 88)) {
    unsigned __int8 v37 = 0;
  }
  else {
    unsigned __int8 v37 = [(id)objc_opt_class() shouldAlignCenters];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 185) = v37;
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = [(id)objc_opt_class() shouldAlignEdges];
  if (*(unsigned char *)(a1 + 89)) {
    unsigned __int8 v38 = 0;
  }
  else {
    unsigned __int8 v38 = [(id)objc_opt_class() shouldAlignToSpacingGuides];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 186) = v38;
  if (*(unsigned char *)(a1 + 90)) {
    unsigned __int8 v39 = 0;
  }
  else {
    unsigned __int8 v39 = [(id)objc_opt_class() shouldAlignToSizingGuides];
  }
  *((unsigned char *)*v2 + 187) = v39;
  *((unsigned char *)*v2 + 188) = [(id)objc_opt_class() shouldAlignEdgesToTemplateGuides];
  if (*((unsigned char *)*v2 + 187))
  {
    id v40 = objc_alloc_init((Class)NSMutableArray);
    long long v41 = (void *)*((void *)*v2 + 13);
    *((void *)*v2 + 13) = v40;

    id v42 = objc_alloc_init((Class)NSMutableArray);
    unint64_t v43 = (void *)*((void *)*v2 + 12);
    *((void *)*v2 + 12) = v42;
  }
  __int16 v44 = [*(id *)(a1 + 40) anyObject];
  __int16 v45 = [v44 layout];
  uint64_t v46 = [v45 parentLayoutForProvidingGuides];
  uint64_t v47 = *(void *)(*(void *)(a1 + 56) + 8);
  long long v48 = *(void **)(v47 + 40);
  *(void *)(v47 + 40) = v46;

  long long v49 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (!v49)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    return;
  }
  long long v50 = [v49 layoutsForProvidingGuidesForChildLayouts];
  id v51 = [v50 mutableCopy];
  uint64_t v52 = *(void *)(*(void *)(a1 + 72) + 8);
  double v53 = *(void **)(v52 + 40);
  *(void *)(v52 + 40) = v51;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));
  [WeakRetained visibleUnscaledRect];
  double v56 = v55;
  double v58 = v57;
  double v60 = v59;
  double v62 = v61;

  v63 = *(void **)(a1 + 48);
  if (v63)
  {
    id v64 = *v2;
    v65 = [v63 layout];
    [v64 p_alignmentFrameInRootForLayout:v65];
    double y = v67;
    double x = v66;
    double height = v69;
    double width = v68;
  }
  else
  {
    double y = CGRectNull.origin.y;
    double x = CGRectNull.origin.x;
    double height = CGRectNull.size.height;
    double width = CGRectNull.size.width;
  }
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  id v70 = *(id *)(a1 + 40);
  id v71 = [v70 countByEnumeratingWithState:&v160 objects:v168 count:16];
  if (v71)
  {
    id v72 = v71;
    uint64_t v73 = *(void *)v161;
LABEL_41:
    uint64_t v74 = 0;
    while (1)
    {
      if (*(void *)v161 != v73) {
        objc_enumerationMutation(v70);
      }
      v75 = *(void **)(*((void *)&v160 + 1) + 8 * v74);
      v76 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      v77 = [v75 layout];
      v78 = [v77 parentLayoutForProvidingGuides];

      if (v76 != v78) {
        break;
      }
      v79 = [v75 layout];
      [*v2 p_alignmentFrameInRootForLayout:v79];
      double v81 = v80;
      double v83 = v82;
      double v85 = v84;
      double v87 = v86;
      if (![v75 providesGuidesWhileAligning]
        || !sub_10006525C(v81, v83, v85, v87, v56, v58, v60, v62))
      {
        [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) removeObject:v79];
      }

      if (v72 == (id)++v74)
      {
        id v72 = [v70 countByEnumeratingWithState:&v160 objects:v168 count:16];
        if (!v72) {
          goto LABEL_50;
        }
        goto LABEL_41;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
LABEL_88:

    return;
  }
LABEL_50:

  if (*((void *)*v2 + 24))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDB78);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106A2C4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDB98);
    }
    v88 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v88);
    }
    v89 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke");
    v90 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v89, v90, 565, 0, "expected nil value for '%{public}s'", "_alignmentFrameInRootByLayout");
  }
  id v91 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:0 capacity:0];
  uint64_t v92 = *(void *)(a1 + 32);
  v93 = *(void **)(v92 + 192);
  *(void *)(v92 + 192) = v91;

  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  id v94 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  id v95 = [v94 countByEnumeratingWithState:&v156 objects:v167 count:16];
  if (v95)
  {
    id v96 = v95;
    uint64_t v97 = *(void *)v157;
    do
    {
      for (uint64_t i = 0; i != v96; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v157 != v97) {
          objc_enumerationMutation(v94);
        }
        v99 = *(void **)(*((void *)&v156 + 1) + 8 * i);
        [v99 alignmentFrameForProvidingGuidesInRoot];
        v100 = (void *)*((void *)*v2 + 24);
        v101 = +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:");
        [v100 setObject:v101 forKey:v99];
      }
      id v96 = [v94 countByEnumeratingWithState:&v156 objects:v167 count:16];
    }
    while (v96);
  }

  v102 = *(void **)(a1 + 48);
  if (!v102)
  {
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    id v119 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    id v120 = [v119 countByEnumeratingWithState:&v148 objects:v165 count:16];
    if (v120)
    {
      id v121 = v120;
      uint64_t v122 = *(void *)v149;
      do
      {
        for (j = 0; j != v121; j = (char *)j + 1)
        {
          if (*(void *)v149 != v122) {
            objc_enumerationMutation(v119);
          }
          [*v2 p_addGuidesForLayout:*(void *)(*((void *)&v148 + 1) + 8 * (void)j)];
        }
        id v121 = [v119 countByEnumeratingWithState:&v148 objects:v165 count:16];
      }
      while (v121);
    }

    id v124 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) mutableCopy];
    uint64_t v125 = *(void *)(*(void *)(a1 + 80) + 8);
    v126 = *(void **)(v125 + 40);
    *(void *)(v125 + 40) = v124;

    v127 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    v147[0] = _NSConcreteStackBlock;
    v147[1] = 3221225472;
    v147[2] = sub_1000494DC;
    v147[3] = &unk_1014CDBC0;
    v147[4] = *(void *)(a1 + 32);
    v128 = +[NSPredicate predicateWithBlock:v147];
    [v127 filterUsingPredicate:v128];

    if (([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) exclusivelyProvidesGuidesForChildLayouts] & 1) == 0)
    {
      id v129 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));
      v130 = [v129 provideDynamicGuidesForLayout:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

      long long v145 = 0u;
      long long v146 = 0u;
      long long v143 = 0u;
      long long v144 = 0u;
      id v131 = v130;
      id v132 = [v131 countByEnumeratingWithState:&v143 objects:v164 count:16];
      if (v132)
      {
        id v133 = v132;
        uint64_t v134 = *(void *)v144;
        do
        {
          for (k = 0; k != v133; k = (char *)k + 1)
          {
            if (*(void *)v144 != v134) {
              objc_enumerationMutation(v131);
            }
            v136 = *(void **)(*((void *)&v143 + 1) + 8 * (void)k);
            uint64_t v137 = *((unsigned __int8 *)*v2 + 184);
            [v136 setSnapsToMax:v137];
            [v136 setSnapsToMin:v137];
            [v136 setSnapsToMid:*((unsigned __int8 *)*v2 + 185)];
            if ([v136 guideType]) {
              uint64_t v138 = 120;
            }
            else {
              uint64_t v138 = 112;
            }
            [*v2 p_addAlignmentGuide:v136 toSortedArray:*(void *)((char *)*v2 + v138)];
          }
          id v133 = [v131 countByEnumeratingWithState:&v143 objects:v164 count:16];
        }
        while (v133);
      }
    }
    return;
  }
  if ([v102 providesGuidesWhileAligning])
  {
    id v70 = [*(id *)(a1 + 48) layout];
    if (([v70 shouldDisplayGuides] & 1) == 0) {
      goto LABEL_88;
    }
    BOOL v103 = sub_10006525C(x, y, width, height, v56, v58, v60, v62);

    if (v103)
    {
      v104 = *(void **)(a1 + 32);
      v105 = [*(id *)(a1 + 48) layout];
      [v104 p_addGuidesForLayout:v105];

      id v106 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));
      v107 = [v106 infosForGuides];

      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      id v70 = v107;
      id v108 = [v70 countByEnumeratingWithState:&v152 objects:v166 count:16];
      if (!v108) {
        goto LABEL_86;
      }
      id v109 = v108;
      uint64_t v110 = *(void *)v153;
      while (1)
      {
        v111 = 0;
        do
        {
          if (*(void *)v153 != v110) {
            objc_enumerationMutation(v70);
          }
          uint64_t v112 = *(void *)(*((void *)&v152 + 1) + 8 * (void)v111);
          id v113 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));
          v114 = [v113 layoutForInfo:v112];

          v115 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          if (v115 == v114)
          {
            if (![v114 shouldProvideGuidesDuringExclusiveAlignmentOperation]) {
              goto LABEL_81;
            }
LABEL_80:
            [*v2 p_addGuidesForLayout:v114];
            goto LABEL_81;
          }
          v116 = [v114 parentLayoutForProvidingGuides];
          if (v115 != v116)
          {

            goto LABEL_81;
          }
          unsigned __int8 v117 = [v114 shouldProvideGuidesDuringExclusiveAlignmentOperation];

          if (v117) {
            goto LABEL_80;
          }
LABEL_81:

          v111 = (char *)v111 + 1;
        }
        while (v109 != v111);
        id v118 = [v70 countByEnumeratingWithState:&v152 objects:v166 count:16];
        id v109 = v118;
        if (!v118)
        {
LABEL_86:

          goto LABEL_88;
        }
      }
    }
  }
}

void sub_100049344(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100049388(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000493CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100049410(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100049454(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100049498(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000494DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  double v5 = sub_1002469D0(v4, v3);

  double v6 = [*(id *)(a1 + 32) interactiveCanvasController];
  LODWORD(v3) = [v6 shouldGenerateGuidesForLayout:v5];

  if (v3) {
    id v7 = [v5 shouldDisplayGuides];
  }
  else {
    id v7 = 0;
  }

  return v7;
}

void sub_100049570(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    id v3 = objc_alloc_init(CRLBidirectionalGeometricOperator);
    [(CRLBidirectionalGeometricOperator *)v3 setOrientationDependentValueForKey:@"CRLCanvasGuideControllerHorizontalGuideDictionaryKey" withStandardValue:*(void *)(*(void *)(a1 + 40) + 112) andSwappedValue:*(void *)(*(void *)(a1 + 40) + 120)];
    [(CRLBidirectionalGeometricOperator *)v3 setOrientationDependentValueForKey:@"CRLCanvasGuideControllerVerticalSpacingDictionaryKey" withStandardValue:*(void *)(*(void *)(a1 + 40) + 80) andSwappedValue:*(void *)(*(void *)(a1 + 40) + 88)];
    [(CRLBidirectionalGeometricOperator *)v3 setOrientationDependentValueForKey:@"CRLCanvasGuideControllerHorizontalCenterSpacingGuideDictionaryKey" withStandardValue:*(void *)(*(void *)(a1 + 40) + 152) andSwappedValue:*(void *)(*(void *)(a1 + 40) + 144)];
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(v4 + 24);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 16));
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v6 + 187))
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        id v7 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        id v8 = [v7 countByEnumeratingWithState:&v52 objects:v56 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v53;
          do
          {
            for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v53 != v10) {
                objc_enumerationMutation(v7);
              }
              int v12 = *(void **)(*((void *)&v52 + 1) + 8 * i);
              [*(id *)(a1 + 40) p_alignmentFrameInRootForLayout:v12];
              double v14 = v13;
              double v16 = v15;
              double v18 = v17;
              double v20 = v19;
              if ([v12 shouldProvideSizingGuides])
              {
                unint64_t v21 = -[CRLCanvasSizingGuide initWithType:frame:]([CRLCanvasSizingGuide alloc], "initWithType:frame:", 0, v14, v16, v18, v20);
                [*(id *)(a1 + 40) p_addSizingGuide:v21 toSortedArray:*(void *)(*(void *)(a1 + 40) + 104)];
                id v22 = -[CRLCanvasSizingGuide initWithType:frame:]([CRLCanvasSizingGuide alloc], "initWithType:frame:", 1, v14, v16, v18, v20);

                [*(id *)(a1 + 40) p_addSizingGuide:v22 toSortedArray:*(void *)(*(void *)(a1 + 40) + 96)];
              }
            }
            id v9 = [v7 countByEnumeratingWithState:&v52 objects:v56 count:16];
          }
          while (v9);
        }

        uint64_t v6 = *(void *)(a1 + 40);
      }
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v6 + 16), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = *(void *)(v23 + 24);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v23 + 16));
      if (v24 == 1)
      {
        id v25 = (char *)[*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count];
        uint64_t v26 = *(void *)(a1 + 40);
        if (v25 && *(unsigned char *)(v26 + 186))
        {
          double v27 = v25;
          long long v48 = v25 - 1;
          if (v25 != (char *)1)
          {
            id v28 = 0;
            while (1)
            {
              dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
              uint64_t v29 = *(void *)(a1 + 40);
              uint64_t v30 = *(void *)(v29 + 24);
              dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v29 + 16));
              if (v30 != 1) {
                goto LABEL_30;
              }
              id v31 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectAtIndexedSubscript:v28];
              [*(id *)(a1 + 40) p_alignmentFrameInRootForLayout:v31];
              uint64_t v33 = v32;
              uint64_t v35 = v34;
              uint64_t v37 = v36;
              uint64_t v39 = v38;
              id v40 = ++v28;
              do
              {
                long long v41 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectAtIndexedSubscript:v40, v48];
                [*(id *)(a1 + 40) p_alignmentFrameInRootForLayout:v41];
                v51[0] = _NSConcreteStackBlock;
                v51[1] = 3221225472;
                v51[2] = sub_100049A40;
                v51[3] = &unk_1014CDC10;
                v51[5] = v33;
                v51[6] = v35;
                v51[7] = v37;
                v51[8] = v39;
                v51[9] = v42;
                v51[10] = v43;
                v51[11] = v44;
                v51[12] = v45;
                v51[4] = *(void *)(a1 + 40);
                [(CRLBidirectionalGeometricOperator *)v3 executeBidirectionalOperation:v51];

                ++v40;
              }
              while (v27 != v40);

              if (v28 == v48)
              {
                uint64_t v26 = *(void *)(a1 + 40);
                break;
              }
            }
          }
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_100049D1C;
          v50[3] = &unk_1014CDC38;
          v50[4] = v26;
          -[CRLBidirectionalGeometricOperator executeBidirectionalOperation:](v3, "executeBidirectionalOperation:", v50, v48);
          uint64_t v26 = *(void *)(a1 + 40);
        }
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v26 + 16), 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v46 = *(void *)(a1 + 40);
        uint64_t v47 = *(void *)(v46 + 24);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v46 + 16));
        if (v47 == 1)
        {

          goto LABEL_2;
        }
      }
    }
LABEL_30:

    return;
  }
LABEL_2:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 24) == 1)
  {
    *(void *)(v2 + 24) = 2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100049F50;
    block[3] = &unk_1014CBBB0;
    block[4] = *(void *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    uint64_t v2 = *(void *)(a1 + 40);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
}

void sub_100049A40(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v5 = a3;
  if (objc_msgSend(v28, "rect:verticallyOverlapsRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)))
  {
    if ((objc_msgSend(v28, "rect:horizontallyOverlapsRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)) & 1) == 0)
    {
      [v28 makeVerticalSpacingRectBetweenRect:*(double *)(a1 + 40) andRect:*(double *)(a1 + 48) *(double *)(a1 + 56) *(double *)(a1 + 64) *(double *)(a1 + 72) *(double *)(a1 + 80) *(double *)(a1 + 88) *(double *)(a1 + 96)];
      double v7 = v6;
      double v9 = v8;
      double v11 = v10;
      double v13 = v12;
      [v28 rectWidth:];
      if (v14 >= 1.0)
      {
        [v28 rectHeight:v7, v9, v11, v13];
        if (v15 >= 1.0)
        {
          [v28 rectHeight:v7, v9, v11, v13];
          uint64_t v17 = (int)sub_100407DFC(v16);
          BOOL v18 = sub_1004BB3CC((int)[v28 verticalOrientation]);
          double v19 = [v5 valueForKey:@"CRLCanvasGuideControllerVerticalSpacingDictionaryKey"];
          double v20 = +[NSNumber numberWithInt:v17];
          unint64_t v21 = [v19 objectForKey:v20];

          if (v21)
          {
            -[CRLCanvasSpacing addSpacingRect:forFrame:andFrame:](v21, "addSpacingRect:forFrame:andFrame:", v7, v9, v11, v13, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
          }
          else
          {
            unint64_t v21 = -[CRLCanvasSpacing initWithGuideType:withSpacingRect:forFrame:andFrame:]([CRLCanvasSpacing alloc], "initWithGuideType:withSpacingRect:forFrame:andFrame:", v18, v7, v9, v11, v13, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
            id v22 = +[NSNumber numberWithInt:[(CRLCanvasSpacing *)v21 integerOffset]];
            [v19 setObject:v21 forKey:v22];
          }
          id v23 = -[CRLCanvasCenterAlignmentGuide initBetweenRect:andRect:withGuideType:]([CRLCanvasCenterAlignmentGuide alloc], "initBetweenRect:andRect:withGuideType:", v18, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
          uint64_t v24 = *(void **)(a1 + 32);
          id v25 = [v5 valueForKey:@"CRLCanvasGuideControllerHorizontalGuideDictionaryKey"];
          [v24 p_addCenterAlignmentGuide:v23 toSortedArray:v25];

          uint64_t v26 = *(void **)(a1 + 32);
          double v27 = [v5 valueForKey:@"CRLCanvasGuideControllerHorizontalCenterSpacingGuideDictionaryKey"];
          [v26 p_addCenterAlignmentGuide:v23 toSortedArray:v27];
        }
      }
    }
  }
}

void sub_100049D1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 valueForKey:@"CRLCanvasGuideControllerVerticalSpacingDictionaryKey"];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v22 = v34 = 0u;
  id obj = [v22 allValues];
  id v25 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v25)
  {
    uint64_t v24 = *(void *)v32;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v32 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v5;
        double v6 = *(void **)(*((void *)&v31 + 1) + 8 * v5);
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        double v7 = [v6 associatedFrames];
        id v8 = [v7 countByEnumeratingWithState:&v27 objects:v35 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v28;
          do
          {
            double v11 = 0;
            do
            {
              if (*(void *)v28 != v10) {
                objc_enumerationMutation(v7);
              }
              double v12 = *(void **)(a1 + 32);
              [*(id *)(*((void *)&v27 + 1) + 8 * (void)v11) CGRectValue];
              double v14 = v13;
              double v16 = v15;
              double v18 = v17;
              double v20 = v19;
              unint64_t v21 = [v4 valueForKey:@"kCRLBidirectionalGeometricOperatorValuesAreSwapped"];
              [v12 p_addSpacingGuidesForFrame:v6 spacing:[v21 BOOLValue] ^ 1 isVerticalSpacing:v14 v16 v18 v20];

              double v11 = (char *)v11 + 1;
            }
            while (v9 != v11);
            id v9 = [v7 countByEnumeratingWithState:&v27 objects:v35 count:16];
          }
          while (v9);
        }

        uint64_t v5 = v26 + 1;
      }
      while ((id)(v26 + 1) != v25);
      id v25 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
    }
    while (v25);
  }
}

intptr_t sub_100049F50(uint64_t a1)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 24);
  intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
  if (v3 == 2)
  {
    v13.origin.double x = CGRectNull.origin.x;
    v13.origin.double y = CGRectNull.origin.y;
    v13.size.double width = CGRectNull.size.width;
    v13.size.double height = CGRectNull.size.height;
    intptr_t result = CGRectEqualToRect(*(CGRect *)(*(void *)(a1 + 32) + 32), v13);
    if ((result & 1) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(v5 + 64);
      uint64_t v7 = *(unsigned __int8 *)(v5 + 72);
      double v8 = *(double *)(v5 + 32);
      double v9 = *(double *)(v5 + 40);
      double v10 = *(double *)(v5 + 48);
      double v11 = *(double *)(v5 + 56);
      return (intptr_t)[v5 showGuidesAlignedWithRect:v6 forKnobTag:1 shouldRenderX:1 shouldRenderY:v7 shouldRenderSizeGuides:v8 v10, v11];
    }
  }
  return result;
}

void sub_10004A7F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004A83C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004A880(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004A8C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004A908(uint64_t a1, void *a2, void *a3)
{
  id v78 = a2;
  id v5 = a3;
  [v5 setValue:&off_10155D0D0 forKey:@"CRLCanvasGuideControllerHorizontalSnapOffsetKey"];
  [v5 setValue:&__kCFBooleanFalse forKey:@"CRLCanvasGuideControllerDidSnapHorizontalKey"];
  double v6 = *(double *)(a1 + 40);
  id v7 = [v78 edgeForStandardRectEdge:0];
  id v8 = [v78 edgeForStandardRectEdge:1];
  id v9 = [v78 edgeForStandardRectEdge:2];
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v7, *(void *)(a1 + 48)))
  {
    [v78 rectMinX:*(double *)(a1 + 56) rectMinY:*(double *)(a1 + 64) rectWidth:*(double *)(a1 + 72) rectHeight:*(double *)(a1 + 80)];
    double v11 = v10;
    double v12 = [*(id *)(a1 + 32) p_guideClosestToEdge:v7 ofFrame:*(double *)(a1 + 56) *(double *)(a1 + 64) *(double *)(a1 + 72) *(double *)(a1 + 80)];
    CGRect v13 = v12;
    if (v12 && ([v12 offset], vabdd_f64(v14, v11) < fabs(v6)))
    {
      double v6 = v14 - v11;
      id v15 = v13;
    }
    else
    {
      id v15 = 0;
    }
  }
  else
  {
    id v15 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v9, *(void *)(a1 + 48)))
  {
    [v78 rectMaxX:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
    double v17 = v16;
    double v18 = [*(id *)(a1 + 32) p_guideClosestToEdge:v9 ofFrame:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
    double v19 = v18;
    if (v18)
    {
      [v18 offset];
      if (vabdd_f64(v20, v17) < fabs(v6))
      {
        double v6 = v20 - v17;
        id v21 = v19;

        id v15 = v21;
      }
    }
  }
  double v22 = 1.0;
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v8, *(void *)(a1 + 48)))
  {
    [v78 rectMidX:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
    double v24 = v23;
    id v25 = [*(id *)(a1 + 32) p_guideClosestToEdge:v8 ofFrame:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
    uint64_t v26 = v25;
    if (v25)
    {
      [v25 offset];
      double v28 = vabdd_f64(v27, v24);
      double v29 = fabs(v6);
      if (v28 > 0.001 && v28 < v29)
      {
        double v6 = v27 - v24;
        id v31 = v26;

        if (*(void *)(a1 + 48)) {
          double v22 = 2.0;
        }
        else {
          double v22 = 1.0;
        }
        id v15 = v31;
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 32) + 186))
  {
    unsigned int v32 = [v78 isFlipped];
    uint64_t v33 = 128;
    if (v32) {
      uint64_t v33 = 136;
    }
    id v34 = *(id *)(*(void *)(a1 + 32) + v33);
    unsigned int v35 = [v78 isFlipped];
    uint64_t v36 = 144;
    if (v35) {
      uint64_t v36 = 152;
    }
    id v37 = *(id *)(*(void *)(a1 + 32) + v36);
    char v38 = [v78 knobTagForStandardKnobTag:*(void *)(a1 + 48)];
    char v39 = v38;
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 184))
    {
      if (!*(void *)(a1 + 48) || (sub_1002893CC(v38) & 0x92) != 0)
      {
        [v78 rectMinX:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), v37];
        double v41 = v40;
        uint64_t v42 = *(void **)(a1 + 32);
        uint64_t v43 = [v42 p_predicateCanBeSnappedToByEdge:v7 ofFrame:*(double *)(a1 + 56) inVisibleUnscaledRect:*(double *)(a1 + 64) *(double *)(a1 + 72) *(double *)(a1 + 80) *(double *)(a1 + 88) *(double *)(a1 + 96) *(double *)(a1 + 104) *(double *)(a1 + 112)];
        uint64_t v44 = [v42 p_closestGuideForOffset:v43 predicate:v34 inArray:v41];

        if (v44)
        {
          [v44 offset];
          if (vabdd_f64(v45, v41) < fabs(v6))
          {
            double v6 = v45 - v41;
            id v46 = v44;

            double v22 = 1.0;
            id v15 = v46;
          }
        }
        id v37 = v77;
      }
      uint64_t v47 = v78;
      if (!*(void *)(a1 + 48) || (v48 = (sub_1002893CC(v39) & 0x248) == 0, uint64_t v47 = v78, !v48))
      {
        [v47 rectMaxX:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
        double v50 = v49;
        id v51 = *(void **)(a1 + 32);
        long long v52 = [v51 p_predicateCanBeSnappedToByEdge:v9 ofFrame:*(double *)(a1 + 56) inVisibleUnscaledRect:*(double *)(a1 + 64) *(double *)(a1 + 72) *(double *)(a1 + 80) *(double *)(a1 + 88) *(double *)(a1 + 96) *(double *)(a1 + 104) *(double *)(a1 + 112)];
        long long v53 = [v51 p_closestGuideForOffset:v52 predicate:v34 inArray:v50];

        if (v53)
        {
          [v53 offset];
          if (vabdd_f64(v54, v50) < fabs(v6))
          {
            double v6 = v54 - v50;
            id v55 = v53;

            double v22 = 1.0;
            id v15 = v55;
          }
        }
      }
    }
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 185)
      && (!*(void *)(a1 + 48) || (sub_1002893CC(v39) & 4) == 0 && (sub_1002893CC(v39) & 0x100) == 0))
    {
      [v78 rectMidX:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
      double v57 = v56;
      double v58 = *(void **)(a1 + 32);
      double v59 = [v58 p_predicateCanBeSnappedToByEdge:v8 ofFrame:*(double *)(a1 + 56) inVisibleUnscaledRect:*(double *)(a1 + 64) *(double *)(a1 + 72) *(double *)(a1 + 80) *(double *)(a1 + 88) *(double *)(a1 + 96) *(double *)(a1 + 104) *(double *)(a1 + 112)];
      double v60 = [v58 p_closestGuideForOffset:v59 predicate:v37 inArray:v57];

      if (v60)
      {
        [v60 offset];
        if (vabdd_f64(v61, v57) < fabs(v6))
        {
          double v6 = v61 - v57;
          id v62 = v60;

          if (*(void *)(a1 + 48)) {
            double v22 = 2.0;
          }
          else {
            double v22 = 1.0;
          }
          id v15 = v62;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 187))
    {
      if ((sub_1002893CC(*(void *)(a1 + 48)) & 0x3DE) != 0)
      {
        [v78 rectWidth:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
        double v64 = v63;
        if (objc_msgSend(*(id *)(a1 + 32), "p_sizingGuidesAreRelevantForOrientation:whileDraggingKnobTag:", objc_msgSend(v78, "horizontalOrientation"), *(void *)(a1 + 48)))
        {
          v65 = [v5 valueForKey:@"kCRLBidirectionalGeometricOperatorValuesAreSwapped"];
          unsigned int v66 = [v65 BOOLValue];
          uint64_t v67 = 104;
          if (v66) {
            uint64_t v67 = 96;
          }
          id v68 = *(id *)(*(void *)(a1 + 32) + v67);

          double v69 = *(void **)(a1 + 32);
          id v70 = [v69 p_predicateCanBeSnappedToInVisibleUnscaledRect:*(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112)];
          id v71 = [v69 p_closestGuideForOffset:v70 predicate:v68 inArray:v64];

          if (v71)
          {
            char v72 = sub_1002893CC((char)[v78 knobTagForStandardKnobTag:*(void *)(a1 + 48)]);
            [v71 offset];
            if (vabdd_f64(v73, v64) < fabs(v6))
            {
              double v74 = v73 - v64;
              if ((v72 & 0x92) != 0) {
                double v6 = -v74;
              }
              else {
                double v6 = v74;
              }
              id v75 = v71;

              double v22 = 1.0;
              id v15 = v75;
            }
          }
        }
      }
    }
  }
  if (v15 && fabs(v6) < *(double *)(a1 + 40))
  {
    v76 = +[NSNumber numberWithDouble:v22 * v6];
    [v5 setValue:v76 forKey:@"CRLCanvasGuideControllerHorizontalSnapOffsetKey"];

    [v5 setValue:&__kCFBooleanTrue forKey:@"CRLCanvasGuideControllerDidSnapHorizontalKey"];
  }
}

void sub_10004BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_10004BF6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004BFB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004BFF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004C038(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10004C07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = sub_1002469D0(v4, v3);
  uint64_t v6 = objc_opt_class();
  id v7 = sub_1002469D0(v6, v3);

  if (v5)
  {
    if ([v5 guideType] == (id)1)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      if (*(void *)(v8 + 40))
      {
        [*(id *)(a1 + 32) p_spacingForCenterOrSpacingGuide:v5];
        double v10 = v9;
        double v11 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) parentSpacing];
        [v11 exactOffset];
        double v13 = v12;

        if (v13 > v10)
        {
          uint64_t v14 = *(void *)(a1 + 40);
LABEL_14:
          uint64_t v8 = *(void *)(v14 + 8);
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
      if (*(void *)(v8 + 40))
      {
        [*(id *)(a1 + 32) p_spacingForCenterOrSpacingGuide:v5];
        double v21 = v20;
        double v22 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) parentSpacing];
        [v22 exactOffset];
        double v24 = v23;

        if (v24 > v21)
        {
          uint64_t v14 = *(void *)(a1 + 48);
          goto LABEL_14;
        }
LABEL_23:
        uint64_t v27 = 0;
        goto LABEL_24;
      }
    }
LABEL_15:
    id v25 = (void **)(v8 + 40);
    uint64_t v26 = v5;
LABEL_22:
    id v31 = v26;
    unsigned int v32 = *v25;
    void *v25 = v31;

    goto LABEL_23;
  }
  if (v7)
  {
    if ([v7 guideType])
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
      if (*(void *)(v15 + 40))
      {
        [*(id *)(a1 + 32) p_spacingForCenterOrSpacingGuide:v7];
        double v17 = v16;
        [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) exactOffset];
        if (v18 <= v17) {
          goto LABEL_23;
        }
        uint64_t v19 = *(void *)(a1 + 64);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
      if (*(void *)(v15 + 40))
      {
        [*(id *)(a1 + 32) p_spacingForCenterOrSpacingGuide:v7];
        double v29 = v28;
        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) exactOffset];
        if (v30 <= v29) {
          goto LABEL_23;
        }
        uint64_t v19 = *(void *)(a1 + 56);
LABEL_20:
        uint64_t v15 = *(void *)(v19 + 8);
      }
    }
    id v25 = (void **)(v15 + 40);
    uint64_t v26 = v7;
    goto LABEL_22;
  }
  uint64_t v27 = 1;
LABEL_24:

  return v27;
}

void sub_10004C66C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004C6B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004CBB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004CBFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_10004CC40(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 32);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  if (v3) {
    BOOL v4 = v3 == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDE28);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106A998();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CDE48);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController endAlignmentOperation]_block_invoke");
    id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1480, 0, "Working on cancellation/cleanup when state doesn't expect it! %lu", *(void *)(*v1 + 24));

    uint64_t v2 = *v1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
  uint64_t v8 = *(void **)(*v1 + 160);
  *(void *)(*v1 + 160) = 0;

  float v9 = *(void **)(*v1 + 168);
  *(void *)(*v1 + 168) = 0;

  double v10 = *(void **)(*v1 + 176);
  *(void *)(*v1 + 176) = 0;

  double v11 = *(void **)(*v1 + 88);
  *(void *)(*v1 + 88) = 0;

  double v12 = *(void **)(*v1 + 80);
  *(void *)(*v1 + 80) = 0;

  double v13 = *(void **)(*v1 + 120);
  *(void *)(*v1 + 120) = 0;

  uint64_t v14 = *(void **)(*v1 + 112);
  *(void *)(*v1 + 112) = 0;

  uint64_t v15 = *(void **)(*v1 + 128);
  *(void *)(*v1 + 128) = 0;

  float v16 = *(void **)(*v1 + 136);
  *(void *)(*v1 + 136) = 0;

  double v17 = *(void **)(*v1 + 144);
  *(void *)(*v1 + 144) = 0;

  double v18 = *(void **)(*v1 + 152);
  *(void *)(*v1 + 152) = 0;

  uint64_t v19 = *(void **)(*v1 + 192);
  *(void *)(*v1 + 192) = 0;

  uint64_t v20 = *v1;
  if (*(unsigned char *)(*v1 + 187))
  {
    double v21 = *(void **)(v20 + 96);
    *(void *)(v20 + 96) = 0;

    double v22 = *(void **)(*v1 + 104);
    *(void *)(*v1 + 104) = 0;

    uint64_t v20 = *v1;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v20 + 16), 0xFFFFFFFFFFFFFFFFLL);
  *(void *)(*v1 + 24) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*v1 + 16));
}

void sub_10004CED4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004CF18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004D7F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004D834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004D878(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004D8BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004DAC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004DB04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004E504(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004E548(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004EA58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004EA9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004EFA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004EFE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004F24C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004F290(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10004F398(double *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = sub_1002469D0(v4, v3);

  id v6 = [v5 isAssociatedContentVisibleInUnscaledRect:a1[4], a1[5], a1[6], a1[7]];
  return v6;
}

id sub_10004F4A0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "canBeSnappedToByEdge:ofFrame:inVisibleUnscaledRect:", *(unsigned int *)(a1 + 96), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
}

void sub_10004F618(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void sub_10004F630(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x2Cu);
}

void sub_10004FCD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10004FD18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000504A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000504E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000506D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005071C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100050B0C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  uint64_t v4 = sub_100050BC0;
  uint64_t v5 = &unk_1014CE130;
  id v6 = *(id *)(a1 + 32);
  char v7 = a2;
  if (+[NSThread isMainThread]) {
    v4((uint64_t)v3);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

uint64_t sub_100050BC0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100050D8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100050DD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100050F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGPDFDocumentRef sub_100050F50(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 40);
  return CGPDFDocumentRetain(*(CGPDFDocumentRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

__n128 sub_100051078(uint64_t a1)
{
  __n128 result = *(__n128 *)(*(void *)(a1 + 32) + 48);
  *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = result;
  return result;
}

void sub_100051428(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005146C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_10005152C(uint64_t a1)
{
  CGPDFDocumentRelease(*(CGPDFDocumentRef *)(*(void *)(a1 + 32) + 40));
  *(void *)(*(void *)(a1 + 32) + 40) = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "i_loadState") == 1) {
    [*(id *)(a1 + 32) setI_loadState:0];
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 64), 0xFFFFFFFFFFFFFFFFLL);
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = 0;
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 64);

  return dispatch_semaphore_signal(v2);
}

void *sub_100051640(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 32);
  if (!result[5])
  {
    __n128 result = [result i_loadState];
    if (result != 2)
    {
      id v3 = [*(id *)(a1 + 32) p_load];
      *(void *)(*(void *)(a1 + 32) + 40) = v3;
      if (v3) {
        uint64_t v4 = 1;
      }
      else {
        uint64_t v4 = 2;
      }
      [*(id *)(a1 + 32) setI_loadState:v4];
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 64), 0xFFFFFFFFFFFFFFFFLL);
      *(unsigned char *)(*(void *)(a1 + 32) + 72) = 1;
      uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 64);
      return (void *)dispatch_semaphore_signal(v5);
    }
  }
  return result;
}

void sub_100051AC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100051B0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100051D60(uint64_t a1)
{
  return [*(id *)(a1 + 32) setContentOffset:*(double *)(a1 + 40) *(double *)(a1 + 48)];
}

void sub_100051D6C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 scrollViewDidEndScrollingAnimation:*(void *)(a1 + 32)];
  }
}

id sub_100052E0C(uint64_t a1)
{
  [*(id *)(a1 + 32) setCenter: *(double *)(a1 + 40), *(double *)(a1 + 48)];
  v5.origin.double x = sub_100064070();
  CGRect v6 = CGRectIntegral(v5);
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setBounds:v6.origin.x, v6.origin.y, v6.size.width, v6.size.height];
}

id sub_100052F34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 p_growTransform];
    uint64_t v2 = *(void **)(a1 + 32);
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
  }
  v4[0] = v5;
  v4[1] = v6;
  v4[2] = v7;
  return [v2 setTransform:v4];
}

id sub_100052F98(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) pointDidLeaveOriginalLine];
  double v3 = 0.33;
  if (v2) {
    double v3 = 0.0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100053084;
  void v6[3] = &unk_1014CBBB0;
  uint64_t v7 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000530E8;
  v5[3] = &unk_1014CE260;
  v5[4] = v7;
  return +[UIView animateWithDuration:0x20000 delay:v6 options:v5 animations:v3 completion:0.0];
}

id sub_100053084(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 p_shrinkTransform];
    unsigned int v2 = *(void **)(a1 + 32);
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
  }
  v4[0] = v5;
  v4[1] = v6;
  v4[2] = v7;
  return [v2 setTransform:v4];
}

id sub_1000530E8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) pointDidLeaveOriginalLine];
  double v3 = 0.35;
  if (v2) {
    double v3 = 0.0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000531D4;
  void v6[3] = &unk_1014CBBB0;
  uint64_t v7 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100053214;
  v5[3] = &unk_1014CE260;
  v5[4] = v7;
  return +[UIView animateWithDuration:0x20000 delay:v6 options:v5 animations:v3 completion:0.0];
}

id sub_1000531D4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [v1 setTransform:v4];
}

id sub_100053214(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsAnimatingPickup:0];
}

id sub_10005349C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_setBoundsAndCenterToCaretRect];
}

id sub_1000534A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_removeFromView];
}

void sub_100054354(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100054398(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000546FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100054740(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100054BC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100054C08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100054C4C(uint64_t a1)
{
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 24)))
  {
    id v3 = 0;
    id v4 = 0;
    BOOL v5 = 1;
  }
  else
  {
    long long v6 = *(void **)(a1 + 32);
    long long v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    id v11 = 0;
    id v4 = [v6 p_copyCGImageForTime:&v9 error:&v11];
    id v3 = v11;
    BOOL v5 = v4 == 0;
  }
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 24))) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = v5;
  }
  (*(void (**)(void, CGImage *, uint64_t, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v4, v8, v3);
  CGImageRelease(v4);
}

void sub_100054FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100054FC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100054FD8(uint64_t a1)
{
}

void sub_100054FE0(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) crlaxStorage];
  uint64_t v2 = [v5 smartFieldAtCharIndex:*(void *)(a1 + 56) attributeKind:6 effectiveRange:*(void *)(*(void *)(a1 + 48) + 8) + 32];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100055058(uint64_t a1)
{
  return [*(id *)(a1 + 32) crlaxSetSelectedTextRange:*(void *)(a1 + 40), *(void *)(a1 + 48)];
}

id sub_100055104(uint64_t a1)
{
  return [*(id *)(a1 + 32) insertText:*(void *)(a1 + 40)];
}

id sub_1000551BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return [super cut:v1];
}

id sub_1000552A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return [super copy:v1];
}

id sub_10005538C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return [super paste:v1];
}

void sub_10005570C(uint64_t a1)
{
  if (+[CRLTextEditorAccessibility crlaxCommittingRemoteCommand](CRLTextEditorAccessibility, "crlaxCommittingRemoteCommand")|| ([*(id *)(a1 + 32) _crlaxIsDictating] & 1) != 0)
  {
    CFStringRef v4 = @"AXValueChangeUserInfoKeyIsQuiet";
    id v5 = &__kCFBooleanTrue;
    uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    UIAccessibilityPostNotification(CRLAccessibilityValueChangedNotification, v2);
  }
  else
  {
    UIAccessibilityNotifications v3 = CRLAccessibilityValueChangedNotification;
    UIAccessibilityPostNotification(v3, 0);
  }
}

void sub_100056834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100056878(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100056A24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100056A68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000576DC(id a1)
{
  uint64_t v1 = +[NSBundle mainBundle];
  id v8 = [v1 URLForResource:@"shape_library" withExtension:@"json"];

  uint64_t v2 = +[NSBundle mainBundle];
  UIAccessibilityNotifications v3 = [v2 URLForResource:@"CRLShapeLibraryCategorySort" withExtension:@"plist"];

  CFStringRef v4 = [CRLShapeLibrary alloc];
  id v5 = +[CRLLocale currentLocale];
  long long v6 = [(CRLShapeLibrary *)v4 initWithShapeLibraryURL:v8 categorySortURL:v3 locale:v5];
  uint64_t v7 = (void *)qword_1016A8F00;
  qword_1016A8F00 = (uint64_t)v6;
}

void sub_100057BD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100057C18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100057C5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100057CA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100058234(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100058278(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000585B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000585FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100058640(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) p_cacheDataAfterParsingWithSearchIndex:a2];
}

void sub_100058880(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000588C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100058908(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100058978;
  v3[3] = &unk_1014CE570;
  v3[4] = v1;
  return [v1 p_createSearchIndexWithCompletionHandler:v3];
}

void sub_100058978(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058A14;
  v5[3] = &unk_1014CBE78;
  v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

id sub_100058A14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_cacheDataAfterParsingWithSearchIndex:", *(void *)(a1 + 40));
}

void sub_100058B98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100058BDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100058DD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[CRLShapeLibraryShape shapeIDForShapeFromDictionary:v4];
  id v6 = +[CRLShapeLibraryShape localizedNameForShapeFromDictionary:v4];
  uint64_t v7 = [*(id *)(a1 + 32) p_shapeIDsToRemove];
  unsigned __int8 v8 = [v7 containsObject:v5];

  if ((v8 & 1) == 0)
  {
    long long v9 = +[CRLShapeLibraryShape localizedKeywordsForShapeFromDictionary:v4 keywordDelimiter:*(void *)(a1 + 40)];
    uint64_t v10 = [v9 crl_arrayByMappingObjectsUsingBlock:&stru_1014CE610];
    if (*(unsigned char *)(a1 + 56))
    {
      id v11 = +[CRLShapeLibraryShape baseKeywordsForShapeFromDictionary:v4 keywordDelimiter:*(void *)(a1 + 40)];
      uint64_t v12 = [v9 arrayByAddingObjectsFromArray:v11];

      double v13 = [v11 crl_arrayByMappingObjectsUsingBlock:&stru_1014CE630];
      uint64_t v14 = [v10 arrayByAddingObjectsFromArray:v13];

      uint64_t v10 = (void *)v14;
      long long v9 = (void *)v12;
    }
    uint64_t v15 = [v9 arrayByAddingObject:v6];

    float v16 = [v10 arrayByAddingObject:&off_10155D130];

    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v17 = +[CRLShapeLibraryShape baseNameForShapeFromDictionary:v4];
      double v18 = (void *)v17;
      if (v17)
      {
        uint64_t v25 = v17;
        uint64_t v19 = +[NSArray arrayWithObjects:&v25 count:1];
        uint64_t v20 = [v15 arrayByAddingObjectsFromArray:v19];

        uint64_t v21 = [v16 arrayByAddingObject:&off_10155D148];

        float v16 = (void *)v21;
        uint64_t v15 = (void *)v20;
      }
    }
    v23[0] = @"CRLShapeSearchIndexIdentifierKey";
    v23[1] = @"CRLShapeSearchIndexKeywords";
    v24[0] = v5;
    v24[1] = v15;
    v23[2] = @"CRLShapeSearchIndexPriorities";
    v24[2] = v16;
    double v22 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:3];
    [*(id *)(a1 + 48) addObject:v22];
  }
}

id sub_100059078(id a1, id a2)
{
  return &off_10155D100;
}

id sub_100059084(id a1, id a2)
{
  return &off_10155D118;
}

void sub_10005940C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100059450(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100059494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000594D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005951C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100059E78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100059EBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100059F00(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  uint64_t v7 = [v5 p_shapeIDsToRemove];
  unsigned int v8 = [v7 containsObject:v6];

  if (v8)
  {
    long long v9 = *(void **)(a1 + 40);
    [v9 addIndex:a3];
  }
}

void sub_100059F94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100059FD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A01C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A060(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A3F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A43C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A480(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005A4C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005AA10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005AA54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005B2D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  uint64_t v12 = sub_10005B3DC;
  double v13 = &unk_1014CE8E8;
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned int v8 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v7;
  long long v18 = *(_OWORD *)(a1 + 48);
  id v16 = v8;
  id v17 = v6;
  id v9 = v6;
  id v10 = v5;
  if (+[NSThread isMainThread]) {
    v12((uint64_t)v11);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);
  }
}

void sub_10005B3DC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) p_transitionToItemPromiseState:2];
    [*(id *)(a1 + 40) insertDroppedNativeBoardItemsFromProviders:*(void *)(a1 + 32) atUnscaledPoint:*(void *)(a1 + 48) onRep:0 isCrossAppSource:0 isCrossDocument:*(double *)(a1 + 64) *(double *)(a1 + 72)];
    uint64_t v2 = *(void **)(a1 + 40);
    [v2 cleanupEndOfDragOperation];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CE8C0);
    }
    id v3 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106BD98(v3);
    }
    [*(id *)(a1 + 40) p_transitionToItemPromiseState:3];
    [*(id *)(a1 + 40) cleanupEndOfDragOperation];
    if ([*(id *)(a1 + 56) count])
    {
      id v4 = [*(id *)(a1 + 40) interactiveCanvasController];
      id v5 = [v4 layerHost];
      [v5 presentErrors:*(void *)(a1 + 56) withLocalizedDescription:0 completionHandler:0];
    }
  }
}

void sub_10005B4FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10005B540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005B584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005B5C8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  id v5 = sub_10005B6B4;
  id v6 = &unk_1014CE8E8;
  id v7 = a2;
  long long v10 = *(_OWORD *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 32);
  id v9 = *(id *)(a1 + 48);
  id v3 = v7;
  if (+[NSThread isMainThread]) {
    v5((uint64_t)v4);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  }
}

id sub_10005B6B4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [[CRLBoardItemProviderFactory alloc] initWithBoardItemFactory:*(void *)(a1 + 40)];
    uint64_t v10 = *(void *)(a1 + 32);
    id v3 = +[NSArray arrayWithObjects:&v10 count:1];
    id v4 = -[CRLBoardItemProviderFactory providersForBoardItemsFromTextStorages:position:keepHighlights:](v2, "providersForBoardItemsFromTextStorages:position:keepHighlights:", v3, 0, *(double *)(a1 + 64), *(double *)(a1 + 72));

    id v5 = [v4 count];
    id v6 = *(void **)(a1 + 48);
    if (v5
      && (v7 = objc_msgSend(v6, "insertDroppedNativeBoardItemsFromProviders:atUnscaledPoint:onRep:isCrossAppSource:isCrossDocument:", v4, *(void *)(a1 + 56), 0, 0, *(double *)(a1 + 64), *(double *)(a1 + 72)), id v6 = *(void **)(a1 + 48), v7))
    {
      uint64_t v8 = 2;
    }
    else
    {
      uint64_t v8 = 3;
    }
    [v6 p_transitionToItemPromiseState:v8];
  }
  else
  {
    [*(id *)(a1 + 48) p_transitionToItemPromiseState:3];
  }
  return [*(id *)(a1 + 48) cleanupEndOfDragOperation];
}

void sub_10005B7DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005B820(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005B864(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  uint64_t v8 = sub_10005B948;
  id v9 = &unk_1014CE9E0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v10 = v3;
  uint64_t v11 = v4;
  long long v13 = *(_OWORD *)(a1 + 48);
  id v12 = v5;
  id v6 = v3;
  if (+[NSThread isMainThread]) {
    v8((uint64_t)block);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_10005B948(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = *(id **)(a1 + 40);
  if (v2)
  {
    if (v3[21])
    {
      [v3[21] endIgnoringUserInteractionSafely];
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = *(void **)(v4 + 168);
      *(void *)(v4 + 168) = 0;

      id v3 = *(id **)(a1 + 40);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10005BA38;
    v10[3] = &unk_1014CBBB0;
    v10[4] = v3;
    return [v3 insertDroppedImportableBoardItemsFromProviders:v6 atUnscaledPoint:v7 onRep:v10 completionHandler:*(double *)(a1 + 56) *(double *)(a1 + 64)];
  }
  else
  {
    [v3 p_transitionToItemPromiseState:3];
    id v9 = *(void **)(a1 + 40);
    return [v9 cleanupEndOfDragOperation];
  }
}

id sub_10005BA38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v3 = [v2 layerHost];
  uint64_t v4 = [v3 asiOSCVC];
  id v5 = [v4 crl_windowWrapper];
  id v6 = [v5 newWrapperBeginningIgnoringUserInteractionSafely];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 168);
  *(void *)(v7 + 168) = v6;

  [*(id *)(a1 + 32) p_transitionToItemPromiseState:2];
  id v9 = *(void **)(a1 + 32);

  return [v9 cleanupEndOfDragOperation];
}

void sub_10005BAE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005BB2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10005BB70(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_transitionToItemPromiseState:3];
}

void sub_10005BD04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10005BD48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10005C4C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10005C508(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C54C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C590(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C5D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C618(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C65C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C6A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C6E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C728(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005C76C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005CA40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005CA84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005CCB0(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

void sub_10005CF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005CF9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005CFE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005D258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005D280(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005D2C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005D4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005D6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005D700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005D744(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DB3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DB80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DD74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DDB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DFAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005DFF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005E1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E1E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005E224(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005E3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E410(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005E454(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10005F0DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10005F0F4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) canBeginEditingChildRepOnDoubleTap:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

id CRLAccessibilityStringsDictKey(void *a1)
{
  id v1 = a1;
  id v2 = +[NSBundle mainBundle];
  id v3 = [v2 localizedStringForKey:v1 value:&stru_101538650 table:@"CRLAccessibility"];

  return v3;
}

id CRLAccessibilityLocalizedString(void *a1)
{
  id v1 = a1;
  id v2 = +[NSBundle mainBundle];
  id v3 = [v2 localizedStringForKey:v1 value:&stru_101538650 table:@"CRLAccessibility"];

  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v3 == v1)
    {
      int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"error: String could not be found for key: %@", v5, v6, v7, v8, v9, (uint64_t)v1))abort(); {
    }
      }
  }

  return v3;
}

id CRLAccessibilitySpecializedStringsDictKey(void *a1)
{
  id v1 = a1;
  id v2 = +[CRLAccessibility sharedInstance];
  id v3 = objc_opt_class();

  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___CRLAccessibilitySpecializer]
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v4 = +[NSBundle mainBundle];
    uint64_t v5 = [v3 specializedStringsTable];
    uint64_t v6 = [v4 localizedStringForKey:v1 value:&stru_101538650 table:v5];
  }
  else
  {
    if (CRLAccessibilityShouldPerformValidationChecks())
    {
      int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"error: does not respond to specializedStringsTable for key: %@", v8, v9, v10, v11, v12, (uint64_t)v1))abort(); {
    }
      }
    uint64_t v6 = 0;
  }

  return v6;
}

id CRLAccessibilitySpecializedLocalizedString(void *a1)
{
  id v1 = a1;
  CRLAccessibilitySpecializedStringsDictKey(v1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v2 == v1)
    {
      int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"error: String could not be found for key: %@", v4, v5, v6, v7, v8, (uint64_t)v1))abort(); {
    }
      }
  }

  return v2;
}

id CRLAccessibilityStringForTimeInterval(uint64_t a1, double a2)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  double v3 = floor(a2 / 3600.0);
  double v4 = a2 - v3 * 3600.0;
  double v5 = floor(v4 / 60.0);
  uint64_t v6 = CRLAccessibilityLocalizedString(@"hours.format");
  uint64_t v7 = CRLAccessibilityLocalizedString(@"minutes.format");
  uint64_t v8 = CRLAccessibilityLocalizedString(@"seconds.format");
  uint64_t v9 = +[NSNumber numberWithUnsignedInteger:a1];
  uint64_t v10 = +[NSString stringWithFormat:@"%@", v9];
  uint64_t v11 = [v8 stringByReplacingOccurrencesOfString:@"2" withString:v10];

  if (v3 <= 0.0)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, *(void *)&v3);
  }
  if (v5 <= 0.0)
  {
    long long v13 = 0;
  }
  else
  {
    long long v13 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v7, *(void *)&v5);
  }
  double v22 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, v4 + v5 * -60.0);
  uint64_t v20 = __CRLAccessibilityStringForVariables(1, v12, v14, v15, v16, v17, v18, v19, (uint64_t)v13);

  return v20;
}

id __CRLAccessibilityStringForVariables(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a2;
  objc_opt_class();
  objc_opt_class();
  uint64_t v11 = +[NSMutableString stringWithString:&stru_101538650];
  if (objc_opt_isKindOfClass())
  {
    id v12 = v10;
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      long long v13 = 0;
      goto LABEL_7;
    }
    id v12 = [v10 string];
  }
  long long v13 = v12;
LABEL_7:
  if ([v13 length]) {
    [v11 appendString:v13];
  }
  uint64_t v20 = (id *)&a9;
  if (a1) {
    CFStringRef v14 = @", ";
  }
  else {
    CFStringRef v14 = @" ";
  }
  while (1)
  {
    uint64_t v15 = v20++;
    id v16 = *v15;
    if (objc_opt_isKindOfClass())
    {
      id v17 = v16;
LABEL_16:
      uint64_t v18 = v17;
      goto LABEL_18;
    }
    if (objc_opt_isKindOfClass())
    {
      id v17 = [v16 string];
      goto LABEL_16;
    }
    uint64_t v18 = 0;
LABEL_18:
    if (![v18 length]) {
      goto LABEL_23;
    }
    if ([v18 isEqualToString:@"__CRLAccessibilityStringForVariablesSentinel"]) {
      break;
    }
    if ([v11 length]) {
      [v11 appendString:v14];
    }
    [v11 appendString:v18];
LABEL_23:
  }

  return v11;
}

id CRLAccessibilityLocalizedUnsignedInteger(uint64_t a1)
{
  return +[NSNumberFormatter crlaxLocalizedUnsignedInteger:a1];
}

id __CRLAccessibilityStringForArraysAndVariables(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9 = a1;
  objc_opt_class();
  objc_opt_class();
  objc_opt_class();
  id v10 = +[NSMutableString string];
  if (objc_opt_isKindOfClass())
  {
    id v11 = v9;
  }
  else if (objc_opt_isKindOfClass())
  {
    id v11 = [v9 string];
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v12 = 0;
      goto LABEL_8;
    }
    id v11 = [v9 componentsJoinedByString:@", "];
  }
  id v12 = v11;
LABEL_8:
  if ([v12 length]) {
    [v10 appendString:v12];
  }
  uint64_t v18 = (id *)&a9;
  while (1)
  {
    long long v13 = v18++;
    id v14 = *v13;
    if (objc_opt_isKindOfClass())
    {
      id v15 = v14;
LABEL_17:
      id v16 = v15;
      goto LABEL_18;
    }
    if (objc_opt_isKindOfClass())
    {
      id v15 = [v14 string];
      goto LABEL_17;
    }
    if (objc_opt_isKindOfClass())
    {
      id v15 = [v14 componentsJoinedByString:@", "];
      goto LABEL_17;
    }
    id v16 = 0;
LABEL_18:
    if (![v16 length]) {
      goto LABEL_23;
    }
    if ([v16 isEqualToString:@"__CRLAccessibilityStringForArraysAndVariablesSentinel"])break; {
    if ([v10 length])
    }
      [v10 appendString:@", "];
    [v10 appendString:v16];
LABEL_23:
  }

  return v10;
}

id CRLAccessibilityFriendlyFilename(void *a1)
{
  id v1 = [a1 mutableCopy];
  if ([v1 length])
  {
    id v2 = +[NSRegularExpression regularExpressionWithPattern:@"\\.([a-zA-Z0-9]+)$" options:16 error:0];
    [v2 replaceMatchesInString:v1 options:0 range:NSMakeRange(0, [v1 length]) withTemplate:&stru_101538650];

    double v3 = +[NSRegularExpression regularExpressionWithPattern:@"[\\s|\\-|\\_|.]{0,1}2x" options:16 error:0];
    [v3 replaceMatchesInString:v1 options:0 range:NSMakeRange(0, [v1 length]) withTemplate:&stru_101538650];

    double v4 = +[NSRegularExpression regularExpressionWithPattern:@"[\\-\\_]+" options:0 error:0];
    [v4 replaceMatchesInString:v1 options:0 range:NSMakeRange([v1 length], 0) withTemplate:@" "];
  }

  return v1;
}

void CRLAccessibilityPostAnnouncementNotification(void *a1, void *a2)
{
}

void CRLAccessibilityPostHighPriorityAnnouncementNotification(void *a1, void *a2)
{
}

void CRLAccessibilityPostHighPriorityAnnouncementNotificationWithSound(void *a1, void *a2, void *a3)
{
}

void CRLAccessibilityPostAnnouncementNotificationWithPriorityAndSound(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a1;
  id v7 = a2;
  id v8 = a4;
  id v9 = +[CRLAccessibility sharedInstance];
  if ([v9 crlaxRespondsToSelector:"handlePostingAnnouncement:sender:priority:sound:" fromExtrasProtocol:&OBJC_PROTOCOL___CRLAccessibilityExtras])[v9 handlePostingAnnouncement:v7 sender:v10 priority:a3 sound:v8]; {
}
  }

void CRLAccessibilityPerformBlockOnMainThread(void *a1)
{
  block = a1;
  if (+[NSThread isMainThread]) {
    block[2]();
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void CRLAccessibilityPerformBlockAsynchronouslyOnMainThread(dispatch_block_t block)
{
}

void CRLAccessibilityPerformBlockOnMainThreadAfterDelay(void *a1, double a2)
{
  int64_t v2 = (uint64_t)(a2 * 1000000000.0);
  dispatch_block_t block = a1;
  dispatch_time_t v3 = dispatch_time(0, v2);
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100060B08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100060B4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100060D7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100060DC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100060FF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100061034(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100061264(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000612A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000613B0(uint64_t a1)
{
  int64_t v2 = objc_opt_new();
  [v2 setMinFilter:1];
  [v2 setMagFilter:1];
  [v2 setMipFilter:2];
  [v2 setRAddressMode:0];
  [v2 setSAddressMode:0];
  [v2 setTAddressMode:0];
  [v2 setLabel:@"Linear Clamp To Edge Sampler"];
  dispatch_time_t v3 = [*(id *)(a1 + 32) device];
  id v4 = [v3 newSamplerStateWithDescriptor:v2];

  return v4;
}

id sub_100061524(uint64_t a1)
{
  int64_t v2 = objc_opt_new();
  [v2 setMinFilter:1];
  [v2 setMagFilter:1];
  [v2 setMipFilter:2];
  [v2 setRAddressMode:4];
  [v2 setSAddressMode:4];
  [v2 setTAddressMode:4];
  [v2 setLabel:@"Linear Clamp To Zero Sampler"];
  dispatch_time_t v3 = [*(id *)(a1 + 32) device];
  id v4 = [v3 newSamplerStateWithDescriptor:v2];

  return v4;
}

id sub_100061698(uint64_t a1)
{
  int64_t v2 = objc_opt_new();
  [v2 setMinFilter:0];
  [v2 setMagFilter:0];
  [v2 setMipFilter:2];
  [v2 setRAddressMode:0];
  [v2 setSAddressMode:0];
  [v2 setTAddressMode:0];
  [v2 setLabel:@"Nearest Clamp To Edge Sampler"];
  dispatch_time_t v3 = [*(id *)(a1 + 32) device];
  id v4 = [v3 newSamplerStateWithDescriptor:v2];

  return v4;
}

id sub_10006180C(uint64_t a1)
{
  int64_t v2 = objc_opt_new();
  [v2 setMinFilter:0];
  [v2 setMagFilter:0];
  [v2 setMipFilter:2];
  [v2 setRAddressMode:4];
  [v2 setSAddressMode:4];
  [v2 setTAddressMode:4];
  [v2 setLabel:@"Nearest Clamp To Zero Sampler"];
  dispatch_time_t v3 = [*(id *)(a1 + 32) device];
  id v4 = [v3 newSamplerStateWithDescriptor:v2];

  return v4;
}

uint64_t sub_100061940(uint64_t a1)
{
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  bzero((void *)a1, 0x2C8uLL);
  return a1;
}

uint64_t sub_100061988(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  bzero((void *)a1, 0x2C8uLL);
  sub_100061A38(a1, a2);
  return a1;
}

void sub_1000619EC(_Unwind_Exception *a1)
{
  sub_100189C94(v1);
  _Unwind_Resume(a1);
}

void sub_100061A38(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    double v5 = *(void **)(a2 + 24);
    *(void *)(a1 + 16) = v6;
    objc_storeStrong((id *)(a1 + 24), v5);
    objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
    long long v7 = *(_OWORD *)(a2 + 40);
    long long v8 = *(_OWORD *)(a2 + 56);
    long long v9 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    long long v10 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v10;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)&long long v10 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v10;
    *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)&long long v10 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = v10;
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
    *(unsigned char *)(a1 + 433) = *(unsigned char *)(a2 + 433);
    *(unsigned char *)(a1 + 434) = *(unsigned char *)(a2 + 434);
    uint64_t v11 = *(void *)(a2 + 448);
    *(void *)(a1 + 440) = *(void *)(a2 + 440);
    *(void *)(a1 + 448) = v11;
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    *(unsigned char *)(a1 + 457) = *(unsigned char *)(a2 + 457);
    long long v12 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v12;
    *(void *)(a1 + 496) = *(void *)(a2 + 496);
    *(_WORD *)(a1 + 504) = *(_WORD *)(a2 + 504);
    long long v13 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v13;
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
    *(unsigned char *)(a1 + 548) = *(unsigned char *)(a2 + 548);
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    *(void *)(a1 + 584) = *(void *)(a2 + 584);
    *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
    *(unsigned char *)(a1 + 594) = *(unsigned char *)(a2 + 594);
    *(unsigned char *)(a1 + 593) = *(unsigned char *)(a2 + 593);
    objc_storeStrong((id *)(a1 + 600), *(id *)(a2 + 600));
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    objc_storeStrong((id *)(a1 + 624), *(id *)(a2 + 624));
    objc_storeStrong((id *)(a1 + 632), *(id *)(a2 + 632));
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    objc_storeStrong((id *)(a1 + 656), *(id *)(a2 + 656));
    objc_storeStrong((id *)(a1 + 672), *(id *)(a2 + 672));
    objc_storeStrong((id *)(a1 + 680), *(id *)(a2 + 680));
    uint64_t v14 = *(void *)(a2 + 704);
    *(void *)(a1 + 696) = *(void *)(a2 + 696);
    *(void *)(a1 + 704) = v14;
    id v15 = [*(id *)(a2 + 664) mutableCopy];
    id v16 = *(void **)(a1 + 664);
    *(void *)(a1 + 664) = v15;
  }
}

id *sub_100061CB8(id *a1)
{
  sub_100189C94(a1 + 3);
  return a1;
}

uint64_t sub_100061D20(uint64_t a1, uint64_t a2)
{
  return a1;
}

id sub_100061D48(uint64_t a1)
{
  return *(id *)(a1 + 600);
}

void sub_100061D50(uint64_t a1, void *a2)
{
}

id sub_100061D58(uint64_t a1)
{
  return *(id *)(a1 + 608);
}

uint64_t sub_100061D60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 608) = a2;
  return result;
}

id sub_100061D68(uint64_t a1)
{
  return *(id *)(a1 + 616);
}

uint64_t sub_100061D70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 616) = a2;
  return result;
}

id sub_100061D78(uint64_t a1)
{
  return *(id *)(a1 + 624);
}

void sub_100061D80(uint64_t a1, void *a2)
{
}

id sub_100061D88(uint64_t a1)
{
  return *(id *)(a1 + 632);
}

void sub_100061D90(uint64_t a1, void *a2)
{
}

id sub_100061D98(uint64_t a1)
{
  return *(id *)(a1 + 648);
}

uint64_t sub_100061DA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 648) = a2;
  return result;
}

id sub_100061DA8(uint64_t a1)
{
  return *(id *)(a1 + 656);
}

void sub_100061DB0(uint64_t a1, void *a2)
{
}

void sub_100061DB8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 664);
  *(void *)(a1 + 664) = 0;
}

id sub_100061DC4(uint64_t a1)
{
  return *(id *)(a1 + 672);
}

void sub_100061DCC(uint64_t a1, void *a2)
{
}

id sub_100061DD4(uint64_t a1)
{
  return *(id *)(a1 + 680);
}

void sub_100061DDC(uint64_t a1, void *a2)
{
}

uint64_t sub_100061DE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 688);
}

uint64_t sub_100061DEC(uint64_t a1)
{
  return *(void *)(a1 + 696);
}

uint64_t sub_100061DFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 696) = a2;
  *(void *)(result + 704) = a3;
  return result;
}

void sub_100062970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_10006299C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000629E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062A24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062A68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_100062AAC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100062AB4(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_100062AF8(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = a2;
  id v4 = +[UTType typeWithIdentifier:*(void *)(a1 + 32)];
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF070);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106CBF0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF090);
    }
    double v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke");
    long long v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 127, 0, "invalid nil value for '%{public}s'", "utType");
  }
  long long v8 = [*(id *)(a1 + 40) promisedDataForPublicType:v4];
  if (v8)
  {
    long long v9 = 0;
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF0B0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106CB5C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF0D0);
    }
    long long v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke");
    long long v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 129, 0, "invalid nil value for '%{public}s'", "data");

    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    long long v13 = +[NSBundle mainBundle];
    uint64_t v14 = [v13 localizedStringForKey:@"The object couldn’t be converted to a format compatible with this app." value:0 table:0];
    uint64_t v18 = v14;
    id v15 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];

    long long v9 = +[NSError errorWithDomain:@"com.apple.freeform" code:6 userInfo:v15];
  }
  v3[2](v3, v8, v9);

  return 0;
}

void sub_100062EA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062EE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062F2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062F70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100062FB4(uint64_t a1)
{
  uint64_t v2 = [[CRLCanvasImager alloc] initWithBoard:*(void *)(a1 + 32)];
  dispatch_time_t v3 = [*(id *)(a1 + 40) boardItems];
  [(CRLCanvasImager *)v2 setInfos:v3];

  id v4 = [*(id *)(a1 + 40) boardItems];
  id v5 = [v4 count];

  if (v5 == (id)1)
  {
    uint64_t v6 = [*(id *)(a1 + 40) boardItems];
    long long v7 = [v6 firstObject];

    [v7 viewScaleToUseWhenRasterizingSingleBoardItemForCopy];
    double v9 = v8;
    if (v8 < 0.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CF118);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106CC84();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CF138);
      }
      long long v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v10);
      }
      uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke");
      long long v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"];
      +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:165 isFatal:0 description:"requestedViewScale should never be negative."];
    }
    if (v9 > 0.0)
    {
      [(CRLCanvasImager *)v2 setViewScale:v9];

      char v13 = 0;
      goto LABEL_16;
    }
  }
  [(CRLCanvasImager *)v2 setContentsScale:2.0];
  char v13 = 1;
LABEL_16:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v13;
  [(CRLCanvasImager *)v2 setMaximumImagePixelSize:sub_100454A70()];
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [(CRLCanvasImager *)v2 newImage];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100063208(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006324C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100063290(void *a1, void *a2)
{
  dispatch_time_t v3 = a1[4];
  id v4 = a2;
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(*(void *)(a1[5] + 8) + 24))
  {
    id v5 = +[NSMutableDictionary dictionary];
    if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
    {
      uint64_t v6 = +[NSNumber numberWithDouble:144.0];
      [v5 setObject:v6 forKeyedSubscript:kCGImagePropertyDPIWidth];

      long long v7 = +[NSNumber numberWithDouble:144.0];
      [v5 setObject:v7 forKeyedSubscript:kCGImagePropertyDPIHeight];
    }
    double v8 = sub_10047EBD0(*(CGImage **)(*(void *)(a1[5] + 8) + 24), v5);
    CGImageRelease(*(CGImageRef *)(*(void *)(a1[5] + 8) + 24));

    double v9 = 0;
  }
  else
  {
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    long long v10 = +[NSBundle mainBundle];
    uint64_t v11 = [v10 localizedStringForKey:@"The iWork object couldn’t be converted to a format compatible with this app." value:0 table:0];
    id v15 = v11;
    long long v12 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];

    double v9 = +[NSError errorWithDomain:@"com.apple.freeform" code:6 userInfo:v12];

    double v8 = 0;
  }
  v4[2](v4, v8, v9);

  return 0;
}

uint64_t sub_1000634B4(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = a2;
  id v4 = [*(id *)(a1 + 32) dataUsingEncoding:4];
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF1A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106CD18();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF1C8);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke");
    long long v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 224, 0, "invalid nil value for '%{public}s'", "publicTextData");
  }
  v3[2](v3, v4, 0);

  return 0;
}

void sub_100063654(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100063698(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_100063AA4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100063AAC(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 length];
  uint64_t v6 = *(void **)(a1 + 32);
  NSAttributedStringDocumentAttributeKey v12 = NSDocumentTypeDocumentAttribute;
  NSAttributedStringDocumentType v13 = NSRTFTextDocumentType;
  long long v7 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  id v11 = 0;
  double v8 = [v6 dataFromRange:0 documentAttributes:v5 error:&v11];
  id v9 = v11;

  v4[2](v4, v8, v9);
  return 0;
}

void sub_100063F24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100063F68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100063FC4(int a1, double a2, double a3, double a4, double a5)
{
  switch(a1)
  {
    case 0:
      double result = CGRectGetMinX(*(CGRect *)&a2);
      break;
    case 1:
      double result = CGRectGetMidX(*(CGRect *)&a2);
      break;
    case 2:
      double result = CGRectGetMaxX(*(CGRect *)&a2);
      break;
    case 3:
      double result = CGRectGetMinY(*(CGRect *)&a2);
      break;
    case 4:
      double result = CGRectGetMidY(*(CGRect *)&a2);
      break;
    case 5:
      double result = CGRectGetMaxY(*(CGRect *)&a2);
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_10006402C(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

double sub_100064044(double a1, double a2, double a3)
{
  if (a1 >= a3) {
    return a3;
  }
  else {
    return a1;
  }
}

double sub_100064070()
{
  return 0.0;
}

BOOL sub_100064084(double a1, double a2, double a3, double a4)
{
  if (a1 != a3 && vabdd_f64(a1, a3) >= 0.01) {
    return 0;
  }
  if (vabdd_f64(a2, a4) < 0.01) {
    return 1;
  }
  return a2 == a4;
}

BOOL sub_1000640C4(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = vabdd_f64(a1, a3);
  if (a1 != a3 && v5 >= a5) {
    return 0;
  }
  if (vabdd_f64(a2, a4) < a5) {
    return 1;
  }
  return a2 == a4;
}

BOOL sub_1000640F4(double a1, double a2, double a3, double a4)
{
  if (a1 != a3 && vabdd_f64(a1, a3) >= 0.1) {
    return 0;
  }
  if (vabdd_f64(a2, a4) < 0.1) {
    return 1;
  }
  return a2 == a4;
}

BOOL sub_100064134(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return sub_100064184((double *)v6, (double *)v5, 0.000000001);
}

BOOL sub_100064184(double *a1, double *a2, double a3)
{
  return vabdd_f64(*a1, *a2) < a3
      && vabdd_f64(a1[1], a2[1]) < a3
      && vabdd_f64(a1[2], a2[2]) < a3
      && vabdd_f64(a1[3], a2[3]) < a3
      && vabdd_f64(a1[4], a2[4]) < a3
      && vabdd_f64(a1[5], a2[5]) < a3;
}

BOOL sub_100064208(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a5 && vabdd_f64(a1, a5) >= 0.01
    || a2 != a6 && vabdd_f64(a2, a6) >= 0.01
    || a3 != a7 && vabdd_f64(a3, a7) >= 0.01)
  {
    return 0;
  }
  if (vabdd_f64(a4, a8) < 0.01) {
    return 1;
  }
  return a4 == a8;
}

BOOL sub_100064278(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v18 = CGRectInset(*(CGRect *)&a1, -0.01, -0.01);
  double v12 = a5;
  double v13 = a6;
  double v14 = a7;
  double v15 = a8;

  return CGRectContainsRect(v18, *(CGRect *)&v12);
}

BOOL sub_1000642DC(double a1, double a2, double a3, double a4, double a5, double a6)
{
  CGFloat height = CGSizeZero.height;
  CGRect v15 = CGRectInset(*(CGRect *)&a1, -0.01, -0.01);
  double v9 = a5;
  double v10 = a6;
  CGFloat width = CGSizeZero.width;
  CGFloat v12 = height;

  return CGRectContainsRect(v15, *(CGRect *)&v9);
}

BOOL sub_100064344(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return fabs((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1)) < 8.90029543e-308;
}

BOOL sub_100064374(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 - a1;
  double v7 = a6 - a2;
  double v8 = a4 - a2;
  double v9 = a5 - a1;
  double v10 = v6 * v7 - v8 * v9;
  return v10 == 0.0 || v10 * v10 < (v8 * v8 + v6 * v6) * 0.0001 * (v7 * v7 + v9 * v9);
}

double sub_1000643CC(double a1, double a2, double a3, double a4)
{
  return (a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3);
}

BOOL sub_1000643E0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.double x = a5;
  v22.origin.double y = a6;
  v22.size.CGFloat width = a7;
  v22.size.CGFloat height = a8;
  double v16 = CGRectGetMinX(v22);
  v23.origin.double x = a1;
  v23.origin.double y = a2;
  v23.size.CGFloat width = a3;
  v23.size.CGFloat height = a4;
  double MaxX = CGRectGetMaxX(v23);
  v24.origin.double x = a5;
  v24.origin.double y = a6;
  v24.size.CGFloat width = a7;
  v24.size.CGFloat height = a8;
  double v18 = CGRectGetMaxX(v24);
  if (MinX <= v16) {
    return MaxX >= v16;
  }
  else {
    return v18 >= MinX;
  }
}

BOOL sub_1000644A8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinY = CGRectGetMinY(*(CGRect *)&a1);
  v22.origin.double x = a5;
  v22.origin.double y = a6;
  v22.size.CGFloat width = a7;
  v22.size.CGFloat height = a8;
  double v16 = CGRectGetMinY(v22);
  v23.origin.double x = a1;
  v23.origin.double y = a2;
  v23.size.CGFloat width = a3;
  v23.size.CGFloat height = a4;
  double MaxY = CGRectGetMaxY(v23);
  v24.origin.double x = a5;
  v24.origin.double y = a6;
  v24.size.CGFloat width = a7;
  v24.size.CGFloat height = a8;
  double v18 = CGRectGetMaxY(v24);
  if (MinY <= v16) {
    return MaxY >= v16;
  }
  else {
    return v18 >= MinY;
  }
}

double sub_100064570(float64x2_t *a1, double a2)
{
  __asm { FMOV            V5.2D, #3.0 }
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[1], _Q5), a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(*a1, 1.0 - a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[2], _Q5), a2), a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(a1[3], a2), a2), a2);
  return result;
}

float64_t sub_1000645C8(float64x2_t *a1)
{
  float64x2_t v1 = a1[1];
  int8x16_t v2 = (int8x16_t)vcgtq_f64(v1, *a1);
  float64x2_t v3 = (float64x2_t)vbslq_s8(v2, *(int8x16_t *)a1, (int8x16_t)v1);
  float64x2_t v4 = a1[2];
  float64x2_t v5 = a1[3];
  int8x16_t v6 = (int8x16_t)vcgtq_f64(v5, v4);
  float64x2_t v7 = (float64x2_t)vbslq_s8(v6, (int8x16_t)v4, (int8x16_t)v5);
  float64x2_t v8 = (float64x2_t)vbslq_s8(v2, (int8x16_t)v1, *(int8x16_t *)a1);
  float64x2_t v9 = (float64x2_t)vbslq_s8(v6, (int8x16_t)v5, (int8x16_t)v4);
  float64x2_t v10 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v9, v8), (int8x16_t)v9, (int8x16_t)v8), (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v3), (int8x16_t)v3, (int8x16_t)v7));
  if (v10.f64[0] < v10.f64[1]) {
    v10.f64[0] = v10.f64[1];
  }
  return v10.f64[0];
}

double sub_100064618(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 - a1;
  double v7 = a4 - a2;
  double v8 = 1.0 / sqrt(v7 * v7 + v6 * v6);
  return a1 + v6 * v8 * ((a6 - a2) * (v7 * v8) + (a5 - a1) * (v6 * v8));
}

double sub_100064660(double a1, double a2)
{
  return a1 * (1.0 / sqrt(a2 * a2 + a1 * a1));
}

double sub_100064680(double a1, double a2, double a3)
{
  return a1 - a3;
}

double sub_10006468C(double a1, double a2, double a3, double a4)
{
  return a2 * a4 + a1 * a3;
}

double sub_100064698(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_1000646A4(double a1, double a2, double a3)
{
  return a1 * a3;
}

double sub_1000646B0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v50.origin.double x = a5;
  v50.origin.double y = a6;
  v50.size.CGFloat width = a7;
  v50.size.CGFloat height = a8;
  CGFloat MinX = CGRectGetMinX(v50);
  v51.origin.double x = a5;
  v51.origin.double y = a6;
  v51.size.CGFloat width = a7;
  v51.size.CGFloat height = a8;
  CGFloat MaxX = CGRectGetMaxX(v51);
  v52.origin.double x = a5;
  v52.origin.double y = a6;
  v52.size.CGFloat width = a7;
  v52.size.CGFloat height = a8;
  CGFloat MinY = CGRectGetMinY(v52);
  v53.origin.double x = a5;
  v53.origin.double y = a6;
  v53.size.CGFloat width = a7;
  v53.size.CGFloat height = a8;
  CGFloat MaxY = CGRectGetMaxY(v53);
  uint64_t v16 = sub_100064AC8(a1, a2, a5, a6, a7, a8);
  CGFloat v40 = a7;
  CGFloat v41 = a8;
  uint64_t v17 = sub_100064AC8(a3, a4, a5, a6, a7, a8);
  if (!(v17 | v16)) {
    return a1;
  }
  uint64_t v19 = v17;
  if ((v17 & v16) == 0)
  {
    *(void *)&long long v18 = 67109378;
    long long v35 = v18;
    while (1)
    {
      uint64_t v21 = v16 ? v16 : v19;
      if (v21) {
        break;
      }
      if ((v21 & 2) != 0)
      {
        double v28 = a3 - a1;
        double v27 = MinY;
        goto LABEL_23;
      }
      if ((v21 & 4) != 0)
      {
        double v31 = a4 - a2;
        double v20 = MaxX;
      }
      else
      {
        if ((v21 & 8) == 0)
        {
          unsigned int v22 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014CF250);
          }
          CGRect v23 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            unsigned int v43 = v22;
            __int16 v44 = 2082;
            double v45 = "CGPoint p_CRLIntersectionPointOfLineWithRect(CGPoint, CGPoint, CGRect)";
            __int16 v46 = 2082;
            uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m";
            __int16 v48 = 1024;
            int v49 = 441;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled intersection scenario", buf, 0x22u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014CF270);
          }
          CGRect v24 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            unsigned int v32 = v24;
            uint64_t v33 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = v35;
            unsigned int v43 = v22;
            __int16 v44 = 2114;
            double v45 = v33;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          uint64_t v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint p_CRLIntersectionPointOfLineWithRect(CGPoint, CGPoint, CGRect)", v35);
          uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
          +[CRLAssertionHandler handleFailureInFunction:v25 file:v26 lineNumber:441 isFatal:0 description:"Unhandled intersection scenario"];

          double v20 = MinX;
          double v27 = MinY;
          goto LABEL_24;
        }
        double v31 = a4 - a2;
        double v20 = MinX;
      }
      double v27 = a2 + (v20 - a1) * v31 / (a3 - a1);
LABEL_24:
      uint64_t v29 = sub_100064AC8(v20, v27, a5, a6, v40, v41);
      if (v21 == v16)
      {
        a1 = v20;
        uint64_t v30 = v29;
      }
      else
      {
        uint64_t v30 = v16;
      }
      if (v21 == v16) {
        a2 = v27;
      }
      else {
        uint64_t v19 = v29;
      }
      if (!(v19 | v30)) {
        return a1;
      }
      if (v21 != v16)
      {
        a3 = v20;
        a4 = v27;
      }
      uint64_t v16 = v30;
      if ((v19 & v30) != 0) {
        return v20;
      }
    }
    double v28 = a3 - a1;
    double v27 = MaxY;
LABEL_23:
    double v20 = a1 + v28 * (v27 - a2) / (a4 - a2);
    goto LABEL_24;
  }
  return INFINITY;
}

uint64_t sub_100064AC8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v14.origin.double x = a3;
  v14.origin.double y = a4;
  v14.size.CGFloat width = a5;
  v14.size.CGFloat height = a6;
  if (a2 <= CGRectGetMaxY(v14))
  {
    v15.origin.double x = a3;
    v15.origin.double y = a4;
    v15.size.CGFloat width = a5;
    v15.size.CGFloat height = a6;
    if (a2 < CGRectGetMinY(v15)) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  v16.origin.double x = a3;
  v16.origin.double y = a4;
  v16.size.CGFloat width = a5;
  v16.size.CGFloat height = a6;
  if (a1 > CGRectGetMaxX(v16)) {
    return v12 | 4;
  }
  v17.origin.double x = a3;
  v17.origin.double y = a4;
  v17.size.CGFloat width = a5;
  v17.size.CGFloat height = a6;
  if (a1 < CGRectGetMinX(v17)) {
    return v12 | 8;
  }
  else {
    return v12;
  }
}

void sub_100064B9C(id a1)
{
  float64x2_t v1 = sub_100401ECC("CRLAssertCat");
  int8x16_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100064BE0(id a1)
{
  float64x2_t v1 = sub_100401ECC("CRLAssertCat");
  int8x16_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100064C24(CGFloat a1, CGFloat a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v12 = a4;
  double v13 = a3;
  while (1)
  {
    uint64_t v16 = sub_100064AC8(a1, a2, a5, a6, a7, a8);
    uint64_t v17 = sub_100064AC8(v13, v12, a5, a6, a7, a8);
    uint64_t result = 1;
    if (!v16 || !v17) {
      break;
    }
    if ((v17 & v16) != 0) {
      return 0;
    }
    double v19 = (v13 + a1) * 0.5;
    double v20 = (v12 + a2) * 0.5;
    int v21 = sub_100064C24(1, a1, a2, v19, v20, a5, a6, a7, a8);
    a1 = v19;
    a2 = v20;
    double v13 = a3;
    double v12 = a4;
    if (v21) {
      return 1;
    }
  }
  return result;
}

double sub_100064D34(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

uint64_t sub_100064D4C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a4 - a2;
  double v9 = a1 - a3;
  double v10 = a8 - a6;
  double v11 = a5 - a7;
  double v12 = (a4 - a2) * (a5 - a7) - (a8 - a6) * (a1 - a3);
  if (v12 != 0.0)
  {
    double v13 = a6 * v11 + v10 * a5;
    double v14 = a2 * v9 + v8 * a1;
    double v15 = (v11 * v14 - v9 * v13) / v12;
    if (v15 >= fmin(a1, a3) + -0.01 && v15 <= fmax(a1, a3) + 0.01)
    {
      double v16 = (v14 * -v10 + v8 * v13) / v12;
      if (v16 >= fmin(a2, a4) + -0.01
        && v16 <= fmax(a2, a4) + 0.01
        && v15 >= fmin(a5, a7) + -0.01
        && v15 <= fmax(a5, a7) + 0.01
        && v16 >= fmin(a6, a8) + -0.01)
      {
        BOOL v17 = v16 > fmax(a6, a8) + 0.01;
        return !v17;
      }
    }
    return 0;
  }
  if (fabs((a3 - a1) * (a6 - a2) - v8 * (a5 - a1)) >= 8.90029543e-308) {
    return 0;
  }
  double v18 = fmin(a1, a3) + -0.01;
  if (a5 >= v18 && a5 <= fmax(a1, a3) + 0.01 && a6 >= fmin(a2, a4) + -0.01 && a6 <= fmax(a2, a4) + 0.01) {
    return 1;
  }
  if (a7 < v18 || a7 > fmax(a1, a3) + 0.01 || a8 < fmin(a2, a4) + -0.01) {
    return 0;
  }
  BOOL v17 = a8 > fmax(a2, a4) + 0.01;
  return !v17;
}

BOOL sub_100064EF4(double a1, double a2)
{
  return a2 == 0.0 || a1 == 0.0;
}

double sub_100064F08(double a1, double a2, double a3, double a4)
{
  return a2 * a3 - a1 * a4;
}

double sub_100064F14(double result, double a2, double a3)
{
  if (result < a3) {
    return a3;
  }
  return result;
}

CGFloat sub_100064F28(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL v8 = a7 <= 0.0;
  if (a8 > 0.0) {
    BOOL v8 = 0;
  }
  if (a3 > 0.0 || a4 > 0.0)
  {
    if (v8)
    {
      return a1;
    }
    else if (a1 < a5)
    {
      return a1;
    }
  }
  else if (v8)
  {
    return CGRectZero.origin.x;
  }
  return a5;
}

double sub_100064FC4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v31.origin.double x = a5;
  v31.origin.double y = a6;
  v31.size.CGFloat width = a7;
  CGFloat v24 = a7;
  v31.size.CGFloat height = a8;
  double v29 = fmax(MinX, CGRectGetMinX(v31));
  v32.origin.double x = a1;
  v32.origin.double y = a2;
  v32.size.CGFloat width = a3;
  v32.size.CGFloat height = a4;
  double MaxX = CGRectGetMaxX(v32);
  v33.origin.double x = a5;
  v33.origin.double y = a6;
  v33.size.CGFloat width = a7;
  v33.size.CGFloat height = a8;
  double v27 = fmin(MaxX, CGRectGetMaxX(v33));
  v34.origin.double x = a1;
  v34.origin.double y = a2;
  v34.size.CGFloat width = a3;
  v34.size.CGFloat height = a4;
  double MaxY = CGRectGetMaxY(v34);
  v35.origin.double x = a5;
  v35.origin.double y = a6;
  v35.size.CGFloat width = v24;
  v35.size.CGFloat height = a8;
  double v16 = fmin(MaxY, CGRectGetMaxY(v35));
  v36.origin.double x = a1;
  v36.origin.double y = a2;
  v36.size.CGFloat width = a3;
  v36.size.CGFloat height = a4;
  double MinY = CGRectGetMinY(v36);
  v37.origin.double x = a5;
  v37.origin.double y = a6;
  v37.size.CGFloat width = v24;
  v37.size.CGFloat height = a8;
  double v18 = fmax(MinY, CGRectGetMinY(v37));
  double v19 = v29;
  double v21 = v18 - v16;
  double v22 = v16;

  double v20 = v27 - v29;
  *(void *)&double result = (unint64_t)CGRectStandardize(*(CGRect *)&v19);
  return result;
}

double sub_100065110(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v31.origin.double x = a5;
  v31.origin.double y = a6;
  v31.size.CGFloat width = a7;
  CGFloat v24 = a7;
  v31.size.CGFloat height = a8;
  double v29 = fmin(MaxX, CGRectGetMaxX(v31));
  v32.origin.double x = a1;
  v32.origin.double y = a2;
  v32.size.CGFloat width = a3;
  v32.size.CGFloat height = a4;
  double MinX = CGRectGetMinX(v32);
  v33.origin.double x = a5;
  v33.origin.double y = a6;
  v33.size.CGFloat width = a7;
  v33.size.CGFloat height = a8;
  double v27 = fmax(MinX, CGRectGetMinX(v33));
  v34.origin.double x = a1;
  v34.origin.double y = a2;
  v34.size.CGFloat width = a3;
  v34.size.CGFloat height = a4;
  double MinY = CGRectGetMinY(v34);
  v35.origin.double x = a5;
  v35.origin.double y = a6;
  v35.size.CGFloat width = v24;
  v35.size.CGFloat height = a8;
  double v16 = fmax(MinY, CGRectGetMinY(v35));
  v36.origin.double x = a1;
  v36.origin.double y = a2;
  v36.size.CGFloat width = a3;
  v36.size.CGFloat height = a4;
  double MaxY = CGRectGetMaxY(v36);
  v37.origin.double x = a5;
  v37.origin.double y = a6;
  v37.size.CGFloat width = v24;
  v37.size.CGFloat height = a8;
  double v18 = fmin(MaxY, CGRectGetMaxY(v37));
  double v19 = v29;
  double v21 = v18 - v16;
  double v22 = v16;

  double v20 = v27 - v29;
  *(void *)&double result = (unint64_t)CGRectStandardize(*(CGRect *)&v19);
  return result;
}

BOOL sub_10006525C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 < a5) {
    BOOL result = a1 + a3 > a5;
  }
  else {
    BOOL result = a5 + a7 > a1;
  }
  if (a2 >= a6)
  {
    if (a6 + a8 > a2) {
      return result;
    }
    return 0;
  }
  if (a2 + a4 <= a6) {
    return 0;
  }
  return result;
}

BOOL sub_1000652B0(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 + a5;
  return a1 >= a3 && a1 <= v6 && a2 >= a4 && a2 <= a4 + a6;
}

double sub_1000652DC(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + (a3 - a1) * a5;
}

double sub_1000652F0(double a1, double a2, double a3)
{
  return a1 * a3;
}

double sub_1000652FC(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v11.origin.double x = v9;
    v11.origin.double y = a2;
    v11.size.CGFloat width = a3;
    v11.size.CGFloat height = a4;
    if (!CGRectIsNull(v11)) {
      return v9 * a5;
    }
  }
  return v9;
}

double sub_10006538C(double a1)
{
  return floor(a1);
}

double sub_100065398(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double sub_1000653A8(double a1, double a2)
{
  return a2 * a2 + a1 * a1;
}

double sub_1000653B4(double a1, double a2, double a3, double a4)
{
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double sub_1000653CC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  sub_1000653E8(a1, a2, a3, a4, a5, a6);
  return sqrt(v6);
}

void sub_1000653E8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v16.origin.double x = a3;
  v16.origin.double y = a4;
  v16.size.CGFloat width = a5;
  v16.size.CGFloat height = a6;
  if (a1 < CGRectGetMinX(v16))
  {
    v17.origin.double x = a3;
    v17.origin.double y = a4;
    v17.size.CGFloat width = a5;
    v17.size.CGFloat height = a6;
    if (a2 < CGRectGetMinY(v17))
    {
      v18.origin.double x = a3;
      v18.origin.double y = a4;
      v18.size.CGFloat width = a5;
      v18.size.CGFloat height = a6;
      CGRectGetMinX(v18);
LABEL_7:
      v22.origin.double x = a3;
      v22.origin.double y = a4;
      v22.size.CGFloat width = a5;
      v22.size.CGFloat height = a6;
      CGRectGetMinY(v22);
      return;
    }
    v23.origin.double x = a3;
    v23.origin.double y = a4;
    v23.size.CGFloat width = a5;
    v23.size.CGFloat height = a6;
    double MaxY = CGRectGetMaxY(v23);
    v24.origin.double x = a3;
    v24.origin.double y = a4;
    v24.size.CGFloat width = a5;
    v24.size.CGFloat height = a6;
    CGRectGetMinX(v24);
    if (a2 <= MaxY) {
      return;
    }
LABEL_13:
    v28.origin.double x = a3;
    v28.origin.double y = a4;
    v28.size.CGFloat width = a5;
    v28.size.CGFloat height = a6;
    CGRectGetMaxY(v28);
    return;
  }
  v19.origin.double x = a3;
  v19.origin.double y = a4;
  v19.size.CGFloat width = a5;
  v19.size.CGFloat height = a6;
  double MaxX = CGRectGetMaxX(v19);
  v20.origin.double x = a3;
  v20.origin.double y = a4;
  v20.size.CGFloat width = a5;
  v20.size.CGFloat height = a6;
  double MinY = CGRectGetMinY(v20);
  if (a1 <= MaxX)
  {
    if (a2 >= MinY)
    {
      v29.origin.double x = a3;
      v29.origin.double y = a4;
      v29.size.CGFloat width = a5;
      v29.size.CGFloat height = a6;
      if (a2 > CGRectGetMaxY(v29))
      {
        v30.origin.double x = a3;
        v30.origin.double y = a4;
        v30.size.CGFloat width = a5;
        v30.size.CGFloat height = a6;
        CGRectGetMaxY(v30);
      }
    }
    else
    {
      v25.origin.double x = a3;
      v25.origin.double y = a4;
      v25.size.CGFloat width = a5;
      v25.size.CGFloat height = a6;
      CGRectGetMinY(v25);
    }
    return;
  }
  if (a2 < MinY)
  {
    v21.origin.double x = a3;
    v21.origin.double y = a4;
    v21.size.CGFloat width = a5;
    v21.size.CGFloat height = a6;
    CGRectGetMaxX(v21);
    goto LABEL_7;
  }
  v26.origin.double x = a3;
  v26.origin.double y = a4;
  v26.size.CGFloat width = a5;
  v26.size.CGFloat height = a6;
  double v15 = CGRectGetMaxY(v26);
  v27.origin.double x = a3;
  v27.origin.double y = a4;
  v27.size.CGFloat width = a5;
  v27.size.CGFloat height = a6;
  CGRectGetMaxX(v27);
  if (a2 > v15) {
    goto LABEL_13;
  }
}

double sub_1000655FC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v23.origin.double x = a1;
  v23.origin.double y = a2;
  v23.size.CGFloat width = a3;
  v23.size.CGFloat height = a4;
  double MidY = CGRectGetMidY(v23);
  double v16 = sub_100407E48(MidX, a5, a5 + a7);
  double v17 = sub_100407E48(MidY, a6, a6 + a8);
  double v18 = sub_100407E48(v16, a1, a1 + a3);
  double v19 = sub_100407E48(v17, a2, a2 + a4);
  return sqrt((v17 - v19) * (v17 - v19) + (v16 - v18) * (v16 - v18));
}

double sub_1000656DC(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v9 = sub_100407E48(a1, a3, a3 + a5);
  sub_100407E48(a2, a4, a4 + a6);
  return v9;
}

double sub_100065738(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

BOOL sub_100065798(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  v10.origin.double x = CGRectNull.origin.x;
  v10.origin.double y = CGRectNull.origin.y;
  v10.size.CGFloat width = CGRectNull.size.width;
  v10.size.CGFloat height = CGRectNull.size.height;
  return CGRectEqualToRect(v9, v10);
}

double sub_1000657F8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMaxY(v10);
  return MaxX;
}

double sub_100065858(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMinY(v10);
  return MinX;
}

double sub_1000658B8(double result, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v12 = a3 + a5;
  double v13 = a4 + a6;
  if (result < a3 || result > v12 || a2 < a4 || a2 > v13) {
    return sub_1000646B0(result, a2, a7, a8, a3, a4, a5, a6);
  }
  return result;
}

double sub_100065910(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

double sub_100065928(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v13.origin.double x = a1;
    v13.origin.double y = a2;
    v13.size.CGFloat width = a3;
    v13.size.CGFloat height = a4;
    double MinX = CGRectGetMinX(v13);
    if (MinX >= a5) {
      double v11 = a5;
    }
    else {
      double v11 = MinX;
    }
    v14.origin.double x = a1;
    v14.origin.double y = a2;
    v14.size.CGFloat width = a3;
    v14.size.CGFloat height = a4;
    CGRectGetMaxX(v14);
    v15.origin.double x = a1;
    v15.origin.double y = a2;
    v15.size.CGFloat width = a3;
    v15.size.CGFloat height = a4;
    CGRectGetMinY(v15);
    v16.origin.double x = a1;
    v16.origin.double y = a2;
    v16.size.CGFloat width = a3;
    v16.size.CGFloat height = a4;
    CGRectGetMaxY(v16);
    return v11;
  }
  return a5;
}

double sub_100065A10(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v26.origin.double x = a5;
  v26.origin.double y = a6;
  v26.size.CGFloat width = a7;
  v26.size.CGFloat height = a8;
  double MidX = CGRectGetMidX(v26);
  v27.origin.double x = a5;
  v27.origin.double y = a6;
  v27.size.CGFloat width = a7;
  v27.size.CGFloat height = a8;
  double MidY = CGRectGetMidY(v27);
  v28.origin.double x = a1;
  v28.origin.double y = a2;
  v28.size.CGFloat width = a3;
  v28.size.CGFloat height = a4;
  double v17 = CGRectGetMidX(v28);
  v29.origin.double x = a1;
  v29.origin.double y = a2;
  v29.size.CGFloat width = a3;
  v29.size.CGFloat height = a4;
  double v18 = MidY - CGRectGetMidY(v29);
  CGFloat v19 = a1;
  CGFloat v20 = a2;
  CGFloat v21 = a3;
  CGFloat v22 = a4;

  *(void *)&double result = (unint64_t)CGRectOffset(*(CGRect *)&v19, MidX - v17, v18);
  return result;
}

BOOL sub_100065AF4(double a1, double a2, double a3, double a4)
{
  BOOL result = 0;
  if (fabs(a1) != INFINITY && fabs(a2) != INFINITY && fabs(a3) != INFINITY)
  {
    double v5 = fabs(a4);
    return v5 > INFINITY || v5 < INFINITY;
  }
  return result;
}

uint64_t sub_100065B50(double a1, double a2, double a3, double a4)
{
  double v4 = fabs(a1);
  BOOL v5 = v4 < INFINITY;
  if (v4 > INFINITY) {
    BOOL v5 = 1;
  }
  double v6 = fabs(a2);
  BOOL v7 = v6 < INFINITY;
  if (v6 > INFINITY) {
    BOOL v7 = 1;
  }
  int v8 = v5 && v7;
  double v9 = fabs(a3);
  BOOL v10 = v9 < INFINITY;
  if (v9 > INFINITY) {
    BOOL v10 = 1;
  }
  double v11 = fabs(a4);
  BOOL v12 = v11 < INFINITY;
  if (v11 > INFINITY) {
    BOOL v12 = 1;
  }
  return v8 & v10 & v12;
}

uint64_t sub_100065BC8(double a1, double a2)
{
  double v2 = fabs(a1);
  BOOL v3 = v2 < INFINITY;
  if (v2 > INFINITY) {
    BOOL v3 = 1;
  }
  double v4 = fabs(a2);
  BOOL v5 = v4 < INFINITY;
  if (v4 > INFINITY) {
    BOOL v5 = 1;
  }
  return v3 & v5;
}

BOOL sub_100065BF8(double a1, double a2)
{
  BOOL v2 = fabs(a1) == INFINITY;
  return fabs(a2) == INFINITY && v2;
}

double sub_100065C1C(long double a1, long double a2)
{
  return atan2(a2, a1);
}

void sub_100065C2C(double a1)
{
  if (a1 < 0.0 || a1 >= 360.0) {
    fmod(a1 + 360.0, 360.0);
  }
}

double sub_100065C88(double a1, double a2, double a3)
{
  return a2 * a3 + a1 * (1.0 - a3);
}

void sub_100065C9C(double a1, double a2, double a3)
{
  double v5 = a1;
  if (a1 < 0.0 || a1 >= 360.0)
  {
    double v6 = fmod(a1 + 360.0, 360.0);
    if (v6 < 0.0) {
      double v6 = v6 + 360.0;
    }
    if (v6 == 0.0) {
      double v5 = 0.0;
    }
    else {
      double v5 = v6;
    }
  }
  if (a2 < 0.0 || a2 >= 360.0)
  {
    double v7 = fmod(a2 + 360.0, 360.0);
    if (v7 < 0.0) {
      double v7 = v7 + 360.0;
    }
    if (v7 == 0.0) {
      a2 = 0.0;
    }
    else {
      a2 = v7;
    }
  }
  if (vabdd_f64(a2, v5) > 180.0)
  {
    if (v5 <= a2) {
      double v8 = -360.0;
    }
    else {
      double v8 = 360.0;
    }
    a2 = a2 + v8;
  }
  double v9 = a2 * a3 + v5 * (1.0 - a3);
  if (v9 < 0.0 || v9 >= 360.0) {
    fmod(v9 + 360.0, 360.0);
  }
}

double sub_100065DCC(double a1, double a2, double a3)
{
  sub_100065C9C(a1 * 57.2957795, a2 * 57.2957795, a3);
  return v3 * 0.0174532925;
}

double sub_100065E00(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + a1 * (1.0 - a5);
}

double sub_100065E1C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  return a5 * a9 + a1 * (1.0 - a9);
}

double sub_100065E4C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v36.origin.double x = a5;
  v36.origin.double y = a6;
  v36.size.CGFloat width = a7;
  v36.size.CGFloat height = a8;
  double MaxX = CGRectGetMaxX(v36);
  double v34 = a1;
  v37.origin.double x = a1;
  v37.origin.double y = a2;
  v37.size.CGFloat width = a3;
  v37.size.CGFloat height = a4;
  if (MaxX > CGRectGetMaxX(v37))
  {
    v38.origin.double x = a5;
    v38.origin.double y = a6;
    v38.size.CGFloat width = a7;
    v38.size.CGFloat height = a8;
    double MinX = CGRectGetMinX(v38);
    v39.origin.double x = a1;
    v39.origin.double y = a2;
    v39.size.CGFloat width = a3;
    v39.size.CGFloat height = a4;
    if (MinX > CGRectGetMinX(v39))
    {
      v40.origin.double x = a5;
      v40.origin.double y = a6;
      v40.size.CGFloat width = a7;
      v40.size.CGFloat height = a8;
      double v29 = CGRectGetMaxX(v40);
      v41.origin.double x = a1;
      v41.origin.double y = a2;
      v41.size.CGFloat width = a3;
      v41.size.CGFloat height = a4;
      double v30 = v29 - CGRectGetMaxX(v41);
      v42.origin.double x = a5;
      v42.origin.double y = a6;
      v42.size.CGFloat width = a7;
      v42.size.CGFloat height = a8;
      double v28 = CGRectGetMinX(v42);
      v43.origin.double x = a1;
      v43.origin.double y = a2;
      v43.size.CGFloat width = a3;
      v43.size.CGFloat height = a4;
      double v17 = v28 - CGRectGetMinX(v43);
      if (v30 < v17) {
        double v17 = v30;
      }
      double v18 = a1 + v17;
LABEL_11:
      double v34 = v18;
      goto LABEL_12;
    }
  }
  v44.origin.double x = a5;
  v44.origin.double y = a6;
  v44.size.CGFloat width = a7;
  v44.size.CGFloat height = a8;
  double v19 = CGRectGetMinX(v44);
  v45.origin.double x = a1;
  v45.origin.double y = a2;
  v45.size.CGFloat width = a3;
  v45.size.CGFloat height = a4;
  if (v19 < CGRectGetMinX(v45))
  {
    v46.origin.double x = a5;
    v46.origin.double y = a6;
    v46.size.CGFloat width = a7;
    v46.size.CGFloat height = a8;
    double v20 = CGRectGetMaxX(v46);
    v47.origin.double x = a1;
    v47.origin.double y = a2;
    v47.size.CGFloat width = a3;
    v47.size.CGFloat height = a4;
    if (v20 < CGRectGetMaxX(v47))
    {
      v48.origin.double x = a1;
      v48.origin.double y = a2;
      v48.size.CGFloat width = a3;
      v48.size.CGFloat height = a4;
      double v31 = CGRectGetMinX(v48);
      v49.origin.double x = a5;
      v49.origin.double y = a6;
      v49.size.CGFloat width = a7;
      v49.size.CGFloat height = a8;
      double v32 = v31 - CGRectGetMinX(v49);
      v50.origin.double x = a1;
      v50.origin.double y = a2;
      v50.size.CGFloat width = a3;
      v50.size.CGFloat height = a4;
      double v21 = CGRectGetMaxX(v50);
      v51.origin.double x = a5;
      v51.origin.double y = a6;
      v51.size.CGFloat width = a7;
      v51.size.CGFloat height = a8;
      double v22 = v21 - CGRectGetMaxX(v51);
      if (v32 < v22) {
        double v22 = v32;
      }
      double v18 = a1 - v22;
      goto LABEL_11;
    }
  }
LABEL_12:
  v52.origin.double x = a5;
  v52.origin.double y = a6;
  v52.size.CGFloat width = a7;
  v52.size.CGFloat height = a8;
  double MaxY = CGRectGetMaxY(v52);
  v53.origin.double x = a1;
  v53.origin.double y = a2;
  v53.size.CGFloat width = a3;
  v53.size.CGFloat height = a4;
  if (MaxY <= CGRectGetMaxY(v53)) {
    goto LABEL_15;
  }
  v54.origin.double x = a5;
  v54.origin.double y = a6;
  v54.size.CGFloat width = a7;
  v54.size.CGFloat height = a8;
  double MinY = CGRectGetMinY(v54);
  v55.origin.double x = a1;
  v55.origin.double y = a2;
  v55.size.CGFloat width = a3;
  v55.size.CGFloat height = a4;
  if (MinY <= CGRectGetMinY(v55))
  {
LABEL_15:
    v60.origin.double x = a5;
    v60.origin.double y = a6;
    v60.size.CGFloat width = a7;
    v60.size.CGFloat height = a8;
    double v25 = CGRectGetMinY(v60);
    v61.origin.double x = a1;
    v61.origin.double y = a2;
    v61.size.CGFloat width = a3;
    v61.size.CGFloat height = a4;
    if (v25 < CGRectGetMinY(v61))
    {
      v62.origin.double x = a5;
      v62.origin.double y = a6;
      v62.size.CGFloat width = a7;
      v62.size.CGFloat height = a8;
      double v26 = CGRectGetMaxY(v62);
      v63.origin.double x = a1;
      v63.origin.double y = a2;
      v63.size.CGFloat width = a3;
      v63.size.CGFloat height = a4;
      if (v26 < CGRectGetMaxY(v63))
      {
        v64.origin.double x = a1;
        v64.origin.double y = a2;
        v64.size.CGFloat width = a3;
        v64.size.CGFloat height = a4;
        CGRectGetMinY(v64);
        v65.origin.double x = a5;
        v65.origin.double y = a6;
        v65.size.CGFloat width = a7;
        v65.size.CGFloat height = a8;
        CGRectGetMinY(v65);
        v66.origin.double x = a1;
        v66.origin.double y = a2;
        v66.size.CGFloat width = a3;
        v66.size.CGFloat height = a4;
        CGRectGetMaxY(v66);
        v67.origin.double x = a5;
        v67.origin.double y = a6;
        v67.size.CGFloat width = a7;
        v67.size.CGFloat height = a8;
        CGRectGetMaxY(v67);
      }
    }
  }
  else
  {
    v56.origin.double x = a5;
    v56.origin.double y = a6;
    v56.size.CGFloat width = a7;
    v56.size.CGFloat height = a8;
    CGRectGetMaxY(v56);
    v57.origin.double x = a1;
    v57.origin.double y = a2;
    v57.size.CGFloat width = a3;
    v57.size.CGFloat height = a4;
    CGRectGetMaxY(v57);
    v58.origin.double x = a5;
    v58.origin.double y = a6;
    v58.size.CGFloat width = a7;
    v58.size.CGFloat height = a8;
    CGRectGetMinY(v58);
    v59.origin.double x = a1;
    v59.origin.double y = a2;
    v59.size.CGFloat width = a3;
    v59.size.CGFloat height = a4;
    CGRectGetMinY(v59);
  }
  return v34;
}

double sub_100066270(double *a1, double a2, double a3)
{
  __double2 v5 = __sincos_stret(a3);
  double result = v5.__sinval * a2;
  *a1 = v5.__cosval * a2;
  a1[1] = v5.__sinval * a2;
  return result;
}

double sub_1000662B0(long double a1, long double a2)
{
  if (a2 != 0.0) {
    return atan2(a2, a1);
  }
  double result = 3.14159265;
  if (a1 >= 0.0) {
    return 0.0;
  }
  return result;
}

double sub_1000662E0(double a1)
{
  if (a1 == 0.0) {
    return 1.0;
  }
  return __sincos_stret(a1).__cosval;
}

double sub_10006631C(long double a1, long double a2)
{
  long double v4 = atan2(a2, a1);
  return sqrt(a2 * a2 + a1 * a1)
       * __sincos_stret((double)(int)((v4 + 6.28318531) / 0.785398163 + 0.5) * 0.785398163).__cosval;
}

double sub_100066394(int a1, double a2, double a3)
{
  if (a1) {
    return -a3;
  }
  else {
    return a3;
  }
}

double sub_1000663B0(int a1, double a2, double a3, double a4)
{
  double v4 = -a4;
  memset(&v8.c, 0, 32);
  if (a1) {
    double v4 = a4;
  }
  *(_OWORD *)&v8.a = 0uLL;
  CGAffineTransformMakeRotation(&v8, v4);
  *(void *)&double result = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&v8.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v8.c, a3), *(float64x2_t *)&v8.a, a2));
  return result;
}

void sub_100066410(double a1)
{
  if (a1 < 0.0 || a1 >= 6.28318531) {
    fmod(a1 + 6.28318531, 6.28318531);
  }
}

double sub_10006646C(double a1)
{
  double v1 = a1 + 3.14159265;
  if (v1 < 0.0 || v1 >= 6.28318531)
  {
    double v1 = fmod(v1 + 6.28318531, 6.28318531);
    if (v1 < 0.0) {
      double v1 = v1 + 6.28318531;
    }
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
  }
  return v1 + -3.14159265;
}

double sub_1000664E0(float64x2_t *a1, double a2, double a3)
{
  *(void *)&double result = *(_OWORD *)&vsubq_f64(vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a3), *a1, a2)), vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], CGPointZero.y), *a1, CGPointZero.x)));
  return result;
}

void sub_10006651C(double a1, double a2)
{
  if (a1 < 0.0 || a1 >= 6.28318531) {
    fmod(a1 + 6.28318531, 6.28318531);
  }
  if (a2 < 0.0 || a2 >= 6.28318531) {
    fmod(a2 + 6.28318531, 6.28318531);
  }
}

void sub_100066604(double a1, double a2, double a3)
{
  double v4 = 0.0;
  if (a2 != 0.0 && a3 != 0.0)
  {
    double v7 = 0.0;
    if (a1 >= 360.0)
    {
      double v4 = 1.0;
      do
      {
        double v7 = v7 + 1.0;
        a1 = a1 + -360.0;
      }
      while (a1 >= 360.0);
    }
    if (a1 < 0.0)
    {
      double v4 = -1.0;
      do
      {
        double v7 = v7 + -1.0;
        a1 = a1 + 360.0;
      }
      while (a1 < 0.0);
    }
    if (a1 < 0.0 || a1 >= 360.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CF290);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106CE9C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014CF2B0);
      }
      CGAffineTransform v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v8);
      }
      double v9 = +[NSString stringWithUTF8String:"CGFloat CRLEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)"];
      BOOL v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1120 isFatal:0 description:"Angle out of range"];
    }
    if (a1 / 90.0 - floor(a1 / 90.0) >= 0.01 && ceil(a1 / 90.0) - a1 / 90.0 >= 0.01)
    {
      __double2 v11 = __sincos_stret(a1 * 3.14159265 / 180.0);
      for (double i = atan2(v11.__sinval / a3, v11.__cosval / a2) * 180.0 / 3.14159265; i < 0.0; double i = i + 360.0)
        ;
      for (; i >= 360.0; double i = i + -360.0)
        ;
      if (i < 0.0 || i >= 360.0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014CF2D0);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106CE14();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014CF2F0);
        }
        CGRect v13 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106590C(v13);
        }
        CGRect v14 = +[NSString stringWithUTF8String:"CGFloat CRLEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)"];
        CGRect v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
        +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:1138 isFatal:0 description:"Angle out of range"];
      }
    }
  }
}

void sub_100066994(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000669D8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100066A1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100066A60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100066AA4(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double sub_100066AB8(double a1, double a2, double a3, double a4, double a5)
{
  return a3 + a1 * a5;
}

void sub_100066AC4(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v12.origin.double x = a5;
  v12.origin.double y = a6;
  v12.size.CGFloat width = a7;
  v12.size.CGFloat height = a8;
  CGRectGetMaxX(v12);
  v13.origin.double x = a5;
  v13.origin.double y = a6;
  v13.size.CGFloat width = a7;
  v13.size.CGFloat height = a8;
  CGRectGetMaxY(v13);
}

void sub_100066B80(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRectGetMaxX(*(CGRect *)&a1);
  v8.origin.double x = a1;
  v8.origin.double y = a2;
  v8.size.CGFloat width = a3;
  v8.size.CGFloat height = a4;
  CGRectGetMaxY(v8);
}

double sub_100066C44(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double v11 = a1;
  CGRect v42 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  CGFloat x = v42.origin.x;
  CGFloat y = v42.origin.y;
  CGFloat width = v42.size.width;
  CGFloat height = v42.size.height;
  if (!CGRectIsNull(v42))
  {
    v43.origin.CGFloat x = x;
    v43.origin.CGFloat y = y;
    v43.size.CGFloat width = width;
    v43.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v43);
    v44.origin.CGFloat x = v11;
    v44.origin.CGFloat y = a2;
    v44.size.CGFloat width = a3;
    v44.size.CGFloat height = a4;
    double MinY = CGRectGetMinY(v44);
    v45.origin.CGFloat x = v11;
    v45.origin.CGFloat y = a2;
    v45.size.CGFloat width = a3;
    v45.size.CGFloat height = a4;
    double v37 = CGRectGetMaxY(v45);
    v46.origin.CGFloat x = x;
    v46.origin.CGFloat y = y;
    v46.size.CGFloat width = width;
    v46.size.CGFloat height = height;
    double v38 = v37 - CGRectGetMaxY(v46);
    v47.origin.CGFloat x = v11;
    v47.origin.CGFloat y = a2;
    v47.size.CGFloat width = a3;
    v47.size.CGFloat height = a4;
    double v33 = v38 * CGRectGetWidth(v47);
    CGFloat v36 = height;
    CGFloat v39 = x;
    v48.origin.CGFloat x = x;
    v48.origin.CGFloat y = y;
    v48.size.CGFloat width = width;
    v48.size.CGFloat height = height;
    double v16 = CGRectGetMinY(v48);
    v49.origin.CGFloat x = v11;
    v49.origin.CGFloat y = a2;
    v49.size.CGFloat width = a3;
    v49.size.CGFloat height = a4;
    double v17 = v16 - CGRectGetMinY(v49);
    v50.origin.CGFloat x = v11;
    v50.origin.CGFloat y = a2;
    v50.size.CGFloat width = a3;
    v50.size.CGFloat height = a4;
    double v18 = v17 * CGRectGetWidth(v50);
    double v19 = v33;
    if (v18 <= v33)
    {
      double v35 = MaxY - MinY;
      CGRectEdge v21 = CGRectMinYEdge;
    }
    else
    {
      v51.origin.CGFloat x = v11;
      v51.origin.CGFloat y = a2;
      v51.size.CGFloat width = a3;
      v51.size.CGFloat height = a4;
      double v20 = CGRectGetMaxY(v51);
      v52.size.CGFloat height = v36;
      v52.origin.CGFloat x = v39;
      v52.origin.CGFloat y = y;
      v52.size.CGFloat width = width;
      double v35 = v20 - CGRectGetMinY(v52);
      CGRectEdge v21 = CGRectMaxYEdge;
      double v19 = v18;
    }
    v53.origin.CGFloat x = v11;
    v53.origin.CGFloat y = a2;
    v53.size.CGFloat width = a3;
    v53.size.CGFloat height = a4;
    double MaxX = CGRectGetMaxX(v53);
    v54.size.CGFloat height = v36;
    v54.origin.CGFloat x = v39;
    v54.origin.CGFloat y = y;
    v54.size.CGFloat width = width;
    double v23 = MaxX - CGRectGetMaxX(v54);
    v55.origin.CGFloat x = v11;
    v55.origin.CGFloat y = a2;
    v55.size.CGFloat width = a3;
    v55.size.CGFloat height = a4;
    double v24 = v23 * CGRectGetHeight(v55);
    if (v24 > v19)
    {
      v56.size.CGFloat height = v36;
      v56.origin.CGFloat x = v39;
      v56.origin.CGFloat y = y;
      v56.size.CGFloat width = width;
      double v25 = CGRectGetMaxX(v56);
      v57.origin.CGFloat x = v11;
      v57.origin.CGFloat y = a2;
      v57.size.CGFloat width = a3;
      v57.size.CGFloat height = a4;
      CGRectEdge v21 = CGRectMinXEdge;
      double v35 = v25 - CGRectGetMinX(v57);
      double v19 = v24;
    }
    v58.size.CGFloat height = v36;
    v58.origin.CGFloat x = v39;
    v58.origin.CGFloat y = y;
    v58.size.CGFloat width = width;
    double MinX = CGRectGetMinX(v58);
    v59.origin.CGFloat x = v11;
    v59.origin.CGFloat y = a2;
    v59.size.CGFloat width = a3;
    v59.size.CGFloat height = a4;
    double v27 = MinX - CGRectGetMinX(v59);
    v60.origin.CGFloat x = v11;
    v60.origin.CGFloat y = a2;
    v60.size.CGFloat width = a3;
    v60.size.CGFloat height = a4;
    CGFloat v28 = CGRectGetHeight(v60);
    double v29 = v35;
    if (v27 * v28 > v19)
    {
      v61.origin.CGFloat x = v11;
      v61.origin.CGFloat y = a2;
      v61.size.CGFloat width = a3;
      v61.size.CGFloat height = a4;
      double v30 = CGRectGetMaxX(v61);
      v62.size.CGFloat height = v36;
      v62.origin.CGFloat x = v39;
      v62.origin.CGFloat y = y;
      v62.size.CGFloat width = width;
      double v29 = v30 - CGRectGetMinX(v62);
      CGRectEdge v21 = CGRectMaxXEdge;
    }
    memset(&remainder, 0, sizeof(remainder));
    memset(&slice, 0, sizeof(slice));
    v63.origin.CGFloat x = v11;
    v63.origin.CGFloat y = a2;
    v63.size.CGFloat width = a3;
    v63.size.CGFloat height = a4;
    CGRectDivide(v63, &slice, &remainder, v29, v21);
    return remainder.origin.x;
  }
  return v11;
}

double sub_100066F2C(int a1, double result, double a3, double a4, double a5)
{
  BOOL v5 = result == a4 && a3 == a5;
  if (!v5 && a4 != 0.0 && a5 != 0.0 && a4 != 3.40282347e38 && a5 != 3.40282347e38)
  {
    if (a1)
    {
      double v6 = sqrt(a5 * a5 + a4 * a4);
      return a4 / v6 * (a3 * (a5 / v6) + result * (a4 / v6));
    }
    else if (vabdd_f64(result, a4) < 0.01)
    {
      return a3 * a4 / a5;
    }
  }
  return result;
}

double sub_100066FC4(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a2 != a4 || a1 != a3;
  BOOL v5 = a3 <= 0.0 || !v4;
  if (v5 || a4 <= 0.0) {
    goto LABEL_13;
  }
  double v6 = a3 / a4;
  if (v6 <= a1 / a2)
  {
    if (v6 < a1 / a2)
    {
      double v7 = a1;
      double v8 = a1 / v6;
      goto LABEL_14;
    }
LABEL_13:
    double v8 = a2;
    double v7 = a1;
    goto LABEL_14;
  }
  double v7 = a2 * v6;
  double v8 = a2;
LABEL_14:
  if (v7 < a1 || v8 < a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF310);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106CF24();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF330);
    }
    double v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    BOOL v10 = +[NSString stringWithUTF8String:"CGSize CRLSizeExpandedToMatchAspectRatio(CGSize, CGSize)"];
    double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:1262 isFatal:0 description:"CRLSizeExpandedToMatchAspectRatio() actually shrank the size"];
  }
  return v7;
}

void sub_100067178(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000671BC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100067200(double a1, double a2, double a3, double a4)
{
  if (a1 / a2 < a3 / a4) {
    return a1 * (a4 / a2);
  }
  return a3;
}

double sub_100067234(double result, double a2, double a3, double a4)
{
  if (result <= a3)
  {
    BOOL v4 = a2 == a4;
    BOOL v5 = a2 < a4;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && !v4)
  {
    if (result / a2 <= a3 / a4)
    {
      if (result / a2 < a3 / a4) {
        return result * (a4 / a2);
      }
      else {
        return a3;
      }
    }
    else
    {
      return a3;
    }
  }
  return result;
}

double sub_10006727C(double result, double a2, double a3)
{
  if (result * a2 > a3) {
    return sqrt(result / a2 * a3);
  }
  return result;
}

double sub_10006729C(int a1, double a2, double a3, double a4, double a5)
{
  double v5 = a4 / a2;
  if (a2 == 0.0) {
    double v5 = 0.0;
  }
  double v6 = a5 / a3;
  if (a3 == 0.0) {
    double v6 = 0.0;
  }
  if (v5 >= v6) {
    double v7 = v5;
  }
  else {
    double v7 = v6;
  }
  if (v5 >= v6) {
    double v5 = v6;
  }
  if (a1) {
    double v5 = v7;
  }
  return a2 * v5;
}

double sub_1000672D8(int a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v11 = a6 / a2;
  double v12 = 0.0;
  if (a2 == 0.0) {
    double v11 = 0.0;
  }
  if (a3 != 0.0) {
    double v12 = a7 / a3;
  }
  if (v11 >= v12) {
    double v13 = v11;
  }
  else {
    double v13 = v12;
  }
  if (v11 >= v12) {
    double v11 = v12;
  }
  if (a1) {
    double v14 = v13;
  }
  else {
    double v14 = v11;
  }
  return sub_100065A10(0.0, 0.0, a2 * v14, a3 * v14, a4, a5, a6, a7);
}

double sub_10006732C(double a1, double a2, double a3, double a4)
{
  double v4 = a3 / a1;
  if (a1 == 0.0) {
    double v4 = 0.0;
  }
  double v5 = a4 / a2;
  if (a2 == 0.0) {
    double v5 = 0.0;
  }
  if (v4 >= v5) {
    double v6 = v5;
  }
  else {
    double v6 = v4;
  }
  if (v4 >= v5) {
    double v7 = v4;
  }
  else {
    double v7 = v5;
  }
  if (v4 == 0.0 || v5 == 0.0) {
    double v9 = v7;
  }
  else {
    double v9 = v6;
  }
  return a1 * v9;
}

void sub_10006736C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7)
{
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v18, -a5, -a6);
  memset(&v17, 0, sizeof(v17));
  CGAffineTransformMakeScale(&v17, a7, a7);
  memset(&v16, 0, sizeof(v16));
  CGAffineTransform t1 = v18;
  CGAffineTransform t2 = v17;
  CGAffineTransformConcat(&v15, &t1, &t2);
  CGAffineTransform t1 = v18;
  CGAffineTransformInvert(&v12, &t1);
  CGAffineTransformConcat(&v16, &v15, &v12);
  CGAffineTransform t1 = v16;
  v19.origin.CGFloat x = a1;
  v19.origin.CGFloat y = a2;
  v19.size.CGFloat width = a3;
  v19.size.CGFloat height = a4;
  CGRectApplyAffineTransform(v19, &t1);
}

double sub_100067484(double a1)
{
  double v1 = floor(a1);
  double v2 = a1 - v1;
  double result = ceil(a1);
  if (v2 < 0.49) {
    return v1;
  }
  return result;
}

double sub_1000674B8(double a1)
{
  return ceil(a1);
}

double sub_1000674C4(double a1, double a2)
{
  return sub_100407DFC(a1 * a2) / a2;
}

double sub_1000674F0(double a1, double a2)
{
  double v3 = sub_100407DFC(a1);
  sub_100407DFC(a2);
  return v3;
}

double sub_100067528(double a1, double a2, double a3)
{
  double v4 = a2 * a3;
  double v5 = sub_100407DFC(a1 * a3);
  sub_100407DFC(v4);
  return 1.0 / a3 * v5;
}

double sub_10006757C(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_100067584(a1, a2, a3, a4, 1.0);
}

double sub_100067584(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8 = a1;
  if (a5 == 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF350);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106CFAC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF370);
    }
    double v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    BOOL v10 = +[NSString stringWithUTF8String:"CGRect CRLRoundedRectForScale(CGRect, CGFloat)"];
    double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:1462 isFatal:0 description:"cannot give scale = 0 for CRLRoundedRectForScale!"];
  }
  else if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v26.origin.CGFloat x = sub_1000652FC(v8, a2, a3, a4, a5);
    CGFloat x = v26.origin.x;
    CGFloat y = v26.origin.y;
    CGFloat width = v26.size.width;
    CGFloat height = v26.size.height;
    double MinX = CGRectGetMinX(v26);
    double v18 = sub_100407DFC(MinX);
    v27.origin.CGFloat x = x;
    v27.origin.CGFloat y = y;
    v27.size.CGFloat width = width;
    v27.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v27);
    double v20 = sub_100407DFC(MinY);
    v28.origin.CGFloat x = x;
    v28.origin.CGFloat y = y;
    v28.size.CGFloat width = width;
    v28.size.CGFloat height = height;
    double MaxX = CGRectGetMaxX(v28);
    CGFloat v22 = sub_100407DFC(MaxX) - v18;
    v29.origin.CGFloat x = x;
    v29.origin.CGFloat y = y;
    v29.size.CGFloat width = width;
    v29.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v29);
    double v24 = sub_100407DFC(MaxY);
    return sub_1000652FC(v18, v20, v22, v24 - v20, 1.0 / a5);
  }
  return v8;
}

void sub_1000677D8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006781C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100067860(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8 = a1;
  if (a5 == 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF390);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106D034();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014CF3B0);
    }
    double v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    BOOL v10 = +[NSString stringWithUTF8String:"CGRect CRLAliasRoundedRectForScale(CGRect, CGFloat)"];
    double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:1487 isFatal:0 description:"cannot give scale = 0 for CRLRoundedRectForScale!"];
  }
  else if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v37.origin.CGFloat x = sub_1000652FC(v8, a2, a3, a4, a5);
    CGFloat x = v37.origin.x;
    CGFloat y = v37.origin.y;
    CGFloat width = v37.size.width;
    CGFloat height = v37.size.height;
    double MinX = CGRectGetMinX(v37);
    double v18 = floor(MinX);
    double v19 = MinX - v18;
    double v20 = ceil(MinX);
    if (v19 >= 0.49) {
      double v21 = v20;
    }
    else {
      double v21 = v18;
    }
    v38.origin.CGFloat x = x;
    v38.origin.CGFloat y = y;
    v38.size.CGFloat width = width;
    v38.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v38);
    double v23 = floor(MinY);
    double v24 = MinY - v23;
    double v25 = ceil(MinY);
    if (v24 >= 0.49) {
      CGFloat v26 = v25;
    }
    else {
      CGFloat v26 = v23;
    }
    v39.origin.CGFloat x = x;
    v39.origin.CGFloat y = y;
    v39.size.CGFloat width = width;
    v39.size.CGFloat height = height;
    double MaxX = CGRectGetMaxX(v39);
    double v28 = floor(MaxX);
    double v29 = MaxX - v28;
    double v30 = ceil(MaxX);
    if (v29 < 0.49) {
      double v30 = v28;
    }
    double v36 = v30 - v21;
    v40.origin.CGFloat x = x;
    v40.origin.CGFloat y = y;
    v40.size.CGFloat width = width;
    v40.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v40);
    double v32 = floor(MaxY);
    double v33 = MaxY - v32;
    double v34 = ceil(MaxY);
    if (v33 < 0.49) {
      double v34 = v32;
    }
    return sub_1000652FC(v21, v26, v36, v34 - v26, 1.0 / a5);
  }
  return v8;
}

void sub_100067B00(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100067B44(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100067B88(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  v8.origin.CGFloat x = sub_1000652FC(a1, a2, a3, a4, a5);
  CGRect v9 = CGRectIntegral(v8);

  return sub_1000652FC(v9.origin.x, v9.origin.y, v9.size.width, v9.size.height, 1.0 / a5);
}

double sub_100067BC8(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v7 = a1;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v9.origin.CGFloat x = v7;
    v9.origin.CGFloat y = a2;
    v9.size.CGFloat width = a3;
    v9.size.CGFloat height = a4;
    return floor(COERCE_DOUBLE(CGRectStandardize(v9)));
  }
  return v7;
}

uint64_t sub_100067C58()
{
  return 0;
}

uint64_t sub_100067C6C()
{
  return 0;
}

uint64_t sub_100067C90()
{
  return 0;
}

uint64_t sub_100067CA4()
{
  return 0;
}

double sub_100067CF8(double a1)
{
  return a1;
}

void sub_10006906C(id a1)
{
  double v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_1000690B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypeURL error:a3];
  }
  else
  {
    double v5 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v5 setUrl:v6];
    [*(id *)(a1 + 40) addObject:v5];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100069148(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v9 = v5;
  if (a3)
  {
    [v6 p_logItemProviderError:UTTypePlainText error:a3];
  }
  else if ((objc_msgSend(v6, "p_stringIsConsideredEmpty:", v5) & 1) == 0)
  {
    double v7 = objc_alloc_init(CRLSEImportableItem);
    id v8 = [objc_alloc((Class)NSAttributedString) initWithString:v9];
    [(CRLSEImportableItem *)v7 setAttributedText:v8];

    [(CRLSEImportableItem *)v7 setMediaUTI:UTTypePlainText];
    [*(id *)(a1 + 40) addObject:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10006922C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypePlainText error:a3];
    goto LABEL_36;
  }
  if (![v5 length])
  {
    if (qword_101719BC8 != -1) {
      dispatch_once(&qword_101719BC8, &stru_1014CF440);
    }
    double v13 = off_10166B5F8;
    if (os_log_type_enabled((os_log_t)off_10166B5F8, OS_LOG_TYPE_ERROR)) {
      sub_10106D140(v13);
    }
    goto LABEL_36;
  }
  double v7 = [*(id *)(a1 + 40) suggestedName];
  if ([v7 length])
  {
    id v8 = [*(id *)(a1 + 40) suggestedName];
    id v9 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
    BOOL v10 = [v8 stringByTrimmingCharactersInSet:v9];
    id v11 = [v10 length];

    if (v11)
    {
      uint64_t v12 = [*(id *)(a1 + 40) suggestedName];
      goto LABEL_13;
    }
  }
  else
  {
  }
  uint64_t v12 = [*(id *)(a1 + 32) defaultImageFileName];
LABEL_13:
  double v14 = (void *)v12;
  CGAffineTransform v15 = +[NSFileManager defaultManager];
  CGAffineTransform v16 = [v15 temporaryDirectory];
  CGAffineTransform v17 = +[NSUUID UUID];
  double v18 = [v17 UUIDString];
  double v19 = [v16 URLByAppendingPathComponent:v18];

  double v20 = [v19 URLByAppendingPathComponent:v14];
  uint64_t v21 = [v20 pathExtension];
  if (!v21
    || (CGFloat v22 = (void *)v21,
        [v20 pathExtension],
        double v23 = objc_claimAutoreleasedReturnValue(),
        id v24 = [v23 length],
        v23,
        v22,
        !v24))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    double v25 = [*(id *)(a1 + 40) registeredTypeIdentifiers];
    id v26 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
    if (v26)
    {
      id v27 = v26;
      CGRect v42 = v15;
      CGRect v43 = v14;
      CGRect v44 = v6;
      uint64_t v45 = a1;
      uint64_t v28 = *(void *)v48;
      while (2)
      {
        for (double i = 0; i != v27; double i = (char *)i + 1)
        {
          if (*(void *)v48 != v28) {
            objc_enumerationMutation(v25);
          }
          double v30 = +[UTType typeWithIdentifier:*(void *)(*((void *)&v47 + 1) + 8 * i)];
          if ([v30 conformsToType:UTTypeRAWImage])
          {
            uint64_t v31 = [v30 preferredFilenameExtension];
            if (v31)
            {
              double v32 = (void *)v31;
              double v33 = [v30 preferredFilenameExtension];
              id v34 = [v33 length];

              if (v34)
              {
                double v35 = [v30 preferredFilenameExtension];

                id v6 = v44;
                a1 = v45;
                CGAffineTransform v15 = v42;
                double v14 = v43;
                goto LABEL_28;
              }
            }
          }
        }
        id v27 = [v25 countByEnumeratingWithState:&v47 objects:v51 count:16];
        if (v27) {
          continue;
        }
        break;
      }
      id v6 = v44;
      a1 = v45;
      CGAffineTransform v15 = v42;
      double v14 = v43;
    }
    double v35 = @"raw";
LABEL_28:

    uint64_t v36 = [v20 URLByAppendingPathExtension:v35];

    double v20 = (void *)v36;
  }
  id v46 = 0;
  unsigned int v37 = [v15 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:&v46];
  id v38 = v46;
  if (v37)
  {
    CGRect v39 = [v20 path];
    [v15 createFileAtPath:v39 contents:v6 attributes:0];

    CGRect v40 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v40 setUrl:v20];
    [*(id *)(a1 + 48) addObject:v40];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CF460);
    }
    CGRect v41 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106D1EC(v41, v38);
    }
  }

LABEL_36:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000696B8(id a1)
{
  double v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_1000696FC(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100069740(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v6)
  {
    if (qword_101719BC8 != -1) {
      dispatch_once(&qword_101719BC8, &stru_1014CF4A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B5F8, OS_LOG_TYPE_DEBUG)) {
      sub_10106D2A0();
    }
    if (objc_msgSend(*(id *)(a1 + 32), "p_file:conformsTo:", v6, UTTypeImage))
    {
      uint64_t v26 = 0;
      id v27 = (id *)&v26;
      uint64_t v28 = 0x3032000000;
      double v29 = sub_100069A60;
      double v30 = sub_100069A70;
      uint64_t v31 = 0;
      id v8 = [objc_alloc((Class)NSFileCoordinator) initWithFilePresenter:0];
      id v9 = v27;
      id v25 = v27[5];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100069A78;
      v19[3] = &unk_1014CF510;
      id v10 = v6;
      id v24 = &v26;
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void **)(a1 + 48);
      id v20 = v10;
      uint64_t v21 = v11;
      id v22 = v12;
      id v23 = *(id *)(a1 + 56);
      [v8 coordinateReadingItemAtURL:v10 options:1 error:&v25 byAccessor:v19];
      objc_storeStrong(v9 + 5, v25);

      _Block_object_dispose(&v26, 8);
      double v13 = v31;
    }
    else
    {
      double v14 = *(void **)(a1 + 40);
      CGAffineTransform v15 = [UTTypeData identifier];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100069DF8;
      v16[3] = &unk_1014CF538;
      v16[4] = *(void *)(a1 + 32);
      id v17 = *(id *)(a1 + 48);
      id v18 = *(id *)(a1 + 56);
      [v14 loadItemForTypeIdentifier:v15 options:0 completionHandler:v16];

      double v13 = v17;
    }
  }
  else
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypeImage error:v7];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
}

void sub_100069A04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100069A1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

uint64_t sub_100069A60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100069A70(uint64_t a1)
{
}

void sub_100069A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = *(id *)(a1 + 32);
    if (!v5)
    {
      id v16 = 0;
      goto LABEL_12;
    }
  }
  id v6 = [v5 lastPathComponent];
  id v7 = +[NSFileManager defaultManager];
  id v8 = [v7 temporaryDirectory];
  id v9 = +[NSUUID UUID];
  id v10 = [v9 UUIDString];
  uint64_t v11 = [v8 URLByAppendingPathComponent:v10];

  uint64_t v12 = [v11 URLByAppendingPathComponent:v6];
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  id obj = *(id *)(v13 + 40);
  LODWORD(v10) = [v7 createDirectoryAtURL:v11 withIntermediateDirectories:1 attributes:0 error:&obj];
  objc_storeStrong((id *)(v13 + 40), obj);
  if (v10
    && (uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8),
        id v22 = *(id *)(v14 + 40),
        unsigned int v15 = [v7 copyItemAtURL:v5 toURL:v12 error:&v22],
        objc_storeStrong((id *)(v14 + 40), v22),
        v15))
  {
    id v16 = v12;

    if (qword_101719BC8 != -1) {
      dispatch_once(&qword_101719BC8, &stru_1014CF4C8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B5F8, OS_LOG_TYPE_DEBUG)) {
      sub_10106D418();
    }
  }
  else
  {
    id v16 = v5;
  }

LABEL_12:
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CF4E8);
    }
    id v17 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106D314(a1 + 64, v17);
    }
  }
  else
  {
    id v18 = [*(id *)(a1 + 40) registeredContentTypes];
    if ([v18 count] == (id)1)
    {
      double v19 = [*(id *)(a1 + 40) registeredContentTypes];
      id v20 = [v19 objectAtIndexedSubscript:0];
    }
    else
    {
      id v20 = UTTypeImage;
    }

    uint64_t v21 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v21 setUrl:v16];
    [(CRLSEImportableItem *)v21 setMediaUTI:v20];
    [*(id *)(a1 + 48) addObject:v21];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100069D70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_100069DB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100069DF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypeData error:a3];
  }
  else
  {
    id v5 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v5 setImage:v6];
    [*(id *)(a1 + 40) addObject:v5];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100069E90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypeData error:a3];
    id v6 = [*(id *)(a1 + 40) registeredTypeIdentifiers];
    id v7 = [v6 componentsJoinedByString:@","];

    if (qword_101719BC8 != -1) {
      dispatch_once(&qword_101719BC8, &stru_1014CF580);
    }
    if (os_log_type_enabled((os_log_t)off_10166B5F8, OS_LOG_TYPE_ERROR)) {
      sub_10106D48C();
    }
    goto LABEL_18;
  }
  id v8 = [*(id *)(a1 + 40) suggestedName];
  if (![v8 length])
  {

    goto LABEL_10;
  }
  id v9 = [*(id *)(a1 + 40) suggestedName];
  id v10 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  uint64_t v11 = [v9 stringByTrimmingCharactersInSet:v10];
  id v12 = [v11 length];

  if (!v12)
  {
LABEL_10:
    uint64_t v13 = +[NSUUID UUID];
    uint64_t v14 = [v13 UUIDString];
    id v7 = [v14 stringByAppendingString:@".pdf"];

    goto LABEL_11;
  }
  id v7 = [*(id *)(a1 + 40) suggestedName];
LABEL_11:
  unsigned int v15 = +[NSFileManager defaultManager];
  id v16 = [v15 temporaryDirectory];
  id v17 = +[NSUUID UUID];
  id v18 = [v17 UUIDString];
  double v19 = [v16 URLByAppendingPathComponent:v18];

  id v20 = [v19 URLByAppendingPathComponent:v7];
  id v25 = 0;
  LODWORD(v18) = [v15 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:&v25];
  id v21 = v25;
  if (v18)
  {
    id v22 = [v20 path];
    [v15 createFileAtPath:v22 contents:v5 attributes:0];

    id v23 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v23 setUrl:v20];
    [*(id *)(a1 + 48) addObject:v23];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014CF5A0);
    }
    id v24 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106D1EC(v24, v21);
    }
  }

LABEL_18:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10006A1A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_10006A1E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10006A22C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) p_logItemProviderError:UTTypeData error:a3];
    id v6 = [*(id *)(a1 + 40) registeredTypeIdentifiers];
    id v7 = [v6 componentsJoinedByString:@","];

    if (qword_101719BC8 != -1) {
      dispatch_once(&qword_101719BC8, &stru_1014CF5C0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B5F8, OS_LOG_TYPE_ERROR)) {
      sub_10106D48C();
    }
  }
  else
  {
    id v7 = objc_alloc_init(CRLSEImportableItem);
    [(CRLSEImportableItem *)v7 setUrl:v5];
    [*(id *)(a1 + 48) addObject:v7];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10006A330(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

uint64_t sub_10006A374(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10006A428(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_10006A768(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  double v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_10006AA74(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

uint64_t sub_10006AA94()
{
  return objc_opt_class();
}

id sub_10006B444(void *a1)
{
  id v1 = a1;
  double v2 = [v1 parentInfo];
  if (v2)
  {
    id v3 = v1;
    while (1)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      id v4 = v2;

      double v2 = [v4 parentInfo];

      id v3 = v4;
      if (!v2) {
        goto LABEL_8;
      }
    }
    id v4 = v3;
  }
  else
  {
    id v4 = v1;
  }
LABEL_8:
  id v5 = (objc_class *)objc_opt_class();
  uint64_t v11 = sub_100246E2C(v4, v5, 1, v6, v7, v8, v9, v10, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);

  return v11;
}

id sub_10006B53C(void *a1)
{
  id v1 = sub_10006B444(a1);
  uint64_t v8 = sub_100246AC8(v1, 1, v2, v3, v4, v5, v6, v7, (uint64_t)&OBJC_PROTOCOL___CRLCanvasLockableElementInfo);
  id v9 = [v8 locked];

  return v9;
}

void sub_10006B728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006B740(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006B750(uint64_t a1)
{
}

void sub_10006B758(uint64_t a1)
{
  [*(id *)(a1 + 48) p_loadBrushIfNeeded:*(void *)(a1 + 32)];
  [*(id *)(a1 + 48) p_storagesByBrushName];
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v3 = [v2 deepCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10006B96C(uint64_t a1)
{
  return [*(id *)(a1 + 40) p_loadBrushIfNeeded:*(void *)(a1 + 32)];
}

void sub_10006B9CC(id a1)
{
  v3[0] = @"Chalk2";
  v3[1] = @"Dry Brush";
  void v3[2] = @"Feathered Brush";
  v3[3] = @"Pen";
  v3[4] = @"Crayon";
  void v3[5] = @"Pencil";
  v3[6] = @"Basic";
  v3[7] = @"Basic Rounded";
  v3[8] = @"Basic Square";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:9];
  uint64_t v2 = (void *)qword_1016A8F10;
  qword_1016A8F10 = v1;
}

void sub_10006BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BC34(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSCache);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:@"CRLBrushStrokeLoaderStorageCache"];
  [*(id *)(a1 + 48) p_allStorageCaches];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 addObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_10006BD1C(id a1)
{
  uint64_t v1 = +[NSMutableArray array];
  id v2 = (void *)qword_1016A8F20;
  qword_1016A8F20 = v1;
}

void sub_10006BDB0(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.freeform.CRLBrushStrokeLoadQueue", v3);
  id v2 = (void *)qword_1016A8F30;
  qword_1016A8F30 = (uint64_t)v1;
}

void sub_10006BE68(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  id v2 = (void *)qword_1016A8F40;
  qword_1016A8F40 = v1;
}

void sub_10006C3EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006C430(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10006C474(xmlDoc *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = xmlXPathNewContext(a1);
  if (!v4)
  {
    NSLog(@"Unable to create XPath context.");
LABEL_13:
    id v9 = 0;
    goto LABEL_14;
  }
  id v5 = v4;
  xmlXPathRegisterNs(v4, (const xmlChar *)"svg", (const xmlChar *)"http://www.w3.org/2000/svg");
  xmlXPathObjectPtr v6 = xmlXPathEvalExpression((const xmlChar *)[v3 cStringUsingEncoding:4], v5);
  if (!v6)
  {
    NSLog(@"Unable to evaluate XPath.");
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  p_nodeNr = &v6->nodesetval->nodeNr;
  if (!p_nodeNr)
  {
    NSLog(@"Nodes was nil.");
    goto LABEL_13;
  }
  id v9 = +[NSMutableArray array];
  if (*p_nodeNr >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = sub_10006EA90(*(void **)(*((void *)p_nodeNr + 1) + 8 * v10), 0);
      if (v11) {
        [v9 addObject:v11];
      }

      ++v10;
    }
    while (v10 < *p_nodeNr);
  }
  xmlXPathFreeObject(v7);
  xmlXPathFreeContext(v5);
LABEL_14:

  return v9;
}

void sub_10006CAFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006CB40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006CB84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006CBC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006D808(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006D84C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006D890(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006D8D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E114(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E158(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E19C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E1E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E980(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006E9C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006EA08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006EA4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10006EA90(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = a1[2];
  if (v5)
  {
    xmlXPathObjectPtr v6 = +[NSString stringWithCString:v5 encoding:4];
    [v4 setObject:v6 forKey:@"nodeName"];
  }
  if ((unint64_t)(a1[10] + 1) >= 2)
  {
    id v20 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:");
    id v21 = [v4 objectForKey:@"nodeName"];
    unsigned int v22 = [v21 isEqual:@"text"];

    if (v3 && v22)
    {
      id v23 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
      id v24 = [v20 stringByTrimmingCharactersInSet:v23];

      id v25 = [v3 objectForKey:@"nodeContent"];
      uint64_t v26 = v25;
      if (v25)
      {
        id v27 = [v25 stringByAppendingString:v24];
      }
      else
      {
        id v27 = v24;
      }
      uint64_t v28 = v27;
      [v3 setObject:v27 forKey:@"nodeContent"];

      id v18 = 0;
      goto LABEL_22;
    }
    [v4 setObject:v20 forKey:@"nodeContent"];
  }
  uint64_t v7 = (void *)a1[11];
  if (v7)
  {
    id v29 = v3;
    uint64_t v8 = +[NSMutableDictionary dictionary];
    do
    {
      id v9 = +[NSMutableDictionary dictionary];
      uint64_t v10 = +[NSString stringWithCString:v7[2] encoding:4];
      uint64_t v11 = v7[3];
      if (v11) {
        id v12 = (id)sub_10006EA90(v11, v9);
      }
      if (v10)
      {
        uint64_t v13 = [v9 objectForKey:@"nodeContent"];

        if (v13)
        {
          uint64_t v14 = [v9 objectForKey:@"nodeContent"];
          [v8 setObject:v14 forKey:v10];
        }
      }
      uint64_t v7 = (void *)v7[6];
    }
    while (v7);
    [v4 setObject:v8 forKey:@"nodeAttributes"];

    id v3 = v29;
  }
  uint64_t v15 = a1[3];
  if (v15)
  {
    id v16 = +[NSMutableArray array];
    do
    {
      id v17 = sub_10006EA90(v15, v4);
      if (v17) {
        [v16 addObject:v17];
      }
      uint64_t v15 = *(void *)(v15 + 48);
    }
    while (v15);
    if ([v16 count]) {
      [v4 setObject:v16 forKey:@"nodeChildArray"];
    }
  }
  id v18 = v4;
LABEL_22:

  return v18;
}

void sub_10006F8E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006F924(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006FDF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10006FE34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10006FECC(id a1, CRLFreehandDrawingLayout *a2)
{
  id v2 = [(CRLFreehandDrawingLayout *)a2 freehandInfo];
  char v3 = [v2 prohibitsClustering] ^ 1;

  return v3;
}

void sub_100070470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000704B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100070D9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100070DE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100071674(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 p_multiselectInfo];
  uint64_t v5 = [v4 representedSelectedBoardItems];
  xmlXPathObjectPtr v6 = [v3 info];

  id v7 = [v5 containsObject:v6];
  return v7;
}

void sub_1000716F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100071738(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100071944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100071988(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100072240(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100072284(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_100072358(id a1, CRLCanvasRep *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_100072500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007251C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  sub_1002469D0(v6, v5);
  id v11 = (id)objc_claimAutoreleasedReturnValue();

  id v7 = v11;
  if (v11)
  {
    uint64_t v8 = [v11 storage];
    id v9 = [*(id *)(a1 + 32) info];
    uint64_t v10 = [v9 textStorage];

    id v7 = v11;
    if (v8 == v10)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
}

void sub_100072C58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100072C9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100074F34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100075154(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100075198(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000756DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100075720(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100075CBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100075D00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100075F78(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) numberFromString:a2];
}

void sub_100076428(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007646C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000770F0(id a1)
{
  size_t size = 0;
  sysctlbyname("kern.osversion", 0, &size, 0, 0);
  uint64_t v1 = malloc_type_malloc(size, 0xACBDD60AuLL);
  sysctlbyname("kern.osversion", v1, &size, 0, 0);
  id v2 = [objc_alloc((Class)NSString) initWithUTF8String:v1];
  id v3 = (void *)qword_1016A8F50;
  qword_1016A8F50 = (uint64_t)v2;

  free(v1);
}

void sub_1000771E4(id a1)
{
  size_t size = 0;
  sysctlbyname("hw.model", 0, &size, 0, 0);
  uint64_t v1 = malloc_type_malloc(size, 0x3B240CF6uLL);
  sysctlbyname("hw.model", v1, &size, 0, 0);
  id v2 = [objc_alloc((Class)NSString) initWithUTF8String:v1];
  id v3 = (void *)qword_1016A8F60;
  qword_1016A8F60 = (uint64_t)v2;

  free(v1);
}

id sub_1000772F0()
{
  uint64_t v0 = +[UIDevice currentDevice];
  uint64_t v1 = [v0 systemVersion];

  return v1;
}

uint64_t sub_100077344()
{
  uint64_t v0 = sub_1000772F0();
  uint64_t v1 = sub_10007737C(v0);

  return v1;
}

uint64_t sub_10007737C(void *a1)
{
  uint64_t v1 = [a1 componentsSeparatedByString:@"."];
  uint64_t v2 = (uint64_t)[v1 count];
  if (v2 < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    unint64_t v3 = v2;
    uint64_t v4 = [v1 objectAtIndexedSubscript:0];
    uint64_t v5 = 1000000 * (void)[v4 integerValue];

    if (v3 != 1)
    {
      uint64_t v6 = [v1 objectAtIndexedSubscript:1];
      v5 += 1000 * (void)[v6 integerValue];

      if (v3 >= 3)
      {
        id v7 = [v1 objectAtIndexedSubscript:2];
        v5 += (uint64_t)[v7 integerValue];
      }
    }
  }

  return v5;
}

void sub_100077694(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000776D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007790C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100077950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100077FB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100077FF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078038(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007807C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000786DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078720(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078764(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000787A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078AEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078B30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078D58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100078D9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100078DE0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) needsDownload])
  {
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  unint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  if (!v3
    || (+[CRLAsset null],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        v4,
        v3 == v4))
  {
    NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
    uint64_t v10 = +[NSBundle mainBundle];
    id v11 = [v10 localizedStringForKey:@"Some images can’t be displayed." value:0 table:0];
    unsigned int v22 = v11;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];

    uint64_t v12 = +[NSError errorWithDomain:@"com.apple.freeform.CRLErrorDomainMediaCompatibility" code:100 userInfo:v5];
    uint64_t v2 = 0;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(v13 + 24);
    *(void *)(v13 + 24) = v12;
    goto LABEL_9;
  }
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 8) type];
  uint64_t v6 = sub_1000304C8();
  v20[0] = v6;
  id v7 = +[UTType typeWithIdentifier:@"com.adobe.encapsulated-postscript"];
  v20[1] = v7;
  uint64_t v2 = 2;
  uint64_t v8 = +[NSArray arrayWithObjects:v20 count:2];
  unsigned __int8 v9 = [v5 crl_conformsToAnyUTType:v8];

  if ((v9 & 1) == 0)
  {
    if ([*(id *)(a1 + 32) isCancelled])
    {
      uint64_t v2 = 0;
      goto LABEL_10;
    }
    id v17 = +[CRLImageProviderPool sharedPool];
    uint64_t v2 = 1;
    uint64_t v14 = [v17 temporaryProviderForAsset:*(void *)(*(void *)(a1 + 32) + 8) shouldValidate:1];

    if (([v14 isError] & 1) == 0)
    {
      id v18 = +[CRLIngestionTypes imageUTTypesThatRequireConversion];
      unsigned int v19 = [v5 crl_conformsToAnyUTType:v18];

      if (v19) {
        uint64_t v2 = 2;
      }
      else {
        uint64_t v2 = 5;
      }
    }
LABEL_9:
  }
LABEL_10:

LABEL_11:
  uint64_t v15 = *(void *)(a1 + 48);
  if (v2 < v15) {
    uint64_t v15 = v2;
  }
  *(void *)(*(void *)(a1 + 32) + 16) = v15;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007976C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000797B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007A1E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007A228(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007A6EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007A730(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007B348(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007B38C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10007B4E8(float *a1, double a2)
{
  return *a1 + a2;
}

float sub_10007B4F8(uint64_t a1, double a2, double a3)
{
  float result = a2;
  float v4 = a3;
  *(float *)(a1 + 4) = result;
  *(float *)(a1 + 8) = v4;
  return result;
}

double sub_10007B508(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

double sub_10007B518(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 12);
  return (double)*(unint64_t *)&a2 / 10.0;
}

double sub_10007B52C(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 14);
  return (double)*(unint64_t *)&a2 / 1000.0;
}

double sub_10007B544(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 16);
  return (double)*(unint64_t *)&a2 / 10.0;
}

void sub_10007B558(uint64_t a1, double a2)
{
  sub_100066410(a2);
  *(_WORD *)(a1 + 20) = (int)sub_100407E48(v3 * 10430.2192, 0.0, 65535.0);
}

double sub_10007B5A0(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 20);
  return (double)*(unint64_t *)&a2 / 10430.2192;
}

void sub_10007B804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007B890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007BFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007C65C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007C6A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CBA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CBEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CD7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CDC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CF64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007CFA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D138(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D17C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D320(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D364(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D4F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D538(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D818(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D85C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D8A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007D8E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007DAA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007DAE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007DD60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007DDA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E138(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E17C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E368(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E3AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007E584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007ED10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007ED54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007ED98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007EDDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10007EE20(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

void sub_10007F0B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007F0FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007F568(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10007F5AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10007F73C(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double sub_10007F788(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  void v3[2] = a1[2];
  return sub_10007F7C8((double *)v3) * 57.2957795;
}

double sub_10007F7C8(double *a1)
{
  double v2 = *a1;
  double v1 = a1[1];
  if (v1 * a1[2] - *a1 * a1[3] > 0.0)
  {
    double v2 = -v2;
    double v1 = -v1;
  }
  return atan2(v1, v2);
}

BOOL sub_10007F7EC(double *a1)
{
  return a1[2] * a1[1] - *a1 * a1[3] > 0.0;
}

double sub_10007F808(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

double sub_10007F81C(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

CGAffineTransform *sub_10007F840@<X0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  CGFloat v2 = 1.0 / sqrt(*(double *)(a1 + 8) * *(double *)(a1 + 8) + *(double *)a1 * *(double *)a1);
  CGFloat v3 = 1.0 / sqrt(*(double *)(a1 + 24) * *(double *)(a1 + 24) + *(double *)(a1 + 16) * *(double *)(a1 + 16));
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v6.a = *(_OWORD *)a1;
  *(_OWORD *)&v6.c = v4;
  *(_OWORD *)&v6.tCGFloat x = *(_OWORD *)(a1 + 32);
  return CGAffineTransformScale(a2, &v6, v2, v3);
}

BOOL sub_10007F8A0(double *a1, double a2, double a3)
{
  double v3 = 1.0 / (a2 * 0.5);
  double v4 = 1.0 / (a3 * 0.5);
  if (v3 >= v4) {
    double v3 = v4;
  }
  double v5 = fabs(a1[3]);
  if (fabs(*a1) < v3 && v5 < v3) {
    return 1;
  }
  if (fabs(a1[1]) >= v3) {
    return 0;
  }
  return fabs(a1[2]) < v3;
}

BOOL sub_10007F910(double *a1, double a2)
{
  if (fabs(*a1) < a2 && fabs(a1[3]) < a2) {
    return 1;
  }
  if (fabs(a1[1]) >= a2) {
    return 0;
  }
  return fabs(a1[2]) < a2;
}

BOOL sub_10007F964(double *a1)
{
  if (fabs(*a1) < 1.0e-12 && fabs(a1[3]) < 1.0e-12) {
    return 1;
  }
  if (fabs(a1[1]) >= 1.0e-12) {
    return 0;
  }
  return fabs(a1[2]) < 1.0e-12;
}

BOOL sub_10007F9C0(double *a1)
{
  return fabs(a1[1]) < 1.0e-12 && fabs(a1[2]) < 1.0e-12 && *a1 >= 0.0 && a1[3] >= 0.0;
}

CGAffineTransform *sub_10007FA0C@<X0>(CGAffineTransform *result@<X0>, int a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  long long v13 = *(_OWORD *)&CGAffineTransformIdentity.a;
  long long v14 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)a3 = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)(a3 + 16) = v14;
  long long v15 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)(a3 + 32) = v15;
  if (result)
  {
    long long v30 = v14;
    long long v31 = v13;
    CGFloat v16 = a4;
    CGFloat v17 = a5;
    long long v29 = v15;
    CGFloat v18 = a6;
    double MinX = CGRectGetMinX(*(CGRect *)(&a7 - 3));
    v34.origin.CGFloat x = a4;
    v34.origin.CGFloat y = a5;
    v34.size.CGFloat width = a6;
    v34.size.CGFloat height = a7;
    CGFloat MaxX = CGRectGetMaxX(v34);
    *(_OWORD *)&v33.a = v31;
    *(_OWORD *)&v33.c = v30;
    *(_OWORD *)&v33.tCGFloat x = v29;
    CGAffineTransformTranslate((CGAffineTransform *)a3, &v33, MinX + MaxX, 0.0);
    long long v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v21;
    *(_OWORD *)&v32.tCGFloat x = *(_OWORD *)(a3 + 32);
    float result = CGAffineTransformScale(&v33, &v32, -1.0, 1.0);
    long long v22 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v22;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
  }
  if (a2)
  {
    v35.origin.CGFloat x = a4;
    v35.origin.CGFloat y = a5;
    v35.size.CGFloat width = a6;
    v35.size.CGFloat height = a7;
    double MinY = CGRectGetMinY(v35);
    v36.origin.CGFloat x = a4;
    v36.origin.CGFloat y = a5;
    v36.size.CGFloat width = a6;
    v36.size.CGFloat height = a7;
    CGFloat MaxY = CGRectGetMaxY(v36);
    long long v25 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v25;
    *(_OWORD *)&v32.tCGFloat x = *(_OWORD *)(a3 + 32);
    CGAffineTransformTranslate(&v33, &v32, 0.0, MinY + MaxY);
    long long v26 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v26;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
    long long v27 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v27;
    *(_OWORD *)&v32.tCGFloat x = *(_OWORD *)(a3 + 32);
    float result = CGAffineTransformScale(&v33, &v32, 1.0, -1.0);
    long long v28 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v28;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
  }
  return result;
}

CGAffineTransform *sub_10007FBA4@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  long long v6 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v6;
  *(_OWORD *)&v10.tCGFloat x = a2[2];
  CGAffineTransformInvert(&t1, &v10);
  long long v7 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v7;
  *(_OWORD *)&v10.tCGFloat x = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  long long v8 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tCGFloat x = a2[2];
  return CGAffineTransformConcat(a3, &v12, &v10);
}

CGAffineTransform *sub_10007FC38@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  long long v5 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v5;
  *(_OWORD *)&t1.tCGFloat x = a2[2];
  long long v6 = a1[1];
  *(_OWORD *)&t2.a = *a1;
  *(_OWORD *)&t2.c = v6;
  *(_OWORD *)&t2.tCGFloat x = a1[2];
  CGAffineTransformConcat(&v12, &t1, &t2);
  long long v7 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v7;
  *(_OWORD *)&t1.tCGFloat x = a2[2];
  CGAffineTransformInvert(&v9, &t1);
  return CGAffineTransformConcat(a3, &v12, &v9);
}

CGAffineTransform *sub_10007FCC0@<X0>(_OWORD *a1@<X0>, CGAffineTransform *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  memset(&v14, 0, sizeof(v14));
  CGAffineTransformMakeTranslation(&v14, -a3, -a4);
  memset(&v13, 0, sizeof(v13));
  CGAffineTransformMakeTranslation(&v13, a3, a4);
  CGAffineTransform t1 = v13;
  long long v8 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tCGFloat x = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  CGAffineTransform t1 = v14;
  return CGAffineTransformConcat(a2, &v12, &t1);
}

CGAffineTransform *sub_10007FD8C@<X0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, CGFloat a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  double v18 = sub_1000653B4(a3, a4, a5, a6);
  CGFloat v38 = a7;
  double v19 = sub_1000653B4(a7, a8, a9, a10);
  if (v18 < 0.0001 || v19 < 0.0001)
  {
    return CGAffineTransformMakeTranslation((CGAffineTransform *)a2, a7 - a3, a8 - a4);
  }
  else
  {
    sCGFloat x = v19 / v18;
    double v20 = sub_100064680(a3, a4, a5);
    double v22 = sub_100065C1C(v20, v21);
    double v23 = sub_100064680(a7, a8, a9);
    double v25 = sub_100065C1C(v23, v24);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    CGAffineTransformMakeTranslation((CGAffineTransform *)a2, -a3, -a4);
    CGAffineTransformMakeRotation(&t2, -v22);
    long long v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a2;
    *(_OWORD *)&t1.c = v26;
    *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(a2 + 32);
    CGAffineTransformConcat(&v44, &t1, &t2);
    long long v27 = *(_OWORD *)&v44.c;
    *(_OWORD *)a2 = *(_OWORD *)&v44.a;
    *(_OWORD *)(a2 + 16) = v27;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
    double v28 = 1.0;
    if (!a1) {
      double v28 = sx;
    }
    CGAffineTransformMakeScale(&v41, sx, v28);
    long long v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a2;
    *(_OWORD *)&t1.c = v29;
    *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(a2 + 32);
    CGAffineTransformConcat(&v44, &t1, &v41);
    long long v30 = *(_OWORD *)&v44.c;
    *(_OWORD *)a2 = *(_OWORD *)&v44.a;
    *(_OWORD *)(a2 + 16) = v30;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
    CGAffineTransformMakeRotation(&v40, v25);
    long long v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a2;
    *(_OWORD *)&t1.c = v31;
    *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(a2 + 32);
    CGAffineTransformConcat(&v44, &t1, &v40);
    long long v32 = *(_OWORD *)&v44.c;
    *(_OWORD *)a2 = *(_OWORD *)&v44.a;
    *(_OWORD *)(a2 + 16) = v32;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
    CGAffineTransformMakeTranslation(&v39, v38, a8);
    long long v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a2;
    *(_OWORD *)&t1.c = v33;
    *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(a2 + 32);
    float result = CGAffineTransformConcat(&v44, &t1, &v39);
    long long v35 = *(_OWORD *)&v44.c;
    *(_OWORD *)a2 = *(_OWORD *)&v44.a;
    *(_OWORD *)(a2 + 16) = v35;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
  }
  return result;
}

BOOL sub_10007FFF0(uint64_t a1, double a2, double a3)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v8.a = *(_OWORD *)a1;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tCGFloat x = *(_OWORD *)(a1 + 32);
  if (CGAffineTransformIsIdentity(&v8)) {
    return 0;
  }
  if (a3 == a3 * *(double *)(a1 + 24) + *(double *)(a1 + 8) * a2) {
    return a2 != a3 * *(double *)(a1 + 16) + *(double *)a1 * a2;
  }
  return 1;
}

BOOL sub_100080074(double *a1)
{
  if (a1[1] == 0.0 && a1[2] == 0.0) {
    return 1;
  }
  if (*a1 == 0.0) {
    return a1[3] == 0.0;
  }
  return 0;
}

double sub_1000800B8(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  double v7 = sqrt(v4 * v4 + *(double *)a1 * *(double *)a1);
  double v8 = sqrt(v6 * v6 + v5 * v5);
  double v9 = *(double *)a1 * v6 - v5 * v4;
  double v10 = -v8;
  double v11 = -v7;
  if (*(double *)a1 < v6) {
    double v10 = v8;
  }
  else {
    double v11 = v7;
  }
  if (v9 < 0.0) {
    double v12 = v11;
  }
  else {
    double v12 = v7;
  }
  if (v9 < 0.0) {
    double v13 = v10;
  }
  else {
    double v13 = v8;
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v14;
  *(_OWORD *)&v20.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v21, &v20, 1.0 / v12, 1.0 / v13);
  long long v15 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  double v16 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v17;
  *(_OWORD *)&v20.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformRotate(&v21, &v20, -v16);
  long long v18 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v13;
  *(double *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = *(void *)a1;
  *(void *)(a2 + 32) = *(void *)(a1 + 8);
  *(void *)(a2 + 40) = *(void *)(a1 + 16);
  *(void *)(a2 + 48) = *(void *)(a1 + 24);
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  double result = *(double *)(a1 + 40);
  *(double *)(a2 + 64) = result;
  return result;
}

CGFloat sub_1000801E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 56);
  CGFloat v5 = *(double *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v13.a = *(_OWORD *)a2;
  *(_OWORD *)&v13.c = v6;
  *(_OWORD *)&v13.tCGFloat x = *(_OWORD *)(a2 + 32);
  CGAffineTransformRotate((CGAffineTransform *)a2, &v13, v5);
  CGFloat v7 = *(double *)a1;
  CGFloat v8 = *(double *)(a1 + 8);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v12.a = *(_OWORD *)a2;
  *(_OWORD *)&v12.c = v9;
  *(_OWORD *)&v12.tCGFloat x = *(_OWORD *)(a2 + 32);
  CGAffineTransformScale(&v13, &v12, v7, v8);
  long long v10 = *(_OWORD *)&v13.c;
  *(_OWORD *)a2 = *(_OWORD *)&v13.a;
  *(_OWORD *)(a2 + 16) = v10;
  CGFloat result = v13.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v13.tx;
  return result;
}

void sub_100080274(long long *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  long long v7 = a1[1];
  long long v16 = *a1;
  v17[0] = v7;
  v17[1] = a1[2];
  sub_1000800B8((uint64_t)&v16, (uint64_t)&v18);
  long long v8 = a2[1];
  v15[0] = *a2;
  v15[1] = v8;
  v15[2] = a2[2];
  sub_1000800B8((uint64_t)v15, (uint64_t)&v16);
  if ((v18 >= 0.0 || *((double *)&v16 + 1) >= 0.0) && (v19 >= 0.0 || *(double *)&v16 >= 0.0))
  {
    double v9 = __x;
  }
  else
  {
    double v18 = -v18;
    double v19 = -v19;
    double v9 = __x + dbl_101175200[__x < 0.0];
  }
  double v10 = fmod(v9, 6.28318531);
  __CGFloat x = v10;
  double v11 = fmod(*(long double *)v17, 6.28318531);
  *(double *)long long v17 = v11;
  if (vabdd_f64(v10, v11) > 3.14159265)
  {
    BOOL v12 = v10 <= v11;
    if (v10 > v11) {
      double v11 = v10;
    }
    CGAffineTransform v13 = (double *)&v16;
    if (!v12) {
      CGAffineTransform v13 = &v18;
    }
    v13[2] = v11 + -6.28318531;
  }
  for (uint64_t i = 0; i != 72; i += 8)
    *(double *)((char *)&v18 + i) = *(double *)((char *)&v18 + i)
                                  + (*(double *)((char *)&v17[-1] + i) - *(double *)((char *)&v18 + i)) * a4;
  sub_1000801E8((uint64_t)&v18, a3);
}

BOOL sub_100080414(double *a1, double *a2, double a3)
{
  double v3 = vabdd_f64(*a1, *a2);
  if (*a1 != *a2 && v3 >= a3) {
    return 0;
  }
  double v5 = a1[1];
  double v6 = a2[1];
  double v7 = vabdd_f64(v5, v6);
  if (v5 != v6 && v7 >= a3) {
    return 0;
  }
  double v9 = a1[2];
  double v10 = a2[2];
  double v11 = vabdd_f64(v9, v10);
  if (v9 != v10 && v11 >= a3) {
    return 0;
  }
  double v13 = a1[3];
  double v14 = a2[3];
  double v15 = vabdd_f64(v13, v14);
  if (v13 != v14 && v15 >= a3) {
    return 0;
  }
  double v17 = a1[4];
  double v18 = a2[4];
  if (v17 != v18 && vabdd_f64(v17, v18) >= a3) {
    return 0;
  }
  double v19 = a1[5];
  double v20 = a2[5];
  if (v19 != v20 && vabdd_f64(v19, v20) >= a3) {
    return 0;
  }
  double v21 = a1[6];
  double v22 = a2[6];
  if (v21 != v22 && vabdd_f64(v21, v22) >= a3) {
    return 0;
  }
  double v23 = a1[7];
  double v24 = a2[7];
  if (v23 != v24 && vabdd_f64(v23, v24) >= a3) {
    return 0;
  }
  double v25 = a1[8];
  double v26 = a2[8];
  if (v25 != v26 && vabdd_f64(v25, v26) >= a3) {
    return 0;
  }
  double v27 = a1[9];
  double v28 = a2[9];
  if (v27 != v28 && vabdd_f64(v27, v28) >= a3) {
    return 0;
  }
  double v29 = a1[10];
  double v30 = a2[10];
  if (v29 != v30 && vabdd_f64(v29, v30) >= a3) {
    return 0;
  }
  double v31 = a1[11];
  double v32 = a2[11];
  if (v31 != v32 && vabdd_f64(v31, v32) >= a3) {
    return 0;
  }
  double v33 = a1[12];
  double v34 = a2[12];
  if (v33 != v34 && vabdd_f64(v33, v34) >= a3) {
    return 0;
  }
  double v35 = a1[13];
  double v36 = a2[13];
  if (v35 != v36 && vabdd_f64(v35, v36) >= a3) {
    return 0;
  }
  double v37 = a1[14];
  double v38 = a2[14];
  if (v37 != v38 && vabdd_f64(v37, v38) >= a3) {
    return 0;
  }
  double v40 = a1[15];
  double v41 = a2[15];
  return vabdd_f64(v40, v41) < a3 || v40 == v41;
}

void sub_100080814(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100080858(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100080A54(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100080A98(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000811E4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100081228(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008126C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000812B0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000816B0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000816F4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100081738(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008177C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082090(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000820D4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082594(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000825D8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000828C0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082904(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082948(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008298C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082C94(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100082CD8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  CGFloat v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100082E00@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void sub_100082F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100083010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008339C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_1000837A4(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v4 = __src;
  double v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 3);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      double v19 = (char *)sub_100046F5C(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    double v22 = &v19[24 * v16];
    __p = v19;
    double v30 = v22;
    double v31 = v22;
    double v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        double v25 = (char *)sub_100046F5C(v8, v24);
        double v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        double v30 = v22;
        double v32 = &v25[24 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 24 * (v23 >> 1);
        double v30 = v22;
      }
    }
    long long v27 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)double v22 = v27;
    double v31 = v22 + 24;
    long long v4 = (char *)sub_1000841F4((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30) {
      double v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    double v9 = __src + 24;
    double v10 = v6 - 24;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(__src + 24, __src, v6 - v9);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)v4 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)long long v4 = v20;
  }
  return v4;
}

void sub_100083A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100083F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100084048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *sub_100084064(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    CGFloat result = sub_1000841A0(v7, v12);
    unint64_t v14 = (char *)v7[1];
    double v13 = (void **)(v7 + 1);
    double v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  int64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    CGFloat result = (char *)memmove(*(void **)result, __src, v15 - v9);
    double v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    CGFloat result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v13 = &v9[v17];
  return result;
}

char *sub_1000841A0(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100004E40();
  }
  CGFloat result = (char *)sub_100046F5C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1000841F4(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(void **)(a2 + 8);
  double v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      unint64_t v7 = (void *)(v9 - 24);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  int64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

id sub_100084438(uint64_t a1)
{
  [*(id *)(a1 + 32) setAlpha:1.0];
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  void v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [*(id *)(a1 + 32) setTransform:v4];
}

id sub_100084580(uint64_t a1)
{
  [*(id *)(a1 + 32) updateFrame];
  memset(&v8, 0, sizeof(v8));
  [*(id *)(a1 + 32) bounds];
  CGFloat MaxX = CGRectGetMaxX(v9);
  CGAffineTransformMakeTranslation(&v8, MaxX * 0.5, 0.0);
  CGAffineTransform v6 = v8;
  CGAffineTransformScale(&v7, &v6, 0.25, 0.25);
  CGAffineTransform v8 = v7;
  unint64_t v3 = *(void **)(a1 + 32);
  CGAffineTransform v5 = v7;
  [v3 setTransform:&v5];
  return [*(id *)(a1 + 32) setAlpha:0.25];
}

id sub_100084638(uint64_t a1)
{
  [*(id *)(a1 + 32) remove];
  long long v2 = *(void **)(a1 + 32);

  return [v2 setTarget:0];
}

void sub_1000847F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084A58(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100084F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100085374(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000853B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000855BC(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100085600(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100085768(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000857E4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x34u);
}

id sub_1000867DC(uint64_t a1, void *a2)
{
  long long v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 p_transformInfo];
  CGAffineTransform v5 = [v4 representedShapeInfos];
  CGAffineTransform v6 = [v3 info];

  id v7 = [v5 containsObject:v6];
  return v7;
}

void sub_10008685C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000868A0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086AAC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086AF0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086CEC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086D30(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086F2C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100086F70(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087460(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000874A4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000874E8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008752C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008774C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087790(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000877D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_performAsyncMediaConversionWorkWithCompletionHandler:", *(void *)(a1 + 40));
}

void sub_100087C4C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087C90(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087CD4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0B10);
    }
    CGAffineTransform v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106FF5C(v8, v7);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0B30);
    }
    CGRect v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    uint64_t v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke");
    uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"];
    uint64_t v12 = (objc_class *)objc_opt_class();
    int64_t v13 = NSStringFromClass(v12);
    unint64_t v14 = [v7 domain];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 114, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v13, v14, [v7 code], v7);
  }
  uint64_t v15 = *(id **)(a1 + 32);
  if (v15[1] != v6)
  {
    objc_storeStrong(v15 + 3, a2);
    uint64_t v15 = *(id **)(a1 + 32);
  }
  [v15 p_completeConversionWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_100087EB8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087EFC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100087F40(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0B78);
    }
    CGAffineTransform v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101070044(v8, v7);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0B98);
    }
    CGRect v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    uint64_t v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke");
    uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"];
    uint64_t v12 = (objc_class *)objc_opt_class();
    int64_t v13 = NSStringFromClass(v12);
    unint64_t v14 = [v7 domain];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 126, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v13, v14, [v7 code], v7);
  }
  uint64_t v15 = *(id **)(a1 + 32);
  if (v15[1] != v6)
  {
    objc_storeStrong(v15 + 3, a2);
    uint64_t v15 = *(id **)(a1 + 32);
  }
  [v15 p_completeConversionWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_100088124(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100088168(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000881AC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0BB8);
    }
    CGAffineTransform v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107012C(v8, v7);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0BD8);
    }
    CGRect v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    uint64_t v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke");
    uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"];
    uint64_t v12 = (objc_class *)objc_opt_class();
    int64_t v13 = NSStringFromClass(v12);
    unint64_t v14 = [v7 domain];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 141, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v13, v14, [v7 code], v7);
  }
  uint64_t v15 = *(id **)(a1 + 32);
  if (v15[1] != v6)
  {
    objc_storeStrong(v15 + 3, a2);
    uint64_t v15 = *(id **)(a1 + 32);
  }
  [v15 p_completeConversionWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_100088390(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000883D4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008868C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x4Au);
}

void sub_100088904(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100088948(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100088CE0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100088D24(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100088FE0(id a1)
{
  double v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100089024(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100089068(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000892B8(id a1)
{
  double v1 = +[NSBundle mainBundle];
  long long v2 = [v1 bundleIdentifier];

  id v3 = objc_alloc((Class)NSString);
  if (v2) {
    CFStringRef v4 = v2;
  }
  else {
    CFStringRef v4 = @"com.apple.Unknown";
  }
  id v5 = [v3 initWithFormat:@"%@_%d", v4, getpid()];
  objc_storeStrong((id *)&qword_1016A8F80, v5);
  if (!qword_1016A8F80)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0CF8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010703C8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D0D18);
    }
    id v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v6);
    }
    id v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLTemporaryDirectory _createDirectoryWithSignature:subdirectory:error:]_block_invoke");
    CGAffineTransform v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTemporaryDirectory.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 114, 0, "invalid nil value for '%{public}s'", "secretSubdirectoryNameBase");
  }
}

void sub_100089490(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000894D4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100089E0C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100089E50(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008A010(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008A054(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008AA04(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008AA48(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008B7CC(uint64_t a1)
{
  id v9 = [*(id *)(a1 + 32) interactiveCanvasController];
  long long v2 = [v9 selectionModelTranslator];
  id v3 = [*(id *)(a1 + 32) editorController];
  CFStringRef v4 = [v3 selectionPath];
  id v5 = [v2 boardItemsForSelectionPath:v4];

  if ([v5 count])
  {
    id v6 = [*(id *)(a1 + 32) p_filterNonDisplayedInfos:v5];
    if (v6 != v5)
    {
      id v7 = [*(id *)(a1 + 32) selectionPathWithInfos:v6];
      CGAffineTransform v8 = [*(id *)(a1 + 32) editorController];
      [v8 setSelectionPath:v7];
    }
  }
}

void sub_10008BD54(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008BD98(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008BF48(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008BF8C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008DCC8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008DD0C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008E224(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008E268(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10008E2AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

void sub_10008E2B4(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) layerHost];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008E3A0;
  _OWORD v6[3] = &unk_1014D0F08;
  long long v7 = *(_OWORD *)(a1 + 32);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = *(void **)(a1 + 64);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = v5;
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  char v13 = *(unsigned char *)(a1 + 88);
  [v2 continueAsynchronousWorkOnMainThreadUsingBlock:v6];
}

void sub_10008E3A0(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) layerHost];
  [v2 endModalOperationWithToken:*(void *)(a1 + 40)];

  if ([*(id *)(a1 + 48) isCancelled]) {
    goto LABEL_10;
  }
  id v3 = [*(id *)(a1 + 48) boardItems];
  uint64_t v4 = *(void **)(a1 + 56);
  id v5 = +[CRLInsertionContext nonInteractiveInsertionContext];
  [v4 prepareGeometryForInsertingBoardItems:v3 withInsertionContext:v5];

  id v6 = [*(id *)(a1 + 56) canvasEditorHelper];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  id v24 = 0;
  uint64_t v9 = [v6 commandForReplacingImagePlaceholderInSelection:v7 withBoardItems:v3 isCrossDocument:0 withSender:v8 outSelectionBehavior:&v24];
  id v10 = v24;

  id v11 = *(void **)(a1 + 56);
  if (v9)
  {
    id v12 = [v11 interactiveCanvasController];
    char v13 = [(CRLCanvasCommandSelectionBehavior *)v12 commandController];
    [v13 enqueueCommand:v9 withSelectionBehavior:v10];
LABEL_6:

    goto LABEL_7;
  }
  uint64_t v14 = [v11 p_commandForPastingProvidedBoardItems:v3 withPasteboard:*(void *)(a1 + 80) sender:*(void *)(a1 + 72) hasValidGeometries:*(unsigned __int8 *)(a1 + 88) allowPositionChange:1];
  if (v14)
  {
    uint64_t v9 = (void *)v14;
    uint64_t v15 = [CRLCanvasCommandSelectionBehavior alloc];
    uint64_t v16 = *(void *)(a1 + 56);
    size_t v17 = +[NSSet setWithArray:v3];
    id v12 = [(CRLCanvasCommandSelectionBehavior *)v15 initWithCanvasEditor:v16 type:0 constructedInfos:v17];

    char v13 = [*(id *)(a1 + 56) interactiveCanvasController];
    unint64_t v18 = [v13 commandController];
    [v18 enqueueCommand:v9 withSelectionBehavior:v12];

    goto LABEL_6;
  }
LABEL_7:
  double v19 = [*(id *)(a1 + 48) errors];
  if ([v19 count])
  {
    long long v20 = *(void **)(a1 + 32);
    long long v21 = [*(id *)(a1 + 48) localizedErrorDescription];
    [v20 presentErrors:v19 withLocalizedDescription:v21 completionHandler:0];
  }
LABEL_10:
  double v22 = [*(id *)(a1 + 56) interactiveCanvasController];
  uint64_t v23 = [v22 editingCoordinator];
  [v23 resumeCollaborationWithReason:@"CRLCanvasEditorPastingImportableBoardItems"];
}

void sub_10008ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008ED5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v25 objects:v37 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v26;
    *(void *)&long long v6 = 67109378;
    long long v24 = v6;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = [v3 layoutForInfo:*(void *)(*((void *)&v25 + 1) + 8 * (void)v9) v24];
        id v11 = v10;
        if (v10)
        {
          id v12 = *(CGRect **)(*(void *)(a1 + 40) + 8);
          char v13 = [v10 geometryInRoot];
          [v13 frame];
          v38.origin.CGFloat x = v14;
          v38.origin.CGFloat y = v15;
          v38.size.CGFloat width = v16;
          v38.size.CGFloat height = v17;
          *(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = CGRectUnion(v12[1], v38);
        }
        else
        {
          unsigned int v18 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D0F28);
          }
          double v19 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            unsigned int v30 = v18;
            __int16 v31 = 2082;
            double v32 = "-[CRLCanvasEditor p_boundingRectForPastingBoardItems:]_block_invoke";
            __int16 v33 = 2082;
            double v34 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasEditor.m";
            __int16 v35 = 1024;
            int v36 = 1299;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should always be able to get a layout with temporaryLayoutControllerForInfos.", buf, 0x22u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D0F48);
          }
          long long v20 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            double v22 = v20;
            uint64_t v23 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = v24;
            unsigned int v30 = v18;
            __int16 v31 = 2114;
            double v32 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          char v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasEditor p_boundingRectForPastingBoardItems:]_block_invoke");
          long long v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasEditor.m"];
          +[CRLAssertionHandler handleFailureInFunction:v13 file:v21 lineNumber:1299 isFatal:0 description:"Should always be able to get a layout with temporaryLayoutControllerForInfos."];
        }
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v25 objects:v37 count:16];
    }
    while (v7);
  }
}

void sub_10008F0B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10008F0FC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CRLCanvasElementInfo *__cdecl sub_10008FB6C(id a1, CRLCanvasLayout *a2)
{
  return [(CRLCanvasLayout *)a2 info];
}

id sub_1000900C4(uint64_t a1, void *a2)
{
  long long v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 interactiveCanvasController];
  long long v6 = [v5 board];
  id v7 = [v2 isConnectedWithBoardItem:v4 boardItemOwner:v6];

  return v7;
}

void sub_100090690(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000906D4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

int64_t sub_100090718(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  id v12 = sub_100246DEC(v5, v6, 1, v7, v8, v9, v10, v11, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);

  uint64_t v13 = objc_opt_class();
  double v19 = sub_100246DEC(v4, v13, 1, v14, v15, v16, v17, v18, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);

  long long v20 = [v12 geometry];
  [v20 position];
  double v22 = v21;
  double v24 = v23;

  long long v25 = [v19 geometry];
  [v25 position];
  double v27 = v26;
  double v29 = v28;

  uint64_t v30 = 1;
  uint64_t v31 = -1;
  if (v22 >= v27) {
    uint64_t v31 = v22 > v27;
  }
  if (v24 <= v29) {
    uint64_t v30 = v31;
  }
  if (v24 >= v29) {
    int64_t v32 = v30;
  }
  else {
    int64_t v32 = -1;
  }

  return v32;
}

int64_t sub_100090844(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  id v12 = sub_100246DEC(v5, v6, 1, v7, v8, v9, v10, v11, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);

  uint64_t v13 = objc_opt_class();
  double v19 = sub_100246DEC(v4, v13, 1, v14, v15, v16, v17, v18, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);

  long long v20 = [v12 geometry];
  [v20 transformedBounds];
  double MaxX = CGRectGetMaxX(v32);
  double v22 = [v12 geometry];
  [v22 transformedBounds];
  double MinY = CGRectGetMinY(v33);

  double v24 = [v19 geometry];
  [v24 transformedBounds];
  double v25 = CGRectGetMaxX(v34);
  double v26 = [v19 geometry];
  [v26 transformedBounds];
  double v27 = CGRectGetMinY(v35);

  uint64_t v28 = 1;
  if (MaxX <= v25) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = -1;
  }
  if (MaxX < v25) {
    uint64_t v29 = 1;
  }
  if (MinY <= v27) {
    uint64_t v28 = v29;
  }
  if (MinY >= v27) {
    int64_t v30 = v28;
  }
  else {
    int64_t v30 = -1;
  }

  return v30;
}

void sub_100091AE4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100091B28(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100091CD8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100091D1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100092A50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000935B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000935FC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100094E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
}

id sub_100094E5C(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 120);
  void v7[4] = *(_OWORD *)(a1 + 104);
  v7[5] = v2;
  long long v3 = *(_OWORD *)(a1 + 152);
  v7[6] = *(_OWORD *)(a1 + 136);
  v7[7] = v3;
  long long v4 = *(_OWORD *)(a1 + 56);
  v7[0] = *(_OWORD *)(a1 + 40);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 88);
  double v7[2] = *(_OWORD *)(a1 + 72);
  v7[3] = v5;
  [*(id *)(a1 + 32) setTransform:v7];
  return [*(id *)(a1 + 32) setDisableLayout:*(unsigned __int8 *)(a1 + 168)];
}

void sub_100094ECC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  long long v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = (uint64_t)WeakRetained[10] - 1;
    WeakRetained[10] = (id)v4;
    if (!v4)
    {
      id v5 = objc_loadWeakRetained(WeakRetained + 1);
      long long v6 = *(_OWORD *)&CATransform3DIdentity.m33;
      v21[4] = *(_OWORD *)&CATransform3DIdentity.m31;
      v21[5] = v6;
      long long v7 = *(_OWORD *)&CATransform3DIdentity.m43;
      v21[6] = *(_OWORD *)&CATransform3DIdentity.m41;
      v21[7] = v7;
      long long v8 = *(_OWORD *)&CATransform3DIdentity.m13;
      v21[0] = *(_OWORD *)&CATransform3DIdentity.m11;
      v21[1] = v8;
      long long v9 = *(_OWORD *)&CATransform3DIdentity.m23;
      v21[2] = *(_OWORD *)&CATransform3DIdentity.m21;
      v21[3] = v9;
      [v3 setTransform:v21];
      [v3 p_setViewScale:*(double *)(a1 + 48)];
      [v3 setContentInset:*(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)];
      [v3 fixFrameAndScrollView];
      if ([v5 shouldCanvasScrollingSizeGrowToFitBoardContent])
      {
        uint64_t v10 = [v3 canvasView];
        uint64_t v11 = [v10 enclosingScrollView];
        [v11 setContentOffset:0 animated:[a1 doubleAtIndex:88] [a1 doubleAtIndex:96]];

        [v5 i_viewScaleDidChange];
        [v5 i_viewScrollDidChange];
        [v5 viewDidEndZooming];
        [v3 p_scrollViewContentOffsetForUnscaledContentCenter:*(double *)(a1 + 104) viewScale:*(double *)(a1 + 112) contentInset:*(double *)(a1 + 48) contentInset:*(double *)(a1 + 56) contentInset:*(double *)(a1 + 64) contentInset:*(double *)(a1 + 72) contentInset:*(double *)(a1 + 80)];
        double v13 = v12;
        double v15 = v14;
        uint64_t v16 = [v3 canvasView];
        uint64_t v17 = [v16 enclosingScrollView];
        [v17 setContentOffset:0 animated:v13];
      }
      else
      {
        [v5 i_viewScaleDidChange];
        [v5 i_viewScrollDidChange];
        [v5 viewDidEndZooming];
      }
    }
    uint64_t v20 = *(void *)(a1 + 32);
    if (v20)
    {
      double v19 = *(void (**)(void))(v20 + 16);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 32);
    if (v18)
    {
      double v19 = *(void (**)(void))(v18 + 16);
LABEL_11:
      v19();
    }
  }
}

void sub_1000950A4(uint64_t a1, double a2, double a3)
{
  if (*(double *)(a1 + 48) != 0.0)
  {
    id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      double v6 = (a3 - *(double *)(a1 + 56)) / *(double *)(a1 + 48);
      *(float *)&double v6 = v6;
      [*(id *)(a1 + 32) solveForInput:v6];
      long long v7 = *(_OWORD *)(a1 + 80);
      v18[0] = *(_OWORD *)(a1 + 64);
      v18[1] = v7;
      long long v8 = *(_OWORD *)(a1 + 112);
      v18[2] = *(_OWORD *)(a1 + 96);
      v19[0] = v8;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      long long v9 = *(_OWORD *)(a1 + 144);
      v19[1] = *(_OWORD *)(a1 + 128);
      v19[2] = v9;
      sub_100080274(v19, v18, (uint64_t)&v20, v10);
      long long v15 = v20;
      long long v16 = v21;
      long long v17 = v22;
      uint64_t v11 = [WeakRetained associatedBackgroundLayer];
      v14[0] = v15;
      v14[1] = v16;
      v14[2] = v17;
      [v11 setDynamicTransform:v14];

      long long v13 = v21;
      long long v12 = v22;
      *(_OWORD *)(WeakRetained + 168) = v20;
      *(_OWORD *)(WeakRetained + 184) = v13;
      *(_OWORD *)(WeakRetained + 200) = v12;
    }
  }
}

uint64_t sub_1000951A8(uint64_t a1)
{
  long long v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained invalidate];

  id v4 = objc_loadWeakRetained(v2);
  LOBYTE(WeakRetained) = [v4 paused];

  if ((WeakRetained & 1) == 0)
  {
    id v5 = [*(id *)(a1 + 32) associatedBackgroundLayer];
    long long v12 = *(_OWORD *)&CGAffineTransformIdentity.c;
    v13[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
    long long v11 = v13[0];
    v13[1] = v12;
    long long v14 = *(_OWORD *)&CGAffineTransformIdentity.tx;
    long long v10 = v14;
    [v5 setDynamicTransform:v13];

    uint64_t v6 = *(void *)(a1 + 32);
    long long v7 = *(void **)(v6 + 160);
    *(void *)(v6 + 160) = 0;

    long long v8 = (_OWORD *)(*(void *)(a1 + 32) + 168);
    _OWORD *v8 = v11;
    v8[1] = v12;
    v8[2] = v10;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100095D08(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100095D4C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100096FC4(uint64_t a1)
{
  [*(id *)(a1 + 32) attemptRecoveryFromError:*(void *)(a1 + 40) optionIndex:*(void *)(a1 + 64) delegate:*(void *)(a1 + 48) didRecoverSelector:"p_didPresentErrorWithRecovery:contextInfo:" contextInfo:0];
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    long long v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100097034(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100099E44(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100099E88(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100099ECC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100099F10(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100099F54(id a1, CRLiOSQuickSelectViewController *a2, UITraitCollection *a3)
{
  long long v3 = a2;
  [(CRLiOSQuickSelectViewController *)v3 p_setNeedsHudContainerViewFrameUpdate];
  [(CRLiOSQuickSelectViewController *)v3 p_updateHUDAppearance];
}

void sub_100099F98(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  id v2 = [*(id *)(a1 + 32) textLabel];
  UIAccessibilityPostNotification(v1, v2);
}

void sub_10009A4A8(uint64_t a1)
{
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  double v5 = *(double *)(a1 + 72);
  uint64_t v6 = [*(id *)(a1 + 32) hudContainerView];
  [v6 setFrame:v2, v3, v4, v5];

  [*(id *)(a1 + 32) p_displayCurrentHUDForTraitCollection:*(void *)(a1 + 40) andVisibleRect:*(double *)(a1 + 48) andVisibleRect:*(double *)(a1 + 56) andVisibleRect:*(double *)(a1 + 64) andVisibleRect:*(double *)(a1 + 72)];
  id v7 = [*(id *)(a1 + 32) textLabel];
  [v7 invalidateIntrinsicContentSize];
}

void sub_10009AB8C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009ABD0(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009AC14(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009AC58(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B2DC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B320(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B364(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) HUDView];
  [v1 setAlpha:0.0];
}

void sub_10009B7E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B828(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B86C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B8B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B8F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B938(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10009B97C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) HUDView];
  [v1 setAlpha:1.0];
}

void sub_10009BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009BC64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10009BC74(uint64_t a1)
{
}

void sub_10009BC7C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v10 = a2;
  char v5 = objc_opt_respondsToSelector();
  uint64_t v6 = v10;
  if (v5)
  {
    *a3 = 1;
    id v7 = [v10 quickSelectHUDTitle];
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v9 = v7;
    if (!v7) {
      long long v9 = *(void **)(v8 + 40);
    }
    objc_storeStrong((id *)(v8 + 40), v9);

    uint64_t v6 = v10;
  }
}

void sub_10009BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009BE8C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v10 = a2;
  char v5 = objc_opt_respondsToSelector();
  uint64_t v6 = v10;
  if (v5)
  {
    *a3 = 1;
    id v7 = [v10 quickSelectHUDIconSystemImageName];
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v9 = v7;
    if (!v7) {
      long long v9 = *(void **)(v8 + 40);
    }
    objc_storeStrong((id *)(v8 + 40), v9);

    uint64_t v6 = v10;
  }
}

void sub_10009D9D8(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) crlaxInteractiveCanvasController];
  double v3 = [v2 crlaxTarget];
  double v4 = [v3 commandController];

  if (*(unsigned char *)(a1 + 80) && ([v4 isGroupOpen] & 1) == 0)
  {
    [v4 openGroup];
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
  }
  char v16 = 0;
  uint64_t v6 = [*(id *)(a1 + 32) crlaxTarget];
  id v7 = [v6 layout];

  uint64_t v8 = (objc_class *)objc_opt_class();
  uint64_t v9 = __CRLAccessibilityCastAsClass(v8, (uint64_t)v7, 1, &v16);
  if (v16) {
    abort();
  }
  id v10 = (void *)v9;

  [v10 setUserDidSetControlPoint:1];
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v14 = *(void **)(a1 + 32);
  long long v13 = *(void **)(a1 + 40);
  long long v15 = [v14 crlaxInteractiveCanvasController];
  [v13 performMoveOfKnob:v11 toUnscaledPosition:v12 withTracker:v14 rep:v15 andICC:*(double *)(a1 + 64), *(double *)(a1 + 72)];

  if (v5) {
    [v4 closeGroup];
  }
}

void sub_1000A0424(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000A0450(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

uint64_t sub_1000A0A44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000A0AFC(uint64_t a1)
{
  id result = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (result)
  {
    id v3 = result;
    double v4 = *(void **)(a1 + 32);
    return [v4 addObject:v3];
  }
  return result;
}

void sub_1000A0E68(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000A0E94(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000A0FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A0FB8(uint64_t a1, uint64_t a2)
{
}

void sub_1000A0FC8(uint64_t a1)
{
}

id sub_1000A0FD4(uint64_t a1, void *a2, void *a3)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id result = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v7 = result;
    uint64_t v8 = *(void *)v12;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(a2);
        }
        uint64_t v10 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v9);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))();
        }
        else {
          [a3 addObject:v10];
        }
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id result = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_1000A1248(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000A1274(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000A174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1774(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = result;
    id result = *(void *)(result + 32);
    if (result)
    {
      id result = (*(uint64_t (**)(void))(result + 16))();
      uint64_t v1 = *(void *)(*(void *)(v2 + 40) + 8);
    }
    *(unsigned char *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t sub_1000A17C8(uint64_t a1, uint64_t a2)
{
  close(*(_DWORD *)(a1 + 40));
  if (a2)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D16C8);
    }
    double v4 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_101071118(v4, a2);
    }
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_1000A1870(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000A18B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_1000A1AF4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D1730);
    }
    double v4 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_101071118(v4, a2);
    }
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_1000A1B94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000A1E48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A1E8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A1ED0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    uint64_t v6 = +[NSError crl_fileReadPOSIXErrorWithNumber:a4 userInfo:0];
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A21DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2220(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2264(void *a1, uint64_t a2, void *a3, int a4)
{
  size_t size = a3;
  uint64_t v10 = size;
  if (a4)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:a4 userInfo:0];
    (*(void (**)(uint64_t, uint64_t, void, void *))(v8 + 16))(v8, a2, 0, v9);
  }
  else
  {
    if (size) {
      size_t size = dispatch_data_get_size(size);
    }
    atomic_exchange((atomic_ullong *volatile)(*(void *)(a1[5] + 8) + 24), a1[6] - (void)size);
    (*(void (**)(void))(a1[4] + 16))();
  }
}

void sub_1000A2560(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A25A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_1000A25E8(uint64_t a1)
{
  dispatch_fd_t descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(*(void *)(a1 + 32) + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D18A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101071364();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D18C8);
    }
    int v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    id v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel close]_block_invoke");
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v6 lineNumber:274 isFatal:0 description:"Channel file descriptor is closed"];

    goto LABEL_16;
  }
  if (fcntl(descriptor, 51, 0) == -1)
  {
    id v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:*__error() userInfo:0];
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D1888);
    }
    double v4 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010713EC(v4, v3);
    }
LABEL_16:
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000A27DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000A2820(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2864(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2A20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2A64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2C14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2C58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2E6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2EB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A2EF4(uint64_t a1)
{
  dispatch_fd_t descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(*(void *)(a1 + 32) + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D19A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101071674();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D19C8);
    }
    double v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    int v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel flushWithCompletion:]_block_invoke");
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:313 isFatal:0 description:"Channel file descriptor is closed"];
  }
  else if (fsync(descriptor) == -1)
  {
    id v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:*__error() userInfo:0];
    goto LABEL_14;
  }
  id v3 = 0;
LABEL_14:
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v3);
  }
}

void sub_1000A309C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A30E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A32FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A3340(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A3384(void *a1)
{
  dispatch_fd_t descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(a1[4] + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D1A28);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101071784();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D1A48);
    }
    double v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    int v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel truncateToLength:completion:]_block_invoke");
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:331 isFatal:0 description:"Channel is closed"];
  }
  else if (ftruncate(descriptor, a1[6]) == -1)
  {
    id v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:*__error() userInfo:0];
    goto LABEL_14;
  }
  id v3 = 0;
LABEL_14:
  uint64_t v7 = a1[5];
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v3);
  }
}

void sub_1000A3530(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A3574(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A364C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void *sub_1000A4A90(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = [v4 stringByAppendingString:@".framework"];
  uint64_t v6 = v5;
  if (v3)
  {
    uint64_t v7 = [v3 stringByAppendingString:@".framework"];
    uint64_t v8 = sub_1000A4BB4(v7);
    uint64_t v9 = [v8 stringByAppendingPathComponent:v6];
  }
  else
  {
    uint64_t v9 = sub_1000A4BB4(v5);
  }
  uint64_t v10 = [v9 stringByAppendingPathComponent:v4];
  long long v11 = v10;
  if (!v10
    || (long long v12 = dlopen((const char *)[v10 fileSystemRepresentation], 256)) == 0)
  {
    if (([v4 isEqualToString:@"Ubiquity"] & 1) == 0) {
      NSLog(@"NSSoftLinking - The %@ framework's library couldn't be loaded from %@.", v4, v11);
    }
    long long v12 = 0;
  }

  return v12;
}

id sub_1000A4BB4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSFileManager defaultManager];
  id v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  id v4 = [v3 count];
  if (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = [v3 objectAtIndex:v5];
      uint64_t v7 = [v6 stringByAppendingPathComponent:@"Frameworks"];
      uint64_t v8 = [v7 stringByAppendingPathComponent:v1];

      if ([v2 fileExistsAtPath:v8]) {
        break;
      }
      uint64_t v9 = [v6 stringByAppendingPathComponent:@"PrivateFrameworks"];
      uint64_t v10 = [v9 stringByAppendingPathComponent:v1];

      if ([v2 fileExistsAtPath:v10])
      {
        uint64_t v8 = v10;
        break;
      }

      if (v4 == (id)++v5)
      {
        id v4 = 0;
        goto LABEL_9;
      }
    }
    id v4 = v8;
  }
LABEL_9:

  return v4;
}

void *sub_1000A4D14(void *a1, void *a2, const char *a3, void **a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = *a4;
  if (!*a4 && (uint64_t v9 = sub_1000A4A90(v7, v8), (*a4 = v9) == 0) || (v10 = dlsym(v9, a3)) == 0)
  {
    if (([v8 isEqualToString:@"Ubiquity"] & 1) == 0) {
      NSLog(@"NSSoftLinking - The function '%s' can't be found in the %@ framework.", a3, v8);
    }
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1000A540C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A54E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A57AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A580C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A5850(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A5938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A5CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5D30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A5D74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A5DB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A5DFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A672C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A6770(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A67B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A67F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A75D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A7614(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A7658(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A769C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A76E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A7724(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A7768(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A77AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A77F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v3 = [v2 layerHost];
  id v6 = [v3 canvasLayer];

  id v4 = [v6 isLayoutDisabled];
  [v6 setDisableLayout:1];
  [*(id *)(a1 + 32) deleteForward:0];
  [v6 setDisableLayout:v4];
  uint64_t v5 = [*(id *)(a1 + 32) storage];
  [*(id *)(a1 + 40) setChangeCount:[v5 changeCount]];
}

void sub_1000A78B8(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) owningRep];
  uint64_t v2 = [v3 commandController];
  [v2 closeGroupWithSelectionBehavior:*(void *)(a1 + 40)];
}

void sub_1000A791C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    id v2 = [*(id *)(a1 + 32) owningRep];
    id v1 = [v2 commandController];
    [v1 closeGroup];
  }
}

void sub_1000A8314(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000A8358(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000A8688(uint64_t a1)
{
  [*(id *)(a1 + 32) setAlpha:1.0];
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  void v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [*(id *)(a1 + 32) setTransform:v4];
}

id sub_1000A87D0(uint64_t a1)
{
  [*(id *)(a1 + 32) updateFrame];
  memset(&v8, 0, sizeof(v8));
  [*(id *)(a1 + 32) bounds];
  CGFloat MaxY = CGRectGetMaxY(v9);
  CGAffineTransformMakeTranslation(&v8, 0.0, MaxY * 0.5);
  CGAffineTransform v6 = v8;
  CGAffineTransformScale(&v7, &v6, 0.25, 0.25);
  CGAffineTransform v8 = v7;
  id v3 = *(void **)(a1 + 32);
  CGAffineTransform v5 = v7;
  [v3 setTransform:&v5];
  return [*(id *)(a1 + 32) setAlpha:0.25];
}

id sub_1000A8888(uint64_t a1)
{
  [*(id *)(a1 + 32) remove];
  long long v2 = *(void **)(a1 + 32);

  return [v2 setTarget:0];
}

void sub_1000A8A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8CC4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000A9218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000AA1D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AA21C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AABCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AAC10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB1F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB238(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB27C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB2C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB474(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB4B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB77C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AB7C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000ABD94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000ABDD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AC7E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AC824(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AD184(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  CGAffineTransform v5 = [*(id *)(a1 + 32) selectionForEditor:];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
  }
  else
  {
    char v6 = objc_opt_respondsToSelector();

    if (v6)
    {
      CGAffineTransform v7 = [*(id *)(a1 + 40) info];
      unsigned int v8 = [v9 currentSelectionContainsInfo:v7];

      if (v8)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
  }
}

void sub_1000AD664(id a1)
{
  uint64_t v1 = +[CRLColor colorWithRed:0.85 green:0.85 blue:0.85 alpha:1.0];
  long long v2 = (void *)qword_1016A8FA0;
  qword_1016A8FA0 = v1;
}

uint64_t sub_1000AF438(uint64_t a1)
{
  +[UIView setAnimationCurve:*(void *)(a1 + 40)];
  long long v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

void sub_1000AF4C8(void *a1)
{
  id v1 = [a1 copy];
  [v1 performSelector:"crl_runBlock" withObject:0 afterDelay:0.0];
}

void sub_1000AF690(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AF6D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AFB58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AFB9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000AFC54(uint64_t a1)
{
  id v2 = +[UIMenuController sharedMenuController];
  [v2 setMenuVisible:1 animated:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1000AFD84(uint64_t a1)
{
  id v2 = +[UIMenuController sharedMenuController];
  id v3 = v2;
  if (*(unsigned char *)(a1 + 72))
  {
    [v2 showMenuFromView:*(void *)(a1 + 32) rect:*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64)];
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000AFE68;
    _OWORD v5[3] = &unk_1014D1378;
    v5[4] = v2;
    id v6 = *(id *)(a1 + 32);
    long long v4 = *(_OWORD *)(a1 + 56);
    long long v7 = *(_OWORD *)(a1 + 40);
    long long v8 = v4;
    +[UIView performWithoutAnimation:v5];
  }
}

id sub_1000AFE68(uint64_t a1)
{
  return [*(id *)(a1 + 32) showMenuFromView:*(void *)(a1 + 40) rect:*(double *)(a1 + 48) rect:*(double *)(a1 + 56) rect:*(double *)(a1 + 64) rect:*(double *)(a1 + 72)];
}

void sub_1000B042C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B0470(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B04B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B04F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B053C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B0580(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B0988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B09A8(uint64_t a1)
{
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v1 = objc_loadWeakRetained(&to);

  if (v1)
  {
    id v2 = +[UIMenuController sharedMenuController];
    id v3 = objc_loadWeakRetained(&to);
    unsigned int v4 = [v3 shouldDismissOnChange];

    if (v4) {
      goto LABEL_5;
    }
    [v2 update];
    id v5 = objc_loadWeakRetained(&to);
    id v6 = [v5 delegate];
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = objc_loadWeakRetained(&to);
      id v9 = [v8 delegate];
      id v10 = objc_loadWeakRetained(&to);
      unsigned int v11 = [v9 contextMenuPositionShouldUpdateForContextMenuController:v10];

      if (v11) {
LABEL_5:
      }
        [v2 hideMenu];
    }
    id v12 = objc_loadWeakRetained(&to);
    [v12 setResetOperation:0];
  }
  objc_destroyWeak(&to);
}

void sub_1000B0AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id sub_1000B0C90()
{
  if (qword_1016A8FB8 != -1) {
    dispatch_once(&qword_1016A8FB8, &stru_1014D20E0);
  }
  uint64_t v0 = (void *)qword_1016A8FB0;

  return v0;
}

void sub_1000B0CE4(id a1)
{
  id v1 = MTLCreateSystemDefaultDevice();
  id v2 = (void *)qword_1016A8FB0;
  qword_1016A8FB0 = (uint64_t)v1;
}

CGImageRef sub_1000B0D18(void *a1)
{
  id v1 = a1;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGImageRef v3 = sub_1000B0D58(v1, DeviceRGB);

  return v3;
}

CGImageRef sub_1000B0D58(void *a1, CGColorSpace *a2)
{
  id v3 = a1;
  if ([v3 pixelFormat] == (id)110
    || [v3 pixelFormat] == (id)112
    || [v3 pixelFormat] == (id)113
    || [v3 pixelFormat] == (id)114)
  {
    size_t v4 = 16;
  }
  else if ([v3 pixelFormat] == (id)115)
  {
    size_t v4 = 16;
  }
  else
  {
    size_t v4 = 8;
  }
  id v5 = [v3 height];
  size_t v6 = (v4 >> 1) * (void)v5 * (void)[v3 width];
  char v7 = malloc_type_malloc(v6, 0x522C22E5uLL);
  size_t v8 = (void)[v3 width] * (v4 >> 1);
  memset(v13, 0, 24);
  v13[3] = [v3 width];
  void v13[4] = [v3 height];
  v13[5] = 1;
  [v3 getBytes:v7 bytesPerRow:v8 fromRegion:v13 mipmapLevel:0];
  if ([v3 pixelFormat] == (id)80
    || [v3 pixelFormat] == (id)81
    || [v3 pixelFormat] == (id)552
    || [v3 pixelFormat] == (id)553)
  {
    CGBitmapInfo v9 = 8194;
  }
  else
  {
    CGBitmapInfo v9 = 16385;
  }
  if ([v3 pixelFormat] == (id)115) {
    CGBitmapInfo v9 = 4353;
  }
  id v10 = CGDataProviderCreateWithData(0, v7, v6, (CGDataProviderReleaseDataCallback)sub_1000B0F5C);
  CGImageRef v11 = CGImageCreate((size_t)[v3 width], (size_t)objc_msgSend(v3, "height"), v4, 4 * v4, v8, a2, v9, v10, 0, 0, kCGRenderingIntentDefault);
  CGDataProviderRelease(v10);
  CGColorSpaceRelease(a2);

  return v11;
}

void sub_1000B0F5C(int a1, void *a2)
{
}

id sub_1000B0F64(void *a1)
{
  id v1 = a1;
  if (qword_1016A8FD0 != -1) {
    dispatch_once(&qword_1016A8FD0, &stru_1014D2100);
  }
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = sub_1000B10FC;
  long long v13 = sub_1000B110C;
  id v14 = 0;
  id v2 = qword_1016A8FC8;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B1114;
  _OWORD v6[3] = &unk_1014CB090;
  id v7 = v1;
  size_t v8 = &v9;
  id v3 = v1;
  dispatch_sync(v2, v6);
  id v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);

  return v4;
}

void sub_1000B109C(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  id v2 = (void *)qword_1016A8FC0;
  qword_1016A8FC0 = v1;

  dispatch_queue_t v3 = dispatch_queue_create("com.apple.freeform.CRLMetalDrawableCommandQueueAccessingQueue", 0);
  id v4 = (void *)qword_1016A8FC8;
  qword_1016A8FC8 = (uint64_t)v3;
}

uint64_t sub_1000B10FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B110C(uint64_t a1)
{
}

void sub_1000B1114(uint64_t a1)
{
  id v2 = (void *)qword_1016A8FC0;
  dispatch_queue_t v3 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) registryID]);
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  size_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v7 = [*(id *)(a1 + 32) newCommandQueue];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v12 = (void *)qword_1016A8FC0;
    +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v10 registryID]);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    [v12 setObject:v11 forKeyedSubscript:v13];
  }
}

void sub_1000B14B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B14F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B1820(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B1864(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B1AD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

id sub_1000B1B0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained p_tintedImageWithScale:1.0];

  return v2;
}

id sub_1000B1B5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained p_tintedImageWithScale:0.5];

  return v2;
}

id sub_1000B1BAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained p_tintedImageWithScale:0.25];

  return v2;
}

void sub_1000B1F74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B1FB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2994(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B29D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2A1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2A60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2AA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2AE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B2C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000B3370(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B33B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B3C0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B3C50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1000B3C94(id a1, CRLCanvasRenderable *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = [(CRLCanvasRenderable *)a2 name];
  unsigned __int8 v5 = [v4 isEqualToString:@"CRLImageFillSublayer"];

  return v5;
}

void sub_1000B3CD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B3D1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4018(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B405C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4848(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B488C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B48D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B499C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4D00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4D44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4D88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4DCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4FB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B4FFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5644(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5688(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B56CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5710(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5754(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5798(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B5EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef sub_1000B5EBC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  dispatch_queue_t v3 = (CGImage *)v2[14];
  if (!v3 || v2[15] != *(void *)(a1 + 48) || (uint64_t v4 = v2[16], v4 >= 4))
  {
    CGImageRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 112) = CGImageCreateCopy(*(CGImageRef *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 120) = *(void *)(a1 + 48);
    *(void *)(*(void *)(a1 + 32) + 128) = 0;
    id v2 = *(void **)(a1 + 32);
    uint64_t v4 = v2[16];
  }
  v2[16] = v4 + 1;
  CGImageRef result = CGImageRetain(*(CGImageRef *)(*(void *)(a1 + 32) + 112));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000B6660(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B66A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B6960(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B69A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B6C38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B6C7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B6F08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B6F4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B7BF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B7C38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B7FE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B8028(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B806C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B80B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B8240(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLViewControllerCat");
  id v2 = off_10166B4E0;
  off_10166B4E0 = v1;
}

void sub_1000B8284(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLViewControllerCat");
  id v2 = off_10166B4E0;
  off_10166B4E0 = v1;
}

id sub_1000B85C0(uint64_t a1)
{
  [*(id *)(a1 + 32) setBackgroundColor:*(void *)(a1 + 40)];
  double v2 = *(double *)(a1 + 56);
  double v3 = *(double *)(a1 + 64);
  uint64_t v4 = *(void **)(*(void *)(a1 + 48) + 48);
  double v5 = *(double *)(a1 + 72);
  double v6 = *(double *)(a1 + 80);

  return [v4 setFrame:v2, v3, v5, v6];
}

id sub_1000B8610(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) completeTransition:a2];
}

void sub_1000B8944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B8988(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B8AE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B8BD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B9844(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B9884(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B98C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B990C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9994(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B99D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9A18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9A5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9AA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000B9AE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B9B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000B9B64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000BA464(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000BA4A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BA4E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BA52C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000BA56C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000BAA48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLNudgeGRCat");
  double v2 = off_10166B250;
  off_10166B250 = v1;
}

void sub_1000BAD2C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1000BAD44(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_1000BB904(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BB948(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BBCEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BBD30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BBD74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(id *)(a1 + 32) == v3)
  {

    id v4 = 0;
  }
  id v5 = v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000BBE88(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLWPFontVerifier);
  double v2 = (void *)qword_1016A8FD8;
  qword_1016A8FD8 = (uint64_t)v1;
}

id sub_1000BC214(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 40) keywordByCapitalizingLowercasedKeyword:a2 locale:*(void *)(a1 + 32)];
}

void sub_1000BC41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BC434(id a1)
{
  id v1 = objc_alloc_init((Class)NSCache);
  double v2 = (void *)qword_1016A8FF0;
  qword_1016A8FF0 = (uint64_t)v1;
}

uint64_t sub_1000BC470(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BC480(uint64_t a1)
{
}

void sub_1000BC488(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v11 = (void *)a1[4];
  id v12 = (void *)a1[5];
  id v13 = a2;
  id v14 = [v12 locale];
  long long v15 = [v13 capitalizedStringWithLocale:v14];

  uint64_t v16 = [v11 stringByReplacingCharactersInRange:a3 withString:a4];
  uint64_t v17 = *(void *)(a1[6] + 8);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  *a7 = 1;
}

id sub_1000BC60C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) hasPrefix:a2];
}

void sub_1000BD380(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BD3C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BD408(id a1)
{
  id v1 = objc_alloc_init(CRLRulerUnits);
  double v2 = (void *)qword_1016A9008;
  qword_1016A9008 = (uint64_t)v1;
}

void sub_1000BDE3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BDE80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BE880(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BE8C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000BECA8(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2D98);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101073EA8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2DB8);
      }
      double v2 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v2);
      }
      id v3 = +[NSString stringWithUTF8String:"size_t CRLGLDataBufferDataTypeSize(CRLGLDataBufferDataType)"];
      id v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:100 isFatal:0 description:"Unknown CRLGLDataBufferDataType!"];

      uint64_t result = 0;
      break;
    case 1:
    case 2:
      uint64_t result = 1;
      break;
    case 3:
    case 4:
      uint64_t result = 2;
      break;
    case 5:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1000BEE50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BEE94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

float sub_1000BEED8(unsigned char *a1, uint64_t a2, int a3, float a4)
{
  float v4 = -1.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2DD8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101073F30();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2DF8);
      }
      id v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      double v6 = +[NSString stringWithUTF8String:"GLfloat CRLGLDataBufferGLfloatWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"];
      id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:129 isFatal:0 description:"Unknown data type!"];

      return v4;
    case 1:
      float v8 = (float)(char)*a1;
      int v9 = 1123942400;
      goto LABEL_13;
    case 2:
      LOBYTE(a4) = *a1;
      float v8 = (float)LODWORD(a4);
      int v9 = 1132396544;
LABEL_13:
      float v10 = *(float *)&v9;
      goto LABEL_16;
    case 3:
      float v8 = (float)*(__int16 *)a1;
      float v10 = 32767.0;
      goto LABEL_16;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      float v8 = (float)LODWORD(a4);
      float v10 = 65535.0;
LABEL_16:
      float v11 = v8 / v10;
      if (a3) {
        float v4 = v11;
      }
      else {
        float v4 = v8;
      }
      break;
    case 5:
      float v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000BF0C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF10C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF150(unsigned char *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v18 = v5;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2E18);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101073FB8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2E38);
      }
      id v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v12);
      }
      id v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLfloatWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, GLfloat)", v9, v8, v7, v6, v18, v4, v10, v11);
      id v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:157 isFatal:0 description:"Unknown data type!"];

      return;
    case 1:
      float v15 = 127.0;
      goto LABEL_13;
    case 2:
      float v15 = 255.0;
LABEL_13:
      if (a3) {
        a4 = a4 * v15;
      }
      *a1 = llroundf(a4);
      return;
    case 3:
      float v16 = 32767.0;
      goto LABEL_18;
    case 4:
      float v16 = 65535.0;
LABEL_18:
      float v17 = a4 * v16;
      if (a3) {
        a4 = v17;
      }
      *(_WORD *)a1 = llroundf(a4);
      break;
    case 5:
      *(float *)a1 = a4;
      break;
    default:
      return;
  }
}

void sub_1000BF330(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF374(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

float sub_1000BF3B8(unsigned char *a1, uint64_t a2, int a3, float a4)
{
  float v4 = 0.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2E58);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101074040();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2E78);
      }
      uint64_t v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      uint64_t v6 = +[NSString stringWithUTF8String:"CRLGLPoint2D CRLGLDataBufferGLPoint2DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"];
      uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:181 isFatal:0 description:"Unknown data type!"];

      break;
    case 1:
      if (a3) {
        float v4 = (float)(char)*a1 / 127.0;
      }
      else {
        float v4 = (float)(char)*a1;
      }
      break;
    case 2:
      LOBYTE(a4) = *a1;
      float v8 = (float)LODWORD(a4);
      if (a3) {
        float v4 = v8 / 255.0;
      }
      else {
        float v4 = v8;
      }
      break;
    case 3:
      if (a3) {
        float v4 = (float)*(__int16 *)a1 / 32767.0;
      }
      else {
        float v4 = (float)*(__int16 *)a1;
      }
      break;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      float v9 = (float)LODWORD(a4);
      if (a3) {
        float v4 = v9 / 65535.0;
      }
      else {
        float v4 = v9;
      }
      break;
    case 5:
      float v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000BF5FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF640(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF684(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  uint64_t v26 = v6;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2E98);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010740C8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2EB8);
      }
      id v13 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v13);
      }
      id v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint2DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint2D)", v10, v9, v8, v7, v26, v5, v11, v12);
      float v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:209 isFatal:0 description:"Unknown data type!"];

      return;
    case 1:
      if (a3) {
        a4 = a4 * 127.0;
      }
      unsigned __int8 v16 = llroundf(a4);
      float v17 = a5 * 127.0;
      if (!a3) {
        float v17 = a5;
      }
      unsigned int v18 = v16 | (llroundf(v17) << 8);
      goto LABEL_21;
    case 2:
      if (a3) {
        a4 = a4 * 255.0;
      }
      unsigned int v19 = llroundf(a4);
      float v20 = a5 * 255.0;
      if (!a3) {
        float v20 = a5;
      }
      unsigned int v18 = v19 | (llroundf(v20) << 8);
LABEL_21:
      *(_WORD *)a1 = v18;
      return;
    case 3:
      if (a3) {
        a4 = a4 * 32767.0;
      }
      unsigned __int16 v21 = llroundf(a4);
      float v22 = a5 * 32767.0;
      if (!a3) {
        float v22 = a5;
      }
      unsigned int v23 = v21 | ((unsigned __int16)llroundf(v22) << 16);
      goto LABEL_32;
    case 4:
      if (a3) {
        a4 = a4 * 65535.0;
      }
      unsigned int v24 = llroundf(a4);
      float v25 = a5 * 65535.0;
      if (!a3) {
        float v25 = a5;
      }
      unsigned int v23 = v24 | (llroundf(v25) << 16);
LABEL_32:
      *(_DWORD *)a1 = v23;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      break;
    default:
      return;
  }
}

void sub_1000BF8C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BF90C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

float sub_1000BF950(unsigned char *a1, uint64_t a2, int a3, float a4)
{
  float v4 = 0.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2ED8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101074150();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2EF8);
      }
      uint64_t v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      uint64_t v6 = +[NSString stringWithUTF8String:"CRLGLPoint3D CRLGLDataBufferGLPoint3DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"];
      uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:233 isFatal:0 description:"Unknown data type!"];

      break;
    case 1:
      if (a3) {
        float v4 = (float)(char)*a1 / 127.0;
      }
      else {
        float v4 = (float)(char)*a1;
      }
      break;
    case 2:
      LOBYTE(a4) = *a1;
      float v8 = (float)LODWORD(a4);
      if (a3) {
        float v4 = v8 / 255.0;
      }
      else {
        float v4 = v8;
      }
      break;
    case 3:
      if (a3) {
        float v4 = (float)*(__int16 *)a1 / 32767.0;
      }
      else {
        float v4 = (float)*(__int16 *)a1;
      }
      break;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      float v9 = (float)LODWORD(a4);
      if (a3) {
        float v4 = v9 / 65535.0;
      }
      else {
        float v4 = v9;
      }
      break;
    case 5:
      float v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000BFBE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BFC2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BFC70(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6)
{
  uint64_t v37 = v7;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2F18);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010741D8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2F38);
      }
      id v14 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v14);
      }
      float v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint3DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint3D)", v11, v10, v9, v8, v37, v6, v12, v13);
      unsigned __int8 v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:261 isFatal:0 description:"Unknown data type!"];

      return;
    case 1:
      if (a3) {
        a4 = a4 * 127.0;
      }
      unsigned __int8 v17 = llroundf(a4);
      float v18 = a5 * 127.0;
      if (!a3) {
        float v18 = a5;
      }
      __int16 v19 = llroundf(v18);
      float v20 = a6 * 127.0;
      if (!a3) {
        float v20 = a6;
      }
      char v21 = llroundf(v20);
      __int16 v22 = v17 | (unsigned __int16)(v19 << 8);
      goto LABEL_25;
    case 2:
      if (a3) {
        a4 = a4 * 255.0;
      }
      __int16 v23 = llroundf(a4);
      float v24 = a5 * 255.0;
      if (!a3) {
        float v24 = a5;
      }
      __int16 v25 = llroundf(v24);
      float v26 = a6 * 255.0;
      if (!a3) {
        float v26 = a6;
      }
      char v21 = llroundf(v26);
      __int16 v22 = v23 | (v25 << 8);
LABEL_25:
      *(unsigned char *)(a1 + 2) = v21;
      *(_WORD *)a1 = v22;
      return;
    case 3:
      if (a3) {
        a4 = a4 * 32767.0;
      }
      unsigned __int16 v27 = llroundf(a4);
      float v28 = a5 * 32767.0;
      if (!a3) {
        float v28 = a5;
      }
      unsigned __int16 v29 = llroundf(v28);
      float v30 = a6 * 32767.0;
      if (!a3) {
        float v30 = a6;
      }
      __int16 v31 = llroundf(v30);
      int v32 = v27 | (v29 << 16);
      goto LABEL_40;
    case 4:
      if (a3) {
        a4 = a4 * 65535.0;
      }
      unsigned int v33 = llroundf(a4);
      float v34 = a5 * 65535.0;
      if (!a3) {
        float v34 = a5;
      }
      unsigned int v35 = llroundf(v34);
      float v36 = a6 * 65535.0;
      if (!a3) {
        float v36 = a6;
      }
      __int16 v31 = llroundf(v36);
      int v32 = v33 | (v35 << 16);
LABEL_40:
      *(_DWORD *)a1 = v32;
      *(_WORD *)(a1 + 4) = v31;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      *(float *)(a1 + 8) = a6;
      break;
    default:
      return;
  }
}

void sub_1000BFEF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000BFF34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

int8x16_t sub_1000BFF78(int16x4_t *a1, uint64_t a2, unsigned int a3)
{
  int8x16_t result = (int8x16_t)xmmword_101175444;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2F58);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101074260();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2F78);
      }
      float v4 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v4);
      }
      uint64_t v5 = +[NSString stringWithUTF8String:"CRLGLPoint4D CRLGLDataBufferGLPoint4DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"];
      uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:285 isFatal:0 description:"Unknown data type!"];

      return (int8x16_t)xmmword_101175444;
    case 1:
      result.i32[0] = a1->i32[0];
      float32x4_t v7 = vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)result.i8)));
      unsigned int v8 = 1123942400;
      goto LABEL_15;
    case 2:
      result.i32[0] = a1->i32[0];
      float32x4_t v7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)result.i8)));
      unsigned int v8 = 1132396544;
      goto LABEL_15;
    case 3:
      float32x4_t v7 = vcvtq_f32_s32(vmovl_s16(*a1));
      unsigned int v8 = 1191181824;
      goto LABEL_15;
    case 4:
      float32x4_t v7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*a1));
      unsigned int v8 = 1199570688;
LABEL_15:
      int8x16_t result = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(a3)), 0x1FuLL)), (int8x16_t)vdivq_f32(v7, (float32x4_t)vdupq_n_s32(v8)), (int8x16_t)v7);
      break;
    case 5:
      int8x16_t result = *(int8x16_t *)a1->i8;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000C01A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C01E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C022C(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6, float a7)
{
  uint64_t v43 = v11;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2F98);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010742E8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D2FB8);
      }
      float v18 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v18);
      }
      __int16 v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint4DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint4D)", v15, v14, v13, v12, v43, v10, v16, v17);
      float v20 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v19 file:v20 lineNumber:313 isFatal:0 description:"Unknown data type!"];

      break;
    case 1:
      if (a3) {
        a4 = a4 * 127.0;
      }
      unsigned __int8 v21 = llroundf(a4);
      float v22 = a5 * 127.0;
      if (!a3) {
        float v22 = a5;
      }
      unsigned __int8 v23 = llroundf(v22);
      float v24 = a6 * 127.0;
      if (!a3) {
        float v24 = a6;
      }
      unsigned __int8 v25 = llroundf(v24);
      float v26 = a7 * 127.0;
      if (!a3) {
        float v26 = a7;
      }
      *(_DWORD *)a1 = (v25 << 16) | (llroundf(v26) << 24) | (v23 << 8) | v21;
      break;
    case 2:
      if (a3) {
        a4 = a4 * 255.0;
      }
      unsigned int v27 = llroundf(a4);
      float v28 = a5 * 255.0;
      if (!a3) {
        float v28 = a5;
      }
      unsigned int v29 = llroundf(v28);
      float v30 = a6 * 255.0;
      if (!a3) {
        float v30 = a6;
      }
      unsigned int v31 = llroundf(v30);
      float v32 = a7 * 255.0;
      if (!a3) {
        float v32 = a7;
      }
      *(_DWORD *)a1 = (v31 << 16) | (llroundf(v32) << 24) | (v29 << 8) | v27;
      break;
    case 3:
      if (a3) {
        a4 = a4 * 32767.0;
      }
      unsigned __int16 v33 = llroundf(a4);
      float v34 = a5 * 32767.0;
      if (!a3) {
        float v34 = a5;
      }
      unsigned __int16 v35 = llroundf(v34);
      float v36 = a6 * 32767.0;
      if (!a3) {
        float v36 = a6;
      }
      unsigned __int16 v37 = llroundf(v36);
      float v38 = a7 * 32767.0;
      if (!a3) {
        float v38 = a7;
      }
      LODWORD(v9) = llroundf(v38);
      *(void *)a1 = ((unint64_t)v37 << 32) | (v9 << 48) | ((unint64_t)v35 << 16) | v33;
      break;
    case 4:
      unint64_t v39 = (unint64_t)&qword_101175000;
      if (a3) {
        a4 = a4 * 65535.0;
      }
      LODWORD(v39) = llroundf(a4);
      float v40 = a5 * 65535.0;
      if (!a3) {
        float v40 = a5;
      }
      LODWORD(v7) = llroundf(v40);
      float v41 = a6 * 65535.0;
      if (!a3) {
        float v41 = a6;
      }
      LODWORD(v8) = llroundf(v41);
      float v42 = a7 * 65535.0;
      if (!a3) {
        float v42 = a7;
      }
      LODWORD(v9) = llroundf(v42);
      *(void *)a1 = (v8 << 32) | (v9 << 48) | (v7 << 16) | v39;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      *(float *)(a1 + 8) = a6;
      *(float *)(a1 + 12) = a7;
      break;
    default:
      return;
  }
}

void sub_1000C0514(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C0558(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C059C(uint64_t a1, uint64_t a2, float a3)
{
}

void sub_1000C05BC(uint64_t a1, uint64_t a2, float a3, float a4)
{
}

void sub_1000C0BC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C0C04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C0DB8(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000C1588(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C15CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C1610(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C1654(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C1698(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C16DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C25BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C2600(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C27FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C2840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C2F54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C2F98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C2FDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3020(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3214(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3258(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3944(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3988(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C39CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C3A10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C4068(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C40AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C433C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C4380(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C4E58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C4E9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C5528(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C556C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C5C2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C5C70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6060(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C6070(uint64_t a1)
{
}

void sub_1000C6078(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) substringWithRange:*(void *)(a1 + 48), *(void *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  float v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C6260(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1000C6300;
  _OWORD v4[3] = &unk_1014D34B8;
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [v3 enumerateSmartFieldsWithAttributeKind:v2 inRange:[*(void *)(a1 + 56) range] usingBlock:v4];
}

void sub_1000C6300(uint64_t a1, void *a2)
{
  char v7 = 0;
  id v3 = a2;
  float v4 = objc_opt_class();
  uint64_t v5 = __CRLAccessibilityCastAsSafeCategory(v4, (uint64_t)v3, 1, &v7);
  if (v7) {
    abort();
  }
  uint64_t v6 = (void *)v5;

  if (v6) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1000C68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C68F0(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) crlaxTarget];
  id v2 = [v5 textRangeForParagraphAtIndex:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v4;
}

void sub_1000C6A04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000C6A1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) crlaxTarget];
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (unsigned __int16)[v2 characterAtIndex:*(void *)(a1 + 48)];
}

void sub_1000C7304(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7348(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C738C(id a1)
{
  id v1 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:517 valueOptions:512 capacity:0];
  id v2 = (void *)qword_1016A9028;
  qword_1016A9028 = (uint64_t)v1;
}

void sub_1000C73D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C741C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C776C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C77B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C77F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7838(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7B38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7B7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7BC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C7C04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000C8048(char *a1, uint64_t a2)
{
  for (uint64_t result = 0xCBF29CE484222325; a2; --a2)
  {
    uint64_t v4 = *a1++;
    uint64_t result = 0x100000001B3 * (result ^ v4);
  }
  return result;
}

uint64_t sub_1000C8080(char *a1, uint64_t a2, uint64_t a3)
{
  for (; a2; --a2)
  {
    uint64_t v3 = *a1++;
    a3 = 0x100000001B3 * (a3 ^ v3);
  }
  return a3;
}

uint64_t sub_1000C846C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (a2 < 0 || a3 < 0 || (uint64_t v7 = v5[1], v7 <= a2) || v5[2] <= a3)
  {
    unsigned int v9 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D3750);
    }
    uint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = v6[1];
      uint64_t v16 = v6[2];
      *(_DWORD *)buf = 67110914;
      unsigned int v18 = v9;
      __int16 v19 = 2082;
      float v20 = "CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)";
      __int16 v21 = 2082;
      float v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h";
      __int16 v23 = 1024;
      int v24 = 36;
      __int16 v25 = 2048;
      uint64_t v26 = a2;
      __int16 v27 = 2048;
      uint64_t v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D3770);
    }
    uint64_t v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v11);
    }
    uint64_t v12 = +[NSString stringWithUTF8String:"CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)"];
    uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 36, 0, "bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v6[1], v6[2]);

    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v5[3] + 4 * (a2 + v7 * a3));
  }

  return v8;
}

void sub_1000C8704(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t *)(*(void *)(a1 + 32) + 8) >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      id v5 = *(void **)(a1 + 40);
      if (!v5) {
        goto LABEL_15;
      }
      uint64_t v6 = v5;
      uint64_t v7 = v6;
      if (a2 < 0 || v6[1] <= v4 || v6[2] <= a2) {
        break;
      }
      uint64_t v8 = *(unsigned __int8 *)(v6[4] + v6[3] * a2 + ((unint64_t)v4 >> 3));

      if (((v8 << (v4 & 7)) & 0x80) == 0) {
        goto LABEL_15;
      }
      unsigned int v9 = *(void **)(a1 + 48);
      unint64_t v10 = v4;
      uint64_t v11 = a2;
      BOOL v12 = 1;
LABEL_29:
      sub_1000C8B34(v9, v10, v11, v12);
      if (*(void *)(*(void *)(a1 + 32) + 8) <= ++v4) {
        return;
      }
    }
    unsigned int v13 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D3790);
    }
    uint64_t v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = v7[1];
      uint64_t v26 = v7[2];
      *(_DWORD *)buf = 67110914;
      unsigned int v30 = v13;
      __int16 v31 = 2082;
      uint64_t v32 = "NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)";
      __int16 v33 = 2082;
      float v34 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
      __int16 v35 = 1024;
      int v36 = 52;
      __int16 v37 = 2048;
      uint64_t v38 = v4;
      __int16 v39 = 2048;
      uint64_t v40 = a2;
      __int16 v41 = 2048;
      uint64_t v42 = v25;
      __int16 v43 = 2048;
      uint64_t v44 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D37B0);
      }
    }
    uint64_t v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      __int16 v27 = v15;
      uint64_t v28 = +[CRLAssertionHandler packedBacktraceString];
      *(_DWORD *)buf = 67109378;
      unsigned int v30 = v13;
      __int16 v31 = 2114;
      uint64_t v32 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
    }
    uint64_t v16 = +[NSString stringWithUTF8String:"NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)"];
    uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 52, 0, "bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", v4, a2, v7[1], v7[2]);

LABEL_15:
    unsigned int v18 = sub_1000C846C(*(void **)(a1 + 32), v4, a2);
    unsigned int v19 = *(_DWORD *)(a1 + 64);
    unsigned int v9 = *(void **)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 56);
    LODWORD(v21) = HIBYTE(v19) - HIBYTE(v18);
    if ((int)v21 >= 0) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = HIBYTE(v18) - HIBYTE(v19);
    }
    if (v20 >= v21
      && ((LODWORD(v22) = BYTE1(v19) - BYTE1(v18), (int)v22 >= 0)
        ? (uint64_t v22 = v22)
        : (uint64_t v22 = BYTE1(v18) - BYTE1(v19)),
          v20 >= v22
       && ((LODWORD(v23) = BYTE2(v19) - BYTE2(v18), (int)v23 >= 0)
         ? (uint64_t v23 = v23)
         : (uint64_t v23 = BYTE2(v18) - BYTE2(v19)),
           v20 >= v23)))
    {
      LODWORD(v24) = *(_DWORD *)(a1 + 64) - v18;
      if ((int)v24 >= 0) {
        uint64_t v24 = v24;
      }
      else {
        uint64_t v24 = -(int)v24;
      }
      BOOL v12 = v20 >= v24;
    }
    else
    {
      BOOL v12 = 0;
    }
    unint64_t v10 = v4;
    uint64_t v11 = a2;
    goto LABEL_29;
  }
}

void sub_1000C8B34(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = v7;
  if ((a2 & 0x8000000000000000) != 0 || a3 < 0 || v7[1] <= (int64_t)a2 || v7[2] <= a3)
  {
    unsigned int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D37D0);
    }
    unsigned int v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = v8[1];
      uint64_t v18 = v8[2];
      *(_DWORD *)buf = 67110914;
      unsigned int v20 = v12;
      __int16 v21 = 2082;
      uint64_t v22 = "void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)";
      __int16 v23 = 2082;
      uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
      __int16 v25 = 1024;
      int v26 = 67;
      __int16 v27 = 2048;
      unint64_t v28 = a2;
      __int16 v29 = 2048;
      uint64_t v30 = a3;
      __int16 v31 = 2048;
      uint64_t v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D37F0);
    }
    uint64_t v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v14);
    }
    uint64_t v15 = +[NSString stringWithUTF8String:"void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)"];
    uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 67, 0, "bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v8[1], v8[2]);
  }
  else
  {
    uint64_t v9 = v7[4] + v7[3] * a3;
    int v10 = *(unsigned __int8 *)(v9 + (a2 >> 3));
    int v11 = v10 & (-129 >> (a2 & 7));
    if (a4) {
      LOBYTE(v11) = v10 | (0x80u >> (a2 & 7));
    }
    *(unsigned char *)(v9 + (a2 >> 3)) = v11;
  }
}

void sub_1000C91C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C91EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C91FC(uint64_t a1)
{
}

void sub_1000C9204(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  id v9 = a3;
  int v10 = v9;
  if (!a2 || v9)
  {
    unsigned int v12 = +[NSBundle mainBundle];
    unsigned int v13 = [v12 localizedStringForKey:@"Can’t Remove Background" value:0 table:0];

    uint64_t v14 = +[NSBundle mainBundle];
    uint64_t v15 = [v14 localizedStringForKey:@"The background can’t be removed from this image." value:0 table:0];

    if (v10)
    {
      NSErrorUserInfoKey v32 = NSUnderlyingErrorKey;
      __int16 v33 = v10;
      uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = +[NSError crl_errorWithDomain:@"com.apple.freeform" code:v10 == 0 alertTitle:v13 alertMessage:v15 userInfo:v16];
    if (v10)
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014D36A8);
      }
      uint64_t v18 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_INFO))
      {
        unsigned int v19 = v18;
        unsigned int v20 = (objc_class *)objc_opt_class();
        __int16 v21 = NSStringFromClass(v20);
        uint64_t v22 = [v10 domain];
        int v24 = 138544130;
        __int16 v25 = v21;
        __int16 v26 = 2114;
        __int16 v27 = v22;
        __int16 v28 = 2048;
        id v29 = [v10 code];
        __int16 v30 = 2112;
        __int16 v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Remove background from image failed with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v24, 0x2Au);
      }
    }
    else
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014D36C8);
      }
      __int16 v23 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_INFO))
      {
        LOWORD(v24) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Remove background from image failed and provided no error.", (uint8_t *)&v24, 2u);
      }
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setError:v17];
  }
  else
  {
    double v11 = a4 / (double)CGImageGetWidth(*(CGImageRef *)(a1 + 48));
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setOffset:v11, a5 / (double)CGImageGetHeight(*(CGImageRef *)(a1 + 48))];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setImage:a2];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000C9538(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000C957C(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000C95C0(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000C9648(id a1)
{
  qword_1016A9040 = (uint64_t)&vk_cgImageRemoveBackground;
}

void sub_1000C9660(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C96A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C96E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C972C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C9770(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C97B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C984C(id a1)
{
  id v1 = objc_alloc_init(CRLLogHelper);
  id v2 = (void *)qword_1016A9048;
  qword_1016A9048 = (uint64_t)v1;
}

void sub_1000C9A54(id a1)
{
  id v1 = sub_100401ECC("CRLPerformanceCat");
  id v2 = off_10166B4C0;
  off_10166B4C0 = v1;
}

void sub_1000C9A94(id a1)
{
  id v1 = sub_100401ECC("CRLPerformanceCat");
  id v2 = off_10166B4C0;
  off_10166B4C0 = v1;
}

void sub_1000C9FAC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000C9FF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000CAC10(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_teardownPlayerController];
}

void sub_1000CAC18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CAC5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CBC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CBCA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_teardownPlayerControllerIfNeeded];
}

void sub_1000CBCA8(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  CGImageRef v7 = 0;
  CGImageRef v7 = CGImageRetain([*(id *)(a1 + 32) CGImageForSize:0 inContext:*(void *)(a1 + 40) orContentsScaleProvider:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 32) *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)]);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000CBD9C;
  v2[3] = &unk_1014D38F8;
  v2[4] = *(void *)(a1 + 48);
  id v3 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

  _Block_object_dispose(v6, 8);
}

void sub_1000CBD9C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) directlyManagesLayerContent])
  {
    id v2 = [*(id *)(a1 + 32) movieItem];
    id v3 = [v2 posterImageAssetPayload];
    id v4 = [*(id *)(a1 + 40) imageData];

    if (v3 == v4) {
      [*(id *)(a1 + 48) setContents:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
    }
  }
  id v5 = *(CGImage **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  CGImageRelease(v5);
}

id sub_1000CC6D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_setupPlayerControllerIfNecessary];
}

void sub_1000CD39C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_101719CD0 != -1) {
    dispatch_once(&qword_101719CD0, &stru_1014D3940);
  }
  id v4 = off_10166D878;
  if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 224);
    uint64_t v6 = v4;
    unsigned int v7 = [v5 isPlaying];
    uint64_t v8 = "not playing";
    if (v7) {
      uint64_t v8 = "playing";
    }
    int v9 = 136315138;
    int v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "delay timer fired. playback in state %s", (uint8_t *)&v9, 0xCu);
  }
  [*(id *)(a1 + 32) p_invalidateHideControlsTimeoutTimer];
  [*(id *)(a1 + 32) p_hideControls];
}

void sub_1000CD4CC(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1000CE0CC(uint64_t a1)
{
  [*(id *)(a1 + 32) p_startOrStopLoopingStickerIfNecessary];
  id v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = v2[273];
  id v4 = [v2 p_playButtonKnob];
  [v4 setEnabled:v3];

  [*(id *)(a1 + 32) p_updatePlayButtonVisibility];
  if ([*(id *)(a1 + 32) isSelected]
    && objc_msgSend(*(id *)(a1 + 32), "p_shouldPlayerControllerExistThroughoutSelection"))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    uint64_t v6 = sub_1000CE1C8;
    unsigned int v7 = &unk_1014CBBB0;
    uint64_t v8 = *(void *)(a1 + 32);
    if (+[NSThread isMainThread]) {
      v6((uint64_t)block);
    }
    else {
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
}

id sub_1000CE1C8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) hasBeenRemoved];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) p_setupPlayerControllerIfNecessary];
    uint64_t v3 = *(void **)(a1 + 32);
    return [v3 p_startOrStopLoopingStickerIfNecessary];
  }
  return result;
}

void sub_1000CE21C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasBeenRemoved] & 1) == 0)
  {
    dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
    uint64_t v3 = +[AVAsset crl_playableKeysWithKeys:&off_10155C1B8];
    id v4 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000CE328;
    v8[3] = &unk_1014D39B8;
    id v5 = v2;
    uint64_t v6 = *(void *)(a1 + 32);
    unsigned int v7 = *(void **)(a1 + 40);
    int v9 = v5;
    uint64_t v10 = v6;
    id v11 = v7;
    id v12 = *(id *)(a1 + 48);
    [v4 loadValuesAsynchronouslyForKeys:v3 completionHandler:v8];
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1000CE328(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  Main = CFRunLoopGetMain();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1000CE3FC;
  block[3] = &unk_1014D3990;
  uint64_t v3 = *(void **)(a1 + 48);
  block[4] = *(void *)(a1 + 40);
  id v5 = v3;
  id v6 = *(id *)(a1 + 56);
  CFRunLoopPerformBlock(Main, kCFRunLoopCommonModes, block);
  CFRunLoopWakeUp(Main);
}

uint64_t sub_1000CE3FC(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) hasBeenRemoved];
  if ((result & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 40) statusOfValueForKey:@"playable" error:0];
    if (v3 != (id)4)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 272) = 1;
      if (v3 == (id)2) {
        unsigned __int8 v4 = [*(id *)(a1 + 40) crl_isPlayable];
      }
      else {
        unsigned __int8 v4 = 0;
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 273) = v4;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 264);
    if (v6 == *(void **)(a1 + 40))
    {
      *(void *)(v5 + 264) = 0;
    }
    unsigned int v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v7();
  }
  return result;
}

void sub_1000CEC0C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  [v2 presentError:*(void *)(a1 + 40) completionHandler:0];
}

void sub_1000CF840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF884(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF8C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF90C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF950(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF994(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CF9D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CFA1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CFA60(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1000CFC04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000CFC48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D00FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D0140(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D0184(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1000D066C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D06B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D0B4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D0B90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D0BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (v3 && [v3 needsDownload])
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, v4);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    uint64_t v8 = sub_1000D0D0C;
    int v9 = &unk_1014D3C20;
    objc_copyWeak(&v10, &location);
    objc_copyWeak(&v11, &from);
    [v4 addDownloadObserverWithIdentifier:v5 options:2 handler:&v6];
    [v4 downloadIfNeeded:v6, v7, v8, v9];
    objc_destroyWeak(&v11);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }
}

void sub_1000D0CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1000D0D0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained p_handleAssetPreparationCompletionForAsset:v2];
}

void sub_1000D14BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1500(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1800(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1844(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1888(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D18CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1BD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1C18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1C5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D1CA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D2024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D203C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D204C(uint64_t a1)
{
}

void sub_1000D2054(uint64_t a1)
{
  id v5 = +[UIColor secondaryLabelColor];
  uint64_t v2 = +[CRLColor colorWithUIColor:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000D2884(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D28C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D290C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D2950(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D2994(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D29D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000D2BA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _close];
}

void sub_1000D317C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D31C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D3204(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v7 = a3;
  id v8 = a4;
  int v9 = v8;
  uint64_t v10 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v10 + 88))
  {
    if (v8)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D3F58);
      }
      id v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107598C(v11, v9);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D3F78);
      }
      id v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v12);
      }
      unsigned int v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _resetStreamReadChannelIfNeededForOffset:length:]_block_invoke");
      uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"];
      uint64_t v15 = (objc_class *)objc_opt_class();
      uint64_t v16 = NSStringFromClass(v15);
      uint64_t v17 = [v9 domain];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 194, 0, "Error reading from filter CRLStreamReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v16, v17, [v9 code], v9);

      a2 = 1;
    }
    else if (v7)
    {
      *(void *)(v10 + 112) += dispatch_data_get_size(v7);
      uint64_t v18 = *(void *)(a1 + 32);
      unsigned int v19 = *(NSObject **)(v18 + 120);
      if (v19)
      {
        dispatch_data_t concat = dispatch_data_create_concat(v19, v7);
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(void **)(v21 + 120);
        *(void *)(v21 + 120) = concat;
      }
      else
      {
        __int16 v23 = v7;
        uint64_t v22 = *(void **)(v18 + 120);
        *(void *)(v18 + 120) = v23;
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 88) = a2;
  }
}

void sub_1000D3420(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D3464(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D3594(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 48))
  {
    uint64_t v3 = +[NSThread currentThread];
    unsigned __int8 v4 = [v3 threadDictionary];
    [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CRLBufferedReadChannelInvokingHandler"];

    (*(void (**)(void))(a1[5] + 16))();
    id v10 = +[NSThread currentThread];
    id v5 = [v10 threadDictionary];
    [v5 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CRLBufferedReadChannelInvokingHandler"];
  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(v2 + 8));
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    id v8 = (void *)a1[4];
    uint64_t v9 = a1[5];
    [v8 _readFromOffset:v6 length:v7 handler:v9];
  }
}

void sub_1000D3938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D3950(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  uint64_t v10 = a1[4];
  if (*(void *)(v10 + 48)) {
    goto LABEL_50;
  }
  if (*(void *)(v10 + 80))
  {
    if (!v8) {
      goto LABEL_4;
    }
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D3FE8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101075BF0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4008);
    }
    id v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v12);
    }
    unsigned int v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
    uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:281 isFatal:0 description:"The source handler for the stream read channel should not be nil"];

    if (!v9)
    {
      uint64_t v9 = +[NSError crl_fileReadUnknownErrorWithUserInfo:0];
      if (!v9)
      {
LABEL_4:
        if (v7) {
          size_t size = dispatch_data_get_size(v7);
        }
        else {
          size_t size = 0;
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) += size;
        if (*(void *)(*(void *)(a1[6] + 8) + 24) > a1[7])
        {
          unsigned int v26 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D4068);
          }
          __int16 v27 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v37 = a1[7];
            uint64_t v38 = *(void *)(*(void *)(a1[6] + 8) + 24);
            *(_DWORD *)buf = 67110402;
            unsigned int v52 = v26;
            __int16 v53 = 2082;
            CGRect v54 = "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke";
            __int16 v55 = 2082;
            CGRect v56 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m";
            __int16 v57 = 1024;
            int v58 = 298;
            __int16 v59 = 2048;
            uint64_t v60 = v38;
            __int16 v61 = 2048;
            uint64_t v62 = v37;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Received more data than requested: %zu instead of %zu", buf, 0x36u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D4088);
          }
          __int16 v28 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10106590C(v28);
          }
          id v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
          __int16 v30 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"];
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v29, v30, 298, 0, "Received more data than requested: %zu instead of %zu", *(void *)(*(void *)(a1[6] + 8) + 24), a1[7]);
        }
        if (a2)
        {
          BOOL v31 = *(void *)(*(void *)(a1[6] + 8) + 24) < a1[7];
          if (v7) {
            goto LABEL_41;
          }
        }
        else
        {
          BOOL v31 = 0;
          if (v7) {
            goto LABEL_41;
          }
        }
        if (!v31)
        {
LABEL_43:
          if (v31)
          {
            uint64_t v33 = a1[4];
            uint64_t v34 = *(void **)(v33 + 80);
            *(void *)(v33 + 80) = 0;
          }
          if (a2)
          {
            *(void *)(a1[4] + 32) += *(void *)(*(void *)(a1[6] + 8) + 24);
            __int16 v35 = (void *)a1[4];
            uint64_t v36 = v35[5];
            if (v36 != -1)
            {
              v35[5] = v36 - *(void *)(*(void *)(a1[6] + 8) + 24);
              __int16 v35 = (void *)a1[4];
            }
            [v35 _readFromOffset:a1[8] length:a1[9] handler:a1[5]];
          }
          uint64_t v9 = 0;
          goto LABEL_50;
        }
LABEL_41:
        uint64_t v32 = *(void *)(a1[4] + 80);
        if (!v32)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D40A8);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_101075A74();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D40C8);
          }
          __int16 v39 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10106590C(v39);
          }
          sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
          long long v47 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
          long long v48 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"];
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v47, v48, 303, 1, "invalid nil value for '%{public}s'", "self->_streamReadChannelSourceHandler", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m", 303, "self->_streamReadChannelSourceHandler");

          SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v49, v50);
          abort();
        }
        (*(void (**)(uint64_t, BOOL, NSObject *, void))(v32 + 16))(v32, v31, v7, 0);
        goto LABEL_43;
      }
    }
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D4028);
  }
  uint64_t v15 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101075B08(v15, v9);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D4048);
  }
  uint64_t v16 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v16);
  }
  uint64_t v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
  uint64_t v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"];
  unsigned int v19 = (objc_class *)objc_opt_class();
  unsigned int v20 = NSStringFromClass(v19);
  uint64_t v21 = [v9 domain];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 289, 0, "Error reading from source CRLReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v20, v21, [v9 code], v9);

  uint64_t v22 = +[NSThread currentThread];
  __int16 v23 = [v22 threadDictionary];
  [v23 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CRLBufferedReadChannelInvokingHandler"];

  (*(void (**)(void))(a1[5] + 16))();
  int v24 = +[NSThread currentThread];
  __int16 v25 = [v24 threadDictionary];
  [v25 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CRLBufferedReadChannelInvokingHandler"];

  objc_storeStrong((id *)(a1[4] + 48), v9);
  dispatch_resume(*(dispatch_object_t *)(a1[4] + 8));
LABEL_50:
}

void sub_1000D4100(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4144(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4188(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D41CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4210(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4254(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4298(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D42DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D45B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D45F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D487C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D48C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4B48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4B8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4E34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D4E78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGPath *sub_1000D50F8(int a1, int a2, double a3, double a4, double a5, double a6, long double a7, double a8, double a9)
{
  double v16 = (a3 - a8) * 0.5;
  double v17 = (a4 - a9) * 0.5;
  double angle = fmod(a7, 360.0) * 3.14159265 / 180.0;
  __double2 v18 = __sincos_stret(angle);
  double v19 = v18.__sinval * v17 + v18.__cosval * v16;
  double v20 = v18.__cosval * v17 - v18.__sinval * v16;
  double v21 = fabs(a5);
  double v22 = fabs(a6);
  double v23 = a5 * a5;
  double v24 = a6 * a6;
  double v25 = v19 * v19 / (a5 * a5) + v20 * v20 / (a6 * a6);
  if (v25 > 1.0)
  {
    double v26 = sqrt(v25);
    double v21 = v21 * v26;
    double v22 = v22 * v26;
    double v23 = v21 * v21;
    double v24 = v22 * v22;
  }
  double v27 = (v23 * v24 - v23 * (v20 * v20) - v24 * (v19 * v19)) / (v19 * v19 * v24 + v23 * (v20 * v20));
  if (v27 < 0.0) {
    double v27 = 0.0;
  }
  double v28 = sqrt(v27);
  if (a1 == a2) {
    double v28 = -v28;
  }
  double v29 = v20 * v21 / v22 * v28;
  double v30 = -(v22 * v19) / v21 * v28;
  double v42 = (a4 + a9) * 0.5 + v18.__cosval * v30 + v18.__sinval * v29;
  double v44 = (a3 + a8) * 0.5 + v30 * -v18.__sinval + v18.__cosval * v29;
  double v31 = (v20 - v30) / v22;
  double v32 = (-v19 - v29) / v21;
  double v33 = (-v20 - v30) / v22;
  double v34 = acos((v19 - v29) / v21 / sqrt(v31 * v31 + (v19 - v29) / v21 * ((v19 - v29) / v21)));
  if (v31 < 0.0) {
    double v34 = -v34;
  }
  double v35 = v34 * 180.0 / 3.14159265;
  double v36 = acos(v32 / sqrt(v33 * v33 + v32 * v32));
  if (v33 < 0.0) {
    double v36 = -v36;
  }
  double v37 = fmod(v36 * 180.0 / 3.14159265, 360.0);
  double v38 = fmod(v35, 360.0);
  Mutable = CGPathCreateMutable();
  long long v40 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&m.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&m.c = v40;
  *(_OWORD *)&m.tCGFloat x = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)&v47.a = *(_OWORD *)&m.a;
  *(_OWORD *)&v47.c = v40;
  *(_OWORD *)&v47.tCGFloat x = *(_OWORD *)&m.tx;
  CGAffineTransformTranslate(&m, &v47, v44, v42);
  CGAffineTransform v46 = m;
  CGAffineTransformRotate(&v47, &v46, angle);
  CGAffineTransform m = v47;
  CGAffineTransform v46 = v47;
  CGAffineTransformScale(&v47, &v46, 1.0, v22 / v21);
  CGAffineTransform m = v47;
  CGAffineTransform v46 = v47;
  CGAffineTransformTranslate(&v47, &v46, -v44, -v42);
  CGAffineTransform m = v47;
  CGPathAddArc(Mutable, &m, v44, v42, v21, v38 * 3.14159265 / 180.0, v37 * 3.14159265 / 180.0, a2 != 1);
  return Mutable;
}

CGPath *sub_1000D541C(const CGPath *a1, const CGPath *a2, uint64_t a3, uint64_t a4)
{
  MutableCopCGFloat y = CGPathCreateMutableCopy(a1);
  if (a3 < a4)
  {
    do
    {
      switch(sub_10034838C(a2, a3, x))
      {
        case 0u:
          CGPathMoveToPoint(MutableCopy, 0, x[0], x[1]);
          break;
        case 1u:
          CGPathAddLineToPoint(MutableCopy, 0, x[0], x[0]);
          break;
        case 3u:
          CGPathAddCurveToPoint(MutableCopy, 0, x[0], x[1], x[2], x[3], x[4], x[5]);
          break;
        case 4u:
          CGPathCloseSubpath(MutableCopy);
          break;
        default:
          break;
      }
      ++a3;
    }
    while (a4 != a3);
  }
  return MutableCopy;
}

CGPath *sub_1000D5540(const CGPath *a1, const CGAffineTransform *a2)
{
  Mutable = CGPathCreateMutable();
  CGPathAddPath(Mutable, a2, a1);
  return Mutable;
}

void sub_1000D5584(double *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float v13 = a8 * a9;
  float v14 = fmodf(v13, 2.0);
  if (a3 >= 1)
  {
    double v15 = (float)(v14 * 0.5);
    double v16 = (double *)(a2 + 8);
    do
    {
      double v17 = *(v16 - 1);
      double v18 = *v16;
      if (a1)
      {
        double v19 = a1[4] + v18 * a1[2] + *a1 * v17;
        double v18 = a1[5] + v18 * a1[3] + a1[1] * v17;
        double v17 = v19;
      }
      *(v16 - 1) = sub_100067528(v17, v18, a9) + v15;
      *double v16 = v20 + v15;
      v16 += 2;
      --a3;
    }
    while (a3);
  }
}

CGPath *sub_1000D5638(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  v22[0] = CGRectGetMinX(*(CGRect *)&a2);
  v24.origin.CGFloat x = a2;
  v24.origin.CGFloat y = a3;
  v24.size.CGFloat width = a4;
  v24.size.CGFloat height = a5;
  v22[1] = CGRectGetMinY(v24);
  v25.origin.CGFloat x = a2;
  v25.origin.CGFloat y = a3;
  v25.size.CGFloat width = a4;
  v25.size.CGFloat height = a5;
  v22[2] = CGRectGetMaxX(v25);
  v26.origin.CGFloat x = a2;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  v22[3] = CGRectGetMinY(v26);
  v27.origin.CGFloat x = a2;
  v27.origin.CGFloat y = a3;
  v27.size.CGFloat width = a4;
  v27.size.CGFloat height = a5;
  v22[4] = CGRectGetMaxX(v27);
  v28.origin.CGFloat x = a2;
  v28.origin.CGFloat y = a3;
  v28.size.CGFloat width = a4;
  v28.size.CGFloat height = a5;
  v22[5] = CGRectGetMaxY(v28);
  v29.origin.CGFloat x = a2;
  v29.origin.CGFloat y = a3;
  v29.size.CGFloat width = a4;
  v29.size.CGFloat height = a5;
  v22[6] = CGRectGetMinX(v29);
  v30.origin.CGFloat x = a2;
  v30.origin.CGFloat y = a3;
  v30.size.CGFloat width = a4;
  v30.size.CGFloat height = a5;
  double MaxY = CGRectGetMaxY(v30);
  sub_1000D5584(a1, (uint64_t)v22, 4, MaxY, v14, v15, v16, a6, a7);
  Mutable = CGPathCreateMutable();
  for (uint64_t i = 0; i != 8; i += 2)
  {
    CGFloat v19 = *(double *)&v22[i];
    CGFloat v20 = *(double *)&v22[i + 1];
    if (i * 8) {
      CGPathAddLineToPoint(Mutable, 0, v19, v20);
    }
    else {
      CGPathMoveToPoint(Mutable, 0, v19, v20);
    }
  }
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

uint64_t sub_1000D57D4(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = (a3 - a2) * 3.0;
  double v6 = -(v5 - (a4 - a3) * 3.0);
  double v7 = a5 - v6 - v5 - a2;
  double v8 = v7 * 3.0;
  double v9 = v5 * (v7 * 3.0);
  double v10 = 0.0;
  if (vabdd_f64(v6 * v6, v9) > (v6 * v6 + fabs(v9)) * 0.0001) {
    double v10 = v6 * v6 - v9;
  }
  if (v10 < 0.0) {
    return 0;
  }
  double v12 = 1.0;
  if (v6 < 0.0) {
    double v12 = -1.0;
  }
  double v13 = -(v6 + v12 * sqrt(v10));
  double v14 = v8 * 0.0001;
  if (v13 < v8 * 0.9999 && v7 > 0.0 && v14 < v13 || (uint64_t v11 = 0, v13 < v14) && v7 < 0.0 && v8 * 0.9999 < v13)
  {
    *a1 = v13 / v8;
    uint64_t v11 = 1;
  }
  double v15 = v13 * 0.0001;
  if (v5 < v13 * 0.9999 && (v13 > 0.0 ? (BOOL v16 = v15 < v5) : (BOOL v16 = 0), v16)
    || v5 < v15 && (v13 < 0.0 ? (BOOL v17 = v13 * 0.9999 < v5) : (BOOL v17 = 0), v17))
  {
    a1[v11++] = v5 / v13;
  }
  return v11;
}

void sub_1000D58E4(CGPathRef path, unsigned int a2, int a3, double a4, double a5)
{
  if (a4 < 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4210);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101075DAC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4230);
    }
    double v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v6);
    }
    double v7 = +[NSString stringWithUTF8String:"CGRect CRLPathBoundsIncludingStrokeWithParameters(CGPathRef, CGFloat, CGFloat, CGLineCap, CGLineJoin)"];
    double v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:689 isFatal:0 description:"lineWidth should not be negative."];

    if (!CGPathIsEmpty(path)) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (CGPathIsEmpty(path))
  {
LABEL_13:
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4250);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101075D24();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4270);
    }
    double v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v13);
    }
    double v14 = +[NSString stringWithUTF8String:"CGRect CRLPathBoundsIncludingStrokeWithParameters(CGPathRef, CGFloat, CGFloat, CGLineCap, CGLineJoin)"];
    double v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"];
    +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:694 isFatal:0 description:"Can not calculate the stroked bounds of an empty path."];

    return;
  }
  if (a4 == 0.0)
  {
LABEL_23:
    CGPathGetPathBoundingBox(path);
    return;
  }
  CGPathGetCurrentPoint(path);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v16, v17);
  long long v56 = 0u;
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  double v18 = a4 * 0.5;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  CGPoint v43 = (CGPoint)0;
  long long v42 = 0u;
  CGPoint v44 = CGPointZero;
  CGPoint v23 = v44;
  CGPoint v43 = v44;
  uint64_t v40 = v19;
  double v41 = v18;
  uint64_t info = v20;
  uint64_t v38 = v21;
  uint64_t v39 = v22;
  LODWORD(v42) = a3;
  *((double *)&v42 + 1) = a5;
  CGPathApply(path, &info, (CGPathApplierFunction)sub_1000D5DE8);
  if (a2)
  {
    uint64_t v27 = 0;
    uint64_t v36 = 0;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    CGPoint v25 = v23;
    CGPoint v26 = v23;
    void v24[3] = v40;
    *(double *)&v24[4] = v18;
    v24[0] = info;
    v24[1] = v38;
    v24[2] = v39;
    v24[5] = a2;
    CGPathApply(path, v24, (CGPathApplierFunction)sub_1000D5F98);
    sub_1000D6158((uint64_t)v24);
  }
}

void sub_1000D5CD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D5D1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D5D60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D5DA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D5DE8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  if ((v4 - 1) >= 3)
  {
    if (v4 == 4)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        if (sub_1000643CC(*(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 56), *(double *)(a1 + 64)) > 0.00000001)
        {
          uint64_t v18 = a1 + 56;
          uint64_t v17 = 1;
          sub_1000D6698(a1, (int *)&v17);
        }
        unsigned int v16 = *(_DWORD *)(a1 + 232);
        uint64_t v18 = a1 + 240;
        uint64_t v17 = v16;
        sub_1000D6698(a1, (int *)&v17);
      }
      *(_DWORD *)(a1 + 88) = 0;
      long long v15 = *(_OWORD *)(a1 + 56);
    }
    else
    {
      if (v4) {
        return;
      }
      *(_DWORD *)(a1 + 88) = 0;
      double v14 = (_OWORD *)*((void *)a2 + 1);
      *(_OWORD *)(a1 + 56) = *v14;
      long long v15 = *v14;
    }
    *(_OWORD *)(a1 + 72) = v15;
  }
  else
  {
    if (*(_DWORD *)(a1 + 88)) {
      goto LABEL_9;
    }
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 232) = v4;
    int v6 = dword_101175398[v4];
    unsigned int v7 = v6 <= 1 ? 1 : v6;
    uint64_t v8 = 16 * v7;
    do
    {
      *(_OWORD *)(a1 + 240 + v5) = *(_OWORD *)(*((void *)a2 + 1) + v5);
      v5 += 16;
    }
    while (v8 != v5);
    LODWORD(v4) = *a2;
    if (*a2 != 4)
    {
LABEL_9:
      int v9 = dword_101175398[(int)v4];
      double v10 = *(double *)(a1 + 72);
      double v11 = *(double *)(a1 + 80);
      if (v9 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v9;
      }
      for (uint64_t i = (double *)(*((void *)a2 + 1) + 8); sub_1000643CC(*(i - 1), *i, v10, v11) <= 0.00000001; i += 2)
      {
        if (!--v12) {
          return;
        }
      }
      sub_1000D6698(a1, (int *)a2);
    }
  }
}

void sub_1000D5F98(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  if ((v4 - 1) >= 3)
  {
    if (v4 == 4)
    {
      *(_WORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 48);
    }
    else if (!v4)
    {
      sub_1000D6158(a1);
      *(_WORD *)(a1 + 80) = 0;
      double v11 = (_OWORD *)*((void *)a2 + 1);
      *(_OWORD *)(a1 + 64) = *v11;
      *(_OWORD *)(a1 + 48) = *v11;
    }
  }
  else
  {
    uint64_t v5 = (_OWORD *)(a1 + 64);
    double v6 = *(double *)(a1 + 64);
    *(unsigned char *)(a1 + 81) = 1;
    int v7 = dword_101175398[v4];
    double v8 = *(double *)(a1 + 72);
    if (v7 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v7;
    }
    for (uint64_t i = (double *)(*((void *)a2 + 1) + 8); sub_1000643CC(*(i - 1), *i, v6, v8) <= 0.00000001; i += 2)
    {
      if (!--v9) {
        return;
      }
    }
    if (!*(unsigned char *)(a1 + 80))
    {
      *(unsigned char *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 84) = v4;
      *(_OWORD *)(a1 + 88) = *v5;
      uint64_t v12 = (int)*a2;
      if (v12 == 4)
      {
        LODWORD(v4) = 4;
      }
      else
      {
        uint64_t v13 = 0;
        int v14 = dword_101175398[v12];
        if (v14 <= 1) {
          int v14 = 1;
        }
        uint64_t v15 = 16 * v14;
        do
        {
          *(_OWORD *)(a1 + 104 + v13) = *(_OWORD *)(*((void *)a2 + 1) + v13);
          v13 += 16;
        }
        while (v15 != v13);
        LODWORD(v4) = *a2;
      }
    }
    *(_DWORD *)(a1 + 152) = v4;
    *(_OWORD *)(a1 + 160) = *v5;
    uint64_t v16 = (int)*a2;
    int v17 = dword_101175398[v16];
    if (v16 != 4)
    {
      uint64_t v18 = 0;
      if (v17 <= 1) {
        int v17 = 1;
      }
      uint64_t v19 = 16 * v17;
      do
      {
        *(_OWORD *)(a1 + 176 + v18) = *(_OWORD *)(*((void *)a2 + 1) + v18);
        v18 += 16;
      }
      while (v19 != v18);
      int v17 = dword_101175398[*a2];
    }
    _OWORD *v5 = *(_OWORD *)(*((void *)a2 + 1) + 16 * (v17 - 1));
  }
}

void sub_1000D6158(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    if (!*(unsigned char *)(a1 + 81)) {
      return;
    }
    int v37 = *(_DWORD *)(a1 + 40);
    if (v37 == 1)
    {
      double v38 = *(double *)(a1 + 32);
    }
    else
    {
      if (v37 != 2) {
        return;
      }
      double v38 = *(double *)(a1 + 32) * 1.41421356;
    }
    double v83 = v38 + v38;
    double v84 = *(double *)(a1 + 64);
    double v85 = *(double *)(a1 + 72);
    goto LABEL_23;
  }
  double v3 = *(double *)(a1 + 88);
  double v2 = *(double *)(a1 + 96);
  uint64_t v4 = (double *)(a1 + 160 + 16 * dword_101175398[*(int *)(a1 + 152)]);
  double v6 = *v4;
  double v5 = v4[1];
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 == 1)
  {
    v93.origin.CGFloat x = sub_10006402C(*(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 32) + *(double *)(a1 + 32));
    v93.origin.CGFloat y = v39;
    v93.size.CGFloat width = v40;
    v93.size.CGFloat height = v41;
    CGRect v92 = CGRectUnion(*(CGRect *)a1, v93);
    CGFloat x = v92.origin.x;
    CGFloat y = v92.origin.y;
    CGFloat width = v92.size.width;
    CGFloat height = v92.size.height;
    *(CGRect *)a1 = v92;
    double v46 = sub_10006402C(v6, v5, *(double *)(a1 + 32) + *(double *)(a1 + 32));
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    CGFloat v53 = x;
    CGFloat v54 = y;
    CGFloat v55 = width;
    CGFloat v56 = height;
LABEL_24:
    *(CGRect *)&double v79 = CGRectUnion(*(CGRect *)&v53, *(CGRect *)&v46);
    goto LABEL_25;
  }
  if (v7 != 2) {
    return;
  }
  double v8 = sub_1000D6E2C(*(_DWORD *)(a1 + 84), (float64x2_t *)(a1 + 88), 0.0).f64[0];
  double v10 = CGPointZero.x;
  double v11 = CGPointZero.y;
  if (v8 == CGPointZero.x && v9 == v11)
  {
    v94.origin.CGFloat x = sub_10006402C(v3, v2, *(double *)(a1 + 32) * 1.41421356 + *(double *)(a1 + 32) * 1.41421356);
    v94.origin.CGFloat y = v57;
    v94.size.CGFloat width = v58;
    v94.size.CGFloat height = v59;
    *(CGRect *)&double v33 = CGRectUnion(*(CGRect *)a1, v94);
  }
  else
  {
    double v90 = v6;
    double v91 = v5;
    double v13 = sub_1000646A4(v8, v9, *(double *)(a1 + 32));
    double v15 = v14;
    double v16 = sub_100064680(v3, v2, v13);
    double v89 = v17;
    double v18 = v17;
    double v19 = sub_100066394(1, v13, v15);
    double v20 = sub_100064698(v16, v18, v19);
    double v21 = sub_100065928(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v20);
    CGFloat v23 = v22;
    double v25 = v24;
    double v26 = v11;
    double v28 = v27;
    double v29 = v19;
    double v6 = v90;
    double v5 = v91;
    double v30 = sub_100064680(v16, v89, v29);
    CGFloat v31 = v25;
    double v10 = CGPointZero.x;
    CGFloat v32 = v28;
    double v11 = v26;
    double v33 = sub_100065928(v21, v23, v31, v32, v30);
  }
  *(double *)a1 = v33;
  *(void *)(a1 + 8) = v34;
  *(void *)(a1 + 16) = v35;
  *(void *)(a1 + 24) = v36;
  double v60 = sub_1000D6E2C(*(_DWORD *)(a1 + 152), (float64x2_t *)(a1 + 160), 1.0).f64[0];
  if (v60 == v10 && v61 == v11)
  {
    double v83 = *(double *)(a1 + 32) * 1.41421356 + *(double *)(a1 + 32) * 1.41421356;
    double v84 = v6;
    double v85 = v5;
LABEL_23:
    double v46 = sub_10006402C(v84, v85, v83);
    uint64_t v48 = v86;
    uint64_t v50 = v87;
    uint64_t v52 = v88;
    CGFloat v53 = *(double *)a1;
    CGFloat v54 = *(double *)(a1 + 8);
    CGFloat v55 = *(double *)(a1 + 16);
    CGFloat v56 = *(double *)(a1 + 24);
    goto LABEL_24;
  }
  double v63 = sub_1000646A4(v60, v61, *(double *)(a1 + 32));
  double v65 = v64;
  double v66 = sub_100064698(v6, v5, v63);
  double v68 = v67;
  double v69 = sub_100066394(1, v63, v65);
  double v70 = sub_100064698(v66, v68, v69);
  double v71 = sub_100065928(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v70);
  CGFloat v73 = v72;
  CGFloat v75 = v74;
  CGFloat v77 = v76;
  double v78 = sub_100064680(v66, v68, v69);
  double v79 = sub_100065928(v71, v73, v75, v77, v78);
LABEL_25:
  *(double *)a1 = v79;
  *(void *)(a1 + 8) = v80;
  *(void *)(a1 + 16) = v81;
  *(void *)(a1 + 24) = v82;
}

void sub_1000D64F0(const CGPath *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      info[0] = a2;
      info[1] = a3;
      CGPoint v4 = CGPointZero;
      CGPoint v5 = v4;
      uint64_t v6 = 0;
      CGPathApply(a1, info, (CGPathApplierFunction)sub_1000D654C);
    }
  }
}

void sub_1000D654C(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 - 1) >= 3)
  {
    if (v3 == 4)
    {
      if (*(void *)(a1 + 48)
        && sub_1000643CC(*(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 16), *(double *)(a1 + 24)) > 0.00000001)
      {
        v6[1] = a1 + 16;
        v6[0] = 1;
        sub_1000D7284(a1, (unsigned int *)v6);
      }
      *(void *)(a1 + 48) = 0;
      long long v5 = *(_OWORD *)(a1 + 16);
    }
    else
    {
      if (v3) {
        return;
      }
      *(void *)(a1 + 48) = 0;
      CGPoint v4 = *(_OWORD **)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *v4;
      long long v5 = *v4;
    }
    *(_OWORD *)(a1 + 32) = v5;
  }
  else
  {
    sub_1000D7284(a1, (unsigned int *)a2);
  }
}

const CGPath *sub_1000D661C(const CGPath *result)
{
  uint64_t v1 = 0;
  if (result)
  {
    info[0] = &v1;
    info[1] = sub_1000D6688;
    CGPoint v3 = CGPointZero;
    CGPoint v4 = v3;
    uint64_t v5 = 0;
    CGPathApply(result, info, (CGPathApplierFunction)sub_1000D654C);
    return (const CGPath *)v1;
  }
  return result;
}

void *sub_1000D6688(void *result)
{
  return result;
}

void sub_1000D6698(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = *(int *)(a1 + 160);
    *(_DWORD *)(a1 + 92) = v5;
    memmove((void *)(a1 + 96), (const void *)(a1 + 168), 16 * (dword_101175398[v5] & ~(dword_101175398[v5] >> 31)) + 16);
  }
  int v6 = *a2;
  *(_DWORD *)(a1 + 160) = *a2;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 72);
  uint64_t v7 = *a2;
  int v8 = dword_101175398[v7];
  if (v7 != 4)
  {
    uint64_t v9 = 0;
    if (v8 <= 1) {
      int v8 = 1;
    }
    uint64_t v10 = 16 * v8;
    do
    {
      *(_OWORD *)(a1 + 184 + v9) = *(_OWORD *)(*((void *)a2 + 1) + v9);
      v9 += 16;
    }
    while (v10 != v9);
    int v8 = dword_101175398[*a2];
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(*((void *)a2 + 1) + 16 * (v8 - 1));
  *(_DWORD *)(a1 + 88) = v4 + 1;
  if (v6 == 1)
  {
    sub_1000D6BA4((CGFloat *)a1, 1, (float64x2_t *)(a1 + 168), 0.0);
    sub_1000D6BA4((CGFloat *)a1, 1, (float64x2_t *)(a1 + 168), 1.0);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 160);
  if ((v11 & 0xFFFFFFFE) == 2)
  {
    double v13 = *(double *)(a1 + 168);
    double v12 = *(double *)(a1 + 176);
    double v15 = *(double *)(a1 + 72);
    double v14 = *(double *)(a1 + 80);
    double v17 = *(double *)(a1 + 184);
    double v16 = *(double *)(a1 + 192);
    if (v11 == 3)
    {
      double v19 = *(double *)(a1 + 200);
      double v18 = *(double *)(a1 + 208);
    }
    else
    {
      double v19 = v17 + (v15 - v17) / 3.0;
      double v17 = v13 + (v17 - v13 + v17 - v13) / 3.0;
      double v18 = v16 + (v14 - v16) / 3.0;
      double v16 = v12 + (v16 - v12 + v16 - v12) / 3.0;
    }
    sub_1000D6BA4((CGFloat *)a1, v11, (float64x2_t *)(a1 + 168), 0.0);
    sub_1000D6BA4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), 1.0);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v20 = sub_1000D57D4((double *)&v66, v13, v17, v19, v15);
    if (v20)
    {
      uint64_t v21 = v20;
      double v22 = (double *)&v66;
      do
      {
        double v23 = *v22++;
        sub_1000D6BA4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), v23);
        --v21;
      }
      while (v21);
    }
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v24 = sub_1000D57D4((double *)&v66, v12, v16, v18, v14);
    if (v24)
    {
      uint64_t v25 = v24;
      double v26 = (double *)&v66;
      do
      {
        double v27 = *v26++;
        sub_1000D6BA4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), v27);
        --v25;
      }
      while (v25);
    }
  }
  int v28 = *(_DWORD *)(a1 + 40);
  if (v28 != 2 && *(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v28 == 1)
    {
      v68.origin.CGFloat x = sub_10006402C(*(double *)(a1 + 168), *(double *)(a1 + 176), *(double *)(a1 + 32) + *(double *)(a1 + 32));
      v68.origin.double y = v60;
      v68.size.CGFloat width = v61;
      v68.size.CGFloat height = v62;
      *(CGRect *)&double v56 = CGRectUnion(*(CGRect *)a1, v68);
LABEL_36:
      *(double *)a1 = v56;
      *(void *)(a1 + 8) = v57;
      *(void *)(a1 + 16) = v58;
      *(void *)(a1 + 24) = v59;
      return;
    }
    if (v28) {
      return;
    }
    double v29 = sub_1000D6E2C(*(_DWORD *)(a1 + 92), (float64x2_t *)(a1 + 96), 1.0).f64[0];
    double v31 = v30;
    *(void *)&double v32 = *(_OWORD *)&sub_1000D6E2C(*(_DWORD *)(a1 + 160), (float64x2_t *)(a1 + 168), 0.0);
    double v34 = v33;
    double y = CGPointZero.y;
    if ((v29 != CGPointZero.x || v31 != y) && (v32 != CGPointZero.x || v34 != y))
    {
      double v38 = sub_100064680(v29, v31, v32);
      double v40 = sub_100064660(v38, v39);
      double v42 = v41;
      double v43 = -1.0 / sub_100064F08(v40, v41, v32, v34);
      if (v43 * v43 >= *(double *)(a1 + 48) * *(double *)(a1 + 48)) {
        return;
      }
      double v44 = sub_1000646A4(v40, v42, v43 * *(double *)(a1 + 32));
      double v45 = *(double *)(a1 + 168);
      double v46 = *(double *)(a1 + 176);
      double v47 = sub_100064698(v45, v46, v44);
      double v48 = sub_100065928(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v47);
      CGFloat v50 = v49;
      CGFloat v52 = v51;
      CGFloat v54 = v53;
      double v55 = sub_100064680(v45, v46, v44);
      double v56 = sub_100065928(v48, v50, v52, v54, v55);
      goto LABEL_36;
    }
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D4290);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101075E34();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D42B0);
    }
    double v63 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v63);
    }
    double v64 = +[NSString stringWithUTF8String:"void CRLPathBoundsApplierProcessSegment(CRLPathBoundsApplierState *, const CGPathElement *)"];
    double v65 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v64, v65, 472, 0, "Couldn't get a gradient for this join, but this should have been caught upstream by skipping no-op segments.");
  }
}

void sub_1000D6BA4(CGFloat *a1, uint64_t a2, float64x2_t *a3, double a4)
{
  switch(a2)
  {
    case 3:
      double v10 = sub_100064570(a3, a4);
LABEL_8:
      double v8 = v10;
      double v9 = v11;
      goto LABEL_19;
    case 2:
      double v10 = sub_100347D08(a3, a4);
      goto LABEL_8;
    case 1:
      if (a4 >= 0.5)
      {
        double v8 = a3[1].f64[0];
        double v9 = a3[1].f64[1];
      }
      else
      {
        double v8 = a3->f64[0];
        double v9 = a3->f64[1];
      }
LABEL_19:
      double v17 = sub_1000D6E2C(a2, a3, a4).f64[0];
      if (v17 != CGPointZero.x || v18 != CGPointZero.y)
      {
        double v20 = sub_100066394(0, v17, v18);
        double v22 = sub_1000646A4(v20, v21, a1[4]);
        double v23 = sub_100064698(v8, v9, v22);
        double v24 = sub_100065928(*a1, a1[1], a1[2], a1[3], v23);
        CGFloat v26 = v25;
        CGFloat v28 = v27;
        CGFloat v30 = v29;
        double v31 = sub_100064680(v8, v9, v22);
        *a1 = sub_100065928(v24, v26, v28, v30, v31);
        *((void *)a1 + 1) = v32;
        *((void *)a1 + 2) = v33;
        *((void *)a1 + 3) = v34;
      }
      return;
  }
  int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D42D0);
  }
  double v13 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101075EBC(v12, a2, v13);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D42F0);
  }
  double v14 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v14);
  }
  double v15 = +[NSString stringWithUTF8String:"void CRLGrowPathBoundsAtTFromTypeAndPoints(CRLPathBoundsApplierState *, CGFloat, CGPathElementType, CGPoint *)"];
  double v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 365, 0, "Invalid element type %d", a2);
}

float64x2_t sub_1000D6E2C(int a1, float64x2_t *a2, double a3)
{
  CGPoint v4 = CGPointZero;
  float64x2_t result = (float64x2_t)CGPointZero;
  CGPoint v22 = CGPointZero;
  switch(a1)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D4310);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101075F74();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D4330);
      }
      double v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v8);
      }
      double v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint gradientAtTFromTypeAndPoints(CGFloat, CGPathElementType, CGPoint *)", v22);
      double v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:209 isFatal:0 description:"path gradient can't handle moveTo element"];

      CGPoint v4 = (CGPoint)v23;
      float64x2_t result = v23;
      break;
    case 1:
    case 4:
      result.f64[0] = sub_100064680(a2[1].f64[0], a2[1].f64[1], a2->f64[0]);
      *(void *)&result.f64[1] = v7;
      goto LABEL_15;
    case 2:
      double v11 = sub_100407E48(a3, 0.0001, 0.9999);
      float64x2_t v12 = vmlaq_n_f64(vmulq_n_f64(vaddq_f64(a2[1], a2[1]), v11 * -2.0 + 1.0), vaddq_f64(*a2, *a2), v11 + -1.0);
      float64x2_t v13 = vaddq_f64(a2[2], a2[2]);
      goto LABEL_14;
    case 3:
      double v11 = sub_100407E48(a3, 0.0001, 0.9999);
      __asm
      {
        FMOV            V4.2D, #-3.0
        FMOV            V5.2D, #3.0
      }
      float64x2_t v12 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_f64(a2[1], _Q5), v11 * -4.0 + 1.0 + v11 * 3.0 * v11), vmulq_n_f64(vmulq_f64(*a2, _Q4), v11 + -1.0), v11 + -1.0), vmulq_n_f64(vmulq_f64(a2[2], _Q5), v11), v11 * -3.0 + 2.0);
      float64x2_t v13 = vmulq_n_f64(vmulq_f64(a2[3], _Q5), v11);
LABEL_14:
      float64x2_t result = vmlaq_n_f64(v12, v13, v11);
LABEL_15:
      CGPoint v4 = v22;
      break;
    default:
      break;
  }
  int32x2_t v20 = vmovn_s64(vceqq_f64(result, (float64x2_t)v4));
  if ((v20.i32[0] & v20.i32[1] & 1) == 0)
  {
    result.f64[0] = sub_100064660(result.f64[0], result.f64[1]);
    *(void *)&result.f64[1] = v21;
  }
  return result;
}

void sub_1000D70EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D7130(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D7174(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D71B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D71FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D7240(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_1000D7284(uint64_t a1, unsigned int *a2)
{
  CGPoint v4 = (__n128 *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 32);
  unsigned int v5 = *a2;
  if (*a2 != 4)
  {
    LODWORD(v6) = dword_101175398[v5];
    unint64_t v7 = (long long *)*((void *)a2 + 1);
    if ((int)v6 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v6;
    }
    double v8 = &v13;
    do
    {
      long long v9 = *v7++;
      *(_OWORD *)double v8 = v9;
      v8 += 2;
      --v6;
    }
    while (v6);
  }
  v11[1] = &v12;
  v11[0] = v5;
  (*(void (**)(void, void *))(a1 + 8))(*(void *)a1, v11);
  __n128 result = *(__n128 *)(*((void *)a2 + 1) + 16 * dword_101175398[*a2] - 16);
  *CGPoint v4 = result;
  ++*(void *)(a1 + 48);
  return result;
}

void sub_1000D7910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000D7970(void **a1, unint64_t a2)
{
  CGPoint v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100004E40();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)sub_100046F5C(v3, a2);
    unint64_t v7 = &v6[24 * v5];
    long long v9 = &v6[24 * v8];
    double v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1000D7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000D812C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D8320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D8344(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  long long v12 = (double *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v28 = a2[-2].n128_f64[1];
          double v27 = &a2[-2].n128_f64[1];
          if (v28 < *v12)
          {
            uint64_t v38 = *((void *)v12 + 2);
            long long v35 = *(_OWORD *)v12;
            long long v29 = *(_OWORD *)v27;
            void v12[2] = v27[2];
            *(_OWORD *)long long v12 = v29;
            *(_OWORD *)double v27 = v35;
            *((void *)v27 + 2) = v38;
          }
          break;
        case 3uLL:
          sub_1000D8840((long long *)v12, (long long *)(v12 + 3), (long long *)&a2[-2].n128_i8[8]);
          break;
        case 4uLL:
          sub_1000D8CF8((uint64_t)v12, (uint64_t)(v12 + 3), (uint64_t)(v12 + 6), &a2[-2].n128_u64[1]);
          break;
        case 5uLL:
          sub_1000D8DCC((__n128 *)v12, (__n128 *)(v12 + 3), (__n128 *)v12 + 3, (unint64_t *)v12 + 9, &a2[-2].n128_u64[1]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (double *)a2)
      {
        sub_1000D8EDC((uint64_t)v12, a2, a2, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_1000D8840((long long *)v12, (long long *)&v12[3 * (v16 >> 1)], (long long *)&a2[-2].n128_i8[8]);
      uint64_t v19 = 3 * v17;
      int32x2_t v20 = (long long *)&v12[3 * v17 - 3];
      sub_1000D8840((long long *)(v12 + 3), v20, (long long *)&a2[-3]);
      unint64_t v21 = (long long *)(v12 + 6);
      CGPoint v22 = (long long *)&v12[v19 + 3];
      sub_1000D8840(v21, v22, (long long *)&a2[-5].n128_i8[8]);
      sub_1000D8840(v20, (long long *)v18, v22);
      uint64_t v37 = *(void *)(a1 + 16);
      long long v34 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(double *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      *((void *)v18 + 2) = v37;
      *(_OWORD *)double v18 = v34;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1000D8840((long long *)&v12[3 * (v16 >> 1)], (long long *)v12, (long long *)&a2[-2].n128_i8[8]);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(double *)(a1 - 24) >= *(double *)a1)
    {
      long long v12 = sub_1000D894C((double *)a1, a2->n128_f64);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v24 = sub_1000D8A34(a1, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_1000D8B1C(a1, v24);
    long long v12 = (double *)(v24 + 24);
    if (sub_1000D8B1C(v24 + 24, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (__n128 *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      sub_1000D8344(a1, v24, a3, -v14, a5 & 1);
      long long v12 = (double *)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1000D87A0((uint64_t)v12, (uint64_t)a2);
  }
  else if (v12 != (double *)a2)
  {
    CGFloat v30 = v12 + 3;
    while (v30 != (double *)a2)
    {
      uint64_t v31 = (uint64_t)v30;
      double v32 = *(double *)(a1 + 24);
      if (v32 < *(double *)a1)
      {
        long long v36 = *(_OWORD *)(a1 + 32);
        do
        {
          *(_OWORD *)CGFloat v30 = *(_OWORD *)(v30 - 3);
          v30[2] = *(v30 - 1);
          double v33 = *(v30 - 6);
          v30 -= 3;
        }
        while (v32 < v33);
        *CGFloat v30 = v32;
        *(_OWORD *)(v30 + 1) = v36;
      }
      CGFloat v30 = (double *)(v31 + 24);
      a1 = v31;
    }
  }
}

  long long v12 = (long long *)&a2[-4];
  uint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    unint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = ((char *)a2 - (char *)v13) >> 6;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-4], v13))
          {
            long long v34 = v13[2];
            long long v36 = v13[3];
            CGFloat v30 = *v13;
            double v32 = v13[1];
            BOOL v26 = *v12;
            double v27 = (__int128)a2[-3];
            double v28 = (__int128)a2[-1];
            _OWORD v13[2] = (__int128)a2[-2];
            v13[3] = v28;
            *uint64_t v13 = v26;
            v13[1] = v27;
            *long long v12 = v30;
            a2[-3] = (__n128)v32;
            a2[-2] = (__n128)v34;
            a2[-1] = (__n128)v36;
          }
          break;
        case 3uLL:
          sub_10015FCD0(v13, v13 + 4, (long long *)&a2[-4], a3);
          break;
        case 4uLL:
          sub_1001602EC((uint64_t)v13, v13 + 4, v13 + 8, (long long *)&a2[-4], a3);
          break;
        case 5uLL:
          sub_1001603D8((uint64_t)v13, v13 + 4, v13 + 8, v13 + 12, (long long *)&a2[-4], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 1535) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        sub_100160504((uint64_t)v13, a2, a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
      }
      return;
    }
    double v18 = v17 >> 1;
    uint64_t v19 = &v13[4 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x2000)
    {
      sub_10015FCD0(v13, &v13[4 * (v17 >> 1)], (long long *)&a2[-4], a3);
      sub_10015FCD0(v13 + 4, v19 - 4, (long long *)&a2[-8], a3);
      sub_10015FCD0(v13 + 8, &v13[4 * v18 + 4], (long long *)&a2[-12], a3);
      sub_10015FCD0(v19 - 4, v19, &v13[4 * v18 + 4], a3);
      double v33 = v13[2];
      long long v35 = v13[3];
      long long v29 = *v13;
      uint64_t v31 = v13[1];
      int32x2_t v20 = *v19;
      unint64_t v21 = v19[1];
      CGPoint v22 = v19[3];
      _OWORD v13[2] = v19[2];
      v13[3] = v22;
      *uint64_t v13 = v20;
      v13[1] = v21;
      v19[2] = v33;
      long long v19[3] = v35;
      void *v19 = v29;
      v19[1] = v31;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10015FCD0(&v13[4 * (v17 >> 1)], v13, (long long *)&a2[-4], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 4, v13) & 1) == 0)
    {
      uint64_t v13 = sub_10015FE24(v13, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v23 = sub_10015FF84(v13, (long long *)a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    char v25 = sub_1001600E4(v13, v23, a3);
    uint64_t v13 = v23 + 4;
    if (sub_1001600E4(v23 + 4, (long long *)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v25)
    {
LABEL_16:
      sub_10015F70C(a1, v23, a3, -v15, a5 & 1);
      uint64_t v13 = v23 + 4;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10015FB14((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    sub_10015FC00((uint64_t)v13, a2, a3);
  }
}

  double v11 = a1;
LABEL_2:
  long long v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    uint64_t v15 = (a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v21 = *((void *)a2 - 2);
          CGPoint v22 = *((void *)a2 - 1);
          long long v23 = a2 - 16;
          if ((*a3)(v21, v22, *(void *)v11, *((void *)v11 + 1)))
          {
            char v25 = *(_OWORD *)v11;
            *(_OWORD *)double v11 = *(_OWORD *)v23;
            *(_OWORD *)long long v23 = v25;
          }
          break;
        case 3uLL:
          sub_1001C8E14(v11, (void *)v11 + 2, (void *)a2 - 2, a3);
          break;
        case 4uLL:
          sub_1001C935C(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)a2 - 2, a3);
          break;
        case 5uLL:
          sub_1001C9418(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)v11 + 6, (void *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_1001C94FC(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[16 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1001C8E14(v11, &v11[16 * (v15 >> 1)], (void *)a2 - 2, a3);
      sub_1001C8E14((void *)v11 + 2, (void *)v17 - 2, (void *)a2 - 4, a3);
      sub_1001C8E14((void *)v11 + 4, &v11[16 * v16 + 16], (void *)a2 - 6, a3);
      sub_1001C8E14((void *)v17 - 2, v17, &v11[16 * v16 + 16], a3);
      uint64_t v24 = *(_OWORD *)v11;
      *(_OWORD *)double v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v24;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1001C8E14(&v11[16 * (v15 >> 1)], v11, (void *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(*((void *)v11 - 2), *((void *)v11 - 1), *(void *)v11, *((void *)v11 + 1)) & 1) == 0)
    {
      double v11 = (char *)sub_1001C8F14(v11, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    double v18 = (char *)sub_1001C904C((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    int32x2_t v20 = sub_1001C9180(v11, v18, a3);
    double v11 = v18 + 16;
    if (sub_1001C9180(v18 + 16, a2, a3))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    long long v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      sub_1001C88B4(a1, v18, a3, -v13, a5 & 1);
      double v11 = v18 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1001C8C8C((uint64_t)v11, a2, a3);
  }
  else
  {
    sub_1001C8D64((uint64_t)v11, a2, a3);
  }
}

  double v11 = (void **)a2 - 3;
  long long v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v28 = *((void *)a2 - 2);
          if (v28) {
            long long v29 = *((void *)v12 + 1) == 0;
          }
          else {
            long long v29 = 1;
          }
          if (v29)
          {
            if (!v28) {
              return;
            }
          }
          else if (**(void **)v12 <= **v11)
          {
            return;
          }
          long long v34 = *((void *)v12 + 2);
          double v32 = *v12;
          CGFloat v30 = *(_OWORD *)v11;
          *((unsigned char *)v12 + 16) = *((unsigned char *)a2 - 8);
          *long long v12 = v30;
          *(_OWORD *)double v11 = v32;
          *((unsigned char *)a2 - 8) = v34;
          break;
        case 3uLL:
          sub_10041A0C0(v12, (uint64_t **)v12 + 3, (long long *)((char *)a2 - 24));
          return;
        case 4uLL:
          sub_10041A80C((uint64_t)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (uint64_t)a2 - 24);
          return;
        case 5uLL:
          sub_10041A944((__n128 *)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (uint64_t)v12 + 72, (uint64_t)a2 - 24);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_10041AAD8((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = (uint64_t **)v12 + 3 * (v16 >> 1);
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_10041A0C0(v12, (uint64_t **)v12 + 3 * (v16 >> 1), (long long *)((char *)a2 - 24));
      uint64_t v19 = 3 * v17;
      int32x2_t v20 = (uint64_t **)v12 + 3 * v17 - 3;
      sub_10041A0C0((long long *)((char *)v12 + 24), v20, a2 - 3);
      unint64_t v21 = v12 + 3;
      CGPoint v22 = (uint64_t **)v12 + v19 + 3;
      sub_10041A0C0(v21, v22, (long long *)((char *)a2 - 72));
      sub_10041A0C0((long long *)v20, v18, (long long *)v22);
      double v33 = *(void *)(a1 + 16);
      uint64_t v31 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)v18 + 16);
      *(_OWORD *)a1 = v23;
      *((unsigned char *)v18 + 16) = v33;
      *(_OWORD *)double v18 = v31;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_10041A0C0((long long *)((char *)v12 + 24 * (v16 >> 1)), (uint64_t **)v12, (long long *)((char *)a2 - 24));
      if (a5) {
        goto LABEL_17;
      }
    }
    uint64_t v24 = *(void *)(a1 - 16);
    if (v24 && *(void *)(a1 + 8))
    {
      if (**(void **)a1 <= **(void **)(a1 - 24)) {
        goto LABEL_21;
      }
    }
    else if (!v24)
    {
LABEL_21:
      long long v12 = sub_10041A264(a1, a2);
      goto LABEL_22;
    }
LABEL_17:
    char v25 = sub_10041A408(a1, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_20;
    }
    double v27 = sub_10041A5B4(a1, v25);
    long long v12 = (long long *)(v25 + 24);
    if (sub_10041A5B4(v25 + 24, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (long long *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v27)
    {
LABEL_20:
      sub_100419AD8(a1, v25, a3, -v14, a5 & 1);
      long long v12 = (long long *)(v25 + 24);
LABEL_22:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_100419F38((uint64_t)v12, (uint64_t)a2);
  }
  else
  {
    sub_10041A020((void **)v12, (void **)a2);
  }
}

  long long v12 = (long long *)&a2[-4];
  uint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    unint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = ((char *)a2 - (char *)v13) >> 6;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-4], v13))
          {
            long long v34 = v13[2];
            long long v36 = v13[3];
            CGFloat v30 = *v13;
            double v32 = v13[1];
            BOOL v26 = *v12;
            double v27 = (__int128)a2[-3];
            double v28 = (__int128)a2[-1];
            _OWORD v13[2] = (__int128)a2[-2];
            v13[3] = v28;
            *uint64_t v13 = v26;
            v13[1] = v27;
            *long long v12 = v30;
            a2[-3] = (__n128)v32;
            a2[-2] = (__n128)v34;
            a2[-1] = (__n128)v36;
          }
          break;
        case 3uLL:
          sub_10015FCD0(v13, v13 + 4, (long long *)&a2[-4], a3);
          break;
        case 4uLL:
          sub_1001602EC((uint64_t)v13, v13 + 4, v13 + 8, (long long *)&a2[-4], a3);
          break;
        case 5uLL:
          sub_1001603D8((uint64_t)v13, v13 + 4, v13 + 8, v13 + 12, (long long *)&a2[-4], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 1535) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        sub_100160504((uint64_t)v13, a2, a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
      }
      return;
    }
    double v18 = v17 >> 1;
    uint64_t v19 = &v13[4 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x2000)
    {
      sub_10015FCD0(v13, &v13[4 * (v17 >> 1)], (long long *)&a2[-4], a3);
      sub_10015FCD0(v13 + 4, v19 - 4, (long long *)&a2[-8], a3);
      sub_10015FCD0(v13 + 8, &v13[4 * v18 + 4], (long long *)&a2[-12], a3);
      sub_10015FCD0(v19 - 4, v19, &v13[4 * v18 + 4], a3);
      double v33 = v13[2];
      long long v35 = v13[3];
      long long v29 = *v13;
      uint64_t v31 = v13[1];
      int32x2_t v20 = *v19;
      unint64_t v21 = v19[1];
      CGPoint v22 = v19[3];
      _OWORD v13[2] = v19[2];
      v13[3] = v22;
      *uint64_t v13 = v20;
      v13[1] = v21;
      v19[2] = v33;
      long long v19[3] = v35;
      void *v19 = v29;
      v19[1] = v31;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10015FCD0(&v13[4 * (v17 >> 1)], v13, (long long *)&a2[-4], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 4, v13) & 1) == 0)
    {
      uint64_t v13 = sub_10015FE24(v13, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v23 = sub_10015FF84(v13, (long long *)a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    char v25 = sub_10041B3E4(v13, v23, a3);
    uint64_t v13 = v23 + 4;
    if (sub_10041B3E4(v23 + 4, (long long *)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v25)
    {
LABEL_16:
      sub_10041AFDC(a1, v23, a3, -v15, a5 & 1);
      uint64_t v13 = v23 + 4;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10015FB14((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    sub_10015FC00((uint64_t)v13, a2, a3);
  }
}

uint64_t sub_1000D87A0(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        double v6 = *(double *)(v4 + 24);
        if (v6 < *(double *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(void *)(v8 + 40) = *(void *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(double *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        uint64_t v2 = v5 + 24;
        v3 += 24;
        uint64_t v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_1000D8840(long long *a1, long long *a2, long long *a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    if (v4 < v3)
    {
      uint64_t v5 = *((void *)a1 + 2);
      long long v6 = *a1;
      uint64_t v7 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v7;
      *a3 = v6;
      *((void *)a3 + 2) = v5;
      return 1;
    }
    uint64_t v14 = *((void *)a1 + 2);
    long long v15 = *a1;
    uint64_t v16 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v16;
    *a2 = v15;
    *((void *)a2 + 2) = v14;
    if (*(double *)a3 >= *(double *)a2) {
      return 1;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *((void *)a2 + 2);
    long long v9 = *a2;
    uint64_t v10 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v10;
    *a3 = v9;
    *((void *)a3 + 2) = v8;
    if (*(double *)a2 >= *(double *)a1) {
      return 1;
    }
    uint64_t v11 = *((void *)a1 + 2);
    long long v12 = *a1;
    uint64_t v13 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v13;
    *a2 = v12;
    *((void *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

double *sub_1000D894C(double *a1, double *a2)
{
  double v2 = *a1;
  if (*a1 >= *(a2 - 3))
  {
    uint64_t v5 = (long long *)(a1 + 3);
    do
    {
      double v3 = (double *)v5;
      if (v5 >= (long long *)a2) {
        break;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    double v3 = a1;
    do
    {
      double v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      double v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    uint64_t v14 = *((void *)v3 + 2);
    long long v13 = *(_OWORD *)v3;
    long long v7 = *(_OWORD *)a2;
    void v3[2] = a2[2];
    *(_OWORD *)double v3 = v7;
    *((void *)a2 + 2) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      double v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      double v9 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    long long v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

uint64_t sub_1000D8A34(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  do
  {
    double v4 = *(double *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  unint64_t v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      double v7 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      double v6 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  double v8 = (long long *)(a1 + v2);
  if (v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *v8;
      uint64_t v11 = *((void *)v8 + 2);
      uint64_t v12 = *(void *)(v9 + 16);
      long long *v8 = *(_OWORD *)v9;
      *((void *)v8 + 2) = v12;
      *(void *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        double v13 = *((double *)v8 + 3);
        double v8 = (long long *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        double v14 = *(double *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((long long *)((char *)v8 - 24) != (long long *)a1)
  {
    long long v15 = *(long long *)((char *)v8 - 24);
    *(void *)(a1 + 16) = *((void *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((double *)v8 - 3) = v3;
  *(v8 - 1) = v17;
  return (uint64_t)v8 - 24;
}

BOOL sub_1000D8B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = (long long *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *double v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1000D8840((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1000D8CF8(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_1000D8DCC((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (unint64_t *)(a1 + 72), (unint64_t *)(a2 - 24));
      return 1;
    default:
      long long v10 = (double *)(a1 + 48);
      sub_1000D8840((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    double v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(double *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1000D8CF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  sub_1000D8840((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    unint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    unint64_t v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_1000D8DCC(__n128 *a1, __n128 *a2, __n128 *a3, unint64_t *a4, unint64_t *a5)
{
  sub_1000D8CF8((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    unint64_t v11 = a4[2];
    __n128 result = *(__n128 *)a4;
    unint64_t v12 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v12;
    *(__n128 *)a5 = result;
    a5[2] = v11;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < a3->n128_f64[0])
    {
      unint64_t v13 = a3[1].n128_u64[0];
      __n128 result = *a3;
      unint64_t v14 = a4[2];
      *a3 = *(__n128 *)a4;
      a3[1].n128_u64[0] = v14;
      *(__n128 *)a4 = result;
      a4[2] = v13;
      result.n128_u64[0] = a3->n128_u64[0];
      if (a3->n128_f64[0] < a2->n128_f64[0])
      {
        unint64_t v15 = a2[1].n128_u64[0];
        __n128 result = *a2;
        unint64_t v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u64[0] = a2->n128_u64[0];
        if (a2->n128_f64[0] < a1->n128_f64[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1000D8EDC(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      unint64_t v13 = (long long *)(a1 + 24 * v11);
      do
      {
        a5 = sub_1000D90F8(a1, a5, a4, v10, v13);
        unint64_t v13 = (long long *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    unint64_t v14 = v7;
    if (v7 != a3)
    {
      unint64_t v15 = v7;
      do
      {
        if (v15->n128_f64[0] < *(double *)a1)
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = *(void *)(a1 + 16);
          __n128 *v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          sub_1000D90F8(a1, v17, a4, v10, (long long *)a1);
        }
        unint64_t v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      unint64_t v14 = a3;
    }
    if (v9 >= 25)
    {
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        uint64_t v20 = 0;
        __n128 v29 = *(__n128 *)a1;
        unint64_t v30 = *(void *)(a1 + 16);
        uint64_t v21 = a1;
        do
        {
          uint64_t v22 = v21;
          v21 += 24 * v20 + 24;
          uint64_t v23 = 2 * v20;
          uint64_t v20 = (2 * v20) | 1;
          int64_t v24 = v23 + 2;
          if (v24 < v19 && *(double *)v21 < *(double *)(v21 + 24))
          {
            v21 += 24;
            uint64_t v20 = v24;
          }
          long long v25 = *(_OWORD *)v21;
          *(void *)(v22 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        uint64_t v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(void *)(v21 + 16) = v30;
          *(__n128 *)uint64_t v21 = v29;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v26;
          *uint64_t v7 = v29;
          v7[1].n128_u64[0] = v30;
          sub_1000D91F8(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_1000D90F8(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, long long *a5)
{
  if (a4 >= 2)
  {
    int64_t v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      uint64_t v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      uint64_t v7 = (long long *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(double *)v7 < *((double *)v7 + 3))
      {
        uint64_t v7 = (long long *)((char *)v7 + 24);
        uint64_t v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u64[0] = *(void *)a5;
      if (*(double *)v7 >= *(double *)a5)
      {
        __n128 v12 = *(__n128 *)((char *)a5 + 8);
        do
        {
          long long v8 = a5;
          a5 = v7;
          long long v9 = *v7;
          *((void *)v8 + 2) = *((void *)v7 + 2);
          long long *v8 = v9;
          if (v5 < v6) {
            break;
          }
          uint64_t v10 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (long long *)(a1 + 24 * v6);
          uint64_t v11 = v10 + 2;
          if (v11 < a4 && *(double *)v7 < *((double *)v7 + 3))
          {
            uint64_t v7 = (long long *)((char *)v7 + 24);
            uint64_t v6 = v11;
          }
        }
        while (*(double *)v7 >= result.n128_f64[0]);
        *(void *)a5 = result.n128_u64[0];
        __n128 result = v12;
        *(long long *)((char *)a5 + 8) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 sub_1000D91F8(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  if (a5 >= 2)
  {
    unint64_t v5 = (unint64_t)(a5 - 2) >> 1;
    uint64_t v6 = (long long *)(a1 + 24 * v5);
    uint64_t v7 = (long long *)(a2 - 24);
    result.n128_u64[0] = *(void *)(a2 - 24);
    if (*(double *)v6 < result.n128_f64[0])
    {
      __n128 v10 = *(__n128 *)(a2 - 16);
      do
      {
        long long v8 = v7;
        uint64_t v7 = v6;
        long long v9 = *v6;
        *((void *)v8 + 2) = *((void *)v6 + 2);
        long long *v8 = v9;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (long long *)(a1 + 24 * v5);
      }
      while (*(double *)v6 < result.n128_f64[0]);
      *(void *)uint64_t v7 = result.n128_u64[0];
      __n128 result = v10;
      *(long long *)((char *)v7 + 8) = (__int128)v10;
    }
  }
  return result;
}

void sub_1000D9474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D94B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D9CA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000D9CEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000D9FC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 16))();
  }
  else {
    return 1;
  }
}

uint64_t sub_1000D9FE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000DA9D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DAA1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000DBDA0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 378) = 0;
  return result;
}

void sub_1000DBF50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DBF94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DCFEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DD030(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DD074(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100455AA8([*(id *)(a1 + 32) p_bitmapContextOptionsForDrawingStroke:*(void *)(a1 + 40)] | 8u, *(double *)(a1 + 72), *(double *)(a1 + 80));
  CGContextSaveGState(v4);
  long long v5 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&transform.a = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&transform.c = v5;
  *(_OWORD *)&transform.tCGFloat x = *(_OWORD *)(a1 + 120);
  CGContextConcatCTM(v4, &transform);
  objc_msgSend(*(id *)(a1 + 40), "paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrder:withLayoutOptions:", objc_msgSend(*(id *)(a1 + 48), "CGPath"), 0, v4, 0, 0, 0, *(void *)(a1 + 56));
  CGContextRestoreGState(v4);
  CGImageRef Image = CGBitmapContextCreateImage(v4);
  CGContextRelease(v4);
  if (a2)
  {
    uint64_t v7 = (objc_class *)objc_opt_class();
    long long v8 = sub_10024715C(v7, *(void **)(a1 + 64));
    [v8 setContentsFromBackground:Image];
    if (Image) {
      CFRelease(Image);
    }
  }
  else
  {
    [*(id *)(a1 + 64) setContents:Image];
    if (Image) {
      CFRelease(Image);
    }
  }
}

uint64_t sub_1000DD18C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000DD1A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DD1E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DEBC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v7 = sub_1000DEC90;
  long long v8 = &unk_1014CBE78;
  uint64_t v4 = *(void *)(a1 + 32);
  id v9 = v3;
  uint64_t v10 = v4;
  id v5 = v3;
  if (+[NSThread isMainThread]) {
    v7((uint64_t)v6);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
  }
}

void sub_1000DEC90(uint64_t a1)
{
  uint64_t v2 = (objc_class *)objc_opt_class();
  id v3 = [*(id *)(a1 + 32) firstObject];
  sub_10024715C(v2, v3);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 40) p_forDragAndDropSetColor:v6];
  uint64_t v4 = [*(id *)(a1 + 40) interactiveCanvasController];
  id v5 = [v4 editingCoordinator];
  [v5 resumeCollaborationWithReason:@"CRLShapeDragAndDrop"];
}

void sub_1000DF0B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DF0FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DF140(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000DF184(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E0630(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E0674(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E1570(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E15B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E15F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E163C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E1CCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E1D10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E2008(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E204C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E2B70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E2BB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E316C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E31B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E3480(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E34C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E374C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E3790(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E37D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 needsDownload])
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    long long v8 = sub_1000E38D0;
    id v9 = &unk_1014D4810;
    objc_copyWeak(&v10, &location);
    [v4 addDownloadObserverWithIdentifier:v5 options:2 handler:&v6];
    [v4 downloadIfNeeded:v6, v7, v8, v9];
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);
  }
}

void sub_1000E38B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E38D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained p_handleAssetPreparationCompletion];
}

void sub_1000E4A68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E4AAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E4AF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E4B34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1000E5034(id a1)
{
  return a1;
}

void sub_1000E5068(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

void sub_1000E54D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000E551C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1000E57B8(uint64_t a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t sub_1000E57D0(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

void sub_1000E57E8(CGContextRef c, double a2)
{
  double v2 = a2;
  if (a2 <= 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D48F0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101076B40();
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101076AC0();
    }
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void _SFRSetLineWidth(CGContextRef, CGFloat)"), +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath.m"], 199, 0, "lineWidth (%f) should be greater than zero.", *(void *)&v2);
    CGContextGetCTM(&v4, c);
    CGAffineTransformInvert(&v5, &v4);
    double v2 = v5.a + v5.c;
  }
  CGContextSetLineWidth(c, v2);
}

void sub_1000E5948(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E5974(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void *sub_1000E5CB4(void *a1, const char *a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      a1 = [a1 moveToPoint:**((double **)a2 + 1), *(double *)(*((void *)a2 + 1) + 8)];
      break;
    case 1:
      a1 = [a1 lineToPoint:**((double **)a2 + 1), *(double *)(*((void *)a2 + 1) + 8)];
      break;
    case 2:
      a1 = [a1 curveToPoint:*(double *)(*((void *)a2 + 1) + 16) controlPoint:*(double *)(*((void *)a2 + 1) + 24) *(double *)(*((void *)a2 + 1) + 1) *(double *)(*((void *)a2 + 1) + 8)];
      break;
    case 3:
      double v2 = (double *)*((void *)a2 + 1);
      a1 = [a1 curveToPoint:v2[4] controlPoint1:v2[5] controlPoint2:v2[1] controlPoint2:v2[2] controlPoint2:v2[3]];
      break;
    case 4:
      a1 = [a1 closePath];
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1000E5D38(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E5D64(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6A60(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6A8C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6AB8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6AE4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6B10(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6B3C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6B68(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6B94(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6D24(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6D50(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6F2C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E6F58(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E711C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E7148(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E7718(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E7744(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

id sub_1000E7D20(uint64_t a1)
{
  return [*(id *)(a1 + 32) lineToPoint:];
}

void sub_1000E9030(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E905C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E929C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E92C8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E96DC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E9708(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E99FC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E9A28(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E9D4C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000E9D78(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA0DC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA108(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA134(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA160(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA6A8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA6D4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA700(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA72C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA758(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EA784(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EAB9C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EABC8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EAE74(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EAEA0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EB53C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EB568(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EB594(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EB5C0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EBF30(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EBF5C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EBF88(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EBFB4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EC6C4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EC6F0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EC71C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000EC748(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ECBE0(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v5 = *a2;
  id v6 = (const char *)(a1 + v5);
  if (*(unsigned char *)(a1 + v5) == 32)
  {
    do
    {
      uint64_t v7 = a1 + v5++;
      *a2 = v5;
    }
    while (*(unsigned char *)(v7 + 1) == 32);
    id v6 = (const char *)(a1 + v5);
  }
  long long v8 = 0;
  strtod(v6, &v8);
  if (v6 == v8) {
    *a3 = 1;
  }
  else {
    *a2 += v8 - v6;
  }
}

void sub_1000ECC7C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ECCA8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ECCD4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ECD00(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED05C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED088(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED0B4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED0E0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED418(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED444(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED600(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED62C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1000ED84C(uint64_t a1, float *a2)
{
  uint64_t v4 = 0;
  double v5 = *(double *)a1;
  double v6 = *(double *)(a1 + 8);
  float v7 = 0.0;
  double v8 = v6;
  double v9 = *(double *)a1;
  do
  {
    double v10 = *(double *)(a1 + v4 + 16);
    double v11 = *(double *)(a1 + v4 + 24);
    float v7 = sub_1000653B4(v9, v8, v10, v11) + v7;
    v4 += 16;
    double v8 = v11;
    double v9 = v10;
  }
  while (v4 != 48);
  float v12 = sub_1000653B4(v5, v6, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if ((float)(v7 - v12) <= 0.1)
  {
    *a2 = *a2 + v7;
  }
  else
  {
    long long v13 = *(_OWORD *)(a1 + 16);
    v35[0] = *(_OWORD *)a1;
    v35[1] = v13;
    long long v14 = *(_OWORD *)(a1 + 48);
    v35[2] = *(_OWORD *)(a1 + 32);
    v35[3] = v14;
    uint64_t v15 = 3;
    uint64_t v16 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    uint64_t v22 = v35;
    do
    {
      uint64_t v23 = 0;
      float64x2_t v24 = (float64x2_t)v35[4 * v16 - 4];
      do
      {
        long long v25 = (float64x2_t *)&v22[v23];
        float64x2_t v26 = v25[1];
        v25[4] = vmlaq_f64(vmulq_f64(v26, _Q0), _Q0, v24);
        ++v23;
        float64x2_t v24 = v26;
      }
      while (v15 != v23);
      ++v16;
      --v15;
      v22 += 4;
    }
    while (v16 != 4);
    uint64_t v27 = 0;
    double v28 = v35;
    do
    {
      long long v29 = *v28;
      v28 += 4;
      *(_OWORD *)&v34[v27] = v29;
      v27 += 16;
    }
    while (v27 != 64);
    unint64_t v30 = v33;
    uint64_t v31 = 3;
    uint64_t v32 = 12;
    do
    {
      *v30++ = v35[v32];
      --v31;
      v32 -= 3;
    }
    while (v31 != -1);
    sub_1000ED84C(v34, a2);
    sub_1000ED84C(v33, a2);
  }
}

void sub_1000EDA94(id a1)
{
  size_t size = 0;
  sysctlbyname("hw.machine", 0, &size, 0, 0);
  uint64_t v1 = malloc_type_malloc(size, 0xF2D9B89FuLL);
  sysctlbyname("hw.machine", v1, &size, 0, 0);
  id v2 = [objc_alloc((Class)NSString) initWithUTF8String:v1];
  free(v1);
  objc_storeStrong((id *)&qword_1016A9088, v2);
  if (!qword_1016A9088)
  {
    int v3 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D51B8);
    }
    uint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101077ED8(v3, v4);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D51D8);
    }
    double v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066770(v5, v3);
    }
    double v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[UIDevice(CRLAdditions) crl_platformString]_block_invoke");
    float v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/UIDevice_CRLAdditions.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 46, 0, "invalid nil value for '%{public}s'", "s_platformString");
  }
}

void sub_1000EDC78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EDCBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1000EE810(id a1, CAFilter *a2)
{
  id v2 = [(CAFilter *)a2 name];
  char v3 = [v2 isEqualToString:@"CRLCALayerAdditionsAXDoubleInvertFilterKey"] ^ 1;

  return v3;
}

id sub_1000EE854()
{
  uint64_t v0 = +[CAFilter filterWithType:kCAFilterColorInvert];
  [v0 setName:@"CRLCALayerAdditionsAXDoubleInvertFilterKey"];
  [v0 setAccessibility:1];

  return v0;
}

void sub_1000EEB68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EEBAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF010(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF098(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF0DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF794(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF7D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF81C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF860(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF8A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EF8E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000EFD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EFD80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000EFD90(uint64_t a1)
{
}

void sub_1000EFD98(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000EFDF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1000F0050(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F0094(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F076C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F07B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F0F88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F0FCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1000F1420(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  return [(CRLBoardItem *)a2 requiresAdditionalBoardItemsForCopyImaging];
}

void sub_1000F1428(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F146C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F1FD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F201C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F2880(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F28C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F2BFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F2C40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F2F64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F2FA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F34D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F3D48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3D8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3DD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3E14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3E58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3E9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F3EE0(uint64_t a1, void *a2)
{
  id v6 = [a2 invertedObjectUUIDMap];
  id v3 = [v6 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  double v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000F4E9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F4EE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F5A30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F5A74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F5AB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F5AFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F6000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000F6024(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
}

void sub_1000F6294(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F62D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F66BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F6700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F6744(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F6788(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1000F6834(id a1, NSString *a2)
{
  return ![(NSString *)a2 hasPrefix:@"dyn."];
}

uint64_t sub_1000F6F6C(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t result = sub_100064374(a3, a4, a1, a2, a5, a6);
  if (result)
  {
    if (sub_100064084(a1, a2, a3, a4) || sub_100064084(a1, a2, a5, a6))
    {
      return 1;
    }
    else
    {
      double v16 = sub_100064044(a3, a4, a5);
      return sub_1000652B0(a1, a2, v16, v13, v14, v15);
    }
  }
  return result;
}

void sub_1000F7334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F772C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7C2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F7C70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F7D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F803C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F8100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F81C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F83A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F86CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F8718(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F875C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F8A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F8C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F8C98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F8CDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F8FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_1000F902C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000F9070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_1000F90B4(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1000F90D8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1000F90F0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a2 != 3)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 8);
    float v7 = (double *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      double v10 = (double *)v6[6];
      uint64_t v11 = ((char *)v7 - (char *)v10) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        sub_100004E40();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        double v15 = (char *)sub_10001EAB0((uint64_t)(v6 + 8), v14);
        double v10 = (double *)v6[6];
        float v7 = (double *)v6[7];
      }
      else
      {
        double v15 = 0;
      }
      double v16 = (double *)&v15[16 * v11];
      __n128 v17 = &v15[16 * v14];
      *double v16 = a3;
      v16[1] = a4;
      double v9 = v16 + 2;
      if (v7 != v10)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 2;
          v7 -= 2;
        }
        while (v7 != v10);
        double v10 = (double *)v6[6];
      }
      v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *float v7 = a3;
      v7[1] = a4;
      double v9 = v7 + 2;
    }
    v6[7] = v9;
  }
}

void sub_1000F963C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000FA5B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA5FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA684(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA6C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA70C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA750(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA794(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA7D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FA81C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FAAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FAD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB49C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB4E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB524(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB568(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB5AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB5F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FB6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FB924(double *a1, double a2, double a3)
{
  if (*(unsigned char *)(*(void *)(*((void *)a1 + 5) + 8) + 24))
  {
    uint64_t v4 = (void *)*((void *)a1 + 4);
    double v5 = a1[6];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1000FB9F4;
    void v6[3] = &unk_1014D5C98;
    *(double *)&void v6[4] = a1[7];
    if (v4)
    {
      [v4 closestHitsTo:v6 withSearchThreshold:a2 passingTest:a3 v5];
      uint64_t v4 = v7;
      if (v7 != v8)
      {
        if (!v7) {
          return;
        }
        goto LABEL_5;
      }
    }
    else
    {
      float v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    *(unsigned char *)(*(void *)(*((void *)a1 + 5) + 8) + 24) = 0;
    if (!v4) {
      return;
    }
LABEL_5:
    unint64_t v8 = v4;
    operator delete(v4);
  }
}

BOOL sub_1000FB9F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) != a2;
}

void sub_1000FBA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FC684(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC6C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC70C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC750(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC794(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC7D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC81C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC860(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC8A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FC8E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FCA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FCD44(_Unwind_Exception *exception_object)
{
}

void sub_1000FD1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FD1FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FD240(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FD284(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FD2C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FD7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FD7EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FD830(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FDF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FDFA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FDFEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FE030(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FE074(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FE998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FEB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF3C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF40C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF450(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF4D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF7E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1000FF82C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100100684(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) columnRectForRange:*(void *)(a1 + 48) *(void *)(a1 + 56)];
  id v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1001007A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001007C0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) glyphRectForRange:*(void *)(a1 + 48) includingLabel:*(void *)(a1 + 56)];
  id v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1001008C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001008DC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) rangeOfLineFragmentAtIndex:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = result;
  *(void *)(v3 + 40) = v4;
  return result;
}

void sub_1001009CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1001009E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) lineIndexForCharIndex:*(void *)(a1 + 48) eol:*(unsigned __int8 *)(a1 + 56)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100100FC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

__n128 sub_100100FE8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 geometry];
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 transform];
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
  }
  uint64_t v5 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  v5[2] = v7;
  _OWORD v5[3] = v8;
  v5[4] = v9;

  return result;
}

void sub_100101318(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010135C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010157C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001015C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001017D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010181C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102090(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001020D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001022B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001022F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001024A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001024EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010299C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001029E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102A24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100102A68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained p_setTimeValuesWithoutScrubbing];
}

void sub_100102AA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102AEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102D64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102DA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100102DEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100103A38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100103A7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100103F40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100103F84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010430C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100104350(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001044D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100104518(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100104BD0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) p_strokeColorForStyle:*(void *)(*(void *)(a1 + 32) + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v2;

  id v5 = [*(id *)(a1 + 32) layer];
  [v5 setStrokeColor:[*(id *)(*(void *)(a1 + 32) + 8) CGColor]];
}

void sub_100104FB0(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLWPFallbackFontList);
  uint64_t v2 = (void *)qword_1016A90A8;
  qword_1016A90A8 = (uint64_t)v1;
}

NSDictionary *__cdecl sub_100105104(id a1)
{
  return (NSDictionary *)+[CRLWPFont localizedMasqueradingFontFamilyNames];
}

void sub_100105F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100105FB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100105FC4(uint64_t a1)
{
}

void sub_100105FCC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  if (a3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D64A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101079D98();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D64C8);
    }
    long long v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v7);
    }
    long long v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFreehandDrawingToolPixelEraser p_endErasingAndFinalize:]_block_invoke");
    long long v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolPixelEraser.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 178, 0, "expected nil value for '%{public}s'", "shapeStrokes");
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10010615C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001061A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100106DDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100106E20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100108104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100108148(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010818C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001081D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100108214(_OWORD *a1, void *a2)
{
  long long v2 = a1[3];
  v5[0] = a1[2];
  v5[1] = v2;
  v5[2] = a1[4];
  uint64_t v3 = [a2 crl_strokeByAppendingTransform:v5];

  return v3;
}

void sub_100108260(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001082A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109038(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010907C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001090C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109AD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109B18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109B5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100109BA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A4B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A4F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A53C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A580(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A5C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010A608(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10010A6EC;
  v8[3] = &unk_1014D6810;
  id v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  uint64_t v13 = a3;
  id v11 = *(id *)(a1 + 56);
  id v12 = v5;
  id v7 = v5;
  [v6 p_tokenizeKeywordIfNeeded:v7 yieldingKeyword:v8];
}

void sub_10010A6EC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 objectForKeyedSubscript:v4];
  id v12 = [v5 mutableCopy];

  uint64_t v6 = (uint64_t)v12;
  if (!v12)
  {
    uint64_t v6 = +[NSMutableOrderedSet orderedSet];
  }
  id v13 = (id)v6;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    long long v8 = [v7 objectAtIndexedSubscript:*(void *)(a1 + 64)];
  }
  else
  {
    long long v8 = &off_10155D178;
  }
  id v9 = -[CRLShapeSearchResult initWithIdentifier:matchingKeyword:priority:score:]([CRLShapeSearchResult alloc], "initWithIdentifier:matchingKeyword:priority:score:", *(void *)(a1 + 48), *(void *)(a1 + 56), [v8 unsignedIntegerValue], 0);
  if (![v13 containsObject:v9]) {
    goto LABEL_9;
  }
  id v10 = [v13 objectAtIndex:[v13 indexOfObject:v9]];
  id v11 = [v10 priority];
  if (v11 < (id)[(CRLShapeSearchResult *)v9 priority])
  {
    [v13 removeObject:v9];

LABEL_9:
    [v13 addObject:v9];
    goto LABEL_11;
  }

LABEL_11:
  [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v4];
}

id sub_10010A908(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) p_removeSearchResultWithIdentifier:*(void *)(a1 + 40) forTokenizedKeyword:a2];
}

void sub_10010AD8C(id a1)
{
  uint64_t v1 = +[NSCharacterSet punctuationCharacterSet];
  long long v2 = (void *)qword_1016A90C0;
  qword_1016A90C0 = v1;
}

id sub_10010ADCC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10010B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010B09C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = [a2 identifier];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

BOOL sub_10010B3B8(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend(*(id *)(a1 + 32), "p_rangeOfSearchTerm:inString:shouldPerformDiacriticInsensitiveSearch:", *(void *)(a1 + 40), a2, *(unsigned __int8 *)(a1 + 48)))
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = v2 == 0;
  }
  return !v3;
}

int64_t sub_10010B474(id a1, NSString *a2, NSString *a3)
{
  return [(NSString *)a2 localizedStandardCompare:a3];
}

void sub_10010B654(uint64_t a1, void *a2)
{
  id v22 = a2;
  BOOL v3 = [v22 identifier];
  id v4 = [v22 matchingKeyword];
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  uint64_t v6 = [v4 crl_stringWithNormalizedHyphensAndQuotationMarks];
  if (!objc_msgSend(*(id *)(a1 + 40), "p_rangeOfSearchTerm:inString:shouldPerformDiacriticInsensitiveSearch:", *(void *)(a1 + 48), v6, *(unsigned __int8 *)(a1 + 56)))
  {
    BOOL v8 = v7 == [v6 length];
    if (v5) {
      goto LABEL_3;
    }
LABEL_10:
    id v12 = [CRLShapeSearchResult alloc];
    id v13 = [v22 priority];
    unint64_t v14 = [v22 score];
    double v15 = [(CRLShapeSearchResult *)v12 initWithIdentifier:v3 matchingKeyword:v4 priority:v13 score:v14];
    goto LABEL_20;
  }
  BOOL v8 = 0;
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  id v9 = [v22 priority];
  id v10 = [v5 priority];
  if ([v5 isExactMatch])
  {
    if ((uint64_t)v9 <= (uint64_t)v10 || !v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v9 == v10)
    {
      double v16 = [v5 matchingKeyword];
      id v17 = [v16 length];
      BOOL v18 = v17 > [v4 length];
    }
    else
    {
      BOOL v18 = 0;
    }
    char v19 = (uint64_t)v9 > (uint64_t)v10 || v8;
    if ((v19 & 1) == 0 && !v18) {
      goto LABEL_21;
    }
  }
  uint64_t v20 = [CRLShapeSearchResult alloc];
  id v21 = [v22 priority];
  unint64_t v14 = [v22 score];
  double v15 = [(CRLShapeSearchResult *)v20 initWithIdentifier:v3 matchingKeyword:v4 priority:v21 score:v14];

LABEL_20:
  [(CRLShapeSearchResult *)v15 setIsExactMatch:v8];
  id v5 = v15;
LABEL_21:
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v3];
}

void sub_10010BAE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010BB2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010BDE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010BE24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010C094(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010C0D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010C57C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010C5C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010C6A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10010C780(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

double sub_10010C7E0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = 2.0 / (a3 - a2);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(double *)(a1 + 40) = 2.0 / (a5 - a4);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(double *)(a1 + 80) = -2.0 / (a7 - a6);
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = -(a2 + a3) / (a3 - a2);
  *(double *)(a1 + 104) = -(a4 + a5) / (a5 - a4);
  double result = -(a6 + a7) / (a7 - a6);
  *(double *)(a1 + 112) = result;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

void sub_10010CCCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010CD10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010D618(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010D65C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E1B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E1FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E688(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E6CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E904(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010E948(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F464(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F4A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F4EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F530(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F574(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F5B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F5FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10010F640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10010F684(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  id v6 = [v5 pointCount];
  if ((unint64_t)v6 >= *(void *)(a2 + 8)) {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  else {
    unint64_t v7 = (unint64_t)v6;
  }
  BOOL v8 = +[NSMutableArray array];
  if (v7)
  {
    for (unint64_t i = 0; i != v7; ++i)
    {
      for (uint64_t j = 0; j != 9; ++j)
      {
        float v11 = 0.0;
        switch((int)j)
        {
          case 0:
            id v12 = (unsigned __int16 *)[v5 altitudeData];
            goto LABEL_18;
          case 1:
            id v12 = (unsigned __int16 *)[v5 azimuthData];
            goto LABEL_18;
          case 2:
            id v12 = (unsigned __int16 *)[v5 opacityData];
            goto LABEL_18;
          case 3:
            id v12 = (unsigned __int16 *)[v5 forceData];
            goto LABEL_18;
          case 4:
            id v13 = (float *)[v5 sizeXData];
            goto LABEL_16;
          case 5:
            id v13 = (float *)[v5 sizeYData];
            goto LABEL_16;
          case 6:
            id v13 = (float *)[v5 timeOffsetData];
            goto LABEL_16;
          case 7:
            id v13 = (float *)[v5 radius2Data];
LABEL_16:
            unsigned int v14 = 0;
            float v11 = v13[i];
            int v15 = 1;
            break;
          case 8:
            id v12 = (unsigned __int16 *)[v5 edgeWidthData];
LABEL_18:
            int v15 = 0;
            unsigned int v14 = v12[i];
            break;
          default:
            unsigned int v14 = 0;
            int v15 = 0;
            break;
        }
        if (j == 1 && a3)
        {
          double v27 = 0.0;
        }
        else
        {
          float v16 = (float)v14;
          if (v15) {
            float v16 = v11;
          }
          *((double *)&v26 + j) = 1.0 / dbl_101175490[j] * v16;
        }
      }
      id v17 = &CGPointZero;
      if (i < *(void *)(a2 + 8)) {
        id v17 = (const CGPoint *)(*(void *)(a2 + 16) + 16 * i);
      }
      double x = v17->x;
      double y = v17->y;
      id v20 = objc_alloc((Class)PKStrokePoint);
      id v21 = [v20 initWithLocation:x timeOffset:y size:v32 opacity:v30 force:v31 azimuth:v28 altitude:v29 edgeWidth:v27 radius2:v34];
      [v8 addObject:v21];
    }
  }
  id v22 = objc_alloc((Class)PKStrokePath);
  uint64_t v23 = [v5 creationDate];
  id v24 = [v22 initWithControlPoints:v8 creationDate:v23];

  return v24;
}

void sub_10010F940(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v4 = (unint64_t)[v3 elementCount];
  if (v4 >= 2)
  {
    uint64_t v5 = v4;
    unint64_t v6 = 4 * v4;
    *a2 = 4 * v4;
    unint64_t v7 = malloc_type_malloc(v4 << 6, 0x1000040451B5BE8uLL);
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v8 = 0;
    a2[2] = v7;
    unint64_t v47 = v5 - 1;
    double v48 = v7;
    double v45 = v7 + 2;
    double v46 = v7 + 1;
    unint64_t v9 = 1;
    *((void *)&v10 + 1) = 0x7FF0000000000000;
    *(void *)&long long v10 = 67109378;
    long long v44 = v10;
    while (1)
    {
      float64x2_t v66 = (float64x2_t)xmmword_101175160;
      long long v67 = xmmword_101175160;
      long long v68 = xmmword_101175160;
      long long v69 = xmmword_101175160;
      float v11 = [v3 elementAtIndex:v9 allPoints:&v66, v44];
      id v12 = v11;
      if (v5 == 2 && v9 == 1 && (unint64_t)(v11 - 1) <= 1)
      {
        unint64_t v51 = v8;
        unint64_t v13 = 0;
        float64x2_t v14 = v66;
        int v15 = &v66.f64[1];
        do
        {
          BOOL v16 = sub_1000640F4(v14.f64[0], v14.f64[1], *(v15 - 1), *v15);
          v15 += 2;
        }
        while (v16 && v13++ < 3);
        uint64_t v5 = 2;
        unint64_t v9 = 1;
        unint64_t v8 = v51;
        if (v16)
        {
          unint64_t v18 = v51 + 2;
          if (v51 + 2 < v6) {
            break;
          }
        }
      }
      if (v12 == (char *)1) {
        goto LABEL_27;
      }
      if (v12 == (char *)3)
      {
        if (v66.f64[0] != *(double *)&v67 || v66.f64[1] != *((double *)&v67 + 1))
        {
LABEL_27:
          unint64_t v8 = v50 + 4;
          if (v50 + 4 > v6)
          {
            unsigned int v22 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D6D88);
            }
            uint64_t v23 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109890;
              unsigned int v62 = v22;
              __int16 v63 = 2082;
              *(void *)double v64 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
              *(_WORD *)&v64[8] = 2082;
              *(void *)&v64[10] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
              *(_WORD *)&v64[18] = 1024;
              *(_DWORD *)&v64[20] = 596;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", buf, 0x22u);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D6DA8);
            }
            id v24 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              uint64_t v38 = v24;
              double v39 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = v44;
              unsigned int v62 = v22;
              __int16 v63 = 2114;
              *(void *)double v64 = v39;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            long long v25 = +[NSString stringWithUTF8String:"struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"];
            uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"];
            +[CRLAssertionHandler handleFailureInFunction:v25 file:v26 lineNumber:596 isFatal:0 description:"Unexpectedly trying to write beyond the capacity of the control point array."];

            unint64_t v8 = v50 + 4;
          }
          if (v8 >= v6)
          {
            unint64_t v8 = v50;
          }
          else
          {
            double v27 = &v48[v50];
            *double v27 = v66;
            v27[1] = v66;
            v27[2] = v67;
            a2[1] = v8;
            v27[3] = v67;
            unint64_t v49 = v8;
            uint64_t v50 = v8;
          }
        }
      }
      else if (v12 == (char *)2)
      {
        *(void *)&double v20 = *(_OWORD *)&sub_100347C70(&v66, (uint64_t)buf);
        if (v9 == 1)
        {
          if (v6)
          {
            *double v48 = *(_OWORD *)&v64[6];
            *double v46 = *(_OWORD *)&v64[22];
            _OWORD *v45 = v65;
            a2[1] = 3;
            unint64_t v49 = 3;
            uint64_t v50 = 3;
            unint64_t v8 = 3;
          }
          else
          {
            unsigned int v28 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            unint64_t v52 = v8;
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D6D08);
            }
            double v29 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)double v53 = 67109890;
              unsigned int v54 = v28;
              __int16 v55 = 2082;
              double v56 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
              __int16 v57 = 2082;
              uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
              __int16 v59 = 1024;
              int v60 = 572;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", v53, 0x22u);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D6D28);
            }
            double v30 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              double v40 = v30;
              double v41 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)double v53 = v44;
              unsigned int v54 = v28;
              __int16 v55 = 2114;
              double v56 = v41;
              _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v53, 0x12u);
            }
            double v31 = +[NSString stringWithUTF8String:"struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"];
            double v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"];
            +[CRLAssertionHandler handleFailureInFunction:v31 file:v32 lineNumber:572 isFatal:0 description:"Unexpectedly trying to write beyond the capacity of the control point array."];

            unint64_t v8 = v52;
          }
          goto LABEL_52;
        }
        if (v9 < v47)
        {
          if (v49 < v6)
          {
            a2[1] = v49 + 1;
            v48[v49++] = v65;
            uint64_t v50 = v49;
            unint64_t v8 = v49;
            goto LABEL_52;
          }
          unsigned int v33 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D6D48);
          }
          uint64_t v34 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)double v53 = 67109890;
            unsigned int v54 = v33;
            __int16 v55 = 2082;
            double v56 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
            __int16 v57 = 2082;
            uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
            __int16 v59 = 1024;
            int v60 = 581;
            _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", v53, 0x22u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D6D68);
          }
          long long v35 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            double v42 = v35;
            double v43 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)double v53 = v44;
            unsigned int v54 = v33;
            __int16 v55 = 2114;
            double v56 = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v53, 0x12u);
          }
          long long v36 = +[NSString stringWithUTF8String:"struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"];
          uint64_t v37 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"];
          +[CRLAssertionHandler handleFailureInFunction:v36 file:v37 lineNumber:581 isFatal:0 description:"Unexpectedly trying to write beyond the capacity of the control point array."];

          unint64_t v18 = v49;
          goto LABEL_16;
        }
      }
LABEL_52:
      if (++v9 == v5) {
        goto LABEL_2;
      }
    }
    char v19 = &v48[v51];
    _OWORD *v19 = v66;
    a2[1] = v18;
    v19[1] = v67;
    unint64_t v49 = v51 + 2;
LABEL_16:
    uint64_t v50 = v18;
    unint64_t v8 = v18;
    goto LABEL_52;
  }
LABEL_2:
}

void sub_100110264(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001102A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001102EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110330(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110374(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001103B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110A28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110A6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110AB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110AF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100110DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100110DF0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(void *)(result + 40) == a2)
  {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1001114A4(uint64_t a1, void *a2)
{
  id v3 = [a2 commandToResetMediaToRawPixelSize];
  [*(id *)(a1 + 32) addCommand:v3];
}

uint64_t sub_1001114FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100113710(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100113754(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100113A40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100113A84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100113FB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100113FF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

UTType *__cdecl sub_100114038(id a1, NSString *a2)
{
  return +[UTType typeWithIdentifier:a2];
}

void sub_100114E58(id a1)
{
  int v1 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D6FE8);
  }
  uint64_t v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10107AA08(v1, v2);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D7008);
  }
  id v3 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101066770(v3, v1);
  }
  unint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLPencilKitInkStroke paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrder:]_block_invoke");
  uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitInkStroke.m"];
  +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:272 isFatal:0 description:"Should not try to draw a CRLPencilKitInkStroke without its strokePathCompactData and maskPath."];
}

void sub_100114F94(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100114FD8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10011501C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100115428(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011546C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001158D4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
}

id sub_100115988(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
}

void sub_100115A08(uint64_t a1)
{
  [*(id *)(a1 + 32) value];
  uint64_t v4 = v3;
  [*(id *)(a1 + 32) maxValue];
  uint64_t v6 = v5;
  unsigned __int8 v7 = [*(id *)(a1 + 32) isIndeterminate];
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(NSObject **)(v8 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100115ACC;
  v10[3] = &unk_1014D7070;
  v10[4] = v8;
  void v10[5] = v4;
  v10[6] = v6;
  unsigned __int8 v11 = v7;
  dispatch_async(v9, v10);
}

void sub_100115ACC(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 8);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unsigned __int8 v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) handleValue:*(unsigned __int8 *)(a1 + 56) maxValue:*(double *)(a1 + 40) isIndeterminate:*(double *)(a1 + 48) v8];
        unsigned __int8 v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

id sub_100115C8C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

void sub_100115D7C(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v6) valueInterval:v8];
        *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = fmin(v7, *(double *)(*(void *)(*(void *)(a1 + 40)+ 8)+ 24));
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1001161BC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100116200(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001165F0(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100116634(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100116770(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100116780(uint64_t a1)
{
}

void sub_100116788(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 48));
}

void sub_100116880(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  if (v3[6] != *(void *)(a1 + 40))
  {
    [v3 p_removeProgressObserverFromProgressInQueue];
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
    [*(id *)(a1 + 32) p_addProgressObserverToProgressInQueue];
    [*(id *)(a1 + 32) protected_progressDidChange];
  }
}

void sub_100116AC0(uint64_t a1)
{
  [*(id *)(a1 + 32) p_removeProgressObserverFromProgressInQueue];
  [*(id *)(a1 + 32) p_addProgressObserverToProgressInQueue];
}

void sub_100116BAC(uint64_t a1)
{
  [*(id *)(a1 + 32) p_removeProgressObserverFromProgressInQueue];
  [*(id *)(a1 + 32) p_addProgressObserverToProgressInQueue];
}

void sub_100116D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100116D98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained protected_progressDidChange];
}

void sub_1001171D8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011721C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001176DC(uint64_t a1)
{
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 48);
  id v3 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v34;
    do
    {
      for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v33 + 1) + 8 * i);
        long long v8 = [*(id *)(*(void *)(a1 + 32) + 40) objectAtIndexedSubscript:(char *)i + v4 context:context];
        [v8 removeProgressObserver:v7];
      }
      id v3 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
      v4 += (uint64_t)i;
    }
    while (v3);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(void **)(v9 + 48);
  *(void *)(v9 + 48) = 0;

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11 >= 0 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    id v14 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "count"));
    objc_initWeak(&location, *(id *)(a1 + 32));
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = *(id *)(*(void *)(a1 + 32) + 40);
    id v15 = [obj countByEnumeratingWithState:&v28 objects:v37 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v29;
      do
      {
        for (uint64_t j = 0; j != v15; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v29 != v16) {
            objc_enumerationMutation(obj);
          }
          unint64_t v18 = *(void **)(*((void *)&v28 + 1) + 8 * (void)j);
          double v19 = *(double *)(a1 + 40);
          uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 56);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_100117A4C;
          v26[3] = &unk_1014CBF60;
          objc_copyWeak(&v27, &location);
          id v21 = [v18 addProgressObserverWithValueInterval:v20 queue:v26 handler:v19];
          [v14 addObject:v21];

          objc_destroyWeak(&v27);
        }
        id v15 = [obj countByEnumeratingWithState:&v28 objects:v37 count:16];
      }
      while (v15);
    }

    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void **)(v22 + 48);
    *(void *)(v22 + 48) = v14;

    objc_destroyWeak(&location);
  }
}

void sub_100117A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
}

void sub_100117A4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained protected_progressDidChange];
}

void sub_100117DE8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100117E2C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100117FCC(uint64_t a1)
{
  unsigned int v3 = [*(id *)(a1 + 32) protected_hasProgressObservers];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 56)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0;
  }
  if (v5)
  {
    if (*(unsigned char *)(v4 + 56)) {
      char v6 = v3;
    }
    else {
      char v6 = 1;
    }
    if ((v6 & 1) == 0) {
      [*(id *)(v4 + 40) removeProgressObserver:];
    }
  }
  else
  {
    [*(id *)(v4 + 40) addProgressObserver:v4 selector:"p_progressDidChange:"];
    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
  }
}

void sub_1001182E4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 16) + 16))();
}

void sub_1001185B8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001185FC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100118884(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001188C8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100118988(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(unsigned char *)(v1 + 72))
  {
    *(unsigned char *)(v1 + 72) = 0;
    return [*((id *)result + 4) p_slowlyAdvanceToNextStage];
  }
  return result;
}

uint64_t sub_100118A28(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 72) = 1;
  return result;
}

id sub_100118ABC(id result)
{
  uint64_t v2 = *((void *)result + 4);
  unint64_t v1 = *((void *)result + 5);
  if (v1 > *(void *)(v2 + 56) && v1 <= *(void *)(v2 + 64))
  {
    unsigned int v3 = result;
    *(void *)(v2 + 56) = v1;
    uint64_t v4 = (unint64_t *)*((void *)result + 4);
    double v5 = (double)v4[7] / (double)v4[8];
    [v4 maxValue];
    double v7 = v6 * v5;
    long long v8 = (void *)v3[4];
    return [v8 setValue:v7];
  }
  return result;
}

id sub_100118C1C(uint64_t a1)
{
  uint64_t v2 = *(unint64_t **)(a1 + 32);
  double v3 = 1.0;
  double v4 = 1.0 / (double)v2[8];
  [v2 value];
  double v5 = *(unint64_t **)(a1 + 32);
  double v6 = (double)v5[7];
  double v8 = 1.0 - (1.0 - (v7 - v6 * v4) / v4) * 0.95;
  if (v8 > 0.95) {
    double v8 = 0.95;
  }
  double v9 = v4 * (v8 + v6);
  if (v9 <= 1.0) {
    double v3 = v9;
  }
  [v5 maxValue];
  [*(id *)(a1 + 32) setValue:v10 * v3];
  uint64_t v11 = *(void **)(a1 + 32);

  return [v11 p_slowlyAdvanceToNextStage];
}

uint64_t CRLAccessibilityShouldPerformValidationChecks()
{
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  return byte_1016A90D0;
}

uint64_t __CRLAccessibilityHandleValidationErrorWithDescription(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(v10) = a1;
  id v11 = [objc_alloc((Class)NSString) initWithFormat:a3 arguments:&a9];
  NSLog(@"*** CRLAccessibility validation error: %@", v11);
  if (v11) {
    uint64_t v10 = v10;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == 1 && a2 != 0)
  {
    if (qword_1016A9100 != -1) {
      dispatch_once(&qword_1016A9100, &stru_1014D7298);
    }
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch()
{
  if (qword_1016A90F8 != -1) {
    dispatch_once(&qword_1016A90F8, &stru_1014D7278);
  }
  return byte_1016A90F0;
}

ptrdiff_t __CRLAccessibilitySafeIvarForKey(void *a1, void *a2, unsigned char *a3)
{
  InstanceVariable = object_getInstanceVariable(a1, (const char *)[a2 UTF8String], 0);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    BOOL v7 = InstanceVariable == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (qword_1016A90F8 != -1) {
      dispatch_once(&qword_1016A90F8, &stru_1014D7278);
    }
    int v9 = byte_1016A90F0;
    uint64_t v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    int v8 = __CRLAccessibilityHandleValidationErrorWithDescription(v9, 0, @"Failed to retrieve ivar for key %@ from instance of class %@.", v11, v12, v13, v14, v15, (uint64_t)a2);
    if (!a3 && v8) {
      abort();
    }
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  if (a3) {
    *a3 = v8;
  }
  if (InstanceVariable) {
    return (ptrdiff_t)a1 + ivar_getOffset(InstanceVariable);
  }
  else {
    return 0;
  }
}

uint64_t __CRLAccessibilityPerformSafeBlock(uint64_t a1)
{
  return 0;
}

uint64_t __CRLAccessibilityCastAsSafeCategory(void *a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a2) {
    return 0;
  }
  int v8 = (NSString *)[a1 crlaxTargetClassName];
  int v9 = v8;
  if (!a3)
  {
    if (v8 && NSClassFromString(v8)) {
      goto LABEL_28;
    }
    return 0;
  }
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  LOBYTE(v10) = 0;
  if (byte_1016A90D0 && !v9)
  {
    if (qword_1016A90F8 != -1) {
      dispatch_once(&qword_1016A90F8, &stru_1014D7278);
    }
    int v11 = byte_1016A90F0;
    uint64_t v12 = NSStringFromClass((Class)a1);
    int v10 = __CRLAccessibilityHandleValidationErrorWithDescription(v11, 0, @"Couldn't find target class name for safe category class %@", v13, v14, v15, v16, v17, (uint64_t)v12);
    if (!a4)
    {
      if (v10) {
        goto LABEL_49;
      }
    }
  }
  if (a4) {
    *a4 = v10;
  }
  if (!v9) {
    return 0;
  }
  Class v18 = NSClassFromString(v9);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  LOBYTE(v19) = 0;
  if (byte_1016A90D0 && !v18)
  {
    if (qword_1016A90F8 != -1) {
      dispatch_once(&qword_1016A90F8, &stru_1014D7278);
    }
    int v20 = byte_1016A90F0;
    NSStringFromClass((Class)a1);
    int v19 = __CRLAccessibilityHandleValidationErrorWithDescription(v20, 0, @"Couldn't find target class named %@ for safe category class %@", v21, v22, v23, v24, v25, (uint64_t)v9);
    if (!a4)
    {
      if (v19) {
        goto LABEL_49;
      }
    }
  }
  if (a4) {
    *a4 = v19;
  }
  if (!v18) {
    return 0;
  }
LABEL_28:
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    BOOL v26 = objc_opt_class() == (void)a1;
    if (!a3) {
      goto LABEL_46;
    }
    goto LABEL_33;
  }
  BOOL v26 = 1;
  if (a3)
  {
LABEL_33:
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    if (byte_1016A90D0) {
      char v28 = v26;
    }
    else {
      char v28 = 1;
    }
    if (v28)
    {
      LOBYTE(v29) = 0;
LABEL_44:
      if (a4) {
        *a4 = v29;
      }
      goto LABEL_46;
    }
    if (qword_1016A90F8 != -1) {
      dispatch_once(&qword_1016A90F8, &stru_1014D7278);
    }
    int v30 = byte_1016A90F0;
    long long v31 = (objc_class *)objc_opt_class();
    double v32 = NSStringFromClass(v31);
    NSStringFromClass((Class)a1);
    int v29 = __CRLAccessibilityHandleValidationErrorWithDescription(v30, 0, @"Failed to cast object <%@: %p> as safe category %@", v33, v34, v35, v36, v37, (uint64_t)v32);
    if (a4 || !v29) {
      goto LABEL_44;
    }
LABEL_49:
    abort();
  }
LABEL_46:
  if (v26) {
    return a2;
  }
  else {
    return 0;
  }
}

uint64_t __CRLAccessibilityCastAsClass(objc_class *a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a2) {
    return 0;
  }
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a3)
  {
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    if ((byte_1016A90D0 == 0) | isKindOfClass & 1)
    {
      LOBYTE(v9) = 0;
    }
    else
    {
      if (qword_1016A90F8 != -1) {
        dispatch_once(&qword_1016A90F8, &stru_1014D7278);
      }
      int v11 = byte_1016A90F0;
      uint64_t v12 = (objc_class *)objc_opt_class();
      uint64_t v13 = NSStringFromClass(v12);
      NSStringFromClass(a1);
      int v9 = __CRLAccessibilityHandleValidationErrorWithDescription(v11, 0, @"Failed to cast object <%@: %p> as class %@", v14, v15, v16, v17, v18, (uint64_t)v13);
      if (!a4 && v9) {
        abort();
      }
    }
    if (a4) {
      *a4 = v9;
    }
  }
  if (isKindOfClass) {
    return a2;
  }
  else {
    return 0;
  }
}

void *__CRLAccessibilityCastAsProtocol(Protocol *a1, void *a2, int a3, unsigned char *a4)
{
  if (!a2) {
    return 0;
  }
  unsigned int v8 = [a2 conformsToProtocol:a1];
  if (a3)
  {
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    if (byte_1016A90D0) {
      char v9 = v8;
    }
    else {
      char v9 = 1;
    }
    if (v9)
    {
      LOBYTE(v10) = 0;
    }
    else
    {
      if (qword_1016A90F8 != -1) {
        dispatch_once(&qword_1016A90F8, &stru_1014D7278);
      }
      int v12 = byte_1016A90F0;
      uint64_t v13 = (objc_class *)objc_opt_class();
      uint64_t v14 = NSStringFromClass(v13);
      NSStringFromProtocol(a1);
      int v10 = __CRLAccessibilityHandleValidationErrorWithDescription(v12, 0, @"Failed to cast object <%@: %p> as protocol %@", v15, v16, v17, v18, v19, (uint64_t)v14);
      if (!a4 && v10) {
        abort();
      }
    }
    if (a4) {
      *a4 = v10;
    }
  }
  if (v8) {
    return a2;
  }
  else {
    return 0;
  }
}

void *__CRLAccessibilityCastAsClassAndProtocol(objc_class *a1, Protocol *a2, void *a3, int a4, unsigned char *a5)
{
  if (!a3) {
    return 0;
  }
  int isKindOfClass = objc_opt_isKindOfClass();
  unsigned int v11 = [a3 conformsToProtocol:a2];
  if (a4)
  {
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    int v12 = &qword_1016A9000;
    uint64_t v13 = &qword_1016A9000;
    if ((byte_1016A90D0 == 0) | isKindOfClass & 1)
    {
      char v14 = 0;
    }
    else
    {
      if (qword_1016A90F8 != -1) {
        dispatch_once(&qword_1016A90F8, &stru_1014D7278);
      }
      int v16 = byte_1016A90F0;
      uint64_t v17 = (objc_class *)objc_opt_class();
      uint64_t v18 = NSStringFromClass(v17);
      NSStringFromClass(a1);
      char v14 = __CRLAccessibilityHandleValidationErrorWithDescription(v16, 0, @"Failed to cast object <%@: %p> as class %@", v19, v20, v21, v22, v23, (uint64_t)v18);
      if (qword_1016A90D8 == -1)
      {
        uint64_t v13 = &qword_1016A9000;
        int v12 = &qword_1016A9000;
      }
      else
      {
        dispatch_once(&qword_1016A90D8, &stru_1014D7238);
        uint64_t v13 = &qword_1016A9000;
        int v12 = &qword_1016A9000;
      }
    }
    if (byte_1016A90D0) {
      char v24 = v11;
    }
    else {
      char v24 = 1;
    }
    if (v24)
    {
      char v25 = 0;
    }
    else
    {
      if (v12[31] != -1) {
        dispatch_once(&qword_1016A90F8, &stru_1014D7278);
      }
      int v26 = *((unsigned __int8 *)v13 + 240);
      id v27 = (objc_class *)objc_opt_class();
      char v28 = NSStringFromClass(v27);
      NSStringFromProtocol(a2);
      char v25 = __CRLAccessibilityHandleValidationErrorWithDescription(v26, 0, @"Failed to cast object <%@: %p> as protocol %@", v29, v30, v31, v32, v33, (uint64_t)v28);
    }
    *a5 = v14 | v25;
  }
  if ((isKindOfClass & v11) != 0) {
    return a3;
  }
  else {
    return 0;
  }
}

void CRLAccessibilityInstallSafeCategory(NSString *a1)
{
  Class v7 = NSClassFromString(a1);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Failed installing safe category: %@ does not exist in runtime.", v2, v3, v4, v5, v6, (uint64_t)a1))abort(); {
  }
    }
  else if (v7)
  {
    [(objc_class *)v7 performSelector:"_crlaxInitializeSafeCategory"];
  }
}

void CRLAccessibilityInstallSafeCategories(void *a1)
{
  unint64_t v1 = a1;
  id v2 = [a1 count];
  if (v2)
  {
    __base = (char *)malloc_type_malloc(40 * (void)v2, 0x800402FCC0CB6uLL);
    if (__base)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v3 = [v1 countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v3)
      {
        id v4 = v3;
        size_t v5 = 0;
        uint64_t v6 = &qword_1016A9000;
        Class v7 = &qword_1016A9000;
        BOOL v8 = &qword_1016A9000;
        uint64_t v9 = *(void *)v39;
        uint64_t v35 = *(void *)v39;
        do
        {
          int v10 = 0;
          id v36 = v4;
          do
          {
            if (*(void *)v39 != v9) {
              objc_enumerationMutation(v1);
            }
            unsigned int v11 = *(NSString **)(*((void *)&v38 + 1) + 8 * (void)v10);
            Class v17 = NSClassFromString(v11);
            if (v6[27] != -1) {
              dispatch_once(&qword_1016A90D8, &stru_1014D7238);
            }
            if (!*((unsigned char *)v7 + 208) || v17)
            {
              if (v17)
              {
                uint64_t v18 = v8;
                uint64_t v19 = v7;
                uint64_t v20 = (NSString *)[(objc_class *)v17 crlaxTargetClassName];
                Class v26 = NSClassFromString(v20);
                if (v6[27] != -1) {
                  dispatch_once(&qword_1016A90D8, &stru_1014D7238);
                }
                if (!*((unsigned char *)v19 + 208) || v26)
                {
                  if (v26)
                  {
                    id v27 = v1;
                    size_t v28 = v5;
                    uint64_t v29 = (Class *)&__base[40 * v5];
                    *uint64_t v29 = v17;
                    v29[1] = (Class)v11;
                    v29[2] = (Class)sub_10011A594(v17, (uint64_t)v11);
                    v29[3] = v26;
                    v29[4] = (Class)sub_10011A594(v26, (uint64_t)v20);
                    size_t v5 = v28 + 1;
                    unint64_t v1 = v27;
                    uint64_t v6 = &qword_1016A9000;
                  }
                  Class v7 = v19;
                  BOOL v8 = v18;
                  uint64_t v9 = v35;
                  id v4 = v36;
                }
                else
                {
                  BOOL v8 = v18;
                  if (v18[29] != -1) {
                    dispatch_once(&qword_1016A90E8, &stru_1014D7258);
                  }
                  id v4 = v36;
                  Class v7 = v19;
                  uint64_t v9 = v35;
                  if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Failed installing %@ on %@. %@ does not exist in runtime.", v21, v22, v23, v24, v25, (uint64_t)v11))LABEL_37:abort(); {
                }
                  }
              }
            }
            else
            {
              if (v8[29] != -1) {
                dispatch_once(&qword_1016A90E8, &stru_1014D7258);
              }
              if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Failed installing safe category: %@ does not exist in runtime.", v12, v13, v14, v15, v16, (uint64_t)v11))goto LABEL_37; {
            }
              }
            int v10 = (char *)v10 + 1;
          }
          while (v4 != v10);
          id v4 = [v1 countByEnumeratingWithState:&v38 objects:v42 count:16];
        }
        while (v4);
      }
      else
      {
        size_t v5 = 0;
      }
      uint64_t v30 = objc_opt_new();
      uint64_t v31 = objc_opt_new();
      uint64_t v32 = objc_opt_new();
      __compar[0] = _NSConcreteStackBlock;
      __compar[1] = 3221225472;
      __compar[2] = sub_10011A62C;
      __compar[3] = &unk_1014D7218;
      __compar[4] = v30;
      __compar[5] = v31;
      __compar[6] = v32;
      qsort_b(__base, v5, 0x28uLL, __compar);

      if (v5)
      {
        uint64_t v33 = (id *)(__base + 16);
        do
        {
          [*(v33 - 2) _crlaxInstallSafeCategoryOnClass:v33[1]];

          v33 += 5;
          --v5;
        }
        while (v5);
      }
      free(__base);
    }
  }
}

id sub_10011A594(void *a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)NSMutableString) initWithString:a2];
  id v4 = (objc_class *)[a1 superclass];
  if (v4)
  {
    size_t v5 = v4;
    do
    {
      [v3 insertString:@"," atIndex:0];
      [v3 insertString:NSStringFromClass(v5) atIndex:0];
      size_t v5 = (objc_class *)[(objc_class *)v5 superclass];
    }
    while (v5);
  }
  return v3;
}

uint64_t sub_10011A62C(void **a1, void **a2, uint64_t a3)
{
  uint64_t result = (uint64_t)[a2[4] compare:*(void *)(a3 + 32)];
  if (!result)
  {
    if (sub_10011A6B8(a2, a3, a1[4], a1[5], a1[6]))
    {
      return 1;
    }
    else if (sub_10011A6B8((void **)a3, (uint64_t)a2, a1[4], a1[5], a1[6]))
    {
      return -1;
    }
    else
    {
      return (uint64_t)[a2[2] compare:*(void *)(a3 + 16)];
    }
  }
  return result;
}

uint64_t sub_10011A6B8(void **a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  sub_10011BF8C(*a1, a3, a4, a5);
  char v9 = 0;
  while ([a3 count])
  {
    int v10 = (NSString *)[a3 objectAtIndex:0];
    [a3 removeObjectAtIndex:0];
    [a5 addObject:v10];
    if ([(NSString *)v10 isEqualToString:*(void *)(a2 + 8)])
    {
      [a3 removeAllObjects];
      char v9 = 1;
    }
    else
    {
      Class v11 = NSClassFromString(v10);
      sub_10011BF8C(v11, a3, a4, a5);
    }
  }
  [a5 removeAllObjects];
  return v9 & 1;
}

void sub_10011AD4C(id a1)
{
  if (!byte_1016A90D0)
  {
    CFStringRef v1 = (const __CFString *)sub_10011ADD0();
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"ReportValidationErrors", v1, 0);
    byte_1016A90D0 = AppBooleanValue != 0;
    if (!AppBooleanValue)
    {
      if (qword_1016A90E8 != -1) {
        dispatch_once(&qword_1016A90E8, &stru_1014D7258);
      }
      byte_1016A90D0 = byte_1016A90E0;
    }
  }
}

id sub_10011ADD0()
{
  uint64_t v0 = +[CRLAccessibility sharedInstance];
  if (![(CRLAccessibility *)v0 _crlaxRespondsToSelector:"preferencesDomain" fromExtrasProtocol:&OBJC_PROTOCOL___CRLAccessibilityExtras skipAssertions:1])return 0; {

  }
  return [(CRLAccessibility *)v0 preferencesDomain];
}

void sub_10011AE3C(id a1)
{
  if (!byte_1016A90E0)
  {
    CFStringRef v1 = (const __CFString *)sub_10011ADD0();
    byte_1016A90E0 = CFPreferencesGetAppBooleanValue(@"CrashOnValidationErrors", v1, 0) != 0;
  }
}

void sub_10011AE88(id a1)
{
  if (qword_1016A90E8 != -1) {
    dispatch_once(&qword_1016A90E8, &stru_1014D7258);
  }
  byte_1016A90F0 = byte_1016A90E0;
}

void sub_10011AED4(id a1)
{
}

void sub_10011AEE8(id a1)
{
}

void sub_10011AF04(uint64_t a1, int a2, int a3, Method m, const char *a5, const char **a6)
{
  if (m)
  {
    char v9 = method_copyReturnType(m);
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    if (byte_1016A90D0 && !sub_10011B1A0(a5, v9))
    {
      if (qword_1016A90E8 != -1) {
        dispatch_once(&qword_1016A90E8, &stru_1014D7258);
      }
      if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Return type is different for method: -[%@ %@]. Actual: %s, Stated: %s", v10, v11, v12, v13, v14, a1))goto LABEL_35; {
    }
      }
    if (v9) {
      free(v9);
    }
    unsigned int NumberOfArguments = method_getNumberOfArguments(m);
    unsigned int v21 = NumberOfArguments - 2;
    if (NumberOfArguments == 2)
    {
      unsigned int v27 = 0;
    }
    else
    {
      unsigned int v22 = NumberOfArguments;
      unsigned int v28 = NumberOfArguments - 2;
      unsigned int v23 = 2;
      while (1)
      {
        uint64_t v24 = a6++;
        uint64_t v25 = *v24;
        if (!*v24) {
          break;
        }
        Class v26 = method_copyArgumentType(m, v23);
        if (qword_1016A90D8 != -1) {
          dispatch_once(&qword_1016A90D8, &stru_1014D7238);
        }
        if (byte_1016A90D0 && !sub_10011B1A0(v25, v26))
        {
          if (qword_1016A90E8 != -1) {
            dispatch_once(&qword_1016A90E8, &stru_1014D7258);
          }
          if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Argument type is different for method: -[%@ %@]. Actual: %s, Stated: %s", v16, v17, v18, v19, v20, a1))goto LABEL_35; {
        }
          }
        if (v26) {
          free(v26);
        }
        if (v22 == ++v23)
        {
          unsigned int v21 = v28;
          unsigned int v27 = v28;
          goto LABEL_27;
        }
      }
      unsigned int v27 = v23 - 2;
      unsigned int v21 = v28;
    }
LABEL_27:
    if (qword_1016A90D8 != -1) {
      dispatch_once(&qword_1016A90D8, &stru_1014D7238);
    }
    if (v21 != v27 && byte_1016A90D0)
    {
      if (qword_1016A90E8 != -1) {
        dispatch_once(&qword_1016A90E8, &stru_1014D7258);
      }
      if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Argument count is different for method: -[%@ %@]. Actual: %u, Stated: %u", v16, v17, v18, v19, v20, a1))LABEL_35:abort(); {
    }
      }
  }
}

BOOL sub_10011B1A0(const char *a1, char *__s2)
{
  BOOL v2 = 0;
  if (a1 && __s2)
  {
    if (!strcmp(a1, __s2))
    {
      return 1;
    }
    else
    {
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"@\"%s\"" a1];
      uint64_t v6 = v5;
      if (v5) {
        BOOL v2 = strcmp((const char *)[v5 UTF8String], __s2) == 0;
      }
      else {
        BOOL v2 = 0;
      }
    }
  }
  return v2;
}

void __CRLAccessibilityValidateClassMethod(NSString *a1, NSString *a2)
{
  id v4 = NSClassFromString(a1);
  id v5 = NSSelectorFromString(a2);
  Method ClassMethod = class_getClassMethod(v4, v5);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !ClassMethod)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ Class method not present: %@", v6, v7, v8, v9, v10, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateClassMethodComplete(NSString *a1, NSString *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v17 = NSClassFromString(a1);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Class missing: %@", v12, v13, v14, v15, v16, (uint64_t)a1))goto LABEL_19; {
  }
    }
  uint64_t v19 = NSSelectorFromString(a2);
  Method ClassMethod = class_getClassMethod(v17, v19);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !ClassMethod)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Class method missing: -[%@ %@]", v21, v22, v23, v24, v25, (uint64_t)a1))LABEL_19:abort(); {
  }
    }
  sub_10011AF04((uint64_t)a1, v20, (int)a2, ClassMethod, a3, &a9);
}

void __CRLAccessibilityValidateIsKindOfClass(NSString *a1, NSString *a2)
{
  id v4 = NSClassFromString(a1);
  Class v5 = NSClassFromString(a2);
  BOOL v11 = 0;
  if (v4)
  {
    uint64_t v12 = v5;
    if (v5)
    {
      do
      {
        Class Superclass = class_getSuperclass(v4);
        BOOL v11 = Superclass == v12;
        if (!Superclass) {
          break;
        }
        id v4 = Superclass;
      }
      while (Superclass != v12);
    }
  }
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    char v14 = v11;
  }
  else {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ is not a kind of %@", v6, v7, v8, v9, v10, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateIvarType(NSString *a1, const char *a2, const char *a3)
{
  uint64_t v6 = NSClassFromString(a1);
  InstanceVariable = class_getInstanceVariable(v6, a2);
  TypeEncoding = (char *)ivar_getTypeEncoding(InstanceVariable);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !sub_10011B1A0(a3, TypeEncoding))
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ : Ivar is not the right type: %s [Should be: %s was: %s]", v9, v10, v11, v12, v13, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateInstanceMethod(NSString *a1, NSString *a2)
{
  id v4 = NSClassFromString(a1);
  Class v5 = NSSelectorFromString(a2);
  Method InstanceMethod = class_getInstanceMethod(v4, v5);
  unsigned int outCount = 0;
  uint64_t v7 = class_copyMethodList(v4, &outCount);
  if (v7)
  {
    if (outCount)
    {
      unint64_t v13 = 0;
      do
      {
        char v14 = v7[v13];
        BOOL v15 = v14 == InstanceMethod;
        ++v13;
      }
      while (v13 < outCount && v14 != InstanceMethod);
    }
    else
    {
      BOOL v15 = 0;
    }
    free(v7);
  }
  else
  {
    BOOL v15 = 0;
  }
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    char v16 = v15;
  }
  else {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ Instance method not present: %@", v8, v9, v10, v11, v12, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateInstanceMethodComplete(NSString *a1, NSString *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v17 = NSClassFromString(a1);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Class missing: %@", v12, v13, v14, v15, v16, (uint64_t)a1))goto LABEL_19; {
  }
    }
  uint64_t v19 = NSSelectorFromString(a2);
  Method InstanceMethod = class_getInstanceMethod(v17, v19);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !InstanceMethod)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Instance method missing: -[%@ %@]", v21, v22, v23, v24, v25, (uint64_t)a1))LABEL_19:abort(); {
  }
    }
  sub_10011AF04((uint64_t)a1, v20, (int)a2, InstanceMethod, a3, &a9);
}

void __CRLAccessibilityValidateClass(NSString *a1)
{
  BOOL v2 = NSClassFromString(a1);
  Name = class_getName(v2);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !strcmp(Name, "nil"))
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"Class not present: %@", v4, v5, v6, v7, v8, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateIvar(NSString *a1, const char *a2)
{
  uint64_t v4 = NSClassFromString(a1);
  Ivar InstanceVariable = class_getInstanceVariable(v4, a2);
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0) {
    BOOL v11 = InstanceVariable == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ : Ivar not present: %s", v5, v6, v7, v8, v9, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilityValidateProtocolMethod(NSString *a1, NSString *a2, BOOL a3, BOOL a4)
{
  uint64_t v8 = NSProtocolFromString(a1);
  uint64_t v9 = NSSelectorFromString(a2);
  SEL name = protocol_getMethodDescription(v8, v9, a3, a4).name;
  if (qword_1016A90D8 != -1) {
    dispatch_once(&qword_1016A90D8, &stru_1014D7238);
  }
  if (byte_1016A90D0 && !name)
  {
    if (qword_1016A90E8 != -1) {
      dispatch_once(&qword_1016A90E8, &stru_1014D7258);
    }
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_1016A90E0, 1, @"%@ Protocol %@ %@ method not present: %@", v10, v11, v12, v13, v14, (uint64_t)a1))abort(); {
  }
    }
}

void __CRLAccessibilitySetAssociatedObject(void *a1, const void *a2, void *a3)
{
}

id __CRLAccessibilityGetAssociatedWeakObject(void *a1, const void *a2)
{
  objc_opt_class();
  id AssociatedObject = objc_getAssociatedObject(a1, a2);
  if (AssociatedObject)
  {
    id v5 = AssociatedObject;
    if (objc_opt_isKindOfClass()) {
      id AssociatedObject = v5;
    }
    else {
      id AssociatedObject = 0;
    }
  }

  return [AssociatedObject reference];
}

void __CRLAccessibilitySetAssociatedWeakObject(void *a1, const void *a2, uint64_t a3)
{
  id v5 = [[CRLAccessibilityBoxedWeakReference alloc] initWithObject:a3];
  objc_setAssociatedObject(a1, a2, v5, (void *)1);
}

void __CRLAccessibilitySetAssociatedCopiedObject(void *a1, const void *a2, void *a3)
{
}

id __CRLAccessibilityGetAssociatedBool(void *a1, const void *a2)
{
  id AssociatedObject = objc_getAssociatedObject(a1, a2);

  return [AssociatedObject BOOLValue];
}

void __CRLAccessibilitySetAssociatedBool(void *a1, const void *a2, int a3)
{
  if (a3) {
    id v5 = +[NSNumber numberWithBool:1];
  }
  else {
    id v5 = 0;
  }

  objc_setAssociatedObject(a1, a2, v5, (void *)1);
}

id __CRLAccessibilityGetAssociatedUnsignedInteger(void *a1, const void *a2)
{
  id AssociatedObject = objc_getAssociatedObject(a1, a2);

  return [AssociatedObject unsignedIntegerValue];
}

void __CRLAccessibilitySetAssociatedUnsignedInteger(id object, void *key, id a3)
{
  if (a3) {
    a3 = [objc_alloc((Class)NSNumber) initWithUnsignedInteger:a3];
  }
  id v5 = a3;
  objc_setAssociatedObject(object, key, a3, (void *)1);
}

id __CRLAccessibilityGetAssociatedTimeInterval(void *a1, const void *a2)
{
  id AssociatedObject = objc_getAssociatedObject(a1, a2);

  return [AssociatedObject doubleValue];
}

void __CRLAccessibilitySetAssociatedTimeInterval(void *a1, const void *a2, double a3)
{
  if (a3 == 0.0) {
    id v5 = 0;
  }
  else {
    id v5 = [objc_alloc((Class)NSNumber) initWithDouble:a3];
  }
  id v6 = v5;
  objc_setAssociatedObject(a1, a2, v5, (void *)1);
}

CGFloat __CRLAccessibilityGetAssociatedCGRect(void *a1, const void *a2)
{
  id AssociatedObject = objc_getAssociatedObject(a1, a2);
  if (!AssociatedObject) {
    return CGRectZero.origin.x;
  }
  [AssociatedObject CGRectValue];
  return result;
}

void __CRLAccessibilitySetAssociatedCGRect(void *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  v14.origin.double x = CGRectZero.origin.x;
  v14.origin.double y = CGRectZero.origin.y;
  v14.size.CGFloat width = CGRectZero.size.width;
  v14.size.CGFloat height = CGRectZero.size.height;
  if (CGRectEqualToRect(*(CGRect *)&a3, v14)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", a3, a4, a5, a6);
  }

  objc_setAssociatedObject(a1, a2, v12, (void *)1);
}

id sub_10011BF8C(void *a1, void *a2, void *a3, void *a4)
{
  [a1 crlaxAddSafeCategoryDependenciesToCollection];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = [a3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(a3);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        if (([a4 containsObject:v11] & 1) == 0
          && ([a2 containsObject:v11] & 1) == 0)
        {
          [a2 addObject:v11];
        }
      }
      id v8 = [a3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }
  return [a3 removeAllObjects];
}

void sub_10011C294(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011C2D8(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011C59C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011C5E0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011CB60(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011CBA4(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011CC3C(id a1)
{
  CFStringRef v1 = [CRLBasicShapeLibrary alloc];
  id v4 = +[CRLLocale currentLocale];
  BOOL v2 = [(CRLBasicShapeLibrary *)v1 initWithLocale:v4];
  id v3 = (void *)qword_1016A9108;
  qword_1016A9108 = (uint64_t)v2;
}

void sub_10011D044(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011D088(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011D278(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011D2BC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011D4A0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10011D4E4(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  BOOL v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100120EEC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_100120F2C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_100120F6C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_100120FAC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_100120FEC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012102C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012106C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001210AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001210EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012112C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012116C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001211AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001211EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012122C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012126C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001212AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001212EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012132C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012136C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001213AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001213EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012142C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012146C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001214AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001214EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012152C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012156C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001215AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001215EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012162C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012166C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001216AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001216EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012172C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012176C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001217AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_1001217EC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012182C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLZoomTrackerCat");
  BOOL v2 = off_10166BBC0;
  off_10166BBC0 = v1;
}

void sub_10012186C(uint64_t a1, double a2, double a3)
{
  double v4 = (a3 - *(double *)(a1 + 40)) / 0.2;
  id v5 = +[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];
  *(float *)&double v6 = v4;
  [v5 _solveForInput:v6];
  double v8 = v7;

  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v9 = *(_OWORD *)(a1 + 64);
  v20[0] = *(_OWORD *)(a1 + 48);
  v20[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 96);
  void v20[2] = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 112);
  long long v12 = *(_OWORD *)(a1 + 128);
  v19[0] = v10;
  v19[1] = v11;
  v19[2] = v12;
  sub_100080274(v20, v19, (uint64_t)&v21, v8);
  long long v16 = v21;
  long long v17 = v22;
  long long v18 = v23;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  long long v14 = [WeakRetained associatedBackgroundLayer];
  v15[0] = v16;
  v15[1] = v17;
  v15[2] = v18;
  [v14 setDynamicTransform:v15];
}

id sub_100121970(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 128);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = v2;
  long long v3 = *(_OWORD *)(a1 + 160);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v17 = v3;
  long long v4 = *(_OWORD *)(a1 + 64);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  float v7 = (id *)(*(void *)(a1 + 32) + 8);
  long long v12 = v5;
  long long v13 = v6;
  id WeakRetained = objc_loadWeakRetained(v7);
  [WeakRetained setTransform:&v10];

  return [*(id *)(a1 + 40) i_viewDidZoomToViewScale:1 notify:*(double *)(a1 + 176) v10 v11 v12 v13 v14 v15 v16 v17];
}

id sub_1001219E4(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16));
  [WeakRetained canvasZoomTrackerDidEndFinalZoomAnimation:*(void *)(a1 + 40)];

  long long v3 = *(void **)(a1 + 40);
  double v4 = *(double *)(a1 + 48);
  double v5 = *(double *)(a1 + 56);
  double v6 = *(double *)(a1 + 64);

  return [v3 p_finishZoomWithFinalScaleFactor:v4 contentOffset:v5];
}

void sub_100121F24(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

__n128 sub_100121F44@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 24) = a2;
  return a1[2];
}

void sub_10012246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 192), 8);
  _Block_object_dispose((const void *)(v12 - 160), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001224B8(void *a1, int a2, int a3, void *__src, size_t a5)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 24) >= a5) {
    size_t v6 = a5;
  }
  else {
    size_t v6 = *(void *)(*(void *)(a1[5] + 8) + 24);
  }
  memcpy(*(void **)(*(void *)(a1[6] + 8) + 24), __src, v6);
  *(void *)(*(void *)(a1[5] + 8) + 24) -= v6;
  *(void *)(*(void *)(a1[6] + 8) + 24) += v6;
  *(void *)(a1[4] + 24) += v6;
  return *(void *)(*(void *)(a1[5] + 8) + 24) != 0;
}

uint64_t sub_10012254C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012255C(uint64_t a1)
{
}

void sub_100122564(uint64_t a1, char a2, void *a3, void *a4)
{
  float v7 = a3;
  id v8 = a4;
  long long v9 = v8;
  if (!v7 || v8)
  {
    if (v8) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a4);
    }
  }
  else
  {
    uint64_t v21 = 0;
    long long v22 = &v21;
    uint64_t v23 = 0x2020000000;
    uint64_t v24 = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1001226FC;
    _OWORD v18[3] = &unk_1014D79E0;
    long long v19 = *(_OWORD *)(a1 + 48);
    v18[4] = *(void *)(a1 + 32);
    int v20 = &v21;
    dispatch_data_apply(v7, v18);
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      size_t size = dispatch_data_get_size(v7);
      size_t v11 = v22[3];
      if (size > v11)
      {
        uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 16);
        dispatch_data_t subrange = dispatch_data_create_subrange(v7, v11, size - v11);
        dispatch_data_t concat = dispatch_data_create_concat(v12, subrange);
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void **)(v15 + 16);
        *(void *)(v15 + 16) = concat;
      }
    }
    _Block_object_dispose(&v21, 8);
  }
  char v17 = a2 ^ 1;
  if (v9) {
    char v17 = 0;
  }
  if ((v17 & 1) == 0 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
}

BOOL sub_1001226FC(void *a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 24) >= a5) {
    size_t v7 = a5;
  }
  else {
    size_t v7 = *(void *)(*(void *)(a1[5] + 8) + 24);
  }
  memcpy(*(void **)(*(void *)(a1[6] + 8) + 24), __src, v7);
  *(void *)(*(void *)(a1[5] + 8) + 24) -= v7;
  *(void *)(*(void *)(a1[6] + 8) + 24) += v7;
  *(void *)(a1[4] + 24) += v7;
  *(void *)(*(void *)(a1[7] + 8) + 24) = v7 + a3;
  return *(void *)(*(void *)(a1[5] + 8) + 24) != 0;
}

void sub_1001227AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001227F0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100122A18(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100122A5C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100122B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100122CB8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100125E30((char **)a1, a2 - v2);
  }
}

double sub_100122E18(uint64_t a1, double a2)
{
  switch(a1)
  {
    case 0:
      double v2 = 1.0 - a2;
      double v3 = v2 * v2;
      goto LABEL_6;
    case 1:
      double v5 = a2 * 3.0;
      double v2 = 1.0 - a2;
      double v3 = v5 * v2;
      goto LABEL_6;
    case 2:
      double v3 = a2 * 3.0 * a2;
      double v2 = 1.0 - a2;
LABEL_6:
      double result = v2 * v3;
      break;
    case 3:
      double result = a2 * a2 * a2;
      break;
    default:
      double result = NAN;
      break;
  }
  return result;
}

void sub_100123620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001240A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_100124168(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001241AC(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001241F0(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  size_t v6 = *(float **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  float v7 = sqrtf((float)((float)(a5 - a3) * (float)(a5 - a3)) + (float)((float)(a4 - a2) * (float)(a4 - a2)));
  if (v7 > (float)(a6 * 4.0))
  {
    int v8 = vcvtps_s32_f32(v7 / (float)(a6 * 4.0));
    int v9 = v8 >= 100 ? 100 : v8;
    if (v9 >= 2)
    {
      size_t v11 = (void *)(a1 + 16);
      for (int i = 1; i != v9; ++i)
      {
        float v13 = (float)i / (float)v9;
        if ((unint64_t)v6 >= *v11)
        {
          uint64_t v15 = *(float **)a1;
          uint64_t v16 = ((uint64_t)v6 - *(void *)a1) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            sub_100004E40();
          }
          uint64_t v18 = *v11 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            int v20 = (char *)sub_100125DF8((uint64_t)v11, v19);
            uint64_t v15 = *(float **)a1;
            size_t v6 = *(float **)(a1 + 8);
          }
          else
          {
            int v20 = 0;
          }
          uint64_t v21 = (float *)&v20[4 * v16];
          *uint64_t v21 = v13;
          uint64_t v14 = v21 + 1;
          while (v6 != v15)
          {
            int v22 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v21-- - 1) = v22;
          }
          *(void *)a1 = v21;
          *(void *)(a1 + 8) = v14;
          *(void *)(a1 + 16) = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *size_t v6 = v13;
          uint64_t v14 = v6 + 1;
        }
        *(void *)(a1 + 8) = v14;
        size_t v6 = v14;
      }
    }
  }
}

void sub_1001245F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012461C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124660(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100124CB0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124CF4(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124D38(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124D7C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124DC0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100124E04(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001256FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001257B0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001257F4(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100125838(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012587C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001258C0(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100125904(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100125B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100125C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100125D70(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100125DB4(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_100125DF8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100004F34();
  }
  return operator new(4 * a2);
}

void sub_100125E30(char **a1, unint64_t a2)
{
  size_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  float v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_100004E40();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_10002B494(v4, v13);
      int v8 = *a1;
      float v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    unint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_100126084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10012609C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 size];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100126310(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) close];
  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    double v5 = *(unsigned char **)(a1 + 40);
    if (v5[32])
    {
      [v5 collapseCommonRootDirectory];
      double v5 = *(unsigned char **)(a1 + 40);
    }
    uint64_t v4 = v5;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_100126408;
  block[3] = &unk_1014D7D28;
  size_t v6 = *(NSObject **)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v12 = v3;
  id v13 = v7;
  id v11 = v4;
  id v8 = v3;
  uint64_t v9 = v4;
  dispatch_async(v6, block);
}

uint64_t sub_100126408(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100126420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    id v8 = *(void **)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10012652C;
    v11[3] = &unk_1014D7D98;
    v11[4] = v8;
    id v12 = v7;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v13 = v9;
    uint64_t v14 = v10;
    [v8 readEndOfCentralDirectoryData:a2 eocdOffset:v6 channel:v12 completion:v11];
  }
}

void sub_10012652C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 32) & 4) != 0
    && [v3 code] == (id)259
    && ([v4 domain],
        double v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = [v5 isEqualToString:NSCocoaErrorDomain],
        v5,
        v6))
  {
    id v7 = [v4 userInfo];
    id v8 = [v7 objectForKeyedSubscript:@"CRLZipArchiveErrorDescription"];

    if (v8)
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014D7D70);
      }
      id v9 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10107BBD8((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
      }
      [*(id *)(a1 + 32) readLocalFileHeaderEntriesFromChannel:*(void *)(a1 + 40) offset:0 previousEntry:0 seekAttempts:0 seekForward:0 completion:*(void *)(a1 + 48)];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    if (!v4) {
      *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 56);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10012668C(id a1)
{
  CFStringRef v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001266D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError crl_fileReadUnknownErrorWithUserInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

id sub_100126AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) readZip64EndOfCentralDirectoryLocatorData:a2 channel:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

id sub_100126DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) readZip64EndOfCentralDirectoryData:a2 channel:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

id sub_1001270CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) readCentralDirectoryData:a2 entryCount:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
  }
}

void sub_100127A90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100127AD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100127F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v4();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    double v9[2] = sub_100128060;
    v9[3] = &unk_1014D7ED8;
    void v9[4] = v7;
    id v10 = *(id *)(a1 + 48);
    char v14 = *(unsigned char *)(a1 + 76);
    int v13 = *(_DWORD *)(a1 + 72);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    [v7 readLocalFileHeaderData:a2 atOffset:v6 channel:v8 completion:v9];
  }
}

void sub_100128060(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!v8)
  {
    if (v7)
    {
      [*(id *)(a1 + 32) addEntry:v7];
      id v10 = *(void **)(a1 + 40);
      if (v10 && !*(unsigned char *)(a1 + 68) && *(_DWORD *)(a1 + 64)) {
        objc_msgSend(v10, "setCompressedSize:", (char *)objc_msgSend(*(id *)(a1 + 40), "compressedSize") - *(unsigned int *)(a1 + 64));
      }
      id v11 = (char *)[v7 offset];
      id v12 = &v11[(void)[v7 fileHeaderLength]];
      int v13 = (char *)[v7 compressedSize] + (void)v12;
      char v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      id v17 = v7;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      goto LABEL_10;
    }
    if (a4)
    {
LABEL_43:
      id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
      goto LABEL_3;
    }
    uint64_t v20 = *(unsigned int *)(a1 + 64);
    if (*(unsigned char *)(a1 + 68))
    {
      if (v20)
      {
LABEL_25:
        int v24 = 1;
        unint64_t v22 = 100;
        goto LABEL_26;
      }
LABEL_20:
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014D7E70);
      }
      uint64_t v23 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10107BD38(a1, v23);
      }
      LODWORD(v20) = 0;
      goto LABEL_25;
    }
    id v21 = [*(id *)(a1 + 40) compressedSize];
    if ((unint64_t)v21 >= 0x64) {
      unint64_t v22 = 100;
    }
    else {
      unint64_t v22 = (unint64_t)v21;
    }
    if (v22 == v20) {
      goto LABEL_20;
    }
    if (v20)
    {
      int v24 = 0;
LABEL_26:
      if (v22 > v20)
      {
        uint64_t v25 = (v20 + 1);
        if (v24)
        {
          Class v26 = (char *)[*(id *)(a1 + 40) offset];
          id v27 = [*(id *)(a1 + 40) fileHeaderLength];
          int v13 = &v26[v25
                   + (unint64_t)[*(id *)(a1 + 40) compressedSize]
                   + (void)v27];
          uint64_t v19 = 1;
LABEL_37:
          char v14 = *(void **)(a1 + 32);
          id v17 = *(id *)(a1 + 40);
          uint64_t v15 = *(void *)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 56);
          uint64_t v18 = v25;
LABEL_10:
          [v14 readLocalFileHeaderEntriesFromChannel:v15 offset:v13 previousEntry:v17 seekAttempts:v18 seekForward:v19 completion:v16];
          goto LABEL_11;
        }
LABEL_36:
        uint64_t v29 = (char *)[*(id *)(a1 + 40) offset];
        id v30 = [*(id *)(a1 + 40) fileHeaderLength];
        id v31 = [*(id *)(a1 + 40) compressedSize];
        uint64_t v19 = 0;
        int v13 = &v29[(unint64_t)v31 + (void)v30 - v25];
        goto LABEL_37;
      }
      goto LABEL_39;
    }
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D7E90);
    }
    unsigned int v28 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR))
    {
      sub_10107BDCC(a1, v28);
      if (v22) {
        goto LABEL_35;
      }
    }
    else if (v22)
    {
LABEL_35:
      uint64_t v25 = 1;
      goto LABEL_36;
    }
LABEL_39:
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D7EB0);
    }
    uint64_t v32 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10107BCCC(v22, v32, v33, v34, v35, v36, v37, v38);
    }
    goto LABEL_43;
  }
  id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_3:
  v9();
LABEL_11:
}

void sub_10012833C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100128380(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001283C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10012880C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6
    || (id v7 = *(void **)(a1 + 32),
        uint64_t v8 = *(void *)(a1 + 40),
        id v15 = 0,
        v9 = [v7 readLocalFileHeaderFilenameAndExtraFieldsData:v5 forEntry:v8 error:&v15], id v6 = v15, !v9))
  {
    char v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    id v10 = (char *)[*(id *)(a1 + 40) offset];
    id v11 = &v10[(void)[*(id *)(a1 + 40) fileHeaderLength]];
    id v12 = (char *)[*(id *)(a1 + 40) compressedSize];
    uint64_t v13 = *(void *)(a1 + 32);
    if ((uint64_t)&v12[(void)v11] > *(void *)(v13 + 24)) {
      *(void *)(v13 + 24) = &v12[(void)v11];
    }
    char v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v14();
}

void sub_100128BB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

CRLZipInflateReadChannel *sub_100128E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [CRLZipInflateReadChannel alloc];
  [*(id *)(a1 + 32) size];
  id v5 = -[CRLZipInflateReadChannel initWithReadChannel:uncompressedSize:CRC:validateCRC:](v4, "initWithReadChannel:uncompressedSize:CRC:validateCRC:", v3, [*(id *)(a1 + 32) size], objc_msgSend(*(id *)(a1 + 32), "CRC"), *(unsigned __int8 *)(a1 + 40));

  return v5;
}

void sub_100128ED0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100128F14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100129160(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001291A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100129660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100129688(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100129698(uint64_t a1)
{
}

void sub_1001296A0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v21 = [a2 pathComponents];
  if ((unint64_t)[v21 count] < 2
    || ([v21 objectAtIndexedSubscript:0],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 isEqualToString:@"__MACOSX"],
        v6,
        uint64_t v8 = v21,
        (v7 & 1) == 0))
  {
    unsigned int v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v9)
    {
      unint64_t v10 = 0;
      if (![v9 count]) {
        goto LABEL_10;
      }
      do
      {
        if (v10 >= (unint64_t)[v21 count]) {
          break;
        }
        id v11 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectAtIndexedSubscript:v10];
        id v12 = [v21 objectAtIndexedSubscript:v10];
        id v13 = [v11 compare:v12 options:*(void *)(a1 + 40)];

        if (v13) {
          break;
        }
        ++v10;
      }
      while (v10 < (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count]);
      if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
        id v15 = *(void **)(v14 + 40);
        *(void *)(v14 + 40) = 0;

        *a4 = 1;
      }
      else
      {
LABEL_10:
        BOOL v16 = v10 >= (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count];
        uint64_t v8 = v21;
        if (v16) {
          goto LABEL_14;
        }
        id v17 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        objc_msgSend(v17, "removeObjectsInRange:", v10, (char *)objc_msgSend(v17, "count") - v10);
      }
    }
    else
    {
      id v18 = [objc_alloc((Class)NSMutableArray) initWithArray:v21];
      uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;

      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) removeLastObject];
    }
    uint64_t v8 = v21;
  }
LABEL_14:
}

void sub_10012987C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ((unint64_t)[v7 length] <= *(void *)(a1 + 48) + 1)
  {
    [*(id *)(*(void *)(a1 + 40) + 16) removeObject:v5];
  }
  else if (([v7 hasPrefix:@"__MACOSX"] & 1) == 0)
  {
    id v6 = [v7 substringFromIndex:*(void *)(a1 + 48) + 1];
    [v5 setCollapsedName:v6];
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100129C04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100129C48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100129F40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100129F84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012A27C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012A2C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012A598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_10012A5C0(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  id v3 = [*(id *)(a1 + 32) streamReadChannelForEntry:*(void *)(a1 + 40)];
  if (v3)
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 48));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10012A754;
    v16[3] = &unk_1014CB000;
    v16[4] = v3;
    long long v15 = *(_OWORD *)(a1 + 48);
    id v4 = (id)v15;
    long long v17 = v15;
    [v3 readWithHandler:v16];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014D80F8);
    }
    id v5 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10107BFDC(v2, v5, v6, v7, v8, v9, v10, v11);
    }
    uint64_t v12 = +[NSError crl_fileReadCorruptedFileErrorWithUserInfo:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void sub_10012A710(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10012A754(uint64_t a1, int a2, void *a3, void *a4)
{
  id v11 = a3;
  id v7 = a4;
  if (!v7 || (uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8), v10 = *(void *)(v8 + 40), v9 = (id *)(v8 + 40), v10))
  {
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  objc_storeStrong(v9, a4);
  if (a2)
  {
LABEL_4:
    [*(id *)(a1 + 32) close];
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
LABEL_5:
}

void sub_10012A7EC(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    id v3 = a1[4];
    if (v3)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      double v7[2] = sub_10012A8BC;
      v7[3] = &unk_1014D8148;
      id v4 = v2;
      uint64_t v5 = a1[6];
      id v8 = v4;
      uint64_t v9 = v5;
      dispatch_async(v3, v7);
    }
    else
    {
      uint64_t v6 = (void (*)(void))v2[2];
      v6();
    }
  }
}

uint64_t sub_10012A8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_10012AA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012AA30(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10012AC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012AC90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, BOOL *a5)
{
  id v7 = a4;
  id v8 = (objc_class *)objc_opt_class();
  uint64_t v9 = [v7 objectForKeyedSubscript:@"CRLZipArchiveErrorDescription"];

  uint64_t v10 = sub_10024715C(v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  *a5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

void sub_10012AE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012AE3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, BOOL *a5)
{
  id v7 = a4;
  id v8 = (objc_class *)objc_opt_class();
  uint64_t v9 = [v7 objectForKeyedSubscript:@"CRLZipArchiveErrorEntryName"];

  uint64_t v10 = sub_10024715C(v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  *a5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

void sub_10012AEE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10012B8CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012B910(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D4AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D5C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012D5D4(uint64_t a1)
{
}

id sub_10012D5DC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) crl_dequeue];
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)CALayer);
    [*(id *)(*(void *)(a1 + 40) + 32) setObject:*(void *)(a1 + 48) forKey:v3];
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addLayer:v3];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72));
    [v3 setDelegate:WeakRetained];

    goto LABEL_5;
  }
  id v3 = (id)v2;
  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addLayer:v2];
  if (*(unsigned char *)(a1 + 80)) {
LABEL_5:
  }
    [v3 setHidden:[*(id *)(a1 + 56) containsObject:*(void *)(a1 + 48)]];
  [*(id *)(a1 + 64) crl_enqueue:v3];

  return v3;
}

void sub_10012D6C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D704(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D748(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D78C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D7D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D814(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D858(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D89C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D8E0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  unsigned int v4 = [v3 containsObject:];
  uint64_t v5 = *(void **)(a1 + 40);
  if (v4) {
    [v5 p_accumulateNonRenderableBackedRepAndDescendants:v6 into:*(void *)(a1 + 48)];
  }
  else {
    [v5 p_recursivelyUpdateRenderableForRep:v6 accumulatingRepContentPiles:*(void *)(a1 + 56) andReps:*(void *)(a1 + 48) suppressLayers:0 hidingLayersForReps:*(void *)(a1 + 64) forcingUpdateOfValidLayers:*(unsigned __int8 *)(a1 + 72)];
  }
}

void sub_10012D968(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D9AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012D9F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012DA34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012DA78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012DABC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012DB00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012DB44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10012DB88(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) addAdditionalChildLayersToArray:a2];
}

id sub_10012E090(id a1, CALayer *a2)
{
  return +[CRLCanvasRenderable renderableFromLayer:a2];
}

uint64_t sub_10012EDB8(uint64_t result, float a2)
{
  *(float *)uint64_t v3 = a2;
  *(_DWORD *)(v3 + 4) = v2;
  *(_WORD *)(v3 + _Block_object_dispose(&STACK[0x370], 8) = 2114;
  *(void *)(v3 + 10) = result;
  return result;
}

void sub_10012EDD0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0x12u);
}

id sub_10012EDF0(id a1)
{
  return a1;
}

void sub_10012F32C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012F370(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012F838(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10012F87C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001301F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100130234(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100130470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001304B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013084C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100130890(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CRLCanvasRenderable *__cdecl sub_100130A14(id a1, CALayer *a2)
{
  return (CRLCanvasRenderable *)+[CRLCanvasRenderable renderableFromLayer:a2];
}

void sub_100132F88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100132FCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013317C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001331C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100134540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100134584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10013462C(uint64_t *a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  int v2 = (void *)a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v2 - *a2) >> 4) < 3 || v3 == v2) {
    return 2;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = &v3[v5];
    uint64_t v7 = v3[v5 + 1];
    if (v7 != a1[1]) {
      break;
    }
    v5 += 6;
    if (&v3[v5] == v2) {
      return 2;
    }
  }
  if (v6 == v2) {
    return 2;
  }
  int v8 = 0;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  unsigned __int8 v11 = v7 < v9;
  uint64_t v12 = &v3[v5];
  uint64_t v13 = v2;
LABEL_11:
  uint64_t v14 = v12 + 6;
  do
  {
    do
    {
LABEL_12:
      if (v14 == v13)
      {
        if (!(v5 * 8)) {
          goto LABEL_47;
        }
        uint64_t v12 = v3;
        uint64_t v13 = &v3[v5];
        if (v6 == v14) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v12 = v14;
      }
      if (v11)
      {
        if (v12 != v13)
        {
          while (v12[1] < v9)
          {
            v12 += 6;
            if (v12 == v13) {
              goto LABEL_24;
            }
          }
        }
      }
      else if (v12 != v13)
      {
        while (v12[1] > v9)
        {
          v12 += 6;
          if (v12 == v13)
          {
LABEL_24:
            uint64_t v14 = v13;
            goto LABEL_12;
          }
        }
      }
      uint64_t v14 = v13;
    }
    while (v12 == v13);
    if (v12 == v3) {
      long long v15 = v2;
    }
    else {
      long long v15 = v12;
    }
    uint64_t v16 = *v12;
    uint64_t v17 = v12[1];
    if (v9 != v17)
    {
      uint64_t v18 = *(v15 - 6);
      if (v10 >= v16 || v10 >= v18)
      {
        if (v10 <= v16 || v10 <= v18)
        {
          double v20 = (double)(v16 - v18) * (double)(v9 - v17) - (double)(v17 - *(v15 - 5)) * (double)(v10 - v16);
          if ((v11 ^ (v20 >= 0.0))) {
            int v8 = 1 - v8;
          }
          if (v20 == 0.0) {
            return 0;
          }
        }
        else
        {
          int v8 = 1 - v8;
        }
      }
      v11 ^= 1u;
      goto LABEL_11;
    }
    if (v10 == v16 || v9 == *(v15 - 5) && v10 < v16 == v10 >= *(v15 - 6)) {
      return 0;
    }
    uint64_t v14 = v12 + 6;
  }
  while (v6 != v12 + 6);
  uint64_t v14 = &v3[v5];
LABEL_47:
  if (v7 < v9 != (v11 & 1))
  {
    if (v14 == v2) {
      unint64_t v22 = v3;
    }
    else {
      unint64_t v22 = v14;
    }
    if (v14 != v3 && v14 != v2) {
      int v2 = v14;
    }
    double v24 = (double)(uint64_t)(*v22 - *(v2 - 6)) * (double)(v9 - v22[1])
        - (double)(uint64_t)(v22[1] - *(v2 - 5)) * (double)(v10 - *v22);
    if ((v11 ^ (v24 >= 0.0))) {
      int v8 = 1 - v8;
    }
    if (v24 == 0.0) {
      return 0;
    }
  }
  if (v8) {
    return 1;
  }
  else {
    return 2;
  }
}

void sub_100134888(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_1001348DC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1001348DC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *sub_100134934(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  id result = sub_100134AB8(v3, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v3 + 3;
  return result;
}

void sub_10013498C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100134994(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004E40();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100046F5C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unsigned __int8 v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_100134AB8(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  v15 += 24;
  sub_100134BD0(a1, v14);
  uint64_t v12 = a1[1];
  sub_100134D6C((uint64_t)v14);
  return v12;
}

void sub_100134AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100134AB8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_100134B34(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100134B18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100134B34(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100004E40();
  }
  id result = (char *)sub_100134B88((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *sub_100134B88(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100004F34();
  }
  return operator new(48 * a2);
}

uint64_t sub_100134BD0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100134C48((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100134C48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x370], 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x370], 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100134CEC((uint64_t)v11);
  return v9;
}

uint64_t sub_100134CEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100134D24(a1);
  }
  return a1;
}

void sub_100134D24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_100134D6C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100134DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_100134E00(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004E40();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100046F5C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unsigned __int8 v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_100134AB8(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  v15 += 24;
  sub_100134BD0(a1, v14);
  uint64_t v12 = a1[1];
  sub_100134D6C((uint64_t)v14);
  return v12;
}

void sub_100134F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100135740(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100135784(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100135A1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100135A60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100135CC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100135D04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136304(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136348(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136AA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136AE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136D20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136D64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136FA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100136FE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137248(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013728C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001374BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137500(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137730(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137774(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137A78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137ABC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100137B00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100137E54(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x370], 8) = a1;
}

void sub_100138438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013847C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001389CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100138A10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100138D94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100138DD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

float sub_10013A57C(float64x2_t *a1)
{
  double v2 = a1[2].f64[0];
  double v3 = a1[2].f64[1];
  double v4 = sub_1000653B4(v2, v3, a1[3].f64[0], a1[3].f64[1]);
  double v14 = a1->f64[0];
  double v5 = a1->f64[1];
  float v6 = v4 + sub_1000653B4(v2, v3, a1->f64[0], v5);
  float v7 = 0.0;
  float v8 = 0.33333;
  float v9 = 0.33333;
  do
  {
    double v10 = sub_100064570(a1, v8);
    float v12 = sub_1000653B4(v10, v11, v14, v5);
    if ((float)(v8 - fminf(sqrtf((float)(v12 * 3.0) / v6) / 3.0, 0.33333)) > 0.0) {
      float v9 = v8;
    }
    else {
      float v7 = v8;
    }
    float v8 = (float)(v9 + v7) * 0.5;
  }
  while (vabds_f32(v9, v7) >= 0.00001);
  return (float)(v9 + v7) * 0.5;
}

void sub_10013AA10(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, id a8)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a7;
  *(void *)a1 = &off_1014D8AD0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v14;
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = a6;
  *(void *)&long long v18 = 0xFFFFFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 40) = v18;
  *(unsigned char *)(a1 + 56) = [v14 wpKind];
  if (a8 == (id)0x7FFFFFFFFFFFFFFFLL) {
    a8 = [v14 characterCount];
  }
  *(void *)(a1 + 64) = a8;
  *(void *)(a1 + 72) = [v14 attachmentCount];
  sub_100061940(a1 + 80);
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 80_Block_object_dispose(&STACK[0x370], 8) = 0u;
  operator new();
}

void sub_10013AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);

  sub_1001474D8((void ***)va);
  sub_100061D1C(a3);

  _Unwind_Resume(a1);
}

void sub_10013ACE0(NSRange *a1, NSUInteger a2)
{
  NSUInteger location = a1[6].location;
  NSUInteger length = a1[6].length;
  if (location != 0x7FFFFFFFFFFFFFFFLL || length != 0)
  {
    BOOL v7 = a2 - location < length && a2 >= location;
    NSUInteger v8 = length + location;
    if (!v7 && v8 != a2)
    {
      unsigned int v10 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9550);
      }
      double v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
      {
        id v16 = NSStringFromRange(a1[6]);
        *(_DWORD *)buf = 67110402;
        unsigned int v18 = v10;
        __int16 v19 = 2082;
        double v20 = "void CRLWPLayoutState::setCharIndex(CRLWPCharIndex)";
        __int16 v21 = 2082;
        unint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutState.h";
        __int16 v23 = 1024;
        int v24 = 119;
        __int16 v25 = 2048;
        NSUInteger v26 = a2;
        __int16 v27 = 2114;
        unsigned int v28 = v16;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex %lu is outside of paragraphRange: %{public}@", buf, 0x36u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9570);
      }
      float v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      long long v13 = +[NSString stringWithUTF8String:"void CRLWPLayoutState::setCharIndex(CRLWPCharIndex)"];
      id v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutState.h"];
      id v15 = NSStringFromRange(a1[6]);
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 119, 0, "charIndex %lu is outside of paragraphRange: %{public}@", a2, v15);
    }
  }
  a1->NSUInteger location = a2;
}

void sub_10013AF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10013AFA0(uint64_t a1)
{
  *(void *)a1 = &off_1014D8AD0;
  (*(void (**)(void))(**(void **)(a1 + 824) + 24))(*(void *)(a1 + 824));
  uint64_t v2 = *(void *)(a1 + 824);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  double v4 = (void **)(a1 + 792);
  sub_1001474D8(&v4);
  sub_100061D1C(a1 + 80);
  return a1;
}

void sub_10013B06C(uint64_t a1)
{
  sub_10013AFA0(a1);

  operator delete();
}

uint64_t sub_10013B0A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  float v6 = *(void **)(a1 + 8);
  if (!v6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8AE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D0E0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8B00);
    }
    BOOL v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    NSUInteger v8 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"];
    float v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 170, 0, "invalid nil value for '%{public}s'", "_storage");

    float v6 = *(void **)(a1 + 8);
  }
  [v6 wpKind];
  if (objc_opt_respondsToSelector()) {
    [v5 willLayoutIntoTarget];
  }
  unint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = *(void *)(a1 + 64);
  if (v10 > v11)
  {
    unsigned int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8B20);
    }
    long long v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      unsigned int v45 = [*(id *)(a1 + 8) wpKind];
      uint64_t v42 = *(void *)(a1 + 80);
      uint64_t v43 = *(void *)(a1 + 64);
      id v41 = [*(id *)(a1 + 8) length];
      *(_DWORD *)buf = 67110914;
      unsigned int v57 = v12;
      __int16 v58 = 2082;
      __int16 v59 = "BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)";
      __int16 v60 = 2082;
      CGFloat v61 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      __int16 v62 = 1024;
      int v63 = 179;
      __int16 v64 = 2048;
      uint64_t v65 = v45;
      __int16 v66 = 2048;
      uint64_t v67 = v42;
      __int16 v68 = 2048;
      uint64_t v69 = v43;
      __int16 v70 = 2048;
      id v71 = v41;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempt to lay out past end of storage (kind:%lu) %lu vs %lu vs %lu", buf, 0x4Au);
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8B40);
    }
    id v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v15 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"];
    id v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 179, 0, "Attempt to lay out past end of storage (kind:%lu) %lu vs %lu vs %lu", [*(id *)(a1 + 8) wpKind], *(void *)(a1 + 80), *(void *)(a1 + 64), [*(id *)(a1 + 8) length]);

    unint64_t v10 = *(void *)(a1 + 80);
    unint64_t v11 = *(void *)(a1 + 64);
  }
  if (v10 <= v11)
  {
    if ([v5 textIsVertical])
    {
      [v5 currentSize];
      double v19 = v18;
    }
    else
    {
      [v5 currentSize];
      double v19 = v20;
    }
    __int16 v21 = [v5 columns];
    if (![v21 count])
    {
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(void *)(a1 + 80);
      int v24 = [*(id *)(a1 + 24) styleProvider];
      +[CRLWPLayoutManager fixColumnBoundsForTarget:v5 storage:v22 charIndex:v23 firstColumnIndex:0 precedingHeight:0 height:v24 alreadyHasMargins:0.0 styleProvider:v19];
    }
    if (![v21 count])
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D8B60);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107D058();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D8B80);
      }
      __int16 v25 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      NSUInteger v26 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"];
      __int16 v27 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v26 file:v27 lineNumber:190 isFatal:0 description:"No columns to lay out into"];
    }
    if ([v21 count])
    {
      sub_10013BA9C(a1, v5, 0, *(void *)(a1 + 80), 0, a3);
      unint64_t v44 = sub_10013C170((uint64_t *)a1, a1 + 80);
      *(unsigned char *)(a1 + 856) = 0;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v28 = v21;
      id v29 = [v28 countByEnumeratingWithState:&v50 objects:v55 count:16];
      if (v29)
      {
        uint64_t v30 = *(void *)v51;
        do
        {
          for (int i = 0; i != v29; int i = (char *)i + 1)
          {
            if (*(void *)v51 != v30) {
              objc_enumerationMutation(v28);
            }
            [*(id *)(*((void *)&v50 + 1) + 8 * i) setAnchoredRange:0x7FFFFFFFFFFFFFFFLL, 0];
          }
          id v29 = [v28 countByEnumeratingWithState:&v50 objects:v55 count:16];
        }
        while (v29);
      }

      double v49 = 0.0;
      double v32 = rint(v19);
      int v48 = 1;
      int v47 = 0;
      unsigned __int16 v54 = 0;
      do
      {
        int v33 = sub_10013C3C0(a1, v5, a3, &v49, &v48, &v54, &v47, v19, v32);
        double v32 = rint(v19 - v49);
        if (v32 <= 0.0) {
          int v34 = 1;
        }
        else {
          int v34 = v33;
        }
      }
      while (v34 != 1);
      sub_10013CF80(a1, v44, (uint64_t)v46);
      sub_100061D1C(v46);
      sub_100061DB0(a1 + 80, 0);
      if (objc_opt_respondsToSelector()) {
        [v5 didLayoutIntoTarget];
      }
      unint64_t v35 = *(void *)(a1 + 80);
      unint64_t v36 = *(void *)(a1 + 64);
      int v37 = v54;
      unsigned int v38 = sub_1001CA284(v54);
      if (v37 == 8232) {
        unsigned int v39 = 1;
      }
      else {
        unsigned int v39 = v38;
      }
      if (v35 < v36) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v39;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

void sub_10013B81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013B904(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013B948(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013B98C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013B9D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013BA14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013BA58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013BA9C(uint64_t a1, void *a2, uint64_t a3, NSUInteger a4, void *a5, uint64_t a6)
{
  id v11 = a2;
  id v41 = a5;
  *(void *)(a1 + 816) = v11;
  unsigned int v12 = [v11 textIsVertical];
  if (((v12 ^ ((*(void *)(a1 + 32) & 0x10) == 0)) & 1) == 0)
  {
    uint64_t v13 = 16;
    if (!v12) {
      uint64_t v13 = 0;
    }
    *(void *)(a1 + 32) = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFEFLL | v13;
    (*(void (**)(void))(**(void **)(a1 + 824) + 24))(*(void *)(a1 + 824));
    uint64_t v14 = *(void *)(a1 + 824);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (objc_opt_respondsToSelector()) {
      [*(id *)(a1 + 16) forceWesternLineBreaking];
    }
    operator new();
  }
  sub_100061940((uint64_t)obj);
  sub_100061D20(a1 + 80, (uint64_t)obj);
  sub_100061D1C(obj);
  *(_OWORD *)(a1 + 176) = xmmword_101176F48;
  sub_10013ACE0((NSRange *)(a1 + 80), a4);
  id v15 = [v11 columns];
  if ([v15 count])
  {
    id v16 = [v15 objectAtIndexedSubscript:a3];
    sub_100061D60(a1 + 80, (uint64_t)v16);

    uint64_t v17 = *(void *)(a1 + 8);
    double v18 = [*(id *)(a1 + 24) styleProvider];
    sub_100189DF8(obj, v17, v18, 0, (char *)[*(id *)(a1 + 8) paragraphCount] - 1, 1);
    objc_storeStrong((id *)(a1 + 104), obj[0]);
    objc_storeStrong((id *)(a1 + 112), obj[1]);
    long long v19 = v44;
    *(_OWORD *)(a1 + 120) = v43;
    *(_OWORD *)(a1 + 136) = v19;
    *(_OWORD *)(a1 + 152) = v45;
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x370], 8) = v46;
    sub_100189C94(obj);
  }
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = a4;
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  sub_10013F57C(a1);
  sub_10013DB54(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
  double v20 = sub_100061D58(a1 + 80);
  BOOL v21 = v20 == 0;

  if (!v21)
  {
    uint64_t v22 = sub_100061D58(a1 + 80);
    *(void *)(a1 + 256) = [v22 columnIndex];

    if (*(void *)(a1 + 256) != a3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D8BE0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107D17C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D8C00);
      }
      uint64_t v23 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      int v24 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::protectedSetUpLayoutState(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, NSUInteger, CRLWPCharIndex, __strong id<TSDHint>, CRLWPLayoutFlags)"];
      __int16 v25 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v24 file:v25 lineNumber:715 isFatal:0 description:"Column index mismatch"];
    }
  }
  NSUInteger v26 = [*(id *)(a1 + 16) textWrapper];
  sub_100061DB0(a1 + 80, v26);

  if (objc_opt_respondsToSelector())
  {
    __int16 v27 = *(void **)(a1 + 16);
LABEL_25:
    id v29 = [v27 textColorOverride];
    goto LABEL_27;
  }
  char v28 = objc_opt_respondsToSelector();
  __int16 v27 = v11;
  if (v28) {
    goto LABEL_25;
  }
  id v29 = 0;
LABEL_27:
  sub_100061DCC(a1 + 80, v29);
  [v11 maxSize];
  id v30 = [v11 position];
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v30, v31);
  *(void *)(a1 + 592) = v32;
  *(void *)(a1 + 600) = v33;
  *(void *)(a1 + 60_Block_object_dispose(&STACK[0x370], 8) = v34;
  *(void *)(a1 + 616) = v35;
  if (objc_opt_respondsToSelector()) {
    *(unsigned char *)(a1 + 431) = [v11 shouldHyphenate];
  }
  else {
    *(unsigned char *)(a1 + 431) = 1;
  }
  *(void *)(a1 + 496) = 0x4032000000000000;
  sub_10013F944(a1);
  *(void *)(a1 + 64_Block_object_dispose(&STACK[0x370], 8) = a6;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v36 = (uint64_t)[v11 restrictedLayoutCharRange];
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v38 = 0;
  }
  sub_100061DFC(a1 + 80, v36, v38);
  if (objc_opt_respondsToSelector()) {
    unsigned __int8 v39 = [v11 alwaysIncludesSpaceBefore];
  }
  else {
    unsigned __int8 v39 = 0;
  }
  *(unsigned char *)(a1 + 673) = v39;
  if (objc_opt_respondsToSelector()) {
    unsigned __int8 v40 = [v11 alwaysIncludesSpaceAfter];
  }
  else {
    unsigned __int8 v40 = 0;
  }
  *(unsigned char *)(a1 + 674) = v40;
}

void sub_10013C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

unint64_t sub_10013C170(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[100];
  if (0xF47E8FD1FA3F47E9 * ((uint64_t)(v4 - a1[99]) >> 3) >= 6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8C20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D204();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8C40);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    float v6 = +[NSString stringWithUTF8String:"size_t CRLWPLayoutChore::pPushLayoutState(const CRLWPLayoutState &)"];
    BOOL v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:766 isFatal:0 description:"Too many layoutStates pushed"];

    unint64_t v4 = a1[100];
  }
  if (v4 >= a1[101])
  {
    uint64_t v8 = sub_10014755C(a1 + 99, a2);
  }
  else
  {
    sub_100061CB4(v4, a2);
    uint64_t v8 = v4 + 712;
    a1[100] = v4 + 712;
  }
  a1[100] = v8;
  return 0xF47E8FD1FA3F47E9 * ((v8 - a1[99]) >> 3);
}

void sub_10013C384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10013C3C0(uint64_t a1, void *a2, uint64_t a3, double *a4, _DWORD *a5, _WORD *a6, int *a7, double a8, double a9)
{
  id v109 = a2;
  uint64_t v14 = 0;
  double v124 = a9;
  uint64_t v123 = 0x4028000000000000;
  do
  {
    id v15 = &v134[v14];
    *(void *)id v15 = 0;
    *((void *)v15 + 1) = 0;
    CGPoint origin = CGRectZero.origin;
    CGSize size = CGRectZero.size;
    *((_OWORD *)v15 + 1) = CGRectZero.origin;
    *((CGSize *)v15 + 2) = size;
    *((CGPoint *)v15 + 3) = origin;
    *((CGSize *)v15 + 4) = size;
    *((void *)v15 + 10) = 0;
    v14 += 88;
  }
  while (v14 != 880);
  double v18 = sub_1001464B8(a1, v109, *a7, (uint64_t)v134);
  double v19 = *(double *)(a1 + 208);
  double v20 = *(double *)(a1 + 224);
  if (v18 == 0.0)
  {
    unsigned __int16 v25 = 0;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 240);
    uint64_t v22 = *(void *)(a1 + 248);
    uint64_t v23 = [v109 columns];
    unint64_t v24 = v22 + v21;
    if ((unint64_t)[v23 count] >= v24)
    {
      NSUInteger v26 = [v109 columns];
      __int16 v27 = [v26 objectAtIndexedSubscript:v24 - 1];
      unsigned __int16 v25 = (unsigned __int16)[v27 layoutResultFlags];
    }
    else
    {
      unsigned __int16 v25 = 0;
    }
  }
  v111 = a6;
  double v28 = rint(v18 + v19 + v20);
  __int16 v106 = v25;
  if ((v25 & 0x200) == 0) {
    double v28 = a9;
  }
  double v122 = v28;
  char v121 = (unint64_t)(v25 & 0x200) >> 9;
  v104 = (unint64_t *)(a1 + 80);
  unint64_t v103 = sub_10013C170((uint64_t *)a1, a1 + 80);
  char v29 = *(unsigned char *)(a1 + 856);
  _WORD *v111 = 0;
  unsigned __int8 v119 = 0;
  *(void *)(a1 + 256) = *a7;
  unsigned int v120 = 1;
  while (1)
  {
    unint64_t v30 = *(void *)(a1 + 80);
    if (v30 > *(void *)(a1 + 64))
    {
      unsigned int v31 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9280);
      }
      uint64_t v32 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v31;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLay"
                              "outFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 3528;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.charIndex", buf, 0x22u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D92A0);
      }
      uint64_t v33 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      {
        __int16 v62 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v31;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v62;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      uint64_t v34 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)"];
      uint64_t v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v34 file:v35 lineNumber:3528 isFatal:0 description:"Bad _state.charIndex"];

      unint64_t v30 = *v104;
    }
    uint64_t v36 = *(void *)(a1 + 816);
    uint64_t v37 = *(void *)(a1 + 8);
    uint64_t v38 = *a7;
    double v39 = *a4;
    double v40 = v122;
    id v41 = [*(id *)(a1 + 24) styleProvider];
    +[CRLWPLayoutManager fixColumnBoundsForTarget:v36 storage:v37 charIndex:v30 firstColumnIndex:v38 precedingHeight:0 height:v41 alreadyHasMargins:v39 styleProvider:v40];

    buf[0] = 0;
    LOBYTE(v115) = 0;
    uint64_t v42 = *a7;
    uint64_t v43 = *(void *)(a1 + 248);
    long long v44 = [v109 columns];
    long long v45 = [v44 objectAtIndexedSubscript:*a7];

    [v45 frameBounds];
    if (v46 <= 0.0 && ([v109 autosizeFlags] & 1) == 0) {
      break;
    }
    unint64_t v47 = v43 + v42;
    unint64_t v48 = *a7;
    if (v43 + v42 <= v48) {
      uint64_t v49 = *a7;
    }
    else {
      uint64_t v49 = v43 + v42;
    }
    if (v43 + v42 >= v48) {
      NSUInteger v50 = *a7;
    }
    else {
      NSUInteger v50 = v43 + v42;
    }
    *(unsigned char *)(a1 + 856) = v29;
    int v51 = sub_10013D1A8(a1, a3 & 0xFFFFFFFFFFFFFFFELL, v50, v49 - v50, *(void **)(a1 + 816), (uint64_t)v111, (uint64_t)&v119, buf, (unsigned __int8 *)&v115);
    int v52 = v119;
    int v53 = (unsigned __int16)*v111;
    unint64_t v54 = *a7;
    uint64_t v55 = sub_10013F38C(a1);
    if (v52) {
      BOOL v57 = v53 == 5;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57) {
      int v58 = 0;
    }
    else {
      int v58 = v51 ^ 1;
    }
    char v59 = sub_100146750(a1, v58, v54, v55, (uint64_t)v134, a9, v56, v47, v106, (double *)&v123, &v124, &v122, a4, &v121, &v120);

    if ((v59 & 1) == 0 || (unsigned int v60 = v120, v120 > 0xF))
    {
      v107 = [*(id *)(a1 + 816) columns];
      if (*(void *)(a1 + 248))
      {
        uint64_t v63 = 0;
        unsigned int v64 = 0;
        v105 = a7;
        do
        {
          uint64_t v65 = [v107 objectAtIndexedSubscript:v64 + *a7];
          __int16 v66 = v65;
          if (a3)
          {
            [v65 frameBounds];
            v137.origin.double x = v67;
            v137.origin.double y = v68;
            v137.size.CGFloat width = v69;
            v137.size.CGFloat height = v70;
            if (CGRectEqualToRect(*(CGRect *)&v134[88 * v63 + 16], v137))
            {
              double v71 = sub_100143C68(a1, (uint64_t ***)&v134[88 * v63], (uint64_t *)[v66 lineFragmentArray], v66, a3, *(double *)&v134[88 * v63 + 80]);
            }
            else
            {
              [v66 erasableBounds:0];
              CGFloat v76 = v75;
              CGFloat v78 = v77;
              CGFloat v80 = v79;
              CGFloat v82 = v81;
              if (v66) {
                [v66 transformToWP];
              }
              else {
                memset(&v118, 0, sizeof(v118));
              }
              v135.origin.double x = v76;
              v135.origin.double y = v78;
              v135.size.CGFloat width = v80;
              v135.size.CGFloat height = v82;
              CGRect v138 = CGRectApplyAffineTransform(v135, &v118);
              CGRect v136 = CGRectUnion(*(CGRect *)&v134[88 * v63 + 48], v138);
              double v71 = sub_100146CEC(v136.origin.x, v136.origin.y, v136.size.width, v136.size.height, v136.origin.x, v136.origin.y, v136.size.width, v136.size.height, v83, v66, 0, 0);
            }
            double v84 = v71;
            double v85 = v72;
            double v86 = v73;
            double v87 = v74;
            memset(buf, 0, 48);
            if (v66) {
              [v66 transformFromWP];
            }
            +[CRLWPLayoutManager setTransformForColumn:andInvalidateWPRect:inTarget:](CRLWPLayoutManager, "setTransformForColumn:andInvalidateWPRect:inTarget:", v66, *(void *)(a1 + 816), v84, v85, v86, v87);
            long long v116 = 0u;
            long long v117 = 0u;
            long long v115 = 0u;
            if (v66) {
              [v66 transformFromWP];
            }
            v114[1] = *(_OWORD *)&buf[16];
            v114[2] = *(_OWORD *)&buf[32];
            v113[0] = v115;
            v113[1] = v116;
            v113[2] = v117;
            v114[0] = *(_OWORD *)buf;
            if (!sub_10007F73C((double *)v114, (double *)v113))
            {
              unsigned int v88 = +[CRLAssertionHandler _atomicIncrementAssertCount];
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014D92C0);
              }
              double v89 = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v125 = 67109890;
                unsigned int v126 = v88;
                __int16 v127 = 2082;
                v128 = "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlag"
                       "s, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)";
                __int16 v129 = 2082;
                v130 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
                __int16 v131 = 1024;
                int v132 = 3700;
                _os_log_error_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Computed transform differs by more than translation", v125, 0x22u);
              }
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014D92E0);
              }
              double v90 = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)v90, OS_LOG_TYPE_ERROR))
              {
                CGRect v93 = +[CRLAssertionHandler packedBacktraceString];
                *(_DWORD *)uint64_t v125 = 67109378;
                unsigned int v126 = v88;
                __int16 v127 = 2114;
                v128 = v93;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v90, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v125, 0x12u);
              }
              double v91 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)"];
              CGRect v92 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
              +[CRLAssertionHandler handleFailureInFunction:v91 file:v92 lineNumber:3700 isFatal:0 description:"Computed transform differs by more than translation"];
            }
            a7 = v105;
          }

          uint64_t v63 = ++v64;
        }
        while (*(void *)(a1 + 248) > (unint64_t)v64);
      }
      *a7 = v47;
      if (v52)
      {
        sub_10013F57C(a1);
        uint64_t v94 = *a7;
        *(void *)(a1 + 240) = v94;
        *(void *)(a1 + 256) = v94;
        if (*v111 == 5) {
          char v95 = 1;
        }
        else {
          char v95 = v51;
        }
        uint64_t v96 = 1;
        if ((v95 & 1) == 0 && *a4 < a8 && *(void *)(a1 + 80) < *(void *)(a1 + 40))
        {
          uint64_t v97 = sub_100061D68((uint64_t)v104);
          unsigned __int8 v98 = [v97 alwaysStartsNewTarget];

          if (v98) {
            goto LABEL_72;
          }
          uint64_t v96 = 0;
          ++*a5;
        }
      }
      else
      {
LABEL_72:
        uint64_t v96 = 1;
      }

      goto LABEL_75;
    }
    _WORD *v111 = 0;
    unsigned __int8 v119 = 0;
    *(void *)(a1 + 256) = *a7;
    unsigned int v120 = v60 + 1;
    uint64_t v61 = sub_10013F38C(a1);
    sub_10013EFF4(a1, v61);
    sub_1002947F0(*(void *)(a1 + 824));
  }

  uint64_t v96 = 1;
LABEL_75:
  sub_10013CF80(a1, v103, (uint64_t)v112);
  sub_100061D1C(v112);
  for (uint64_t i = 800; i != -80; i -= 88)
  {
    v100 = *(std::__shared_weak_count **)&v134[i];
    if (v100) {
      sub_100039CE8(v100);
    }
  }

  return v96;
}

void sub_10013CE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  uint64_t v29 = 800;
  while (1)
  {
    unint64_t v30 = *(std::__shared_weak_count **)((char *)&STACK[0x4C8] + v29);
    if (v30) {
      sub_100039CE8(v30);
    }
    v29 -= 88;
    if (v29 == -80)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_10013CF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 800);
  if (v3 == *(void *)(a1 + 792) || 0xF47E8FD1FA3F47E9 * ((v3 - *(void *)(a1 + 792)) >> 3) != a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8C60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D28C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8C80);
    }
    BOOL v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d stack size is invalid", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"const CRLWPLayoutState CRLWPLayoutChore::pPopLayoutState(size_t)");
    id v15 = +[NSString stringWithUTF8String:"const CRLWPLayoutState CRLWPLayoutChore::pPopLayoutState(size_t)"];
    id v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:776 isFatal:1 description:"stack size is invalid"];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v17, v18);
    abort();
  }
  sub_100061CB4(a3, v3 - 712);
  uint64_t result = sub_100061D1C(*(void *)(a1 + 800) - 712);
  *(void *)(a1 + 800) = result;
  return result;
}

void sub_10013D180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10013D1A8(uint64_t a1, uint64_t a2, NSUInteger a3, NSUInteger a4, void *a5, uint64_t a6, uint64_t a7, unsigned char *a8, unsigned __int8 *a9)
{
  id v62 = a5;
  uint64_t v65 = [v62 columns];
  NSUInteger v57 = a3;
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v12 = [v65 firstObject];
    uint64_t v13 = (char *)[v12 scaleTextPercent];
    BOOL v14 = (unint64_t)v13 < 0x64;
    if ((unint64_t)v13 >= 0x64) {
      id v15 = v13;
    }
    else {
      id v15 = v13 + 1;
    }
    unint64_t v64 = (unint64_t)v15;
  }
  else
  {
    BOOL v14 = 0;
    double v16 = *(double *)(a1 + 272);
    if (v16 == 0.0) {
      double v17 = 100.0;
    }
    else {
      double v17 = v16 * 100.0;
    }
    unint64_t v64 = (unint64_t)v17;
  }
  char v52 = v14;
  unint64_t v50 = sub_10013C170((uint64_t *)a1, a1 + 80);
  char v55 = *(unsigned char *)(a1 + 856);
  id v18 = [v65 count];
  id v19 = (id)(v57 + a4);
  if (v57 + a4 > (unint64_t)v18)
  {
    unsigned int v58 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8BA0);
    }
    double v20 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
    {
      v86.NSUInteger location = v57;
      v86.NSUInteger length = a4;
      unint64_t v48 = NSStringFromRange(v86);
      *(_DWORD *)buf = 67110402;
      unsigned int v74 = v58;
      __int16 v75 = 2082;
      CGFloat v76 = "BOOL CRLWPLayoutChore::pLayOutColumns(CRLWPLayoutFlags, NSRange, CRLCanvasLayout<CRLWPLayoutTarget> *__stron"
            "g, unichar &, BOOL &, BOOL &, BOOL &)";
      __int16 v77 = 2082;
      CGFloat v78 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      __int16 v79 = 1024;
      int v80 = 438;
      __int16 v81 = 2048;
      id v82 = v18;
      __int16 v83 = 2114;
      double v84 = v48;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not enough columns: %lu, but need %{public}@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8BC0);
    }
    uint64_t v21 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v22 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::pLayOutColumns(CRLWPLayoutFlags, NSRange, CRLCanvasLayout<CRLWPLayoutTarget> *__strong, unichar &, BOOL &, BOOL &, BOOL &)"];
    uint64_t v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    v85.NSUInteger location = v57;
    v85.NSUInteger length = a4;
    unint64_t v24 = NSStringFromRange(v85);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v22, v23, 438, 0, "Not enough columns: %lu, but need %{public}@", v18, v24);
  }
  int v25 = 0;
  if (v19 >= v18) {
    id v19 = v18;
  }
  uint64_t v49 = 100;
  uint64_t v51 = 40;
  for (char i = v14; ; char i = 1)
  {
    int rangea = v25;
    char v56 = i;
    while (1)
    {
      char v59 = i;
      if (v56)
      {
        sub_1002947F0(*(void *)(a1 + 824));
        int v53 = [v65 firstObject];
        [v53 setScaleTextPercent:v64];
        sub_10013DB54(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
        uint64_t v27 = objc_opt_class();
        double v28 = sub_1002469D0(v27, *(void **)(a1 + 16));
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        unint64_t v54 = v28;
        uint64_t v29 = [v28 children];
        uint64_t v30 = a7;
        id v31 = [v29 countByEnumeratingWithState:&v68 objects:v72 count:16];
        if (v31)
        {
          uint64_t v32 = *(void *)v69;
          do
          {
            for (uint64_t j = 0; j != v31; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v69 != v32) {
                objc_enumerationMutation(v29);
              }
              [*(id *)(*((void *)&v68 + 1) + 8 * (void)j) invalidateTextScalePercent];
            }
            id v31 = [v29 countByEnumeratingWithState:&v68 objects:v72 count:16];
          }
          while (v31);
        }

        a7 = v30;
      }
      *(unsigned char *)(a1 + 856) = v55;
      NSUInteger v34 = v57;
      if (v57 < (unint64_t)v19)
      {
        do
        {
          *(void *)(a1 + 256) = v34;
          uint64_t v35 = [v65 objectAtIndexedSubscript:v34];
          sub_100061D60(a1 + 80, (uint64_t)v35);

          uint64_t v36 = sub_100061D58(a1 + 80);
          [v36 setScaleTextPercent:v64];

          if (!*a8)
          {
            uint64_t v38 = sub_100061D58(a1 + 80);
            [v38 setStartCharIndex:*(void *)(a1 + 80)];

            [v62 maxSize];
            double v39 = sub_100061D58(a1 + 80);
            [v39 maxSize];

            [*(id *)(a1 + 8) wpKind];
            double v40 = objc_opt_new();
            sub_10013E6F8(a1, a2, v40);
          }
          uint64_t v37 = sub_100061D58(a1 + 80);
          [v37 makeEmpty:*(void *)(a1 + 80) anchoredRange:*(void *)(a1 + 88) layoutResultFlags:0, 16 * *a9];

          ++v34;
        }
        while (v19 != (id)v34);
      }
      int v25 = rangea + 1;
      if (*(unsigned char *)(a1 + 264)) {
        break;
      }
      char i = 1;
      ++rangea;
      if ((v59 & 1) == 0) {
        goto LABEL_58;
      }
    }
    id v41 = [v65 lastObject];
    unint64_t v42 = (unint64_t)[v41 layoutResultFlags] & 3;
    if (!(v59 & 1 | (v42 != 0))) {
      break;
    }
    if (((rangea == 0) & v52) == 1)
    {
      if (v42)
      {
        char v52 = 1;
        uint64_t v49 = --v64;
        goto LABEL_56;
      }
      char v52 = 0;
      uint64_t v45 = 100;
    }
    else
    {
      if (v25 == 2 && (v52 & 1) != 0 && v42 == 0) {
        break;
      }
      uint64_t v43 = v49;
      uint64_t v44 = v51;
      if ((unint64_t)(v49 - v51) > 1)
      {
        char v52 = 0;
        if (v42) {
          uint64_t v43 = v64;
        }
        else {
          uint64_t v44 = v64;
        }
        uint64_t v49 = v43;
        uint64_t v51 = v44;
        uint64_t v45 = (unint64_t)(v44 + v43) >> 1;
      }
      else
      {
        if (!v42 || v64 == v51) {
          break;
        }
        char v52 = 0;
        uint64_t v45 = v51;
      }
    }
    unint64_t v64 = v45;
LABEL_56:
    uint64_t v46 = sub_10013F38C(a1);
    sub_10013EFF4(a1, v46);
    *a8 = 0;
  }
LABEL_58:
  sub_10013CF80(a1, v50, (uint64_t)v67);
  sub_100061D1C(v67);

  return 0;
}

void sub_10013D994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_10013DACC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013DB10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013DB54(uint64_t a1, uint64_t a2, NSUInteger a3)
{
  uint64_t v5 = a1 + 80;
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a1 + 80;
  }
  BOOL v7 = sub_100189EA4(v6 + 24, 0);

  if (!v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D93C0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D39C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D93E0);
    }
    uint64_t v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v9 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"];
    uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:5707 isFatal:0 description:"Bad paragraphEnumerator"];
  }
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 44_Block_object_dispose(&STACK[0x370], 8) = 0;
  *(void *)(v6 + 424) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = sub_100189EA4(v6 + 24, (void *)(v6 + 96));
  if (a3 != 0x7FFFFFFFFFFFFFFFLL) {
    sub_10013ACE0((NSRange *)v6, a3);
  }
  uint64_t v12 = *(void *)v6;
  unint64_t v13 = *(void *)(v6 + 96);
  unint64_t v14 = *(void *)(v6 + 104);
  BOOL v15 = *(void *)v6 < v13 || *(void *)v6 - v13 >= v14;
  if (v15 && (v12 != v14 + v13 || v12 != *(void *)(a1 + 64)))
  {
    unsigned int v16 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9400);
    }
    double v17 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v75 = *(void *)v6;
      NSStringFromRange(*(NSRange *)(v6 + 96));
      *(_DWORD *)buf = 67110402;
      unsigned int v78 = v16;
      __int16 v79 = 2082;
      int v80 = "void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)";
      __int16 v81 = 2082;
      id v82 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      __int16 v83 = 1024;
      int v84 = 5727;
      __int16 v85 = 2048;
      uint64_t v86 = v75;
      v88 = __int16 v87 = 2114;
      CGFloat v76 = (void *)v88;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v17, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex %lu is outside of paragraphRange: %{public}@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9420);
    }
    id v18 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v19 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"];
    double v20 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    uint64_t v21 = *(void *)v6;
    uint64_t v22 = NSStringFromRange(*(NSRange *)(v6 + 96));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v19, v20, 5727, 0, "charIndex %lu is outside of paragraphRange: %{public}@", v21, v22);

    unint64_t v13 = *(void *)(v6 + 96);
    unint64_t v14 = *(void *)(v6 + 104);
  }
  unint64_t v23 = v14 + v13;
  unint64_t v24 = *(void *)(a1 + 64);
  if (v23 > v24) {
    *(void *)(v6 + 104) = v24 - v13;
  }
  *(void *)(v6 + 20_Block_object_dispose(&STACK[0x370], 8) = sub_100189FF8(v6 + 24);
  *(unsigned char *)(v6 + 256) = 0;
  *(unsigned char *)(v6 + 456) = *(void *)v6 == *(void *)(v6 + 96);
  double v25 = *(double *)(v6 + 192);
  if (v25 == 0.0)
  {
    NSUInteger v26 = sub_100061D58(v6);
    id v27 = [v26 scaleTextPercent];

    double v28 = (double)(unint64_t)v27;
  }
  else
  {
    double v28 = v25 * 100.0;
  }
  uint64_t v29 = sub_100061D48(v6);
  BOOL v30 = v11 == v29;

  if (!v30)
  {
    sub_100061D50(v6, v11);
    [v11 floatValueForProperty:49];
    *(double *)(v6 + 296) = v31;
    [v11 floatValueForProperty:48];
    *(double *)(v6 + 304) = v32;
    uint64_t v33 = (objc_class *)objc_opt_class();
    NSUInteger v34 = [v11 valueForProperty:40];
    uint64_t v35 = sub_10024715C(v33, v34);

    if (v35) {
      [v35 amount];
    }
    else {
      double v36 = 1.0;
    }
    *(double *)(v6 + 28_Block_object_dispose(&STACK[0x370], 8) = v36;
    *(void *)(v6 + 272) = [v35 mode];
    [v35 baselineRule];
    *(void *)(v6 + 280) = v37;
    [v11 floatValueForProperty:39];
    *(double *)(v6 + 216) = v38;
    [v11 floatValueForProperty:47];
    *(double *)(v6 + 224) = v39;
    [v11 floatValueForProperty:33];
    *(double *)(v6 + 232) = v40;
    *(unsigned char *)(v6 + 352) = [v11 intValueForProperty:35] != 0;
    uint64_t v41 = objc_opt_class();
    unint64_t v42 = [v11 valueForProperty:51];
    uint64_t v43 = sub_1002469D0(v41, v42);
    sub_100061DA0(v6, (uint64_t)v43);

    [v11 floatValueForProperty:31];
    double v45 = v44;
    BOOL v46 = v44 == 0.0;
    double v47 = 36.0;
    if (!v46) {
      double v47 = v45;
    }
    *(double *)(v6 + 40_Block_object_dispose(&STACK[0x370], 8) = v47;
    unint64_t v48 = *(void **)(a1 + 848);
    *(void *)(a1 + 84_Block_object_dispose(&STACK[0x370], 8) = 0;

    if (!*(unsigned char *)(v6 + 352)) {
      goto LABEL_50;
    }
    uint64_t v49 = objc_opt_class();
    unint64_t v50 = [v11 valueForProperty:15];
    uint64_t v51 = sub_1002469D0(v49, v50);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      || [v51 isEqualToString:@"__multilingual"])
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
LABEL_49:

LABEL_50:
        unint64_t v54 = *(void **)(a1 + 848);
        if (!v54) {
          *(unsigned char *)(v6 + 352) = 0;
        }
        sub_100061DDC(v6, v54);

        goto LABEL_53;
      }
      id v52 = [*(id *)(a1 + 816) hyphenationLocale];
    }
    else
    {
      if (!v51 || ([v51 isEqualToString:@"__none"] & 1) != 0) {
        goto LABEL_49;
      }
      id v52 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:v51];
    }
    int v53 = *(void **)(a1 + 848);
    *(void *)(a1 + 84_Block_object_dispose(&STACK[0x370], 8) = v52;

    goto LABEL_49;
  }
LABEL_53:
  double v55 = (float)((float)(unint64_t)v28 / 100.0);
  *(float64x2_t *)(v6 + 320) = vmulq_n_f64(*(float64x2_t *)(v6 + 296), v55);
  if (!*(void *)(v6 + 272)) {
    double v55 = 1.0;
  }
  *(double *)(v6 + 312) = *(double *)(v6 + 288) * v55;
  sub_100061D90(v5, *(void **)(a1 + 8));
  char v56 = sub_10018A008(v6 + 24);
  sub_100061D80(v6, v56);

  NSUInteger v57 = sub_100061D78(v6);
  [v57 labelIndentForLevel:*(void *)(v6 + 208)];
  *(double *)(v6 + 24_Block_object_dispose(&STACK[0x370], 8) = v58;

  char v59 = sub_100061D78(v6);
  [v59 textIndentForLevel:*(void *)(v6 + 208)];
  float v61 = v60;

  double v62 = *(double *)(v6 + 248) + v61;
  *(double *)(v6 + 240) = v62;
  *(double *)(v6 + 264) = v62 + *(double *)(v6 + 216);
  uint64_t v63 = sub_100061D78(v6);
  if (!v63) {
    goto LABEL_59;
  }
  if (!sub_10018A0D4(v6 + 24))
  {
    BOOL v64 = [*(id *)(a1 + 8) characterAtIndex:*(void *)(v6 + 96) - 1] == 11;

    if (!v64) {
      goto LABEL_60;
    }
LABEL_59:
    *(unsigned char *)(v6 + 34_Block_object_dispose(&STACK[0x370], 8) = 0;
    *(unsigned char *)(v6 + 350) = 0;
    goto LABEL_70;
  }

LABEL_60:
  uint64_t v65 = sub_100061D78(v6);
  *(unsigned char *)(v6 + 34_Block_object_dispose(&STACK[0x370], 8) = [v65 labelTypeForLevel:*(void *)(v6 + 208)] != 0;

  int v66 = *(unsigned __int8 *)(v6 + 348);
  if (*(unsigned char *)(v6 + 348)
    || (sub_100061D78(v6),
        uint64_t v65 = objc_claimAutoreleasedReturnValue(),
        [v65 textIndentForLevel:*(void *)(v6 + 208)],
        v67 > 0.0)
    || *(double *)(v6 + 248) > 0.0)
  {
    *(unsigned char *)(v6 + 350) = sub_10018A0BC(v6 + 24);
    if (v66) {
      goto LABEL_70;
    }
  }
  else
  {
    *(unsigned char *)(v6 + 350) = 0;
  }

LABEL_70:
  *(unsigned char *)(v6 + 349) = sub_10018A0BC(v6 + 24);
  id v68 = sub_100146270(a1, v11);
  *(void *)(v6 + 400) = v68;
  if (v68 == (id)4) {
    *(void *)(v6 + 400) = *(unsigned __int8 *)(v6 + 349);
  }
  *(_WORD *)(v6 + 432) = 0;
  *(unsigned char *)(v6 + 434) = 0;
  uint64_t v70 = *(void *)(v6 + 96);
  uint64_t v69 = *(void *)(v6 + 104);
  if (v70 != sub_100294870(*(void *)(a1 + 824)) || v69 != v71) {
    (*(void (**)(void))(**(void **)(a1 + 824) + 24))(*(void *)(a1 + 824));
  }
  if (__CFADD__(*(void *)(v6 + 96), *(void *)(v6 + 104)))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9440);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D314();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9460);
    }
    double v72 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v72, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v73 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"];
    unsigned int v74 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v73 file:v74 lineNumber:5956 isFatal:0 description:"Bad _state.paragraphRange.length"];
  }
}

void sub_10013E5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013E6F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(a1 + 816) autosizeFlags];
  sub_10013F944(a1);
  sub_10013C170((uint64_t *)a1, a1 + 80);
  uint64_t v5 = sub_100061D58(a1 + 80);
  uint64_t v6 = *((void *)[v5 lineFragmentArray] + 1);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }

  BOOL v7 = sub_100061D58(a1 + 80);
  [v7 contentBlockBottom];

  int v8 = *(unsigned __int8 *)(a1 + 264);
  uint64_t v9 = sub_100061D58(a1 + 80);
  *(unsigned char *)(a1 + 265) = (([v9 layoutResultFlags] >> 8) & 1) != v8;

  operator new();
}

void sub_10013EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11)
{
  unint64_t v14 = *(std::__shared_weak_count **)(v12 - 176);
  if (v14) {
    sub_100039CE8(v14);
  }
  if (a11) {
    sub_100039CE8(a11);
  }

  _Unwind_Resume(a1);
}

char *sub_10013EF64(uint64_t a1)
{
  uint64_t v2 = sub_100061D58(a1 + 80);
  uint64_t v3 = (char *)[v2 range];
  uint64_t v5 = v4;

  uint64_t result = (char *)[*(id *)(a1 + 8) characterCount];
  if (&v3[v5] < result)
  {
    return (char *)sub_100145C60(a1);
  }
  return result;
}

void sub_10013EFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013EFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 80;
  char v5 = *(unsigned char *)(a1 + 584);
  if (a1 + 80 == a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9480);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D4AC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D94A0);
    }
    uint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v7 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pRestoreState(const CRLWPLayoutState &)"];
    int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:6002 isFatal:0 description:"We should not restore from our own object."];
  }
  if (*(void *)(a2 + 96) == *(void *)(a1 + 176) && *(void *)(a2 + 104) == *(void *)(a1 + 184))
  {
    char v11 = *(unsigned char *)(a1 + 512);
    char v12 = *(unsigned char *)(a1 + 513);
    char v13 = *(unsigned char *)(a1 + 514);
    unint64_t v14 = *(void *)(a1 + 528);
    sub_100061D20(v4, a2);
    *(unsigned char *)(a1 + 512) = v11;
    *(unsigned char *)(a1 + 513) = v12;
    *(unsigned char *)(a1 + 514) = v13;
    unint64_t v10 = *(void *)(a1 + 520);
    if (!v10)
    {
      *(void *)(a1 + 520) = v14;
      unint64_t v10 = v14;
    }
  }
  else
  {
    sub_100061D20(v4, a2);
    unint64_t v10 = *(void *)(a1 + 520);
  }
  *(unsigned char *)(a1 + 584) = v5;
  unint64_t v15 = *(void *)(a1 + 184);
  if (v10 > v15 || *(void *)(a1 + 528) > v15)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D94C0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D424();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D94E0);
    }
    unsigned int v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v17 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pRestoreState(const CRLWPLayoutState &)"];
    id v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v17 file:v18 lineNumber:6025 isFatal:0 description:"Bad _typesetterCharIndex"];
  }
}

void sub_10013F350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10013F38C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 800);
  if (*(void *)(a1 + 792) == v1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8CA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D534();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8CC0);
    }
    uint64_t v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d _pushedStates stack is empty", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"const CRLWPLayoutState &CRLWPLayoutChore::pTopLayoutState() const");
    char v11 = +[NSString stringWithUTF8String:"const CRLWPLayoutState &CRLWPLayoutChore::pTopLayoutState() const"];
    char v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:787 isFatal:1 description:"_pushedStates stack is empty"];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v13, v14);
    abort();
  }
  return v1 - 712;
}

void sub_10013F554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F57C(uint64_t a1)
{
  uint64_t v2 = a1 + 80;
  uint64_t v3 = [*(id *)(a1 + 816) columnMetricsForCharIndex:*(void *)(a1 + 80) outRange:a1 + 192];
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9380);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D5BC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D93A0);
    }
    uint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v5 = +[NSString stringWithUTF8String:"void CRLWPLayoutChore::pSetUpStateForColumnMetrics()"];
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 5682, 0, "invalid nil value for '%{public}s'", "newColumnMetrics");
  }
  uint64_t v7 = sub_100061D68(v2);
  if (v3) {
    BOOL v8 = v3 == v7;
  }
  else {
    BOOL v8 = 0;
  }
  int v9 = !v8;

  if (v9)
  {
    sub_100061D70(v2, (uint64_t)v3);
    *(void *)(a1 + 272) = 0;
    uint64_t v10 = sub_100061D68(v2);
    BOOL v11 = v10 == 0;

    if (v11)
    {
      long long v22 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
      *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x370], 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
      *(_OWORD *)(a1 + 224) = v22;
      id v23 = [*(id *)(a1 + 8) characterCount];
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = v23;
      *(void *)(a1 + 24_Block_object_dispose(&STACK[0x370], 8) = 1;
      *(unsigned char *)(a1 + 264) = 0;
    }
    else
    {
      [v3 adjustedInsetsForTarget:*(void *)(a1 + 816)];
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x370], 8) = v12;
      *(void *)(a1 + 216) = v13;
      *(void *)(a1 + 224) = v14;
      *(void *)(a1 + 232) = v15;
      unsigned int v16 = sub_100061D68(v2);
      *(void *)(a1 + 24_Block_object_dispose(&STACK[0x370], 8) = [v16 columnCount];

      double v17 = sub_100061D68(v2);
      *(unsigned char *)(a1 + 264) = [v17 shrinkTextToFit];

      id v18 = sub_100061D68(v2);
      char v19 = objc_opt_respondsToSelector();

      if (v19)
      {
        double v20 = sub_100061D68(v2);
        [v20 textScaleFactor];
        *(void *)(a1 + 272) = v21;
      }
    }
  }
  *(void *)(a1 + 256) = 0;
}

void sub_10013F844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10013F8BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013F900(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013F944(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 56) > 2u)
  {
    uint64_t v2 = sub_100061D58(a1 + 80);

    if (v2)
    {
      sub_100061D58(a1 + 80);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
      [v4 frameBounds];
      *(void *)(a1 + 416) = v3;
    }
    else
    {
      *(void *)(a1 + 416) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 416) = 0xFFF0000000000000;
  }
}

void sub_10013F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10013FA00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FA44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FA88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FACC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FB10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FB54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10013FB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  v3;
  [*(id *)(v2 + 8) wpKind];
  operator new();
}

void sub_100143578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (STACK[0x588]) {
    sub_100039CE8((std::__shared_weak_count *)STACK[0x588]);
  }

  _Unwind_Resume(a1);
}

double sub_100143C68(uint64_t a1, uint64_t ***a2, uint64_t *a3, void *a4, char a5, double a6)
{
  id v10 = a4;
  double x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  unsigned int v16 = *(uint64_t **)*a3;
  uint64_t v15 = *(uint64_t **)(*a3 + 8);
  uint64_t v71 = a2;
  id v18 = **a2;
  double v17 = (*a2)[1];
  unsigned __int8 v68 = [*(id *)(a1 + 832) isEmpty];
  uint64_t v67 = a1;
  char v19 = *(void **)(a1 + 832);
  uint64_t v70 = a3;
  NSUInteger v20 = sub_100039C84(*a3);
  long long v22 = [v19 dirtyRangesIntersecting:v20, v21];
  range2_8 = v22;
  if (!v22)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9500);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D900();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9520);
    }
    id v23 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    unint64_t v24 = +[NSString stringWithUTF8String:"CGRect CRLWPLayoutChore::pCompareLineFragments(const line_fragment_array_ptr &, const line_fragment_array_ptr &, CRLWPColumn *__strong, CGFloat, CRLWPLayoutFlags)"];
    double v25 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v24, v25, 6063, 0, "invalid nil value for '%{public}s'", "pertinentDirtyRanges");

    long long v22 = 0;
  }
  id range2 = [v22 superRange];
  NSUInteger v27 = v26;
  id location = [v22 delta];
  uint64_t v29 = (uint64_t)location;
  while (1)
  {
    while (v16 != v15)
    {
      uint64_t v30 = *v16;
      if (v18 == v17)
      {
        if (v30)
        {
          LODWORD(v36) = (*(unsigned __int8 *)(v30 + 24) >> 3) & 1;
LABEL_30:
          double v42 = sub_100146CEC(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), (uint64_t)location, v10, 1, v36);
LABEL_31:
          double x = v42;
          CGFloat y = v43;
          CGFloat width = v44;
          CGFloat height = v45;
          v16 += 2;
        }
      }
      else
      {
        uint64_t v31 = *v18;
        if (v30)
        {
          unint64_t v37 = *(void *)(v30 + 24);
          uint64_t v36 = (v37 >> 3) & 1;
          if (!v31) {
            goto LABEL_30;
          }
          double v38 = *(double *)(v31 + 48);
          double v39 = *(double *)(v30 + 48);
          if (v38 < v39) {
            goto LABEL_32;
          }
          if (v38 > v39) {
            goto LABEL_29;
          }
          double v40 = *(double *)(v31 + 40);
          double v41 = *(double *)(v30 + 40);
          if (v40 < v41)
          {
LABEL_32:
            double v32 = sub_100146CEC(x, y, width, height, *(CGFloat *)(v31 + 72), *(CGFloat *)(v31 + 80), *(CGFloat *)(v31 + 88), *(CGFloat *)(v31 + 96), (uint64_t)location, v10, 1, (v37 >> 3) & 1);
            goto LABEL_20;
          }
          if (v40 > v41)
          {
LABEL_29:
            double v42 = sub_100146CEC(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), (uint64_t)location, v10, 1, (v37 >> 3) & 1);
            goto LABEL_31;
          }
          if ((a5 & 0x40) != 0)
          {
            id location = (id)sub_10015D3CC(*v16, *v18, 0);
            if (location) {
              goto LABEL_48;
            }
            goto LABEL_50;
          }
          BOOL v46 = (v37 & 0x8000000000000000) != 0;
          double v47 = &xmmword_101176F48;
          if (!v46) {
            double v47 = (long long *)*v16;
          }
          NSRange v66 = (NSRange)*v47;
          if (v68) {
            goto LABEL_40;
          }
          NSUInteger v48 = v66.location + v66.length;
          if (v66.location + v66.length >= (unint64_t)range2 || v48 > *(void *)(v67 + 64))
          {
            if (v48 <= (unint64_t)range2 + v27) {
              goto LABEL_48;
            }
LABEL_40:
            if (sub_10015D3CC(v30, v31, v29)) {
              goto LABEL_48;
            }
            v74.id location = (NSUInteger)range2;
            v74.NSUInteger length = v27;
            NSRange v49 = NSIntersectionRange(v66, v74);
            id location = (id)v49.location;
            if (v49.length)
            {
              double v50 = sub_100146CEC(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), v49.location, v10, 1, v36);
LABEL_49:
              double x = v50;
              CGFloat y = v51;
              CGFloat width = v52;
              CGFloat height = v53;
              goto LABEL_50;
            }
            goto LABEL_50;
          }
          id location = (id)sub_10015D3CC(v30, v31, 0);
          if (location)
          {
LABEL_48:
            CGRect v75 = CGRectUnion(*(CGRect *)(v31 + 72), *(CGRect *)(v30 + 72));
            double v50 = sub_100146CEC(x, y, width, height, v75.origin.x, v75.origin.y, v75.size.width, v75.size.height, v54, v10, 1, v36);
            goto LABEL_49;
          }
LABEL_50:
          v16 += 2;
LABEL_21:
          v18 += 2;
        }
        else if (v31)
        {
          goto LABEL_19;
        }
      }
    }
    if (v18 == v17) {
      break;
    }
    uint64_t v31 = *v18;
    if (*v18)
    {
LABEL_19:
      double v32 = sub_100146CEC(x, y, width, height, *(CGFloat *)(v31 + 72), *(CGFloat *)(v31 + 80), *(CGFloat *)(v31 + 88), *(CGFloat *)(v31 + 96), (uint64_t)location, v10, 1, 0);
LABEL_20:
      double x = v32;
      CGFloat y = v33;
      CGFloat width = v34;
      CGFloat height = v35;
      goto LABEL_21;
    }
  }
  if (sub_1000399F8(*v71) && sub_1000399F8((void *)*v70))
  {
    double v55 = range2_8;
  }
  else
  {
    [v10 frameBounds];
    CGFloat v57 = v56;
    CGFloat v59 = v58;
    CGFloat v61 = v60;
    double v55 = range2_8;
    id v62 = [v10 contentBlockBottom];
    if (v63 >= a6)
    {
      id v62 = [v10 contentBlockBottom];
      a6 = v64;
    }
    if (a6 - v59 != 0.0) {
      double x = sub_100146CEC(x, y, width, height, v57, v59, v61, a6 - v59, (uint64_t)v62, v10, 1, 0);
    }
  }

  return x;
}

void sub_1001442E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10014438C(uint64_t a1@<X0>, char a2@<W2>, unsigned char *a3@<X3>, uint64_t **a4@<X4>, uint64_t **a5@<X5>, _WORD *a6@<X6>, unsigned char *a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  uint64_t v12 = a6;
  uint64_t v14 = a3;
  unsigned int v16 = a8;
  *a8 = 0;
  a8[1] = 0;
  *(double *)(a1 + 544) = a9;
  *(double *)(a1 + 552) = a10;
  *(double *)(a1 + 560) = a11;
  *(double *)(a1 + 56_Block_object_dispose(&STACK[0x370], 8) = a12;
  if (a11 < 0.0) {
    *(void *)(a1 + 560) = 0;
  }
  double v17 = (NSRange *)(a1 + 80);
  a3[169] = a2;
  a3[170] = a2 ^ 1;
  id v18 = *a4;
  if (*a4 == *a5)
  {
    long long v22 = 0;
    goto LABEL_34;
  }
  char v19 = v16;
  NSUInteger location = v17->location;
  while (1)
  {
    long long v22 = (double *)*v18;
    NSUInteger v23 = *(void *)*v18;
    if (v23 >= location) {
      break;
    }
    v18 += 2;
    *a4 = v18;
    if (v18 == *a5)
    {
      long long v22 = 0;
      uint64_t v12 = a6;
      unsigned int v16 = v19;
      goto LABEL_34;
    }
  }
  CGFloat v59 = v19;
  uint64_t v24 = sub_100152BC0((uint64_t)v22);
  uint64_t v25 = v14[8];
  unint64_t v26 = *((void *)v22 + 3);
  int v57 = *(unsigned __int8 *)(a1 + 431);
  int v58 = *(unsigned __int8 *)(a1 + 513);
  int v56 = *(unsigned __int8 *)(a1 + 432);
  unint64_t v55 = *(void *)(a1 + 32);
  NSUInteger v27 = sub_100061DC4(a1 + 80);
  BOOL v28 = (v24 | v25 & 0x10000) == 0;

  if (location != v23)
  {
    uint64_t v12 = a6;
    unsigned int v16 = v59;
    goto LABEL_32;
  }
  uint64_t v12 = a6;
  if (v28 || v58)
  {
    unsigned int v16 = v59;
LABEL_32:
    uint64_t v14 = a3;
    goto LABEL_33;
  }
  BOOL v29 = (v26 & 4) == 0 && ((v26 >> 17) & 1) == (v56 & v57);
  uint64_t v14 = a3;
  if (!v29)
  {
    unsigned int v16 = v59;
LABEL_33:
    double v17 = (NSRange *)(a1 + 80);
    goto LABEL_34;
  }
  unsigned int v16 = v59;
  if (((v26 >> 13) & 1) != ((v55 >> 4) & 1) || v27) {
    goto LABEL_33;
  }
  if (v22[5] != *(double *)(a1 + 544) || v22[6] != *(double *)(a1 + 552)) {
    goto LABEL_33;
  }
  double v17 = (NSRange *)(a1 + 80);
  if (v22[7] == *(double *)(a1 + 560))
  {
    uint64_t v31 = **a4;
    uint64_t v32 = (*a4)[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    double v33 = (std::__shared_weak_count *)v59[1];
    *CGFloat v59 = v31;
    v59[1] = v32;
    if (v33)
    {
      sub_100039CE8(v33);
      uint64_t v31 = *v59;
    }
    sub_10015D3BC(v31);
  }
LABEL_34:
  v14[22] = v22;
  if (!*v16) {
    operator new();
  }
  v14[28] = *v16;
  NSUInteger v34 = sub_1002A2448(*(void *)(a1 + 824), (uint64_t)v14);
  sub_10013ACE0(v17, v34);
  unint64_t v35 = *(void *)(a1 + 184) + *(void *)(a1 + 176);
  if (*(void *)(a1 + 80) > v35)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8CE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107DB34();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8D00);
    }
    uint64_t v36 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    unint64_t v37 = +[NSString stringWithUTF8String:"line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"];
    double v38 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v37 file:v38 lineNumber:1855 isFatal:0 description:"Bad _state.charIndex"];

    unint64_t v35 = *(void *)(a1 + 184) + *(void *)(a1 + 176);
  }
  uint64_t v39 = *v16;
  if (*(uint64_t *)(*v16 + 24) < 0) {
    double v40 = &xmmword_101176F48;
  }
  else {
    double v40 = (long long *)*v16;
  }
  if (*(void *)v40 + *((void *)v40 + 1) > v35)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8D20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107DAAC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8D40);
    }
    double v41 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v42 = +[NSString stringWithUTF8String:"line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"];
    double v43 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v42 file:v43 lineNumber:1856 isFatal:0 description:"Bad line end"];

    uint64_t v39 = *v16;
  }
  double v44 = a3;
  if (!sub_100152BC0(v39) && (a3[66] & 1) == 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8D60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107DA24();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8D80);
    }
    double v45 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v46 = +[NSString stringWithUTF8String:"line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"];
    double v47 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v46 file:v47 lineNumber:1857 isFatal:0 description:"Bad glyphCount"];

    double v44 = a3;
  }
  uint64_t v48 = *v16;
  if (!*v16)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8DA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107D99C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D8DC0);
    }
    NSRange v49 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v49, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v50 = +[NSString stringWithUTF8String:"line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"];
    double v51 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v50 file:v51 lineNumber:1859 isFatal:0 description:"failed to create a line fragment"];

    uint64_t v48 = *v16;
    double v44 = a3;
  }
  if ((v44[40] & 4) != 0)
  {
    double v52 = *(double *)(v48 + 240);
    if (*(double *)(a1 + 576) >= v52) {
      double v52 = *(double *)(a1 + 576);
    }
    *(double *)(a1 + 576) = v52;
  }
  *a7 = 0;
  *uint64_t v12 = 0;
  BOOL v29 = (*(void *)(v48 + 24) & 0x2004800) == 33570816;
  *(unsigned char *)(a1 + 336) = v29;
  if (!v29)
  {
    if (sub_100144F50(a1, v48, 0, *((unsigned __int16 *)v44 + 116), *((void *)v44 + 30)).super.isa) {
      sub_10014515C(a1);
    }
    int v53 = *((unsigned __int16 *)v44 + 116);
    unsigned int v54 = sub_1001CA284(*((unsigned __int16 *)v44 + 116)) ^ 1;
    if (v53 == 8232) {
      LOBYTE(v54) = 0;
    }
    if ((v54 & 1) == 0) {
      *uint64_t v12 = *((_WORD *)v44 + 116);
    }
  }
}

void sub_100144BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(std::__shared_weak_count **)(a14 + 8);
  if (v15) {
    sub_100039CE8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144CE8(uint64_t a1, uint64_t a2)
{
  sub_100147B80(&v2, a2);
}

void sub_100144D30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144D74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144DB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144DFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144E40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144E84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144EC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100144F0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CKRecordID sub_100144F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    BOOL v10 = *(double *)(a3 + 160) == 0.0;
  }
  else {
    BOOL v10 = 0;
  }
  double v11 = *(double *)(a1 + 464);
  unsigned int v12 = [*(id *)(a1 + 8) wpKind];
  if (*(void *)(a1 + 440) == 4 && v10)
  {
    double v14 = 6.0;
    if (v12 == 5) {
      double v14 = 0.0;
    }
    *(CGRect *)(a3 + 72) = CGRectInset(*(CGRect *)(a2 + 72), -fmax(v11 + v14 + *(double *)(a1 + 448), 0.0), 0.0);
  }
  if (*(void *)(a1 + 80) != *(void *)(a1 + 184) + *(void *)(a1 + 176)) {
    goto LABEL_25;
  }
  *(void *)(a1 + 632) = 0;
  result.super.isa = (Class)sub_1001CA284(a4);
  isa = result.super.isa;
  if ((uint64_t)result.super.isa)
  {
    double v19 = *(double *)(a1 + 408);
    if (v19 <= 0.0 || *(void *)(a1 + 200) + *(void *)(a1 + 192) == a5)
    {
      result.super.isa = (Class)1;
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  result.super.isa = 0;
  if (a4 == 8232 || *(void *)(a1 + 80) != *(void *)(a1 + 64)) {
    goto LABEL_26;
  }
  double v19 = *(double *)(a1 + 408);
  if (v19 <= 0.0)
  {
LABEL_25:
    result.super.isa = 0;
    goto LABEL_26;
  }
LABEL_19:
  if (v10)
  {
    *(double *)(a3 + 160) = v19 + *(double *)(a3 + 160);
    Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v38 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(result, *(Swift::String *)&v16);
    *(void *)(a3 + 40) = v20;
    *(void *)(a3 + 4_Block_object_dispose(&STACK[0x370], 8) = v21;
    *(void *)(a3 + 56) = v22;
    *(void *)(a3 + 64) = v23;
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v38.recordID, v38.recordType);
    *(void *)(a3 + 72) = v24;
    *(void *)(a3 + 80) = v25;
    *(void *)(a3 + 8_Block_object_dispose(&STACK[0x370], 8) = v26;
    *(void *)(a3 + 96) = v27;
  }
  double v31 = sub_10015D608(a2, *(void *)(a1 + 352), *(double *)(a1 + 392));
  double v32 = *(double *)(a2 + 160);
  double v33 = *(double *)(a2 + 104)
      + *(double *)(a2 + 144)
      + *(double *)(a2 + 120)
      + *(double *)(a2 + 136)
      + *(double *)(a2 + 152)
      + v32
      - v31;
  if (v33 > 0.0)
  {
    *(double *)(a1 + 632) = -fmin(v33, v32);
    if (a3)
    {
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v28, *(Swift::String *)&v29);
      *(void *)(a3 + 40) = v34;
      *(void *)(a3 + 4_Block_object_dispose(&STACK[0x370], 8) = v35;
      *(void *)(a3 + 56) = v36;
      *(void *)(a3 + 64) = v37;
    }
  }
  result.super.isa = isa;
LABEL_26:
  *(unsigned char *)(a1 + 536) = 0;
  return result;
}

BOOL sub_10014515C(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  BOOL v3 = sub_100189E50(a1 + 104);
  if (!v3)
  {
    sub_100189E20(v2);
    id v4 = sub_100189F3C(v2);
    sub_10013ACE0((NSRange *)(a1 + 80), (NSUInteger)v4);
    *(unsigned char *)(a1 + 427) = *(unsigned char *)(a1 + 426);
    sub_10013DB54(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
  }
  return !v3;
}

void sub_1001451D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145218(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014525C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001452A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001452E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145328(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014536C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001453B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001453F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014547C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001454C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145504(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLWarningCat");
  uint64_t v2 = off_10166B4B0;
  off_10166B4B0 = v1;
}

void sub_100145548(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014558C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001455D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145614(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145658(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014569C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1001456E0(uint64_t a1, char a2)
{
  double v2 = *(double *)(a1 + 400);
  double v3 = 0.0;
  if (v2 != 0.0 && *(unsigned char *)(a1 + 536) && ((a2 & 1) != 0 || *(unsigned char *)(a1 + 673)))
  {
    if (sub_10018A0D4(a1 + 104) && !*(unsigned char *)(a1 + 673))
    {
      return v2;
    }
    else
    {
      sub_100189E64(a1 + 104, (uint64_t)v11);
      uint64_t v5 = sub_100189EA4((uint64_t)v11, 0);
      sub_100189C94(v11);
      [v5 floatValueForProperty:48];
      float v7 = v6;
      BOOL v8 = sub_100061D58(a1 + 80);
      double v9 = (float)((float)(v7 * (float)(unint64_t)[v8 scaleTextPercent]) / -100.0);

      if (v2 + v9 >= 0.0) {
        double v3 = v2 + v9;
      }
      else {
        double v3 = 0.0;
      }
    }
  }
  return v3;
}

void sub_1001457D4(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10014580C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145850(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100145894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  double v3 = *(void **)(a1 + 816);
  if (v2)
  {
    id v4 = [v3 columns];
    uint64_t v5 = [v4 objectAtIndexedSubscript:*(void *)(a1 + 256) - 1];
  }
  else
  {
    uint64_t v5 = [v3 previousTargetLastColumn];
  }

  return v5;
}

void sub_100145908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100145918(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014595C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1001459A0(double *a1, uint64_t a2)
{
  double v2 = *a1;
  if (*(void *)(a2 + 272) == 2) {
    return v2 + *(double *)(a2 + 312) * *(double *)(a2 + 280);
  }
  else {
    return v2 + a1[5] + fmax(a1[2], a1[1]);
  }
}

void sub_1001459D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145A1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145A60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145AA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145AE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100145B2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100145B70(uint64_t result, unsigned char *a2, unsigned char *a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11 = result;
  int v12 = *(unsigned __int8 *)(result + 56);
  if (*(unsigned char *)(result + 56)) {
    BOOL v13 = v12 == 7;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (v12 != 3) {
      return result;
    }
    CKRecordID result = sub_100145C60(result);
    if (result) {
      return result;
    }
  }
  if (*(void *)(v11 + 80) != *(void *)(v11 + 176))
  {
    if (a4 != 4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(v11 + 472)) {
    char v14 = a6;
  }
  else {
    char v14 = 1;
  }
  if (a4 == 4 || (v14 & 1) == 0)
  {
LABEL_15:
    *a2 = 1;
    *a3 = 1;
  }
LABEL_16:
  if ((a5 & 1) != 0
    || a4 <= 0xF && ((1 << a4) & 0x9070) != 0
    || (*(unsigned char *)(v11 + 32) & 1) != 0 && (CKRecordID result = (uint64_t)sub_1001CA284(a4), a4 != 11) && result)
  {
    *a2 = 1;
  }
  return result;
}

BOOL sub_100145C60(uint64_t a1)
{
  if (![*(id *)(a1 + 8) wpKind]
    || [*(id *)(a1 + 8) wpKind] == 7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9340);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107DBBC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9360);
    }
    double v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v3 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::pIsLastColumn() const"];
    id v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:5662 isFatal:0 description:"pIsLastColumn doesn't work on the body or TOC"];
  }
  if (![*(id *)(a1 + 816) isLastTarget]) {
    return 0;
  }
  uint64_t v5 = [*(id *)(a1 + 816) columns];
  float v6 = [v5 lastObject];
  float v7 = sub_100061D58(a1 + 80);
  BOOL v8 = v6 == v7;

  return v8;
}

void sub_100145E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100145E8C(uint64_t a1, void **a2)
{
  if (!*(unsigned char *)(a1 + 674))
  {
    uint64_t v4 = sub_100039A2C(*a2);
    if (v4)
    {
      uint64_t v5 = v4;
      double v6 = *(double *)(v4 + 160);
      if (v6 != 0.0)
      {
        unint64_t v7 = *(void *)(a1 + 176);
        BOOL v9 = *(void *)v4 >= v7;
        unint64_t v8 = *(void *)v4 - v7;
        BOOL v9 = !v9 || v8 >= *(void *)(a1 + 184);
        if (v9)
        {
          BOOL v10 = sub_100146188(a1, *(void *)v4);
          [v10 floatValueForProperty:48];
          float v12 = v11;
          BOOL v13 = sub_100061D58(a1 + 80);
          double v14 = (float)((float)(v12 * (float)(unint64_t)[v13 scaleTextPercent]) / 100.0);

          double v6 = *(double *)(v5 + 160);
        }
        else
        {
          double v14 = *(double *)(a1 + 408);
        }
        double v15 = v6 >= v14 ? v14 : v6;
        double v16 = *(double *)(v5 + 32);
        uint64_t v17 = sub_1000399F8(*a2);
        if (v17)
        {
          double v18 = v6 - v15;
          unint64_t v19 = v17 - 1;
          do
          {
            uint64_t v20 = sub_100039A08(*a2, v19);
            if (*(double *)(v20 + 32) != v16) {
              break;
            }
            uint64_t v23 = v20;
            Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v40 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v20, *(Swift::String *)&v21);
            *(void *)(v23 + 40) = v24;
            *(void *)(v23 + 4_Block_object_dispose(&STACK[0x370], 8) = v25;
            *(void *)(v23 + 56) = v26;
            *(void *)(v23 + 64) = v27;
            SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v40.recordID, v40.recordType);
            *(void *)(v23 + 72) = v28;
            *(void *)(v23 + 80) = v29;
            *(void *)(v23 + 8_Block_object_dispose(&STACK[0x370], 8) = v30;
            *(void *)(v23 + 96) = v31;
            double v32 = sub_100152CD8(v23);

            if (v32)
            {
              CGFloat v33 = *(double *)(v23 + 72);
              CGFloat v34 = *(double *)(v23 + 80);
              CGFloat v35 = *(double *)(v23 + 88);
              CGFloat v36 = *(double *)(v23 + 96);
              v42.origin.double x = sub_100158764(v23);
              v42.origin.CGFloat y = v37;
              v42.size.CGFloat width = v38;
              v42.size.CGFloat height = v39;
              v41.origin.double x = v33;
              v41.origin.CGFloat y = v34;
              v41.size.CGFloat width = v35;
              v41.size.CGFloat height = v36;
              *(CGRect *)(v23 + 72) = CGRectUnion(v41, v42);
            }
            *(double *)(v23 + 160) = v18;
            --v19;
          }
          while (v19 != -1);
        }
      }
    }
  }
}

void sub_10014605C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100146078(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001460BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146100(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146144(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100146188(uint64_t a1, unint64_t a2)
{
  id v4 = sub_100189F3C(a1 + 104);
  if (a2 < (unint64_t)v4 || a2 - (unint64_t)v4 >= v5)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = [*(id *)(a1 + 24) styleProvider];
    sub_100189DF8(v11, v7, v8, 0, (char *)[*(id *)(a1 + 8) paragraphCount] - 1, 1);

    BOOL v9 = sub_100189EA4((uint64_t)v11, 0);
    sub_100189C94(v11);
  }
  else
  {
    BOOL v9 = sub_100061D48(a1 + 80);
  }

  return v9;
}

void sub_100146250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100189C94((id *)va);
  _Unwind_Resume(a1);
}

id sub_100146270(uint64_t a1, void *a2)
{
  id v3 = a2;
  signed int v4 = [v3 intValueForProperty:29];
  if (*(void *)(a1 + 816)) {
    BOOL v5 = v4 == 4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    id v6 = [*(id *)(a1 + 816) naturalAlignment];
  }
  else {
    id v6 = (id)v4;
  }

  return v6;
}

void sub_1001462CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1001462DC(uint64_t a1, unint64_t a2)
{
  id v4 = sub_100189F3C(a1 + 104);
  if (a2 >= (unint64_t)v4 && a2 - (unint64_t)v4 < v5) {
    return *(unsigned char *)(a1 + 429) != 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = [*(id *)(a1 + 24) styleProvider];
  sub_100189DF8(v11, v7, v8, 0, (char *)[*(id *)(a1 + 8) paragraphCount] - 1, 1);

  id v9 = sub_10018A0BC((uint64_t)v11);
  sub_100189C94(v11);
  return (BOOL)v9;
}

void sub_100146388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100189C94((id *)va);
  _Unwind_Resume(a1);
}

void sub_1001463A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001463EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146430(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1001464B8(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v40 = a2;
  uint64_t v7 = [v40 columns];
  CGRect v41 = v7;
  id v8 = [v7 count];
  if (*(void *)(a1 + 248))
  {
    unint64_t v9 = (unint64_t)v8;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    double v12 = 0.0;
    do
    {
      double v43 = v12;
      if (v9 > a3 + v11)
      {
        [v7 objectAtIndexedSubscript:];
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        double v14 = (uint64_t *)[v13 lineFragmentArray];
        uint64_t v15 = *v14;
        uint64_t v16 = v14[1];
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        [v13 frameBounds];
        uint64_t v42 = v17;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        uint64_t v23 = v22;
        [v13 erasableBounds:0];
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        [v13 contentBlockBottom];
        uint64_t v33 = v32;

        CGFloat v34 = (void *)(a4 + 88 * v10);
        CGFloat v35 = (std::__shared_weak_count *)v34[1];
        *CGFloat v34 = v15;
        v34[1] = v16;
        if (v35) {
          sub_100039CE8(v35);
        }
        CGFloat v36 = (void *)(a4 + 88 * v10);
        v36[2] = v42;
        v36[3] = v19;
        v36[4] = v21;
        v36[5] = v23;
        v36[6] = v25;
        v36[7] = v27;
        v36[8] = v29;
        v36[9] = v31;
        v36[10] = v33;

        uint64_t v7 = v41;
      }
      double v12 = *(double *)(a4 + 88 * v10 + 40);
      if (v43 != 0.0)
      {
        BOOL v37 = v43 == v12;
        double v12 = v43;
        if (!v37) {
          double v12 = 0.0;
        }
      }
      uint64_t v10 = ++v11;
    }
    while (*(void *)(a1 + 248) > (unint64_t)v11);
  }
  else
  {
    double v12 = 0.0;
  }
  double v38 = v12;

  return v38;
}

void sub_100146678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1001466C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014670C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100146750(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, unint64_t a8, __int16 a9, double *a10, double *a11, double *a12, double *a13, unsigned char *a14, _DWORD *a15)
{
  if (a2)
  {
    double v63 = [*(id *)(a1 + 816) columnMetricsForCharIndex:*(void *)(a1 + 80) outRange:0];
    if ([v63 alwaysStartsNewTarget])
    {
      uint64_t v21 = v63;
      goto LABEL_5;
    }
    double v60 = [*(id *)(a1 + 816) columns];
    CGFloat v61 = [v60 objectAtIndexedSubscript:a3];
    if (*(void *)(a1 + 248) == 1)
    {
      [v61 contentBlockBottom];
      double v25 = v24;
      uint64_t v26 = sub_100039A2C(*(void **)[v61 lineFragmentArray]);
      if (v26)
      {
        uint64_t v27 = v61;
        double MaxY = CGRectGetMaxY(*(CGRect *)(v26 + 40));
        if (v25 < MaxY) {
          double v25 = MaxY;
        }
      }
      else
      {
        uint64_t v27 = v61;
      }
      [v27 frameBounds];
      *a12 = fmin(ceil(v25 - v48), a6);
      uint64_t v49 = *(void *)(a1 + 816);
      uint64_t v50 = *(void *)(a1 + 8);
      id v51 = [v27 startCharIndex];
      double v52 = *a13;
      double v53 = *a12;
      id v40 = [*(id *)(a1 + 24) styleProvider];
      +[CRLWPLayoutManager fixColumnBoundsForTarget:v49 storage:v50 charIndex:v51 firstColumnIndex:a3 precedingHeight:0 height:v40 alreadyHasMargins:v52 styleProvider:v53];
      goto LABEL_35;
    }
    if (a3 <= a8) {
      unint64_t v31 = a8;
    }
    else {
      unint64_t v31 = a3;
    }
    if (a3 >= a8) {
      unint64_t v32 = a8;
    }
    else {
      unint64_t v32 = a3;
    }
    double v33 = ceil(fmax(*a10, fmin(sub_100146E94(a1, v32, v31 - v32, 0), *a11)));
    *a10 = v33;
    double v34 = *a12;
    if (*a12 < v33)
    {
      *a12 = v33;
      uint64_t v35 = *(void *)(a1 + 816);
      uint64_t v36 = *(void *)(a1 + 8);
      id v37 = [v61 startCharIndex:v34];
      double v38 = *a13;
      double v39 = *a12;
      id v40 = [*(id *)(a1 + 24) styleProvider];
      +[CRLWPLayoutManager fixColumnBoundsForTarget:v35 storage:v36 charIndex:v37 firstColumnIndex:a3 precedingHeight:0 height:v40 alreadyHasMargins:v38 styleProvider:v39];
LABEL_35:

      goto LABEL_36;
    }
    if (*a12 > v33)
    {
      if ((a9 & 0x200) == 0 || *a15 != 1)
      {
LABEL_40:
        uint64_t v23 = 1;
        *a14 = 1;
        *a11 = v34;
        *a12 = floor((v34 + *a10) * 0.5);
        unint64_t v55 = v60;
        unsigned int v54 = v61;
        if (*a10 >= *a11)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9300);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10107DC44();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9320);
          }
          int v57 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v57, OS_LOG_TYPE_ERROR))
          {
            +[CRLAssertionHandler packedBacktraceString];
            objc_claimAutoreleasedReturnValue();
            sub_1010663B0();
          }

          int v58 = +[NSString stringWithUTF8String:"BOOL CRLWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(const BOOL, const NSUInteger, const CRLWPLayoutState &, const tswpColumnErasableInfo *, uint, const NSUInteger, const CRLWPLayoutResultFlags, const CGFloat, CGFloat &, CGFloat &, CGFloat &, CGFloat &, BOOL &, uint &)"];
          CGFloat v59 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"];
          +[CRLAssertionHandler handleFailureInFunction:v58 file:v59 lineNumber:3819 isFatal:0 description:"Bad minHeight/maxHeight"];

          uint64_t v23 = 1;
        }
        goto LABEL_37;
      }
      if (*(void *)(a1 + 248))
      {
        uint64_t v41 = 0;
        unsigned int v42 = 1;
        while (1)
        {
          double v43 = [v60 objectAtIndexedSubscript:*(void *)(a4 + 176) + v41];
          [v43 contentBlockBottom];
          double v45 = v44;
          double v46 = *(double *)(a5 + 88 * v41 + 80);

          if (v45 != v46) {
            break;
          }
          uint64_t v41 = v42;
          if (*(void *)(a1 + 248) <= (unint64_t)v42++) {
            goto LABEL_36;
          }
        }
        double v34 = *a12;
        goto LABEL_40;
      }
    }
LABEL_36:
    unsigned int v54 = v61;
    [v61 frameBounds:v34];
    uint64_t v23 = 0;
    unint64_t v55 = v60;
    *a13 = CGRectGetMaxY(v64) + *(double *)(a1 + 208);
LABEL_37:

    uint64_t v21 = v63;
    goto LABEL_38;
  }
  uint64_t v21 = 0;
LABEL_5:
  if (*a14)
  {
    if ((a9 & 0x200) != 0 && *a15 == 1)
    {
      *a14 = 0;
      *a15 = 0;
      *a10 = *a12;
      double v22 = *a11;
    }
    else
    {
      double v29 = *a12 + 1.0;
      *a10 = v29;
      double v30 = fmax(*a11, v29);
      *a11 = v30;
      double v22 = rint((v30 + *a10) * 0.5);
    }
    *a12 = v22;
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 0;
  }
LABEL_38:

  return v23;
}

void sub_100146C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

double sub_100146CEC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a9, void *a10, int a11, int a12)
{
  id v22 = a10;
  uint64_t v23 = v22;
  if (a11)
  {
    [v22 frameBounds];
    v30.origin.CGFloat y = y;
    v30.size.CGFloat height = height;
    v33.origin.double x = x;
    v33.origin.CGFloat y = y;
    v33.size.CGFloat width = width;
    v33.size.CGFloat height = height;
    CGRect v31 = CGRectUnion(v30, v33);
    double x = v31.origin.x;
    CGFloat y = v31.origin.y;
    CGFloat width = v31.size.width;
    CGFloat height = v31.size.height;
  }
  if (a12) {
    double v24 = y + -6.0;
  }
  else {
    double v24 = y;
  }
  if (a12) {
    double v25 = height + 12.0;
  }
  else {
    double v25 = height;
  }
  v32.origin.double x = a1;
  v32.origin.CGFloat y = a2;
  v32.size.CGFloat width = a3;
  v32.size.CGFloat height = a4;
  CGFloat v26 = x;
  CGFloat v27 = width;
  *(void *)&double v28 = (unint64_t)CGRectUnion(v32, *(CGRect *)(&v24 - 1));

  return v28;
}

void sub_100146DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100146E0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146E50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100146E94(uint64_t a1, unint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a2 >= a2 + a3)
  {
    char v8 = 0;
    double v9 = 0.0;
    if (!a4) {
      return v9;
    }
    goto LABEL_5;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  char v8 = 0;
  double v9 = 0.0;
  do
  {
    uint64_t v10 = [*(id *)(a1 + 816) columns];
    unsigned int v11 = [v10 objectAtIndexedSubscript:v6];

    [v11 minimumHeightForLayoutOnPage];
    double v9 = fmax(v9, v12);
    v8 |= [v11 lineCount] != 0;

    ++v6;
    --v5;
  }
  while (v5);
  if (a4) {
LABEL_5:
  }
    *a4 = v8 & 1;
  return v9;
}

void sub_100146F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100146F88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100146FCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147010(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147098(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001470DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147120(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147164(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001471A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001471EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147230(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147274(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001472B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001472FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147340(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001473C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014740C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147450(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100147494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001474D8(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100061D1C(v4 - 712);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10014755C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF47E8FD1FA3F47E9 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x5C0B81702E05C0) {
    sub_100004E40();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF47E8FD1FA3F47E9 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2E05C0B81702E0) {
    unint64_t v9 = 0x5C0B81702E05C0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1001476F4(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  id v13 = v10;
  double v14 = &v10[712 * v4];
  uint64_t v16 = &v10[712 * v9];
  sub_100061CB4(v14, a2);
  uint64_t v15 = v14 + 712;
  sub_10014767C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1001477D4((uint64_t)&v13);
  return v11;
}

void sub_100147668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001477D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10014767C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100147740((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1001476F4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5C0B81702E05C1) {
    sub_100004F34();
  }
  return operator new(712 * a2);
}

uint64_t sub_100147740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 712;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 712;
    sub_100061CB4(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1001477D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 712;
    sub_100061D1C(i - 712);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100147824(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_1001478A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100147A40((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001478C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1001478FC(uint64_t a1)
{
}

uint64_t sub_100147904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100147948(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    sub_10014799C(&v2);
    operator delete();
  }
}

void sub_10014799C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100039F6C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

BOOL sub_1001479F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void ***sub_100147A40(void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10014799C(&v3);
    operator delete();
  }
  return result;
}

void *sub_100147A94(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100147B0C(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_100147AF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100147B0C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100004E40();
  }
  uint64_t result = (char *)sub_100147B4C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_100147B4C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100004F34();
  }
  return operator new(2 * a2);
}

void sub_100147B80(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100147BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100147CD4((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_100147C10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100147C48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1001524D4();
    operator delete();
  }
  return result;
}

uint64_t sub_100147C90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100147CD4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1001524D4();
    operator delete();
  }
  return result;
}

void sub_100147D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100147DAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    sub_10014877C((void **)a1, a2 - v2);
  }
}

void sub_100147E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100147FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100148088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100148240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_100148420(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v14 = *(char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 5) + 1;
    if (v15 >> 59) {
      sub_100004E40();
    }
    uint64_t v16 = __src - v14;
    uint64_t v17 = (__src - v14) >> 5;
    uint64_t v18 = v7 - (void)v14;
    if (v18 >> 4 > v15) {
      unint64_t v15 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v15;
    }
    uint64_t v34 = a1 + 16;
    if (v19) {
      uint64_t v20 = (char *)sub_100148898(a1 + 16, v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v23 = &v20[32 * v17];
    __p = v20;
    CGRect v31 = v23;
    CGRect v32 = v23;
    CGRect v33 = &v20[32 * v19];
    if (v17 == v19)
    {
      if (v16 < 1)
      {
        if (v14 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v16 >> 4;
        }
        CGFloat v26 = (char *)sub_100148898(v8, v25);
        uint64_t v23 = &v26[32 * (v25 >> 2)];
        __p = v26;
        CGRect v31 = v23;
        CGRect v33 = &v26[32 * v27];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v24 = v17 + 2;
        if (v17 >= -1) {
          unint64_t v24 = v17 + 1;
        }
        v23 -= 32 * (v24 >> 1);
        CGRect v31 = v23;
      }
    }
    long long v28 = *((_OWORD *)v3 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v3;
    *((_OWORD *)v23 + 1) = v28;
    CGRect v32 = v23 + 32;
    uint64_t v4 = (char *)sub_100148AE0((void **)a1, (uint64_t)&__p, v4);
    if (v32 != v31) {
      v32 += (v31 - v32 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v22 = *((_OWORD *)a3 + 1);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v22;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = __src + 32;
  }
  else
  {
    unint64_t v9 = __src + 32;
    uint64_t v10 = v6 - 32;
    uint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      long long v13 = *((_OWORD *)v10 + 1);
      v10 += 32;
      *uint64_t v11 = v12;
      v11[1] = v13;
      v11 += 2;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-32 * ((v6 - v9) >> 5)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 32 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    long long v21 = *((_OWORD *)v3 + 1);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v21;
  }
  return v4;
}

void sub_100148630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001486EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10014877C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)sub_100148898(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    double v14 = &v13[32 * v10];
    unint64_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_100148898(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100004F34();
  }
  return operator new(32 * a2);
}

char *sub_1001488D0(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 5);
    if (v14 >> 59) {
      sub_100004E40();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 5;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 4 > v14) {
      unint64_t v14 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v39 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_100148898(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    double v29 = &v18[32 * v15];
    __p = v18;
    uint64_t v36 = v29;
    double v38 = &v18[32 * v17];
    uint64_t v30 = 32 * a5;
    CGRect v31 = &v29[32 * a5];
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)double v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    id v37 = v31;
    uint64_t v5 = (char *)sub_100148AE0((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    long long v21 = &__src[32 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[32 * a5];
    unint64_t v25 = &v23[-32 * a5];
    CGFloat v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      CGFloat v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)CGFloat v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[32 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100148AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100148AE0(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 1);
      unint64_t v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  uint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *sub_100148BB8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 >> 59) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_100148CC4(v7, v11);
    int64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *sub_100148CC4(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100004E40();
  }
  uint64_t result = (char *)sub_100148898((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1001492CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100149310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A1B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A1F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A528(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A56C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A80C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014A850(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014AFB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014AFFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014B74C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v7 = -[CRLiOSPageTitleButton initWithTitle:insets:]([_TtC8Freeform21CRLiOSPageTitleButton alloc], "initWithTitle:insets:", v3, 0.0, 14.0, 0.0, 14.0);

  [(CRLiOSPageTitleButton *)v7 sizeToFit];
  uint64_t v4 = [(CRLiOSPageTitleButton *)v7 widthAnchor];
  [(CRLiOSPageTitleButton *)v7 frame];
  uint64_t v6 = [v4 constraintEqualToConstant:v5];
  [v6 setActive:1];

  [(CRLiOSPageTitleButton *)v7 addTarget:*(void *)(a1 + 32) action:"p_didTapButton:" forControlEvents:64];
  [*(id *)(a1 + 40) addArrangedSubview:v7];
}

void sub_10014BAB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014BAF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014C460(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014C4A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014C644(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014C688(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10014CD38(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "p_isShowingSearchBar") & 1) == 0) {
    objc_msgSend(*(id *)(a1 + 32), "p_updateUIForChangeToPageNumber:animated:completion:", objc_msgSend(*(id *)(a1 + 32), "p_currentPageNumber"), 1, 0);
  }
  [*(id *)(a1 + 32) p_updateBottomConstraintsIfNeeded];
  unint64_t v2 = *(void **)(a1 + 32);
  id v3 = [v2 crl_isInDarkMode];

  return [v2 p_updateTitlesPageControlAndBottomViewColorsInDarkUI:v3];
}

id sub_10014D418(uint64_t a1)
{
  return [*(id *)(a1 + 32) setViewControllers:*(void *)(a1 + 40) direction:0 animated:0 completion:0];
}

void sub_10014D6A4(uint64_t a1)
{
  [*(id *)(a1 + 32) p_updateBottomConstraintsIfNeeded];
  id v2 = [*(id *)(a1 + 32) view];
  [v2 layoutIfNeeded];
}

void sub_10014DA18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014DA5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10014DCCC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) viewControllers];
  [v2 p_setViewControllers:v3 shouldUpdatePageViewController:0 animated:0];

  uint64_t v4 = [*(id *)(a1 + 32) insertPageViewControllerDelegate];
  [v4 insertPageViewController:*(void *)(a1 + 32) didSelectPageNumber:*(void *)(a1 + 48)];

  if (*(unsigned char *)(a1 + 56))
  {
    UIAccessibilityNotifications v5 = UIAccessibilityPageScrolledNotification;
    [*(id *)(a1 + 32) p_titlesPageControl];
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = [v9 selectedButton];
    unint64_t v7 = [v6 titleLabel];
    uint64_t v8 = [v7 text];
    UIAccessibilityPostNotification(v5, v8);
  }
}

id sub_10014DFC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) text];
  id v3 = [v2 length];

  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    return _[v4 enableCancelButton];
  }
  else
  {
    UIAccessibilityNotifications v5 = *(void **)(a1 + 40);
    return [v5 p_endSearching];
  }
}

id sub_10014E3E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

id sub_10014E3F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.15];
}

void sub_10014E59C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    double v2 = 0.0;
  }
  else {
    double v2 = 1.0;
  }
  id v3 = [*(id *)(a1 + 32) p_searchBar];
  [v3 setAlpha:v2];

  if (*(unsigned char *)(a1 + 40)) {
    double v4 = 1.0;
  }
  else {
    double v4 = 0.0;
  }
  UIAccessibilityNotifications v5 = [*(id *)(a1 + 32) p_titlesPageControl];
  [v5 setAlpha:v4];

  if (*(unsigned char *)(a1 + 40)) {
    double v6 = 1.0;
  }
  else {
    double v6 = 0.0;
  }
  [*(id *)(a1 + 32) p_searchButton];
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [v7 setAlpha:v6];
}

uint64_t sub_10014E664(uint64_t a1, int a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 56);
  UIAccessibilityNotifications v5 = *(void **)(a1 + 32);
  if (v4)
  {
    [v5 resignFirstResponder];
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  [v5 becomeFirstResponder];
  if (a2)
  {
LABEL_3:
    uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
    id v7 = [*(id *)(a1 + 40) p_searchBar];
    [v7 setAccessibilityElementsHidden:v6];

    BOOL v8 = *(unsigned char *)(a1 + 56) == 0;
    id v9 = [*(id *)(a1 + 40) p_searchButton];
    [v9 setAccessibilityElementsHidden:v8];

    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
    unint64_t v11 = [*(id *)(a1 + 40) p_titlesPageControlScrollView];
    [v11 setAccessibilityElementsHidden:v10];

    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, 0);
  }
LABEL_4:
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    int64_t v13 = *(uint64_t (**)(void))(result + 16);
    return v13();
  }
  return result;
}

void sub_10014E948(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) insertPageViewControllerDelegate];
  [v2 insertPageViewControllerDidEndSearch:*(void *)(a1 + 32) cancelledExplicitly:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10014EB98(uint64_t a1)
{
  [*(id *)(a1 + 32) p_updateBottomConstraintsIfNeeded];
  id v2 = [*(id *)(a1 + 32) view];
  [v2 layoutIfNeeded];
}

void sub_10014ECA0(uint64_t a1)
{
  [*(id *)(a1 + 32) p_updateBottomConstraintsIfNeeded];
  id v2 = [*(id *)(a1 + 32) view];
  [v2 layoutIfNeeded];
}

id sub_100150648(uint64_t a1)
{
  return [*(id *)(a1 + 32) setP_currentPageNumber:*(void *)(a1 + 40)];
}

void sub_100150F34(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_100150FE0;
  v7[3] = &unk_1014D99D8;
  void v7[4] = v2;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v8 = v5;
  uint64_t v9 = v6;
  [v2 p_updateUIForChangeToPageNumber:v4 animated:v3 completion:v7];
}

void sub_100150FE0(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "p_shouldScrollToBottomOfPage"))
  {
    uint64_t v2 = objc_opt_class();
    uint64_t v3 = sub_1002469D0(v2, *(void **)(a1 + 40));
    [v3 scrollToBottom];
    [*(id *)(a1 + 32) setP_shouldScrollToBottomOfPage:0];
  }
  id v4 = [*(id *)(a1 + 32) insertPageViewControllerDelegate];
  [v4 insertPageViewController:*(void *)(a1 + 32) didSelectPageNumber:*(void *)(a1 + 48)];
}

uint64_t sub_100151074(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100152128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = a1 + 304;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x370], 8) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = a3;
  *(void *)(a1 + 16) = 0;
  id v4 = *(void **)(a1 + 208);
  *(_OWORD *)(a1 + 200) = 0u;

  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_1011763E8;
  *(_OWORD *)(a1 + 136) = xmmword_101176408;
  *(_OWORD *)(a1 + 152) = unk_101176418;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x370], 8) = xmmword_101176428;
  *(_OWORD *)(a1 + 184) = unk_101176438;
  *(_OWORD *)(a1 + 120) = unk_1011763F8;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 32) = 0x7FF0000000000000;
  id v5 = *(void **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = 0u;

  uint64_t v6 = *(void **)(a1 + 400);
  *(void *)(a1 + 400) = 0;

  id v7 = *(void **)(a1 + 416);
  *(void *)(a1 + 416) = 0;

  *(_DWORD *)(a1 + 376) = 0;
  CGPoint origin = CGRectNull.origin;
  CGSize size = CGRectNull.size;
  *(CGPoint *)(a1 + 40) = CGRectNull.origin;
  *(CGSize *)(a1 + 56) = size;
  *(CGPoint *)(a1 + 72) = origin;
  *(CGSize *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = size;
  BOOL v10 = *(void **)(a1 + 456);
  *(void *)(a1 + 456) = 0;

  uint64_t v11 = objc_opt_new();
  uint64_t v12 = *(void **)(a1 + 408);
  *(void *)(a1 + 40_Block_object_dispose(&STACK[0x370], 8) = v11;

  uint64_t v13 = objc_opt_new();
  unint64_t v14 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = v13;

  uint64_t v15 = objc_opt_new();
  uint64_t v16 = *(void **)(a1 + 344);
  *(void *)(a1 + 344) = v15;

  uint64_t v17 = objc_opt_new();
  uint64_t v18 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = v17;

  uint64_t v19 = objc_opt_new();
  uint64_t v20 = *(void **)(a1 + 360);
  *(void *)(a1 + 360) = v19;

  uint64_t v21 = objc_opt_new();
  int64_t v22 = *(void **)(a1 + 368);
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x370], 8) = v21;

  dispatch_semaphore_t v23 = dispatch_semaphore_create(1);
  unint64_t v24 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v23;

  dispatch_semaphore_t v25 = dispatch_semaphore_create(1);
  CGFloat v26 = *(void **)(a1 + 328);
  *(void *)(a1 + 32_Block_object_dispose(&STACK[0x370], 8) = v25;

  return a1;
}

void sub_1001522F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *(void **)(v10 + 464);
  if (v13)
  {
    *(void *)(v10 + 472) = v13;
    operator delete(v13);
  }

  unint64_t v14 = *(void **)(v10 + 432);
  if (v14)
  {
    *(void *)(v10 + 440) = v14;
    operator delete(v14);
  }

  sub_10001BC78(v11, *(void **)(v10 + 304));
  a10 = (void **)(v10 + 272);
  sub_10015F0EC(&a10);
  sub_10015F0EC(&a10);
  a10 = (void **)(v10 + 216);
  sub_10015F0EC(&a10);

  _Unwind_Resume(a1);
}

uint64_t sub_1001523C4(uint64_t a1)
{
  return sub_100152128(a1, 0x7FFFFFFFFFFFFFFFLL, 0);
}

uint64_t sub_1001523D4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x8000000000000000;
  uint64_t v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 472) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 432);
  if (v3)
  {
    *(void *)(a1 + 440) = v3;
    operator delete(v3);
  }

  sub_10001BC78(a1 + 296, *(void **)(a1 + 304));
  id v5 = (void **)(a1 + 272);
  sub_10015F0EC(&v5);
  id v5 = (void **)(a1 + 248);
  sub_10015F0EC(&v5);
  id v5 = (void **)(a1 + 216);
  sub_10015F0EC(&v5);

  return a1;
}

id sub_1001524D8(uint64_t a1)
{
  return *(id *)(a1 + 208);
}

void sub_1001524E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 208))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9A20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E084();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9A40);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v5 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::setTextSource(__strong id<CRLWPTextSource>)"];
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 171, 0, "expected nil value for '%{public}s'", "_textSource");
  }
  id v7 = *(void **)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x370], 8) = v3;
}

void sub_100152694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001526D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100152718(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015275C(uint64_t a1, uint64_t a2)
{
  id v3 = (void **)(a1 + 216);
  if (*(void *)(a1 + 224) != *(void *)(a1 + 216))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9A60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E118();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9A80);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v5 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::setLineRef(const CRLWPLineRef &)"];
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:176 isFatal:0 description:"Line ref is already set"];
  }
  return sub_1001529B8(v3, 1uLL, a2);
}

void sub_100152908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100152930(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100152974(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001529B8(void **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)*a1;
  if (0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= a2)
  {
    unint64_t v13 = ((unsigned char *)a1[1] - v6) / 104;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = ((unsigned char *)a1[1] - v6) / 104;
    }
    for (; v14; --v14)
    {
      sub_1001BAB00((uint64_t)v6, a3);
      v6 += 104;
    }
    if (a2 <= v13)
    {
      uint64_t result = (uint64_t)a1[1];
      uint64_t v18 = (uint64_t)*a1 + 104 * a2;
      while (result != v18)
        uint64_t result = sub_1001BAAFC(result - 104);
      a1[1] = (void *)v18;
    }
    else
    {
      uint64_t v15 = (char *)a1[1];
      uint64_t v16 = &v15[104 * (a2 - v13)];
      uint64_t v17 = -104 * v13 + 104 * a2;
      do
      {
        uint64_t result = sub_1001BAAC4(v15, a3);
        v15 += 104;
        v17 -= 104;
      }
      while (v17);
      a1[1] = v16;
    }
  }
  else
  {
    sub_10015F170(a1);
    if (a2 > 0x276276276276276) {
      sub_100004E40();
    }
    unint64_t v7 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
    if (v7 <= a2) {
      unint64_t v7 = a2;
    }
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
      unint64_t v8 = 0x276276276276276;
    }
    else {
      unint64_t v8 = v7;
    }
    sub_10015F1D0(a1, v8);
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = 104 * a2;
    uint64_t v11 = &v9[104 * a2];
    do
    {
      uint64_t result = sub_1001BAAC4(v9, a3);
      v9 += 104;
      v10 -= 104;
    }
    while (v10);
    a1[1] = v11;
  }
  return result;
}

void sub_100152B60(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100152B6C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[28];
  if (v3 >= a1[29])
  {
    uint64_t result = sub_10015F274(a1 + 27, a2);
  }
  else
  {
    sub_1001BAAC4(a1[28], a2);
    uint64_t result = v3 + 104;
    a1[28] = v3 + 104;
  }
  a1[28] = result;
  return result;
}

void sub_100152BB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 224) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100152BC0(uint64_t a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3);
}

uint64_t sub_100152BE4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 216) + 104 * a2;
}

uint64_t sub_100152BF4(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_100152BFC(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_100152C04(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[32];
  if (v3 >= a1[33])
  {
    uint64_t result = sub_10015F274(a1 + 31, a2);
  }
  else
  {
    sub_1001BAAC4(a1[32], a2);
    uint64_t result = v3 + 104;
    a1[32] = v3 + 104;
  }
  a1[32] = result;
  return result;
}

void sub_100152C50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 256) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100152C58(uint64_t a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 256) - *(void *)(a1 + 248)) >> 3);
}

uint64_t sub_100152C7C(uint64_t a1)
{
  return a1 + 272;
}

uint64_t sub_100152C84(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[35];
  if (v3 >= a1[36])
  {
    uint64_t result = sub_10015F274(a1 + 34, a2);
  }
  else
  {
    sub_1001BAAC4(a1[35], a2);
    uint64_t result = v3 + 104;
    a1[35] = v3 + 104;
  }
  a1[35] = result;
  return result;
}

void sub_100152CD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 280) = v2;
  _Unwind_Resume(a1);
}

id sub_100152CD8(uint64_t a1)
{
  return *(id *)(a1 + 200);
}

id sub_100152CE0(uint64_t a1)
{
  return *(id *)(a1 + 400);
}

void sub_100152CE8(uint64_t a1, void *a2)
{
}

uint64_t sub_100152CF0(uint64_t result, double a2)
{
  *(double *)(result + 384) = a2;
  return result;
}

id sub_100152CF8(uint64_t a1)
{
  return *(id *)(a1 + 336);
}

id sub_100152D00(uint64_t a1)
{
  return *(id *)(a1 + 344);
}

id sub_100152D08(uint64_t a1)
{
  return *(id *)(a1 + 352);
}

id sub_100152D10(uint64_t a1)
{
  return *(id *)(a1 + 360);
}

id sub_100152D18(uint64_t a1)
{
  return *(id *)(a1 + 408);
}

id sub_100152D20(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 408) addObject:a2];
}

id sub_100152D2C(uint64_t a1)
{
  return *(id *)(a1 + 416);
}

void sub_100152D34(uint64_t a1, void *a2)
{
}

double CRLWPShapeLayout.gap(forColumnIndex:bodyWidth:)()
{
  return 0.0;
}

double sub_100152D44(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  double v5 = *(double *)(a1 + 32);
  uint64_t v6 = [v4 storage];
  [v4 scaleTextPercent];

  return v5 + 0.0;
}

void sub_100152DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100152DC4(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_100152DCC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKeyedSubscript:@"CRLWPBaselineShift"];
  unint64_t v3 = v2;
  if (v2)
  {
    [v2 doubleValue];
    double v5 = v4;
  }
  else
  {
    double v5 = 0.0;
  }
  uint64_t v6 = [v1 objectForKeyedSubscript:@"CRLWPSuperscript"];

  if (v6)
  {
    unsigned int v7 = [v6 unsignedIntValue];
    if (v7)
    {
      unint64_t v8 = [v1 objectForKeyedSubscript:kCTFontAttributeName];

      CGFloat Size = CTFontGetSize((CTFontRef)v8);
      CopyWithAttributes = CTFontCreateCopyWithAttributes((CTFontRef)v8, Size * 1.5, 0, 0);
      uint64_t v11 = CopyWithAttributes;
      if (v7 == 2)
      {
        double Descent = CTFontGetDescent((CTFontRef)v8);
        Capsize_t Height = CTFontGetDescent(v11);
      }
      else
      {
        if (v7 != 1)
        {
LABEL_12:
          CFRelease(v11);
          goto LABEL_13;
        }
        double Descent = CTFontGetCapHeight(CopyWithAttributes);
        Capsize_t Height = CTFontGetCapHeight((CTFontRef)v8);
        if (Descent <= 0.0)
        {
          double Descent = CTFontGetAscent(v11);
          Capsize_t Height = CTFontGetAscent((CTFontRef)v8);
        }
      }
      double v5 = v5 + Descent - CapHeight;
      goto LABEL_12;
    }
  }
LABEL_13:

  return v5;
}

void sub_100152F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100152F60(unint64_t *a1@<X0>, unint64_t a2@<X1>, NSUInteger a3@<X2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, void *a7@<X6>, char **a8@<X8>)
{
  id v146 = a7;
  uint64_t v149 = (uint64_t)a1;
  if (a2 < *a1 || a2 + a3 > a1[1] + *a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9AA0);
    }
    unint64_t v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
      sub_10107E1A0();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9AC0);
    }
    uint64_t v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v15);
    }

    uint64_t v16 = +[NSString stringWithUTF8String:"CGRectVector CRLWPLineFragment::rectsForLineRange(const NSRange, BOOL, BOOL, BOOL, NSMutableArray<NSValue *> *__strong) const"];
    uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:531 isFatal:0 description:"Bad range"];
  }
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  if (a4)
  {
    uint64_t v18 = v149;
    double v19 = *(double *)(v149 + 64);
  }
  else
  {
    uint64_t v18 = v149;
    double v20 = *(double *)(v149 + 144) + *(double *)(v149 + 120);
    if (v20 < *(double *)(v149 + 112)) {
      double v20 = *(double *)(v149 + 112);
    }
    double v19 = *(double *)(v149 + 136) + *(double *)(v149 + 104) + v20;
  }
  double rect = v19;
  double v21 = *(double *)(v18 + 48);
  if ((a5 & 1) == 0)
  {
    double v22 = *(double *)(v18 + 104);
    double v21 = v21 + v22;
    double rect = rect - v22;
  }
  if (!a3)
  {
    CGRect v75 = (double **)a8;
    double v23 = sub_100153EB4(v149, a2, 0, 1, 0);
    NSUInteger v74 = 0;
    double v24 = 0.0;
    goto LABEL_142;
  }
  double v23 = *(double *)(v149 + 40);
  double v24 = *(double *)(v149 + 56);
  uint64_t v142 = *(void *)(v149 + 216);
  if (*(void *)(v149 + 224) != v142)
  {
    CGFloat descent = 0.0;
    CGFloat ascent = 0.0;
    if (a6 && *(void *)(v149 + 256) != *(void *)(v149 + 248))
    {
      dispatch_semaphore_t v25 = (const __CTLine *)sub_1001BAB78(v142);
      CTLineGetTypographicBounds(v25, &ascent, &descent, 0);
      double v26 = *(double *)(v142 + 16);
      double v143 = ascent;
      double y = CGRectNull.origin.y;
      uint64_t v28 = *(void *)(v149 + 248);
      uint64_t v29 = *(void *)(v149 + 256);
      if (v28 != v29)
      {
        CGFloat width = CGRectNull.size.width;
        CGFloat height = CGRectNull.size.height;
        CGFloat x = CGRectNull.origin.x;
        do
        {
          long long v33 = (const __CTLine *)sub_1001BAB78(v28);
          v172.size.CGFloat width = CTLineGetTypographicBounds(v33, &ascent, &descent, 0);
          v172.origin.CGFloat x = *(CGFloat *)(v28 + 8);
          v172.origin.double y = *(double *)(v28 + 16) - ascent;
          v172.size.CGFloat height = ascent + descent;
          v165.origin.CGFloat x = x;
          v165.origin.double y = y;
          v165.size.CGFloat width = width;
          v165.size.CGFloat height = height;
          CGRect v166 = CGRectUnion(v165, v172);
          CGFloat x = v166.origin.x;
          double y = v166.origin.y;
          CGFloat width = v166.size.width;
          CGFloat height = v166.size.height;
          v28 += 104;
        }
        while (v28 != v29);
      }
      if (y < v26 - v143)
      {
        double v34 = v26 - v143 - y - *(double *)(v149 + 144);
        double v21 = v21 - v34;
        double rect = rect + v34;
      }
    }
    sub_100154658((uint64_t *)v149);
    uint64_t v35 = *(void *)(v149 + 272);
    uint64_t v144 = *(void *)(v149 + 280);
    if (v35 == v144)
    {
      NSUInteger v74 = a3;
    }
    else
    {
      NSUInteger v36 = a2;
      do
      {
        sub_1001BAAC4(v150, v35);
        NSUInteger v37 = v151;
        NSUInteger v38 = v152;
        id v40 = [(char *)[*(id *)(v149 + 208) charRangeMappedToStorage:v151, v152]];
        NSUInteger v41 = v39;
        if (v36 <= (unint64_t)v40 && a3 + v36 >= (unint64_t)&v40[v39]) {
          goto LABEL_64;
        }
        v156.NSUInteger location = v36;
        v156.NSUInteger length = a3;
        v162.NSUInteger location = (NSUInteger)v40;
        v162.NSUInteger length = v41;
        if (!NSIntersectionRange(v156, v162).length) {
          goto LABEL_64;
        }
        v157.NSUInteger location = [*(id *)(v149 + 208) charRangeMappedFromStorage:v36 a3];
        v163.NSUInteger location = v37;
        v163.NSUInteger length = v38;
        NSRange v43 = NSIntersectionRange(v157, v163);
        id v141 = [*(id *)(v149 + 208) charRangeMappedToStorage:v43.location v43.length];
        uint64_t v45 = v44;
        uint64_t v46 = v153;
        double v47 = (const __CTLine *)sub_1001BAB78((uint64_t)v150);
        CFIndex v48 = v43.location - v37 + v46;
        OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v47, v48, 0);
        uint64_t v50 = (const __CTLine *)sub_1001BAB78((uint64_t)v150);
        double v51 = CTLineGetOffsetForStringIndex(v50, v48 + v43.length, 0);
        double v52 = (const __CTLine *)sub_1001BAB78((uint64_t)v150);
        double TypographicBounds = CTLineGetTypographicBounds(v52, 0, 0, 0);
        double v54 = sub_100153EB4(v149, (unint64_t)v40, 0, 1, 0);
        unint64_t v55 = &v40[v41];
        double v56 = sub_100153EB4(v149, (unint64_t)&v40[v41], 0, 1, 0) - v54;
        double v57 = v54 - (*(double *)(v142 + 8) + *(double *)(v149 + 40));
        double v58 = TypographicBounds * 0.5 + *(double *)(v149 + 32) - v51;
        double v59 = v51 - OffsetForStringIndex;
        CGFloat v61 = (double *)a8[1];
        unint64_t v60 = (unint64_t)a8[2];
        if ((unint64_t)v61 >= v60)
        {
          double v63 = (double *)*a8;
          uint64_t v64 = ((char *)v61 - *a8) >> 5;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59) {
            sub_100004E40();
          }
          uint64_t v66 = v60 - (void)v63;
          if (v66 >> 4 > v65) {
            unint64_t v65 = v66 >> 4;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            unsigned __int8 v68 = (char *)sub_100148898((uint64_t)(a8 + 2), v67);
            double v63 = (double *)*a8;
            CGFloat v61 = (double *)a8[1];
          }
          else
          {
            unsigned __int8 v68 = 0;
          }
          uint64_t v69 = (double *)&v68[32 * v64];
          *uint64_t v69 = v57;
          v69[1] = v58;
          v69[2] = v56;
          v69[3] = v59;
          if (v61 == v63)
          {
            double v72 = &v68[32 * v64];
          }
          else
          {
            uint64_t v70 = &v68[32 * v64];
            do
            {
              long long v71 = *((_OWORD *)v61 - 1);
              double v72 = v70 - 32;
              *((_OWORD *)v70 - 2) = *((_OWORD *)v61 - 2);
              *((_OWORD *)v70 - 1) = v71;
              v61 -= 4;
              v70 -= 32;
            }
            while (v61 != v63);
          }
          id v62 = v69 + 4;
          *a8 = v72;
          a8[1] = (char *)(v69 + 4);
          a8[2] = &v68[32 * v67];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          double *v61 = v57;
          v61[1] = v58;
          id v62 = v61 + 4;
          v61[2] = v56;
          v61[3] = v59;
        }
        a8[1] = (char *)v62;
        if (v146)
        {
          double v73 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v141, v45);
          [v146 addObject:v73];
        }
        a2 = 0x7FFFFFFFFFFFFFFFLL;
        NSUInteger v74 = 0;
        v158.NSUInteger location = v36;
        v158.NSUInteger length = a3;
        v164.NSUInteger location = (NSUInteger)v40;
        v164.NSUInteger length = v41;
        if (NSIntersectionRange(v158, v164).length)
        {
          if ((unint64_t)v40 >= v36
            && (unint64_t)&v40[-v36] < a3
            && ((unint64_t)v55 < v36 || (unint64_t)&v55[-v36] >= a3))
          {
            a2 = v36;
            NSUInteger v74 = (NSUInteger)&v40[-v36];
          }
          else if (v36 >= (unint64_t)v40 {
                 && v36 - (unint64_t)v40 < v41
          }
                 && (a3 + v36 < (unint64_t)v40 || a3 + v36 - (unint64_t)v40 >= v41))
          {
            a2 = (unint64_t)&v40[v41];
            NSUInteger v74 = a3 + v36 - (void)v55;
          }
        }
        else
        {
LABEL_64:
          a2 = v36;
          NSUInteger v74 = a3;
        }
        sub_1001BAAFC(v150);
        v35 += 104;
        a3 = v74;
        NSUInteger v36 = a2;
      }
      while (v35 != v144);
    }
    uint64_t v76 = *(void *)(v149 + 464);
    if (v76 != *(void *)(v149 + 472))
    {
      uint64_t v77 = 0;
      unsigned int v78 = 0;
      long long v145 = a8 + 2;
      while (1)
      {
        v159.NSUInteger location = a2;
        v159.NSUInteger length = v74;
        NSRange v79 = NSIntersectionRange(v159, *(NSRange *)(v76 + 40 * v77 + 16));
        if (!v79.length) {
          goto LABEL_127;
        }
        int v80 = (uint64_t *)sub_100155464(v149);
        uint64_t v81 = *v80;
        if (v80[1] == *v80) {
          goto LABEL_127;
        }
        uint64_t v82 = 0;
        char v83 = 0;
        unint64_t v84 = 0;
        double v85 = -INFINITY;
        double v86 = -INFINITY;
        do
        {
          if (*(void *)(v81 + v82 + 56) == v77)
          {
            if (NSIntersectionRange(*(NSRange *)(v81 + v82), v79).length)
            {
              uint64_t v81 = *v80;
              if ((v83 & 1) == 0) {
                double v85 = *(double *)(v81 + v82 + 32);
              }
              double v86 = *(double *)(v81 + v82 + 40);
              char v83 = 1;
            }
            else
            {
              if (v83) {
                goto LABEL_85;
              }
              char v83 = 0;
              uint64_t v81 = *v80;
            }
          }
          ++v84;
          v82 += 64;
        }
        while (v84 < (v80[1] - v81) >> 6);
        if ((v83 & 1) == 0) {
          goto LABEL_127;
        }
LABEL_85:
        __int16 v87 = (long long *)v149;
        uint64_t v88 = *(void *)(v149 + 24);
        if ((v88 & 0x800) != 0)
        {
          unint64_t v89 = v79.location + v79.length;
          if (v88 < 0) {
            __int16 v87 = &xmmword_101176F48;
          }
          if (v89 == *(void *)v87 + *((void *)v87 + 1))
          {
            if ((v88 & 0x1000) != 0) {
              double v85 = sub_100153EB4(v149, v89, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
            }
            else {
              double v86 = sub_100153EB4(v149, v89, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
            }
          }
        }
        double v23 = v85 + *(double *)(v142 + 8) + *(double *)(v149 + 40);
        double v24 = v86 - v85;
        if (a6)
        {
          uint64_t v90 = *(void *)(v149 + 248);
          for (uint64_t i = *(void *)(v149 + 256); v90 != i; v90 += 104)
          {
            CGRect v92 = (const __CTLine *)sub_1001BAB78(v90);
            double v93 = CTLineGetTypographicBounds(v92, 0, 0, 0);
            if (NSIntersectionRange(v79, *(NSRange *)(v90 + 24)).length)
            {
              v167.origin.CGFloat x = v23;
              v167.origin.double y = v21;
              v167.size.CGFloat width = v24;
              v167.size.CGFloat height = rect;
              double v94 = *(double *)(v90 + 8) + *(double *)(v149 + 40);
              if (v94 < CGRectGetMinX(v167))
              {
                v168.origin.CGFloat x = v23;
                v168.origin.double y = v21;
                v168.size.CGFloat width = v24;
                v168.size.CGFloat height = rect;
                double v24 = CGRectGetMaxX(v168) - v94;
                double v23 = v94;
              }
              v169.origin.CGFloat x = v23;
              v169.origin.double y = v21;
              v169.size.CGFloat width = v24;
              v169.size.CGFloat height = rect;
              double v95 = v93 + v94;
              if (v95 > CGRectGetMaxX(v169))
              {
                v170.origin.CGFloat x = v23;
                v170.origin.double y = v21;
                v170.size.CGFloat width = v24;
                v170.size.CGFloat height = rect;
                double v24 = v95 - CGRectGetMinX(v170);
              }
            }
          }
        }
        uint64_t v97 = (double *)*a8;
        uint64_t v96 = a8[1];
        if (*a8 != v96
          && ((double MaxX = CGRectGetMaxX(*((CGRect *)v96 - 1)),
               v171.origin.CGFloat x = v23,
               v171.origin.double y = v21,
               v171.size.CGFloat width = v24,
               v171.size.CGFloat height = rect,
               double MinX = CGRectGetMinX(v171),
               uint64_t v97 = (double *)a8[1],
               MaxX == MinX)
           || vabdd_f64(MaxX, MinX) < 0.00999999978))
        {
          v173.origin.CGFloat x = v23;
          v173.origin.double y = v21;
          v173.size.CGFloat width = v24;
          v173.size.CGFloat height = rect;
          *((CGRect *)v97 - 1) = CGRectUnion(*(CGRect *)(v97 - 4), v173);
          if (!v146 || a8[1] == *a8) {
            goto LABEL_127;
          }
          v107 = [v146 lastObject];
          id v108 = [v107 rangeValue];
          NSUInteger v110 = v109;

          v160.NSUInteger location = (NSUInteger)v108;
          v160.NSUInteger length = v110;
          NSRange v111 = NSUnionRange(v160, v79);
          uint64_t v112 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v111.location, v111.length);
          [v146 setObject:v112 atIndexedSubscript:[v146 count] - 1];
        }
        else
        {
          if ((unint64_t)v97 >= *v145)
          {
            v101 = (double *)*a8;
            uint64_t v102 = ((char *)v97 - *a8) >> 5;
            unint64_t v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 59) {
              sub_100004E40();
            }
            uint64_t v104 = *v145 - (void)v101;
            if (v104 >> 4 > v103) {
              unint64_t v103 = v104 >> 4;
            }
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v105 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v105 = v103;
            }
            if (v105)
            {
              __int16 v106 = (char *)sub_100148898((uint64_t)v145, v105);
              v101 = (double *)*a8;
              uint64_t v97 = (double *)a8[1];
            }
            else
            {
              __int16 v106 = 0;
            }
            id v113 = (double *)&v106[32 * v102];
            *id v113 = v23;
            v113[1] = v21;
            v113[2] = v24;
            _OWORD v113[3] = rect;
            if (v97 == v101)
            {
              long long v116 = &v106[32 * v102];
            }
            else
            {
              v114 = &v106[32 * v102];
              do
              {
                long long v115 = *((_OWORD *)v97 - 1);
                long long v116 = v114 - 32;
                *((_OWORD *)v114 - 2) = *((_OWORD *)v97 - 2);
                *((_OWORD *)v114 - 1) = v115;
                v97 -= 4;
                v114 -= 32;
              }
              while (v97 != v101);
            }
            v100 = v113 + 4;
            *a8 = v116;
            a8[1] = (char *)(v113 + 4);
            a8[2] = &v106[32 * v105];
            if (v101) {
              operator delete(v101);
            }
          }
          else
          {
            *uint64_t v97 = v23;
            v97[1] = v21;
            v100 = v97 + 4;
            v97[2] = v24;
            v97[3] = rect;
          }
          a8[1] = (char *)v100;
          if (!v146) {
            goto LABEL_127;
          }
          uint64_t v112 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v79.location, v79.length);
          [v146 addObject:v112];
        }

LABEL_127:
        uint64_t v76 = *(void *)(v149 + 464);
        uint64_t v77 = ++v78;
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v149 + 472) - v76) >> 3) <= v78) {
          goto LABEL_141;
        }
      }
    }
    long long v117 = (NSRange *)&xmmword_101176F48;
    if (*(uint64_t *)(v149 + 24) >= 0) {
      long long v117 = (NSRange *)v149;
    }
    v161.NSUInteger location = a2;
    v161.NSUInteger length = v74;
    NSRange v118 = NSIntersectionRange(v161, *v117);
    if (!v118.length) {
      goto LABEL_141;
    }
    unsigned __int8 v119 = (long long *)v149;
    uint64_t v120 = *(void *)(v149 + 24);
    double v121 = 0.0;
    if ((v120 & 0x800) != 0)
    {
      unint64_t v122 = v118.location + v118.length;
      if (v120 < 0) {
        unsigned __int8 v119 = &xmmword_101176F48;
      }
      if (v122 == *(void *)v119 + *((void *)v119 + 1))
      {
        if ((v120 & 0x1000) == 0)
        {
          double v123 = sub_100153EB4(v149, v122, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
LABEL_140:
          double v23 = v121 + *(double *)(v142 + 8) + *(double *)(v149 + 40);
          double v24 = v123 - v121;
          goto LABEL_141;
        }
        double v121 = sub_100153EB4(v149, v122, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
      }
    }
    double v123 = 0.0;
    goto LABEL_140;
  }
  NSUInteger v74 = a3;
LABEL_141:
  CGRect v75 = (double **)a8;
LABEL_142:
  double v124 = *v75;
  if (*v75 == v75[1])
  {
    unint64_t v125 = (unint64_t)v75[2];
    if ((unint64_t)v124 >= v125)
    {
      uint64_t v127 = v125 - (void)v124;
      uint64_t v128 = v127 >> 4;
      if ((unint64_t)(v127 >> 4) <= 1) {
        uint64_t v128 = 1;
      }
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v129 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v129 = v128;
      }
      v130 = (double *)sub_100148898((uint64_t)(v75 + 2), v129);
      __int16 v131 = *v75;
      int v132 = v75[1];
      uint64_t v134 = &v130[4 * v133];
      double *v130 = v23;
      v130[1] = v21;
      v130[2] = v24;
      v130[3] = rect;
      unsigned int v126 = v130 + 4;
      if (v132 != v131)
      {
        CGRect v135 = v130;
        do
        {
          long long v136 = *((_OWORD *)v132 - 1);
          v130 = v135 - 4;
          *((_OWORD *)v135 - 2) = *((_OWORD *)v132 - 2);
          *((_OWORD *)v135 - 1) = v136;
          v132 -= 4;
          v135 -= 4;
        }
        while (v132 != v131);
      }
      void *v75 = v130;
      v75[1] = v126;
      v75[2] = v134;
      if (v131) {
        operator delete(v131);
      }
    }
    else
    {
      *double v124 = v23;
      v124[1] = v21;
      unsigned int v126 = v124 + 4;
      v124[2] = v24;
      v124[3] = rect;
    }
    v75[1] = v126;
  }
  CGRect v137 = v146;
  if (v146)
  {
    id v138 = [v146 count];
    CGRect v137 = v146;
    if (!v138)
    {
      v139 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, v74);
      [v146 addObject:v139];

      CGRect v137 = v146;
    }
  }
}

void sub_100153D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v16 = *(void **)a15;
  if (*(void *)a15)
  {
    *(void *)(a15 + _Block_object_dispose(&STACK[0x370], 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_100153E2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100153E70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100153EB4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double *a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = &xmmword_101176F48;
  if (v9 >= 0) {
    uint64_t v10 = (long long *)a1;
  }
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  if (a5) {
    *a5 = 0.0;
  }
  if (*(void *)(a1 + 400))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    if ((v9 & 0x1000) != 0)
    {
      if (*(void *)a1 == a2) {
        goto LABEL_8;
      }
    }
    else if (*(void *)a1 != a2)
    {
LABEL_8:
      double MaxX = CGRectGetMaxX(*(CGRect *)&v13);
      goto LABEL_30;
    }
    double MaxX = CGRectGetMinX(*(CGRect *)&v13);
LABEL_30:
    double v27 = MaxX;
    if (a5)
    {
      *a5 = MaxX;
      if (a4) {
        return v27;
      }
      goto LABEL_81;
    }
LABEL_80:
    if (a4) {
      return v27;
    }
    goto LABEL_81;
  }
  uint64_t v18 = *(void *)(a1 + 216);
  uint64_t v19 = *(void *)(a1 + 224) - v18;
  if (!v19)
  {
    double v27 = 0.0;
    if (a4) {
      return v27;
    }
    goto LABEL_81;
  }
  if (v12 + v11 != a2) {
    goto LABEL_33;
  }
  if ((v9 & 0x800) != 0)
  {
    NSUInteger v38 = *(void **)(a1 + 208);
    if (!v38)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9CC0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107E344();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9CE0);
      }
      NSUInteger v39 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      id v40 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"];
      NSUInteger v41 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v40, v41, 1381, 0, "invalid nil value for '%{public}s'", "_textSource");

      NSUInteger v38 = *(void **)(a1 + 208);
    }
    unsigned int v42 = (char *)[v38 charIndexMappedFromStorage:a2] - 1;
    CGFloat secondaryOffset = 0.0;
    if ((*(unsigned char *)(a1 + 25) & 0x40) != 0) {
      unsigned int v42 = &v42[*(void *)(a1 + 16) - *(void *)a1];
    }
    NSRange v43 = (const __CTLine *)sub_1001BAB78(v18);
    OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v43, (CFIndex)v42, &secondaryOffset);
    double v45 = *(double *)(v18 + 8);
    double v46 = OffsetForStringIndex + v45;
    double v47 = v45 + secondaryOffset;
    CGFloat secondaryOffset = v45 + secondaryOffset;
    if (a5)
    {
      *a5 = v47;
    }
    else if ((v9 & 0x1000) == 0)
    {
      double v46 = v47;
    }
    if (sub_1001CCFB0((uint64_t)v42, *(void **)(a1 + 208)))
    {
      double v48 = 0.0;
      if ((v9 & 0x1000) == 0) {
        double v48 = *(double *)(a1 + 56);
      }
      double v28 = v48;
      if (!a5) {
        goto LABEL_77;
      }
    }
    else
    {
      double v49 = 7.0;
      if ((v9 & 0x1000) != 0) {
        double v49 = -7.0;
      }
      double v28 = v49 + v46;
      if (!a5) {
        goto LABEL_77;
      }
      double v48 = v49 + *a5;
    }
    *a5 = v48;
LABEL_77:
    double v50 = *(double *)(a1 + 40);
    double v27 = v28 + v50;
    if (!a5) {
      goto LABEL_80;
    }
    double v51 = v50 + *a5;
    goto LABEL_79;
  }
  if ((v9 & 0x1002) != 2)
  {
LABEL_33:
    double v28 = 0.0;
    if (*(void *)a1 <= a2)
    {
      uint64_t v29 = *(void **)(a1 + 208);
      if (!v29)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014D9D40);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10107E2B0();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014D9D60);
        }
        uint64_t v30 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        CGRect v31 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"];
        long long v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 1423, 0, "invalid nil value for '%{public}s'", "_textSource");

        uint64_t v29 = *(void **)(a1 + 208);
      }
      id v33 = [v29 charIndexMappedFromStorage:a2 v28];
      CFIndex v34 = (CFIndex)v33;
      if ((*(unsigned char *)(a1 + 25) & 0x40) != 0) {
        CFIndex v34 = (CFIndex)v33 + *(void *)(a1 + 16) - *(void *)a1;
      }
      CGFloat secondaryOffset = 0.0;
      uint64_t v35 = (const __CTLine *)sub_1001BAB78(v18);
      double v36 = CTLineGetOffsetForStringIndex(v35, v34, &secondaryOffset);
      double v37 = *(double *)(v18 + 8);
      if (a5) {
        *a5 = v37 + secondaryOffset;
      }
      double v28 = v36 + v37;
    }
    goto LABEL_77;
  }
  unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * (v19 >> 3);
  if (v20 <= 1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9D00);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E228();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9D20);
    }
    double v21 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v22 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"];
    double v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v22 file:v23 lineNumber:1412 isFatal:0 description:"Missing hyphen line ref"];

    uint64_t v18 = *(void *)(a1 + 216);
    unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 224) - v18) >> 3);
  }
  double v24 = 0.0;
  if (v20 >= 2)
  {
    uint64_t v25 = v18 + 104;
    unint64_t v26 = v20 - 1;
    while ((*(unsigned char *)(v25 + 96) & 2) == 0)
    {
      v25 += 104;
      if (!--v26) {
        goto LABEL_85;
      }
    }
    double v58 = *(double *)(v25 + 8);
    double v59 = (const __CTLine *)sub_1001BAB78(v25);
    double v24 = v58 + CTLineGetTypographicBounds(v59, 0, 0, 0);
  }
LABEL_85:
  if (a5)
  {
    *a5 = v24;
    double v51 = v24 + *(double *)(a1 + 40);
    double v27 = v51;
LABEL_79:
    *a5 = v51;
    goto LABEL_80;
  }
  double v27 = v24 + *(double *)(a1 + 40);
  if (a4) {
    return v27;
  }
LABEL_81:
  double v52 = CGRectGetMaxX(*(CGRect *)(a1 + 40));
  double v27 = fmax(fmin(v27, v52), CGRectGetMinX(*(CGRect *)(a1 + 40)));
  if (a5)
  {
    double v53 = *a5;
    CGFloat v55 = *(double *)(a1 + 40);
    double v54 = (CGRect *)(a1 + 40);
    v61.origin.CGFloat x = v55;
    v61.origin.double y = v54->origin.y;
    v61.size.CGFloat width = v54->size.width;
    v61.size.CGFloat height = v54->size.height;
    double v56 = CGRectGetMaxX(v61);
    *a5 = fmax(fmin(v53, v56), CGRectGetMinX(*v54));
  }
  return v27;
}

void sub_100154608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

intptr_t sub_100154658(uint64_t *a1)
{
  dispatch_semaphore_wait((dispatch_semaphore_t)a1[41], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = (char *)a1[59];
  if (v2 != (char *)a1[58])
  {
    unint64_t v3 = a1[41];
    return dispatch_semaphore_signal(v3);
  }
  NSRange v118 = a1 + 58;
  uint64_t v5 = a1[27];
  unint64_t v129 = a1;
  if (a1[28] == v5 || (*((unsigned char *)a1 + 25) & 0x40) != 0) {
    goto LABEL_111;
  }
  uint64_t v6 = (const __CTLine *)sub_1001BAB78(v5);
  CFIndex length = 0;
  CFIndex v122 = 0x7FFFFFFFFFFFFFFFLL;
  unsigned int v7 = a1;
  if (!a1[26])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9F00);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E46C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9F20);
    }
    unint64_t v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v9 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::fillWritingDirectionRuns() const"];
    uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 2127, 0, "invalid nil value for '%{public}s'", "_textSource");

    unsigned int v7 = a1;
  }
  if (!v7[57])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9F40);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E3D8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9F60);
    }
    uint64_t v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v12 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::fillWritingDirectionRuns() const"];
    uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 2128, 0, "invalid nil value for '%{public}s'", "_paragraphString");

    unsigned int v7 = a1;
  }
  uint64_t v125 = v7[31];
  uint64_t v126 = v7[32];
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  unsigned __int8 v119 = CTLineGetGlyphRuns(v6);
  uint64_t v14 = v119;
  id v15 = [v119 countByEnumeratingWithState:&v131 objects:v141 count:16];
  uint64_t v16 = v129;
  if (!v15)
  {

    uint64_t v2 = (char *)v129[59];
    goto LABEL_111;
  }
  uint64_t v123 = 0;
  uint64_t v124 = *(void *)v132;
  long long v117 = v129 + 60;
  char v130 = 1;
  uint64_t v17 = -1;
  uint64_t v18 = -1;
  BOOL v128 = 1;
  do
  {
    uint64_t v19 = 0;
    id v120 = v15;
    do
    {
      if (*(void *)v132 != v124) {
        objc_enumerationMutation(v14);
      }
      unint64_t v20 = *(const __CTRun **)(*((void *)&v131 + 1) + 8 * (void)v19);
      CFRange StringRange = CTRunGetStringRange(v20);
      BOOL v22 = StringRange.length != 1 || v126 == v125;
      if (v22
        || (CFDictionaryRef Attributes = CTRunGetAttributes(v20),
            !CFDictionaryContainsKey(Attributes, @"CRLWPRubySpacingRunAttribute")))
      {
        CTRunStatus v24 = CTRunGetStatus(v20) & 1;
        BOOL v127 = v24 == 0;
        if (v130) {
          BOOL v128 = (*((unsigned char *)v16 + 25) & 0x10) == 0;
        }
        id v25 = (id)v16[57];
        UChar32 v26 = sub_1001CC398(StringRange.location, v25);
        int v27 = sub_1001CD248(v26);

        if (v27 == 3 && StringRange.location != 0)
        {
          uint64_t v30 = (__CFString *)(id)v129[57];
          CFIndex location = CTRunGetStringRange(v20).location;
          CFIndex v32 = CFStringGetRangeOfComposedCharactersAtIndex(v30, location - 1).location;

          id v33 = (id)v129[57];
          UChar32 v34 = sub_1001CC398(v32, v33);
          BOOL v35 = sub_1001CD248(v34) != 0;

          uint64_t v16 = v129;
          goto LABEL_49;
        }
        BOOL v35 = 0;
        uint64_t v16 = v129;
        if ((v24 ^ 1) == v128
          && !(BYTE4(v123) & 1 | (v27 == 3))
          && ((BOOL v35 = 0, StringRange.location + StringRange.length == v122) || length + v122 == StringRange.location))
        {
          BOOL v29 = 0;
        }
        else
        {
LABEL_49:
          if ((v130 & 1) == 0)
          {
            double v36 = v16;
            char v37 = v123 & 1;
            unint64_t v39 = v36[59];
            unint64_t v38 = v36[60];
            if (v39 >= v38)
            {
              unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - *v118) >> 3);
              unint64_t v42 = v41 + 1;
              if (v41 + 1 > 0x666666666666666) {
                sub_100004E40();
              }
              unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - *v118) >> 3);
              if (2 * v43 > v42) {
                unint64_t v42 = 2 * v43;
              }
              if (v43 >= 0x333333333333333) {
                unint64_t v44 = 0x666666666666666;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44) {
                double v45 = (char *)sub_10015F68C((uint64_t)v117, v44);
              }
              else {
                double v45 = 0;
              }
              double v46 = &v45[40 * v41];
              *(void *)double v46 = v18;
              *((void *)v46 + 1) = v17;
              v46[32] = v128;
              v46[33] = v37;
              uint64_t v16 = v129;
              double v48 = (char *)v129[58];
              double v47 = (char *)v129[59];
              double v49 = v46;
              if (v47 != v48)
              {
                do
                {
                  long long v50 = *(_OWORD *)(v47 - 40);
                  long long v51 = *(_OWORD *)(v47 - 24);
                  *((void *)v49 - 1) = *((void *)v47 - 1);
                  *(_OWORD *)(v49 - 24) = v51;
                  *(_OWORD *)(v49 - 40) = v50;
                  v49 -= 40;
                  v47 -= 40;
                }
                while (v47 != v48);
                double v47 = (char *)*v118;
              }
              id v40 = v46 + 40;
              v129[58] = (uint64_t)v49;
              v129[59] = (uint64_t)(v46 + 40);
              v129[60] = (uint64_t)&v45[40 * v44];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(void *)unint64_t v39 = v18;
              *(void *)(v39 + _Block_object_dispose(&STACK[0x370], 8) = v17;
              *(unsigned char *)(v39 + 32) = v128;
              id v40 = (char *)(v39 + 40);
              *(unsigned char *)(v39 + 33) = v37;
              uint64_t v16 = v129;
            }
            v16[59] = (uint64_t)v40;
          }
          BOOL v52 = v27 == 3 && v35;
          LOBYTE(v123) = v52;
          uint64_t v17 = -1;
          uint64_t v18 = -1;
          BOOL v29 = v27 == 3;
          BOOL v128 = v127;
        }
        uint64_t v14 = v119;
        CFIndex GlyphCount = CTRunGetGlyphCount(v20);
        sub_10002B3D8(&buffer, GlyphCount);
        v143.CFIndex location = 0;
        v143.CFIndex length = GlyphCount;
        CTRunGetStringIndices(v20, v143, buffer);
        BYTE4(v123) = v29;
        if (GlyphCount >= 1)
        {
          for (uint64_t i = 0; i != GlyphCount; ++i)
          {
            id v55 = [(id)v16[26] charIndexMappedToStorage:buffer[i]];
            if ((uint64_t)v55 < v18 || v18 == -1) {
              uint64_t v18 = (uint64_t)v55;
            }
            if ((uint64_t)v55 > v17 || v17 == -1) {
              uint64_t v17 = (uint64_t)v55;
            }
          }
        }
        if (buffer)
        {
          *(void *)long long v136 = buffer;
          operator delete(buffer);
        }
        char v130 = 0;
        CFIndex length = StringRange.length;
        CFIndex v122 = StringRange.location;
        id v15 = v120;
      }
      uint64_t v19 = (char *)v19 + 1;
    }
    while (v19 != v15);
    id v15 = [v14 countByEnumeratingWithState:&v131 objects:v141 count:16];
  }
  while (v15);

  uint64_t v2 = (char *)v129[59];
  if (v18 != -1 && v17 != -1)
  {
    char v59 = v123 & 1;
    if ((unint64_t)v2 >= *v117)
    {
      unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
      if (v61 + 1 > 0x666666666666666) {
        sub_100004E40();
      }
      unint64_t v62 = 0x999999999999999ALL * ((uint64_t)(*v117 - *v118) >> 3);
      if (v62 <= v61 + 1) {
        unint64_t v62 = v61 + 1;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v117 - *v118) >> 3) >= 0x333333333333333) {
        unint64_t v63 = 0x666666666666666;
      }
      else {
        unint64_t v63 = v62;
      }
      if (v63) {
        uint64_t v64 = (char *)sub_10015F68C((uint64_t)v117, v63);
      }
      else {
        uint64_t v64 = 0;
      }
      unint64_t v65 = &v64[40 * v61];
      uint64_t v66 = &v64[40 * v63];
      *(void *)unint64_t v65 = v18;
      *((void *)v65 + 1) = v17;
      v65[32] = v128;
      v65[33] = v59;
      uint64_t v2 = v65 + 40;
      unint64_t v60 = v129;
      unsigned __int8 v68 = (char *)v129[58];
      unint64_t v67 = (char *)v129[59];
      if (v67 != v68)
      {
        do
        {
          long long v69 = *(_OWORD *)(v67 - 40);
          long long v70 = *(_OWORD *)(v67 - 24);
          *((void *)v65 - 1) = *((void *)v67 - 1);
          *(_OWORD *)(v65 - 24) = v70;
          *(_OWORD *)(v65 - 40) = v69;
          v65 -= 40;
          v67 -= 40;
        }
        while (v67 != v68);
        unint64_t v67 = (char *)*v118;
      }
      v129[58] = (uint64_t)v65;
      v129[59] = (uint64_t)v2;
      v129[60] = (uint64_t)v66;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *(void *)uint64_t v2 = v18;
      *((void *)v2 + 1) = v17;
      v2[32] = v128;
      v2[33] = v59;
      v2 += 40;
      unint64_t v60 = v129;
    }
    v60[59] = (uint64_t)v2;
  }
LABEL_111:
  long long v71 = (char *)*v118;
  if (v2 != (char *)*v118)
  {
    uint64_t v72 = 0;
    unsigned int v73 = 0;
    unint64_t v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
    do
    {
      uint64_t v75 = *v129;
      uint64_t v76 = v129[3];
      BOOL v77 = v76 < 0;
      if (v76 < 0) {
        unsigned int v78 = &xmmword_101176F48;
      }
      else {
        unsigned int v78 = (long long *)v129;
      }
      uint64_t v79 = *((void *)v78 + 1);
      uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v77) {
        uint64_t v80 = *v129;
      }
      uint64_t v81 = v80 + v79;
      uint64_t v82 = &v71[40 * v72];
      uint64_t v83 = *(void *)v82;
      uint64_t v84 = *((void *)v82 + 1);
      double v85 = (uint64_t *)(v71 + 8);
      uint64_t v86 = 1;
      do
      {
        uint64_t v87 = *(v85 - 1);
        uint64_t v88 = *v85;
        BOOL v90 = *v85 <= v75 || v88 > v83;
        if (v87 <= v88) {
          uint64_t v91 = *v85;
        }
        else {
          uint64_t v91 = *(v85 - 1);
        }
        if (v87 >= v88) {
          uint64_t v92 = *v85;
        }
        else {
          uint64_t v92 = *(v85 - 1);
        }
        BOOL v93 = !v90;
        if (v90) {
          uint64_t v94 = v75;
        }
        else {
          uint64_t v94 = *v85;
        }
        if (!v93) {
          uint64_t v91 = *(v85 - 1);
        }
        if (v87 > v83 || v87 <= v75) {
          uint64_t v75 = v94;
        }
        else {
          uint64_t v75 = v91;
        }
        if (v84) {
          BOOL v96 = v88 < v81;
        }
        else {
          BOOL v96 = 0;
        }
        char v97 = v96;
        if ((v97 & (v88 > v84)) != 0)
        {
          uint64_t v98 = v92;
        }
        else
        {
          uint64_t v88 = v81;
          uint64_t v98 = *(v85 - 1);
        }
        if (v87 > v84 && v87 < v81) {
          uint64_t v81 = v98;
        }
        else {
          uint64_t v81 = v88;
        }
        v85 += 5;
        BOOL v77 = v74 > v86++;
      }
      while (v77);
      if (v81 >= v75)
      {
        unint64_t v105 = &v71[40 * v72];
        *((void *)v105 + 2) = v75;
        *((void *)v105 + 3) = v81 - v75;
      }
      else
      {
        unsigned int v100 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014D9F80);
        }
        v101 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buffer) = 67109890;
          HIDWORD(buffer) = v100;
          *(_WORD *)long long v136 = 2082;
          *(void *)&v136[2] = "void CRLWPLineFragment::fillWritingDirectionRuns() const";
          __int16 v137 = 2082;
          id v138 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
          __int16 v139 = 1024;
          int v140 = 2242;
          _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad ranges in runs.", (uint8_t *)&buffer, 0x22u);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014D9FA0);
        }
        uint64_t v102 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v102, OS_LOG_TYPE_ERROR))
        {
          __int16 v106 = +[CRLAssertionHandler packedBacktraceString];
          LODWORD(buffer) = 67109378;
          HIDWORD(buffer) = v100;
          *(_WORD *)long long v136 = 2114;
          *(void *)&v136[2] = v106;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v102, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&buffer, 0x12u);
        }
        unint64_t v103 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::fillWritingDirectionRuns() const"];
        uint64_t v104 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
        +[CRLAssertionHandler handleFailureInFunction:v103 file:v104 lineNumber:2242 isFatal:0 description:"Bad ranges in runs."];

        *(_OWORD *)(v129[58] + 40 * v72 + 16) = xmmword_101175810;
        uint64_t v2 = (char *)v129[59];
      }
      long long v71 = (char *)*v118;
      unint64_t v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
      uint64_t v72 = ++v73;
    }
    while (v74 > v73);
    if (v2 != v71)
    {
      unint64_t v107 = 0;
      unsigned int v108 = 0;
      do
      {
        if (v74 - 1 > v107
          && (unint64_t v109 = *(void *)&v71[40 * v108 + 56], v110 = &v71[40 * v107], v111 = *((void *)v110 + 2), v109 <= v111)
          && *(void *)&v71[40 * v108 + 64] + v109 >= *(void *)&v71[40 * v107 + 24] + v111)
        {
          int64_t v116 = v2 - (v110 + 40);
          if (v2 != v110 + 40) {
            memmove(&v71[40 * v107], v110 + 40, v2 - (v110 + 40));
          }
          v2 -= 40;
          v129[59] = (uint64_t)&v110[v116];
          --v108;
        }
        else if (v108)
        {
          unint64_t v112 = *(void *)&v71[40 * v108 - 24];
          id v113 = &v71[40 * v107];
          unint64_t v114 = *((void *)v113 + 2);
          if (v112 <= v114 && *(void *)&v71[40 * v108 - 16] + v112 >= *(void *)&v71[40 * v107 + 24] + v114)
          {
            int64_t v115 = v2 - (v113 + 40);
            if (v2 != v113 + 40) {
              memmove(v113, v113 + 40, v2 - (v113 + 40));
            }
            v2 -= 40;
            v129[59] = (uint64_t)&v113[v115];
            --v108;
          }
        }
        long long v71 = (char *)*v118;
        unint64_t v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
        unint64_t v107 = ++v108;
      }
      while (v74 > v108);
    }
  }
  return dispatch_semaphore_signal((dispatch_semaphore_t)v129[41]);
}

void sub_1001553A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100155464(uint64_t a1)
{
  if (*(void *)(a1 + 224) == *(void *)(a1 + 216) || (*(unsigned char *)(a1 + 25) & 0x40) != 0) {
    return a1 + 432;
  }
  id v2 = *(id *)(a1 + 456);
  objc_sync_enter(v2);
  if (*(void *)(a1 + 432) != *(void *)(a1 + 440)) {
    goto LABEL_141;
  }
  id v93 = v2;
  if (!*(void *)(a1 + 208))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA000);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E6A4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA020);
    }
    unint64_t v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v4 = +[NSString stringWithUTF8String:"const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 2356, 0, "invalid nil value for '%{public}s'", "_textSource");
  }
  if (!*(void *)(a1 + 456))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA040);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E610();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA060);
    }
    uint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    unsigned int v7 = +[NSString stringWithUTF8String:"const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"];
    unint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 2357, 0, "invalid nil value for '%{public}s'", "_paragraphString");
  }
  sub_100154658((uint64_t *)a1);
  line = (const __CTLine *)sub_1001BAB78(*(void *)(a1 + 216));
  uint64_t v9 = &xmmword_101176F48;
  if (*(uint64_t *)(a1 + 24) >= 0) {
    uint64_t v9 = (long long *)a1;
  }
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *((void *)v9 + 1);
  uint64_t v12 = (char *)[*(id *)(a1 + 208) charIndexRemappedFromStorage:*(void *)v9];
  uint64_t v98 = (long long **)(a1 + 432);
  unint64_t v96 = v10 + v11;
  if ((unint64_t)v12 >= v10 + v11) {
    goto LABEL_110;
  }
  unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  while (1)
  {
    id v15 = [(char *)[*(id *)(a1 + 208) charRangeMappedFromStorage:v12, 1];
    if (v16 >= 2)
    {
      id v17 = *(id *)(a1 + 456);
      BOOL v18 = [v17 characterAtIndex:v15] == 8206;

      v15 += v18;
    }
    CGFloat secondaryOffset = 0.0;
    OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(line, (CFIndex)v15, &secondaryOffset);
    uint64_t v20 = *(void *)(a1 + 464);
    uint64_t v21 = *(void *)(a1 + 472);
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
    if (v14 < v22)
    {
      uint64_t v23 = v20 + 40 * v14;
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      BOOL v27 = (unint64_t)v12 >= v25;
      UChar32 v26 = &v12[-v25];
      BOOL v27 = !v27 || (unint64_t)v26 >= v24;
      if (!v27) {
        goto LABEL_50;
      }
    }
    if (v21 != v20)
    {
      unint64_t v28 = 0;
      if (v22 <= 1) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = v22;
      }
      BOOL v29 = (void *)(v20 + 24);
      while (1)
      {
        unint64_t v30 = *(v29 - 1);
        BOOL v27 = (unint64_t)v12 >= v30;
        CGRect v31 = &v12[-v30];
        if (v27 && (unint64_t)v31 < *v29) {
          break;
        }
        v29 += 5;
        if (v14 == ++v28) {
          goto LABEL_49;
        }
      }
      unint64_t v14 = v28;
LABEL_50:
      char v34 = *(unsigned char *)(v20 + 40 * v14 + 32);
      uint64_t v33 = v14;
      goto LABEL_51;
    }
    unint64_t v14 = 0;
LABEL_49:
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
    char v34 = 1;
LABEL_51:
    CGFloat v35 = secondaryOffset;
    id v36 = *(id *)(a1 + 456);
    id v37 = [*(id *)(a1 + 208) charIndexMappedFromStorage:v12];
    id v38 = v36;
    if ([v38 length] <= v37) {
      break;
    }
    char v94 = v34;
    uint64_t v95 = v33;
    id v39 = [v38 rangeOfComposedCharacterSequenceAtIndex:v37];
    uint64_t v41 = v40;
    if (v39 == (id)0x7FFFFFFFFFFFFFFFLL || !v40)
    {
      unsigned int v42 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DA540);
      }
      unint64_t v43 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        unsigned int v101 = v42;
        __int16 v102 = 2082;
        unint64_t v103 = "NSUInteger countOfComposedCharacters(NSString *__strong, NSUInteger)";
        __int16 v104 = 2082;
        unint64_t v105 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
        __int16 v106 = 1024;
        int v107 = 2086;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected 0 length for composed sequence.", buf, 0x22u);
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DA560);
        }
      }
      unint64_t v44 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v66 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        unsigned int v101 = v42;
        __int16 v102 = 2114;
        unint64_t v103 = v66;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v44, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      double v45 = +[NSString stringWithUTF8String:"NSUInteger countOfComposedCharacters(NSString *__strong, NSUInteger)"];
      double v46 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v45 file:v46 lineNumber:2086 isFatal:0 description:"Unexpected 0 length for composed sequence."];

      if (!v41) {
        uint64_t v41 = 1;
      }
    }

    double v47 = (char *)[*(id *)(a1 + 208) charIndexMappedToStorage:&v15[v41]];
    unint64_t v48 = (unint64_t)&v15[v41];
    do
    {
      if (v47 >= &v12[v41]) {
        break;
      }
      double v47 = (char *)[*(id *)(a1 + 208) charIndexMappedToStorage:++v48];
    }
    while (v48 < (unint64_t)[*(id *)(a1 + 208) length]);
    if (v12 <= v47) {
      double v49 = v47;
    }
    else {
      double v49 = v12;
    }
    if (v12 >= v47) {
      long long v50 = v47;
    }
    else {
      long long v50 = v12;
    }
    uint64_t v51 = v49 - v50;
    unint64_t v52 = *(void *)(a1 + 440);
    unint64_t v53 = *(void *)(a1 + 448);
    if (v52 >= v53)
    {
      uint64_t v55 = (uint64_t)(v52 - (void)*v98) >> 6;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 58) {
        sub_100004E40();
      }
      uint64_t v57 = v53 - (void)*v98;
      if (v57 >> 5 > v56) {
        unint64_t v56 = v57 >> 5;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v58 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58) {
        char v59 = (char *)sub_10015F6D4(a1 + 448, v58);
      }
      else {
        char v59 = 0;
      }
      unint64_t v60 = &v59[64 * v55];
      *(void *)unint64_t v60 = v50;
      *((void *)v60 + 1) = v51;
      *((CGFloat *)v60 + 2) = OffsetForStringIndex;
      *((CGFloat *)v60 + 3) = v35;
      v60[48] = v94;
      *((void *)v60 + 7) = v95;
      unint64_t v62 = *(long long **)(a1 + 432);
      unint64_t v61 = *(long long **)(a1 + 440);
      unint64_t v63 = v60;
      if (v61 != v62)
      {
        do
        {
          __n128 v13 = (__n128)*(v61 - 4);
          long long v64 = *(v61 - 3);
          long long v65 = *(v61 - 1);
          *((_OWORD *)v63 - 2) = *(v61 - 2);
          *((_OWORD *)v63 - 1) = v65;
          *((__n128 *)v63 - 4) = v13;
          *((_OWORD *)v63 - 3) = v64;
          v63 -= 64;
          v61 -= 4;
        }
        while (v61 != v62);
        unint64_t v61 = *v98;
      }
      double v54 = v60 + 64;
      *(void *)(a1 + 432) = v63;
      *(void *)(a1 + 440) = v60 + 64;
      *(void *)(a1 + 44_Block_object_dispose(&STACK[0x370], 8) = &v59[64 * v58];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(void *)unint64_t v52 = v50;
      *(void *)(v52 + _Block_object_dispose(&STACK[0x370], 8) = v51;
      *(CGFloat *)(v52 + 16) = OffsetForStringIndex;
      *(CGFloat *)(v52 + 24) = v35;
      *(unsigned char *)(v52 + 4_Block_object_dispose(&STACK[0x370], 8) = v94;
      double v54 = (char *)(v52 + 64);
      *(void *)(v52 + 56) = v95;
    }
    *(void *)(a1 + 440) = v54;
    if (v12 >= v47)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DA0C0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107E500();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DA0E0);
      }
      long long v70 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v70, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      unsigned __int8 v68 = +[NSString stringWithUTF8String:"const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"];
      long long v69 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v68 file:v69 lineNumber:2426 isFatal:0 description:"textSource failed to advance"];
      goto LABEL_109;
    }
    uint64_t v12 = v49;
    if ((unint64_t)v49 >= v96) {
      goto LABEL_110;
    }
  }

  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DA080);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10107E588();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DA0A0);
  }
  unint64_t v67 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v67, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  unsigned __int8 v68 = +[NSString stringWithUTF8String:"const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"];
  long long v69 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
  +[CRLAssertionHandler handleFailureInFunction:v68 file:v69 lineNumber:2407 isFatal:0 description:"countOfComposedCharacters failed"];
LABEL_109:

LABEL_110:
  long long v71 = *(__n128 **)(a1 + 440);
  uint64_t v72 = (uint64_t)v71 - *(void *)(a1 + 432);
  if (v72)
  {
    uint64_t v73 = 0;
    unint64_t v74 = v72 >> 6;
    unint64_t v75 = v74 - 1;
    if (v74 <= 1) {
      uint64_t v76 = 1;
    }
    else {
      uint64_t v76 = v74;
    }
    uint64_t v77 = *(void *)(a1 + 24);
    do
    {
      unsigned int v78 = *v98;
      uint64_t v79 = &(*v98)[4 * v73];
      uint64_t v80 = (double *)(v79 + 1);
      if ((v77 & 0x1000) == 0) {
        uint64_t v80 = (double *)v79 + 3;
      }
      double v81 = *v80;
      if (v73 == v75)
      {
        CGFloat secondaryOffset = 0.0;
        v13.n128_f64[0] = CTLineGetOffsetForStringIndex(line, (CFIndex)[*(id *)(a1 + 208) charIndexMappedFromStorage:v96], &secondaryOffset);
        uint64_t v77 = *(void *)(a1 + 24);
        if ((v77 & 0x1000) != 0 && LOBYTE(v78[4 * v75 + 3])) {
          v13.n128_f64[0] = secondaryOffset;
        }
        int v82 = LOBYTE(v78[4 * v75 + 3]);
        unsigned int v78 = *v98;
        uint64_t v83 = v73 + 1;
      }
      else
      {
        uint64_t v83 = v73 + 1;
        int v82 = *((unsigned __int8 *)v79 + 48);
        uint64_t v84 = &v78[4 * v73 + 4];
        if (v82 == *((unsigned __int8 *)v84 + 48) || (v77 & 0x1000) == 0) {
          uint64_t v86 = 16;
        }
        else {
          uint64_t v86 = 24;
        }
        v13.n128_u64[0] = *(void *)((char *)v84 + v86);
      }
      BOOL v87 = v82 == 0;
      if (v82) {
        double v88 = v81;
      }
      else {
        double v88 = v13.n128_f64[0];
      }
      unint64_t v89 = &v78[4 * v73];
      if (v87) {
        v13.n128_f64[0] = v81;
      }
      *((double *)v89 + 4) = v88;
      *((void *)v89 + 5) = v13.n128_u64[0];
      uint64_t v73 = v83;
    }
    while (v83 != v76);
    long long v71 = *(__n128 **)(a1 + 440);
  }
  else
  {
    unsigned int v78 = *(long long **)(a1 + 440);
  }
  CGFloat secondaryOffset = COERCE_DOUBLE(sub_10015BA6C);
  unint64_t v90 = 126 - 2 * __clz(((char *)v71 - (char *)v78) >> 6);
  if (v71 == (__n128 *)v78) {
    uint64_t v91 = 0;
  }
  else {
    uint64_t v91 = v90;
  }
  sub_10015F70C(v78, v71, (uint64_t (**)(long long *, long long *))&secondaryOffset, v91, 1, v13);
  id v2 = v93;
LABEL_141:
  objc_sync_exit(v2);

  return a1 + 432;
}

void sub_10015604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100156188(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, int a8@<W7>, void **a9@<X8>, void *a10)
{
  id v96 = a10;
  if (a2 < *(void *)a1 || a2 + a3 > *(void *)(a1 + 8) + *(void *)a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9AE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E738();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9B00);
    }
    unint64_t v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v17 = +[NSString stringWithUTF8String:"CGRectVector CRLWPLineFragment::rectsForVisualRange(NSRange, NSUInteger, NSUInteger, BOOL, BOOL, BOOL, NSMutableArray<NSValue *> *__strong) const"];
    BOOL v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v17 file:v18 lineNumber:748 isFatal:0 description:"Bad range"];
  }
  if (a6)
  {
    double v19 = *(double *)(a1 + 64);
  }
  else
  {
    double v20 = *(double *)(a1 + 144) + *(double *)(a1 + 120);
    if (v20 < *(double *)(a1 + 112)) {
      double v20 = *(double *)(a1 + 112);
    }
    double v19 = *(double *)(a1 + 136) + *(double *)(a1 + 104) + v20;
  }
  double v98 = v19;
  double v21 = *(double *)(a1 + 48);
  if ((a7 & 1) == 0)
  {
    double v22 = *(double *)(a1 + 104);
    double v21 = v21 + v22;
    double v98 = v98 - v22;
  }
  if (a3)
  {
    CGFloat v23 = *(double *)(a1 + 40);
    CGFloat v24 = *(double *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 216);
    if (*(void *)(a1 + 224) != v25)
    {
      CGFloat descent = 0.0;
      CGFloat ascent = 0.0;
      double v95 = v24;
      if (a8 && *(void *)(a1 + 256) != *(void *)(a1 + 248))
      {
        UChar32 v26 = (const __CTLine *)sub_1001BAB78(v25);
        CTLineGetTypographicBounds(v26, &ascent, &descent, 0);
        double v27 = *(double *)(v25 + 16);
        double v28 = ascent;
        CGFloat y = CGRectZero.origin.y;
        uint64_t v30 = *(void *)(a1 + 248);
        if (v30 == *(void *)(a1 + 256))
        {
          double v37 = CGRectZero.origin.y;
        }
        else
        {
          CGFloat width = CGRectZero.size.width;
          CGFloat height = CGRectZero.size.height;
          CGFloat x = CGRectZero.origin.x;
          do
          {
            char v34 = (const __CTLine *)sub_1001BAB78(v30);
            double TypographicBounds = CTLineGetTypographicBounds(v34, &ascent, &descent, 0);
            CGFloat v36 = *(double *)(v30 + 8);
            double v37 = *(double *)(v30 + 16) - ascent;
            double v38 = ascent + descent;
            if (v30 != *(void *)(a1 + 248))
            {
              v101.origin.CGFloat x = x;
              v101.origin.CGFloat y = y;
              v101.size.CGFloat width = width;
              v101.size.CGFloat height = height;
              CGRect v102 = CGRectUnion(v101, *(CGRect *)&v36);
              CGFloat v36 = v102.origin.x;
              double v37 = v102.origin.y;
              double TypographicBounds = v102.size.width;
              double v38 = v102.size.height;
            }
            v30 += 104;
            CGFloat height = v38;
            CGFloat width = TypographicBounds;
            CGFloat y = v37;
            CGFloat x = v36;
          }
          while (v30 != *(void *)(a1 + 256));
        }
        if (v37 < v27 - v28)
        {
          double v39 = v27 - v28 - v37 - *(double *)(a1 + 144);
          double v21 = v21 - v39;
          double v98 = v98 + v39;
        }
      }
      double v41 = CGRectNull.origin.x;
      double v40 = CGRectNull.origin.y;
      double v43 = CGRectNull.size.width;
      double v42 = CGRectNull.size.height;
      unint64_t v44 = (void *)sub_100155464(a1);
      double v93 = v23;
      double v45 = v21;
      uint64_t v46 = v44[1] - *v44;
      if (v46)
      {
        unint64_t v47 = v46 >> 6;
        if (v47 <= 1) {
          unint64_t v47 = 1;
        }
        unint64_t v48 = (double *)(*v44 + 40);
        double v49 = v42;
        double v50 = v43;
        double v51 = v40;
        CGFloat v52 = CGRectNull.origin.x;
        do
        {
          unint64_t v53 = *((void *)v48 - 5);
          unint64_t v54 = *((void *)v48 - 4);
          BOOL v55 = a4 < v53 || a4 - v53 >= v54;
          int v56 = !v55;
          if (v55 && (a5 < v53 || a5 - v53 >= v54)) {
            goto LABEL_56;
          }
          double v58 = *(v48 - 1);
          double v59 = *v48 - v58;
          double v60 = v58 + *(double *)(a1 + 40);
          double v61 = *(double *)(v25 + 8);
          double v62 = *(double *)(v25 + 16);
          double v63 = v60 + v61;
          double v64 = v45 + v62;
          if (v56)
          {
            double v41 = v60 + v61;
            double v40 = v45 + v62;
            double v43 = v59;
            double v42 = v98;
          }
          BOOL v55 = a5 >= v53;
          unint64_t v65 = a5 - v53;
          if (!v55 || v65 >= v54)
          {
LABEL_56:
            double v63 = v52;
            double v64 = v51;
            double v59 = v50;
          }
          else
          {
            double v49 = v98;
          }
          v48 += 8;
          double v50 = v59;
          double v51 = v64;
          CGFloat v52 = v63;
          --v47;
        }
        while (v47);
      }
      else
      {
        double v63 = CGRectNull.origin.x;
        double v64 = v40;
        double v59 = v43;
        double v49 = v42;
      }
      double r2 = v49;
      uint64_t v67 = *(void *)(a1 + 24);
      v103.origin.CGFloat x = v41;
      v103.origin.CGFloat y = v40;
      v103.size.CGFloat width = v43;
      v103.size.CGFloat height = v42;
      IsEmptCGFloat y = CGRectIsEmpty(v103);
      double v69 = v95 + -1.0;
      if ((v67 & 0x1000) == 0) {
        double v69 = -0.0;
      }
      double v70 = r2;
      double v71 = v93 + v69;
      if (IsEmpty)
      {
        double v41 = v71;
        double v40 = v45;
        double v43 = 1.0;
        double v42 = v98;
      }
      double v72 = v63;
      double v73 = v64;
      double v74 = v59;
      if (CGRectIsEmpty(*(CGRect *)(&v70 - 3)))
      {
        double v75 = v95 + -1.0;
        if ((v67 & 0x1000) != 0) {
          double v75 = -0.0;
        }
        double v63 = v93 + v75;
        double v59 = 1.0;
        double v64 = v45;
        double v76 = v98;
      }
      else
      {
        double v76 = r2;
      }
      v104.origin.CGFloat x = v41;
      v104.origin.CGFloat y = v40;
      v104.size.CGFloat width = v43;
      v104.size.CGFloat height = v42;
      double v77 = v63;
      double v78 = v64;
      double v79 = v59;
      CGRect v105 = CGRectUnion(v104, *(CGRect *)(&v76 - 3));
      double v98 = v105.size.height;
      CGFloat v23 = v105.origin.x;
      double v21 = v105.origin.y;
      CGFloat v24 = v105.size.width;
    }
  }
  else
  {
    CGFloat v23 = sub_100153EB4(a1, a2, 0, 1, 0);
    CGFloat v24 = 0.0;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  uint64_t v80 = (double *)sub_100148898((uint64_t)(a9 + 2), 1uLL);
  double v81 = (char *)*a9;
  int v82 = (char *)a9[1];
  uint64_t v84 = &v80[4 * v83];
  *uint64_t v80 = v23;
  v80[1] = v21;
  v80[2] = v24;
  v80[3] = v98;
  double v85 = (char *)(v80 + 4);
  if (v82 != v81)
  {
    uint64_t v86 = v80;
    do
    {
      long long v87 = *((_OWORD *)v82 - 1);
      uint64_t v80 = v86 - 4;
      *((_OWORD *)v86 - 2) = *((_OWORD *)v82 - 2);
      *((_OWORD *)v86 - 1) = v87;
      v82 -= 32;
      v86 -= 4;
    }
    while (v82 != v81);
  }
  *a9 = v80;
  a9[1] = v85;
  a9[2] = v84;
  if (v81) {
    operator delete(v81);
  }
  a9[1] = v85;
  if (v96)
  {
    if (a4 <= a5) {
      unint64_t v88 = a5;
    }
    else {
      unint64_t v88 = a4;
    }
    if (a4 >= a5) {
      uint64_t v89 = a5;
    }
    else {
      uint64_t v89 = a4;
    }
    unint64_t v90 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v89, v88 - v89);
    [v96 addObject:v90];
  }
}

void sub_1001567A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100156824(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100156868(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001568AC()
{
  if (qword_1016A9138 != -1) {
    dispatch_once(&qword_1016A9138, &stru_1014D9B20);
  }
  return qword_1016A9130;
}

void sub_1001568F0(id a1)
{
  id v1 = (CGColorSpace *)sub_10000FC28();
  qword_1016A9130 = (uint64_t)CGBitmapContextCreate(0, 1uLL, 1uLL, 8uLL, 4uLL, v1, 5u);
}

double sub_100156930(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v102 = a4;
  CGFloat y = CGRectNull.origin.y;
  double x = CGRectNull.origin.x;
  CGFloat height = CGRectNull.size.height;
  CGFloat r1 = CGRectNull.size.width;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 320), 0xFFFFFFFFFFFFFFFFLL);
  if (!*(void *)(a1 + 312))
  {
    unint64_t v109 = (uint64_t **)(a1 + 296);
    uint64_t v14 = *(void *)(a1 + 272);
    uint64_t v101 = *(void *)(a1 + 280);
    if (v14 != v101)
    {
      id v15 = &off_1014C1000;
      do
      {
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = *(void *)(v14 + 32);
        if (!*(void *)(a1 + 208))
        {
          unsigned int v18 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9B40);
          }
          double v19 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v128.a) = 67110146;
            HIDWORD(v128.a) = v18;
            LOWORD(v128.b) = 2082;
            *(void *)((char *)&v128.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const";
            WORD1(v128.c) = 2082;
            *(void *)((char *)&v128.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
            WORD2(v128.d) = 1024;
            *(_DWORD *)((char *)&v128.d + 6) = 877;
            WORD1(v128.tx) = 2082;
            *(void *)((char *)&v128.tx + 4) = "_textSource";
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)&v128, 0x2Cu);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9B60);
          }
          double v20 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
          {
            uint64_t v46 = +[CRLAssertionHandler packedBacktraceString];
            LODWORD(v128.a) = 67109378;
            HIDWORD(v128.a) = v18;
            LOWORD(v128.b) = 2114;
            *(void *)((char *)&v128.b + 2) = v46;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v128, 0x12u);
          }
          double v21 = [(__objc2_class *)v15[107] stringWithUTF8String:"CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"];
          double v22 = [(__objc2_class *)v15[107] stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 877, 0, "invalid nil value for '%{public}s'", "_textSource");
        }
        if (v16)
        {
          CGFloat v23 = (const __CTLine *)sub_1001BAB78(v14);
          CGFloat v24 = CTLineGetGlyphRuns(v23);
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          id v25 = v24;
          id v26 = [v25 countByEnumeratingWithState:&v123 objects:v131 count:16];
          if (v26)
          {
            CGRect v103 = v25;
            uint64_t v105 = *(void *)v124;
            unint64_t v27 = v16 + v17;
            do
            {
              double v28 = 0;
              id v107 = v26;
              do
              {
                if (*(void *)v124 != v105) {
                  objc_enumerationMutation(v25);
                }
                BOOL v29 = *(const __CTRun **)(*((void *)&v123 + 1) + 8 * (void)v28);
                CFIndex GlyphCount = CTRunGetGlyphCount(v29);
                sub_10002B3D8(&buffer, GlyphCount);
                v132.CFIndex location = 0;
                v132.CFIndex length = GlyphCount;
                CTRunGetStringIndices(v29, v132, buffer);
                sub_100147A94(&glyphs, GlyphCount);
                v133.CFIndex location = 0;
                v133.CFIndex length = GlyphCount;
                CTRunGetGlyphs(v29, v133, glyphs);
                v134.CFIndex location = 0;
                v134.CFIndex length = 1;
                CTRunGetPositions(v29, v134, &v118);
                [*(id *)(a1 + 208) charIndexMappedToStorage:v17];
                double v32 = sub_100152D44(a1, v31, v102);
                if (GlyphCount >= 1)
                {
                  double v33 = v32;
                  for (CFIndex i = 0; i != GlyphCount; ++i)
                  {
                    unint64_t v35 = buffer[i] - *(void *)(v14 + 40);
                    if (v35 < v27 && (__int16)glyphs[i] != -1)
                    {
                      if (qword_1016A9138 != -1) {
                        dispatch_once(&qword_1016A9138, &stru_1014D9B20);
                      }
                      v138.CFIndex location = i;
                      v138.CFIndex length = 1;
                      CGRect ImageBounds = CTRunGetImageBounds(v29, (CGContextRef)qword_1016A9130, v138);
                      CGFloat v36 = ImageBounds.origin.x;
                      CGFloat v37 = ImageBounds.origin.y;
                      CGFloat width = ImageBounds.size.width;
                      CGFloat v39 = ImageBounds.size.height;
                      memset(&v128, 0, sizeof(v128));
                      CGAffineTransformMakeTranslation(&v128, *(double *)(a1 + 40) + *(double *)(v14 + 8), v33 + *(double *)(v14 + 16));
                      CGAffineTransform v117 = v128;
                      CGAffineTransformRotate(&v130, &v117, -1.57079633);
                      CGAffineTransform v128 = v130;
                      CGAffineTransform v116 = v130;
                      CGAffineTransformScale(&v130, &v116, 1.0, -1.0);
                      CGAffineTransform v128 = v130;
                      CGAffineTransform v115 = v130;
                      v142.origin.double x = v36;
                      v142.origin.CGFloat y = v37;
                      v142.size.CGFloat width = width;
                      v142.size.CGFloat height = v39;
                      CGRect v143 = CGRectApplyAffineTransform(v142, &v115);
                      CGFloat v40 = v143.origin.x;
                      double v41 = v143.origin.y;
                      CGFloat v42 = v143.size.width;
                      CGFloat v43 = v143.size.height;
                      double v44 = v118.x;
                      *(void *)&CGFloat leading = [*(id *)(a1 + 208) charIndexMappedToStorage:v35 + v17];
                      *(void *)&v130.a = &leading;
                      double v45 = sub_10015F4F0(v109, (unint64_t *)&leading, (uint64_t)&unk_101174E70, &v130);
                      *((CGFloat *)v45 + 5) = v40;
                      *((double *)v45 + 6) = v41 - v44;
                      *((CGFloat *)v45 + 7) = v42;
                      *((CGFloat *)v45 + _Block_object_dispose(&STACK[0x370], 8) = v43;
                    }
                  }
                }
                if (glyphs)
                {
                  id v120 = glyphs;
                  operator delete(glyphs);
                }
                id v25 = v103;
                if (buffer)
                {
                  CFIndex v122 = buffer;
                  operator delete(buffer);
                }
                double v28 = (char *)v28 + 1;
              }
              while (v28 != v107);
              id v26 = [v103 countByEnumeratingWithState:&v123 objects:v131 count:16];
            }
            while (v26);
          }

          id v15 = &off_1014C1000;
        }
        v14 += 104;
      }
      while (v14 != v101);
    }
    if (*(void *)(a1 + 224) != *(void *)(a1 + 216))
    {
      if (qword_1016A9138 != -1) {
        dispatch_once(&qword_1016A9138, &stru_1014D9B20);
      }
      CGContextSetTextPosition((CGContextRef)qword_1016A9130, 0.0, 0.0);
      uint64_t v47 = *(void *)(a1 + 224) - *(void *)(a1 + 216);
      if (v47)
      {
        uint64_t v48 = 0;
        unint64_t v49 = v47 / 104;
        double v50 = (void *)(a1 + 304);
        if (v49 <= 1) {
          unint64_t v49 = 1;
        }
        unint64_t v96 = v49;
        do
        {
          sub_1001BAAC4(&v128, *(void *)(a1 + 216) + 104 * v48);
          if ((v129 & 2) == 0)
          {
            CGFloat d = v128.d;
            if (!v48 && (*(unsigned char *)(a1 + 24) & 1) != 0)
            {
              *(void *)&v130.a = a1;
              uint64_t v91 = sub_10015F4F0(v109, (unint64_t *)a1, (uint64_t)&unk_101174E70, &v130);
              long long v92 = *(_OWORD *)(a1 + 40);
              *(_OWORD *)(v91 + 7) = *(_OWORD *)(a1 + 56);
              *(_OWORD *)(v91 + 5) = v92;
            }
            else
            {
              long long v112 = 0u;
              long long v113 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              CGFloat v52 = (const __CTLine *)sub_1001BAB78((uint64_t)&v128);
              id obj = CTLineGetGlyphRuns(v52);
              id v53 = [obj countByEnumeratingWithState:&v110 objects:v127 count:16];
              if (v53)
              {
                uint64_t v106 = *(void *)v111;
                while (2)
                {
                  uint64_t v54 = 0;
                  id v104 = v53;
                  do
                  {
                    if (*(void *)v111 != v106) {
                      objc_enumerationMutation(obj);
                    }
                    BOOL v55 = *(const __CTRun **)(*((void *)&v110 + 1) + 8 * v54);
                    CFIndex v56 = CTRunGetGlyphCount(v55);
                    if ((unint64_t)(v56 - 1) >= 0x10000)
                    {
                      unsigned int v86 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                      if (qword_101719A70 != -1) {
                        dispatch_once(&qword_101719A70, &stru_1014D9B80);
                      }
                      long long v87 = off_10166B4A0;
                      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v130.a) = 67110146;
                        HIDWORD(v130.a) = v86;
                        LOWORD(v130.b) = 2082;
                        *(void *)((char *)&v130.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, C"
                                                           "RLWPColumn *__strong) const";
                        WORD1(v130.c) = 2082;
                        *(void *)((char *)&v130.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/C"
                                                           "RLWPLineFragment.mm";
                        WORD2(v130.d) = 1024;
                        *(_DWORD *)((char *)&v130.d + 6) = 942;
                        WORD1(v130.tx) = 2048;
                        *(void *)((char *)&v130.tx + 4) = v56;
                        _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad glyph count: %ld", (uint8_t *)&v130, 0x2Cu);
                      }
                      if (qword_101719A70 != -1) {
                        dispatch_once(&qword_101719A70, &stru_1014D9BA0);
                      }
                      unint64_t v88 = off_10166B4A0;
                      if (os_log_type_enabled((os_log_t)v88, OS_LOG_TYPE_ERROR))
                      {
                        double v93 = +[CRLAssertionHandler packedBacktraceString];
                        LODWORD(v130.a) = 67109378;
                        HIDWORD(v130.a) = v86;
                        LOWORD(v130.b) = 2114;
                        *(void *)((char *)&v130.b + 2) = v93;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v88, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v130, 0x12u);
                      }
                      uint64_t v89 = +[NSString stringWithUTF8String:"CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"];
                      unint64_t v90 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
                      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v89, v90, 942, 0, "bad glyph count: %ld", v56);

                      goto LABEL_128;
                    }
                    sub_10002B3D8(&buffer, v56);
                    v135.CFIndex location = 0;
                    v135.CFIndex length = v56;
                    CTRunGetStringIndices(v55, v135, buffer);
                    sub_100147A94(&glyphs, v56);
                    v136.CFIndex location = 0;
                    v136.CFIndex length = v56;
                    CTRunGetGlyphs(v55, v136, glyphs);
                    char Status = CTRunGetStatus(v55);
                    if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
                    {
                      if ((Status & 4) != 0)
                      {
                        CFDictionaryRef Attributes = CTRunGetAttributes(v55);
                        Value = (const __CTFont *)CFDictionaryGetValue(Attributes, kCTFontAttributeName);
                        CTFontGetVerticalTranslationsForGlyphs(Value, glyphs, (CGSize *)&v130, 1);
                      }
                      else
                      {
                        v130.a = 0.0;
                        v118.double x = 0.0;
                        CGFloat leading = 0.0;
                        v137.CFIndex location = 0;
                        v137.CFIndex length = 0;
                        CTRunGetTypographicBounds(v55, v137, &v130.a, &v118.x, &leading);
                      }
                    }
                    CFIndex v60 = *(void *)&d;
                    if (!v48) {
                      CFIndex v60 = *buffer;
                    }
                    uint64_t v108 = v54;
                    if (v60 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      unsigned int v61 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                      if (qword_101719A70 != -1) {
                        dispatch_once(&qword_101719A70, &stru_1014D9BC0);
                      }
                      double v62 = off_10166B4A0;
                      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v130.a) = 67109890;
                        HIDWORD(v130.a) = v61;
                        LOWORD(v130.b) = 2082;
                        *(void *)((char *)&v130.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, C"
                                                           "RLWPColumn *__strong) const";
                        WORD1(v130.c) = 2082;
                        *(void *)((char *)&v130.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/C"
                                                           "RLWPLineFragment.mm";
                        WORD2(v130.d) = 1024;
                        *(_DWORD *)((char *)&v130.d + 6) = 971;
                        _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad baselineCharIndex", (uint8_t *)&v130, 0x22u);
                      }
                      if (qword_101719A70 != -1) {
                        dispatch_once(&qword_101719A70, &stru_1014D9BE0);
                      }
                      double v63 = off_10166B4A0;
                      if (os_log_type_enabled((os_log_t)v63, OS_LOG_TYPE_ERROR))
                      {
                        double v85 = +[CRLAssertionHandler packedBacktraceString];
                        LODWORD(v130.a) = 67109378;
                        HIDWORD(v130.a) = v61;
                        LOWORD(v130.b) = 2114;
                        *(void *)((char *)&v130.b + 2) = v85;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v63, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v130, 0x12u);
                      }
                      double v64 = +[NSString stringWithUTF8String:"CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"];
                      unint64_t v65 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
                      +[CRLAssertionHandler handleFailureInFunction:v64 file:v65 lineNumber:971 isFatal:0 description:"bad baselineCharIndex"];
                    }
                    uint64_t v66 = 0;
                    do
                    {
                      if (!*(void *)(a1 + 208))
                      {
                        unsigned int v67 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                        if (qword_101719A70 != -1) {
                          dispatch_once(&qword_101719A70, &stru_1014D9C00);
                        }
                        unsigned __int8 v68 = off_10166B4A0;
                        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v130.a) = 67110146;
                          HIDWORD(v130.a) = v67;
                          LOWORD(v130.b) = 2082;
                          *(void *)((char *)&v130.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange,"
                                                             " CRLWPColumn *__strong) const";
                          WORD1(v130.c) = 2082;
                          *(void *)((char *)&v130.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP"
                                                             "/CRLWPLineFragment.mm";
                          WORD2(v130.d) = 1024;
                          *(_DWORD *)((char *)&v130.d + 6) = 975;
                          WORD1(v130.tx) = 2082;
                          *(void *)((char *)&v130.tx + 4) = "_textSource";
                          _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)&v130, 0x2Cu);
                        }
                        if (qword_101719A70 != -1) {
                          dispatch_once(&qword_101719A70, &stru_1014D9C20);
                        }
                        double v69 = off_10166B4A0;
                        if (os_log_type_enabled((os_log_t)v69, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v84 = +[CRLAssertionHandler packedBacktraceString];
                          LODWORD(v130.a) = 67109378;
                          HIDWORD(v130.a) = v67;
                          LOWORD(v130.b) = 2114;
                          *(void *)((char *)&v130.b + 2) = v84;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v69, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v130, 0x12u);
                        }
                        double v70 = +[NSString stringWithUTF8String:"CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"];
                        double v71 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
                        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v70, v71, 975, 0, "invalid nil value for '%{public}s'", "_textSource");
                      }
                      CGFloat v73 = CGRectNull.origin.x;
                      CGFloat v72 = CGRectNull.origin.y;
                      CGFloat v75 = CGRectNull.size.width;
                      CGFloat v74 = CGRectNull.size.height;
                      v144.origin.double x = CGRectNull.origin.x;
                      v144.origin.CGFloat y = v72;
                      v144.size.CGFloat width = v75;
                      v144.size.CGFloat height = v74;
                      if (!CGRectIsNull(v144))
                      {
                        CFIndex v76 = *(void *)&d;
                        if (!v48) {
                          CFIndex v76 = buffer[v66];
                        }
                        v118.double x = 0.0;
                        id v77 = [*(id *)(a1 + 208) charIndexMappedToStorage:v76];
                        *(void *)&v118.double x = v77;
                        double v78 = (void *)*v50;
                        if (*v50)
                        {
                          double v79 = (void *)(a1 + 304);
                          do
                          {
                            unint64_t v80 = v78[4];
                            BOOL v81 = v80 >= (unint64_t)v77;
                            if (v80 >= (unint64_t)v77) {
                              int v82 = v78;
                            }
                            else {
                              int v82 = v78 + 1;
                            }
                            if (v81) {
                              double v79 = v78;
                            }
                            double v78 = (void *)*v82;
                          }
                          while (*v82);
                          if (v79 != v50 && (unint64_t)v77 >= v79[4])
                          {
                            *(void *)&v130.a = &v118;
                            CGRect v147 = *(CGRect *)(sub_10015F4F0(v109, (unint64_t *)&v118, (uint64_t)&unk_101174E70, &v130)+ 5);
                            v145.origin.double x = CGRectNull.origin.x;
                            v145.origin.CGFloat y = v72;
                            v145.size.CGFloat width = v75;
                            v145.size.CGFloat height = v74;
                            CGRect v146 = CGRectUnion(v145, v147);
                            CGFloat v73 = v146.origin.x;
                            CGFloat v72 = v146.origin.y;
                            CGFloat v75 = v146.size.width;
                            CGFloat v74 = v146.size.height;
                          }
                        }
                        *(void *)&v130.a = &v118;
                        uint64_t v83 = sub_10015F4F0(v109, (unint64_t *)&v118, (uint64_t)&unk_101174E70, &v130);
                        *((CGFloat *)v83 + 5) = v73;
                        *((CGFloat *)v83 + 6) = v72;
                        *((CGFloat *)v83 + 7) = v75;
                        *((CGFloat *)v83 + _Block_object_dispose(&STACK[0x370], 8) = v74;
                      }
                      ++v66;
                    }
                    while (v66 != v56);
                    if (glyphs)
                    {
                      id v120 = glyphs;
                      operator delete(glyphs);
                    }
                    if (buffer)
                    {
                      CFIndex v122 = buffer;
                      operator delete(buffer);
                    }
                    uint64_t v54 = v108 + 1;
                  }
                  while ((id)(v108 + 1) != v104);
                  id v53 = [obj countByEnumeratingWithState:&v110 objects:v127 count:16];
                  if (v53) {
                    continue;
                  }
                  break;
                }
              }
LABEL_128:
            }
          }
          sub_1001BAAFC(&v128);
          ++v48;
        }
        while (v48 != v96);
      }
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 320));
  unint64_t v6 = a2;
  if (a2 < a2 + a3)
  {
    unsigned int v7 = (void *)(a1 + 304);
    do
    {
      unint64_t v8 = (void *)*v7;
      if (*v7)
      {
        uint64_t v9 = (void *)(a1 + 304);
        do
        {
          unint64_t v10 = v8[4];
          BOOL v11 = v10 >= v6;
          if (v10 >= v6) {
            uint64_t v12 = v8;
          }
          else {
            uint64_t v12 = v8 + 1;
          }
          if (v11) {
            uint64_t v9 = v8;
          }
          unint64_t v8 = (void *)*v12;
        }
        while (*v12);
        if (v9 != v7 && v6 >= v9[4])
        {
          v139.origin.CGFloat y = y;
          v139.origin.double x = x;
          v139.size.CGFloat width = r1;
          v139.size.CGFloat height = height;
          CGRect v140 = CGRectUnion(v139, *(CGRect *)(v9 + 5));
          CGFloat y = v140.origin.y;
          double x = v140.origin.x;
          CGFloat r1 = v140.size.width;
          CGFloat height = v140.size.height;
        }
      }
      ++v6;
    }
    while (v6 != a2 + a3);
  }

  return x;
}

void sub_100157978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_100157B44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157B88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157BCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157C10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157C54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157C98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157CDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100157D20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100157D64(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  v13.origin.double x = sub_100156930(a1, a2, a3, v7);
  double x = v13.origin.x;
  CGFloat y = v13.origin.y;
  CGFloat width = v13.size.width;
  CGFloat height = v13.size.height;
  if (!CGRectIsEmpty(v13))
  {
    v14.origin.double x = x;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    *(void *)&double x = (unint64_t)CGRectInset(v14, -1.0, -1.0);
  }

  return x;
}

void sub_100157E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100157E2C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = a3;
  *(_OWORD *)(a4 + 32) = xmmword_101176408;
  *(_OWORD *)(a4 + 4_Block_object_dispose(&STACK[0x370], 8) = *(_OWORD *)&qword_101176418;
  *(_OWORD *)(a4 + 64) = xmmword_101176428;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)&qword_101176438;
  *(_OWORD *)a4 = xmmword_1011763E8;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)&qword_1011763F8;
  id v8 = *(id *)(a1 + 208);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 216);
    uint64_t v10 = *(void *)(a1 + 224);
    if (v9 != v10)
    {
      while (1)
      {
        BOOL v11 = (const __CTLine *)sub_1001BAB78(v9);
        CFRange StringRange = CTLineGetStringRange(v11);
        id v13 = [v8 charRangeMappedToStorage:StringRange.location, StringRange.length];
        if (a2 >= (unint64_t)v13 && a2 - (unint64_t)v13 < v14) {
          break;
        }
        v9 += 104;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
      id v15 = (const __CTLine *)sub_1001BAB78(v9);
      CTLineGetGlyphRuns(v15);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      id v17 = [v16 countByEnumeratingWithState:&v37 objects:v41 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v38;
        while (2)
        {
          for (CFIndex i = 0; i != v17; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v38 != v18) {
              objc_enumerationMutation(v16);
            }
            double v20 = *(const __CTRun **)(*((void *)&v37 + 1) + 8 * i);
            CFRange v21 = CTRunGetStringRange(v20);
            id v22 = [v8 charRangeMappedToStorage:v21.location, v21.length];
            if (a2 >= (unint64_t)v22 && a2 - (unint64_t)v22 < v23)
            {
              id v25 = CTRunGetAttributes(v20);
              id v26 = [v25 objectForKeyedSubscript:NSFontAttributeName];

              if (v26)
              {
                sub_1001CE5C0((uint64_t)v26, leading);
                long long v27 = v34;
                *(_OWORD *)(a4 + 32) = v33;
                *(_OWORD *)(a4 + 4_Block_object_dispose(&STACK[0x370], 8) = v27;
                long long v28 = v36;
                *(_OWORD *)(a4 + 64) = v35;
                *(_OWORD *)(a4 + 80) = v28;
                long long v29 = v32;
                *(_OWORD *)a4 = *(_OWORD *)leading;
                *(_OWORD *)(a4 + 16) = v29;
              }
              else
              {
                leading[0] = 0.0;
                v42.CFIndex location = 0;
                v42.CFIndex length = 0;
                CTRunGetTypographicBounds(v20, v42, (CGFloat *)(a4 + 16), (CGFloat *)(a4 + 32), leading);
                CGFloat v30 = leading[0] * 0.5;
                *(double *)(a4 + 40) = leading[0] * 0.5;
                *(CGFloat *)(a4 + 4_Block_object_dispose(&STACK[0x370], 8) = v30;
              }

              goto LABEL_24;
            }
          }
          id v17 = [v16 countByEnumeratingWithState:&v37 objects:v41 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }
LABEL_24:
    }
  }
LABEL_25:
}

void sub_100158094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001580F0(uint64_t a1, uint64_t a2, NSUInteger a3, NSUInteger a4)
{
  v22.CFIndex location = a3;
  v22.CFIndex length = a4;
  double x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  uint64_t v9 = *(void *)(a1 + 248);
  uint64_t v8 = *(void *)(a1 + 256);
  if (v9 != v8)
  {
    while (*(void *)(v9 + 24) != a2)
    {
      v9 += 104;
      if (v9 == v8) {
        return x;
      }
    }
    BOOL v11 = (const __CTLine *)sub_1001BAB78(v9);
    CTLineGetGlyphRuns(v11);
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v13)
    {
      unsigned int v14 = 0;
      uint64_t v15 = *(void *)v24;
      id obj = v12;
      do
      {
        for (CFIndex i = 0; i != v13; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(obj);
          }
          id v17 = *(const __CTRun **)(*((void *)&v23 + 1) + 8 * i);
          NSUInteger GlyphCount = CTRunGetGlyphCount(v17);
          v28.CFIndex location = v14;
          v28.CFIndex length = GlyphCount;
          NSRange v19 = NSIntersectionRange(v22, v28);
          if (v19.length)
          {
            if (qword_1016A9138 != -1) {
              dispatch_once(&qword_1016A9138, &stru_1014D9B20);
            }
            v29.CFIndex location = v19.location - v14;
            v29.CFIndex length = v19.length;
            CGRect ImageBounds = CTRunGetImageBounds(v17, (CGContextRef)qword_1016A9130, v29);
            v32.size.CGFloat width = ImageBounds.size.width;
            v32.size.CGFloat height = ImageBounds.size.height;
            v32.origin.double x = ImageBounds.origin.x + *(double *)(v9 + 8) + *(double *)(a1 + 40);
            v32.origin.CGFloat y = *(double *)(v9 + 16) + *(double *)(a1 + 32) - ImageBounds.origin.y - ImageBounds.size.height;
            ImageBounds.origin.double x = x;
            ImageBounds.origin.CGFloat y = y;
            ImageBounds.size.CGFloat width = width;
            ImageBounds.size.CGFloat height = height;
            CGRect v31 = CGRectUnion(ImageBounds, v32);
            double x = v31.origin.x;
            CGFloat y = v31.origin.y;
            CGFloat width = v31.size.width;
            CGFloat height = v31.size.height;
          }
          v14 += GlyphCount;
        }
        id v12 = obj;
        id v13 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v13);
    }
  }
  return x;
}

void sub_100158320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_10015835C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  double x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  id v10 = *(id *)(a1 + 408);
  if ([v10 count])
  {
    uint64_t v12 = *(void *)(a1 + 216);
    uint64_t v11 = *(void *)(a1 + 224);

    if (v11 != v12)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id obj = *(id *)(a1 + 408);
      id v13 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
      if (v13)
      {
        uint64_t v40 = *(void *)v45;
        do
        {
          for (CFIndex i = 0; i != v13; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v45 != v40) {
              objc_enumerationMutation(obj);
            }
            uint64_t v15 = *(void **)(*((void *)&v44 + 1) + 8 * i);
            if ([v15 type] == 4)
            {
              id v16 = [v15 positionCount];
              if (v16 == [v15 charIndexCount])
              {
                [v15 textPosition];
                double v41 = v18;
                double v42 = v17;
                NSRange v19 = (double *)[v15 positions];
                double v20 = [v15 charIndexes];
                id v21 = [v15 positionCount];
                if (v21)
                {
                  uint64_t v22 = 0;
                  unsigned int v23 = 1;
                  do
                  {
                    unint64_t v24 = v20[v22];
                    BOOL v26 = v24 >= a2;
                    unint64_t v25 = v24 - a2;
                    BOOL v26 = !v26 || v25 >= a3;
                    if (!v26)
                    {
                      CGFloat v43 = height;
                      CGFloat v27 = width;
                      CGFloat v28 = y;
                      CGFloat v29 = x;
                      double v31 = *(double *)(a1 + 32);
                      double v30 = *(double *)(a1 + 40);
                      double v32 = *(double *)(*(void *)(a1 + 216) + 8);
                      double v33 = v19[2 * v22];
                      [v15 ascent];
                      double v35 = v34;
                      [v15 advance];
                      v51.size.CGFloat width = v36;
                      v49.size.CGFloat height = v43;
                      v51.origin.double x = v33 + v42 + v30 + v32;
                      v51.origin.CGFloat y = v41 + v31 - v35;
                      v49.origin.double x = v29;
                      v49.origin.CGFloat y = v28;
                      v49.size.CGFloat width = v27;
                      v51.size.CGFloat height = v35;
                      CGRect v50 = CGRectUnion(v49, v51);
                      double x = v50.origin.x;
                      CGFloat y = v50.origin.y;
                      CGFloat width = v50.size.width;
                      CGFloat height = v50.size.height;
                    }
                    uint64_t v22 = v23;
                  }
                  while ((unint64_t)v21 > v23++);
                }
              }
            }
          }
          id v13 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
        }
        while (v13);
      }
    }
  }
  else
  {
  }
  return x;
}

void sub_1001585DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100158628(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 0x80) != 0 || *(void *)(a1 + 256) != *(void *)(a1 + 248)) {
    return 1;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  id v3 = *(id *)(a1 + 408);
  uint64_t v1 = (uint64_t)[v3 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v1)
  {
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * i), "type", (void)v6) == 4)
        {
          uint64_t v1 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v1 = (uint64_t)[v3 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v1) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v1;
}

void sub_100158744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100158764(uint64_t a1)
{
  double x = CGRectNull.origin.x;
  id v3 = *(id *)(a1 + 200);
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 size];
    double v6 = v5;
    CGFloat v8 = v7;
    long long v9 = (char *)[v4 labelType];
    [v4 height];
    double v11 = v10;
    [v4 width];
    if ((unint64_t)(v9 - 2) < 2) {
      goto LABEL_5;
    }
    if (v9 != (char *)1) {
      goto LABEL_9;
    }
    if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
    {
      [v4 width];
      double v11 = v24;
      [v4 height];
      double v26 = v25;
      CGFloat v13 = v6;
    }
    else
    {
LABEL_5:
      double v26 = v12;
      CGFloat v13 = v8;
      CGFloat v8 = v6;
    }
    double v14 = *(double *)(a1 + 120);
    double v15 = *(double *)(a1 + 136);
    double v16 = *(double *)(a1 + 104);
    [v4 baselineOffset];
    double v18 = v17;
    [v4 labelIndent];
    double v20 = v19;
    if ([v4 isLabelRTL])
    {
      double v21 = *(double *)(a1 + 56);
      [v4 labelIndent];
      double v20 = v21 - v22 - v26;
    }
    v27.origin.CGFloat y = v16 + (v14 + v15 - v11) * 0.5;
    v27.origin.double x = v20;
    v27.size.CGFloat width = v8;
    v27.size.CGFloat height = v13;
    CGRect v28 = CGRectOffset(v27, 0.0, *(CGFloat *)(a1 + 144));
    CGRect v29 = CGRectOffset(v28, 0.0, -v18);
    *(void *)&double x = (unint64_t)CGRectOffset(v29, *(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48));
  }
LABEL_9:

  return x;
}

void sub_1001588F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100158924(uint64_t a1)
{
  double x = CGPointZero.x;
  id v3 = *(id *)(a1 + 200);
  uint64_t v4 = v3;
  if (v3)
  {
    if (((unint64_t)[v3 labelType] & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      double x = sub_100158764(a1);
      if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
      {
        if ([v4 isLabelTateChuYoko])
        {
          *(void *)&v14[0] = 0;
          CTLineGetTypographicBounds((CTLineRef)[v4 textLine], (CGFloat *)v14, 0, 0);
          double v9 = *(double *)v14;
          [v4 baselineOffset];
          double x = x + v9;
        }
        else
        {
          [v4 baselineOffset];
        }
      }
      else
      {
        id v5 = [v4 labelFont];
        if (v5)
        {
          if ([v4 labelType] == (id)2)
          {
            memset(v14, 0, sizeof(v14));
            sub_1001CE5C0((uint64_t)v5, v14);
          }
          [v4 baselineOffset];
        }
        else if (CTLineGetGlyphCount((CTLineRef)[v4 textLine]))
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9C40);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10107E7C0();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014D9C60);
          }
          double v10 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
          {
            +[CRLAssertionHandler packedBacktraceString];
            objc_claimAutoreleasedReturnValue();
            sub_1010663B0();
          }

          double v11 = +[NSString stringWithUTF8String:"CGPoint CRLWPLineFragment::labelTextPosition() const"];
          double v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
          +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:1266 isFatal:0 description:"No label font but we need to render something"];
        }
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9C80);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107E848();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9CA0);
      }
      double v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      double v7 = +[NSString stringWithUTF8String:"CGPoint CRLWPLineFragment::labelTextPosition() const"];
      CGFloat v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:1288 isFatal:0 description:"Text position only applies to text and numbers."];
    }
  }

  return x;
}

void sub_100158D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100158DA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100158DE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100158E2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100158E70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100158EB4(unint64_t *a1, char a2)
{
  unint64_t v4 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  if (*a1 <= v4) {
    uint64_t v5 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  }
  else {
    uint64_t v5 = *a1;
  }
  if (*a1 >= v4) {
    unint64_t v6 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  }
  else {
    unint64_t v6 = *a1;
  }
  sub_100152F60(a1, v6, v5 - v6, a2, 1, 1, 0, (char **)__p);
  sub_1001CEDF4((CGRect **)__p);
  double v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a1[3] & 2) != 0)
  {
    unint64_t v15 = a1[27];
    unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[28] - v15) >> 3);
    if (v16 >= 2)
    {
      uint64_t v17 = v15 + 104;
      unint64_t v18 = v16 - 1;
      while ((*(unsigned char *)(v17 + 96) & 2) == 0)
      {
        v17 += 104;
        if (!--v18) {
          return v8;
        }
      }
      CGFloat v19 = *(double *)(v17 + 8);
      double v20 = (const __CTLine *)sub_1001BAB78(v17);
      v24.size.CGFloat width = CTLineGetTypographicBounds(v20, 0, 0, 0);
      v23.origin.double x = v8;
      v23.origin.CGFloat y = v10;
      v23.size.CGFloat width = v12;
      v23.size.CGFloat height = v14;
      v24.origin.double x = v19;
      v24.origin.CGFloat y = v10;
      v24.size.CGFloat height = v14;
      *(void *)&double v8 = (unint64_t)CGRectUnion(v23, v24);
    }
  }
  return v8;
}

void sub_100159004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100159020(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) >> 1) & 1;
}

double sub_10015902C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  id v3 = (const __CTLine *)sub_1001BAB78(v2);
  CTLineGetTypographicBounds(v3, 0, 0, 0);
  return *(double *)(a1 + 40) + *(double *)(v2 + 8);
}

uint64_t sub_10015909C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_100155464(a1);
  uint64_t v3 = *v2;
  if (*v2 == v2[1]) {
    uint64_t v3 = a1;
  }
  return *(void *)v3;
}

uint64_t sub_1001590D0(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100155464(a1);
  uint64_t v3 = v2[1];
  if (*v2 == v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = v3 - 64;
  }
  return *(void *)v4;
}

uint64_t sub_100159108(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = sub_100155464(a1);
  uint64_t v5 = *(uint64_t **)v4;
  if (*(void *)v4 == *(void *)(v4 + 8)) {
    uint64_t v5 = (uint64_t *)a1;
  }
  uint64_t v6 = *v5;
  *a2 = 1;
  if (*(void *)(a1 + 8)) {
    *a2 = sub_100159174((long long *)a1, v6) == 0;
  }
  return v6;
}

uint64_t sub_100159174(long long *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 3);
  if (v2) {
    return 0;
  }
  uint64_t v5 = &xmmword_101176F48;
  if (v2 >= 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(void *)v5 + *((void *)v5 + 1);
  if (v6 == a2 || (v2 & 0x800) != 0 && v6 - 1 == a2) {
    return ((unint64_t)v2 >> 12) & 1;
  }
  double v8 = (void *)*((void *)a1 + 26);
  if (!v8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA100);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E978();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA120);
    }
    double v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    CGFloat v10 = +[NSString stringWithUTF8String:"CRLWPWritingDirection CRLWPLineFragment::writingDirectionForCharIndex(CRLWPCharIndex) const"];
    double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 2488, 0, "invalid nil value for '%{public}s'", "_textSource");

    double v8 = (void *)*((void *)a1 + 26);
  }
  CGFloat v12 = (char *)[v8 charIndexMappedFromStorage:a2];
  uint64_t v13 = *((void *)a1 + 27);
  uint64_t v14 = *((void *)a1 + 28);
  if (v14 == v13 && v12 == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    int v15 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA140);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107E8D0(a2, v15);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA160);
    }
    unint64_t v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v17 = +[NSString stringWithUTF8String:"CRLWPWritingDirection CRLWPLineFragment::writingDirectionForCharIndex(CRLWPCharIndex) const"];
    unint64_t v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 2492, 0, "bad character index: %d", a2);

    return 0;
  }
  id v7 = 0;
  if (v14 != v13 && v12 != (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    double v20 = (const __CTLine *)sub_1001BAB78(v13);
    double v21 = CTLineGetGlyphRuns(v20);
    id v7 = [v21 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v7)
    {
      uint64_t v22 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v21);
          }
          CGRect v24 = *(const __CTRun **)(*((void *)&v27 + 1) + 8 * i);
          CFRange StringRange = CTRunGetStringRange(v24);
          if ((unint64_t)v12 >= StringRange.location
            && (unint64_t)&v12[-StringRange.location] < StringRange.length)
          {
            id v7 = (id)(CTRunGetStatus(v24) & 1);
            goto LABEL_45;
          }
        }
        id v7 = [v21 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v7);
    }
LABEL_45:
  }
  return (uint64_t)v7;
}

void sub_10015957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001595CC(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = (void *)sub_100155464(a1);
  uint64_t v5 = v4[1];
  if (*v4 == v5) {
    uint64_t v6 = (uint64_t *)a1;
  }
  else {
    uint64_t v6 = (uint64_t *)(v5 - 64);
  }
  uint64_t v7 = *v6;
  *a2 = 1;
  if (*(void *)(a1 + 8)) {
    *a2 = sub_100159174((long long *)a1, v7);
  }
  return v7;
}

void sub_100159634(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159678(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001596BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159744(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159788(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CFIndex sub_1001597CC(uint64_t a1)
{
  uint64_t v2 = a1 + 216;
  uint64_t v1 = *(void *)(a1 + 216);
  if (*(void *)(v2 + 8) == v1) {
    return 0;
  }
  uint64_t v3 = (const __CTLine *)sub_1001BAB78(v1);

  return CTLineGetGlyphCount(v3);
}

double sub_10015980C(uint64_t a1, unint64_t a2, int a3)
{
  double v41 = 0.0;
  double v6 = sub_100153EB4(a1, a2, 0, 0, &v41);
  uint64_t v7 = *(void **)(a1 + 208);
  if (!v7)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v7 = 0;
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9D80);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107EA94();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9DA0);
      }
      double v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      double v9 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL) const"];
      CGFloat v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1618 isFatal:0 description:"Unexpected nil _textSource"];

      uint64_t v7 = *(void **)(a1 + 208);
    }
  }
  double v11 = (char *)[v7 charIndexMappedFromStorage:a2];
  uint64_t v12 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) != v12)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v13 = (const __CTLine *)sub_1001BAB78(v12);
    uint64_t v14 = CTLineGetGlyphRuns(v13);
    id v15 = [v14 countByEnumeratingWithState:&v37 objects:v43 count:16];
    if (v15)
    {
      unint64_t v16 = &v11[-((v11 != 0) & ~a3)];
      uint64_t v17 = *(void *)v38;
      while (2)
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v38 != v17) {
            objc_enumerationMutation(v14);
          }
          CGFloat v19 = *(const __CTRun **)(*((void *)&v37 + 1) + 8 * i);
          CFIndex GlyphCount = CTRunGetGlyphCount(v19);
          if ((unint64_t)(GlyphCount - 1) >= 0x10000)
          {
            +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D9DC0);
            }
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
              sub_10107EA0C();
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014D9DE0);
            }
            double v33 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
            {
              +[CRLAssertionHandler packedBacktraceString];
              objc_claimAutoreleasedReturnValue();
              sub_1010663B0();
            }

            double v34 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL) const"];
            double v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v34, v35, 1634, 0, "bad glyph count: %ld", GlyphCount);

            goto LABEL_48;
          }
          sub_10002B3D8(buffer, GlyphCount);
          v44.CFIndex location = 0;
          v44.CFIndex length = GlyphCount;
          CTRunGetStringIndices(v19, v44, buffer[0]);
          CFIndex v21 = 0;
          int v22 = 0;
          int v23 = 0;
          int v24 = 0;
          do
          {
            unint64_t v25 = buffer[0][v21];
            BOOL v26 = v25 == (void)v16;
            BOOL v27 = v25 > (unint64_t)v16;
            BOOL v28 = v25 == (void)v16;
            int v29 = !v27;
            int v30 = v27;
            int v31 = v30 | v23;
            int v32 = v29 | v22;
            v24 |= v28;
            if (!v26)
            {
              int v23 = v31;
              int v22 = v32;
            }
            ++v21;
          }
          while (v21 < GlyphCount && (v24 & (v23 | v22) & 1) == 0);
          if (((v24 | v23 & v22) & 1) != 0
            && ((CTRunGetStatus(v19) & 1) == 0) == (*(unsigned char *)(a1 + 25) & 0x10) >> 4)
          {
            double v6 = v41;
          }
          if (buffer[0])
          {
            buffer[1] = buffer[0];
            operator delete(buffer[0]);
          }
        }
        id v15 = [v14 countByEnumeratingWithState:&v37 objects:v43 count:16];
        if (v15) {
          continue;
        }
        break;
      }
    }
LABEL_48:
  }
  return v6;
}

void sub_100159C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Unwind_Resume(a1);
}

void sub_100159D1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159D60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159DA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100159DE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100159E2C(unint64_t *a1, unint64_t a2, BOOL *a3)
{
  unint64_t v7 = a1[27];
  unint64_t v6 = a1[28];
  if (v6 == v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9E00);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107EB1C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9E20);
    }
    double v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v9 = +[NSString stringWithUTF8String:"CTFontRef CRLWPLineFragment::fontAtCharIndex(CRLWPCharIndex, BOOL &) const"];
    CGFloat v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1667 isFatal:0 description:"No line refs"];

    unint64_t v7 = a1[27];
    unint64_t v6 = a1[28];
  }
  if (v6 == v7) {
    return 0;
  }
  unint64_t v11 = *a1;
  uint64_t v12 = a1[3];
  BOOL v13 = v12 < 0;
  if (v12 < 0) {
    uint64_t v14 = &xmmword_101176F48;
  }
  else {
    uint64_t v14 = (long long *)a1;
  }
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v13) {
    uint64_t v16 = *a1;
  }
  unint64_t v17 = v16 + v15;
  if (v11 <= a2) {
    unint64_t v11 = a2;
  }
  if (v17 >= v11) {
    uint64_t v18 = v11;
  }
  else {
    uint64_t v18 = v17;
  }
  CGFloat v19 = (char *)[(id)a1[26] charIndexMappedFromStorage:v18];
  *a3 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  double v20 = (const __CTLine *)sub_1001BAB78(a1[27]);
  CFIndex v21 = CTLineGetGlyphRuns(v20);
  id v22 = [v21 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v32;
    while (2)
    {
      for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v23) {
          objc_enumerationMutation(v21);
        }
        unint64_t v25 = *(const __CTRun **)(*((void *)&v31 + 1) + 8 * i);
        CFRange StringRange = CTRunGetStringRange(v25);
        if ((unint64_t)v19 >= StringRange.location
          && (unint64_t)&v19[-StringRange.location] < StringRange.length)
        {
          CFDictionaryRef Attributes = CTRunGetAttributes(v25);
          Value = (void *)CFDictionaryGetValue(Attributes, @"CRLWPUnadjustedFont");
          id v22 = Value;
          if (!Value) {
            id v22 = (id)CFDictionaryGetValue(Attributes, kCTFontAttributeName);
          }
          *a3 = (CTRunGetStatus(v25) & 4) != 0;
          goto LABEL_38;
        }
      }
      id v22 = [v21 countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (v22) {
        continue;
      }
      break;
    }
  }
LABEL_38:

  return v22;
}

void sub_10015A128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015A164(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015A1A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015A1EC(uint64_t a1, unint64_t a2, BOOL a3, int a4, char a5)
{
  BOOL v40 = a3;
  if (*(uint64_t *)(a1 + 24) < 0) {
    uint64_t v5 = &xmmword_101176F48;
  }
  else {
    uint64_t v5 = (long long *)a1;
  }
  double v8 = v5;
  unint64_t v6 = *(void *)v5;
  unint64_t v7 = *((void *)v8 + 1);
  BOOL v9 = a2 - v6 < v7 && a2 >= v6;
  uint64_t v10 = v6 + v7;
  if (v9 || v10 == a2)
  {
    uint64_t v15 = sub_10015A5E4(a1, a2, &v40, a4);
    uint64_t v16 = *(void *)(a1 + 216);
    if (*(void *)(a1 + 224) == v16)
    {
      double v27 = 0.0;
      if (a5) {
        return;
      }
      goto LABEL_29;
    }
    unint64_t v17 = v15;
    uint64_t v18 = (uint64_t *)sub_100155464(a1);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    if (v19 == *v18)
    {
      uint64_t v29 = *(void *)(a1 + 24);
      if ((v29 & 1) == 0)
      {
        double v30 = *(double *)(v16 + 8);
        if ((v29 & 0x800) != 0)
        {
          double v31 = -7.0;
          if ((v29 & 0x1000) == 0) {
            double v31 = 7.0;
          }
          double v32 = v31 + v30;
          if (!v40) {
            double v30 = v32;
          }
        }
LABEL_49:
        double v27 = v30 + *(double *)(a1 + 40);
        if (a5) {
          return;
        }
LABEL_29:
        double MaxX = CGRectGetMaxX(*(CGRect *)(a1 + 40));
        fmax(fmin(v27, MaxX), CGRectGetMinX(*(CGRect *)(a1 + 40)));
        return;
      }
      if (v40)
      {
        if (v29 < 0) {
          long long v33 = &xmmword_101176F48;
        }
        else {
          long long v33 = (long long *)a1;
        }
        BOOL v34 = *(void *)v33 == a2;
      }
      else
      {
        BOOL v34 = 0;
      }
      double v35 = [*(id *)(a1 + 400) geometry];
      [v35 frame];
      double v37 = v36;
      double v39 = v38;

      double v22 = *(double *)(v16 + 8);
      double v23 = 0.0;
      if (v34 == ((v29 >> 12) & 1))
      {
        if ((*(unsigned char *)(a1 + 25) & 0x20) != 0) {
          double v23 = v39;
        }
        else {
          double v23 = v37;
        }
      }
    }
    else
    {
      unint64_t v21 = (v19 - *v18) >> 6;
      if (v17 < v21 && *(unsigned char *)(v20 + (v17 << 6) + 48) != v40) {
        ++v17;
      }
      if (v17 == v21)
      {
        double v22 = *(double *)(v16 + 8);
        double v23 = *(double *)(v19 - 24);
      }
      else
      {
        double v22 = *(double *)(v20 + (v17 << 6) + 32);
        double v23 = *(double *)(v16 + 8);
      }
    }
    double v30 = v22 + v23;
    goto LABEL_49;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D9E40);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10107EBA4();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014D9E60);
  }
  int v24 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  unint64_t v25 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::wpOffsetForInsertionPoint(CRLWPCharIndex, BOOL, BOOL, BOOL) const"];
  BOOL v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
  +[CRLAssertionHandler handleFailureInFunction:v25 file:v26 lineNumber:1700 isFatal:0 description:"invalid charIndex for line fragment"];
}

void sub_10015A520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015A55C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015A5A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015A5E4(uint64_t a1, unint64_t a2, BOOL *a3, int a4)
{
  if ([*(id *)(a1 + 208) length])
  {
    unint64_t v8 = *(void *)(a1 + 24) & 0x1000;
    if (*(uint64_t *)(a1 + 24) < 0) {
      BOOL v9 = &xmmword_101176F48;
    }
    else {
      BOOL v9 = (long long *)a1;
    }
    uint64_t v10 = (char *)objc_msgSend(*(id *)(a1 + 208), "charRangeRemappedFromStorage:", *(void *)v9, *((void *)v9 + 1));
    unint64_t v11 = v10;
    uint64_t v13 = v12;
    if ((a4 & 1) != 0 || (unint64_t)v10 >= a2)
    {
      int v15 = sub_1001CEEA0();
    }
    else
    {
      unint64_t v14 = sub_1001CAB34(a2, *(void **)(a1 + 208));
      int v15 = sub_100159174((long long *)a1, v14) != 0;
    }
    uint64_t v16 = &v11[v13];
    BOOL v17 = *a3;
    if (v13) {
      BOOL v18 = v16 == (char *)a2;
    }
    else {
      BOOL v18 = 0;
    }
    if (v18 && v17)
    {
      if (!a4)
      {
        a2 = sub_1001CAB34(a2, *(void **)(a1 + 208));
        int v29 = sub_100159174((long long *)a1, a2);
        if (v29 != (v8 >> 12) && v29 == v15)
        {
          *a3 = 0;
          goto LABEL_44;
        }
      }
LABEL_34:
      if (!v8)
      {
LABEL_35:
        uint64_t v28 = sub_1001595CC(a1, a3);
LABEL_43:
        a2 = v28;
        goto LABEL_44;
      }
LABEL_42:
      uint64_t v28 = sub_100159108(a1, a3);
      goto LABEL_43;
    }
    if ((unint64_t)v11 > a2 && !v17)
    {
LABEL_41:
      if (v8) {
        goto LABEL_35;
      }
      goto LABEL_42;
    }
    if (a4) {
      goto LABEL_44;
    }
    int v21 = sub_100159174((long long *)a1, a2);
    int v22 = v21;
    BOOL v23 = *a3;
    if (v11 != (char *)a2 || !v23)
    {
      if (v16 - 1 == (char *)a2 && !v23)
      {
        if (v21 != (v8 >> 12) && v21 != v15) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v26 = *(void **)(a1 + 208);
        if (*a3) {
          uint64_t v27 = sub_1001CAB34(a2, v26);
        }
        else {
          uint64_t v27 = sub_1001CB3C4(a2, v26);
        }
        unint64_t v31 = v27;
        if (v22 != sub_100159174((long long *)a1, v27) && v22 != v15)
        {
          *a3 ^= 1u;
          a2 = v31;
        }
      }
    }
    else if (v21 != (v8 >> 12) && v21 != v15)
    {
      goto LABEL_41;
    }
  }
LABEL_44:

  return sub_10015A7EC(a1, a2);
}

uint64_t sub_10015A7EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)sub_100155464(a1);
  uint64_t v5 = v4;
  if ((*(unsigned char *)(a1 + 25) & 0x10) != 0)
  {
    uint64_t result = 0;
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
  }
  else
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    if (*v4 == v7) {
      return 0;
    }
    uint64_t result = ((v7 - v6) >> 6) - 1;
  }
  uint64_t v9 = v7 - v6;
  if (v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v9 >> 6;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    for (uint64_t i = (unint64_t *)(v6 + 8); ; i += 8)
    {
      unint64_t v13 = *(i - 1);
      BOOL v15 = a2 >= v13;
      unint64_t v14 = a2 - v13;
      BOOL v15 = !v15 || v14 >= *i;
      if (!v15) {
        break;
      }
      if (v11 == ++v10) {
        return result;
      }
    }
    return v10;
  }
  return result;
}

uint64_t sub_10015A890(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (uint64_t *)sub_100155464(a1);
  if ((*(unsigned char *)(a1 + 25) & 0x10) != 0)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 == v8)
    {
      uint64_t v9 = -1;
      return *(void *)a1 + v9;
    }
    uint64_t v9 = (v8 - v7) >> 6;
  }
  uint64_t v10 = v8 - v7;
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 6;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    uint64_t v13 = -(uint64_t)v12;
    for (uint64_t i = (unint64_t *)(v7 + 8); ; i += 8)
    {
      unint64_t v15 = *(i - 1);
      BOOL v17 = a2 >= v15;
      unint64_t v16 = a2 - v15;
      BOOL v17 = !v17 || v16 >= *i;
      if (!v17) {
        break;
      }
      if (v13 == --v11) {
        return *(void *)a1 + v9;
      }
    }
    uint64_t v9 = (a3 == sub_100159174((long long *)a1, a2)) - v11;
  }
  return *(void *)a1 + v9;
}

unint64_t sub_10015A958(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v6 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) == v6) {
    goto LABEL_43;
  }
  double v7 = *(double *)(a1 + 40);
  double v8 = a4 - v7;
  double v9 = v8 - *(double *)(v6 + 8);
  if (v9 <= *(double *)(a1 + 72) - v7 + 1.0)
  {
    unint64_t v12 = (unint64_t **)sub_100155464(a1);
    uint64_t v13 = *v12;
    if (*v12 == v12[1]) {
      uint64_t v13 = (unint64_t *)a1;
    }
    unint64_t v11 = *v13;
    goto LABEL_44;
  }
  if (v9 >= 0.0)
  {
    if (v8 >= *(double *)(a1 + 240) && (a3 & 1) != 0) {
      goto LABEL_43;
    }
  }
  else if (a3)
  {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_48;
  }
  unint64_t v14 = (double **)sub_100155464(a1);
  unint64_t v15 = *v14;
  uint64_t v16 = (char *)v14[1] - (char *)*v14;
  if (v16)
  {
    double v17 = v15[4];
    double v18 = v15[5];
    double v19 = v17 + (v18 - v17) * 0.5;
    BOOL v20 = v9 > v19;
    if (a2 || (v9 <= v19 ? (BOOL v21 = v9 < v17) : (BOOL v21 = 1), v21))
    {
      uint64_t v23 = 0;
      unint64_t v24 = v16 >> 6;
      unint64_t v25 = v15 + 13;
      double v26 = 0.0;
      while (1)
      {
        uint64_t v22 = v23;
        double v27 = v19;
        if (!a2 && v9 >= v19 && v9 <= v18) {
          break;
        }
        BOOL v29 = a2 != 1 || v20 || v9 < v26;
        BOOL v30 = v9 > v17 || a2 != 1;
        if (!v29) {
          break;
        }
        if (!v30 || v23 + 1 >= v24) {
          break;
        }
        double v17 = *(v25 - 1);
        double v18 = *v25;
        double v19 = v17 + (*v25 - v17) * 0.5;
        BOOL v20 = v9 > v19;
        v25 += 8;
        ++v23;
        double v26 = v27;
        if (!a2)
        {
          BOOL v32 = v9 > v19 || v9 < v17;
          double v26 = v27;
          if (!v32) {
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v22 = -1;
    }
    if (v9 < 0.0 && a3 == 0)
    {
      uint64_t v22 = 0;
    }
    else if (v22 == -1)
    {
      goto LABEL_43;
    }
    unint64_t v11 = *(void *)&v15[8 * v22];
    if ((*(unsigned char *)(a1 + 25) & 0x40) != 0) {
      unint64_t v11 = *(void *)a1 + v11 - *(void *)(a1 + 16);
    }
    goto LABEL_44;
  }
LABEL_43:
  unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_44:
  if ((a3 & 1) == 0 && v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v11 = *(void *)a1;
    if ((*(unsigned char *)(a1 + 25) & 0x10) != 0) {
      v11 += *(void *)(a1 + 8);
    }
  }
LABEL_48:
  if ((v11 != 0x7FFFFFFFFFFFFFFFLL || (a3 & 1) == 0)
    && (v11 < *(void *)a1 || v11 > *(void *)(a1 + 8) + *(void *)a1))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9E80);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107EC2C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9EA0);
    }
    BOOL v34 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v35 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffsetWithDirection(CGFloat, CRLWPWritingDirection, BOOL) const"];
    double v36 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v35 file:v36 lineNumber:1924 isFatal:0 description:"CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result"];
  }
  return v11;
}

void sub_10015ACD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015ACF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015AD3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015AD80(long long *a1, int a2, char a3, char *a4, char a5, double a6)
{
  char v44 = 1;
  uint64_t v9 = *((void *)a1 + 27);
  if (*((void *)a1 + 28) == v9) {
    goto LABEL_20;
  }
  double v12 = a6 - *((double *)a1 + 5);
  double v13 = v12 - *(double *)(v9 + 8);
  unint64_t v14 = (const __CTLine *)sub_1001BAB78(*((void *)a1 + 27));
  if (v13 >= COERCE_DOUBLE(CTLineGetBoundsWithOptions(v14, 0)))
  {
    if (v12 < *((double *)a1 + 30) || (a3 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_20:
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  if (a3)
  {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_24;
  }
LABEL_7:
  if (a2 && (a5 & 1) == 0)
  {
    uint64_t v16 = (const __CTLine *)sub_1001BAB78(v9);
    v59.CGFloat y = 0.0;
    v59.double x = v13;
    CFIndex StringIndexForPosition = CTLineGetStringIndexForPosition(v16, v59);
    if ((StringIndexForPosition & 0x8000000000000000) == 0)
    {
      unint64_t v18 = StringIndexForPosition;
      double v19 = *((uint64_t *)a1 + 3) < 0 ? &xmmword_101176F48 : a1;
      BOOL v20 = [*(id *)a1 + 26 charRangeMappedFromStorage:*(void *)v19, *((void *)v19 + 1)];
      BOOL v22 = v18 < (unint64_t)v20 || v18 - (unint64_t)v20 >= v21;
      if (!v22 || &v20[v21] == (char *)v18)
      {
        id v23 = [*((id *)a1 + 26) charIndexMappedToStorage:v18];
LABEL_72:
        unint64_t v15 = (unint64_t)v23;
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  BOOL v30 = (uint64_t *)sub_100155464((uint64_t)a1);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1] - *v30;
  if (!v32)
  {
    char v44 = 1;
LABEL_63:
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_69;
  }
  unint64_t v33 = v32 >> 6;
  if (v33 <= 1) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = v33;
  }
  double v35 = *(double *)(v31 + 32);
  if (v35 <= v13)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v34 - 1;
    uint64_t v39 = v31 + 40;
    while (1)
    {
      if ((v35 + *(double *)v39) * 0.5 > v13 && a2 != 0)
      {
        char v44 = *(unsigned char *)(v39 + 8);
        goto LABEL_67;
      }
      if (v38 == v37) {
        break;
      }
      double v35 = *(double *)(v39 + 56);
      v39 += 64;
      ++v37;
      if (v35 > v13)
      {
        char v36 = *(unsigned char *)(v39 - 56) ^ 1;
        if (!a2) {
          char v36 = 1;
        }
        --v37;
        goto LABEL_62;
      }
    }
    char v43 = *(unsigned char *)(v39 + 8) ^ 1;
    if (!a2) {
      char v43 = 1;
    }
    char v44 = v43;
    uint64_t v37 = v38;
  }
  else
  {
    char v36 = 1;
    uint64_t v37 = -1;
LABEL_62:
    char v44 = v36;
    if (v37 == -1) {
      goto LABEL_63;
    }
  }
LABEL_67:
  unint64_t v15 = *(void *)(v31 + (v37 << 6));
  if ((*((unsigned char *)a1 + 25) & 0x40) != 0) {
    unint64_t v15 = *(void *)a1 + v15 - *((void *)a1 + 2);
  }
LABEL_69:
  if (v15 == 0x7FFFFFFFFFFFFFFFLL && (a3 & 1) == 0)
  {
    id v23 = (id)sub_100159108((uint64_t)a1, (BOOL *)&v44);
    goto LABEL_72;
  }
LABEL_21:
  if ((a3 & 1) == 0 && v15 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v15 = *(void *)a1;
    char v44 = 1;
  }
LABEL_24:
  if ((v15 != 0x7FFFFFFFFFFFFFFFLL || (a3 & 1) == 0)
    && (v15 < *(void *)a1 || v15 > *((void *)a1 + 1) + *(void *)a1))
  {
    unsigned int v24 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9EC0);
    }
    unint64_t v25 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      unint64_t v41 = *(void *)a1;
      uint64_t v42 = *((void *)a1 + 1);
      *(_DWORD *)buf = 67110658;
      unsigned int v46 = v24;
      __int16 v47 = 2082;
      uint64_t v48 = "CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffset(CGFloat, BOOL, BOOL, BOOL *, BOOL) const";
      __int16 v49 = 2082;
      CGRect v50 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
      __int16 v51 = 1024;
      int v52 = 2005;
      __int16 v53 = 2048;
      unint64_t v54 = v15;
      __int16 v55 = 2048;
      unint64_t v56 = v41;
      __int16 v57 = 2048;
      uint64_t v58 = v42;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result: %lu {%lu, %lu}", buf, 0x40u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014D9EE0);
    }
    double v26 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v27 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffset(CGFloat, BOOL, BOOL, BOOL *, BOOL) const"];
    uint64_t v28 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v27, v28, 2005, 0, "CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result: %lu {%lu, %lu}", v15, *(void *)a1, *((void *)a1 + 1));
  }
  if (a4)
  {
    *a4 = v44;
    return v15;
  }
  else
  {
    uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
    if (v15 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v44) {
        return v15;
      }
      else {
        return v15 + 1;
      }
    }
  }
  return result;
}

void sub_10015B204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015B22C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B270(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_10015B2B4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_100154658(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (const void *)a1[58];
  uint64_t v5 = a1[59];

  return sub_10015F5BC(a2, v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (uint64_t)v4) >> 3));
}

void sub_10015B310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B354(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B398(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B3DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B420(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015B464(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015B4A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = *(void *)(a1 + 8);
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_10015B5E8(&__p, v6);
  sub_10015B6A0(a1, (uint64_t)&__p);
  unint64_t v8 = 126 - 2 * __clz(((char *)v16 - (unsigned char *)__p) >> 6);
  unint64_t v18 = (uint64_t (*)(long long *, long long *))sub_10015BA14;
  if (v16 == __p) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_10015F70C((long long *)__p, v16, &v18, v9, 1, v7);
  unint64_t v11 = (__n128 *)__p;
  if (__p == v16)
  {
LABEL_8:
    if (!__p) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned int v12 = 0;
    double v13 = (__n128 *)__p;
    while (v13->n128_u64[0] != a2)
    {
      ++v12;
      v13 += 4;
      if (v13 == v16) {
        goto LABEL_8;
      }
    }
    unint64_t v18 = (uint64_t (*)(long long *, long long *))sub_10015BA6C;
    sub_10015F70C((long long *)__p, v16, &v18, 126 - 2 * __clz(((char *)v16 - (unsigned char *)__p) >> 6), 1, v10);
    unint64_t v11 = (__n128 *)__p;
    a2 = *((void *)__p + 8 * (unint64_t)v12);
  }
  uint64_t v16 = v11;
  operator delete(v11);
LABEL_12:

  return a2;
}

void sub_10015B5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10015B5E8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 6)
  {
    if (a2 >> 58) {
      sub_100004E40();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_10015F6D4(v3, a2);
    __n128 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    uint64_t v9 = &v6[64 * v8];
    unint64_t v11 = (char *)*a1;
    __n128 v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 4);
        long long v14 = *((_OWORD *)v10 - 3);
        long long v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      __n128 v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10015B6A0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 224) != *(void *)(a1 + 216) && (*(unsigned char *)(a1 + 25) & 0x40) == 0)
  {
    if (!*(void *)(a1 + 208))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9FC0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107ECB4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014D9FE0);
      }
      uint64_t v4 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      int64_t v5 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::fillCharIndicesAndOffsets(std::vector<CRLWPLFCharIndexData> &) const"];
      unint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 2320, 0, "invalid nil value for '%{public}s'", "_textSource");
    }
    sub_100154658((uint64_t *)a1);
    uint64_t v7 = sub_100155464(a1);
    if (v7 != a2) {
      sub_100160924((char *)a2, *(char **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 6);
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if ((v8 & 0x200000) != 0)
    {
      uint64_t v9 = &xmmword_101176F48;
      if (v8 >= 0) {
        uint64_t v9 = (long long *)a1;
      }
      *(void *)&long long v32 = *(void *)v9 + *((void *)v9 + 1);
      *((void *)&v32 + 1) = 1;
      double v10 = *(double *)(a1 + 40);
      if ((v8 & 0x1000) != 0)
      {
        *(void *)&long long v33 = *(void *)(a1 + 40);
        *((double *)&v33 + 1) = v10;
        *(double *)&long long v34 = v10;
        *((double *)&v34 + 1) = v10;
        LOBYTE(v35) = 0;
        *((void *)&v35 + 1) = 0;
        sub_10015BC38(a2, *(char **)a2, (char *)&v32);
      }
      else
      {
        *(double *)&long long v33 = v10 + *(double *)(a1 + 56);
        *((void *)&v33 + 1) = v33;
        *(void *)&long long v34 = v33;
        *((void *)&v34 + 1) = v33;
        LOBYTE(v35) = 1;
        *((void *)&v35 + 1) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3)
                              - 1;
        unint64_t v11 = *(void *)(a2 + 16);
        unsigned int v12 = *(_OWORD **)(a2 + 8);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v17 = ((uint64_t)v12 - *(void *)a2) >> 6;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 58) {
            sub_100004E40();
          }
          uint64_t v19 = v11 - *(void *)a2;
          if (v19 >> 5 > v18) {
            unint64_t v18 = v19 >> 5;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20) {
            unint64_t v21 = (char *)sub_10015F6D4(a2 + 16, v20);
          }
          else {
            unint64_t v21 = 0;
          }
          BOOL v22 = &v21[64 * v17];
          id v23 = &v21[64 * v20];
          long long v24 = v32;
          long long v25 = v33;
          long long v26 = v35;
          *((_OWORD *)v22 + 2) = v34;
          *((_OWORD *)v22 + 3) = v26;
          *(_OWORD *)BOOL v22 = v24;
          *((_OWORD *)v22 + 1) = v25;
          uint64_t v16 = v22 + 64;
          uint64_t v28 = *(char **)a2;
          double v27 = *(char **)(a2 + 8);
          if (v27 != *(char **)a2)
          {
            do
            {
              long long v29 = *((_OWORD *)v27 - 4);
              long long v30 = *((_OWORD *)v27 - 3);
              long long v31 = *((_OWORD *)v27 - 1);
              *((_OWORD *)v22 - 2) = *((_OWORD *)v27 - 2);
              *((_OWORD *)v22 - 1) = v31;
              *((_OWORD *)v22 - 4) = v29;
              *((_OWORD *)v22 - 3) = v30;
              v22 -= 64;
              v27 -= 64;
            }
            while (v27 != v28);
            double v27 = *(char **)a2;
          }
          *(void *)a2 = v22;
          *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v16;
          *(void *)(a2 + 16) = v23;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          long long v13 = v32;
          long long v14 = v33;
          long long v15 = v35;
          void v12[2] = v34;
          void v12[3] = v15;
          *unsigned int v12 = v13;
          v12[1] = v14;
          uint64_t v16 = v12 + 4;
        }
        *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v16;
      }
    }
  }
}

void sub_10015B9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10015BA14(double *a1, double *a2)
{
  double v2 = a1[2];
  double v3 = a2[2];
  if (v2 != v3) {
    return v2 < v3;
  }
  unint64_t v4 = *((void *)a1 + 7);
  unint64_t v5 = *((void *)a2 + 7);
  BOOL v6 = v4 >= v5;
  if (v4 == v5)
  {
    if (*((unsigned __int8 *)a1 + 48) | *((unsigned __int8 *)a2 + 48))
    {
      unint64_t v7 = *(void *)a1;
      unint64_t v8 = *(void *)a2;
    }
    else
    {
      unint64_t v7 = *(void *)a2;
      unint64_t v8 = *(void *)a1;
    }
    BOOL v6 = v7 >= v8;
  }
  return !v6;
}

BOOL sub_10015BA6C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = a1[7];
  unint64_t v3 = a2[7];
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (*((unsigned __int8 *)a1 + 48) | *((unsigned __int8 *)a2 + 48))
    {
      unint64_t v5 = *a1;
      unint64_t v6 = *a2;
    }
    else
    {
      unint64_t v5 = *a2;
      unint64_t v6 = *a1;
    }
    BOOL v4 = v5 >= v6;
  }
  return !v4;
}

uint64_t sub_10015BAAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = *(void *)(a1 + 8);
  __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  sub_10015B5E8(&__p, v6);
  sub_10015B6A0(a1, (uint64_t)&__p);
  unint64_t v8 = (__n128 *)__p;
  if (__p == v13)
  {
LABEL_5:
    if (!__p) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v9 = 0;
    double v10 = (__n128 *)__p;
    while (v10->n128_u64[0] != a2)
    {
      ++v9;
      v10 += 4;
      if (v10 == v13) {
        goto LABEL_5;
      }
    }
    long long v15 = sub_10015BA14;
    sub_10015F70C((long long *)__p, v13, (uint64_t (**)(long long *, long long *))&v15, 126 - 2 * __clz(((char *)v13 - (unsigned char *)__p) >> 6), 1, v7);
    unint64_t v8 = (__n128 *)__p;
    a2 = *((void *)__p + 8 * (unint64_t)v9);
  }
  long long v13 = v8;
  operator delete(v8);
LABEL_9:

  return a2;
}

void sub_10015BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10015BBB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BBF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

char *sub_10015BC38(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  BOOL v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v15 = *(char **)a1;
    unint64_t v16 = ((uint64_t)&v6[-*(void *)a1] >> 6) + 1;
    if (v16 >> 58) {
      sub_100004E40();
    }
    uint64_t v17 = __src - v15;
    uint64_t v18 = (__src - v15) >> 6;
    uint64_t v19 = v7 - (void)v15;
    if (v19 >> 5 > v16) {
      unint64_t v16 = v19 >> 5;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v16;
    }
    uint64_t v41 = a1 + 16;
    if (v20) {
      unint64_t v21 = (char *)sub_10015F6D4(a1 + 16, v20);
    }
    else {
      unint64_t v21 = 0;
    }
    uint64_t v28 = &v21[64 * v18];
    __p = v21;
    uint64_t v38 = v28;
    uint64_t v39 = v28;
    BOOL v40 = &v21[64 * v20];
    if (v18 == v20)
    {
      if (v17 < 1)
      {
        if (v15 == v4) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v17 >> 5;
        }
        long long v31 = (char *)sub_10015F6D4(v8, v30);
        uint64_t v28 = &v31[64 * (v30 >> 2)];
        __p = v31;
        uint64_t v38 = v28;
        BOOL v40 = &v31[64 * v32];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        unint64_t v29 = v18 + 2;
        if (v18 >= -1) {
          unint64_t v29 = v18 + 1;
        }
        v28 -= 64 * (v29 >> 1);
        uint64_t v38 = v28;
      }
    }
    long long v33 = *((_OWORD *)v3 + 2);
    long long v34 = *((_OWORD *)v3 + 3);
    long long v35 = *((_OWORD *)v3 + 1);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v3;
    *((_OWORD *)v28 + 1) = v35;
    *((_OWORD *)v28 + 2) = v33;
    *((_OWORD *)v28 + 3) = v34;
    uint64_t v39 = v28 + 64;
    BOOL v4 = (char *)sub_100160A74((void **)a1, (uint64_t)&__p, v4);
    if (v39 != v38) {
      v39 += (v38 - v39 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v25 = *(_OWORD *)a3;
    long long v26 = *((_OWORD *)a3 + 1);
    long long v27 = *((_OWORD *)a3 + 3);
    *((_OWORD *)__src + 2) = *((_OWORD *)a3 + 2);
    *((_OWORD *)__src + 3) = v27;
    *(_OWORD *)__src = v25;
    *((_OWORD *)__src + 1) = v26;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = __src + 64;
  }
  else
  {
    unsigned int v9 = __src + 64;
    double v10 = v6 - 64;
    unint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      long long v13 = *((_OWORD *)v10 + 1);
      long long v14 = *((_OWORD *)v10 + 3);
      void v11[2] = *((_OWORD *)v10 + 2);
      void v11[3] = v14;
      *unint64_t v11 = v12;
      v11[1] = v13;
      v11 += 4;
      v10 += 64;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-64 * ((v6 - v9) >> 6)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 64 * (unint64_t)(*(void *)(a1 + 8) > (unint64_t)v3);
    }
    long long v22 = *(_OWORD *)v3;
    long long v23 = *((_OWORD *)v3 + 1);
    long long v24 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v4 + 2) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v4 + 3) = v24;
    *(_OWORD *)BOOL v4 = v22;
    *((_OWORD *)v4 + 1) = v23;
  }
  return v4;
}

void sub_10015BE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015BEA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BEE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BF2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BF70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BFB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015BFF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C03C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C080(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C0C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C108(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C14C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C190(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015C1D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    unint64_t v8 = *(void *)(a1 + 8);
    if (!*(void *)(a1 + 208))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DA180);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107EE04();
      }
      unsigned int v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      double v10 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPLineFragment::nextOrPreviousCharIndexForDirection(CRLWPCharIndex, CRLWPTextLayoutDirection, CRLWPStorage *__strong, CRLWPCharIndex &, BOOL) const"];
      unint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 2519, 0, "invalid nil value for '%{public}s'", "_textSource");
    }
    __p = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    sub_10015B5E8(&__p, v8);
    sub_10015B6A0(a1, (uint64_t)&__p);
    long long v13 = __p;
    long long v12 = v32;
    long long v14 = (char *)[*(id *)(a1 + 208) charIndexRemappedFromStorage:a2];
    long long v15 = __p;
    if (v12 != v13)
    {
      unint64_t v16 = 0;
      unint64_t v17 = (v12 - v13) >> 6;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = (unint64_t *)((char *)__p + 64 * v16);
        unint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        BOOL v23 = (unint64_t)v14 >= v21;
        long long v22 = &v14[-v21];
        BOOL v23 = !v23 || (unint64_t)v22 >= v20;
        if (!v23) {
          break;
        }
        unint64_t v16 = v18;
        if (v17 <= v18++)
        {
          if ((*(unsigned char *)(a1 + 25) & 0x10) != 0) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = v17 - 1;
          }
          break;
        }
      }
      if (a3 == 3)
      {
        if (!v16)
        {
LABEL_38:
          uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_39;
        }
        unint64_t v25 = v16 - 1;
LABEL_28:
        uint64_t v26 = *((void *)__p + 8 * v25);
LABEL_39:
        uint64_t v32 = v15;
        operator delete(v15);
        goto LABEL_40;
      }
      if (a3 == 2)
      {
        unint64_t v25 = v16 + 1;
        if (v16 + 1 >= v17) {
          goto LABEL_38;
        }
        goto LABEL_28;
      }
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DA1C0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10107ED48();
      }
      long long v27 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v28 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPLineFragment::nextOrPreviousCharIndexForDirection(CRLWPCharIndex, CRLWPTextLayoutDirection, CRLWPStorage *__strong, CRLWPCharIndex &, BOOL) const"];
      unint64_t v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v28 file:v29 lineNumber:2581 isFatal:0 description:"This routine supports left and right only."];

      long long v15 = __p;
    }
    uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v15) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_40:

  return v26;
}

void sub_10015C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10015C5E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C628(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C66C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015C6B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10015C6F4(uint64_t a1, uint64_t a2, double a3)
{
  if ((unint64_t)(a2 - 1) >= 2)
  {
    double v9 = *(double *)(a1 + 88);
    double v10 = 0.0;
  }
  else
  {
    if (sub_1001597CC(a1) != 1 || (double v6 = a3, (*(unsigned char *)(a1 + 25) & 8) == 0))
    {
      uint64_t v7 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224) == v7)
      {
        double v6 = 0.0;
      }
      else
      {
        unint64_t v8 = (const __CTLine *)sub_1001BAB78(v7);
        double v6 = CTLineGetTrailingWhitespaceWidth(v8) + a3 - *(double *)(a1 + 240);
      }
    }
    if (a2 == 2) {
      double v10 = v6 * 0.5;
    }
    else {
      double v10 = v6;
    }
    uint64_t v11 = *(void *)(a1 + 216);
    uint64_t v12 = *(void *)(a1 + 224) - v11;
    if (v12)
    {
      unint64_t v13 = v12 / 104;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      long long v14 = (double *)(v11 + 8);
      do
      {
        double *v14 = v10 + *v14;
        v14 += 13;
        --v13;
      }
      while (v13);
    }
    uint64_t v15 = *(void *)(a1 + 248);
    uint64_t v16 = *(void *)(a1 + 256) - v15;
    if (v16)
    {
      unint64_t v17 = v16 / 104;
      if (v17 <= 1) {
        unint64_t v17 = 1;
      }
      unsigned int v18 = (double *)(v15 + 8);
      do
      {
        double *v18 = v10 + *v18;
        v18 += 13;
        --v17;
      }
      while (v17);
    }
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v19 = *(id *)(a1 + 336);
    id v20 = [v19 countByEnumeratingWithState:&v69 objects:v76 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v70;
      do
      {
        for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v70 != v21) {
            objc_enumerationMutation(v19);
          }
          BOOL v23 = *(void **)(*((void *)&v69 + 1) + 8 * i);
          [v23 start];
          [v23 setStart:v10 + v24];
        }
        id v20 = [v19 countByEnumeratingWithState:&v69 objects:v76 count:16];
      }
      while (v20);
    }

    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v25 = *(id *)(a1 + 344);
    id v26 = [v25 countByEnumeratingWithState:&v65 objects:v75 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v66;
      do
      {
        for (uint64_t j = 0; j != v26; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v66 != v27) {
            objc_enumerationMutation(v25);
          }
          unint64_t v29 = *(void **)(*((void *)&v65 + 1) + 8 * (void)j);
          [v29 start];
          [v29 setStart:v10 + v30];
        }
        id v26 = [v25 countByEnumeratingWithState:&v65 objects:v75 count:16];
      }
      while (v26);
    }

    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v31 = *(id *)(a1 + 352);
    id v32 = [v31 countByEnumeratingWithState:&v61 objects:v74 count:16];
    if (v32)
    {
      uint64_t v33 = *(void *)v62;
      do
      {
        for (k = 0; k != v32; k = (char *)k + 1)
        {
          if (*(void *)v62 != v33) {
            objc_enumerationMutation(v31);
          }
          long long v35 = *(void **)(*((void *)&v61 + 1) + 8 * (void)k);
          [v35 start];
          [v35 setStart:v10 + v36];
        }
        id v32 = [v31 countByEnumeratingWithState:&v61 objects:v74 count:16];
      }
      while (v32);
    }

    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v37 = *(id *)(a1 + 360);
    id v38 = [v37 countByEnumeratingWithState:&v57 objects:v73 count:16];
    if (v38)
    {
      uint64_t v39 = *(void *)v58;
      do
      {
        for (CGAffineTransform m = 0; m != v38; CGAffineTransform m = (char *)m + 1)
        {
          if (*(void *)v58 != v39) {
            objc_enumerationMutation(v37);
          }
          uint64_t v41 = *(void **)(*((void *)&v57 + 1) + 8 * (void)m);
          [v41 start:v57];
          [v41 setStart:v10 + v42];
        }
        id v38 = [v37 countByEnumeratingWithState:&v57 objects:v73 count:16];
      }
      while (v38);
    }

    *(double *)(a1 + 240) = v10 + *(double *)(a1 + 240);
    double v9 = v10 + *(double *)(a1 + 88);
    *(double *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v9;
  }
  uint64_t v43 = *(void *)(a1 + 72);
  uint64_t v44 = *(void *)(a1 + 80);
  uint64_t v45 = *(void *)(a1 + 96);
  BOOL IsNull = CGRectIsNull(*(CGRect *)(&v9 - 2));
  double v49 = 0.0;
  double v50 = 0.0;
  if (!IsNull) {
    double v50 = *(double *)(a1 + 40) - *(double *)(a1 + 72);
  }
  if ((*(unsigned char *)(a1 + 26) & 4) != 0) {
    double v49 = 50.0;
  }
  double v51 = (*(double *)(a1 + 120) + *(double *)(a1 + 136)) * 0.25 + v49;
  if (v51 < v50) {
    double v51 = v50;
  }
  if (*(double *)(a1 + 88) < a3 + v51 * 2.0)
  {
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)IsNull, *(Swift::String *)&v47);
    *(void *)(a1 + 72) = v52;
    *(void *)(a1 + 80) = v53;
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v54;
    *(void *)(a1 + 96) = v55;
  }
  *(double *)(a1 + 56) = a3;
  return v10;
}

void sub_10015CB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10015CBE0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(void *)a1 != *(void *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a2 + 224) == *(void *)(a2 + 216))
  {
    return 0;
  }
  BOOL result = 0;
  if ((*(void *)(a2 + 24) & 4) == 0
    && ((*(void *)(a2 + 24) & 0x2000) == 0) != (*(unsigned char *)(a1 + 25) & 0x20) >> 5)
  {
    BOOL result = CGRectEqualToRect(*(CGRect *)(a2 + 40), *(CGRect *)(a1 + 40));
    if (result)
    {
      if (a1 != a2) {
        sub_100160B54(a1 + 216, *(void *)(a2 + 216), *(void *)(a2 + 224), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 3));
      }
      objc_storeStrong((id *)(a1 + 336), *(id *)(a2 + 336));
      objc_storeStrong((id *)(a1 + 344), *(id *)(a2 + 344));
      objc_storeStrong((id *)(a1 + 352), *(id *)(a2 + 352));
      objc_storeStrong((id *)(a1 + 360), *(id *)(a2 + 360));
      objc_storeStrong((id *)(a1 + 408), *(id *)(a2 + 408));
      id v5 = *(void **)(a2 + 416);
      if (v5) {
        objc_storeStrong((id *)(a1 + 416), v5);
      }
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      objc_storeStrong((id *)(a1 + 456), *(id *)(a2 + 456));
      return 1;
    }
  }
  return result;
}

void sub_10015CD18(uint64_t a1, void *a2)
{
}

uint64_t sub_10015CD20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 216);
  while (result != v3)
    uint64_t result = sub_1001BAAFC(result - 104);
  *(void *)(a1 + 224) = v3;
  return result;
}

uint64_t sub_10015CD60(void *a1, uint64_t a2, CGFloat *a3, double *a4, void *a5, void *a6, void *a7)
{
  if (a1[35] == a1[34]) {
    return 0;
  }
  uint64_t v12 = (void *)a1[26];
  if (!v12)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA200);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107EF54();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA220);
    }
    unint64_t v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    long long v14 = +[NSString stringWithUTF8String:"BOOL CRLWPLineFragment::isInsideTateChuYokoLineAtCharIndex(CRLWPCharIndex, CGFloat &, CGFloat &, CGFloat &, CGFloat &, CGFloat &) const"];
    uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 2818, 0, "invalid nil value for '%{public}s'", "_textSource");

    uint64_t v12 = (void *)a1[26];
  }
  uint64_t v16 = (char *)[v12 charIndexMappedFromStorage:a2];
  uint64_t v17 = a1[34];
  uint64_t v18 = a1[35];
  uint64_t v19 = v18 - v17;
  if (v18 == v17) {
    return 0;
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0x4EC4EC4EC4EC4EC5 * (v19 >> 3);
  unsigned int v22 = 1;
  while (1)
  {
    uint64_t v23 = v17 + 104 * v20;
    unint64_t v24 = *(void *)(v23 + 24);
    unint64_t v25 = *(void *)(v23 + 32) + v24;
    id v26 = &v16[-v24];
    if ((unint64_t)v16 > v24 && (unint64_t)v16 < v25) {
      break;
    }
    uint64_t v20 = v22;
    BOOL v45 = v21 > v22++;
    if (!v45) {
      return 0;
    }
  }
  uint64_t v30 = v17 + 104 * v20;
  id v31 = (const __CTLine *)sub_1001BAB78(v30);
  CFIndex location = CTLineGetStringRange(v31).location;
  uint64_t v33 = (const __CTLine *)sub_1001BAB78(v30);
  unint64_t v34 = (unint64_t)&v26[location];
  *a3 = CTLineGetOffsetForStringIndex(v33, v34, 0);
  long long v35 = (const __CTLine *)sub_1001BAB78(v30);
  *a4 = CTLineGetTypographicBounds(v35, 0, 0, 0);
  double v36 = (const __CTLine *)sub_1001BAB78(v30);
  CTLineGetGlyphRuns(v36);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v37 = (const __CTLine *)sub_1001BAB78(v30);
  id v38 = CTLineGetGlyphRuns(v37);
  id v39 = [v38 countByEnumeratingWithState:&v53 objects:v63 count:16];
  id v40 = v39;
  if (v39)
  {
    uint64_t v41 = *(void *)v54;
    do
    {
      double v42 = 0;
      do
      {
        if (*(void *)v54 != v41) {
          objc_enumerationMutation(v38);
        }
        uint64_t v43 = *(const __CTRun **)(*((void *)&v53 + 1) + 8 * (void)v42);
        CFRange StringRange = CTRunGetStringRange(v43);
        BOOL v45 = StringRange.location >= v34 || v34 > StringRange.location + StringRange.length;
        if (!v45)
        {
          CFDictionaryRef Attributes = CTRunGetAttributes(v43);
          Value = CFDictionaryGetValue(Attributes, kCTFontAttributeName);
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          sub_1001CE5C0((uint64_t)Value, &v57);
          uint64_t v50 = v59;
          *a5 = v58;
          *a6 = v50;
          *a7 = *((void *)&v59 + 1);
          uint64_t v28 = 1;
          goto LABEL_43;
        }
        double v42 = (char *)v42 + 1;
      }
      while (v40 != v42);
      id v40 = [v38 countByEnumeratingWithState:&v53 objects:v63 count:16];
    }
    while (v40);
  }

  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DA240);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10107EECC();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DA260);
  }
  unsigned int v46 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  id v38 = +[NSString stringWithUTF8String:"BOOL CRLWPLineFragment::isInsideTateChuYokoLineAtCharIndex(CRLWPCharIndex, CGFloat &, CGFloat &, CGFloat &, CGFloat &, CGFloat &) const"];
  uint64_t v47 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
  +[CRLAssertionHandler handleFailureInFunction:v38 file:v47 lineNumber:2853 isFatal:0 description:"Could not find the CTRun for the tate chu yoko run."];

  uint64_t v28 = 0;
LABEL_43:

  return v28;
}

void sub_10015D218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015D270(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015D2B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015D2F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015D33C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10015D380(uint64_t result, int a2)
{
  uint64_t v2 = 2;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(void *)(result + 24) = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFDLL | v2;
  return result;
}

void sub_10015D3A0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 24) = *(void *)(a1 + 24) & 0xFFFFFFFFFDFFFFFFLL | ((unint64_t)(a2 != 0) << 25);
  objc_storeStrong((id *)(a1 + 200), a2);
}

uint64_t sub_10015D3BC(uint64_t result)
{
  *(void *)(result + 24) |= 0x400000uLL;
  return result;
}

uint64_t sub_10015D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a1) {
    return 0;
  }
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  if (CGRectEqualToRect(*(CGRect *)(a1 + 40), *(CGRect *)(a2 + 40))
    && CGRectEqualToRect(*(CGRect *)(a1 + 72), *(CGRect *)(a2 + 72))
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(void *)a1 == *(void *)a2 + a3
    && *(void *)(a1 + 16) == *(void *)(a2 + 16) + a3
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    uint64_t v9 = *(void *)(a2 + 216);
    uint64_t v8 = *(void *)(a2 + 224);
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
    if (v10 == 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3))
    {
      if (v8 == v9) {
        return 0;
      }
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      while (1)
      {
        uint64_t v13 = *(void *)(a2 + 216);
        uint64_t v14 = *(void *)(a1 + 216);
        int32x2_t v15 = vmovn_s64(vceqq_f64(*(float64x2_t *)(v13 + 104 * v11 + 8), *(float64x2_t *)(v14 + 104 * v11 + 8)));
        if ((v15.i32[0] & v15.i32[1] & 1) == 0) {
          break;
        }
        if (!CFEqual(*(CFTypeRef *)(v13 + 104 * v11), *(CFTypeRef *)(v14 + 104 * v11))) {
          break;
        }
        int32x2_t v16 = vmovn_s64(vceqq_s64(*(int64x2_t *)(v13 + 104 * v11 + 24), *(int64x2_t *)(v14 + 104 * v11 + 24)));
        if ((v16.i32[0] & v16.i32[1] & 1) == 0
          || *(void *)(v13 + 104 * v11 + 96) != *(void *)(v14 + 104 * v11 + 96)
          || *(void *)(v13 + 104 * v11 + 40) != *(void *)(v14 + 104 * v11 + 40))
        {
          break;
        }
        uint64_t v17 = (_OWORD *)(v13 + 104 * v11);
        long long v18 = v17[3];
        long long v19 = v17[5];
        *(_OWORD *)&t1.c = v17[4];
        *(_OWORD *)&t1.tdouble x = v19;
        *(_OWORD *)&t1.a = v18;
        uint64_t v20 = (_OWORD *)(v14 + 104 * v11);
        long long v21 = v20[3];
        long long v22 = v20[5];
        *(_OWORD *)&v25.c = v20[4];
        *(_OWORD *)&v25.tdouble x = v22;
        *(_OWORD *)&v25.a = v21;
        BOOL v23 = CGAffineTransformEqualToTransform(&t1, &v25);
        if (v23)
        {
          unint64_t v11 = v12++;
          if (v10 > v11) {
            continue;
          }
        }
        return !v23;
      }
    }
  }
  return 1;
}

double sub_10015D608(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  double v4 = 0.0;
  if ((v3 & 0x100000000) == 0)
  {
    double v5 = *(double *)(a1 + 136);
    double v6 = *(double *)(a1 + 144);
    double v7 = *(double *)(a1 + 112);
    double v8 = *(double *)(a1 + 120);
    double v9 = v5 + v6 + fmax(v7, v8);
    double v10 = a3;
    switch(a2)
    {
      case 0:
        if ((v3 & 0x10) != 0)
        {
          double v11 = v5 + v7;
        }
        else if (a3 <= 1.0)
        {
          double v11 = v9 * a3;
          if (v11 < v7) {
            double v11 = *(double *)(a1 + 112);
          }
        }
        else
        {
          double v11 = v9 + (a3 + -1.0) * (v6 + v8 + v5);
        }
        double v10 = v11 + *(double *)(a1 + 152);
        break;
      case 1:
        double v12 = v9 + *(double *)(a1 + 152);
        if (v12 >= a3) {
          double v10 = v12;
        }
        else {
          double v10 = a3;
        }
        break;
      case 2:
        return v10 + *(double *)(a1 + 104) + *(double *)(a1 + 160);
      case 3:
        double v10 = fmin(v9 + *(double *)(a1 + 152), a3);
        break;
      case 4:
        double v10 = fmax(v9 + *(double *)(a1 + 152) + a3, 0.0);
        break;
      default:
        double v10 = v9;
        break;
    }
    return v10 + *(double *)(a1 + 104) + *(double *)(a1 + 160);
  }
  return v4;
}

void sub_10015D974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015D9B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015D9F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10015DA38(double *a1, uint64_t a2, char a3, double a4)
{
  double v6 = a1[15];
  double v8 = a1[17];
  double v7 = a1[18];
  double v9 = a1[13];
  double v10 = v7 + v6 + v8;
  double v11 = v8 + v7 + fmax(a1[14], v6);
  double v12 = a1[20];
  double v13 = v9 + a1[19] + v11;
  double v14 = v12 + v13;
  if (a2 == 2)
  {
    double v15 = v9 + a4 + v12;
  }
  else if (a2 == 1)
  {
    double v15 = fmax(v14, a4);
  }
  else
  {
    double v15 = v12 + v13;
    if (!a2)
    {
      double v15 = v12 + v13;
      if (a4 > 1.0)
      {
        double v15 = v12 + v13;
        if ((a3 & 1) == 0) {
          double v15 = v14 + (a4 + -1.0) * v10;
        }
      }
    }
  }
  if (v15 <= 0.0)
  {
    unsigned int v16 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA2C0);
    }
    uint64_t v17 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110914;
      unsigned int v23 = v16;
      __int16 v24 = 2082;
      CGAffineTransform v25 = "CGFloat CRLWPLineFragment::heightForHeightInfo(CRLWPLineSpacingMode, CGFloat, BOOL) const";
      __int16 v26 = 2082;
      uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
      __int16 v28 = 1024;
      int v29 = 3030;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      __int16 v32 = 2048;
      double v33 = a4;
      __int16 v34 = 2048;
      double v35 = v10;
      __int16 v36 = 2048;
      double v37 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad lineheight; mode: %lu, amount: %g, text: %g, total: %g",
        buf,
        0x4Au);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA2E0);
    }
    long long v18 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    long long v19 = +[NSString stringWithUTF8String:"CGFloat CRLWPLineFragment::heightForHeightInfo(CRLWPLineSpacingMode, CGFloat, BOOL) const"];
    uint64_t v20 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v19, v20, 3030, 0, "bad lineheight; mode: %lu, amount: %g, text: %g, total: %g",
      a2,
      *(void *)&a4,
      *(void *)&v10,
      *(void *)&v14);
  }
  return v15;
}

void sub_10015DCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015DD14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015DD58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10015DD9C(double *a1, double a2, double a3)
{
  double v3 = a1[4];
  double v4 = a3 + a1[6];
  a1[5] = a2 + a1[5];
  a1[6] = v4;
  double v5 = a3 + a1[10];
  a1[9] = a2 + a1[9];
  a1[10] = v5;
  double result = a3 + v3;
  a1[4] = a3 + v3;
  return result;
}

id sub_10015DDCC(uint64_t a1, double a2, double a3)
{
  [*(id *)(a1 + 368) setStartPos:];
  double v5 = *(void **)(a1 + 368);

  return _[v5 setEndPos:a3];
}

id sub_10015DE18(uint64_t a1, void *a2, void *a3)
{
  [*(id *)(a1 + 368) startPos];
  *a2 = v6;
  id result = [*(id *)(a1 + 368) endPos];
  *a3 = v8;
  return result;
}

void sub_10015DE60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 368) setHyphenationAttr:];
  [*(id *)(a1 + 368) setHyphenationChar:a3];
  *(_DWORD *)(a1 + 376) = a3;
}

void sub_10015DEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10015DED8(uint64_t a1, _DWORD *a2)
{
  *a2 = [*(id *)(a1 + 368) hyphenationChar];
  double v3 = *(void **)(a1 + 368);

  return _[v3 hyphenationAttr];
}

uint64_t sub_10015DF1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 376);
}

id sub_10015DF24(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 368) setOikomiSquish:a2];
}

id sub_10015DF30(uint64_t a1)
{
  return _[*(id *)(a1 + 368) oikomiSquish];
}

id sub_10015DF38(uint64_t a1)
{
  return [*(id *)(a1 + 368) clear];
}

void sub_10015DF40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 424) = v2;
  if ((v2 & 2) != 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA300);
    }
    double v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR)) {
      sub_10107F440();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA320);
    }
    double v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v5);
    }

    uint64_t v6 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    double v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:3114 isFatal:0 description:"bad starting line fragment state: hyphenated"];
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 224))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA340);
    }
    uint64_t v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR)) {
      sub_10107F3B8();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA360);
    }
    double v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      double v10 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v10);
    }

    double v11 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    double v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:3115 isFatal:0 description:"bad starting line fragment state: line vector"];
  }
  if ([*(id *)(a1 + 408) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA380);
    }
    double v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
      sub_10107F330();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA3A0);
    }
    double v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      double v15 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v15);
    }

    unsigned int v16 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:3116 isFatal:0 description:"bad starting line fragment state: adornments"];
  }
  if ([*(id *)(a1 + 336) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA3C0);
    }
    long long v18 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR)) {
      sub_10107F2A8();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA3E0);
    }
    long long v19 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v20);
    }

    long long v21 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    long long v22 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v21 file:v22 lineNumber:3117 isFatal:0 description:"bad starting line fragment state: _underlines positions"];
  }
  if ([*(id *)(a1 + 344) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA400);
    }
    unsigned int v23 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR)) {
      sub_10107F220();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA420);
    }
    __int16 v24 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
    {
      CGAffineTransform v25 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v25);
    }

    __int16 v26 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    uint64_t v27 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v26 file:v27 lineNumber:3118 isFatal:0 description:"bad starting line fragment state: _strikesthrough positions"];
  }
  if ([*(id *)(a1 + 352) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA440);
    }
    __int16 v28 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR)) {
      sub_10107F198();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA460);
    }
    int v29 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
    {
      __int16 v30 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v30);
    }

    uint64_t v31 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    __int16 v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v31 file:v32 lineNumber:3119 isFatal:0 description:"bad starting line fragment state: _textBackgrounds positions"];
  }
  if ([*(id *)(a1 + 360) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA480);
    }
    double v33 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR)) {
      sub_10107F110();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA4A0);
    }
    __int16 v34 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      double v35 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v35);
    }

    __int16 v36 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    double v37 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v36 file:v37 lineNumber:3120 isFatal:0 description:"bad starting line fragment state: _textHighlights positions"];
  }
  if (*(void *)(a1 + 416))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA4C0);
    }
    id v38 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_ERROR)) {
      sub_10107F07C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA4E0);
    }
    id v39 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
    {
      id v40 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v40);
    }

    uint64_t v41 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    double v42 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v41, v42, 3121, 0, "expected nil value for '%{public}s'", "_breakLine");
  }
  if (*(void *)(a1 + 456))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA500);
    }
    uint64_t v43 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR)) {
      sub_10107EFE8();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA520);
    }
    uint64_t v44 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
    {
      BOOL v45 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v45);
    }

    unsigned int v46 = +[NSString stringWithUTF8String:"void CRLWPLineFragment::saveLayoutState()"];
    uint64_t v47 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v46, v47, 3122, 0, "expected nil value for '%{public}s'", "_paragraphString");
  }
}

void sub_10015E9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015EAA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EAE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EB28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EB6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EBB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EBF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EC38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EC7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015ECC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015ED04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015ED48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015ED8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EDD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EE14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EE58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EE9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EEE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EF24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015EF68(uint64_t a1)
{
  *(void *)(a1 + 24) = *(void *)(a1 + 424) & 0xFFFFFFFFFFFFFFFDLL;
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 216);
  while (v2 != v3)
    uint64_t v2 = sub_1001BAAFC(v2 - 104);
  *(void *)(a1 + 224) = v3;
  [*(id *)(a1 + 408) removeAllObjects];
  [*(id *)(a1 + 336) removeAllObjects];
  [*(id *)(a1 + 344) removeAllObjects];
  [*(id *)(a1 + 352) removeAllObjects];
  [*(id *)(a1 + 360) removeAllObjects];
  double v4 = *(void **)(a1 + 456);
  *(void *)(a1 + 456) = 0;

  id v5 = *(void **)(a1 + 416);
  *(void *)(a1 + 416) = 0;
}

id sub_10015F000(id result)
{
  uint64_t v1 = (void *)*((void *)result + 52);
  if (v1)
  {
    [*((id *)result + 52) start];
    return [v1 setStart:];
  }
  return result;
}

void sub_10015F064(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015F0A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10015F0EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1001BAAFC(v4 - 104);
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10015F170(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_1001BAAFC(v3 - 104);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10015F1D0(void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_100004E40();
  }
  id result = (char *)sub_10015F228((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

void *sub_10015F228(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_100004F34();
  }
  return operator new(104 * a2);
}

uint64_t sub_10015F274(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_100004E40();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    double v10 = (char *)sub_10015F228(v7, v9);
  }
  else {
    double v10 = 0;
  }
  double v13 = v10;
  double v14 = &v10[104 * v4];
  unsigned int v16 = &v10[104 * v9];
  sub_1001BAAC4(v14, a2);
  double v15 = v14 + 104;
  sub_10015F394(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10015F4A0((uint64_t)&v13);
  return v11;
}

void sub_10015F380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10015F4A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10015F394(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10015F40C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10015F40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 104;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 104;
    sub_1001BAAC4(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_10015F4A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    sub_1001BAAFC(i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_10015F4F0(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_10001C4D8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_10015F5BC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10015F638(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10015F61C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10015F638(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_100004E40();
  }
  uint64_t result = (char *)sub_10015F68C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_10015F68C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_100004F34();
  }
  return operator new(40 * a2);
}

void *sub_10015F6D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_100004F34();
  }
  return operator new(a2 << 6);
}

void sub_10015F70C(long long *a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t sub_10015FB14(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      uint64_t v9 = 0;
      unint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v10;
        unint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = v10[1];
          long long v21 = *v10;
          long long v22 = v12;
          long long v13 = v10[3];
          long long v23 = v10[2];
          long long v24 = v13;
          uint64_t v14 = v9;
          while (1)
          {
            uint64_t v15 = (_OWORD *)((char *)v6 + v14);
            long long v16 = *(_OWORD *)((char *)v6 + v14 + 16);
            v15[4] = *(_OWORD *)((char *)v6 + v14);
            v15[5] = v16;
            long long v17 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[6] = *(_OWORD *)((char *)v6 + v14 + 32);
            v15[7] = v17;
            if (!v14) {
              break;
            }
            v14 -= 64;
            uint64_t result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              unint64_t v18 = (_OWORD *)((char *)v6 + v14 + 64);
              goto LABEL_10;
            }
          }
          unint64_t v18 = v6;
LABEL_10:
          long long v19 = v22;
          _OWORD *v18 = v21;
          v18[1] = v19;
          long long v20 = v24;
          v18[2] = v23;
          _OWORD v18[3] = v20;
        }
        char v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10015FC00(uint64_t result, _OWORD *a2, uint64_t (**a3)(long long *, _OWORD *))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v22 = v3;
    uint64_t v23 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      uint64_t v9 = (_OWORD *)(result - 64);
      do
      {
        unint64_t v10 = v6;
        char v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v11 = v6[1];
          long long v18 = *v6;
          long long v19 = v11;
          long long v12 = v6[3];
          long long v20 = v6[2];
          long long v21 = v12;
          long long v13 = v9;
          do
          {
            long long v14 = v13[5];
            v13[8] = v13[4];
            v13[9] = v14;
            long long v15 = v13[7];
            v13[10] = v13[6];
            v13[11] = v15;
            uint64_t result = (*a3)(&v18, v13);
            v13 -= 4;
          }
          while ((result & 1) != 0);
          long long v16 = v19;
          v13[8] = v18;
          v13[9] = v16;
          long long v17 = v21;
          v13[10] = v20;
          v13[11] = v17;
        }
        char v7 = v6 + 4;
        v9 += 4;
      }
      while (v6 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10015FCD0(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v11 = a1[2];
      long long v10 = a1[3];
      long long v13 = *a1;
      long long v12 = a1[1];
      long long v14 = a3[3];
      long long v16 = *a3;
      long long v15 = a3[1];
      a1[2] = a3[2];
      a1[3] = v14;
      *a1 = v16;
      a1[1] = v15;
      *a3 = v13;
      a3[1] = v12;
      uint64_t result = 1;
LABEL_9:
      a3[2] = v11;
      a3[3] = v10;
      return result;
    }
    long long v32 = a1[2];
    long long v31 = a1[3];
    long long v34 = *a1;
    long long v33 = a1[1];
    long long v35 = a2[3];
    long long v37 = *a2;
    long long v36 = a2[1];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v37;
    a1[1] = v36;
    *a2 = v34;
    a2[1] = v33;
    a2[2] = v32;
    a2[3] = v31;
    if ((*a4)(a3, a2))
    {
      long long v11 = a2[2];
      long long v10 = a2[3];
      long long v39 = *a2;
      long long v38 = a2[1];
      long long v40 = a3[3];
      long long v42 = *a3;
      long long v41 = a3[1];
      a2[2] = a3[2];
      a2[3] = v40;
      *a2 = v42;
      a2[1] = v41;
      *a3 = v39;
      a3[1] = v38;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v18 = a2[2];
    long long v17 = a2[3];
    long long v20 = *a2;
    long long v19 = a2[1];
    long long v21 = a3[3];
    long long v23 = *a3;
    long long v22 = a3[1];
    a2[2] = a3[2];
    a2[3] = v21;
    *a2 = v23;
    a2[1] = v22;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    a3[3] = v17;
    if ((*a4)(a2, a1))
    {
      long long v25 = a1[2];
      long long v24 = a1[3];
      long long v27 = *a1;
      long long v26 = a1[1];
      long long v28 = a2[3];
      long long v30 = *a2;
      long long v29 = a2[1];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v30;
      a1[1] = v29;
      *a2 = v27;
      a2[1] = v26;
      uint64_t result = 2;
      a2[2] = v25;
      a2[3] = v24;
      return result;
    }
  }
  return 1;
}

long long *sub_10015FE24(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v28 = *a1;
  long long v29 = v6;
  long long v7 = a1[3];
  long long v30 = a1[2];
  long long v31 = v7;
  if ((*a3)(&v28, a2 - 4))
  {
    char v8 = a1;
    do
      v8 += 4;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 4;
    do
    {
      char v8 = v9;
      if (v9 >= v4) {
        break;
      }
      int v10 = (*a3)(&v28, v9);
      uint64_t v9 = v8 + 4;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    long long v11 = *v8;
    long long v12 = v8[1];
    long long v13 = v8[3];
    long long v34 = v8[2];
    long long v35 = v13;
    long long v32 = v11;
    long long v33 = v12;
    long long v14 = *v4;
    long long v15 = v4[1];
    long long v16 = v4[3];
    v8[2] = v4[2];
    v8[3] = v16;
    long long *v8 = v14;
    v8[1] = v15;
    long long v17 = v32;
    long long v18 = v33;
    long long v19 = v35;
    void v4[2] = v34;
    _OWORD v4[3] = v19;
    *uint64_t v4 = v17;
    v4[1] = v18;
    do
      v8 += 4;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  long long v20 = v8 - 4;
  if (v8 - 4 != a1)
  {
    long long v21 = *v20;
    long long v22 = *(v8 - 3);
    long long v23 = *(v8 - 1);
    a1[2] = *(v8 - 2);
    a1[3] = v23;
    *a1 = v21;
    a1[1] = v22;
  }
  long long v24 = v28;
  long long v25 = v29;
  long long v26 = v31;
  *(v8 - 2) = v30;
  *(v8 - 1) = v26;
  *long long v20 = v24;
  *(v8 - 3) = v25;
  return v8;
}

long long *sub_10015FF84(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v27 = *a1;
  long long v28 = v7;
  long long v8 = a1[3];
  long long v29 = a1[2];
  long long v30 = v8;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v27) & 1) != 0);
  uint64_t v9 = &a1[v6];
  int v10 = &a1[v6 - 4];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 4;
    }
    while (((*a3)(a2, &v27) & 1) == 0);
  }
  else
  {
    do
      a2 -= 4;
    while (!(*a3)(a2, &v27));
  }
  if (v9 < a2)
  {
    long long v11 = &a1[v6];
    long long v12 = a2;
    do
    {
      long long v14 = v11[1];
      long long v31 = *v11;
      long long v13 = v31;
      long long v32 = v14;
      long long v16 = v11[3];
      long long v33 = v11[2];
      long long v15 = v33;
      long long v34 = v16;
      long long v18 = v12[2];
      long long v17 = v12[3];
      long long v19 = v12[1];
      *long long v11 = *v12;
      v11[1] = v19;
      void v11[2] = v18;
      void v11[3] = v17;
      void v12[2] = v15;
      void v12[3] = v16;
      *long long v12 = v13;
      v12[1] = v14;
      do
        v11 += 4;
      while (((*a3)(v11, &v27) & 1) != 0);
      do
        v12 -= 4;
      while (!(*a3)(v12, &v27));
    }
    while (v11 < v12);
    int v10 = v11 - 4;
  }
  if (v10 != a1)
  {
    long long v20 = *v10;
    long long v21 = v10[1];
    long long v22 = v10[3];
    a1[2] = v10[2];
    a1[3] = v22;
    *a1 = v20;
    a1[1] = v21;
  }
  long long v23 = v27;
  long long v24 = v28;
  long long v25 = v30;
  v10[2] = v29;
  v10[3] = v25;
  long long *v10 = v23;
  v10[1] = v24;
  return v10;
}

BOOL sub_1001600E4(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = a2 - 4;
      if (!(*a3)(a2 - 4, a1)) {
        return 1;
      }
      long long v10 = a1[2];
      long long v9 = a1[3];
      long long v12 = *a1;
      long long v11 = a1[1];
      long long v13 = *(a2 - 1);
      long long v15 = *v8;
      long long v14 = *(a2 - 3);
      a1[2] = *(a2 - 2);
      a1[3] = v13;
      *a1 = v15;
      a1[1] = v14;
      long long *v8 = v12;
      *(a2 - 3) = v11;
      BOOL result = 1;
      *(a2 - 2) = v10;
      *(a2 - 1) = v9;
      return result;
    case 3:
      sub_10015FCD0(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_1001602EC((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      sub_1001603D8((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      long long v16 = a1 + 8;
      sub_10015FCD0(a1, a1 + 4, a1 + 8, a3);
      long long v17 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v17, v16))
    {
      long long v20 = v17[1];
      long long v29 = *v17;
      long long v30 = v20;
      long long v21 = v17[3];
      long long v31 = v17[2];
      long long v32 = v21;
      uint64_t v22 = v18;
      while (1)
      {
        long long v23 = (long long *)((char *)a1 + v22);
        long long v24 = *(long long *)((char *)a1 + v22 + 144);
        v23[12] = *(long long *)((char *)a1 + v22 + 128);
        v23[13] = v24;
        long long v25 = *(long long *)((char *)a1 + v22 + 176);
        v23[14] = *(long long *)((char *)a1 + v22 + 160);
        v23[15] = v25;
        if (v22 == -128) {
          break;
        }
        v22 -= 64;
        if (((*a3)(&v29, v23 + 4) & 1) == 0)
        {
          long long v26 = (long long *)((char *)a1 + v22 + 192);
          goto LABEL_12;
        }
      }
      long long v26 = a1;
LABEL_12:
      long long v27 = v30;
      long long *v26 = v29;
      v26[1] = v27;
      long long v28 = v32;
      v26[2] = v31;
      v26[3] = v28;
      if (++v19 == 8) {
        return v17 + 4 == a2;
      }
    }
    long long v16 = v17;
    v18 += 64;
    v17 += 4;
    if (v17 == a2) {
      return 1;
    }
  }
}

__n128 sub_1001602EC(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_10015FCD0((long long *)a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v12 = a3[2];
    long long v11 = a3[3];
    long long v14 = *a3;
    long long v13 = a3[1];
    long long v15 = a4[3];
    long long v17 = *a4;
    long long v16 = a4[1];
    a3[2] = a4[2];
    a3[3] = v15;
    *a3 = v17;
    a3[1] = v16;
    *a4 = v14;
    a4[1] = v13;
    a4[2] = v12;
    a4[3] = v11;
    if ((*a5)(a3, a2))
    {
      long long v19 = a2[2];
      long long v18 = a2[3];
      long long v21 = *a2;
      long long v20 = a2[1];
      long long v22 = a3[3];
      long long v24 = *a3;
      long long v23 = a3[1];
      a2[2] = a3[2];
      a2[3] = v22;
      *a2 = v24;
      a2[1] = v23;
      *a3 = v21;
      a3[1] = v20;
      a3[2] = v19;
      a3[3] = v18;
      if ((*a5)(a2, (long long *)a1))
      {
        long long v25 = *(_OWORD *)(a1 + 32);
        __n128 result = *(__n128 *)(a1 + 48);
        long long v27 = *(_OWORD *)a1;
        long long v26 = *(_OWORD *)(a1 + 16);
        long long v28 = a2[3];
        long long v30 = *a2;
        long long v29 = a2[1];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = v28;
        *(_OWORD *)a1 = v30;
        *(_OWORD *)(a1 + 16) = v29;
        *a2 = v27;
        a2[1] = v26;
        a2[2] = v25;
        a2[3] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1001603D8(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1001602EC(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, long long *, __n128))*a6)(a5, a4, v12))
  {
    long long v15 = a4[2];
    long long v14 = a4[3];
    long long v17 = *a4;
    long long v16 = a4[1];
    long long v18 = a5[3];
    long long v20 = *a5;
    long long v19 = a5[1];
    a4[2] = a5[2];
    a4[3] = v18;
    *a4 = v20;
    a4[1] = v19;
    *a5 = v17;
    a5[1] = v16;
    a5[2] = v15;
    a5[3] = v14;
    if ((*a6)(a4, a3))
    {
      long long v22 = a3[2];
      long long v21 = a3[3];
      long long v24 = *a3;
      long long v23 = a3[1];
      long long v25 = a4[3];
      long long v27 = *a4;
      long long v26 = a4[1];
      a3[2] = a4[2];
      a3[3] = v25;
      *a3 = v27;
      a3[1] = v26;
      *a4 = v24;
      a4[1] = v23;
      a4[2] = v22;
      a4[3] = v21;
      if ((*a6)(a3, a2))
      {
        long long v29 = a2[2];
        long long v28 = a2[3];
        long long v31 = *a2;
        long long v30 = a2[1];
        long long v32 = a3[3];
        long long v34 = *a3;
        long long v33 = a3[1];
        a2[2] = a3[2];
        a2[3] = v32;
        *a2 = v34;
        a2[1] = v33;
        *a3 = v31;
        a3[1] = v30;
        a3[2] = v29;
        a3[3] = v28;
        if ((*a6)(a2, (long long *)a1))
        {
          long long v35 = *(_OWORD *)(a1 + 32);
          __n128 result = *(__n128 *)(a1 + 48);
          long long v37 = *(_OWORD *)a1;
          long long v36 = *(_OWORD *)(a1 + 16);
          long long v38 = a2[3];
          long long v40 = *a2;
          long long v39 = a2[1];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = v38;
          *(_OWORD *)a1 = v40;
          *(_OWORD *)(a1 + 16) = v39;
          *a2 = v37;
          a2[1] = v36;
          a2[2] = v35;
          a2[3] = (__int128)result;
        }
      }
    }
  }
  return result;
}

__n128 *sub_100160504(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __n128 *), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) >> 6;
    if ((uint64_t)a2 - a1 >= 65)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (__n128 *)(a1 + (v11 << 6));
      do
      {
        a5 = sub_100160710(a1, a4, v10, v13);
        v13 -= 4;
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          __n128 v17 = v15[2];
          __n128 v16 = v15[3];
          __n128 v19 = *v15;
          __n128 v18 = v15[1];
          __n128 v20 = *(__n128 *)(a1 + 48);
          __n128 v22 = *(__n128 *)a1;
          __n128 v21 = *(__n128 *)(a1 + 16);
          v15[2] = *(__n128 *)(a1 + 32);
          _OWORD v15[3] = v20;
          __n128 *v15 = v22;
          v15[1] = v21;
          *(__n128 *)a1 = v19;
          *(__n128 *)(a1 + 16) = v18;
          *(__n128 *)(a1 + 32) = v17;
          *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = v16;
          a5 = sub_100160710(a1, a4, v10, (__n128 *)a1);
        }
        v15 += 4;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 65)
    {
      return v14;
    }
    else
    {
      long long v37 = v14;
      uint64_t v23 = (unint64_t)v9 >> 6;
      do
      {
        uint64_t v24 = 0;
        __n128 v38 = *(__n128 *)a1;
        __n128 v39 = *(__n128 *)(a1 + 16);
        __n128 v40 = *(__n128 *)(a1 + 32);
        __n128 v41 = *(__n128 *)(a1 + 48);
        long long v25 = (_OWORD *)a1;
        do
        {
          long long v26 = (__n128 *)&v25[4 * v24 + 4];
          uint64_t v27 = (2 * v24) | 1;
          uint64_t v28 = 2 * v24 + 2;
          if (v28 < v23 && (*a4)((__n128 *)&v25[4 * v24 + 4], (__n128 *)&v25[4 * v24 + 8]))
          {
            v26 += 4;
            uint64_t v27 = v28;
          }
          __n128 v29 = *v26;
          __n128 v30 = v26[1];
          __n128 v31 = v26[3];
          v25[2] = v26[2];
          v25[3] = v31;
          _OWORD *v25 = v29;
          v25[1] = v30;
          long long v25 = v26;
          uint64_t v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        v7 -= 4;
        if (v26 == v7)
        {
          v26[2] = v40;
          v26[3] = v41;
          __n128 *v26 = v38;
          v26[1] = v39;
        }
        else
        {
          __n128 v32 = *v7;
          __n128 v33 = v7[1];
          __n128 v34 = v7[3];
          v26[2] = v7[2];
          v26[3] = v34;
          __n128 *v26 = v32;
          v26[1] = v33;
          *long long v7 = v38;
          v7[1] = v39;
          double v7[2] = v40;
          v7[3] = v41;
          sub_100160860(a1, (uint64_t)&v26[4], (uint64_t (**)(long long *, long long *))a4, ((uint64_t)&v26[4] - a1) >> 6);
        }
      }
      while (v23-- > 2);
      return v37;
    }
  }
  return a3;
}

__n128 sub_100160710(uint64_t a1, unsigned int (**a2)(__n128 *, __n128 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 6)
    {
      uint64_t v12 = ((uint64_t)a4 - a1) >> 5;
      uint64_t v13 = v12 + 1;
      long long v14 = (__n128 *)(a1 + ((v12 + 1) << 6));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 4))
      {
        v14 += 4;
        uint64_t v13 = v15;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v14, v7) & 1) == 0)
      {
        __n128 v17 = v7[1];
        __n128 v27 = *v7;
        __n128 v28 = v17;
        __n128 v18 = v7[3];
        __n128 v29 = v7[2];
        __n128 v30 = v18;
        do
        {
          __n128 v19 = v14;
          __n128 v20 = *v14;
          __n128 v21 = v14[1];
          __n128 v22 = v14[3];
          double v7[2] = v14[2];
          v7[3] = v22;
          *long long v7 = v20;
          v7[1] = v21;
          if (v9 < v13) {
            break;
          }
          uint64_t v23 = (2 * v13) | 1;
          long long v14 = (__n128 *)(a1 + (v23 << 6));
          uint64_t v24 = 2 * v13 + 2;
          if (v24 < a3)
          {
            if ((*a2)((__n128 *)(a1 + (v23 << 6)), v14 + 4))
            {
              v14 += 4;
              uint64_t v23 = v24;
            }
          }
          long long v7 = v19;
          uint64_t v13 = v23;
        }
        while (!(*a2)(v14, &v27));
        __n128 result = v27;
        __n128 v25 = v28;
        __n128 v26 = v30;
        v19[2] = v29;
        _OWORD v19[3] = v26;
        __n128 *v19 = result;
        v19[1] = v25;
      }
    }
  }
  return result;
}

double sub_100160860(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + (v6 >> 1 << 6));
    unint64_t v11 = (long long *)(a2 - 64);
    if ((*a3)(v10, (long long *)(a2 - 64)))
    {
      long long v13 = v11[1];
      long long v21 = *v11;
      long long v22 = v13;
      long long v14 = v11[3];
      long long v23 = v11[2];
      long long v24 = v14;
      do
      {
        uint64_t v15 = v10;
        long long v16 = *v10;
        long long v17 = v10[1];
        long long v18 = v10[3];
        void v11[2] = v10[2];
        void v11[3] = v18;
        *unint64_t v11 = v16;
        v11[1] = v17;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + (v9 << 6));
        unint64_t v11 = v15;
      }
      while (((*a3)(v10, &v21) & 1) != 0);
      long long v19 = v22;
      long long *v15 = v21;
      v15[1] = v19;
      double result = *(double *)&v23;
      long long v20 = v24;
      v15[2] = v23;
      _OWORD v15[3] = v20;
    }
  }
  return result;
}

char *sub_100160924(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 >> 58) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_100160A30(v7, v11);
    long long v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *sub_100160A30(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_100004E40();
  }
  double result = (char *)sub_10015F6D4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_100160A74(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 4);
      long long v11 = *((_OWORD *)v8 - 3);
      long long v12 = *((_OWORD *)v8 - 1);
      long long v7 = (void *)(v9 - 64);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 4_Block_object_dispose(&STACK[0x370], 8) = v11;
      v8 -= 64;
      v9 -= 64;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v7;
  long long v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 16);
  int64_t v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    long long v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v14 + v15;
  long long v16 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v16;
  size_t v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v17;
  long long v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v18;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_100160B54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10015F170((void **)a1);
    if (a4 > 0x276276276276276) {
      sub_100004E40();
    }
    unint64_t v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10015F1D0((void *)a1, v11);
    uint64_t result = sub_100160CE0(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_100160D64(a2, v13, (uint64_t)v9);
    uint64_t result = sub_100160CE0(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = result;
    return result;
  }
  sub_100160D64(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t result = *(void *)(a1 + 8);
  if (result != v14)
  {
    do
      uint64_t result = sub_1001BAAFC(result - 104);
    while (result != v15);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v15;
  return result;
}

void sub_100160CD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100160CD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100160CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1001BAAC4(a4 + v7, a2 + v7);
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100160D40(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 104;
    do
    {
      sub_1001BAAFC(v4 + v2);
      v2 -= 104;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100160D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1001BAB00(a3, v4);
      v4 += 104;
      a3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1001610F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100161388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100161858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100161894(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001618D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016191C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100161960(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001621D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162214(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016260C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSScanner scannerWithString:v1];
  int v13 = 0;
  if ([v2 scanInt:&v13]
    && ((unsigned int v3 = [v2 isAtEnd], v4 = v13, v13 >= 0) ? (v5 = v3) : (v5 = 0),
        v5 == 1))
  {
    unint64_t v6 = v2;
  }
  else
  {
    float v12 = 0.0;
    unint64_t v6 = +[NSScanner scannerWithString:v1];

    if ([v6 scanFloat:&v12])
    {
      unsigned int v7 = [v6 isAtEnd];
      if (v12 >= 0.0) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = 0;
      }
      BOOL v9 = v8 == 1;
      unint64_t v10 = vcvtas_u32_f32(v12);
      if (v9) {
        uint64_t v4 = v10;
      }
      else {
        uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  return v4;
}

void sub_1001626F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100162718(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (char *)[v1 UTF8String];
  LOBYTE(v3) = *v2;
  if (*v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if ((v3 & 0x80) != 0) {
        __uint32_t v5 = __maskrune((char)v3, 0x100uLL);
      }
      else {
        __uint32_t v5 = _DefaultRuneLocale.__runetype[(char)v3] & 0x100;
      }
      if (!v5 || (unint64_t v6 = (*v2 & 0xFFFFFFFFFFFFFFDFLL) - 65, ((0x34FE4F3uLL >> v6) & 1) != 0))
      {
        uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_17;
      }
      uint64_t v7 = dword_101175828[v6];
      if (!v2[1]) {
        break;
      }
      uint64_t v8 = dword_101175828[(v2[1] & 0xFFFFFFFFFFFFFFDFLL) - 65];
      if (v8 <= v7)
      {
        int v3 = v2[1];
      }
      else
      {
        uint64_t v7 = v8 - v7;
        int v3 = v2[2];
        ++v2;
      }
      v4 += v7;
      ++v2;
      if (!v3) {
        goto LABEL_17;
      }
    }
    v4 += v7;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_17:

  return v4;
}

void sub_100162824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016283C(void *a1)
{
  id v1 = [a1 uppercaseString];
  uint64_t v2 = sub_100162718(v1);

  return v2;
}

void sub_100162874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100162884(void *a1)
{
  id v1 = a1;
  id v2 = [v1 length];
  id v3 = v1;
  uint64_t v4 = (char *)[v3 UTF8String];
  char v5 = *v4;
  if (v2)
  {
    uint64_t v6 = 0;
    while (v5 < 0 ? __maskrune(v5, 0x100uLL) : _DefaultRuneLocale.__runetype[v5] & 0x100)
    {
      char v5 = *v4;
      if (((v4[v6] ^ *v4) & 0xDF) != 0) {
        break;
      }
      if (v2 == (id)++v6) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_9:
    uint64_t v8 = 26 * (void)v2 + (char)(v5 & 0xDF) - 90;
  }

  return v8;
}

void sub_100162964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100162980(void *a1)
{
  id v1 = [a1 uppercaseString];
  uint64_t v2 = sub_100162884(v1);

  return v2;
}

void sub_1001629B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001629C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162A0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100162D44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100162D88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100164040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164298(unsigned int a1)
{
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA920);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107F890();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DA940);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v3 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPArabicLabelFromNumber"];
    uint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:422 isFatal:0 description:"Illegal value for arabic numeral topic label <= 0"];
  }
  if (a1 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v6 = +[NSString stringWithFormat:@"%d", v5];

  return v6;
}

void sub_100164458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164480(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1016A9158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1016A9158))
  {
    __cxa_atexit((void (*)(void *))sub_100168F58, 0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1016A9158);
  }
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAA30);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107F918();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAA50);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v3 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPRomanUpperLabelFromNumber"];
    uint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:525 isFatal:0 description:"Illegal value for roman numeral topic label <= 0"];
  }
  if (a1 <= 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = a1;
  }
  uint64_t v6 = +[NSMutableString string];
  uint64_t v7 = 12;
  do
  {
    uint64_t v8 = (char *)&unk_1014DA960 + 16 * v7;
    if (v5 >= *(_DWORD *)v8)
    {
      uint64_t v9 = *((void *)v8 + 1);
      do
      {
        [v6 appendString:v9];
        v5 -= *(_DWORD *)v8;
      }
      while (v5 >= *(_DWORD *)v8);
    }
    BOOL v11 = v7-- != 0;
  }
  while (v5 && v11);

  return v6;
}

void sub_1001646D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164700(unsigned int a1)
{
  id v1 = sub_100164480(a1);
  uint64_t v2 = [v1 lowercaseString];

  return v2;
}

void sub_10016474C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016475C(int a1)
{
  id v1 = sub_100167608(a1, (uint64_t)aAbcdefghijklmn_0, 0x1AuLL);
  uint64_t v2 = [v1 lowercaseString];

  return v2;
}

void sub_1001647B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001647C4(int a1)
{
  uint64_t v2 = +[NSMutableString string];
  uint64_t v3 = (unsigned __int16)aAbcdefghijklmn_0[(((_BYTE)a1 - 1) & 3) + 26];
  unint64_t v4 = ((unint64_t)(a1 - 1) >> 2) + 1;
  do
  {
    [v2 appendFormat:@"%C" v3];
    --v4;
  }
  while (v4);

  return v2;
}

void sub_100164858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164868(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = +[NSMutableString string];
  unsigned int v5 = v4;
  uint64_t v6 = a2;
  if (a1)
  {
    uint64_t v7 = (char *)&word_1011758CC[8 * a2];
    uint64_t v8 = (uint64_t)*(&off_1014DAA70 + a2);
    id v9 = v4;
    id v22 = v9;
    unsigned int v23 = a2;
    char v24 = 1;
    uint64_t v25 = v8;
    uint64_t v10 = sub_1001678AC((uint64_t)v7, (uint64_t)(v7 + 16), a1, (uint64_t)&v22);
    BOOL v11 = sub_10016799C(v10, a2);
    [v9 appendString:v11];

    unsigned __int16 v21 = word_10117592C[10 * a2];
    float v12 = +[NSString stringWithCharacters:&v21 length:1];
    if (a2 && a2 != 3)
    {
      size_t v17 = [v9 componentsSeparatedByString:v12];
      int v13 = +[NSMutableArray arrayWithArray:v17];

      [v13 removeObject:&stru_101538650];
      long long v18 = [v13 componentsJoinedByString:v12];
      id v14 = [v18 mutableCopy];

      if ((unint64_t)[v14 length] >= 2)
      {
        unsigned int v19 = [v14 characterAtIndex:0];
        unsigned int v20 = [v14 characterAtIndex:1];
        if (v19 == word_10117592C[10 * v6 + 1]
          && (v20 == *((unsigned __int16 *)v7 + 2)
           || v20 == word_1011758CC[8 * v6 + 6]
           || v20 == word_1011759A4[12 * v6 + 10]))
        {
          [v14 deleteCharactersInRange:0, 1];
        }
      }
    }
    else
    {
      int v13 = [v9 stringByReplacingOccurrencesOfString:v12 withString:&stru_101538650];
      id v14 = [v13 mutableCopy];
    }
    id v15 = v14;
  }
  else
  {
    [v4 crl_appendCharacter:word_10117592C[10 * a2]];
    id v15 = v5;
  }

  return v15;
}

void sub_100164AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164B58(unsigned int a1)
{
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAB50);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107F9A0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAB70);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v3 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPCircledNumberLabelFromNumber"];
    unint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:814 isFatal:0 description:"Illegal value for circled number numeral topic label <= 0"];
  }
  uint64_t v5 = 0;
  while (1)
  {
    unsigned int v6 = dword_101175B0C[v5];
    if (a1 >= v6 && dword_101175B18[v5] + v6 > a1) {
      break;
    }
    if (++v5 == 3) {
      goto LABEL_15;
    }
  }
  __int16 v9 = word_101175B24[v5] + a1 - v6;
  uint64_t v7 = +[NSString stringWithCharacters:&v9 length:1];
  if (!v7)
  {
LABEL_15:
    uint64_t v7 = sub_100164298(a1);
  }

  return v7;
}

void sub_100164D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100164D94(unsigned int a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAB90);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FA28();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DABB0);
    }
    unint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v5 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPArabicLabelFromNumberAndLocale(unsigned int, NSString *__strong)"];
    unsigned int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:434 isFatal:0 description:"Illegal value for arabic numeral topic label <= 0"];
  }
  if (a1 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a1;
  }
  id v8 = objc_alloc_init((Class)NSNumberFormatter);
  id v9 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:v3];
  [v8 setLocale:v9];

  uint64_t v10 = +[NSNumber numberWithUnsignedInt:v7];
  BOOL v11 = [v8 stringFromNumber:v10];

  return v11;
}

void sub_100164FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100165020(unsigned int a1)
{
  unsigned int v1 = a1;
  if (a1 >= 0xF4240)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DABD0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FB38();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DABF0);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    unint64_t v4 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPArabianAbjadLabelFromNumber(uint)"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:747 isFatal:0 description:"number out of bounds for algorithm"];

LABEL_14:
    int v6 = sub_10016832C(v1 / 0x3E8, __b);
    int v2 = v6 + 1;
    __b[v6] = 39;
    v1 %= 0x3E8u;
    goto LABEL_15;
  }
  if (!a1)
  {
    BOOL v11 = +[NSString stringWithCharacters:&unk_101175B62 length:3];
    goto LABEL_26;
  }
  if (a1 >= 0x3E8) {
    goto LABEL_14;
  }
  int v2 = 0;
LABEL_15:
  uint64_t v7 = sub_10016832C(v1, &__b[v2]) + v2;
  if (v7 >= 0xC)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAC10);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FAB0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAC30);
    }
    id v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v9 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPArabianAbjadLabelFromNumber(uint)"];
    uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:767 isFatal:0 description:"string out of bounds"];
  }
  BOOL v11 = +[NSString stringWithCharacters:__b length:v7];
LABEL_26:

  return v11;
}

void sub_10016537C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001653C8(unsigned int a1)
{
  unsigned int v1 = a1;
  if (a1 >= 0xF4240)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DACD0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FC48();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DACF0);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    unint64_t v4 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPHebrewBiblicalLabelFromNumber(uint)"];
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:689 isFatal:0 description:"Hebrew number out of bounds for algorithm"];

LABEL_14:
    int v6 = sub_100168980(v1 / 0x3E8, __b);
    int v2 = v6 + 1;
    __b[v6] = 1523;
    v1 %= 0x3E8u;
    goto LABEL_15;
  }
  if (!a1)
  {
    BOOL v11 = +[NSString stringWithCharacters:&unk_101175BCC length:3];
    goto LABEL_26;
  }
  if (a1 >= 0x3E8) {
    goto LABEL_14;
  }
  int v2 = 0;
LABEL_15:
  uint64_t v7 = sub_100168980(v1, &__b[v2]) + v2;
  if (v7 >= 0xE)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAD10);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FBC0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAD30);
    }
    id v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v9 = +[NSString stringWithUTF8String:"NSString *(anonymous namespace)::CRLWPHebrewBiblicalLabelFromNumber(uint)"];
    uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:709 isFatal:0 description:"string out of bounds"];
  }
  BOOL v11 = +[NSString stringWithCharacters:__b length:v7];
LABEL_26:

  return v11;
}

void sub_100165724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100165770(id a1)
{
  unsigned int v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001657B4(id a1)
{
  unsigned int v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001657F8(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableCharacterSet);
  [v1 addCharactersInRange:46, 1];
  [v1 addCharactersInRange:40, 1];
  [v1 addCharactersInRange:41, 1];
  int v2 = (void *)qword_1016A9148;
  qword_1016A9148 = (uint64_t)v1;
}

void sub_10016586C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100165A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001662C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166314(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166358(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016639C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001663E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166424(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166468(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166C90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166CD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166D18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166D5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166DA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166DE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100166E28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100167238(_Unwind_Exception *a1)
{
  int v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100167278(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001672BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001674D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001674F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016753C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100167580(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001675C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100167608(int a1, uint64_t a2, unint64_t a3)
{
  int v6 = +[NSMutableString string];
  if (a1)
  {
    unint64_t v7 = (a1 - 1);
    uint64_t v8 = *(unsigned __int16 *)(a2 + 2 * (v7 % a3));
    if ((int)(v7 / a3 + 1) < 100) {
      int v9 = v7 / a3 + 1;
    }
    else {
      int v9 = 100;
    }
    while (1)
    {
      BOOL v10 = __OFSUB__(v9--, 1);
      if (v9 < 0 != v10) {
        break;
      }
      [v6 crl_appendCharacter:v8];
    }
  }

  return v6;
}

void sub_10016769C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001676AC(void *a1, unsigned int a2, int a3)
{
  id v5 = a1;
  if (a2 >= 0xA)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAAA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10107FFA0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAAC0);
    }
    int v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    unint64_t v7 = +[NSString stringWithUTF8String:"void (anonymous namespace)::appendIdeographicDigit(NSMutableString *__strong, unsigned int, CRLWPListIdeographicType)"];
    uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:195 isFatal:0 description:"inDigit is larger than single digit"];
  }
  [v5 crl_appendCharacter:word_10117592C[10 * a3 + a2]];
}

void sub_10016786C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001678AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    do
    {
      int v8 = *(_DWORD *)(a4 + 8);
      int v9 = *(unsigned __int8 *)(a4 + 12);
      BOOL v10 = *(void (**)(id, void))(a4 + 16);
      id v11 = *(id *)a4;
      float v12 = v11;
      unsigned int v13 = *(_DWORD *)v7;
      unsigned int v14 = a3 / *(_DWORD *)v7;
      if ((a3 || !v13) && (v9 || v14 != 1 || v8 && v8 != 3)) {
        v10(v11, a3 / v13);
      }
      if (v13 <= a3) {
        [v12 crl_appendCharacter:*(unsigned __int16 *)(v7 + 4)];
      }
      unsigned int v15 = *(_DWORD *)v7;
      v7 += 8;
      a3 = a3 - v15 * v14;
    }
    while (v7 != a2);
  }

  return a3;
}

void sub_100167984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016799C(uint64_t a1, unsigned int a2)
{
  if (a1 >> 4 >= 0x271)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAAE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101080028();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAB00);
    }
    unint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v5 = +[NSString stringWithUTF8String:"NSMutableString *(anonymous namespace)::ideographicNumberStringForSmallValue(unsigned int, CRLWPListIdeographicType, BOOL)"];
    int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:308 isFatal:0 description:"inValue too large for ideographicNumberStringForSmallValue"];
  }
  uint64_t v7 = +[NSMutableString string];
  uint64_t v8 = (uint64_t)*(&off_1014DAB20 + a2);
  id v9 = v7;
  id v12 = v9;
  unsigned int v13 = a2;
  char v14 = 0;
  uint64_t v15 = v8;
  unsigned int v10 = sub_1001678AC((uint64_t)&unk_1011759A4 + 24 * a2, (uint64_t)&unk_1011759A4 + 24 * a2 + 24, a1, (uint64_t)&v12);
  if (v10) {
    sub_1001676AC(v9, v10, a2);
  }

  return v9;
}

void sub_100167BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100167BE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100167C24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100167C68(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 0);
  [v4 appendString:v3];
}

void sub_100167CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100167D04(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 1u);
  [v4 appendString:v3];
}

void sub_100167D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100167DA0(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 2u);
  [v4 appendString:v3];
}

void sub_100167E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100167E3C(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 3u);
  [v4 appendString:v3];
}

void sub_100167EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100167ED8(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 4u);
  [v4 appendString:v3];
}

void sub_100167F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100167F74(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v3 = sub_10016799C(a2, 5u);
  [v4 appendString:v3];
}

void sub_100167FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100168010(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168054(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168098(void *a1, unsigned int a2)
{
}

void sub_1001680A0(void *a1, unsigned int a2)
{
}

void sub_1001680A8(void *a1, unsigned int a2)
{
}

void sub_1001680B0(void *a1, unsigned int a2)
{
}

void sub_1001680B8(void *a1, unsigned int a2)
{
}

void sub_1001680C0(void *a1, unsigned int a2)
{
}

id sub_1001680C8(int a1, uint64_t a2, unint64_t a3, int a4)
{
  LODWORD(v7) = a1;
  uint64_t v8 = +[NSMutableString string];
  if (v7)
  {
    unsigned int v9 = 0;
    do
    {
      unint64_t v10 = (v7 - 1);
      if (a4) {
        unsigned __int16 v11 = *(_WORD *)(a2 + 2 * (v10 % a3)) + 96;
      }
      else {
        unsigned __int16 v11 = *(_WORD *)(a2 + 2 * (v10 % a3));
      }
      [v8 crl_insertCharacter:v11 atIndex:0];
      unint64_t v7 = (v10 - (v10 % a3)) / a3;
      if (!v7) {
        break;
      }
    }
    while (v9++ < 0x64);
  }

  return v8;
}

void sub_100168184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100168194(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001681D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016821C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168260(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001682A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001682E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

unint64_t sub_10016832C(unsigned int a1, void *__b)
{
  if (a1 >= 0x3E8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAC50);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101080138();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAC70);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int v6 = +[NSString stringWithUTF8String:"uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)"];
    unint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:720 isFatal:0 description:"number out of range"];
  }
  else if (a1 < 0x190)
  {
    unint64_t v4 = 0;
    goto LABEL_14;
  }
  unint64_t v4 = a1 / 0x190uLL;
  memset_pattern16(__b, &unk_101175BF0, (2 * v4));
LABEL_14:
  if (a1 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v4) = word_101175B68[a1 % 0x190 / 0x64 - 1];
    unint64_t v4 = (v4 + 1);
  }
  unsigned int v8 = a1 % 0x190 % 0x64;
  if (v8 - 15 <= 1)
  {
    *((_WORD *)__b + v4) = 1610;
    unint64_t v9 = (v4 + 2);
    uint64_t v10 = v8 - 11;
    LODWORD(v4) = v4 + 1;
LABEL_22:
    *((_WORD *)__b + v4) = word_101175B8E[v10];
    unint64_t v4 = v9;
    goto LABEL_23;
  }
  if (v8 >= 0xA)
  {
    *((_WORD *)__b + v4) = word_101175B7C[a1 % 0x190 % 0x64 / 0xA - 1];
    unint64_t v4 = (v4 + 1);
  }
  if (a1 % 0x190 % 0x64 % 0xA)
  {
    uint64_t v10 = a1 % 0x190 % 0x64 % 0xA - 1;
    unint64_t v9 = (v4 + 1);
    goto LABEL_22;
  }
LABEL_23:
  if (v4 >= 6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAC90);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010800B0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DACB0);
    }
    unsigned __int16 v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    id v12 = +[NSString stringWithUTF8String:"uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)"];
    unsigned int v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v12 file:v13 lineNumber:742 isFatal:0 description:"string out of range"];
  }
  return v4;
}

void sub_100168724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100168760(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001687A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001687E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016882C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168870(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001688B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001688F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016893C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

unint64_t sub_100168980(unsigned int a1, void *__b)
{
  if (a1 >= 0x3E8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAD50);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101080248();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DAD70);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int v6 = +[NSString stringWithUTF8String:"uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)"];
    unint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:653 isFatal:0 description:"number out of range"];
  }
  else if (a1 < 0x190)
  {
    unint64_t v4 = 0;
    goto LABEL_14;
  }
  unint64_t v4 = a1 / 0x190uLL;
  memset_pattern16(__b, &unk_101175C00, (2 * v4));
LABEL_14:
  if (a1 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v4) = a1 % 0x190 / 0x64 + 1510;
    unint64_t v4 = (v4 + 1);
  }
  unsigned __int16 v8 = a1 % 0x190 % 0x64;
  if (v8 - 15 <= 1)
  {
    unsigned int v9 = v4 + 1;
    *((_WORD *)__b + v4) = 1496;
    LODWORD(v4) = v4 + 2;
    *((_WORD *)__b + v9) = v8 + 1478;
LABEL_23:
    unsigned int v10 = v4;
    *((_WORD *)__b + v4) = *((_WORD *)__b + (v4 - 1));
    *((_WORD *)__b + (v4 - 1)) = 1524;
    unint64_t v4 = (v4 + 1);
    if (v10 >= 6)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DAD90);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010801C0();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DADB0);
      }
      unsigned __int16 v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      id v12 = +[NSString stringWithUTF8String:"uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)"];
      unsigned int v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v12 file:v13 lineNumber:684 isFatal:0 description:"string out of range"];
    }
    return v4;
  }
  if (a1 % 0x190 % 0x64 >= 0xA)
  {
    *((_WORD *)__b + v4) = word_101175BD2[v8 / 0xAu - 1];
    unint64_t v4 = (v4 + 1);
  }
  if (a1 % 0x190 % 0x64 % 0xA)
  {
    *((_WORD *)__b + v4) = a1 % 0x190 % 0x64 % 0xA + 1487;
    unint64_t v4 = (v4 + 1);
  }
  if (v4 >= 2) {
    goto LABEL_23;
  }
  return v4;
}

void sub_100168D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100168DC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168E04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168E48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168E8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168ED0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168F14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100168F58()
{
  for (uint64_t i = &stru_1000000B0.segname[8]; i != -8; i -= 16)
}

void sub_100169C08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100169C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016A0A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016A0EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016A3A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016A3E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10016A5AC(double *a1, double a2, double a3)
{
  double v4 = *a1;
  double v5 = a1[1];
  double v6 = sub_100064680(a2, a3, *a1);
  double v8 = v7;
  double v9 = a1[2];
  double v10 = a1[3];
  double v11 = sub_100064680(v9, v10, v4);
  double v13 = sub_10006468C(v6, v8, v11, v12);
  double v14 = v13 / sub_1000643CC(v9, v10, v4, v5);

  return sub_100407E48(v14, 0.0, 1.0);
}

void sub_10016AC7C()
{
}

void sub_10016B0A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 168);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10016B174;
  void v11[3] = &unk_1014DAE98;
  v11[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  id v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = *(void *)(a1 + 64);
  dispatch_sync(v3, v11);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v10, v6, v7, v8, v9);
  }
}

void sub_10016B160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016B174(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 80), *(id *)(a1 + 40));
  [*(id *)(*(void *)(a1 + 32) + 80) _setInputType:*(void *)(a1 + 48)];
  *(void *)(*(void *)(a1 + 32) + 304) = *(void *)(a1 + 56);
  [*(id *)(a1 + 32) setUseRuler:0];
  [*(id *)(a1 + 32) setCanSnapToRuler:0];
  [*(id *)(a1 + 32) setIsSnappedToRuler:0];
  [*(id *)(a1 + 32) setStrokeMaxForce:0.0];
  [*(id *)(a1 + 32) setTouchSensitivity:1.0];
  *(void *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x370], 8) = *(void *)(a1 + 48);
  *(void *)(*(void *)(a1 + 32) + 96) = 0;
  memset(v11, 0, sizeof(v11));
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80);
  __asm { FMOV            V0.2D, #1.0 }
  long long v12 = _Q0;
  [v2 _setBaseValues:v11];
  [*(id *)(a1 + 40) timestamp];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 288) + 104) = v8;
  id v9 = [*(id *)(a1 + 32) outputFilter];
  return (*(uint64_t (**)(id, void, double))(*(void *)v9 + 16))(v9, *(void *)(a1 + 48), *(double *)(*(void *)(a1 + 32) + 304));
}

id sub_10016B31C(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  void v4[2] = *(_OWORD *)(a1 + 72);
  [*(id *)(a1 + 32) setRulerTransform:v4];
  [*(id *)(a1 + 32) setRulerWidth:*(double *)(a1 + 88)];
  [*(id *)(a1 + 32) setUseRuler:1];
  return [*(id *)(a1 + 32) setCanSnapToRuler:1];
}

void sub_10016BA40(uint64_t a1, double a2)
{
  if (a2 <= 0.0)
  {
    int v3 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DBB78);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101080448(v3, v4, a2);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DBB98);
    }
    uint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v6 = +[NSString stringWithUTF8String:"void CRLPKPointReductionFilter::setPointReductionFilterThresholdMultiplier(CGFloat)"];
    uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 46, 0, "Unexpected multiplier value < 0 (%f).", *(void *)&a2);
  }
  else
  {
    *(double *)(a1 + 12_Block_object_dispose(&STACK[0x370], 8) = a2;
  }
}

void sub_10016BBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016BCC0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) outputFilter];
  uint64_t result = (*(uint64_t (**)(id, void))(*(void *)v2 + 32))(v2, *(void *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10016BE28(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100173EE4((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(void *)a1 + 80 * a2;
  }
}

void sub_10016C10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016C134(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016C178(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016C26C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 64))
  {
    sub_10016BE28(v2 + 32, *(void *)(v2 + 56));
    id v3 = [*(id *)(a1 + 32) outputFilter];
    *(void *)(*(void *)(a1 + 32) + 56) = (*(uint64_t (**)(id, void, uint64_t))(*(void *)v3 + 40))(v3, *(void *)(*(void *)(a1 + 32) + 56), *(void *)(a1 + 32) + 32);
    *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  sub_10016BE28(*(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v2 + 40) - *(void *)(v2 + 32)) >> 4));
  unint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = (unsigned char *)v4[5];
  uint64_t v7 = (unsigned char *)(v4[4] + 80 * v5);
  if (v6 != v7)
  {
    memmove((void *)(**(void **)(a1 + 48) + 80 * v5), v7, v6 - v7);
    unint64_t v4 = *(void **)(a1 + 32);
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4[7];
}

void sub_10016C404(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = a1 + 40;
  unint64_t v3 = v1[14];
  unint64_t v4 = v1[15];
  if (v3 >= v4)
  {
    uint64_t v10 = v1[13];
    uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v3 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x2E8BA2E8BA2E8BALL) {
      sub_100004E40();
    }
    unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1745D1745D1745DLL) {
      unint64_t v14 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_100004EE8((uint64_t)(v1 + 15), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v16 = &v15[88 * v11];
    size_t v17 = &v15[88 * v14];
    long long v18 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)long long v16 = *(_OWORD *)v2;
    *((_OWORD *)v16 + 1) = v18;
    long long v19 = *(_OWORD *)(v2 + 32);
    long long v20 = *(_OWORD *)(v2 + 48);
    long long v21 = *(_OWORD *)(v2 + 64);
    *((void *)v16 + 10) = *(void *)(v2 + 80);
    *((_OWORD *)v16 + 3) = v20;
    *((_OWORD *)v16 + 4) = v21;
    *((_OWORD *)v16 + 2) = v19;
    id v9 = v16 + 88;
    unsigned int v23 = (char *)v1[13];
    id v22 = (char *)v1[14];
    if (v22 != v23)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 88);
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v22 - 72);
        *(_OWORD *)(v16 - 8_Block_object_dispose(&STACK[0x370], 8) = v24;
        long long v25 = *(_OWORD *)(v22 - 56);
        long long v26 = *(_OWORD *)(v22 - 40);
        long long v27 = *(_OWORD *)(v22 - 24);
        *((void *)v16 - 1) = *((void *)v22 - 1);
        *(_OWORD *)(v16 - 24) = v27;
        *(_OWORD *)(v16 - 40) = v26;
        *(_OWORD *)(v16 - 56) = v25;
        v16 -= 88;
        v22 -= 88;
      }
      while (v22 != v23);
      id v22 = (char *)v1[13];
    }
    v1[13] = v16;
    v1[14] = v9;
    v1[15] = v17;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)unint64_t v3 = *(_OWORD *)v2;
    *(_OWORD *)(v3 + 16) = v5;
    long long v6 = *(_OWORD *)(a1 + 72);
    long long v7 = *(_OWORD *)(a1 + 88);
    long long v8 = *(_OWORD *)(a1 + 104);
    *(void *)(v3 + 80) = *(void *)(a1 + 120);
    *(_OWORD *)(v3 + 4_Block_object_dispose(&STACK[0x370], 8) = v7;
    *(_OWORD *)(v3 + 64) = v8;
    *(_OWORD *)(v3 + 32) = v6;
    id v9 = (char *)(v3 + 88);
  }
  v1[14] = v9;
}

id sub_10016C60C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(unsigned char **)(v2 + 104);
  if (*(unsigned char **)(v2 + 112) != v3)
  {
    char v4 = 0;
    long long v5 = 0;
    while (2)
    {
      long long v6 = v5;
      uint64_t v7 = *(void *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 8);
      uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v2 + 16) - v8) >> 3);
      long long v5 = v3;
      while (v9 <= v7)
      {
LABEL_8:
        v5 += 11;
        if (v5 == *(void **)(v2 + 112))
        {
          unint64_t v3 = v5;
          if ((v4 & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_15;
        }
      }
      uint64_t v10 = v9 - v7;
      uint64_t v11 = 88 * v7;
      while (*(void *)(v8 + v11 + 64) != v5[8])
      {
        v11 += 88;
        if (!--v10) {
          goto LABEL_8;
        }
      }
      *(void *)(v8 + v11 + 16) = v5[2];
      uint64_t v12 = *(void *)(a1 + 32);
      if (!*(void *)(v12 + 88))
      {
        *(double *)(*(void *)(v12 + 8) + v11 + 16) = *(double *)(*(void *)(v12 + 8) + v11 + 16)
                                                     / *(double *)(v12 + 312);
        uint64_t v12 = *(void *)(a1 + 32);
      }
      *(void *)(*(void *)(v12 + 8) + v11 + 64) = -1;
      uint64_t v2 = *(void *)(a1 + 32);
      unint64_t v3 = v5 + 11;
      char v4 = 1;
      long long v6 = v5;
      if (v5 + 11 != *(void **)(v2 + 112)) {
        continue;
      }
      break;
    }
LABEL_15:
    unint64_t v13 = *(void **)(v2 + 104);
    unint64_t v14 = v6 + 11;
    if (v13 != v6 + 11)
    {
      int64_t v15 = v3 - v14;
      if (v3 != v14) {
        memmove(*(void **)(v2 + 104), v14, v3 - v14);
      }
      *(void *)(v2 + 112) = (char *)v13 + v15;
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
LABEL_19:
  id result = [(id)v2 updateImmutableCount];
  uint64_t v17 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v17 + 128)
    && *(void *)(v17 + 96) >= (unint64_t)(0x2E8BA2E8BA2E8BA3
                                                 * ((uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 3)))
  {
    *(unsigned char *)(v17 + 12_Block_object_dispose(&STACK[0x370], 8) = 0;
    long long v18 = *(NSObject **)(*(void *)(a1 + 32) + 136);
    return (id)dispatch_semaphore_signal(v18);
  }
  return result;
}

void sub_10016C8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016C9C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 80))
  {
    unint64_t v3 = *(NSObject **)(v1 + 168);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3321888768;
    void v4[2] = sub_10016CA90;
    _OWORD v4[3] = &unk_1014DAFC8;
    long long v6 = 0;
    uint64_t v7 = 0;
    __p = 0;
    sub_100174080(&__p, *(const void **)(a1 + 40), *(void *)(a1 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
    void v4[4] = *(void *)(a1 + 32);
    dispatch_sync(v3, v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
}

void *sub_10016CA90(void *result)
{
  uint64_t v1 = result[6] - result[5];
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    int64_t v4 = v1 / 0x58uLL;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    do
    {
      long long v6 = (void *)v2[4];
      uint64_t v7 = v2[5] + v3;
      long long v8 = *(_OWORD *)(v7 + 16);
      v12[0] = *(_OWORD *)v7;
      v12[1] = v8;
      long long v10 = *(_OWORD *)(v7 + 48);
      long long v9 = *(_OWORD *)(v7 + 64);
      long long v11 = *(_OWORD *)(v7 + 32);
      uint64_t v13 = *(void *)(v7 + 80);
      void v12[3] = v10;
      v12[4] = v9;
      void v12[2] = v11;
      id result = [v6 _drawingAddPoint:v12];
      v3 += 88;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *sub_10016CB30(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_100174080(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
}

void sub_10016CB60(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = v2;
    operator delete(v2);
  }
}

void sub_10016CC14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 80))
  {
    uint64_t v2 = *(NSObject **)(v1 + 168);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_10016CCC4;
    _OWORD v3[3] = &unk_1014DAFA0;
    v3[4] = v1;
    long long v6 = *(_OWORD *)(a1 + 72);
    long long v7 = *(_OWORD *)(a1 + 88);
    long long v8 = *(_OWORD *)(a1 + 104);
    uint64_t v9 = *(void *)(a1 + 120);
    long long v4 = *(_OWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 56);
    dispatch_sync(v2, v3);
  }
}

id sub_10016CCC4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 88);
  v5[2] = *(_OWORD *)(a1 + 72);
  _OWORD v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 120);
  long long v3 = *(_OWORD *)(a1 + 56);
  v5[0] = *(_OWORD *)(a1 + 40);
  v5[1] = v3;
  return [v1 _drawingAddPoint:v5];
}

void sub_10016CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10016CFC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 80))
  {
    uint64_t v15 = 0;
    long long v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    long long v3 = *(NSObject **)(v2 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    void block[2] = sub_10016D21C;
    block[3] = &unk_1014DB000;
    void block[4] = v2;
    void block[5] = &v15;
    dispatch_sync(v3, block);
    if (*((unsigned char *)v16 + 24))
    {
      dispatch_time_t v4 = dispatch_time(0, 200000000);
      long long v5 = dispatch_get_global_queue(25, 0);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _OWORD v13[2] = sub_10016D2E0;
      v13[3] = &unk_1014D0800;
      void v13[4] = *(void *)(a1 + 32);
      dispatch_after(v4, v5, v13);

      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    long long v7 = *(NSObject **)(v6 + 168);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10016D2E8;
    void v12[3] = &unk_1014D0800;
    v12[4] = v6;
    dispatch_sync(v7, v12);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(NSObject **)(v8 + 168);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10016D3B0;
    void v11[3] = &unk_1014D0800;
    v11[4] = v8;
    dispatch_sync(v9, v11);
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    long long v10 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v10();
  }
}

void sub_10016D204(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10016D21C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
  [*(id *)(a1 + 32) removePredictedTouches];
  id v2 = [*(id *)(a1 + 32) outputFilter];
  (*(void (**)(id))(*(void *)v2 + 24))(v2);
  [*(id *)(a1 + 32) setCanSnapToRuler:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 200) + 40) = 0;
  id result = [*(id *)(a1 + 32) updateImmutableCount];
  if (*(void *)(*(void *)(a1 + 32) + 96) != 0x2E8BA2E8BA2E8BA3
                                                 * ((uint64_t)(*(void *)(*(void *)(a1 + 32) + 16)
                                                            - *(void *)(*(void *)(a1 + 32) + 8)) >> 3))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1 + 32) + 12_Block_object_dispose(&STACK[0x370], 8) = 1;
  }
  return result;
}

id sub_10016D2E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) drawingUpdateAllPoints];
}

void sub_10016D2E8(uint64_t a1)
{
  __p = 0;
  dispatch_time_t v4 = 0;
  uint64_t v5 = 0;
  id v2 = [*(id *)(a1 + 32) compressionFilter];
  (*(void (**)(id, void, void **))(*(void *)v2 + 40))(v2, 0, &__p);
  [*(id *)(*(void *)(a1 + 32) + 80) _setPoints:count:copy:];
  [*(id *)(*(void *)(a1 + 32) + 80) set_inflight:0];
  if (__p)
  {
    dispatch_time_t v4 = __p;
    operator delete(__p);
  }
}

void sub_10016D394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016D3B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) outputFilter];
  (*(void (**)(id))(*(void *)v2 + 48))(v2);
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_time_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = 0;
}

void sub_10016D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10016D4E4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_10016D574;
  block[3] = &unk_1014D0800;
  void block[4] = v2;
  dispatch_sync(v3, block);
}

void sub_10016D574(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) outputFilter];
  (*(void (**)(id))(*(void *)v2 + 48))(v2);
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_time_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = 0;
}

void sub_10016DA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  long long v36 = *(void **)v33;
  if (*(void *)v33)
  {
    *(void *)(v33 + _Block_object_dispose(&STACK[0x370], 8) = v36;
    operator delete(v36);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  long long v37 = *(void **)(v34 - 160);
  if (v37)
  {
    *(void *)(v34 - 152) = v37;
    operator delete(v37);
  }
  __n128 v38 = *(void **)(v34 - 136);
  if (v38)
  {
    *(void *)(v34 - 12_Block_object_dispose(&STACK[0x370], 8) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016DD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Block_object_dispose(&a18, 8);
  long long v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(void *)(v24 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10016DDAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016DDBC(uint64_t a1)
{
}

void sub_10016DDC4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10016DEBC(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_10016DF4C;
  block[3] = &unk_1014DB0A0;
  id v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);
}

uint64_t sub_10016DF4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10016E258(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  id v4 = [WeakRetained getInputUpdatedRangeFromIndex:a2];

  return v4;
}

void sub_10016E298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016E2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  id v6 = [WeakRetained copyInputUpdatedRangeFromIndex:a2 into:a3];

  return v6;
}

void sub_10016E2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016E308(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  [WeakRetained reset];
}

void sub_10016E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016E364(uint64_t a1)
{
  return a1;
}

void sub_10016E390(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));

  operator delete();
}

uint64_t sub_10016E3E4(uint64_t a1)
{
  return a1;
}

void sub_10016E410(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));

  operator delete();
}

double sub_10016E45C(uint64_t a1, uint64_t a2, __n128 a3)
{
  double v3 = a3.n128_f64[0];
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v6 + 16))(v6, a2, a3);
  }
  double result = v3 * 0.5;
  *(double *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v3 * 0.5;
  *(void *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_10016E4D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained isSnappedToRuler])
  {
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);

    if (v9 != 1)
    {
      uint64_t v10 = (v5 - v6) / 88;
      uint64_t v11 = *a3;
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
      if (v10 + 1 < v12 - 1)
      {
        uint64_t v13 = (double *)(v11 + 88 * (v10 + 1));
        double v15 = *v13;
        double v14 = v13[1];
        long long v16 = (double *)(v11 + 88 * v10);
        double v17 = *v16;
        uint64_t v18 = v12 - v10 - 2;
        long long v19 = v16 + 12;
        do
        {
          double v20 = v19[10];
          double v21 = v19[11];
          double v22 = sub_100064698(v15, v14, v17);
          double v23 = sub_100064698(v20, v21, v22);
          double v17 = sub_1000646A4(v23, v24, 0.333333333);
          double v26 = v25;
          double v27 = sub_100064680(v17, v25, v15);
          double v29 = v28;
          double v30 = sub_100065398(v27, v28);
          double v31 = *(double *)(a1 + 32);
          if (v30 >= v31)
          {
            double v32 = sub_1000646A4(v27, v29, v31 / v30);
            double v17 = sub_100064698(v15, v14, v32);
            double v26 = v33;
          }
          *(v19 - 1) = v17;
          double *v19 = v26;
          v19 += 11;
          double v14 = v21;
          double v15 = v20;
          --v18;
        }
        while (v18);
      }
      if (v7 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v7;
      }
      uint64_t v35 = v34 - 1;
      if (!*(unsigned char *)(a1 + 16)) {
        return v35;
      }
    }
  }
  return v7;
}

void sub_10016E6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016E6DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void *sub_10016E72C(void *a1)
{
  *a1 = off_1014DB190;
  id v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  *a1 = off_1014CAB60;
  id v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  *a1 = off_1014CABC8;
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_10016E7E4(void *a1)
{
  *a1 = off_1014DB190;
  id v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  *a1 = off_1014CAB60;
  id v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  *a1 = off_1014CABC8;
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }

  operator delete();
}

float64x2_t sub_10016E8BC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    double v8 = a3;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2);
    a3 = v8;
  }
  *(double *)(a1 + 24) = a3;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  float64x2_t v6 = vmulq_n_f64(vmulq_n_f64((float64x2_t)xmmword_101175C40, a3), *(double *)(a1 + 128));
  float64x2_t result = vmulq_f64(v6, v6);
  *(float64x2_t *)(a1 + 136) = result;
  return result;
}

void *sub_10016E944(uint64_t a1)
{
  float64x2_t result = sub_100004958(a1);
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  return result;
}

uint64_t sub_10016E970(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_10000453C(a1 + 48, *(void *)(a1 + 32) - *(void *)(a1 + 120));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  double v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

void sub_10016EA10(uint64_t a1)
{
  if (*(void *)(a1 + 56) == *(void *)(a1 + 48) || *(unsigned char *)(a1 + 200)) {
    return;
  }
  sub_10016F61C(a1);
  BOOL v127 = (void **)(a1 + 80);
  sub_10000453C(a1 + 80, *(void *)(a1 + 72));
  uint64_t v2 = (void **)(a1 + 152);
  sub_10016F7A4(a1 + 152, 0);
  unint64_t v3 = *(void *)(a1 + 168);
  CGAffineTransform v128 = (void **)(a1 + 152);
  CGAffineTransform v130 = (void *)(a1 + 168);
  id v4 = *(char **)(a1 + 160);
  if ((unint64_t)v4 >= v3)
  {
    float64x2_t v6 = (char *)*v2;
    uint64_t v7 = (v4 - (unsigned char *)*v2) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      sub_100004E40();
    }
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = (char *)sub_10001EAB0((uint64_t)v130, v10);
      float64x2_t v6 = *(char **)(a1 + 152);
      id v4 = *(char **)(a1 + 160);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[16 * v7];
    uint64_t v13 = &v11[16 * v10];
    *(void *)uint64_t v12 = -1;
    *((void *)v12 + 1) = 0;
    uint64_t v5 = (double *)(v12 + 16);
    if (v4 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v4 - 1);
        v12 -= 16;
        v4 -= 16;
      }
      while (v4 != v6);
      float64x2_t v6 = (char *)*v2;
    }
    *(void *)(a1 + 152) = v12;
    *(void *)(a1 + 160) = v5;
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x370], 8) = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)id v4 = -1;
    *((void *)v4 + 1) = 0;
    uint64_t v5 = (double *)(v4 + 16);
  }
  *(void *)(a1 + 160) = v5;
  int64_t v14 = *(void *)(a1 + 112);
  int64_t v15 = v14 + 1;
  if (v14 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3))) {
    goto LABEL_61;
  }
  uint64_t v16 = (16 * v14) | 8;
  uint64_t v17 = 88 * v14 + 8;
  do
  {
    uint64_t v18 = v14;
    int64_t v14 = v15;
    uint64_t v19 = *(void *)(a1 + 112);
    double v20 = 1.79769313e308;
    if (v18 < v19) {
      goto LABEL_44;
    }
    uint64_t v21 = v17;
    uint64_t v22 = v16;
    uint64_t v23 = *(void *)(a1 + 112);
    do
    {
      double v24 = sub_1000643CC(*(double *)(*(void *)(a1 + 48) + 88 * v14), *(double *)(*(void *)(a1 + 48) + 88 * v14 + 8), *(double *)(*(void *)(a1 + 48) + v21 - 8), *(double *)(*(void *)(a1 + 48) + v21));
      if (*(double *)(*(void *)(a1 + 152) - 16 * v19 + v22) >= 1.79769313e308 || v24 < *(double *)(a1 + 136)) {
        goto LABEL_31;
      }
      double v25 = sub_10016F7D4(a1, v18, v14) + *(double *)(*(void *)(a1 + 152) - 16 * *(void *)(a1 + 112) + v22);
      if (v25 < v20)
      {
        uint64_t v23 = v18;
        double v20 = v25;
      }
      uint64_t v26 = v14;
      if (v14 < 0)
      {
        unsigned int v27 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB200);
        }
        log = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109890;
          unsigned int v133 = v27;
          __int16 v134 = 2082;
          CFRange v135 = "virtual void CRLPKPointReductionFilter::run()";
          __int16 v136 = 2082;
          CFRange v137 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h";
          __int16 v138 = 1024;
          int v139 = 170;
          _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
        }
        unsigned int v123 = v27;
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB220);
        }
        double v28 = off_10166B4A0;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          os_log_t loga = v28;
          double v30 = +[CRLAssertionHandler packedBacktraceString];
          *(_DWORD *)buf = 67109378;
          unsigned int v133 = v123;
          __int16 v134 = 2114;
          CFRange v135 = v30;
          _os_log_error_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          double v28 = loga;
        }

        os_log_t logb = +[NSString stringWithUTF8String:"virtual void CRLPKPointReductionFilter::run()"];
        double v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h"];
        +[CRLAssertionHandler handleFailureInFunction:logb file:v29 lineNumber:170 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v18 < v26 - 50 || v24 > *(double *)(a1 + 144)) {
        break;
      }
      uint64_t v19 = *(void *)(a1 + 112);
LABEL_31:
      v22 -= 16;
      v21 -= 88;
      BOOL v94 = v18-- <= v19;
    }
    while (!v94);
    uint64_t v5 = *(double **)(a1 + 160);
    uint64_t v19 = v23;
LABEL_44:
    if ((unint64_t)v5 >= *v130)
    {
      double v31 = (double *)*v128;
      uint64_t v32 = ((char *)v5 - (unsigned char *)*v128) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_100004E40();
      }
      uint64_t v34 = *v130 - (void)v31;
      if (v34 >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        long long v36 = (char *)sub_10001EAB0((uint64_t)v130, v35);
        double v31 = *(double **)(a1 + 152);
        uint64_t v5 = *(double **)(a1 + 160);
      }
      else
      {
        long long v36 = 0;
      }
      long long v37 = (double *)&v36[16 * v32];
      *(void *)long long v37 = v19;
      v37[1] = v20;
      __n128 v38 = v37;
      if (v5 != v31)
      {
        do
        {
          *((_OWORD *)v38 - 1) = *((_OWORD *)v5 - 1);
          v38 -= 2;
          v5 -= 2;
        }
        while (v5 != v31);
        double v31 = (double *)*v128;
      }
      uint64_t v5 = v37 + 2;
      *(void *)(a1 + 152) = v38;
      *(void *)(a1 + 160) = v37 + 2;
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x370], 8) = &v36[16 * v35];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(void *)uint64_t v5 = v19;
      v5[1] = v20;
      v5 += 2;
    }
    *(void *)(a1 + 160) = v5;
    int64_t v15 = v14 + 1;
    v16 += 16;
    v17 += 88;
  }
  while (v14 + 1 < (unint64_t)(0x2E8BA2E8BA2E8BA3
                                     * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3)));
LABEL_61:
  long long v131 = (void **)(a1 + 176);
  sub_10016F960(a1 + 176, 0);
  int64_t v39 = *(void *)(a1 + 112);
  uint64_t v40 = v39 + ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 4) - 1;
  if (v40 > v39)
  {
    __n128 v41 = (void *)(a1 + 192);
    long long v42 = *(uint64_t **)(a1 + 184);
    do
    {
      if ((unint64_t)v42 >= *v41)
      {
        uint64_t v44 = (uint64_t *)*v131;
        uint64_t v45 = ((char *)v42 - (unsigned char *)*v131) >> 3;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61) {
          sub_100004E40();
        }
        uint64_t v47 = *v41 - (void)v44;
        if (v47 >> 2 > v46) {
          unint64_t v46 = v47 >> 2;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          double v49 = (char *)sub_10002B494(a1 + 192, v48);
          uint64_t v44 = *(uint64_t **)(a1 + 176);
          long long v42 = *(uint64_t **)(a1 + 184);
        }
        else
        {
          double v49 = 0;
        }
        uint64_t v50 = (uint64_t *)&v49[8 * v45];
        *uint64_t v50 = v40;
        uint64_t v43 = v50 + 1;
        while (v42 != v44)
        {
          uint64_t v51 = *--v42;
          *--uint64_t v50 = v51;
        }
        *(void *)(a1 + 176) = v50;
        *(void *)(a1 + 184) = v43;
        *(void *)(a1 + 192) = &v49[8 * v48];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        uint64_t *v42 = v40;
        uint64_t v43 = v42 + 1;
      }
      *(void *)(a1 + 184) = v43;
      int64_t v39 = *(void *)(a1 + 112);
      uint64_t v40 = *(void *)(*(void *)(a1 + 152) + 16 * (v40 - v39));
      long long v42 = v43;
    }
    while (v40 > v39);
  }
  long long v53 = *(double **)(a1 + 80);
  uint64_t v52 = *(char **)(a1 + 88);
  int64_t v54 = v52 - (char *)v53;
  if (v52 == (char *)v53)
  {
    unint64_t v55 = *(void *)(a1 + 96);
    uint64_t v56 = *(void *)(a1 + 48);
    if ((unint64_t)v52 >= v55)
    {
      uint64_t v61 = v54 / 88;
      unint64_t v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v55 - (void)v53) >> 3);
      if (2 * v62 <= v54 / 88 + 1) {
        uint64_t v63 = v61 + 1;
      }
      else {
        uint64_t v63 = 2 * v62;
      }
      if (v62 >= 0x1745D1745D1745DLL) {
        unint64_t v64 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v64 = v63;
      }
      long long v65 = (char *)sub_100004EE8(a1 + 96, v64);
      long long v66 = &v65[88 * v61];
      long long v68 = &v65[88 * v67];
      long long v69 = *(_OWORD *)(v56 + 16);
      *(_OWORD *)long long v66 = *(_OWORD *)v56;
      *((_OWORD *)v66 + 1) = v69;
      long long v70 = *(_OWORD *)(v56 + 32);
      long long v71 = *(_OWORD *)(v56 + 48);
      long long v72 = *(_OWORD *)(v56 + 64);
      *((void *)v66 + 10) = *(void *)(v56 + 80);
      *((_OWORD *)v66 + 3) = v71;
      *((_OWORD *)v66 + 4) = v72;
      *((_OWORD *)v66 + 2) = v70;
      uint64_t v52 = v66 + 88;
      CGFloat v74 = *(char **)(a1 + 80);
      CGFloat v73 = *(char **)(a1 + 88);
      if (v73 != v74)
      {
        do
        {
          long long v75 = *(_OWORD *)(v73 - 88);
          *(_OWORD *)(v66 - 72) = *(_OWORD *)(v73 - 72);
          *(_OWORD *)(v66 - 8_Block_object_dispose(&STACK[0x370], 8) = v75;
          long long v76 = *(_OWORD *)(v73 - 56);
          long long v77 = *(_OWORD *)(v73 - 40);
          long long v78 = *(_OWORD *)(v73 - 24);
          *((void *)v66 - 1) = *((void *)v73 - 1);
          *(_OWORD *)(v66 - 24) = v78;
          *(_OWORD *)(v66 - 40) = v77;
          *(_OWORD *)(v66 - 56) = v76;
          v66 -= 88;
          v73 -= 88;
        }
        while (v73 != v74);
        CGFloat v73 = (char *)*v127;
      }
      *(void *)(a1 + 80) = v66;
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v52;
      *(void *)(a1 + 96) = v68;
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      long long v57 = *(_OWORD *)(v56 + 16);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v56;
      *((_OWORD *)v52 + 1) = v57;
      long long v58 = *(_OWORD *)(v56 + 32);
      long long v59 = *(_OWORD *)(v56 + 48);
      long long v60 = *(_OWORD *)(v56 + 64);
      *((void *)v52 + 10) = *(void *)(v56 + 80);
      *((_OWORD *)v52 + 3) = v59;
      *((_OWORD *)v52 + 4) = v60;
      *((_OWORD *)v52 + 2) = v58;
      v52 += 88;
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v52;
    int64_t v39 = *(void *)(a1 + 112);
    long long v53 = *(double **)(a1 + 80);
  }
  double v79 = *(char **)(a1 + 176);
  unint64_t v80 = *(char **)(a1 + 184);
  if (v52 - (char *)v53 == 88
    && v80 - v79 == 8
    && (uint64_t v81 = *(void *)(a1 + 56), sub_100064084(*v53, v53[1], *(double *)(v81 - 88), *(double *)(v81 - 80))))
  {
    uint64_t v82 = *(void *)(a1 + 48);
    if (v81 - v82 >= 89)
    {
      int64_t v83 = (v81 - v82) / 0x58uLL;
      double v84 = *((double *)v52 - 9);
      int v85 = *(v52 - 8);
      if (v83 <= 2) {
        int64_t v83 = 2;
      }
      int64_t v86 = v83 - 1;
      uint64_t v87 = v82 + 104;
      do
      {
        if (v84 <= *(double *)v87) {
          double v84 = *(double *)v87;
        }
        *((double *)v52 - 9) = v84;
        if (!v85 || *(unsigned char *)(v87 + 64))
        {
          if (v85 == *(unsigned __int8 *)(v87 + 64))
          {
            double v88 = *((double *)v52 - 7);
            if (v88 <= *(double *)(v87 + 16)) {
              double v88 = *(double *)(v87 + 16);
            }
            *((double *)v52 - 7) = v88;
          }
        }
        else
        {
          int v85 = 0;
          *((void *)v52 - 7) = *(void *)(v87 + 16);
          *(v52 - _Block_object_dispose(&STACK[0x370], 8) = 0;
        }
        v87 += 88;
        --v86;
      }
      while (v86);
    }
  }
  else
  {
    if (v80 != v79)
    {
      unint64_t v129 = 0;
      uint64_t v89 = -1;
      do
      {
        unint64_t v91 = *((void *)v80 - 1);
        v80 -= 8;
        unint64_t v90 = v91;
        unint64_t v92 = (v52 - (char *)v53) / 88;
        if (v91 < *(void *)(a1 + 32) - *(void *)(a1 + 120))
        {
          unint64_t v93 = *(void *)(a1 + 72) + 5;
          BOOL v94 = v92 > v93;
          if (v92 > v93) {
            uint64_t v89 = (v52 - (char *)v53) / 88;
          }
          unint64_t v95 = v129;
          if (v94) {
            unint64_t v95 = v90;
          }
          unint64_t v129 = v95;
        }
        uint64_t v96 = *(void *)(a1 + 48) + 88 * v90;
        unint64_t v97 = *(void *)(a1 + 96);
        if ((unint64_t)v52 >= v97)
        {
          unint64_t v102 = v92 + 1;
          if (v92 + 1 > 0x2E8BA2E8BA2E8BALL) {
            sub_100004E40();
          }
          unint64_t v103 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v97 - (void)v53) >> 3);
          if (2 * v103 > v102) {
            unint64_t v102 = 2 * v103;
          }
          if (v103 >= 0x1745D1745D1745DLL) {
            unint64_t v104 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v104 = v102;
          }
          if (v104) {
            uint64_t v105 = (char *)sub_100004EE8(a1 + 96, v104);
          }
          else {
            uint64_t v105 = 0;
          }
          uint64_t v106 = &v105[88 * v92];
          long long v107 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v96;
          *((_OWORD *)v106 + 1) = v107;
          long long v108 = *(_OWORD *)(v96 + 32);
          long long v109 = *(_OWORD *)(v96 + 48);
          long long v110 = *(_OWORD *)(v96 + 64);
          *((void *)v106 + 10) = *(void *)(v96 + 80);
          *((_OWORD *)v106 + 3) = v109;
          *((_OWORD *)v106 + 4) = v110;
          *((_OWORD *)v106 + 2) = v108;
          long long v112 = *(char **)(a1 + 80);
          long long v111 = *(char **)(a1 + 88);
          long long v113 = v106;
          if (v111 != v112)
          {
            do
            {
              long long v114 = *(_OWORD *)(v111 - 88);
              *(_OWORD *)(v113 - 72) = *(_OWORD *)(v111 - 72);
              *(_OWORD *)(v113 - 8_Block_object_dispose(&STACK[0x370], 8) = v114;
              long long v115 = *(_OWORD *)(v111 - 56);
              long long v116 = *(_OWORD *)(v111 - 40);
              long long v117 = *(_OWORD *)(v111 - 24);
              *((void *)v113 - 1) = *((void *)v111 - 1);
              *(_OWORD *)(v113 - 24) = v117;
              *(_OWORD *)(v113 - 40) = v116;
              *(_OWORD *)(v113 - 56) = v115;
              v113 -= 88;
              v111 -= 88;
            }
            while (v111 != v112);
            long long v111 = (char *)*v127;
          }
          uint64_t v52 = v106 + 88;
          *(void *)(a1 + 80) = v113;
          *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v106 + 88;
          *(void *)(a1 + 96) = &v105[88 * v104];
          if (v111) {
            operator delete(v111);
          }
        }
        else
        {
          long long v98 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)uint64_t v52 = *(_OWORD *)v96;
          *((_OWORD *)v52 + 1) = v98;
          long long v99 = *(_OWORD *)(v96 + 32);
          long long v100 = *(_OWORD *)(v96 + 48);
          long long v101 = *(_OWORD *)(v96 + 64);
          *((void *)v52 + 10) = *(void *)(v96 + 80);
          *((_OWORD *)v52 + 3) = v100;
          *((_OWORD *)v52 + 4) = v101;
          *((_OWORD *)v52 + 2) = v99;
          v52 += 88;
        }
        *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v52;
        long long v53 = *(double **)(a1 + 80);
        *((double *)v52 - 2) = sub_1000653B4(v53[11 * v92 - 11], v53[11 * v92 - 10], *((double *)v52 - 11), *((double *)v52 - 10));
        if (v39 + 1 < v90)
        {
          double v118 = *((double *)v52 - 9);
          int v119 = *(v52 - 8);
          unint64_t v120 = ~v39 + v90;
          uint64_t v121 = *(void *)(a1 + 48) + 88 * v39 + 104;
          do
          {
            if (v118 <= *(double *)v121) {
              double v118 = *(double *)v121;
            }
            *((double *)v52 - 9) = v118;
            if (!v119 || *(unsigned char *)(v121 + 64))
            {
              if (v119 == *(unsigned __int8 *)(v121 + 64))
              {
                double v122 = *((double *)v52 - 7);
                if (v122 <= *(double *)(v121 + 16)) {
                  double v122 = *(double *)(v121 + 16);
                }
                *((double *)v52 - 7) = v122;
              }
            }
            else
            {
              int v119 = 0;
              *((void *)v52 - 7) = *(void *)(v121 + 16);
              *(v52 - _Block_object_dispose(&STACK[0x370], 8) = 0;
            }
            v121 += 88;
            --v120;
          }
          while (v120);
        }
        int64_t v39 = v90;
      }
      while (v80 != *v131);
      if (v89 > 0)
      {
        *(void *)(a1 + 72) = v89 + 1;
        *(void *)(a1 + 112) = v129;
      }
    }
    if (*(unsigned char *)(a1 + 16))
    {
      *(void *)(a1 + 72) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v52[-*(void *)(a1 + 80)] >> 3);
      *(void *)(a1 + 112) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
      *(unsigned char *)(a1 + 200) = 1;
    }
  }
}

void sub_10016F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10016F61C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 32) - v2 - 20;
  uint64_t v4 = v1 + 1;
  if (v1 + 1 < v3)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = (double *)(v6 + 88 * v1);
    double v8 = *v7;
    double v9 = v7[1];
    uint64_t v10 = *(void *)(a1 + 112);
    do
    {
      uint64_t v11 = (double *)(v6 + 88 * v4);
      if (sub_1000643CC(*v11, v11[1], v8, v9) > *(double *)(a1 + 136) || v4 >= v3 - 1)
      {
        uint64_t v13 = v10 - v1;
        if (v10 <= v1)
        {
          uint64_t v1 = v4;
        }
        else
        {
          uint64_t v14 = v6 + 88 * v1;
          double v16 = *(double *)(v14 + 16);
          uint64_t v15 = v14 + 16;
          double v17 = v16;
          int v18 = *(unsigned __int8 *)(v15 + 64);
          uint64_t v19 = (double *)(v15 + 16);
          uint64_t v20 = v15 + 88;
          do
          {
            if (v17 <= *(double *)v20) {
              double v17 = *(double *)v20;
            }
            *(double *)uint64_t v15 = v17;
            if (!v18 || *(unsigned char *)(v20 + 64))
            {
              if (v18 == *(unsigned __int8 *)(v20 + 64))
              {
                double v21 = *v19;
                if (*v19 <= *(double *)(v20 + 16)) {
                  double v21 = *(double *)(v20 + 16);
                }
                double *v19 = v21;
              }
            }
            else
            {
              int v18 = 0;
              double *v19 = *(double *)(v20 + 16);
              *(unsigned char *)(v15 + 64) = 0;
            }
            --v10;
            v20 += 88;
          }
          while (v1 != v10);
          uint64_t v22 = v6 + 88 * v1 + 88;
          if ((double *)v22 != v11)
          {
            uint64_t v23 = *(double **)(a1 + 56);
            int64_t v24 = (char *)v23 - (char *)v11;
            if (v23 != v11)
            {
              memmove((void *)(v6 + 88 * v1 + 88), v11, (char *)v23 - (char *)v11);
              uint64_t v2 = *(void *)(a1 + 120);
              uint64_t v6 = *(void *)(a1 + 48);
            }
            *(void *)(a1 + 56) = v22 + v24;
          }
          v2 += v13;
          *(void *)(a1 + 120) = v2;
          v3 -= v13;
          uint64_t v4 = v1;
        }
        double v25 = (double *)(v6 + 88 * v1);
        double v8 = *v25;
        double v9 = v25[1];
      }
      uint64_t v10 = v4++;
    }
    while (v4 < v3);
  }
}

void sub_10016F7A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_10016F990((void **)a1, a2 - v2);
  }
}

double sub_10016F7D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(v3 + 88 * a3);
  long long v15 = *(_OWORD *)(v3 + 88 * a2);
  long long v16 = v4;
  double v5 = 0.0;
  if (a2 + 1 < a3)
  {
    long long v7 = v15;
    long long v8 = v16;
    unint64_t v9 = ~a2 + a3;
    uint64_t v10 = 88 * a2;
    do
    {
      double v11 = sub_10016A5AC((double *)&v15, *(double *)(v3 + v10 + 88), *(double *)(v3 + v10 + 96));
      double v12 = sub_100065E00(*(double *)&v7, *((double *)&v7 + 1), *(double *)&v8, *((double *)&v8 + 1), v11);
      uint64_t v3 = *(void *)(a1 + 48);
      double v5 = v5 + sub_1000643CC(v12, v13, *(double *)(v3 + v10 + 88), *(double *)(v3 + v10 + 96));
      v10 += 88;
      --v9;
    }
    while (v9);
  }
  return v5;
}

void sub_10016F8D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016F91C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10016F960(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_10016FAB0((char **)a1, a2 - v2);
  }
}

void sub_10016F990(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      double v13 = (char *)sub_10001EAB0(v4, v12);
    }
    else {
      double v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    long long v16 = &v14[16 * a2];
    int v18 = (char *)*a1;
    double v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      double v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_10016FAB0(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_100004E40();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_10002B494(v4, v13);
      uint64_t v8 = *a1;
      long long v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v15 = &v14[8 * v11];
    long long v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    double v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_10016FBCC(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)a1 = off_1014CAA88;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = a2;
  id v4 = a3;
  *(void *)(a1 + 120) = 0;
  objc_storeWeak((id *)(a1 + 120), v4);

  return a1;
}

double sub_10016FC48(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)a1 = off_1014DB250;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = a2;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 300;
  double result = 300.0;
  *(_OWORD *)(a1 + 112) = xmmword_101175C50;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x370], 8) = 0;
  return result;
}

uint64_t sub_10016FCA8(uint64_t a1)
{
  return a1;
}

void sub_10016FCD4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 128));

  operator delete();
}

__n128 sub_10016FD20(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v6 + 16))(v6, a2, a3);
  }
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 56) = result;
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = a2;
  *(unsigned char *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_10016FDA8(uint64_t a1, unint64_t a2, double **a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (*(void *)(a1 + 88) != 1 || !*(unsigned char *)(a1 + 96)) {
    return v6;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
  if (([WeakRetained isSnappedToRuler] & 1) != 0 || a3[1] == *a3)
  {

    return v6;
  }
  int v8 = *((unsigned __int8 *)*a3 + 80);

  if (!v8) {
    return v6;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9 != -1) {
    goto LABEL_7;
  }
  int64_t v24 = *a3;
  unint64_t v25 = 0x2E8BA2E8BA2E8BA3 * (a3[1] - *a3);
  uint64_t v26 = v25 - 1;
  if (v25 - 1 > a2)
  {
    unsigned int v27 = &v24[11 * a2 + 10];
    uint64_t v9 = a2;
    while (*(unsigned char *)v27)
    {
      ++v9;
      v27 += 11;
      if (v26 == v9) {
        goto LABEL_33;
      }
    }
    *(void *)(a1 + 32) = v9;
    *(int8x16_t *)(a1 + 72) = vextq_s8(*(int8x16_t *)(v27 - 7), *(int8x16_t *)(v27 - 7), 8uLL);
    if (v9 != -1)
    {
LABEL_7:
      if ((a2 & 0x8000000000000000) != 0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB2A0);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101080588();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB2C0);
        }
        uint64_t v50 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v50, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        uint64_t v51 = +[NSString stringWithUTF8String:"virtual NSUInteger CRLPKEstimatedAltitudeAndAzimuthFilter::copyUpdatedRangeFromIndex(NSUInteger, std::vector<CRLPKInputPoint> *)"];
        uint64_t v52 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEstimatedAltitudeAndAzimuthFilter.h"];
        +[CRLAssertionHandler handleFailureInFunction:v51 file:v52 lineNumber:169 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];
      }
      else
      {
        unint64_t v10 = v9 - a2;
        if (v9 > (uint64_t)a2)
        {
          double v11 = **a3;
          double v12 = (*a3)[1];
          uint64_t v13 = (uint64_t)(*a3 + 11);
          double v14 = 0.0;
          uint64_t v15 = v9;
          do
          {
            double v16 = *(double *)v13;
            double v17 = *(double *)(v13 + 8);
            double v18 = sub_1000653B4(*(double *)v13, v17, v11, v12);
            *(double *)(v13 + 72) = v18;
            double v14 = v14 + v18;
            v13 += 88;
            double v12 = v17;
            double v11 = v16;
            --v15;
          }
          while (v15);
          if (v14 >= *(double *)(a1 + 112))
          {
            uint64_t v28 = *(void *)(a1 + 40);
            double v29 = *a3;
            if (v28 == -1)
            {
              uint64_t v28 = sub_1001702D8(a3, v9, *(void *)(a1 + 48), *(double *)(a1 + 120));
              *(void *)(a1 + 40) = v28;
              *(int8x16_t *)(a1 + 56) = vextq_s8(*(int8x16_t *)&v29[11 * v28 + 3], *(int8x16_t *)&v29[11 * v28 + 3], 8uLL);
            }
            if (v28 + 1 < v9)
            {
              uint64_t v30 = ~v28 + v9;
              double v31 = &v29[11 * v28 + 20];
              double v32 = 0.0;
              do
              {
                double v33 = *v31;
                v31 += 11;
                double v32 = v32 + v33;
                --v30;
              }
              while (v30);
              if (v28 + 1 < v9)
              {
                float64x2_t v34 = *(float64x2_t *)(a1 + 56);
                float64x2_t v35 = *(float64x2_t *)(a1 + 72);
                uint64_t v36 = ~v28 + v9;
                long long v37 = &v29[11 * v28 + 20];
                double v38 = 0.0;
                do
                {
                  double v38 = v38 + *v37;
                  int8x16_t v39 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v35, v38 / v32), v34, 1.0 - v38 / v32);
                  *((int8x16_t *)v37 - 3) = vextq_s8(v39, v39, 8uLL);
                  v37 += 11;
                  --v36;
                }
                while (v36);
              }
            }
            uint64_t v22 = (char *)a3[1] - (char *)v29;
          }
          else
          {
            uint64_t v19 = *a3;
            uint64_t v20 = &(*a3)[11 * v9 + 3];
            double v21 = &(*a3)[11 * a2 + 3];
            do
            {
              *(_OWORD *)double v21 = *(_OWORD *)v20;
              v21 += 11;
              --v10;
            }
            while (v10);
            uint64_t v22 = (char *)a3[1] - (char *)v19;
          }
          uint64_t v40 = 0x2E8BA2E8BA2E8BA3 * (v22 >> 3);
          goto LABEL_39;
        }
      }
      return v6;
    }
  }
LABEL_33:
  if (v25 <= *(void *)(a1 + 104)) {
    return 0;
  }
  uint64_t v41 = *(void *)(a1 + 48);
  if (v41 != -1)
  {
    uint64_t v42 = sub_1001702D8(a3, v25 - 1, 0, *(double *)(a1 + 120) * 1.25);
    if (v41 <= v42) {
      uint64_t v40 = v42;
    }
    else {
      uint64_t v40 = v41;
    }
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = v40;
LABEL_39:
    if (v40 >= v6) {
      return v6;
    }
    else {
      return v40;
    }
  }
  double v43 = 0.0;
  if (v25 >= 2)
  {
    double v44 = *v24;
    double v45 = v24[1];
    unint64_t v46 = v24 + 12;
    unint64_t v47 = v25 - 1;
    do
    {
      double v48 = *(v46 - 1);
      double v49 = *v46;
      double v43 = v43 + sub_1000653B4(v48, *v46, v44, v45);
      v46 += 11;
      double v45 = v49;
      double v44 = v48;
      --v47;
    }
    while (v47);
  }
  if (v43 <= *(double *)(a1 + 112) * 1.25) {
    return 0;
  }
  uint64_t result = sub_1001702D8(a3, v26, 0, *(double *)(a1 + 120) * 1.25);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = result;
  if (result >= v6) {
    return v6;
  }
  return result;
}

void sub_10017029C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001702D8(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a3 + 1;
  uint64_t v9 = 88 * a2 + 8;
  double v10 = 0.0;
  do
  {
    uint64_t result = -1;
    if (v6 < 1) {
      break;
    }
    if (v6 < a3) {
      break;
    }
    double v12 = sub_1000653B4(*(double *)(*a1 + v9 - 8), *(double *)(*a1 + v9), *(double *)(*a1 + v9 - 96), *(double *)(*a1 + v9 - 88));
    uint64_t result = v6 - 1;
    if (v6 == 1) {
      break;
    }
    v9 -= 88;
    double v10 = v10 + v12;
  }
  while (v10 <= a4 && v8 != v6--);
  return result;
}

void sub_100170378(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001703BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100170404()
{
}

uint64_t sub_100170418(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)result + 16))(result, a2, a3);
  }
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = a2 == 0;
  return result;
}

uint64_t sub_100170490(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32) + a2);
  if (!*(unsigned char *)(a1 + 40)) {
    return (v5 - *(void *)(a1 + 32)) & ~((v5 - *(void *)(a1 + 32)) >> 63);
  }
  sub_100170564(a1, a3);
  return 0;
}

uint64_t sub_10017050C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  return result;
}

void sub_100170564(uint64_t a1, void *a2)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v2 = a2[1];
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v2 - *a2) >> 3)) >= 3 && *(unsigned char *)(a1 + 40))
  {
    int v6 = -1;
    unint64_t v7 = 1;
    double v8 = 0.0;
    uint64_t v9 = 160;
    do
    {
      double v8 = v8 + *(double *)&v3[v9];
      if (v8 / *(double *)(a1 + 24) > 6.0 && v6 == -1)
      {
        if (v7 >> 31)
        {
          unsigned int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014DB340);
          }
          log = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            unsigned int v34 = v12;
            __int16 v35 = 2082;
            uint64_t v36 = "void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)";
            __int16 v37 = 2082;
            double v38 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h";
            __int16 v39 = 1024;
            int v40 = 115;
            _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
          }
          unsigned int v27 = v12;
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014DB360);
          }
          uint64_t v13 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v15 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = 67109378;
            unsigned int v34 = v27;
            __int16 v35 = 2114;
            uint64_t v36 = (const char *)v15;
            uint64_t v28 = (void *)v15;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          os_log_t logb = +[NSString stringWithUTF8String:"void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)"];
          double v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h"];
          +[CRLAssertionHandler handleFailureInFunction:logb file:v14 lineNumber:115 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

          unint64_t v3 = (char *)*a2;
          uint64_t v2 = a2[1];
          int v6 = 0x7FFFFFFF;
        }
        else
        {
          int v6 = v7;
        }
      }
      ++v7;
      unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((v2 - (uint64_t)v3) >> 3);
      v9 += 88;
    }
    while (v7 < v11);
    if (v8 / *(double *)(a1 + 24) >= 24.0 && v6 != -1)
    {
      if (v11 >> 31)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB380);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101080610();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB3A0);
        }
        os_log_t loga = off_10166B4A0;
        if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        os_log_t logc = +[NSString stringWithUTF8String:"void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)"];
        uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h"];
        +[CRLAssertionHandler handleFailureInFunction:logc file:v26 lineNumber:132 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

        int v17 = 2147483645;
      }
      else
      {
        int v17 = v11 - 2;
      }
      if (v6 < v17)
      {
        *(unsigned char *)(a1 + 40) = 0;
        double v18 = (char *)*a2;
        if (*(double *)(*a2 + 88 * v6 + 48) - *(double *)(*a2 + 48) <= 0.1)
        {
          uint64_t v19 = v6;
          uint64_t v20 = 88 * v6;
          while (v19-- >= 1)
          {
            long double v22 = sub_100170C08((double *)&v18[v20 - 88], (double *)&v18[v20], (double *)&v18[v20 + 88]);
            v20 -= 88;
            if (v22 < 150.0)
            {
              *(void *)(a1 + 32) = v19 + 1;
              uint64_t v23 = (char *)a2[1];
              uint64_t v24 = v23 - v18 - v20 - 88;
              unint64_t v25 = &v18[v20 + 88];
              if (v25 != v23) {
                memmove(v18, v25, v23 - v18 - v20 - 88);
              }
              a2[1] = &v18[v24];
              return;
            }
          }
        }
      }
    }
  }
}

void sub_100170AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100170AF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100170B3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100170B80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100170BC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

long double sub_100170C08(double *a1, double *a2, double *a3)
{
  double v4 = *a2;
  double v5 = sub_100064680(*a1, a1[1], *a2);
  double v7 = v6;
  double v8 = sub_100064680(*a3, a3[1], v4);
  double v10 = v9;
  double v11 = sub_100065398(v5, v7);
  double v12 = sub_100065398(v8, v10);
  double v13 = sub_10006468C(v5, v7, v8, v10) / (v11 * v12);
  if (v13 < -1.0) {
    double v13 = -1.0;
  }
  if (v13 > 1.0) {
    double v13 = 1.0;
  }
  return acos(v13) * 57.2957795;
}

void sub_100170CDC()
{
}

uint64_t sub_100170CF0(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)result + 16))(result, a2, a3);
  }
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 40) = a2 == 0;
  return result;
}

uint64_t sub_100170D6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a2 - 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v7 = v6;
  if (!*(unsigned char *)(a1 + 40))
  {
    int64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = a3[1] - *a3;
    if (v9 < 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DB420);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101080698();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DB440);
      }
      double v14 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v15 = +[NSString stringWithUTF8String:"virtual NSUInteger CRLPKEndHookFilter::copyUpdatedRangeFromIndex(NSUInteger, std::vector<CRLPKInputPoint> *)"];
      double v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEndHookFilter.h"];
      +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:58 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v10 = v9 / 0x58uLL;
    }
    if (v8 < (uint64_t)(v10 + v5))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11 > v5) {
        sub_10000453C((uint64_t)a3, v11 - v5);
      }
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    sub_10017108C(a1, a3);
    *(void *)(a1 + 32) = v5 + 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
LABEL_9:
    if (v7 >= *(void *)(a1 + 32)) {
      return *(void *)(a1 + 32);
    }
    else {
      return v7;
    }
  }
  uint64_t v13 = 8;
  if (v6 > 8) {
    uint64_t v13 = v6;
  }
  return v13 - 8;
}

void sub_100171008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100171030(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

void sub_10017108C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * (v3 >> 3);
  if (v4 >= 3)
  {
    double v6 = *(double *)(a1 + 24);
    uint64_t v7 = (double *)(v2 + 160);
    double v8 = 0.0;
    uint64_t v9 = 2;
    do
    {
      double v10 = *v7;
      v7 += 11;
      double v8 = v8 + v10;
    }
    while (v8 / v6 < 24.0 && v4 != v9++);
    if (v8 / v6 >= 24.0)
    {
      unint64_t v12 = v4 - 1;
      uint64_t v13 = v2 + 8 * (v3 >> 3);
      double v14 = (double *)(v13 - 40);
      uint64_t v15 = 2;
      if ((uint64_t)(v4 - 2) < 2) {
        uint64_t v15 = v4 - 2;
      }
      double v16 = (double *)(v13 - 128);
      double v17 = 0.0;
      uint64_t v18 = v4 - 1;
      while (--v18 >= 3)
      {
        if (*v14 - *v16 > 0.1) {
          return;
        }
        double v17 = v17 + v16[14];
        v16 -= 11;
        if (v17 / v6 > 6.0) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = v15;
      if (v15 < 1) {
        return;
      }
LABEL_17:
      if (v18 <= (uint64_t)(v4 - 2)) {
        unint64_t v19 = v4 - 2;
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v20 = (double *)(v2 + 88 * v18);
      while (v19 != v18)
      {
        ++v18;
        double v21 = v20 + 11;
        long double v22 = sub_100170C08(v20 + 11, v20, v20 - 11);
        uint64_t v20 = v21;
        if (v22 < 150.0)
        {
          unint64_t v12 = v18 - 1;
          break;
        }
      }
      if (v3 < 0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB460);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101080720();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DB480);
        }
        uint64_t v26 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        unsigned int v27 = +[NSString stringWithUTF8String:"void CRLPKEndHookFilter::fixEndHook(std::vector<CRLPKInputPoint> *)"];
        uint64_t v28 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEndHookFilter.h"];
        +[CRLAssertionHandler handleFailureInFunction:v27 file:v28 lineNumber:151 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

        unint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v12 != v4 - 1)
      {
        uint64_t v23 = a2[1];
        uint64_t v24 = 0x2E8BA2E8BA2E8BA3 * ((v23 - *a2) >> 3);
        if ((uint64_t)(v24 + ~v12) >= 1)
        {
          unint64_t v25 = v24 - v12 - 2;
          if (v25 >= 7) {
            unint64_t v25 = 7;
          }
          a2[1] = v23 - 88 * v25 - 88;
        }
      }
    }
  }
}

void sub_1001713C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001713E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017142C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100171470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001714B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001714FC()
{
}

uint64_t sub_100171510(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0x3FA99999A0000000;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

unint64_t sub_100171584(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v11 = v9 - *a3;
  if (v9 != *a3)
  {
    uint64_t v12 = (v6 - v7) / 88;
    uint64_t v13 = v11 / 88;
    if (v12 >= v11 / 88)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      double v15 = *(double *)(a1 + 32);
      uint64_t v16 = v10 + 88 * v12;
      double v17 = (double *)(v16 + 72);
      uint64_t v18 = (double *)(v16 + 160);
      uint64_t v19 = (v6 - v7) / 88;
      do
      {
        double v20 = *(double *)(v10 + 88 * v19 + 48);
        double v21 = v20 - v15;
        if (v19 < 0)
        {
          double v23 = 0.0;
        }
        else if (v19)
        {
          uint64_t v22 = 0;
          double v23 = 0.0;
          uint64_t v24 = v17;
          while (1)
          {
            double v25 = *(v24 - 14);
            double v26 = *v24;
            if (v25 <= v21) {
              break;
            }
            double v23 = v23 + v26;
            ++v22;
            v24 -= 11;
            if (v19 == v22) {
              goto LABEL_12;
            }
          }
          double v23 = v23 + v26 * (*(v24 - 3) - v21) / (*(v24 - 3) - v25);
        }
        else
        {
          double v23 = 0.0;
LABEL_12:
          double v21 = *(double *)(v10 + 48);
        }
        if (v19 == v13 - 1)
        {
LABEL_18:
          double v27 = *(double *)(v10 + 88 * (v13 - 1) + 48);
        }
        else
        {
          double v27 = v20 + v15;
          uint64_t v28 = v13 - 1;
          double v29 = v18;
          while (1)
          {
            double v30 = *(v29 - 3);
            double v31 = *v29;
            if (v30 >= v27) {
              break;
            }
            double v23 = v23 + v31;
            v29 += 11;
            if (v19 == --v28) {
              goto LABEL_18;
            }
          }
          double v23 = v23 + v31 * (v27 - *(v29 - 14)) / (v30 - *(v29 - 14));
          uint64_t v14 = v19;
        }
        double v32 = v27 - v21;
        double v33 = 0.0;
        if (v32 > 0.0) {
          double v33 = v23 / v32 / *(double *)(a1 + 24);
        }
        *(double *)(v10 + 88 * v19++ + 40) = v33;
        v17 += 11;
        v18 += 11;
      }
      while (v19 != v13);
    }
    if (!*(unsigned char *)(a1 + 16) && !*(unsigned char *)(a1 + 40))
    {
      unint64_t v34 = v12 - a2 + v14;
      if (result >= v34) {
        return v34;
      }
    }
  }
  return result;
}

uint64_t sub_100171780(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)a1 = off_1014DB510;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = a2;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  id v4 = a3;
  *(void *)(a1 + 104) = 0;
  objc_storeWeak((id *)(a1 + 104), v4);

  return a1;
}

uint64_t sub_1001717FC(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014CABC8;
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100171854(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014CABC8;
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1001718CC(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)result + 16))(result, a2, a3);
  }
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 96) = a2;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_10017193C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 72) = *(void *)(a1 + 32);
  return result;
}

uint64_t sub_10017199C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = 0;
  return result;
}

uint64_t sub_100171A04(uint64_t a1)
{
  return a1 + 48;
}

void sub_100171A0C(uint64_t a1)
{
  if (*(void *)(a1 + 56) == *(void *)(a1 + 48)) {
    return;
  }
  if (*(void *)(a1 + 96) == 1)
  {
    unsigned int v2 = 0;
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    unsigned int v2 = [WeakRetained isSnappedToRuler] ^ 1;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    double v4 = sub_100064680(*(double *)(*(void *)(a1 + 56) - 88), *(double *)(*(void *)(a1 + 56) - 80), **(double **)(a1 + 48));
    double v6 = v5;
    *(long double *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = atan2(-v4, v5);
    double v7 = sub_1000653A8(v4, v6);
    char v8 = 1;
    if (v7 / (*(double *)(a1 + 24) * *(double *)(a1 + 24)) <= 400.0) {
      goto LABEL_9;
    }
    *(unsigned char *)(a1 + 80) = 1;
  }
  char v8 = 0;
LABEL_9:
  if (v2)
  {
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 56) - v10) >> 3);
    BOOL v12 = v11 <= v9;
    uint64_t v13 = v11 - v9;
    if (!v12)
    {
      uint64_t v14 = *(void *)(a1 + 88);
      double v15 = (void *)(v10 + 88 * v9 + 24);
      do
      {
        void *v15 = v14;
        v15 += 11;
        --v13;
      }
      while (v13);
    }
  }
  if ((v8 & 1) == 0) {
    *(void *)(a1 + 72) = *(void *)(a1 + 32);
  }
}

void sub_100171B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100171B3C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014DB678;
  unsigned int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014DB6E0;
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100171BC0(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014DB678;
  unsigned int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x370], 8) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014DB6E0;
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_100171C64(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_100171CC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_100171D18()
{
}

uint64_t sub_100171DA0(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 56))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  sub_100172254(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 80 * a2), *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 + 8) - (*(void *)v6 + 80 * a2)) >> 4));
  return a1[9];
}

void *sub_100171E4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_100171EDC(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_10000453C(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

uint64_t sub_100171F74(uint64_t a1)
{
  return a1 + 80;
}

void sub_100171F7C(uint64_t a1)
{
  sub_10016BE28(a1 + 80, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3))
  {
    uint64_t v3 = 88 * v2;
    uint64_t v4 = 80 * v2;
    do
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
      uint64_t v6 = WeakRetained;
      uint64_t v7 = *(void *)(a1 + 48) + v3;
      long long v8 = *(_OWORD *)(v7 + 16);
      v16[0] = *(_OWORD *)v7;
      v16[1] = v8;
      long long v10 = *(_OWORD *)(v7 + 48);
      long long v9 = *(_OWORD *)(v7 + 64);
      long long v11 = *(_OWORD *)(v7 + 32);
      uint64_t v17 = *(void *)(v7 + 80);
      v16[3] = v10;
      v16[4] = v9;
      v16[2] = v11;
      if (WeakRetained)
      {
        [WeakRetained outputCurrentStrokePoint:v16];
      }
      else
      {
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v18 = 0u;
      }
      BOOL v12 = (_OWORD *)(*(void *)(a1 + 80) + v4);
      *BOOL v12 = v18;
      long long v13 = v19;
      long long v14 = v20;
      long long v15 = v22;
      void v12[3] = v21;
      v12[4] = v15;
      v12[1] = v13;
      void v12[2] = v14;

      ++v2;
      v3 += 88;
      v4 += 80;
    }
    while (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
  }
  *(void *)(a1 + 72) = *(void *)(a1 + 32);
}

void sub_1001720C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001720D0()
{
  return 0;
}

void *sub_1001720D8(void *a1)
{
  *a1 = off_1014DB678;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB6E0;
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100172154(void *a1)
{
  *a1 = off_1014DB678;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB6E0;
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1001721F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

char *sub_100172254(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long double v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x333333333333333) {
      sub_100004E40();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x199999999999999) {
      unint64_t v18 = 0x333333333333333;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v41 = v9;
    if (v18) {
      long long v19 = (char *)sub_1001725F0(v9, v18);
    }
    else {
      long long v19 = 0;
    }
    double v30 = &v19[80 * v15];
    __p = v19;
    double v38 = v30;
    int v40 = &v19[80 * v18];
    double v31 = &v30[80 * a5];
    uint64_t v32 = 80 * a5;
    do
    {
      *(_OWORD *)double v30 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      long long v34 = *((_OWORD *)v7 + 2);
      long long v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    __int16 v39 = v31;
    long double v5 = (char *)sub_100172508((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38) {
      __int16 v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    long long v21 = &__src[80 * a5];
    double v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[80 * a5];
    double v25 = &v23[-80 * a5];
    double v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      double v26 = v23;
      do
      {
        *(_OWORD *)double v26 = *(_OWORD *)v25;
        long long v27 = *((_OWORD *)v25 + 1);
        long long v28 = *((_OWORD *)v25 + 2);
        long long v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v26;
    if (v23 != v24) {
      memmove(&v5[80 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  }
  double v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1001724BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100172508(void **a1, uint64_t a2, char *__src)
{
  long double v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 80) = *((_OWORD *)v8 - 5);
      long long v10 = *((_OWORD *)v8 - 4);
      long long v11 = *((_OWORD *)v8 - 3);
      long long v12 = *((_OWORD *)v8 - 1);
      uint64_t v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 4_Block_object_dispose(&STACK[0x370], 8) = v11;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v7;
  long long v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 16);
  int64_t v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v14 + v15;
  unint64_t v16 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x370], 8) = v16;
  uint64_t v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v17;
  unint64_t v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v18;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_1001725F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_100004F34();
  }
  return operator new(80 * a2);
}

void sub_10017263C()
{
}

uint64_t sub_100172650(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)result + 16))(result, a2, a3);
  }
  double v7 = 0.0;
  if (!a2) {
    double v7 = 1.0;
  }
  *(void *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1001726CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_100172720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v7 = *(void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (!a2 && *(void *)(a3 + 8) != *(void *)a3) {
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = **(void **)a3;
  }
  double v9 = *(double *)(a1 + 32);
  if (v9 > 0.0)
  {
    uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
    if (v10)
    {
      uint64_t v11 = (v6 - (uint64_t)v7) / 80;
      uint64_t v12 = v10 / 80;
      BOOL v13 = v12 <= v11;
      uint64_t v14 = v12 - v11;
      if (!v13)
      {
        double v15 = *(double *)(a1 + 48);
        unint64_t v16 = (double *)(*(void *)a3 + 80 * v11 + 72);
        do
        {
          double v17 = *(v16 - 9) - v15;
          if (v17 < v9) {
            *unint64_t v16 = *v16 * (1.0 - *(double *)(a1 + 40) * (1.0 - v17 / v9));
          }
          v16 += 10;
          --v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t sub_100172834(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_100172888()
{
}

uint64_t sub_10017289C(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)result + 16))(result, a2, a3);
  }
  double v7 = 0.0;
  if (!a2) {
    double v7 = 1.0;
  }
  *(void *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v7;
  return result;
}

uint64_t sub_100172918(uint64_t a1, uint64_t a2, char **a3)
{
  double v7 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v9 = v8;
  if (!a2 && a3[1] != *a3) {
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = *(void *)*a3;
  }
  double v10 = *(double *)(a1 + 32);
  if (v10 > 0.0)
  {
    BOOL v13 = a3;
    uint64_t v12 = *a3;
    uint64_t v11 = v13[1];
    int64_t v14 = v11 - v12;
    if (v11 != v12)
    {
      if (*(double *)(a1 + 56) <= *((double *)v11 - 10)) {
        double v15 = *((double *)v11 - 10);
      }
      else {
        double v15 = *(double *)(a1 + 56);
      }
      *(double *)(a1 + 56) = v15;
      if (*(unsigned char *)(a1 + 16))
      {
        if (v10 > 0.0 && v15 - *(double *)(a1 + 48) > v10 + v10)
        {
          uint64_t v16 = v14 / 80;
          uint64_t v17 = (uint64_t)&v12[80 * (v14 / 80) + 16];
          uint64_t v18 = v16;
          while (--v18)
          {
            long long v19 = (double *)(v17 - 80);
            double v20 = v15 - *(double *)(v17 - 96);
            v17 -= 80;
            if (v20 > v10)
            {
              double v21 = *(v19 - 1);
              double v22 = *v19;
              goto LABEL_22;
            }
          }
          double v22 = 0.0;
          double v21 = 0.0;
LABEL_22:
          if (sub_1000643CC(v21, v22, *((double *)v11 - 9), *((double *)v11 - 8)) > 225.0)
          {
            uint64_t v24 = v16 - 1;
            if (v16 != 1)
            {
              double v25 = (double *)&v12[80 * v16 - 8];
              do
              {
                double v26 = v15 - *(v25 - 9);
                if (v26 >= v10) {
                  break;
                }
                double *v25 = *v25 * (1.0 - *(double *)(a1 + 40) * (1.0 - v26 / v10));
                v25 -= 10;
                --v24;
              }
              while (v24);
            }
          }
        }
      }
      else if (v8)
      {
        double v23 = (double *)&v12[80 * (v8 + (v6 - v7) / 80 - a2)];
        do
        {
          if (*v23 <= v15 - v10) {
            break;
          }
          v23 -= 10;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v9;
}

void *sub_100172AF8(void *a1)
{
  *a1 = off_1014DB8F0;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB958;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100172B74(void *a1)
{
  *a1 = off_1014DB8F0;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB958;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_100172C10(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_100172C70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_100172CC4()
{
}

uint64_t sub_100172D4C(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 56))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  sub_1001731A8(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 24 * a2), *(char **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 8) - (*(void *)v6 + 24 * a2)) >> 3));
  return a1[9];
}

void *sub_100172DF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_100172E88(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_10016BE28(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

uint64_t sub_100172F20(uint64_t a1)
{
  return a1 + 80;
}

void sub_100172F28(void *a1)
{
  sub_100173444((uint64_t)(a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - a1[6]) >> 4));
  unint64_t v2 = a1[9];
  unint64_t v3 = (double *)a1[6];
  if (v2 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - (void)v3) >> 4))
  {
    uint64_t v4 = 10 * v2;
    uint64_t v5 = 24 * v2;
    do
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)&v3[v4];
      long long v6 = *(_OWORD *)&v3[v4 + 8];
      long long v8 = *(_OWORD *)&v3[v4 + 2];
      long long v7 = *(_OWORD *)&v3[v4 + 4];
      *(_OWORD *)&v11[6] = *(_OWORD *)&v3[v4 + 6];
      *(_OWORD *)&v11[8] = v6;
      *(_OWORD *)&void v11[2] = v8;
      *(_OWORD *)&v11[4] = v7;
      +[CRLPKStrokePoint compressStrokePoint:v11 withTimestamp:*v3];
      uint64_t v9 = a1[10] + v5;
      long long v10 = *(_OWORD *)&v11[11];
      *(void *)(v9 + 16) = v11[13];
      *(_OWORD *)uint64_t v9 = v10;
      ++v2;
      unint64_t v3 = (double *)a1[6];
      v4 += 10;
      v5 += 24;
    }
    while (v2 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - (void)v3) >> 4));
  }
  a1[9] = a1[4];
}

uint64_t sub_100173024()
{
  return 0;
}

void *sub_10017302C(void *a1)
{
  *a1 = off_1014DB8F0;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB958;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1001730A8(void *a1)
{
  *a1 = off_1014DB8F0;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DB958;
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_100173148(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

char *sub_1001731A8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    BOOL v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v37 = v9;
    if (v18) {
      long long v19 = (char *)sub_100046F5C(v9, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v28 = &v19[24 * v15];
    __p = v19;
    long long v34 = v28;
    uint64_t v36 = &v19[24 * v18];
    long long v29 = &v28[24 * a5];
    uint64_t v30 = 24 * a5;
    do
    {
      long long v31 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *((void *)v7 + 2);
      *(_OWORD *)long long v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    long long v35 = v29;
    uint64_t v5 = (char *)sub_1000841F4((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      long long v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    double v21 = &__src[24 * a5];
    double v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[24 * a5];
    double v25 = &v23[-24 * a5];
    double v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      double v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((void *)v26 + 2) = *((void *)v25 + 2);
        *(_OWORD *)double v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v26;
    if (v23 != v24) {
      memmove(&v5[24 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  double v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  double v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1001733F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100173444(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100173480((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_100173480(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_100046F5C(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[24 * v8];
    unint64_t v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    long long v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_100173614(void *a1)
{
  *a1 = off_1014DBA80;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DBAE8;
  BOOL v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100173690(void *a1)
{
  *a1 = off_1014DBA80;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DBAE8;
  BOOL v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_10017372C(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_10017378C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_1001737E0(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 56))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  sub_100172254(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 80 * a2), *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 + 8) - (*(void *)v6 + 80 * a2)) >> 4));
  return a1[9];
}

void *sub_10017388C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_10017391C(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_100173444(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  BOOL v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

uint64_t sub_1001739B4(uint64_t a1)
{
  return a1 + 80;
}

void sub_1001739BC(uint64_t a1)
{
  if (*(double *)(a1 + 104) <= 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DBB38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010807A8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DBB58);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v3 = +[NSString stringWithUTF8String:"virtual void CRLPKDecompressionFilter::run()"];
    uint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCompressionFilter.h"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:34 isFatal:0 description:"Reference timestamp is needed to decompress points."];
  }
  sub_10016BE28(a1 + 80, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
  unint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v5 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v6) >> 3))
  {
    uint64_t v7 = 24 * v5;
    uint64_t v8 = 80 * v5;
    do
    {
      unint64_t v9 = (long long *)(v6 + v7);
      uint64_t v10 = *((void *)v9 + 2);
      long long v15 = *v9;
      uint64_t v16 = v10;
      +[CRLPKStrokePoint decompressStrokePoint:&v15 withTimestamp:*(double *)(a1 + 104)];
      unint64_t v11 = (_OWORD *)(*(void *)(a1 + 80) + v8);
      *unint64_t v11 = v17;
      long long v12 = v18;
      long long v13 = v19;
      long long v14 = v21;
      void v11[3] = v20;
      v11[4] = v14;
      v11[1] = v12;
      void v11[2] = v13;
      ++v5;
      uint64_t v6 = *(void *)(a1 + 48);
      v7 += 24;
      v8 += 80;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v6) >> 3));
  }
  *(void *)(a1 + 72) = *(void *)(a1 + 32);
}

void sub_100173C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100173C50()
{
  return 0;
}

void *sub_100173C58(void *a1)
{
  *a1 = off_1014DBA80;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DBAE8;
  BOOL v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100173CD4(void *a1)
{
  *a1 = off_1014DBA80;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014DBAE8;
  BOOL v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_100173D74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_100173DD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100173E18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100173E5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100173EA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100173EE4(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333) {
      sub_100004E40();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)sub_1001725F0(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    long long v14 = &v12[80 * v8];
    long long v15 = &v12[80 * v11];
    size_t v16 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v14, v16);
    long long v17 = &v14[v16];
    long long v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 5) = *((_OWORD *)v18 - 5);
        long long v20 = *((_OWORD *)v18 - 4);
        long long v21 = *((_OWORD *)v18 - 3);
        long long v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        v14 -= 80;
        v18 -= 80;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_100174080(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1001740FC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001740E0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001740FC(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_100004E40();
  }
  uint64_t result = (char *)sub_100004EE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *sub_100174154(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10001EBF4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001741B4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x370], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

NSSet *__cdecl sub_100174718(id a1, NSDictionary *a2, NSSet *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = a3;
  uint64_t v6 = +[NSMutableSet set];
  uint64_t v7 = +[NSMutableSet set];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  size_t v8 = v5;
  id v9 = [(NSSet *)v8 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        size_t v13 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        uint64_t v14 = objc_opt_class();
        long long v15 = sub_1002469D0(v14, v13);
        size_t v16 = v15;
        if (v15 && ([v15 locked] & 1) == 0)
        {
          long long v17 = v6;
          long long v18 = v16;
        }
        else
        {
          long long v17 = (void *)v7;
          long long v18 = v13;
        }
        [v17 addObject:v18];
      }
      id v10 = [(NSSet *)v8 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v10);
  }
  long long v33 = v8;
  long long v34 = (void *)v7;

  long long v19 = +[NSMutableSet set];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v20 = v6;
  id v21 = [v20 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v36;
    do
    {
      for (uint64_t j = 0; j != v22; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v36 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void *)(*((void *)&v35 + 1) + 8 * (void)j);
        uint64_t v26 = objc_opt_class();
        long long v27 = [(NSDictionary *)v4 objectForKey:v25];
        long long v28 = sub_1002469D0(v26, v27);

        if (v28) {
          [v19 unionSet:v28];
        }
      }
      id v22 = [v20 countByEnumeratingWithState:&v35 objects:v43 count:16];
    }
    while (v22);
  }

  if ([v19 count])
  {
    long long v29 = +[NSMutableSet set];
    uint64_t v30 = v34;
    [v29 unionSet:v34];
    [v29 unionSet:v19];
    id v31 = [v29 copy];
  }
  else
  {
    id v31 = 0;
    uint64_t v30 = v34;
  }

  return (NSSet *)v31;
}

void sub_100174F78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100174FBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001752F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017533C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001757C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100175808(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100175FD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176018(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017605C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001760A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176878(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001768BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176900(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176BE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176C28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176DD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100176E14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100177288(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001772CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100177310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100177354(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001785B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001785FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100179C34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100179C78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017A2CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017A310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017A9C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017AA04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

UIMenu *sub_10017AD6C(uint64_t a1)
{
  return +[UIMenu menuWithTitle:&stru_101538650 children:*(void *)(a1 + 32)];
}

void sub_10017B21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10017B234(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 crl_enumerateBoardItemNestedRecursivelyUsingBlock:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a4 = 1;
  }
  return result;
}

void sub_10017B900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017B918(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = (objc_class *)objc_opt_class();
  size_t v8 = [v6 objectForKeyedSubscript:@"text"];

  id v9 = sub_10024715C(v7, v8);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10017BA00;
  v10[3] = &unk_1014DC030;
  v10[4] = *(void *)(a1 + 32);
  void v10[5] = a4;
  [v9 enumerateObjectsUsingBlock:v10];
}

void sub_10017BA00(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = (objc_class *)objc_opt_class();
  size_t v8 = [v6 objectForKeyedSubscript:@"hasText"];

  id v9 = sub_10024715C(v7, v8);
  LODWORD(v6) = [v9 BOOLValue];

  if (v6)
  {
    id v10 = *(unsigned char **)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    unsigned char *v10 = 1;
    *a4 = 1;
  }
}

void sub_10017BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017BF50(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = (objc_class *)objc_opt_class();
  size_t v8 = [v6 objectForKeyedSubscript:@"class"];

  sub_10024715C(v7, v8);
  aClassName = (NSString *)objc_claimAutoreleasedReturnValue();

  id v9 = aClassName;
  if (aClassName)
  {
    Class v10 = NSClassFromString(aClassName);
    id v9 = aClassName;
    if (v10)
    {
      unsigned __int8 v11 = [(objc_class *)v10 isSubclassOfClass:objc_opt_class()];
      id v9 = aClassName;
      if ((v11 & 1) == 0)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
        *a4 = 1;
      }
    }
  }
}

void sub_10017C10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017C124(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v14 = a2;
  id v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = [v14 objectForKeyedSubscript:@"class"];
  sub_10024715C(v6, v7);
  size_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    Class v9 = NSClassFromString(v8);
    if (v9)
    {
      Class v10 = v9;
      if ([(objc_class *)v9 isSubclassOfClass:objc_opt_class()])
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        *a4 = 1;
      }
      else if ([(objc_class *)v10 isSubclassOfClass:objc_opt_class()])
      {
        unsigned __int8 v11 = (objc_class *)objc_opt_class();
        long long v12 = [v14 objectForKeyedSubscript:@"containsFreehandDrawing"];
        size_t v13 = sub_10024715C(v11, v12);

        if ([v13 BOOLValue])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          *a4 = 1;
        }
      }
    }
  }
}

BOOL sub_10017C784(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  BOOL v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = [(NSDictionary *)v2 objectForKeyedSubscript:@"text"];
  unint64_t v5 = sub_10024715C(v3, v4);

  id v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v22;
    while (2)
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v5);
        }
        Class v10 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        unsigned __int8 v11 = (objc_class *)objc_opt_class();
        long long v12 = [v10 objectForKeyedSubscript:@"hasVisibleText"];
        size_t v13 = sub_10024715C(v11, v12);
        unsigned int v14 = [v13 BOOLValue];

        if (v14)
        {
          long long v15 = (objc_class *)objc_opt_class();
          size_t v16 = [v10 objectForKeyedSubscript:@"hasText"];
          long long v17 = sub_10024715C(v15, v16);
          unsigned __int8 v18 = [v17 BOOLValue];

          if (v18)
          {
            BOOL v19 = 1;
            goto LABEL_13;
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v7) {
        continue;
      }
      break;
    }
    BOOL v19 = 0;
  }
  else
  {
    BOOL v19 = 0;
  }
LABEL_13:

  return v19;
}

void sub_10017CD50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017CD94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017D0B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10017D0F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

_TtC8Freeform12CRLBoardItem *__cdecl sub_10017D1A0(id a1, CRLIngestibleBoardItemAndDescription *a2)
{
  return [(CRLIngestibleBoardItemAndDescription *)a2 boardItem];
}

uint64_t sub_10017F0E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = +[UIImage systemImageNamed:*(void *)(a1 + 40)];
  uint64_t v4 = +[UICommand commandWithTitle:v2 image:v3 action:"snapToShape:" propertyList:0];

  [*(id *)(a1 + 48) snapToShape:v4];
  return 1;
}

id sub_10017F168(uint64_t a1)
{
  return _[*(id *)(a1 + 32) requestPauseFollow];
}

id sub_10017F90C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addAdditionalChildLayersToArray:*(void *)(a1 + 40)];
}

id sub_10017FB24(uint64_t a1)
{
  return [*(id *)(a1 + 32) endEditing];
}

id sub_100180704(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) crlaxInteractiveCanvasController];
  id v3 = [v2 crlaxScrollLayoutToVisibleAndFocusTheAssociatedRep:*(void *)(a1 + 40)];

  return v3;
}

void sub_100184420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10018447C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10018448C(uint64_t a1)
{
}

void sub_100184494(void *a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1[4] + 8) + 40);
  if (!v2)
  {
    id v3 = objc_alloc_init(CRLBezierSubpath);
    uint64_t v4 = *(void *)(a1[4] + 8);
    unint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    [*(id *)(*(void *)(a1[5] + 8) + 40) addObject:*(void *)(*(void *)(a1[4] + 8) + 40)];
    uint64_t v2 = *(void **)(*(void *)(a1[4] + 8) + 40);
  }
  [v2 addNode:*(void *)(*(void *)(a1[6] + 8) + 40)];
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_100188494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001884D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100188738(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018877C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100188A98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100188ADC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100188CEC(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLFreehandDrawingLocalShapeRegistry);
  uint64_t v2 = (void *)qword_1016A9178;
  qword_1016A9178 = (uint64_t)v1;
}

id sub_10018938C(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[4];
  if (!a2) {
    a2 = v3[2];
  }
  return [v3 p_provideBoardItemWithURL:a2 factory:a1[5] completionHandler:a1[6]];
}

void sub_10018955C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(*(void *)(a1 + 32) + 32) stop];
  [*(id *)(*(void *)(a1 + 32) + 32) advanceToStage:1];
  if (v3)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014DC338);
    }
    uint64_t v4 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_101081238(v4, v3);
    }
    if (*(void *)(a1 + 56))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      void block[2] = sub_1001896F4;
      block[3] = &unk_1014CC280;
      id v8 = *(id *)(a1 + 56);
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else
  {
    unint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = [*(id *)(a1 + 40) URL];
    [v5 p_provideBoardItemWithFinalURL:v6 factory:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_1001896B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_1001896F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10018989C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) boardItem];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

intptr_t sub_100189BC0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_100189C94(id *a1)
{
  return a1;
}

double sub_100189CC8(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = 1;
  double result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_101176F48;
  return result;
}

uint64_t sub_100189CF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = *(id *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_100189D54(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  id v11 = a2;
  id v12 = a3;
  *(void *)a1 = v11;
  id v13 = v12;
  unsigned int v14 = v13;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = v13;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x370], 8) = a6;
  *(_OWORD *)(a1 + 56) = xmmword_101176F48;
  if (v13 == v11)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x370], 8) = 0;

    a4 = *(void *)(a1 + 32);
  }
  *(_OWORD *)(a1 + 56) = xmmword_101176F48;
  *(void *)(a1 + 16) = a4;

  return a1;
}

double sub_100189DFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) - 1;
  *(void *)(a1 + 32) = v1;
  *(void *)(a1 + 40) = v1;
  double result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_101176F48;
  *(void *)(a1 + 16) = v1;
  return result;
}

double sub_100189E20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 < *(void *)(a1 + 24)) {
    uint64_t v2 = v1 + 1;
  }
  else {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  double result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_101176F48;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 16) = v2;
  return result;
}

BOOL sub_100189E50(uint64_t a1)
{
  return *(void *)(a1 + 40) >= *(void *)(a1 + 24);
}

double sub_100189E64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = sub_100189CF0(a2, a1);
  uint64_t v3 = *(void *)(v2 + 32) - 1;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v3;
  double result = NAN;
  *(_OWORD *)(v2 + 56) = xmmword_101176F48;
  *(void *)(v2 + 16) = v3;
  return result;
}

id sub_100189EA4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = *(id *)(a1 + 56);
    if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v4 = [*(id *)a1 textRangeForParagraphAtIndex:*(void *)(a1 + 16)];
      *(void *)(a1 + 56) = v4;
      *(void *)(a1 + 64) = v5;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 64);
    }
    *a2 = v4;
    a2[1] = v5;
  }
  if (*(void *)(a1 + 16) <= *(void *)(a1 + 24))
  {
    id v7 = *(id *)(a1 + 8);
    if (!v7) {
      id v7 = *(id *)a1;
    }
    uint64_t v6 = [v7 paragraphStyleAtParIndex:effectiveRange:];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id sub_100189F3C(uint64_t a1)
{
  id result = *(id *)(a1 + 56);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id result = [*(id *)a1 textRangeForParagraphAtIndex:*(void *)(a1 + 16)];
    *(void *)(a1 + 56) = result;
    *(void *)(a1 + 64) = v3;
  }
  return result;
}

id sub_100189F84(uint64_t a1)
{
  id v2 = *(id *)(a1 + 56);
  if (v2 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v2 = [*(id *)a1 textRangeForParagraphAtIndex:*(void *)(a1 + 16)];
    uint64_t v4 = v3;
    *(void *)(a1 + 56) = v2;
    *(void *)(a1 + 64) = v3;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
  }
  uint64_t v5 = [*(id *)a1 substringWithRange:v2, v4];

  return v5;
}

id sub_100189FF0(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id sub_100189FF8(uint64_t a1)
{
  return _[*(id *)a1 paragraphLevelAtParIndex:*(void *)(a1 + 16)];
}

id sub_10018A008(uint64_t a1)
{
  if (*(void *)(a1 + 16) <= *(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 8)) {
      id v2 = *(void **)(a1 + 8);
    }
    else {
      id v2 = *(void **)a1;
    }
    unint64_t v1 = [v2 listStyleAtParIndex:effectiveRange:];
  }
  else
  {
    unint64_t v1 = 0;
  }

  return v1;
}

BOOL sub_10018A060(uint64_t a1)
{
  unint64_t v1 = sub_10018A008(a1);
  id v2 = v1;
  if (v1) {
    BOOL v3 = [v1 firstLabelType] != 0;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_10018A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10018A0BC(uint64_t a1)
{
  return [*(id *)a1 isWritingDirectionRightToLeftForParagraphAtParIndex:*(void *)(a1 + 16)];
}

uint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.totalEventKeyCount()
{
  return 7;
}

BOOL sub_10018A0D4(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0;
}

uint64_t sub_10018A0E4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_10018A96C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1016A9188;
  qword_1016A9188 = (uint64_t)v1;

  if (!qword_1016A9188)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DC358);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108132C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DC378);
    }
    BOOL v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v3);
    }
    uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLImageProviderPool sharedPool]_block_invoke");
    uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageProviderPool.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 65, 0, "invalid nil value for '%{public}s'", "instance");
  }
}

void sub_10018AADC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018AB20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018B1A4(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

id sub_10018B1E4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = 5;
  while (1)
  {
    id result = [a2 readToBuffer:v4 size:v5];
    v5 -= (uint64_t)result;
    if (v5 == 5) {
      break;
    }
    v4 += v5;
    if (!v5)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      return result;
    }
  }
  return result;
}

void sub_10018B24C(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018B28C(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018B9B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018B9D8(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018BA18(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018BA58(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018BA98(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018BC6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018BCB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018BE90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018BEA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018BEE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018C110(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018C134(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018C2F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018C318(id a1)
{
  id v1 = sub_100401ECC("CRLImageProviderPoolCat");
  id v2 = off_10166C3B0;
  off_10166C3B0 = v1;
}

void sub_10018C46C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018CEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

void sub_10018CF50(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018CF90(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018CFD0(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D010(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D050(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D090(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D0D0(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D110(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018D154(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018D198(id a1)
{
  id v1 = sub_100401ECC("CRLFileDescriptors");
  id v2 = off_10166C3A8;
  off_10166C3A8 = v1;
}

void sub_10018D340(_Unwind_Exception *exception_object)
{
}

id sub_10018D498(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_flushProvidersWithNoOneActivelyHoldingAReference];
}

void sub_10018D6C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018D800(_Unwind_Exception *exception_object)
{
}

void sub_10018D99C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018D9E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018DCEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = [v3 userInfo];

  uint64_t v6 = [v5 objectForKey:@"CRLProgressOverallProgress"];
  sub_1002469D0(v4, v6);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  id v7 = v9;
  if (v9)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    [v9 doubleValue];
    (*(void (**)(uint64_t))(v8 + 16))(v8);
    id v7 = v9;
  }
}

void sub_10018DF0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018DF20(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10018DFF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018E1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018E228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018E2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10018E3C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E444(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

void sub_10018EF8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018EFD0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018F014(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018F058(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018F7EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018F830(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018FD28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10018FD6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001908F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100190938(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019117C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001911C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100191538(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10019165C(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10019336C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001933B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001933F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193438(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019347C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001934C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193748(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019378C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193B64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193BA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193D48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100193D8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195724(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195768(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001957AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001957F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195834(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195878(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001958BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195900(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195944(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195988(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001959CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195A10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195A54(id a1)
{
  id v1 = sub_100401ECC("CRLUUIDSelectionCat");
  id v2 = off_10166C4D8;
  off_10166C4D8 = v1;
}

void sub_100195A94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195AD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195B1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195B60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195BA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195BE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195C2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195C70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100195CB4(id a1)
{
  id v1 = sub_100401ECC("CRLEditorStackCat");
  id v2 = off_10166C4E0;
  off_10166C4E0 = v1;
}

void sub_100195FD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019601C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100196060(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001960A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001964A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001964E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001966E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100196728(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100196944(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100196988(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100197070(id a1)
{
  id v1 = sub_100401ECC("CRLEditorStackCat");
  id v2 = off_10166C4E0;
  off_10166C4E0 = v1;
}

void sub_1001970B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001970F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100197138(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019717C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001975A0(id a1)
{
  id v1 = sub_100401ECC("CRLEditorStackCat");
  id v2 = off_10166C4E0;
  off_10166C4E0 = v1;
}

void sub_1001975E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100197624(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100197668(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001976AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100197884(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001978C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001982D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100198318(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019835C(id a1)
{
  id v1 = sub_100401ECC("CRLEditorStackCat");
  id v2 = off_10166C4E0;
  off_10166C4E0 = v1;
}

void sub_100198714(id a1)
{
  id v1 = sub_100401ECC("CRLEditorStackCat");
  id v2 = off_10166C4E0;
  off_10166C4E0 = v1;
}

void sub_100198924(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1001989A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001990E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001995DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100199620(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100199888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019A4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10019A794(CRLTextRepAccessibility *self, SEL a2)
{
  return __CRLAccessibilityGetAssociatedBool(self, &unk_1016A91A2);
}

void sub_10019A7A0(CRLTextRepAccessibility *self, SEL a2, BOOL a3)
{
}

void sub_10019A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10019A968(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10019A978(uint64_t a1)
{
}

void sub_10019A980(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if (!a3) {
      return;
    }
  }
  else
  {
    id v6 = [objc_alloc((Class)NSMutableAttributedString) initWithString:*(void *)(a1 + 32) attributes:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    if (!v3) {
      return;
    }
  }
  do
  {
    unint64_t v9 = a2 + *(void *)(a1 + 56);
    Class v10 = [*(id *)(a1 + 40) crlaxStorage];
    id v11 = [v10 crlaxAttachmentOrFootnoteAtCharIndex:v9];

    id v12 = [(id)objc_opt_class() crlaxAttachmentElementForAttachment:v11 inTextRep:*(void *)(a1 + 40)];
    if (v12)
    {
      if (a2 >= (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) length]) {
        NSLog(@"here");
      }
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addAttribute:@"UIAccessibilityTokenAttachment" value:v12 range:a2];
    }

    ++a2;
    --v3;
  }
  while (v3);
}

BOOL sub_10019AC38(id a1)
{
  return 1;
}

void sub_10019B214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10019B230(void *a1, unint64_t a2, NSUInteger a3, void *a4, void *a5)
{
  id v28 = a4;
  id v9 = a5;
  if (!*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v11 = objc_alloc((Class)NSMutableAttributedString);
    uint64_t v12 = a1[4];
    if (isKindOfClass) {
      id v13 = [v11 initWithAttributedString:v12];
    }
    else {
      id v13 = [v11 initWithString:v12];
    }
    uint64_t v14 = *(void *)(a1[5] + 8);
    long long v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    [*(id *)(*(void *)(a1[5] + 8) + 40) beginEditing];
  }
  unint64_t v16 = a1[6];
  BOOL v17 = a2 >= v16;
  NSUInteger v18 = a2 - v16;
  if (v17) {
    NSUInteger v19 = v18;
  }
  else {
    NSUInteger v19 = 0;
  }
  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v19 >= (unint64_t)[*(id *)(*(void *)(a1[5] + 8) + 40) length])
    {
      int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"The attribute being applied is out of bounds!", v21, v22, v23, v24, v25, v27))abort(); {
    }
      }
  }
  v31.CFIndex length = (NSUInteger)[*(id *)(*(void *)(a1[5] + 8) + 40) length];
  v30.CFIndex location = v19;
  v30.CFIndex length = a3;
  v31.CFIndex location = 0;
  NSRange v26 = NSIntersectionRange(v30, v31);
  [*(id *)(*(void *)(a1[5] + 8) + 40) addAttribute:v28 value:v9 range:v26.location, v26.length];
}

void sub_10019C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10019C8C0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 isEqual:*(void *)(a1 + 32)];
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_10019D7B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019D7F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019DDA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019DDE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019DF64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained crlaxSetPreventSelectedTextRangeChanges:0];
}

void sub_10019EE48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EE8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EED0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EF14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EF58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EF9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019EFE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019F024(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019F388(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019F3CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019F9BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FA00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FA44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FA88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FACC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FB10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FE94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FED8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FF1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10019FF60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001A054C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_selectionOrSelectedInfosChanged];
}

void sub_1001A16F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A1734(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A1778(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A17BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A1800(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A1844(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A22DC(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001A23FC(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001A267C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A26C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A2894(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001A2BF0(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001A30AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A30F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A3738(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A377C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A37C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A3804(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001A3D2C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 id];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001A3D70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A3DB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A40D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A4114(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5054(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5098(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A50DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5120(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001A53AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && !(*(unsigned int (**)(uint64_t, id))(v4 + 16))(v4, v3)) {
    goto LABEL_7;
  }
  [v3 clipRect];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  id v13 = [v3 layout];
  uint64_t v14 = v13;
  if (v13) {
    [v13 transform];
  }
  else {
    memset(&v21, 0, sizeof(v21));
  }
  v22.origin.CGFloat x = v6;
  v22.origin.CGFloat y = v8;
  v22.size.CGFloat width = v10;
  v22.size.CGFloat height = v12;
  CGRect v23 = CGRectApplyAffineTransform(v22, &v21);
  CGFloat x = v23.origin.x;
  CGFloat y = v23.origin.y;
  CGFloat width = v23.size.width;
  CGFloat height = v23.size.height;

  v24.origin.CGFloat x = x;
  v24.origin.CGFloat y = y;
  v24.size.CGFloat width = width;
  v24.size.CGFloat height = height;
  CGRect v25 = CGRectIntersection(v24, *(CGRect *)(a1 + 40));
  if (CGRectIsEmpty(v25)) {
LABEL_7:
  }
    uint64_t v19 = 0;
  else {
    uint64_t v19 = 1;
  }

  return v19;
}

void sub_1001A5AC0(id a1)
{
  dispatch_get_global_queue(33, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = [CRLWidthLimitedQueue alloc];
  id v2 = [(CRLWidthLimitedQueue *)v1 initWithLimit:qword_101719D08 name:@"com.apple.freeform.freehand-drawing.child-rendering" targetQueue:v4];
  id v3 = (void *)qword_1016A91C8;
  qword_1016A91C8 = (uint64_t)v2;
}

void sub_1001A5B3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5B80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5D6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A5DB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A63C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A640C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6450(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6494(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A64D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A651C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A685C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A68A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A68E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6928(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6C48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6C8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6CD0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A6D14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A70A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A70EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7524(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7568(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A75AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A75F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7634(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7678(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A797C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A79C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7A04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7A48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7E80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7EC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7F08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7F4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7F90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A7FD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A82D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A831C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A8360(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001A83A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AA6A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AA6E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AB308(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AB34C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001ABF30(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

BOOL sub_1001AC11C(uint64_t a1, void *a2)
{
  id v3 = [a2 parentRep];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_1001AC480(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AC4C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001ACDBC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x36u);
}

BOOL sub_1001ACDE8(double *a1)
{
  return !a1 || fabs(*a1) != INFINITY;
}

BOOL sub_1001ACE20(double *a1)
{
  if (!a1) {
    return 1;
  }
  BOOL result = 0;
  if (fabs(*a1) != INFINITY)
  {
    BOOL result = 0;
    if (fabs(a1[1]) != INFINITY)
    {
      BOOL result = 0;
      if (fabs(a1[2]) != INFINITY)
      {
        BOOL result = 0;
        if (fabs(a1[3]) != INFINITY)
        {
          BOOL result = 0;
          if (fabs(a1[4]) != INFINITY) {
            return fabs(a1[5]) != INFINITY;
          }
        }
      }
    }
  }
  return result;
}

void sub_1001ACEEC()
{
  int v0 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DDEC0);
  }
  id v1 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101084378(v0, v1);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014DDEE0);
  }
  id v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101066770(v2, v0);
  }
  id v3 = +[NSString stringWithUTF8String:"void CRLNotifyCGAssertionAvoided()"];
  BOOL v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSafeCGWrappers.m"];
  +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:94 isFatal:0 description:"A CG call was elided because of an invalid parameter."];
}

void sub_1001AD028(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AD06C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AD3E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AD424(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE5B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE5F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE638(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE67C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE6C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AE704(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}