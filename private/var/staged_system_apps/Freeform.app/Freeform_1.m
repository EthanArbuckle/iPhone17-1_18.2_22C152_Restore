double sub_1001AE7CC(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double result;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = (uint64_t)(a1[1] - *a1) >> 4;
  v2 = v1 - 1;
  if (v1 == 1) {
    return 0.0;
  }
  if (v1 <= 1) {
    v3 = 1;
  }
  else {
    v3 = (uint64_t)(a1[1] - *a1) >> 4;
  }
  v4 = v3 - 1;
  if (v1 >= v4) {
    v5 = v4;
  }
  else {
    v5 = (uint64_t)(a1[1] - *a1) >> 4;
  }
  if (v5 >= v1 - 2) {
    v5 = v1 - 2;
  }
  v6 = (double *)(*a1 + 16);
  result = 0.0;
  do
  {
    if (v1 == v5 || v4 == v5) {
      sub_1001AF1A0();
    }
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    v11 = v6[1];
    v6 += 2;
    result = result + sqrt((v9 - v11) * (v9 - v11) + (v8 - v10) * (v8 - v10));
    --v2;
  }
  while (v2);
  return result;
}

void sub_1001AE85C(const CGPath *a1, float64_t a2, float64_t a3, float64_t a4, float64_t a5, CGFloat a6, CGFloat a7, double a8)
{
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);
  v12.f64[0] = CurrentPoint.y;
  v11.f64[0] = a3;
  v11.f64[1] = a2;
  v12.f64[1] = CurrentPoint.x;
  float64x2_t v13 = vsubq_f64(v11, v12);
  float64x2_t v14 = v11;
  v11.f64[0] = a5;
  v11.f64[1] = a4;
  v15.f64[0] = a7;
  v15.f64[1] = a6;
  float64x2_t v16 = vsubq_f64(v11, v14);
  float64x2_t v17 = vsubq_f64(v15, v11);
  float64x2_t v18 = vsubq_f64(v16, v13);
  float64x2_t v19 = vsubq_f64(v17, v16);
  float64x2_t v20 = (float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v19);
  float64x2_t v21 = (float64x2_t)vzip2q_s64((int64x2_t)v18, (int64x2_t)v19);
  float64x2_t v22 = vmlaq_f64(vmulq_f64(v20, v20), v21, v21);
  if (v22.f64[0] <= v22.f64[1]) {
    v22.f64[0] = v22.f64[1];
  }
  double v23 = v22.f64[0] * 9.0 * 0.0625;
  if (v23 > a8 * a8)
  {
    float64x2_t v24 = vsubq_f64(v19, v18);
    __asm
    {
      FMOV            V5.2D, #3.0
      FMOV            V6.2D, #6.0
    }
    float64x2_t v31 = vmulq_f64(v24, _Q6);
    float64x2_t v32 = vmlaq_f64(v24, _Q5, vaddq_f64(v13, v18));
    float64x2_t v33 = vmulq_f64(vaddq_f64(v18, v24), _Q6);
    int v34 = 1;
    __asm
    {
      FMOV            V2.2D, #0.125
      FMOV            V3.2D, #0.25
      FMOV            V4.2D, #0.5
    }
    do
    {
      int v38 = v34;
      float64x2_t v31 = vmulq_f64(v31, _Q2);
      float64x2_t v33 = vsubq_f64(vmulq_f64(v33, _Q3), v31);
      float64x2_t v32 = vsubq_f64(vmulq_f64(v32, _Q4), vmulq_f64(v33, _Q4));
      v34 *= 2;
      double v23 = v23 * 0.0625;
    }
    while (v23 > a8 * a8 && v34 <= 0x10000);
    if (v34 >= 2)
    {
      unsigned int v39 = (2 * v38) | 1;
      do
      {
        float64x2_t v47 = v31;
        float64x2_t v49 = vaddq_f64(v12, v32);
        float64x2_t v43 = vaddq_f64(v32, v33);
        float64x2_t v45 = vaddq_f64(v31, v33);
        CGPathAddLineToPoint(a1, 0, v49.f64[1], v49.f64[0]);
        float64x2_t v32 = v43;
        float64x2_t v33 = v45;
        float64x2_t v31 = v47;
        float64x2_t v12 = v49;
        --v39;
      }
      while (v39 > 2);
    }
  }

  CGPathAddLineToPoint(a1, 0, a6, a7);
}

void sub_1001AE9F0(const CGPath *a1, double a2, double a3, CGFloat a4, CGFloat a5, double a6)
{
  CGPoint CurrentPoint = CGPathGetCurrentPoint(a1);

  sub_1001AE85C(a1, (CurrentPoint.x + a2 * 2.0) / 3.0, (CurrentPoint.y + a3 * 2.0) / 3.0, (a4 + a2 * 2.0) / 3.0, (a5 + a3 * 2.0) / 3.0, a4, a5, a6);
}

void sub_1001AEA88(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      CGPathMoveToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(void *)(a2 + 8) + 8));
      break;
    case 1:
      CGPathAddLineToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(void *)(a2 + 8) + 8));
      break;
    case 2:
      sub_1001AE9F0(*(const CGPath **)a1, **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8), *(CGFloat *)(*(void *)(a2 + 8) + 16), *(CGFloat *)(*(void *)(a2 + 8) + 24), *(double *)(a1 + 8));
      break;
    case 3:
      v2 = *(float64_t **)(a2 + 8);
      sub_1001AE85C(*(const CGPath **)a1, *v2, v2[1], v2[2], v2[3], v2[4], v2[5], *(double *)(a1 + 8));
      break;
    case 4:
      CGPathCloseSubpath(*(CGMutablePathRef *)a1);
      break;
    default:
      return;
  }
}

void sub_1001AEB38(void **a1, int *a2)
{
  int v2 = *a2;
  if (*a2 != 4)
  {
    if (v2 == 1)
    {
      v4 = (_OWORD *)*((void *)a2 + 1);
      uint64_t v13 = (uint64_t)(a1 + 2);
      unint64_t v14 = (unint64_t)a1[2];
      v7 = a1[1];
      if ((unint64_t)v7 >= v14)
      {
        uint64_t v22 = ((char *)v7 - (unsigned char *)*a1) >> 4;
        unint64_t v23 = v22 + 1;
        if (!((unint64_t)(v22 + 1) >> 60))
        {
          uint64_t v24 = v14 - (void)*a1;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            v26 = (char *)sub_10001EAB0(v13, v25);
          }
          else {
            v26 = 0;
          }
          v27 = &v26[16 * v22];
          v28 = &v26[16 * v25];
          *(_OWORD *)v27 = *v4;
          float64x2_t v15 = v27 + 16;
          float64x2_t v31 = (char *)*a1;
          v29 = (char *)a1[1];
          if (v29 == *a1) {
            goto LABEL_40;
          }
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v29 - 1);
            v27 -= 16;
            v29 -= 16;
          }
          while (v29 != v31);
          goto LABEL_39;
        }
LABEL_44:
        sub_100004E40();
      }
LABEL_14:
      _OWORD *v7 = *v4;
      float64x2_t v15 = v7 + 1;
LABEL_42:
      a1[1] = v15;
      return;
    }
    if (!v2)
    {
      v4 = (_OWORD *)*((void *)a2 + 1);
      uint64_t v5 = (uint64_t)(a1 + 2);
      unint64_t v6 = (unint64_t)a1[2];
      v7 = a1[1];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v8 = ((char *)v7 - (unsigned char *)*a1) >> 4;
        unint64_t v9 = v8 + 1;
        if (!((unint64_t)(v8 + 1) >> 60))
        {
          uint64_t v10 = v6 - (void)*a1;
          if (v10 >> 3 > v9) {
            unint64_t v9 = v10 >> 3;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11) {
            float64x2_t v12 = (char *)sub_10001EAB0(v5, v11);
          }
          else {
            float64x2_t v12 = 0;
          }
          v27 = &v12[16 * v8];
          v28 = &v12[16 * v11];
          *(_OWORD *)v27 = *v4;
          float64x2_t v15 = v27 + 16;
          v30 = (char *)*a1;
          v29 = (char *)a1[1];
          if (v29 == *a1) {
            goto LABEL_40;
          }
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v29 - 1);
            v27 -= 16;
            v29 -= 16;
          }
          while (v29 != v30);
LABEL_39:
          v29 = (char *)*a1;
LABEL_40:
          *a1 = v27;
          a1[1] = v15;
          a1[2] = v28;
          if (v29) {
            operator delete(v29);
          }
          goto LABEL_42;
        }
        goto LABEL_44;
      }
      goto LABEL_14;
    }
    int v16 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DE028);
    }
    float64x2_t v17 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101084668(v16, v17);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DE048);
    }
    float64x2_t v18 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v19 = +[CRLAssertionHandler packedBacktraceString];
      sub_10106CDAC(v19, v32, v16, (os_log_t)v18);
    }

    float64x2_t v20 = +[NSString stringWithUTF8String:"void _CRLPKControlPointsFromFlattenedPathApplier(std::vector<CGPoint> *, const CGPathElement *)"];
    float64x2_t v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCGPathUtility.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v20 file:v21 lineNumber:206 isFatal:0 description:"If path includes kCGPathElementAddQuadCurveToPoint or kCGPathElementAddCurveToPoint it was not properly flattened."];
  }
}

void sub_1001AEE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AEE6C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AEEB0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AEEF4(const CGPath *a1, void *a2)
{
  if (a1)
  {
    Mutable = CGPathCreateMutable();
    v5[0] = Mutable;
    v5[1] = 0x3F847AE147AE147BLL;
    CGPathApply(a1, v5, (CGPathApplierFunction)sub_1001AEA88);
    CGPathApply(Mutable, a2, (CGPathApplierFunction)sub_1001AEB38);
    CGPathRelease(Mutable);
  }
}

void sub_1001AEF8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v8 = *(double **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
LABEL_40:
    }
      sub_100004E40();
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10002B494((uint64_t)v5, v12);
      uint64_t v8 = *(double **)a2;
      unint64_t v6 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    float64x2_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = 0;
    v7 = (double *)(v14 + 8);
    while (v6 != v8)
    {
      uint64_t v16 = *((void *)v6-- - 1);
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v6 = 0.0;
    v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1] - *a1;
  if (v18 != 16)
  {
    unint64_t v19 = 0;
    unint64_t v20 = v18 >> 4;
    do
    {
      if (v20 <= v19 || (unint64_t v21 = v19 + 1, v20 <= v19 + 1)) {
        sub_1001AF1A0();
      }
      uint64_t v22 = (double *)(v17 + 16 * v19);
      double v23 = sqrt((v22[1] - *(double *)(v17 + 16 * v21 + 8)) * (v22[1] - *(double *)(v17 + 16 * v21 + 8))+ (*v22 - *(double *)(v17 + 16 * v21)) * (*v22 - *(double *)(v17 + 16 * v21)));
      if ((unint64_t)v7 >= *v5)
      {
        unint64_t v25 = *(double **)a2;
        uint64_t v26 = ((uint64_t)v7 - *(void *)a2) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_40;
        }
        uint64_t v28 = *v5 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          v30 = (char *)sub_10002B494((uint64_t)v5, v29);
          unint64_t v25 = *(double **)a2;
          v7 = *(double **)(a2 + 8);
        }
        else
        {
          v30 = 0;
        }
        float64x2_t v31 = (double *)&v30[8 * v26];
        *float64x2_t v31 = v23;
        uint64_t v24 = v31 + 1;
        while (v7 != v25)
        {
          uint64_t v32 = *((void *)v7-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        *(void *)a2 = v31;
        *(void *)(a2 + 8) = v24;
        *(void *)(a2 + 16) = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        double *v7 = v23;
        uint64_t v24 = v7 + 1;
      }
      *(void *)(a2 + 8) = v24;
      uint64_t v17 = *a1;
      unint64_t v20 = (a1[1] - *a1) >> 4;
      v7 = v24;
      unint64_t v19 = v21;
    }
    while (v21 < v20 - 1);
  }
}

void sub_1001AF1A0()
{
}

uint64_t sub_1001AF1B8()
{
  return _kdebug_trace(875561004, 0, 0, 0, 0);
}

uint64_t sub_1001AF1D4(uint64_t a1)
{
  return _kdebug_trace(875561008, a1, 0, 0, 0);
}

void sub_1001AF238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPCTTypesetterCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001AF4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AF4E4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AF528(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t *sub_1001AF668(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    sub_10001C4D8(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1001AF72C(uint64_t **a1, uint64_t *a2)
{
  v3 = sub_10001C988(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    sub_100039CE8(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_1001AF76C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1001AF76C(a1, *a2);
    sub_1001AF76C(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      sub_100039CE8(v4);
    }
    operator delete(a2);
  }
}

void sub_1001AFA64(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AFAA8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AFD44(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001AFD88(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0078(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B00BC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0100(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0144(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0534(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0578(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B09C8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0A0C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0C68(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0CAC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0E90(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B0ED4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1A70(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1AB4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1AF8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1B3C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1B80(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B1BC4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B2564(id a1)
{
  uint64_t v1 = +[CRLCIKernelLoader loadKernelWithMetalName:@"curvedShadowDisplacement" legacyName:@"CRLCurvedShadow_CurveDisplacement"];
  int v2 = (void *)qword_1016A91E0;
  qword_1016A91E0 = v1;
}

void sub_1001B2684(id a1)
{
  uint64_t v1 = +[CRLCIKernelLoader loadKernelWithMetalName:@"curvedShadowBlurBlend" legacyName:@"CRLCurvedShadow_BlurBlend"];
  int v2 = (void *)qword_1016A91F0;
  qword_1016A91F0 = v1;
}

void sub_1001B31F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B3238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B33DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B3420(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B35B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B35FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B37A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B37E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B4174(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B41B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001B4340(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1001B4EB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  int v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001B5084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B50A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B50B8(uint64_t a1)
{
}

void sub_1001B50C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = [a2 getPromisedItemResourceValue:&obj forKey:NSURLContentTypeKey error:0];
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

void sub_1001B5560(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  int v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001B5ADC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLSharingExtensionCat");
  int v2 = off_10166B5F8;
  off_10166B5F8 = v1;
}

void sub_1001B5DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B5E00(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v6 = a2;
  if ([v6 resultType] == (id)2048)
  {
    v7 = [v6 phoneNumber];
    if (![v7 length])
    {
      int v8 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DE5D0);
      }
      uint64_t v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108519C(v8, v9);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DE5F0);
      }
      unint64_t v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010668E0(v10);
      }
      uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[NSURL(CRLAdditions) crl_urlFromUserProvidedTelephoneString:withDataDetector:]_block_invoke");
      unint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m"];
      +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:292 isFatal:0 description:"Expected phone number match from NSDataDetector"];
    }
    if ([v7 length])
    {
      uint64_t v13 = +[NSCharacterSet alphanumericCharacterSet];
      unint64_t v14 = [v7 stringByAddingPercentEncodingWithAllowedCharacters:v13];
      float64x2_t v15 = [@"tel:" stringByAppendingString:v14];
      uint64_t v16 = +[NSURL URLWithString:v15];
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;

      *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
    }
  }
}

void sub_1001B6024(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B6068(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B6340(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B6384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B65F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B6638(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B672C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B68F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B6934(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7600(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7680(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B76C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7740(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B7FB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B8304(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B8554(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B866C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B9238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B9278(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B92B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B92FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B9340(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLMultiSelectGRCat");
  int v2 = off_10166C7E8;
  off_10166C7E8 = v1;
}

void sub_1001B948C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

unsigned char *sub_1001B94A8(unsigned char *result, unsigned char *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void sub_1001B94C4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1001B9AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B9B08(uint64_t a1)
{
  char v23 = 0;
  id v2 = [*(id *)(a1 + 32) nsRange];
  unsigned __int8 v4 = +[CRLWPSelection crlaxSelectionWithRange:](CRLWPSelection, "crlaxSelectionWithRange:", v2, v3);
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = __CRLAccessibilityCastAsClass(v5, (uint64_t)v4, 1, &v23);
  if (v23) {
    abort();
  }
  v7 = (void *)v6;

  [*(id *)(a1 + 40) rectForSelection:v7 includeRuby:0 includePaginatedAttachments:0];
  int v8 = *(void **)(*(void *)(a1 + 56) + 8);
  v8[4] = v9;
  v8[5] = v10;
  v8[6] = v11;
  v8[7] = v12;
  [*(id *)(a1 + 40) convertNaturalRectToUnscaledCanvas:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 32), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 56)];
  uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8);
  v13[4] = v14;
  v13[5] = v15;
  v13[6] = v16;
  v13[7] = v17;
  [*(id *)(a1 + 48) convertUnscaledToBoundsRect:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 32), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 56)];
  uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8);
  v18[4] = v19;
  v18[5] = v20;
  v18[6] = v21;
  v18[7] = v22;
}

void sub_1001B9EF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B9F38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B9F7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001B9FC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001BAA00(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  *(void *)a1 = cf;
  *(double *)(a1 + 8) = a6;
  *(double *)(a1 + 16) = a7;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = 0x7FFFFFFFFFFFFFFFLL;
  long long v8 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(void *)(a1 + 96) = a5;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t sub_1001BAA60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

const void **sub_1001BAAC8(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1001BAB00(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t sub_1001BAB78(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001BAE24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BAE68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB630(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB674(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB6B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB6FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB9A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BB9E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BCCF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BCD34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001BD334(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 48);
  double v4 = 0.2;
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 57)) {
    double v4 = 0.0;
  }
  v6[1] = 3221225472;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_1001BD3F8;
  v6[3] = &unk_1014DEAC0;
  long long v7 = v3;
  long long v8 = v2;
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  id result = +[UIView animateWithDuration:v6 animations:v4];
  *(unsigned char *)(*(void *)(a1 + 32) + 57) = 0;
  return result;
}

id sub_1001BD3F8(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
  double v3 = sub_100064070();
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  char v10 = [v2 view];
  [v10 setBounds:v3, v5, v7, v9];

  [*(id *)(*(void *)(a1 + 32) + 80) setHidden:0];
  double v11 = *(double *)(a1 + 48);
  *(float *)&double v11 = v11;
  [*(id *)(*(void *)(a1 + 32) + 80) setMinimumValue:v11];
  double v12 = *(double *)(a1 + 56);
  *(float *)&double v12 = v12;
  [*(id *)(*(void *)(a1 + 32) + 80) setMaximumValue:v12];
  [*(id *)(*(void *)(a1 + 32) + 80) setDetents:*(void *)(a1 + 40)];
  double v13 = *(double *)(a1 + 64);
  *(float *)&double v13 = v13;
  id result = [*(id *)(*(void *)(a1 + 32) + 80) setValue:0 animated:v13];
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v15 = *(void **)(a1 + 32);
    return [v15 p_updateViewPosition];
  }
  return result;
}

void sub_1001BD928(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BD96C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BD9B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BD9F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001BDA38(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

void sub_1001BDCDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BDD20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001BDD64(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

void sub_1001BDEB4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:0.0];
}

void sub_1001BE264(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BE2A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BED64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BEDA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BEDEC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BEE30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BEE74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BEEB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001BF33C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:1.0];
}

CRLPathKnob *sub_1001C1A78(uint64_t a1, uint64_t a2)
{
  double v4 = [[CRLPathKnob alloc] initWithInControlForNode:*(void *)(a1 + 32) onRep:*(void *)(a1 + 40)];
  [(CRLPathKnob *)v4 setNextNode:*(void *)(a1 + 48)];
  [(CRLPathKnob *)v4 setPrevNode:*(void *)(a1 + 56)];
  [(CRLCanvasKnob *)v4 setTag:a2];
  [(CRLPathKnob *)v4 setNodeIndex:*(void *)(a1 + 72)];
  [(CRLPathKnob *)v4 setSubpathIndex:*(void *)(a1 + 80)];
  double v5 = [(CRLCanvasKnob *)v4 renderable];
  [v5 setOpacity:0.0];

  [*(id *)(a1 + 64) addObject:v4];

  return v4;
}

void sub_1001C2018(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 selectAllNodes];
}

BOOL sub_1001C205C(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001C20F4(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 deselectAllNodes];
}

BOOL sub_1001C2138(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001C2760(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C27A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C2C30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C2C74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1001C335C(uint64_t a1, void *a2, uint64_t a3)
{
  return *(void *)(a1 + 32) != a3 && [a2 type] != (id)3;
}

void sub_1001C348C(id a1, CRLPathEditableRep *a2)
{
  id v3 = [(CRLPathEditableRep *)a2 editablePathSource];
  id v2 = [v3 firstNode];
  if ([v2 type] == (id)3) {
    [v2 setType:1];
  }
  [v3 closePath];
}

BOOL sub_1001C3504(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

void sub_1001C3F60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C3FA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C4168(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C41AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C45AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C45F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C4634(uint64_t a1, void *a2)
{
  id v3 = [a2 editablePathSource];
  [v3 toggleSelectedNodesToType:*(void *)(a1 + 32)];
}

BOOL sub_1001C4688(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C4770(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 cutAtSelectedNodes];
}

BOOL sub_1001C47B4(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C4884(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 connectSelectedNodes];
}

BOOL sub_1001C48C8(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C4998(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 closeSelectedNodes];
}

BOOL sub_1001C49DC(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C4E90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C4ED4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C50DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 editablePathSource];
  float64x2_t v57 = 0u;
  float64x2_t v58 = 0u;
  float64x2_t v56 = 0u;
  double v5 = [v3 layout];
  double v6 = v5;
  if (v5)
  {
    [v5 transformInRoot];
  }
  else
  {
    float64x2_t v57 = 0u;
    float64x2_t v58 = 0u;
    float64x2_t v56 = 0u;
  }

  *(float64x2_t *)&v54.a = v56;
  *(float64x2_t *)&v54.c = v57;
  *(float64x2_t *)&v54.tCGFloat x = v58;
  memset(&v55, 0, sizeof(v55));
  CGAffineTransformInvert(&v55, &v54);
  CGFloat x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  double v11 = +[NSMutableArray array];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  double v12 = [v4 nodes];
  id v13 = [v12 countByEnumeratingWithState:&v50 objects:v61 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v51;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v51 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void **)(*((void *)&v50 + 1) + 8 * i);
        if ([v17 isSelected])
        {
          [v17 nodePoint];
          CGFloat x = sub_100065928(x, y, width, height, vaddq_f64(v58, vmlaq_n_f64(vmulq_n_f64(v57, v18), v56, v19)).f64[0]);
          CGFloat y = v20;
          CGFloat width = v21;
          CGFloat height = v22;
          [v11 addObject:v17];
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v50 objects:v61 count:16];
    }
    while (v14);
  }

  unsigned int v23 = *(_DWORD *)(a1 + 32);
  uint64_t v40 = sub_100063FC4(v23, x, y, width, height);
  if (v23 > 2)
  {
    long long v44 = 0uLL;
    long long v45 = 0uLL;
    long long v42 = 0uLL;
    long long v43 = 0uLL;
    id v32 = v11;
    id v33 = [v32 countByEnumeratingWithState:&v42 objects:v59 count:16];
    if (v33)
    {
      id v34 = v33;
      uint64_t v35 = *(void *)v43;
      do
      {
        for (j = 0; j != v34; j = (char *)j + 1)
        {
          if (*(void *)v43 != v35) {
            objc_enumerationMutation(v32);
          }
          v37 = *(void **)(*((void *)&v42 + 1) + 8 * (void)j);
          [v37 nodePoint:v40];
          [v37 setNodePoint:vaddq_f64(*(float64x2_t *)&v55.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v55.c, *(double *)&v40), *(float64x2_t *)&v55.a, v58.f64[0] + v38 * v57.f64[0] + v56.f64[0] * v39))];
        }
        id v34 = [v32 countByEnumeratingWithState:&v42 objects:v59 count:16];
      }
      while (v34);
    }
  }
  else
  {
    long long v48 = 0uLL;
    long long v49 = 0uLL;
    long long v46 = 0uLL;
    long long v47 = 0uLL;
    id v24 = v11;
    id v25 = [v24 countByEnumeratingWithState:&v46 objects:v60 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v47;
      float64x2_t v41 = (float64x2_t)vdupq_lane_s64(v40, 0);
      do
      {
        for (k = 0; k != v26; k = (char *)k + 1)
        {
          if (*(void *)v47 != v27) {
            objc_enumerationMutation(v24);
          }
          unint64_t v29 = *(void **)(*((void *)&v46 + 1) + 8 * (void)k);
          [v29 nodePoint:v41.f64[0]];
          [v29 setNodePoint:vaddq_f64(*(float64x2_t *)&v55.tx, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v55.c, v58.f64[1] + v30 * v57.f64[1] + v56.f64[1] * v31), v41, *(float64x2_t *)&v55.a))];
        }
        id v26 = [v24 countByEnumeratingWithState:&v46 objects:v60 count:16];
      }
      while (v26);
    }
  }
}

BOOL sub_1001C54B0(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C5600(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 editablePathSource];
  CGFloat x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  double v8 = +[NSMutableArray array];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  double v9 = [v3 nodes];
  id v10 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v49;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v49 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        if ([v14 isSelected])
        {
          [v14 nodePoint];
          CGFloat x = sub_100065928(x, y, width, height, v15);
          CGFloat y = v16;
          CGFloat width = v17;
          CGFloat height = v18;
          [v8 addObject:v14];
        }
      }
      id v11 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
    }
    while (v11);
  }

  int v19 = *(_DWORD *)(a1 + 32);
  if (v19 == 4)
  {
    [v8 sortUsingComparator:&stru_1014DF0D0];
    v57.origin.CGFloat x = x;
    v57.origin.CGFloat y = y;
    v57.size.CGFloat width = width;
    v57.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v57);
    v58.origin.CGFloat x = x;
    v58.origin.CGFloat y = y;
    v58.size.CGFloat width = width;
    v58.size.CGFloat height = height;
    double v31 = CGRectGetHeight(v58);
    id v32 = [v8 count];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v33 = v8;
    id v34 = [v33 countByEnumeratingWithState:&v40 objects:v52 count:16];
    if (v34)
    {
      id v35 = v34;
      double v36 = v31 / (double)(unint64_t)v32;
      uint64_t v37 = *(void *)v41;
      do
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(void *)v41 != v37) {
            objc_enumerationMutation(v33);
          }
          double v39 = *(void **)(*((void *)&v40 + 1) + 8 * (void)j);
          [v39 nodePoint:v40];
          [v39 setNodePoint:];
          double MinY = v36 + MinY;
        }
        id v35 = [v33 countByEnumeratingWithState:&v40 objects:v52 count:16];
      }
      while (v35);
    }
    goto LABEL_27;
  }
  if (v19 == 1)
  {
    [v8 sortUsingComparator:&stru_1014DF0B0];
    v55.origin.CGFloat x = x;
    v55.origin.CGFloat y = y;
    v55.size.CGFloat width = width;
    v55.size.CGFloat height = height;
    double MinX = CGRectGetMinX(v55);
    v56.origin.CGFloat x = x;
    v56.origin.CGFloat y = y;
    v56.size.CGFloat width = width;
    v56.size.CGFloat height = height;
    double v21 = CGRectGetWidth(v56);
    id v22 = [v8 count];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v23 = v8;
    id v24 = [v23 countByEnumeratingWithState:&v44 objects:v53 count:16];
    if (v24)
    {
      id v25 = v24;
      double v26 = v21 / (double)(unint64_t)v22;
      uint64_t v27 = *(void *)v45;
      do
      {
        for (k = 0; k != v25; k = (char *)k + 1)
        {
          if (*(void *)v45 != v27) {
            objc_enumerationMutation(v23);
          }
          unint64_t v29 = *(void **)(*((void *)&v44 + 1) + 8 * (void)k);
          [v29 nodePoint];
          [v29 setNodePoint:MinX];
          double MinX = v26 + MinX;
        }
        id v25 = [v23 countByEnumeratingWithState:&v44 objects:v53 count:16];
      }
      while (v25);
    }
LABEL_27:
  }
}

int64_t sub_1001C5994(id a1, id a2, id a3)
{
  id v4 = a3;
  [a2 nodePoint];
  double v6 = v5;
  [v4 nodePoint];
  double v8 = v7;

  if (v6 < v8) {
    return -1;
  }
  else {
    return v6 > v8;
  }
}

int64_t sub_1001C59EC(id a1, id a2, id a3)
{
  id v4 = a3;
  [a2 nodePoint];
  double v6 = v5;
  [v4 nodePoint];
  double v8 = v7;

  if (v6 < v8) {
    return -1;
  }
  else {
    return v6 > v8;
  }
}

BOOL sub_1001C5A44(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C5EA4(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 deleteSelectedNodes];
}

BOOL sub_1001C5EE8(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  char v3 = [v2 deletingSelectedNodesWillDeleteShape] ^ 1;

  return v3;
}

void sub_1001C5F24(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  double v6 = v5;
  if (*(id *)(a1 + 32) != v5)
  {
    double v8 = v5;
    id v7 = [v5 canPerformEditorAction:"delete:" withSender:*(void *)(a1 + 40)];
    double v6 = v8;
    if (v7)
    {
      [v8 performSelector:"delete:" withObject:*(void *)(a1 + 40)];
      double v6 = v8;
      *a3 = 1;
    }
  }
}

void sub_1001C5FBC(uint64_t a1, void *a2)
{
  id v4 = [a2 editablePathSource];
  char v3 = [v4 lastNode];
  [v3 setSelected:1];

  [v4 deleteSelectedNodesForced:0];
  [*(id *)(a1 + 32) updateGhost];
}

BOOL sub_1001C6034(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001C6138(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 layout];
  id v5 = v4;
  if (v4) {
    [v4 transformInRoot];
  }
  else {
    memset(&v10, 0, sizeof(v10));
  }
  CGAffineTransformInvert(&v11, &v10);
  double v6 = sub_1000664E0((float64x2_t *)&v11, *(double *)(a1 + 32), *(double *)(a1 + 40));
  double v8 = v7;

  double v9 = [v3 editablePathSource];

  [v9 offsetSelectedNodesByDelta:v6, v8];
}

BOOL sub_1001C61F0(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_1001C6E14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C6E58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C73B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C73F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C74D0(id a1)
{
  id v1 = objc_alloc_init(CRLMoviePlaybackRegistry);
  id v2 = (void *)qword_1016A9208;
  qword_1016A9208 = (uint64_t)v1;
}

void sub_1001C7AE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C7B2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C7B70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C7BB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C7BF8(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1001C7C3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C7C80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C8404(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C8448(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C848C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C84D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C8514(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1001C8558(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C859C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C85E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C8624(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C8668(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C86AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1001C8740(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 == a3) {
    return a3 + a4 < a1 + a2;
  }
  else {
    return a1 < a3;
  }
}

void sub_1001C8760(char **a1)
{
  id v2 = *a1;
  unsigned __int8 v3 = a1[1];
  if ((unint64_t)(v3 - v2) < 0x11) {
    return;
  }
  id v25 = sub_1001C8740;
  unint64_t v5 = 126 - 2 * __clz((v3 - v2) >> 4);
  if (v3 == v2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_1001C88B4(v2, v3, (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v25, v6, 1);
  double v8 = *a1;
  double v7 = a1[1];
  uint64_t v9 = v7 - *a1;
  BOOL v10 = v7 != *a1;
  unint64_t v11 = 0;
  if ((unint64_t)v9 >= 0x11 && v7 != v8)
  {
    unint64_t v13 = v9 >> 4;
    unint64_t v14 = *(void *)v8;
    unint64_t v15 = 1;
    while (2)
    {
      if (v13 <= v15 + 1) {
        unint64_t v16 = v15 + 1;
      }
      else {
        unint64_t v16 = v13;
      }
      double v17 = &v8[16 * v15 + 8];
      while (1)
      {
        unint64_t v18 = *((void *)v17 - 1);
        if (v14 != v18) {
          break;
        }
        ++v15;
        v17 += 16;
        if (v16 == v15)
        {
          if (v11 >= v13) {
            return;
          }
          goto LABEL_28;
        }
      }
      int v19 = &v8[16 * v11];
      uint64_t v21 = *(void *)v19;
      uint64_t v20 = *((void *)v19 + 1);
      uint64_t v22 = *(void *)v17;
      if (v20 + v21 >= v18)
      {
        unint64_t v23 = v22 + v18;
        if (v20 + v21 >= v23)
        {
LABEL_24:
          ++v15;
          BOOL v10 = v11 < v13;
          if (v15 < v13)
          {
            unint64_t v14 = v18;
            if (v11 < v13) {
              continue;
            }
          }
          goto LABEL_10;
        }
        uint64_t v22 = v23 - v21;
      }
      else
      {
        ++v11;
        *(void *)&v8[16 * v11] = v18;
      }
      break;
    }
    *(void *)&v8[16 * v11 + 8] = v22;
    goto LABEL_24;
  }
LABEL_10:
  if (v10)
  {
LABEL_28:
    uint64_t v24 = (uint64_t)&v8[16 * v11 + 16];
    if ((char *)v24 != v7) {
      a1[1] = (char *)v24;
    }
  }
}

void sub_1001C88B4(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
uint64_t sub_1001C8C8C(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    id v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      double v8 = (void *)result;
      do
      {
        uint64_t v9 = v5;
        id result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if (result)
        {
          uint64_t v10 = *v9;
          uint64_t v11 = v8[3];
          uint64_t v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            id result = (*a3)(v10, v11, *(void *)((char *)v4 + v12 - 16), *(void *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v10;
          v13[1] = v11;
        }
        char v5 = v9 + 2;
        v7 += 16;
        double v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1001C8D64(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    id v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        id result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if (result)
        {
          uint64_t v8 = *v7;
          uint64_t v9 = v4[3];
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10 - 1;
            *uint64_t v10 = *(v10 - 1);
            id result = (*a3)(v8, v9, *((void *)v10 - 4), *((void *)v10 - 3));
            uint64_t v10 = v11;
          }
          while ((result & 1) != 0);
          *uint64_t v11 = v8;
          v11[1] = v9;
        }
        char v5 = v7 + 2;
        id v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1001C8E14(void *a1, void *a2, void *a3, uint64_t (**a4)(void, void, void, void))
{
  char v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  uint64_t result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1])) {
      return 1;
    }
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!result)
  {
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1])) {
      return 1;
    }
    long long v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  long long v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

void *sub_1001C8F14(void *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((*a3)(*a1, v7, *((void *)a2 - 2), *((void *)a2 - 1)))
  {
    char v8 = a1;
    do
    {
      uint64_t v9 = v8[2];
      uint64_t v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    long long v11 = a1 + 2;
    do
    {
      char v8 = v11;
      if (v11 >= (void *)v4) {
        break;
      }
      int v12 = (*a3)(v6, v7, *v11, v11[1]);
      long long v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (void *)v4)
  {
    do
    {
      uint64_t v13 = *((void *)v4 - 2);
      uint64_t v14 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (void *)v4)
  {
    long long v20 = *(_OWORD *)v8;
    *(_OWORD *)char v8 = *v4;
    _OWORD *v4 = v20;
    do
    {
      uint64_t v15 = v8[2];
      uint64_t v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      uint64_t v17 = *((void *)v4 - 2);
      uint64_t v18 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  }
  *(v8 - 2) = v6;
  *(v8 - 1) = v7;
  return v8;
}

uint64_t *sub_1001C904C(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  do
  {
    char v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  uint64_t v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      uint64_t v13 = *(a2 - 2);
      uint64_t v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      uint64_t v11 = *(a2 - 2);
      uint64_t v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  uint64_t v15 = &a1[v6];
  if (v10 < a2)
  {
    uint64_t v16 = a2;
    do
    {
      long long v17 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
      do
      {
        uint64_t v18 = v15[2];
        uint64_t v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        uint64_t v20 = *(v16 - 2);
        uint64_t v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  uint64_t result = v15 - 2;
  if (v15 - 2 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)result;
  }
  *(v15 - 2) = v7;
  *(v15 - 1) = v8;
  return result;
}

BOOL sub_1001C9180(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *((void *)a2 - 1), *(void *)a1, *((void *)a1 + 1)))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)uint64_t v8 = v9;
      }
      return 1;
    case 3:
      sub_1001C8E14(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      sub_1001C935C(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      sub_1001C9418(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      sub_1001C8E14(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *((void *)v11 + 1), *(void *)v10, *((void *)v10 + 1)))
    {
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *((void *)v11 + 1);
      uint64_t v16 = v12;
      while (1)
      {
        long long v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32) {
          break;
        }
        v16 -= 16;
        if (((*a3)(v14, v15, *((void *)v17 + 2), *((void *)v17 + 3)) & 1) == 0)
        {
          uint64_t v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *((void *)v18 + 1) = v15;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1001C935C(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void, void, void, void))
{
  sub_1001C8E14(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1001C9418(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void, void, void, void))
{
  __n128 v12 = sub_1001C935C(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(void, void, void, void, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    long long v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      long long v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *sub_1001C94FC(char *a1, char *a2, char *a3, uint64_t (**a4)(void, void, uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __n128 v12 = &a1[16 * v10];
      do
      {
        sub_1001C9668((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if ((*a4)(*(void *)v14, *((void *)v14 + 1), *(void *)a1, *((void *)a1 + 1)))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1001C9668((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      long long v17 = a2 - 16;
      do
      {
        long long v21 = *(_OWORD *)a1;
        uint64_t v18 = (char *)sub_1001C97AC(a1, (unsigned int (**)(void, void, void, void))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)uint64_t v18 = v21;
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
          *(_OWORD *)long long v17 = v21;
          sub_1001C9860((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1001C9668(uint64_t result, unsigned int (**a2)(void, void, void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (void *)(result + 16 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        uint64_t v10 = v12;
      }
      __n128 result = ((uint64_t (*)(void, void, void, void))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        uint64_t v13 = *v5;
        uint64_t v14 = v5[1];
        do
        {
          long long v15 = v11;
          *(_OWORD *)char v5 = *(_OWORD *)v11;
          if (v17 < v10) {
            break;
          }
          uint64_t v16 = (2 * v10) | 1;
          unint64_t v11 = (void *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              uint64_t v16 = 2 * v10 + 2;
            }
          }
          __n128 result = ((uint64_t (*)(void, void, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          char v5 = v15;
          uint64_t v10 = v16;
        }
        while (!result);
        *long long v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *sub_1001C97AC(_OWORD *a1, unsigned int (**a2)(void, void, void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(void *)&a1[v6 + 1], *((void *)&a1[v6 + 1] + 1), *(void *)&a1[v6 + 2], *((void *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1001C9860(uint64_t result, uint64_t a2, uint64_t (**a3)(void, void, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v10 = (_OWORD *)(a2 - 16);
    __n128 result = (*a3)(*v9, v9[1], *(void *)(a2 - 16), *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v11 = *(void *)(a2 - 16);
      uint64_t v12 = *(void *)(a2 - 8);
      do
      {
        uint64_t v13 = v9;
        *uint64_t v10 = *(_OWORD *)v9;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(v7 + 16 * v8);
        __n128 result = (*a3)(*v9, v9[1], v11, v12);
        uint64_t v10 = v13;
      }
      while ((result & 1) != 0);
      *uint64_t v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

void sub_1001C9950(id a1)
{
  byte_1016A9218 = sub_1003E8694();
}

id sub_1001C998C(__int16 a1)
{
  __int16 v6 = a1;
  id v1 = [objc_alloc((Class)NSString) initWithCharacters:&v6 length:1];
  id v2 = [v1 stringByApplyingTransform:NSStringTransformFullwidthToHalfwidth reverse:1];
  if ([v2 length]) {
    unsigned __int8 v3 = v2;
  }
  else {
    unsigned __int8 v3 = v1;
  }
  id v4 = [v3 characterAtIndex:0];

  return v4;
}

void sub_1001C9A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001C9A34(UChar32 a1)
{
  UBlockCode Code = ublock_getCode(a1);
  uint64_t result = 0;
  if (Code <= UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION)
  {
    switch(Code)
    {
      case UBLOCK_BASIC_LATIN:
      case UBLOCK_LATIN_1_SUPPLEMENT:
      case UBLOCK_LATIN_EXTENDED_A:
      case UBLOCK_LATIN_EXTENDED_B:
        return 2;
      case UBLOCK_IPA_EXTENSIONS:
      case UBLOCK_SPACING_MODIFIER_LETTERS:
      case UBLOCK_COMBINING_DIACRITICAL_MARKS:
      case UBLOCK_GREEK:
      case UBLOCK_ARMENIAN:
        return result;
      case UBLOCK_CYRILLIC:
        return 9;
      case UBLOCK_HEBREW:
        return 8;
      case UBLOCK_ARABIC:
        return 7;
      default:
        if (Code == UBLOCK_HANGUL_JAMO) {
          return 10;
        }
        if (Code != UBLOCK_LATIN_EXTENDED_ADDITIONAL) {
          return result;
        }
        break;
    }
    return 2;
  }
  if (Code <= UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS)
  {
    switch(Code)
    {
      case UBLOCK_HIRAGANA:
        uint64_t result = 3;
        break;
      case UBLOCK_KATAKANA:
        return 4;
      case UBLOCK_BOPOMOFO:
      case UBLOCK_BOPOMOFO_EXTENDED:
        uint64_t result = 5;
        break;
      case UBLOCK_HANGUL_COMPATIBILITY_JAMO:
      case UBLOCK_HANGUL_SYLLABLES:
        return 10;
      case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A:
      case UBLOCK_CJK_UNIFIED_IDEOGRAPHS:
      case UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS:
        return 6;
      default:
        return result;
    }
    return result;
  }
  if (Code > UBLOCK_BALINESE)
  {
    if ((Code - 148) >= 2)
    {
      if (Code != UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C && Code != UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D) {
        return result;
      }
      return 6;
    }
    return 2;
  }
  if ((Code - 94) < 2) {
    return 6;
  }
  if (Code == UBLOCK_KATAKANA_PHONETIC_EXTENSIONS) {
    return 4;
  }
  return result;
}

CFTypeRef sub_1001C9BC4(void *a1, double a2)
{
  id v3 = a1;
  if (v3)
  {
    id v4 = +[CRLWPFontList sharedInstance];
    char v5 = [v4 fontForPostscriptName:v3 atSize:a2];
    CFTypeRef v6 = CFRetain([v5 ctFont]);
  }
  else
  {
    CFTypeRef v6 = 0;
  }

  return v6;
}

void sub_1001C9C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const __CTFont *sub_1001C9C74(const __CTFont *a1)
{
  id v2 = CTFontCopyFontDescriptor(a1);
  if (!v2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF500);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010868D0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF520);
    }
    long long v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v16 = +[NSString stringWithUTF8String:"CTFontRef CRLWPGetVerticalVersionOfFont(CTFontRef)"];
    int64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 597, 0, "invalid nil value for '%{public}s'", "fd");

    goto LABEL_22;
  }
  id v3 = v2;
  id v4 = (void *)CTFontDescriptorCopyAttribute(v2, kCTFontOrientationAttribute);
  if (v4 && (char v5 = v4, v6 = [v4 intValue], CFRelease(v5), v6 == 2)
    || (CFArrayRef v7 = CTFontCopyAvailableTables(a1, 0)) == 0)
  {
    CFRelease(v3);
LABEL_22:
    CFTypeRef v18 = CFRetain(a1);
    CFAutorelease(v18);
    return a1;
  }
  CFArrayRef v8 = v7;
  v22.length = CFArrayGetCount(v7);
  v22.location = 0;
  uint64_t v9 = a1;
  if (CFArrayGetFirstIndexOfValue(v8, v22, (const void *)0x766D7478) != -1)
  {
    CFStringRef v20 = kCTFontOrientationAttribute;
    long long v21 = &off_10155D1F0;
    CFDictionaryRef v10 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v11 = CTFontDescriptorCreateWithAttributes(v10);

    uint64_t v9 = a1;
    if (v11)
    {
      CGFloat Size = CTFontGetSize(a1);
      CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(a1, Size, 0, v11);
      CTFontRef v14 = CopyWithAttributes;
      uint64_t v9 = a1;
      if (CopyWithAttributes)
      {
        CFAutorelease(CopyWithAttributes);
        uint64_t v9 = v14;
      }
      CFRelease(v11);
    }
  }
  CFRelease(v8);
  CFRelease(v3);
  if (v9 == a1) {
    goto LABEL_22;
  }
  return v9;
}

void sub_1001C9F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C9F60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001C9FA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGFloat sub_1001C9FE8(const __CTFont *a1)
{
  if (!a1) {
    return 0.0;
  }
  CGFloat v2 = CTFontGetAscent(a1) + 0.0;
  CGFloat v3 = v2 + CTFontGetDescent(a1);
  return v3 + CTFontGetLeading(a1);
}

id sub_1001CA044()
{
  if (qword_1016A9230 != -1) {
    dispatch_once(&qword_1016A9230, &stru_1014DF540);
  }
  v0 = (void *)qword_1016A9228;

  return v0;
}

void sub_1001CA098(id a1)
{
  id v3 = objc_alloc_init((Class)NSMutableCharacterSet);
  [v3 addCharactersInRange:10, 1];
  [v3 addCharactersInRange:13, 1];
  [v3 addCharactersInRange:8233, 1];
  [v3 addCharactersInRange:11, 1];
  [v3 addCharactersInRange:5, 1];
  [v3 addCharactersInRange:12, 1];
  [v3 addCharactersInRange:6, 1];
  [v3 addCharactersInRange:15, 1];
  [v3 addCharactersInRange:4, 1];
  id v1 = [v3 copy];
  CGFloat v2 = (void *)qword_1016A9228;
  qword_1016A9228 = (uint64_t)v1;
}

void sub_1001CA184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1001CA198()
{
  if (qword_1016A9240 != -1) {
    dispatch_once(&qword_1016A9240, &stru_1014DF560);
  }
  v0 = (void *)qword_1016A9238;

  return v0;
}

void sub_1001CA1EC(id a1)
{
  id v1 = sub_1001CA044();
  id v4 = [v1 mutableCopy];

  [v4 addCharactersInRange:8232, 1];
  id v2 = [v4 copy];
  id v3 = (void *)qword_1016A9238;
  qword_1016A9238 = (uint64_t)v2;
}

void sub_1001CA264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CA284(uint64_t a1)
{
  id v2 = sub_1001CA044();
  id v3 = [v2 longCharacterIsMember:a1];

  return v3;
}

void sub_1001CA2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CA2D4(uint64_t a1)
{
  if (qword_1016A9250 != -1) {
    dispatch_once(&qword_1016A9250, &stru_1014DF580);
  }
  id v2 = (void *)qword_1016A9248;

  return [v2 longCharacterIsMember:a1];
}

void sub_1001CA338(id a1)
{
  uint64_t v1 = +[NSCharacterSet whitespaceCharacterSet];
  id v2 = (void *)qword_1016A9248;
  qword_1016A9248 = v1;
}

uint64_t sub_1001CA378(uint64_t a1)
{
  if (sub_1001CA2D4(a1)) {
    return 1;
  }
  LODWORD(result) = sub_1001CA284(a1);
  if (a1 == 8232) {
    return 1;
  }
  else {
    return result;
  }
}

BOOL sub_1001CA3C0(int a1)
{
  return a1 == 65532 || a1 == 14;
}

id sub_1001CA3D4(uint64_t a1)
{
  if (qword_1016A9260 != -1) {
    dispatch_once(&qword_1016A9260, &stru_1014DF5A0);
  }
  id v2 = (void *)qword_1016A9258;

  return [v2 longCharacterIsMember:a1];
}

void sub_1001CA438(id a1)
{
  uint64_t v1 = +[NSCharacterSet crlwp_breakingSpaceCharacterSet];
  id v2 = (void *)qword_1016A9258;
  qword_1016A9258 = v1;
}

uint64_t sub_1001CA478(uint64_t a1)
{
  uint64_t v2 = 1;
  if ((int)a1 <= 8211)
  {
    if (!a1 || a1 == 14) {
      return v2;
    }
  }
  else if (a1 == 8212 || a1 == 8232 || a1 == 65532)
  {
    return v2;
  }
  unsigned __int8 v3 = sub_1001CA284(a1);
  if (a1 != 8232 && (v3 & 1) == 0)
  {
    id v4 = +[NSCharacterSet crlwp_spaceCharacterSet];
    uint64_t v2 = (uint64_t)[v4 longCharacterIsMember:a1];
  }
  return v2;
}

void sub_1001CA524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CA534(uint64_t a1)
{
  if (qword_1016A9270 != -1) {
    dispatch_once(&qword_1016A9270, &stru_1014DF5C0);
  }
  uint64_t v2 = (void *)qword_1016A9268;

  return [v2 longCharacterIsMember:a1];
}

void sub_1001CA598(id a1)
{
  long long v4 = xmmword_101176448;
  long long v5 = unk_101176458;
  long long v6 = xmmword_101176468;
  long long v7 = unk_101176478;
  LODWORD(v8) = 10551138;
  id v1 = [objc_alloc((Class)NSString) initWithCharacters:&v4 length:34];
  uint64_t v2 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v1, v4, v5, v6, v7, v8);
  unsigned __int8 v3 = (void *)qword_1016A9268;
  qword_1016A9268 = v2;
}

void sub_1001CA650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CA668(uint64_t a1)
{
  if (qword_1016A9280 != -1) {
    dispatch_once(&qword_1016A9280, &stru_1014DF5E0);
  }
  uint64_t v2 = (void *)qword_1016A9278;

  return [v2 longCharacterIsMember:a1];
}

void sub_1001CA6CC(id a1)
{
  memcpy(__dst, &unk_10117648C, sizeof(__dst));
  id v1 = [objc_alloc((Class)NSString) initWithCharacters:__dst length:129];
  uint64_t v2 = +[NSMutableCharacterSet characterSetWithCharactersInString:v1];
  unsigned __int8 v3 = +[NSCharacterSet whitespaceCharacterSet];
  [v2 formUnionWithCharacterSet:v3];

  id v4 = [v2 copy];
  long long v5 = (void *)qword_1016A9278;
  qword_1016A9278 = (uint64_t)v4;
}

void sub_1001CA7B0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

id sub_1001CA7E4(uint64_t a1)
{
  if (qword_1016A9290 != -1) {
    dispatch_once(&qword_1016A9290, &stru_1014DF600);
  }
  uint64_t v2 = (void *)qword_1016A9288;

  return [v2 longCharacterIsMember:a1];
}

void sub_1001CA848(id a1)
{
  memcpy(__dst, &unk_10117658E, sizeof(__dst));
  id v1 = [objc_alloc((Class)NSString) initWithCharacters:__dst length:767];
  uint64_t v2 = +[NSCharacterSet characterSetWithCharactersInString:v1];
  unsigned __int8 v3 = (void *)qword_1016A9288;
  qword_1016A9288 = v2;
}

void sub_1001CA8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CA910(uint64_t a1, uint64_t a2)
{
  if ((int)a1 > 12338)
  {
    if ((a1 - 12339) >= 2)
    {
      int v6 = 65073;
      if (a1 != 65073) {
        goto LABEL_20;
      }
    }
    else
    {
      int v6 = 12341;
    }
    BOOL v7 = a2 == v6;
    return !v7;
  }
  if ((a1 - 8208) <= 0x16)
  {
    int v4 = 1 << (a1 - 16);
    if ((v4 & 0x3D) != 0)
    {
LABEL_4:
      if ((a2 - 8208) > 5) {
        return a2 != 45;
      }
      uint64_t result = 0;
      if (a2 == 8209) {
        return a2 != 45;
      }
      return result;
    }
    if ((v4 & 0x600000) != 0)
    {
      BOOL v7 = a2 == a1;
      return !v7;
    }
  }
  if (a1 == 45) {
    goto LABEL_4;
  }
  if (a1 == 47)
  {
    BOOL v7 = a2 == 47;
    return !v7;
  }
LABEL_20:
  if sub_1001CA378(a1) && (sub_1001CA378(a2)) {
    return 0;
  }
  if (sub_1001CA7E4(a1)) {
    return sub_1001CA7E4(a2) ^ 1;
  }
  return 1;
}

double sub_1001CAA28(int a1)
{
  double result = 0.0;
  if (a1 > 10628)
  {
    if (((a1 - 12289) > 0x1E || ((1 << (a1 - 1)) & 0x51F9FF81) == 0) && (a1 - 10629) >= 2)
    {
      if (a1 != 12539) {
        return result;
      }
      return 0.5;
    }
    return 0.25;
  }
  if (a1 > 122)
  {
    if ((a1 - 8216) <= 5 && ((1 << (a1 - 24)) & 0x33) != 0
      || (a1 - 125) <= 0x3E && ((1 << (a1 - 125)) & 0x4000400000000001) != 0
      || a1 == 123)
    {
      return 0.25;
    }
  }
  else
  {
    char v2 = a1 - 32;
    if ((a1 - 32) > 0x3D) {
      return result;
    }
    if (((1 << v2) & 0x2800000000001300) != 0) {
      return 0.25;
    }
    if (((1 << v2) & 0xC000000) != 0) {
      return 0.5;
    }
    if (a1 == 32) {
      return 0.0833333333;
    }
  }
  return result;
}

unint64_t sub_1001CAB34(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 length];
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF620);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086AFC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF640);
    }
    long long v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int v6 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    BOOL v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1318, 0, "invalid nil value for '%{public}s'", "source");
  }
  if ((unint64_t)[v3 charIndexMappedToStorage:v4] >= a1)
  {
    if (!v3)
    {
      a1 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_23;
    }
    uint64_t v12 = (char *)[v3 charIndexMappedFromStorage:a1];
    uint64_t v13 = v12;
    if (v12)
    {
      if ((unint64_t)v12 < 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = [v3 string];
        for (id i = (id)a1; i == (id)a1 && v13; id i = [v3 charIndexMappedToStorage:v13])
        {
          long long v15 = (char *)[v9 rangeOfComposedCharacterSequenceAtIndex:--v13];
          if (v13 >= v15) {
            uint64_t v13 = v15;
          }
        }
        a1 = (unint64_t)i;
        goto LABEL_22;
      }
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF6E0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101086A74();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF700);
      }
      int64_t v17 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      uint64_t v9 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
      CFDictionaryRef v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1326 isFatal:0 description:"charIndex should be < NSNotFound"];
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF6A0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010869EC();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF6C0);
      }
      uint64_t v16 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      uint64_t v9 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
      CFDictionaryRef v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1325 isFatal:0 description:"charIndex should not be at the start of the text source"];
    }
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF660);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086964();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF680);
    }
    uint64_t v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v9 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    CFDictionaryRef v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1321 isFatal:0 description:"charIndex should be <= end of storage"];
    a1 = 0x7FFFFFFFFFFFFFFFLL;
  }

LABEL_22:
LABEL_23:

  return a1;
}

void sub_1001CB0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CB1A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB1E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB22C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB270(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB2B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB2F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB33C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB380(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001CB3C4(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (char *)[v3 length];
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF720);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086CA0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF740);
    }
    long long v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int v6 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    BOOL v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1347, 0, "invalid nil value for '%{public}s'", "source");
  }
  if ((unint64_t)[v3 charIndexMappedToStorage:v4] < a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF760);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086B90();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF780);
    }
    uint64_t v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v9 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    CFDictionaryRef v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1350 isFatal:0 description:"charIndex should be <= end of storage"];

    uint64_t i = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  if (!v3)
  {
    uint64_t i = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_43;
  }
  uint64_t v12 = (char *)[v3 charIndexMappedFromStorage:a1];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF7A0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086C18();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF7C0);
    }
    uint64_t v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int64_t v17 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    CFTypeRef v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v17 file:v18 lineNumber:1353 isFatal:0 description:"charIndex should be < NSNotFound"];

    goto LABEL_42;
  }
  if (v12 >= v4 - 1)
  {
LABEL_42:
    uint64_t i = (uint64_t)[v3 charIndexMappedToStorage:v13 + 1];
    goto LABEL_43;
  }
  uint64_t v9 = [v3 string];
  for (uint64_t i = a1; i == a1 && v13 < v4; uint64_t i = (uint64_t)[v3 charIndexMappedToStorage:v13])
  {
    CTFontRef v14 = (char *)[v9 rangeOfComposedCharacterSequenceAtIndex:v13];
    if (&v14[v15] <= v13 + 1) {
      ++v13;
    }
    else {
      uint64_t v13 = &v14[v15];
    }
  }
LABEL_21:

LABEL_43:
  return i;
}

void sub_1001CB86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CB914(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB958(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB99C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CB9E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CBA24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CBA68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001CBAB0(unint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF7E0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086E44();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF800);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    long long v5 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 1404, 0, "invalid nil value for '%{public}s'", "source");
  }
  id v7 = [v3 length];
  if ((unint64_t)v7 <= a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF820);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086DBC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF840);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v13 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    CTFontRef v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:1406 isFatal:0 description:"index out of bounds"];

    id v8 = 0;
  }
  else
  {
    id v8 = [v3 characterAtIndex:a1];
    if (((unsigned __int16)v8 & 0xFC00) == 0xDC00)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF860);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101086D34();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF880);
      }
      uint64_t v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      CFDictionaryRef v10 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
      uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:1410 isFatal:0 description:"index inside surrogate pair"];
    }
    else if (a1 + 1 < (unint64_t)v7 && ((unsigned __int16)v8 & 0xFC00) == 0xD800)
    {
      unsigned int v16 = [v3 characterAtIndex:];
      unsigned int v17 = v16;
      if (v16 >> 10 == 55)
      {
        id v8 = (id)(v16 + (v8 << 10) - 56613888);
      }
      else
      {
        unsigned int v18 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DF8A0);
        }
        uint64_t v19 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110402;
          unsigned int v24 = v18;
          __int16 v25 = 2082;
          double v26 = "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)";
          __int16 v27 = 2082;
          uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm";
          __int16 v29 = 1024;
          int v30 = 1414;
          __int16 v31 = 1024;
          int v32 = (int)v8;
          __int16 v33 = 1024;
          unsigned int v34 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid surrogate pair: %x:%x", buf, 0x2Eu);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DF8C0);
        }
        CFStringRef v20 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_10107F4C8();
        }

        long long v21 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
        CFRange v22 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 1414, 0, "invalid surrogate pair: %x:%x", v8, v17);
      }
    }
  }

  return v8;
}

void sub_1001CC0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CC178(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC1BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC200(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC244(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC288(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC2CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC310(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CC354(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001CC398(unint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF8E0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086FE8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF900);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    long long v5 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForString(NSUInteger, NSString *__strong)"];
    int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 1426, 0, "invalid nil value for '%{public}s'", "str");
  }
  id v7 = [v3 length];
  if ((unint64_t)v7 <= a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF920);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101086F60();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DF940);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v13 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForString(NSUInteger, NSString *__strong)"];
    CTFontRef v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:1428 isFatal:0 description:"index out of bounds"];

    id v8 = 0;
  }
  else
  {
    id v8 = [v3 characterAtIndex:a1];
    if (((unsigned __int16)v8 & 0xFC00) == 0xDC00)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF960);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101086ED8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF980);
      }
      uint64_t v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      CFDictionaryRef v10 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForString(NSUInteger, NSString *__strong)"];
      uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:1432 isFatal:0 description:"index inside surrogate pair"];
    }
    else if (a1 + 1 < (unint64_t)v7 && ((unsigned __int16)v8 & 0xFC00) == 0xD800)
    {
      unsigned int v16 = [v3 characterAtIndex:];
      unsigned int v17 = v16;
      if (v16 >> 10 == 55)
      {
        id v8 = (id)(v16 + (v8 << 10) - 56613888);
      }
      else
      {
        unsigned int v18 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DF9A0);
        }
        uint64_t v19 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110402;
          unsigned int v24 = v18;
          __int16 v25 = 2082;
          double v26 = "UTF32Char CRLWPComposedCharacterAtIndexForString(NSUInteger, NSString *__strong)";
          __int16 v27 = 2082;
          uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm";
          __int16 v29 = 1024;
          int v30 = 1436;
          __int16 v31 = 1024;
          int v32 = (int)v8;
          __int16 v33 = 1024;
          unsigned int v34 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid surrogate pair: %x:%x", buf, 0x2Eu);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014DF9C0);
        }
        CFStringRef v20 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_10107F4C8();
        }

        long long v21 = +[NSString stringWithUTF8String:"UTF32Char CRLWPComposedCharacterAtIndexForString(NSUInteger, NSString *__strong)"];
        CFRange v22 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 1436, 0, "invalid surrogate pair: %x:%x", v8, v17);
      }
    }
  }

  return v8;
}

void sub_1001CC9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CCA60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCAA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCAE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCB2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCB70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCBB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCBF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCC3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

char *sub_1001CCC80(char *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = v5;
  id v7 = &a1[a2];
  if (a1 == (char *)0x7FFFFFFFFFFFFFFFLL && a2 == 0)
  {
    CTFontRef v14 = a1;
  }
  else
  {
    if (!v5)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DF9E0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108707C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DFA00);
      }
      uint64_t v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      CFDictionaryRef v10 = +[NSString stringWithUTF8String:"NSRange CRLWPRangeByExtendingRangeToWhitespaceForTextSource(NSRange, __strong id<CRLWPTextSource>)"];
      uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1451, 0, "invalid nil value for '%{public}s'", "textSource");
    }
    uint64_t v12 = (char *)[v6 length];
    uint64_t v13 = [v6 string];
    do
    {
      CTFontRef v14 = a1;
      if (!a1) {
        break;
      }
      --a1;
    }
    while ((sub_1001CA378((uint64_t)[v13 characterAtIndex:v14 - 1]) & 1) == 0);
    if (v7 < v12)
    {
      while ((sub_1001CA378((uint64_t)[v13 characterAtIndex:v7]) & 1) == 0)
      {
        if (++v7 >= v12)
        {
          id v7 = v12;
          break;
        }
      }
    }
  }
  if (v14 < v7) {
    id v7 = v14;
  }

  return v7;
}

void sub_1001CCED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CCF28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CCF6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001CCFB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFA20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101087110();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFA40);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    int v6 = +[NSString stringWithUTF8String:"BOOL CRLWPHasWideBreakingCharacter(CRLWPCharIndex, __strong id<CRLWPTextSource>)"];
    id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:1472 isFatal:0 description:"bad charIndex"];

    uint64_t v8 = 0;
  }
  else
  {
    unsigned int v9 = [v3 characterAtIndex:a1];
    if (v9 >= 0xD) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (0x1030u >> v9) & 1;
    }
  }

  return v8;
}

void sub_1001CD178(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001CD1C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CD204(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001CD248(UChar32 a1)
{
  UCharDirection v2 = u_charDirection(a1);
  if (v2 > U_BOUNDARY_NEUTRAL) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = dword_101176D70[v2];
  }
  if (a1 == 65532) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001CD298(void *a1)
{
  return sub_1001CD2A0(a1, 0);
}

uint64_t sub_1001CD2A0(void *a1, int a2)
{
  id v3 = a1;
  id v4 = [v3 length];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    while (1)
    {
      UChar32 v7 = [v3 crlwp_utf32CharacterAtIndex:v5];
      int v8 = sub_1001CD248(v7);
      if (v8 == 1) {
        break;
      }
      if (v8 == 2 || a2 && v8 == 3 && u_charDirection(v7) == U_ARABIC_NUMBER) {
        goto LABEL_14;
      }
      if ((v7 & 0xFFFF0000) != 0) {
        uint64_t v9 = v5 + 1;
      }
      else {
        uint64_t v9 = v5;
      }
      uint64_t v5 = v9 + 1;
      if (v9 + 1 >= (unint64_t)v4) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = 0;
  }
  else
  {
LABEL_12:
    uint64_t v6 = -1;
  }
LABEL_14:

  return v6;
}

void sub_1001CD354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CD36C(void *a1, unint64_t a2)
{
  id v3 = a1;
  id v4 = [v3 firstObject];
  uint64_t v5 = v4;
  if (v4 && [v4 wantsCustomResolveLogicForProperty:a2 forStyles:v3])
  {
    uint64_t v6 = [v5 resolvedValueForProperty:a2 inStyles:v3];
  }
  else
  {
    for (unsigned int i = 0; ; unsigned int i = v8 + 1)
    {
      unsigned int v8 = i;
      if ((unint64_t)[v3 count] <= i)
      {
        uint64_t v6 = 0;
        goto LABEL_14;
      }
      uint64_t v9 = [v3 objectAtIndexedSubscript:i];
      CFDictionaryRef v10 = v9;
      if (v9)
      {
        uint64_t v6 = [v9 boxedValueForProperty:a2];
        if (v6)
        {
          uint64_t v11 = +[NSNull null];

          if (v6 != v11) {
            goto LABEL_13;
          }

          if (((a2 < 0x33) & (0x40001049405D0uLL >> a2)) != 0) {
            break;
          }
        }
      }
    }
    uint64_t v6 = 0;
LABEL_13:
  }
LABEL_14:

  return v6;
}

void sub_1001CD4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CD4F8(void *a1, void *a2, unint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  UChar32 v7 = +[NSMutableArray array];
  [v7 crl_addNonNilObject:v5];
  [v7 crl_addNonNilObject:v6];
  unsigned int v8 = sub_1001CD36C(v7, a3);

  return v8;
}

void sub_1001CD590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CD5B0(void *a1, void *a2, uint64_t a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = +[NSMutableArray array];
  [v9 crl_addNonNilObject:v7];
  [v9 crl_addNonNilObject:v8];
  uint64_t v10 = sub_1001CD664(v9, a3, a4);

  return v10;
}

void sub_1001CD644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CD664(void *a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  id v5 = a1;
  id v6 = [v5 firstObject];
  if ([v6 wantsCustomResolveLogicForProperty:a2 forStyles:v5])
  {
    LODWORD(v3) = [v6 resolvedIntForProperty:a2 inStyles:v5];
    unsigned int v7 = 0x80000000;
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v14;
LABEL_5:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v8);
        }
        unsigned int v7 = [*(id *)(*((void *)&v13 + 1) + 8 * v11) intValueForProperty:a2];
        if (v7 != 0x80000000) {
          break;
        }
        if (v9 == (id)++v11)
        {
          id v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
          if (v9) {
            goto LABEL_5;
          }
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      unsigned int v7 = 0x80000000;
    }
  }
  if (v7 == 0x80000000) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v7;
  }

  return v3;
}

void sub_1001CD7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001CD810(void *a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = +[NSMutableArray array];
  [v9 crl_addNonNilObject:v7];
  [v9 crl_addNonNilObject:v8];
  double v10 = sub_1001CD8C4(v9, a3, a4);

  return v10;
}

void sub_1001CD8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001CD8C4(void *a1, uint64_t a2, double a3)
{
  id v5 = a1;
  id v6 = [v5 firstObject];
  if ([v6 wantsCustomResolveLogicForProperty:a2 forStyles:v5])
  {
    [v6 resolvedFloatForProperty:a2 inStyles:v5];
    a3 = v7;
    double v8 = INFINITY;
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
    double v8 = INFINITY;
    if (v10)
    {
      uint64_t v11 = *(void *)v17;
LABEL_5:
      uint64_t v12 = 0;
      while (1)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v12) floatValueForProperty:a2 v16];
        float v14 = v13;
        if (v13 != INFINITY) {
          break;
        }
        if (v10 == (id)++v12)
        {
          id v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
          if (v10) {
            goto LABEL_5;
          }
          break;
        }
      }
      double v8 = v14;
    }
  }
  if (v8 != INFINITY) {
    a3 = v8;
  }

  return a3;
}

void sub_1001CDA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CDA80(void *a1, void *a2, unint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFA60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108722C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFA80);
    }
    float v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    double v8 = +[NSString stringWithUTF8String:"CTFontRef  _Nonnull CRLWPFastCreateFontForStyle(CRLWPCharacterStyle * _Nullable __strong, CRLWPParagraphStyle * _Nonnull __strong, NSUInteger)"];
    id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:1807 isFatal:0 description:"paragraphStyle is not allowed to be nil"];
  }
  id v10 = +[NSMutableArray array];
  [v10 crl_addNonNilObject:v5];
  [v10 crl_addNonNilObject:v6];
  uint64_t v11 = sub_1001CDEB8(v10, a3);

  if (!v11)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFAA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101087198();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFAC0);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    float v13 = +[NSString stringWithUTF8String:"CTFontRef  _Nonnull CRLWPFastCreateFontForStyle(CRLWPCharacterStyle * _Nullable __strong, CRLWPParagraphStyle * _Nonnull __strong, NSUInteger)"];
    float v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 1820, 0, "invalid nil value for '%{public}s'", "font");

    uint64_t v11 = (uint64_t)sub_1001C9BC4(@"TimesNewRomanPSMT", 13.0);
  }

  return v11;
}

void sub_1001CDDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CDE30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CDE74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001CDEB8(void *a1, unint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = sub_1001CD36C(v3, 0x11uLL);
  if (!v4)
  {
    sub_1001CD36C(v3, 9uLL);
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DFAE0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010872B4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014DFB00);
      }
      id v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_10107F4C8();
      }

      float v7 = +[NSString stringWithUTF8String:"CTFontRef  _Nonnull CRLWPCreateFontForStylesWithScale(NSArray<id<CRLWPStyleProxy>> * _Nonnull __strong, NSUInteger)"];
      double v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:1849 isFatal:0 description:"Failed to resolve font name"];

      id v5 = @"Helvetica";
    }
    int v9 = sub_1001CD664(v3, 1, 0);
    int v10 = sub_1001CD664(v3, 13, 0);
    double v11 = sub_1001CD8C4(v3, 11, 12.0);
    int v12 = sub_1001CD664(v3, 22, 0);
    float v13 = sub_1001CD36C(v3, 0xAuLL);
    double v14 = v11 * (double)a2 / 100.0;
    if (v12) {
      double v14 = v14 * 0.666666687;
    }
    uint64_t v4 = (uint64_t)sub_1001CE260(v5, v9 != 0, v10 != 0, v13, v14);
  }
  return v4;
}

void sub_1001CE144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CE1D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CE21C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CFTypeRef sub_1001CE260(void *a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  id v9 = a1;
  id v10 = a4;
  double v11 = +[CRLWPFontList sharedInstance];
  if ([v10 count])
  {
    int v12 = [v11 fontForPostscriptName:v9];
    id v13 = [v12 copyWithSize:a2 bold:a3 italic:v10 traits:a5];
    CFTypeRef v14 = CFRetain([v13 ctFont]);
  }
  else
  {
    int v12 = [v11 fontForPostscriptName:v9 atSize:a2 bold:a3 italic:a5];
    CFTypeRef v14 = CFRetain([v12 ctFont]);
  }

  return v14;
}

void sub_1001CE354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CE394(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CE3D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  UCharDirection v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1001CE41C(const __CTFont *a1)
{
  double Ascent = CTFontGetAscent(a1);
  double Descent = CTFontGetDescent(a1);
  double Leading = CTFontGetLeading(a1);
  BoundingBoCGFloat x = CTFontGetBoundingBox(a1);
  CGFloat x = BoundingBox.origin.x;
  CGFloat y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;
  double v9 = floor(Leading + 0.5);
  if (Leading <= 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  double v19 = floor(Ascent + 0.5) + floor(Descent + 0.5);
  CGFloat v11 = y;
  if (CGRectGetMaxY(BoundingBox) <= Ascent)
  {
    v23.origin.CGFloat x = x;
    v23.origin.CGFloat y = y;
    v23.size.CGFloat width = width;
    v23.size.CGFloat height = height;
    BOOL v12 = CGRectGetMinY(v23) < -(Descent + Leading);
  }
  else
  {
    BOOL v12 = 1;
  }
  double v13 = v19 + v10;
  CGGlyph glyphs = 0;
  UniChar characters = 192;
  if (v12 && v10 == 0.0 && CTFontGetGlyphsForCharacters(a1, &characters, &glyphs, 1))
  {
    CGRect BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(a1, kCTFontOrientationDefault, &glyphs, 0, 1);
    CGFloat v14 = BoundingRectsForGlyphs.origin.x;
    CGFloat v15 = BoundingRectsForGlyphs.origin.y;
    CGFloat v16 = BoundingRectsForGlyphs.size.width;
    CGFloat v17 = BoundingRectsForGlyphs.size.height;
    if (CGRectGetMaxY(BoundingRectsForGlyphs) > Ascent
      || (v25.origin.CGFloat x = v14,
          v25.origin.CGFloat y = v15,
          v25.size.CGFloat width = v16,
          v25.size.CGFloat height = v17,
          CGRectGetMinY(v25) < -Descent))
    {
      double v13 = v13 + floor(v19 * 0.200000003 + 0.5);
    }
  }
  return fmax(v13, 1.0);
}

void sub_1001CE5C0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = +[CRLWPFontMetricsCache sharedCache];
  id v5 = v4;
  if (v4)
  {
    [v4 fontHeightInfoForFont:a1];
  }
  else
  {
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
}

void sub_1001CE638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const __CTFont *sub_1001CE64C(void *a1, void *a2, double a3)
{
  id v5 = a1;
  double v6 = sub_1001CD810(a2, v5, 11, 0.0);
  float v7 = (const __CTFont *)sub_1001CDA80(0, v5, (unint64_t)a3);
  double Size = CTFontGetSize(v7);
  double v9 = a3 / 100.0 * v6;
  if (v9 != Size)
  {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v7, v9, 0, 0);
    CFRelease(v7);
    float v7 = CopyWithAttributes;
  }

  return v7;
}

void sub_1001CE6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1001CE714(const void *a1, void *a2, double a3)
{
  id v5 = a2;
  double v6 = v5;
  if (v5)
  {
    CTFontRef CopyWithAttributes = (void *)sub_1001C9BC4(v5, a3);
  }
  else if (CTFontGetSize((CTFontRef)a1) == a3)
  {
    CTFontRef CopyWithAttributes = (void *)CFRetain(a1);
  }
  else
  {
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes((CTFontRef)a1, a3, 0, 0);
  }
  double v8 = CopyWithAttributes;

  return v8;
}

void sub_1001CE798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001CE7A8(void *a1)
{
  id v1 = a1;
  double v2 = 1.0;
  if ([v1 scaleWithText])
  {
    [v1 scale];
    if (v3 != 1.0)
    {
      [v1 scale];
      double v2 = v4;
    }
  }

  return v2;
}

void sub_1001CE804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CE814(void *a1, void *a2, void *a3, void *a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v13 = sub_1001CD4F8(0, v9, 0x11uLL);
  if (!v13)
  {
    CGFloat v14 = sub_1001CE64C(v9, v10, a5);
    double Size = CTFontGetSize(v14);
    double v16 = sub_1001CE7A8(v12);
    CGFloat v17 = +[NSNull null];
    unsigned int v18 = [v11 isEqual:v17];
    double v19 = Size * v16;

    if (v18)
    {

      id v11 = 0;
    }
    uint64_t v13 = (uint64_t)sub_1001CE714(v14, v11, v19);
    CFRelease(v14);
  }

  return v13;
}

void sub_1001CE92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001CE960(double a1)
{
  return fmax(a1, 1.75);
}

double sub_1001CE96C(double a1)
{
  return fmin(a1, 1.0);
}

double sub_1001CE978()
{
  return 0.174999997;
}

void sub_1001CE984(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, int a6, double a7)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1001CE5C0(a1, &v18);
  if (a1 != a2 && *(double *)&v23 == 0.0)
  {
    long long v17 = 0u;
    memset(v16, 0, sizeof(v16));
    sub_1001CE5C0(a2, v16);
    *(void *)&long long v23 = v17;
  }
  double v14 = sub_1001CEA94(a1);
  *(double *)&long long v21 = *(double *)&v21
                  + v14
                  - (*((double *)&v20 + 1)
                   + *(double *)&v19
                   + *(double *)&v20
                   + *((double *)&v20 + 1));
  v15[4] = v22;
  v15[5] = v23;
  v15[0] = v18;
  v15[1] = v19;
  v15[2] = v20;
  v15[3] = v21;
  sub_1001CEB10((double *)v15, a3, a4, a5, a6, a7);
}

double sub_1001CEA94(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1001CE5C0(a1, &v3);
  double v1 = rint(*(double *)&v5 + *((double *)&v6 + 1)) * 5.3636991;
  double result = *((double *)&v6 + 1)
         + *(double *)&v3
         + *(double *)&v6
         + *(double *)&v5
         + *((double *)&v5 + 1)
         + fmax(*(double *)&v4, *((double *)&v3 + 1));
  if (result >= v1) {
    return v1;
  }
  return result;
}

double sub_1001CEB10(double *a1, uint64_t a2, int a3, unint64_t a4, int a5, double a6)
{
  double v6 = a1[2];
  double v7 = a1[4];
  double v8 = a1[5];
  double v9 = v6 + v7;
  double v10 = (v6 + v7 + v8 + a1[6]) * 0.0440277313;
  if (a1[11] != 0.0) {
    double v10 = a1[11];
  }
  double v11 = fmax(v10, 1.0);
  if (a5 == 1)
  {
    double v12 = -v6;
    double v13 = -(v7 + v8 - (v12 - v10) - (v8 + v9 * 0.5));
    if (!a3) {
      double v13 = v12;
    }
    double v14 = -0.0;
    if (a2 == 2) {
      double v14 = v10;
    }
    double v15 = v14 + v13;
    if (a2 && !a3 && a4 <= 3) {
      double v15 = v15 - v11;
    }
  }
  else
  {
    if (a3)
    {
      double v16 = -(v7 + v8 - (v7 + v10) - (v8 + v9 * 0.5));
    }
    else
    {
      if (!a2 || (double v16 = a1[4], a4 >= 4)) {
        double v16 = -a1[10];
      }
      if (v16 < 1.0) {
        double v16 = floor(v7 + a1[7]) * 5.3636991 * 0.0880554625;
      }
    }
    double v17 = fmax(fmax(v10, 1.75) - v10, 0.0) + v16;
    if (a3) {
      double v17 = v16;
    }
    double v18 = v16 - v10;
    if (a2 != 2) {
      double v18 = v16;
    }
    if (a2 == 3) {
      double v15 = v17;
    }
    else {
      double v15 = v18;
    }
  }
  return v15 + a6;
}

BOOL sub_1001CEC8C(unint64_t a1)
{
  return a1 < 4;
}

void sub_1001CEC98(uint64_t a1, int a2, int a3, double a4)
{
  double v8 = sub_1001CEA94(a1);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  sub_1001CE5C0(a1, &v10);
  *(double *)&long long v13 = *(double *)&v13 + v8 - (*(double *)&v11 + *(double *)&v12 + *((double *)&v12 + 1) + *(double *)&v13);
  v9[4] = v14;
  v9[5] = v15;
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  sub_1001CED50((double *)v9, a2, a3, a4);
}

double sub_1001CED50(double *a1, int a2, int a3, double a4)
{
  double result = a4 + a1[9] * -0.5;
  if (a2 && !a3) {
    return -(a1[4] + a1[5] - result - (a1[5] + (a1[2] + a1[4]) * 0.5));
  }
  if (a2) {
    return 0.0;
  }
  return result;
}

BOOL sub_1001CEDC4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v5 = (unint64_t)(a5 & 2) >> 1;
  if ((a5 & 2) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = a3 + !(a5 & 1);
  if ((a5 & 1) == 0) {
    unint64_t v5 = v6;
  }
  unint64_t v8 = a4 + v5;
  return a1 >= v7 && a1 - v7 < v8;
}

void sub_1001CEDF4(CGRect **a1)
{
  CGFloat x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  unint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  while (v5 != v6)
    *(CGRect *)&CGFloat x = CGRectUnion(*(CGRect *)&x, *v5++);
}

uint64_t sub_1001CEE40(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 0;
  for (unsigned int i = &dword_101176BA0; *((void *)i - 2) != a1 || (((0x33333uLL >> v3) & 1) == 0) == a2 || *(i - 1) != a3; i += 6)
  {
    if (++v3 == 20) {
      return 0;
    }
  }
  return *i;
}

BOOL sub_1001CEEA0()
{
  v0 = -[CRLWPEditorHelper editorKeyboardLanguage]_0();
  BOOL v1 = (id)+[NSLocale characterDirectionForLanguage:v0] == (id)2;

  return v1;
}

void sub_1001CEEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF398(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CF3DC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CF420(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CF464(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1001CF4A8(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1001CF4B4(unint64_t a1)
{
  return (a1 < 0x31) & (0x1249249248000uLL >> a1);
}

uint64_t sub_1001CF4D4(unint64_t a1)
{
  if (a1 >= 5)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFBA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101087458();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014DFBC0);
    }
    double v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_10107F4C8();
    }

    uint64_t v3 = +[NSString stringWithUTF8String:"CRLWPParagraphAlignment CRLWPParagraphAlignmentFromNSTextAlignment(NSTextAlignment)"];
    long long v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 3271, 0, "Bad text alignment (%lu).", a1);
  }
  if (a1 - 1 > 3) {
    return 0;
  }
  else {
    return qword_101176DC0[a1 - 1];
  }
}

void sub_1001CF688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF6B0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CF6F4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001CF738(void *a1, void *a2)
{
  id v3 = a1;
  long long v4 = a2;
  sub_1001CF82C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v5);
  uint64_t v6 = [v5 objectForKey:v3];
  if (!v6)
  {
    uint64_t v6 = v4[2](v4);
    [v5 setObject:v6 forKey:v3];
  }
  objc_sync_exit(v5);

  return v6;
}

void sub_1001CF804(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

id sub_1001CF82C()
{
  if (qword_1016A92A0 != -1) {
    dispatch_once(&qword_1016A92A0, &stru_1014DFBE0);
  }
  v0 = (void *)qword_1016A92A8;

  return v0;
}

void sub_1001CF880(id a1)
{
  id v1 = objc_alloc_init((Class)NSCache);
  double v2 = (void *)qword_1016A92A8;
  qword_1016A92A8 = (uint64_t)v1;

  id v3 = (void *)qword_1016A92A8;

  [v3 setName:@"CRLWPObjectCache"];
}

void sub_1001CFCF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001CFD34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D04D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D0514(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D0558(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D059C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGColorRef sub_1001D0764()
{
  return sub_10000FE5C(0.996078432, 0.956862748, 0.611764729, 1.0);
}

CGColorRef sub_1001D0784()
{
  return sub_10000FE5C(1.0, 1.0, 1.0, 1.0);
}

void sub_1001D0B34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D0B78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D0BBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D0C00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D1C6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D1CB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D21AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D21F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D24D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D2514(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D2814(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D2858(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D2B70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D2BB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D343C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D3480(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D34C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D3508(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D354C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D3590(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D3AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

id sub_1001D3AFC(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  v11.CGFloat y = a3;
  v11.CGFloat x = a2;
  id result = (id)CGRectContainsPoint(*(CGRect *)(a1 + 80), v11);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    if (*(unsigned char *)(v7 + 24)) {
      goto LABEL_11;
    }
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a4;
    char v8 = 1;
    goto LABEL_9;
  }
  if (!*(unsigned char *)(v7 + 24)) {
    goto LABEL_11;
  }
  double v9 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  double v10 = *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (v9 != v10 && vabdd_f64(v9, v10) >= fabs(v10 * 0.000000999999997))
  {
    id result = [*(id *)(a1 + 112) p_appendPath:*(void *)(a1 + 32) fromStartPercent:*(void *)(a1 + 40)];
    char v8 = 0;
LABEL_9:
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    goto LABEL_10;
  }
  char v8 = 0;
LABEL_10:
  *(unsigned char *)(v7 + 24) = v8;
LABEL_11:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    **(unsigned char **)(a1 + 120) = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ^ 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a4;
  return result;
}

void sub_1001D3C08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D3C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5498(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D54DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5520(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5564(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D55A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D55EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5630(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5674(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D56B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D56FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D59E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D5A28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001D5D1C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *(unsigned char *)(*(void *)(result + 40) + 16);
  return result;
}

uint64_t sub_1001D5DC4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 16))
  {
    *(unsigned char *)(v1 + 16) = 1;
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16))();
  }
  return result;
}

void sub_1001D6C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_1001D6CDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D6D20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D6D64(uint64_t a1, uint64_t a2)
{
  id v22 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
  long long v4 = [v22 first];
  id v5 = [v22 second];
  [v5 crl_CGFloatValue];
  double v7 = v6;

  if (v7 <= 0.0)
  {
    BOOL v10 = 0;
  }
  else
  {
    char v8 = [v4 mask];
    if (v8)
    {
      id v9 = [v4 mask];
      BOOL v10 = (unint64_t)sub_1000D661C((const CGPath *)[v9 CGPath]) > 0x3E8;
    }
    else
    {
      BOOL v10 = 0;
    }
  }
  CGPoint v11 = [v4 crl_strokeForTracingWithOutset:v10 shouldIgnoreMask:v7];
  [v11 renderBounds];
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 48) + 8) + 32));
  v24.origin.CGFloat x = v13;
  v24.origin.CGFloat y = v15;
  v24.size.CGFloat width = v17;
  v24.size.CGFloat height = v19;
  *(CGRect *)(*(void *)(*(void *)(a1 + 56) + 8) + 32) = CGRectUnion(*(CGRect *)(*(void *)(*(void *)(a1 + 56) + 8)+ 32), v24);
  long long v20 = *(void **)(a1 + 40);
  long long v21 = +[NSNumber numberWithUnsignedLong:a2];
  [v20 setObject:v11 forKeyedSubscript:v21];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 48) + 8) + 32));
}

void sub_1001D6F10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D6F54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_1001D6F98(void *a1)
{
  *a1 = off_1014E01E0;
  for (uint64_t i = 1; i != 257; ++i)
  {
    id v3 = (void *)a1[i];
    a1[i] = 0;
  }
  uint64_t v4 = 256;
  do

  while (v4 * 8);
  return a1;
}

void sub_1001D700C(void *a1)
{
  sub_1001D6F98(a1);

  operator delete();
}

uint64_t sub_1001D7044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (!*(void *)(a1 + 8 + 8 * v2))
  {
    if (++v2 == 256) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return a2 + v2;
}

uint64_t sub_1001D7070(uint64_t a1, uint64_t a2)
{
  for (unsigned int i = 255; ; --i)
  {
    unsigned int v3 = i;
    if (*(void *)(a1 + 8 * i + 8)) {
      break;
    }
    if (!v3) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return i + a2;
}

id sub_1001D70A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSMutableIndexSet indexSet];
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 8;
  do
  {
    if (*(void *)(v6 + 8 * v5)) {
      [v4 addIndex:a2 + v5];
    }
    ++v5;
  }
  while (v5 != 256);
  id v7 = [objc_alloc((Class)NSIndexSet) initWithIndexSet:v4];

  return v7;
}

void sub_1001D7138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D714C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = 0;
  BOOL v10 = a2;
  uint64_t v8 = a1 + 8;
  do
  {
    if (*a4) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 8 * v7);
    if (v9) {
      v10[2](v10, v9, a3 + v7, a4);
    }
    ++v7;
  }
  while (v7 != 256);
}

void sub_1001D71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001D71F8()
{
}

void *sub_1001D7280(void *a1)
{
  *a1 = off_1014E0228;
  for (uint64_t i = 1; i != 257; ++i)
  {
    uint64_t v3 = a1[i];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      a1[i] = 0;
    }
  }
  return a1;
}

void sub_1001D7304(void *a1)
{
  sub_1001D7280(a1);

  operator delete();
}

void sub_1001D733C()
{
}

uint64_t sub_1001D73E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2 << 8;
  uint64_t v4 = a1 + 8;
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + v2);
    if (v5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      if (result != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
    }
    v3 += 256;
    v2 += 8;
    if (v2 == 2048) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_1001D7468(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (a2 << 8) + 65280;
  uint64_t v4 = 2048;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + v4);
    if (v5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v3);
      if (result != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
    }
    v3 -= 256;
    v4 -= 8;
    if (!v4) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return result;
}

id sub_1001D74E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSMutableIndexSet indexSet];
  uint64_t v5 = 0;
  uint64_t v6 = a2 << 8;
  uint64_t v7 = a1 + 8;
  do
  {
    uint64_t v8 = *(void *)(v7 + v5);
    if (v8)
    {
      uint64_t v9 = (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v6);
      [v4 addIndexes:v9];
    }
    v6 += 256;
    v5 += 8;
  }
  while (v5 != 2048);
  id v10 = [objc_alloc((Class)NSIndexSet) initWithIndexSet:v4];

  return v10;
}

void sub_1001D75C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D75E4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v11 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = a3 << 8;
  uint64_t v9 = a1 + 8;
  do
  {
    if (*a4) {
      break;
    }
    uint64_t v10 = *(void *)(v9 + v7);
    if (v10) {
      (*(void (**)(uint64_t, id, uint64_t, unsigned char *))(*(void *)v10 + 40))(v10, v11, v8, a4);
    }
    v8 += 256;
    v7 += 8;
  }
  while (v7 != 2048);
}

void sub_1001D7694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001D7868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001D7888(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001D7898(uint64_t a1)
{
}

void sub_1001D78A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  uint64_t v5 = +[NSString stringWithFormat:@"%@\n   [%lu] = %@", *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3, v8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1001D7928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001D7AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D7B0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D7B50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D7EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D7F14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D7F58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D8188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001D81A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8 * a3;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v5 = (id *)(v4 + 8);
  uint64_t v6 = v7;
  if (a2) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = -1;
  }
  if (v6) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = a2 != 0;
  }
  objc_storeStrong(v5, a2);

  return v9;
}

void sub_1001D829C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001D8324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKey:a3];
}

void sub_1001D84DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

intptr_t sub_1001D84F4()
{
  v0 = getsectbyname("__TEXT", "__text");
  uint64_t addr = v0->addr;
  uint64_t offset = v0->offset;
  uint32_t bufsize = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    intptr_t image_vmaddr_slide = -1;
  }
  else if (_dyld_image_count())
  {
    uint32_t v4 = 0;
    while (1)
    {
      image_name = _dyld_get_image_name(v4);
      if (!strcmp(image_name, buf)) {
        break;
      }
      if (++v4 >= _dyld_image_count()) {
        goto LABEL_7;
      }
    }
    intptr_t image_vmaddr_slide = _dyld_get_image_vmaddr_slide(v4);
  }
  else
  {
LABEL_7:
    intptr_t image_vmaddr_slide = 0;
  }
  return addr - offset + image_vmaddr_slide;
}

void sub_1001D88DC(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E0370);
  }
  uint64_t v6 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
  {
    sub_1010880B4(v6);
    if (a3) {
      goto LABEL_5;
    }
  }
  else if (a3)
  {
LABEL_5:
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = +[NSString stringWithFormat:@"Terminating application due to %@", v5];
LABEL_9:
    uint64_t v9 = v8;
    [v7 addObject:v8];

    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = [v5 copy];
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1001D89C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D8A88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D8B68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001D92AC(id a1)
{
  uint64_t v1 = +[NSDictionary sharedKeySetForKeys:&off_10155CB60];
  uint64_t v2 = (void *)qword_1016A92C0;
  qword_1016A92C0 = v1;

  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  uint32_t v4 = (void *)qword_1016A92C8;
  qword_1016A92C8 = (uint64_t)v3;

  dword_1016A92D0 = 0;
}

void sub_1001D9398(id a1)
{
  uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
  if (v1) {
    uint64_t v1 = dlsym(v1, "SimulateCrash");
  }
  off_1016A92D8 = v1;
}

void sub_1001D9678(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  uint64_t v2 = +[NSString stringWithUTF8String:a1];
  id v3 = [objc_alloc((Class)NSString) crl_initRedactedWithFormat:v2 arguments:v7];
  uint32_t v4 = (const char *)[v3 UTF8String];
  uint64_t v6 = 0;
  if (v4)
  {
    asprintf(&v6, "%s", v4);
    id v5 = v6;
  }
  else
  {
    id v5 = 0;
  }
  if (!v5) {
    id v5 = "CRLSetCrashReporterInfo: unknown reason";
  }
  qword_101719CB0 = (uint64_t)v5;
}

void sub_1001D9720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001DA418(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DA45C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DA4A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DA4E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DA528(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DA56C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DAAAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DAAF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DAF54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DAF98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DAFDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB020(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DB494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DB4EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB530(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DB7A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB7E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DB8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DBBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DBC78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DBCBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DBD00(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E0678);
    }
    uint64_t v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (objc_class *)objc_opt_class();
      NSStringFromClass(v9);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      id v11 = [v7 domain];
      int v12 = 138544130;
      id v13 = v10;
      __int16 v14 = 2114;
      CGFloat v15 = v11;
      __int16 v16 = 2048;
      id v17 = [v7 code];
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v8, OS_LOG_TYPE_ERROR, "Failed to serialize pasteboard object - Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v12, 0x2Au);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), a2);
    *(unsigned char *)(*(void *)(a1 + 32) + 66) = 1;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 65) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1001DBEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DBEF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001DC16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC1A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DC1E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DC3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC9EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1001DCA30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DCA74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DCB9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DCBE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001DCC24(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 30) = v2;
  *(_WORD *)(a2 + 34) = 2114;
  *(void *)(a2 + 36) = result;
  return result;
}

void sub_1001DCC38(float a1, uint64_t a2, uint64_t a3, int a4)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = a4;
  *(_WORD *)(a3 + _Block_object_dispose(&STACK[0x240], 8) = 2082;
}

void sub_1001DD158(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DD19C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DD500(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DD544(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DD7B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DD7F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001DD994(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendBezierPath:a2];
}

id sub_1001DD9A0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendBezierPath:a2];
}

void sub_1001DDB6C(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL && v7 == 0)
  {
    int v11 = 0;
  }
  else
  {
    BOOL v10 = a3 >= v6;
    unint64_t v9 = a3 - v6;
    BOOL v10 = !v10 || v9 >= v7;
    int v11 = !v10;
  }
  int v12 = *(void **)(a1 + 32);
  id v15 = v5;
  if (v12)
  {
    unsigned int v13 = [v12 containsCharacterAtIndex:a3];
    id v5 = v15;
    int v14 = v13 ^ 1;
  }
  else
  {
    int v14 = 0;
  }
  if (((v11 | v14) & 1) == 0)
  {
    [*(id *)(a1 + 40) appendBezierPath:v15];
    id v5 = v15;
  }
}

void sub_1001DDC24(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL && v7 == 0)
  {
    int v11 = 0;
  }
  else
  {
    BOOL v10 = a3 >= v6;
    unint64_t v9 = a3 - v6;
    BOOL v10 = !v10 || v9 >= v7;
    int v11 = !v10;
  }
  int v12 = *(void **)(a1 + 32);
  if (v12)
  {
    id v16 = v5;
    unsigned int v13 = [v12 containsCharacterAtIndex:a3];
    id v5 = v16;
    int v14 = v13 ^ 1;
  }
  else
  {
    int v14 = 0;
  }
  if (((v11 | v14) & 1) == 0 && (*(void *)(a1 + 64) != 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 72) != 0))
  {
    id v17 = v5;
    [*(id *)(a1 + 40) appendBezierPath:v5];
    id v5 = v17;
  }
}

void sub_1001DE0E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE12C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE170(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE1B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE43C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE480(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE638(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DE67C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF758(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF79C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF7E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF824(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF868(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF8AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF8F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF934(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF978(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DF9BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001DFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DFD18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001DFD28(uint64_t a1)
{
}

void sub_1001DFD30(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) p_repsForStorage:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint32_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001E0968(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E09AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E09F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E0A34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E0A78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E0ABC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E0F9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E0FE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1024(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1068(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001E10AC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) p_blendingColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint64_t v3 = [CRLMetalShader alloc];
  uint32_t v4 = [*(id *)(a1 + 32) device];
  id v5 = [(CRLMetalShader *)v3 initDefaultTextureAndOpacityShaderWithDevice:v4 colorAttachment:v2];

  return v5;
}

void sub_1001E1494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E14D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E151C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1560(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001E15A4(uint64_t a1)
{
  uint64_t v2 = +[CRLMetalShader p_blendingColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint64_t v3 = +[CRLMetalShader p_motionBlurVelocityColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint32_t v4 = [CRLMetalShader alloc];
  id v5 = [*(id *)(a1 + 32) device];
  id v6 = [(CRLMetalShader *)v4 initDefaultTextureAndOpacityMotionBlurShaderWithDevice:v5 colorAttachment:v2 velocityAttachment:v3 motionBlur:1];

  return v6;
}

void sub_1001E19AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E19F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1A34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1A78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001E1ABC(uint64_t a1)
{
  uint64_t v2 = +[CRLMetalShader p_blendingColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint64_t v3 = [CRLMetalShader alloc];
  uint32_t v4 = [*(id *)(a1 + 32) device];
  id v5 = [(CRLMetalShader *)v3 initDefaultBlendShaderWithDevice:v4 colorAttachment:v2 velocityAttachment:0 motionBlur:0];

  return v5;
}

void sub_1001E1EAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1EF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1F34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E1F78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001E1FBC(uint64_t a1)
{
  uint64_t v2 = +[CRLMetalShader p_blendingColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint64_t v3 = +[CRLMetalShader p_motionBlurVelocityColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint32_t v4 = [CRLMetalShader alloc];
  id v5 = [*(id *)(a1 + 32) device];
  id v6 = [(CRLMetalShader *)v4 initDefaultBlendShaderWithDevice:v5 colorAttachment:v2 velocityAttachment:v3 motionBlur:1];

  return v6;
}

void sub_1001E23C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2408(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E244C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2490(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001E24D4(uint64_t a1)
{
  uint64_t v2 = +[CRLMetalShader p_blendingColorAttachmentWithContext:*(void *)(a1 + 32)];
  uint64_t v3 = [CRLMetalShader alloc];
  uint32_t v4 = [*(id *)(a1 + 32) device];
  id v5 = [(CRLMetalShader *)v3 initDefaultColorShaderWithDevice:v4 colorAttachment:v2];

  return v5;
}

void sub_1001E273C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2780(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2B8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2BD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2C14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E2C58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E3658(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E369C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E36E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E3724(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E3768(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E37AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E37F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E3834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4C84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4CC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4D0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4D50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4D94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E4DD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E564C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E5690(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E5B9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E5BE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E5C24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E5C68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E62BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E6300(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E6AAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E6AF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E6B34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E6B78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E7068(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E70AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E940C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E9450(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E9494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E94D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E9B1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E9B60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001E9C78(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) interactiveCanvasController];
    id v6 = [v3 commandController];

    [v6 openGroup];
    uint32_t v4 = +[NSBundle mainBundle];
    id v5 = [v4 localizedStringForKey:@"Delete" value:0 table:@"UndoStrings"];
    [v6 setCurrentGroupActionString:v5];

    [*(id *)(a1 + 32) perform_delete];
    [v6 closeGroup];
  }
}

void sub_1001EA084(uint64_t a1, int a2)
{
  if (a2)
  {
    id v6 = [*(id *)(a1 + 32) canvasEditor];
    if ([v6 canvasEditorCanPasteAsPlainTextWithSender:*(void *)(a1 + 40)])
    {
      uint64_t v3 = +[CRLPasteboard generalPasteboard];
      uint32_t v4 = [v6 editorController];
      id v5 = [v4 selectionPath];
      [v6 pasteWithPasteboard:v3 selectionPath:v5 forceMatchStyle:1 sender:*(void *)(a1 + 40)];
    }
  }
}

void sub_1001EA204(uint64_t a1, int a2)
{
  if (a2)
  {
    id v6 = [*(id *)(a1 + 32) canvasEditor];
    if ([v6 canvasEditorCanPasteValuesWithSender:*(void *)(a1 + 40)])
    {
      uint64_t v3 = +[CRLPasteboard generalPasteboard];
      uint32_t v4 = [v6 editorController];
      id v5 = [v4 selectionPath];
      [v6 pasteWithPasteboard:v3 selectionPath:v5 forceMatchStyle:0 sender:*(void *)(a1 + 40)];
    }
  }
}

void sub_1001EA384(uint64_t a1, int a2)
{
  if (a2)
  {
    id v14 = [*(id *)(a1 + 32) canvasEditor];
    if ([v14 canvasEditorCanCopyWithSender:*(void *)(a1 + 40)])
    {
      uint32_t v4 = [*(id *)(a1 + 32) interactiveCanvasController];
      uint64_t v5 = [v4 commandController];

      [(id)v5 openGroup];
      id v6 = +[NSBundle mainBundle];
      unint64_t v7 = [v6 localizedStringForKey:@"Duplicate" value:0 table:@"UndoStrings"];
      [(id)v5 setCurrentGroupActionString:v7];

      uint64_t v8 = +[CRLPasteboard pasteboardWithUniqueName];
      [v14 copyToPasteboard:v8 asPDF:0 nativeOnly:1 withSender:*(void *)(a1 + 40)];
      BOOL v10 = [v14 editorController];
      int v11 = [v10 selectionPath];
      [v14 pasteWithPasteboard:v8 selectionPath:v11 forceMatchStyle:0 sender:*(void *)(a1 + 40)];

      [(id)v5 closeGroup];
      [v8 invalidate];

      int v12 = [*(id *)(a1 + 32) canvasEditor];
      LOBYTE(v5) = objc_opt_respondsToSelector();

      if (v5)
      {
        unsigned int v13 = [*(id *)(a1 + 32) canvasEditor];
        [v13 hideLassoSelectionEditMenuInDrawingModeIfLassoToolIsSelected];
      }
    }
  }
}

id sub_1001EAABC(uint64_t a1)
{
  [*(id *)(a1 + 32) endEditing];
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 p_setLockStatusOfSelectedDrawables:1];
}

uint64_t sub_1001EAAFC(uint64_t result, int a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1001EB490(id *a1, void *a2)
{
  id v3 = a2;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint32_t v4 = [a1[4] keyEnumerator];
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v24 + 1) + 8 * i);
        BOOL v10 = [a1[4] objectForKey:v9];
        int v11 = [a1[5] p_commandForUpdatingMagnetAfterGroupingForCline:v9 withPosition:v10 withGroupLayout:v3 forMagnet:1];
        [a1[6] enqueueCommand:v11];
      }
      id v6 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v6);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int v12 = [a1[7] keyEnumerator];
  id v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v21;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v20 + 1) + 8 * (void)j);
        __int16 v18 = [a1[7] objectForKey:v17];
        id v19 = [a1[5] p_commandForUpdatingMagnetAfterGroupingForCline:v17 withPosition:v18 withGroupLayout:v3 forMagnet:0];
        [a1[6] enqueueCommand:v19];
      }
      id v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v14);
  }
}

void sub_1001EC4E0(_Unwind_Exception *a1)
{
}

BOOL sub_1001EC54C(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint32_t v4 = sub_1002469D0(v3, v2);

  if (v4) {
    unsigned int v5 = [v4 isEffectivelyEmpty] ^ 1;
  }
  else {
    LOBYTE(v5) = 1;
  }

  return v5;
}

__n128 sub_1001EC5B4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 geometry];
  uint32_t v4 = v3;
  if (v3)
  {
    [v3 transform];
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
  }
  unsigned int v5 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  void v5[2] = v7;
  v5[3] = v8;
  v5[4] = v9;

  return result;
}

void sub_1001EC628(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EC66C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001ECF8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001ECFD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001ED374(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 repForSelecting];
  uint32_t v4 = v3;
  if (v3)
  {
    unsigned int v5 = *(void **)(a1 + 32);
    id v6 = [v3 layout];
    id v7 = [v5 isValidConnectionDestination:v6 forLineEnd:*(void *)(a1 + 40)];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

_TtC8Freeform12CRLBoardItem *__cdecl sub_1001EDAD0(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  objc_opt_isKindOfClass();
  uint64_t v3 = objc_opt_class();
  uint32_t v4 = sub_1002469D0(v3, v2);

  return (_TtC8Freeform12CRLBoardItem *)v4;
}

void sub_1001EE24C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EE290(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EE2D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EE318(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EE60C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EE650(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EF9F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EFA38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EFA7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001EFAC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F00F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F0134(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F0AC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint32_t v4 = v3;
  memset(&v20, 0, sizeof(v20));
  if (v3)
  {
    [v3 transformInRoot];
  }
  else
  {
    unsigned int v5 = *(void **)(a1 + 32);
    if (v5) {
      [v5 transformInRoot];
    }
    else {
      memset(&v19, 0, sizeof(v19));
    }
    CGAffineTransform v20 = v19;
  }
  CGAffineTransform v18 = v20;
  CGAffineTransformInvert(&v19, &v18);
  CGAffineTransform v20 = v19;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        int v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        int v12 = [v11 geometry:v14];
        CGAffineTransform v19 = v20;
        id v13 = [v12 geometryByAppendingTransform:&v19];
        [v11 setGeometry:v13];
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v21 count:16];
    }
    while (v8);
  }
}

void sub_1001F1264(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F12A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F14EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F1504(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F1514(uint64_t a1)
{
}

void sub_1001F151C(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  sub_100246DEC(v5, v6, 1, v7, v8, v9, v10, v11, (uint64_t)&OBJC_PROTOCOL___CRLBoardItemInsertionEditor);
  id obj = (id)objc_claimAutoreleasedReturnValue();

  if ([obj canHandleInsertionOfBoardItems:a1[4] insertionContext:a1[5]])
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), obj);
    *a3 = 1;
  }
}

uint64_t sub_1001F19C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = sub_1002469D0(v4, v3);

  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = [v5 getConnectedToWithBoardItemOwner:*(void *)(a1 + 32)];
  if (!v6)
  {
    uint64_t v7 = [v5 getConnectedFromWithBoardItemOwner:*(void *)(a1 + 32)];

    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v8 = 1;
    goto LABEL_7;
  }

LABEL_5:
  uint64_t v8 = 0;
LABEL_7:

  return v8;
}

uint64_t sub_1001F2590(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 36);
  id v6 = a3;
  if (v5)
  {
    [a2 alignmentFrameInRoot];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    [v6 alignmentFrameInRoot];
  }
  else
  {
    [a2 alignmentFrame];
    double v8 = v19;
    double v10 = v20;
    double v12 = v21;
    double v14 = v22;
    [v6 alignmentFrame];
  }
  double v23 = v15;
  double v24 = v16;
  double v25 = v17;
  double v26 = v18;

  double v27 = sub_100063FC4(*(_DWORD *)(a1 + 32), v8, v10, v12, v14);
  double v28 = sub_100063FC4(*(_DWORD *)(a1 + 32), v23, v24, v25, v26);
  if (v27 < v28) {
    return -1;
  }
  else {
    return v27 > v28;
  }
}

int64_t sub_1001F2EE4(id a1, CRLPair *a2, CRLPair *a3)
{
  uint64_t v4 = a3;
  int v5 = [(CRLPair *)a2 second];
  [v5 CGPointValue];
  double v7 = v6;
  double v8 = [(CRLPair *)v4 second];

  [v8 CGPointValue];
  if (v7 < v9) {
    int64_t v10 = -1;
  }
  else {
    int64_t v10 = v7 > v9;
  }

  return v10;
}

BOOL sub_1001F608C(id a1, UIMenuElement *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = objc_opt_class();
  double v6 = sub_1002469D0(v5, v4);

  double v7 = [v6 identifier];
  LOBYTE(v4) = v7 == @"CRLDescriptionMenuIdentifier";

  return (char)v4;
}

void sub_1001F6F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001F6FB0(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100246AC8(a2, 1, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&OBJC_PROTOCOL____TtP8Freeform18CRLTextInputEditor_);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  if ([obj wantsToReceiveTextInput])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), obj);
    *a3 = 1;
  }
}

void sub_1001F71BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F7250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F732C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001F761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

__n128 sub_1001F76B8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x2F0], 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1001F76C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v10 = v3;
    uint64_t v4 = [v3 pureGeometryInRoot];
    [v4 frame];
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
    v5[6] = v6;
    v5[7] = v7;
    v5[8] = v8;
    v5[9] = v9;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    id v3 = v10;
  }
}

void sub_1001F7744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F79D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F7CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F7D68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F7DAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1001F7DF0(id a1, CRLCanvasElementInfo *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = sub_1002469D0(v3, v2);

  return v4;
}

void sub_1001F7E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F813C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F8670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F8734(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F8778(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F8980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void **a26)
{
  a26 = (void **)&a23;
  sub_1001F98BC(&a26);

  _Unwind_Resume(a1);
}

uint64_t sub_1001F930C(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_100004E40();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v18 = result;
    uint64_t v6 = (char *)sub_10015F68C(result, a2);
    uint64_t v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v13 = vdupq_n_s64(v8);
      id v10 = &v6[v5];
    }
    else
    {
      id v10 = &v6[v5];
      do
      {
        uint64_t v11 = *(void *)(v8 - 40);
        v8 -= 40;
        *(void *)unint64_t v8 = 0;
        *((void *)v10 - 5) = v11;
        v10 -= 40;
        long long v12 = *(_OWORD *)(v8 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v10 + _Block_object_dispose(&STACK[0x2F0], 8) = v12;
      }
      while ((char *)v8 != v9);
      int64x2_t v13 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v16 = v13;
    uint64_t v14 = a1[2];
    a1[2] = &v6[40 * v7];
    double v17 = v14;
    uint64_t v15 = v13.i64[0];
    return sub_1001F993C((uint64_t)&v15);
  }
  return result;
}

void sub_1001F93F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F9438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001F97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  a28 = (void **)&a20;
  sub_1001F98BC(&a28);

  _Unwind_Resume(a1);
}

void sub_1001F98BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 5);
        v4 -= 40;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1001F993C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001FA000(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableCharacterSet);
  uint64_t v2 = +[NSCharacterSet illegalCharacterSet];
  [v1 formUnionWithCharacterSet:v2];

  [v1 addCharactersInRange:14, 1];
  [v1 addCharactersInRange:65533, 1];
  uint64_t v3 = +[NSCharacterSet controlCharacterSet];
  [v1 formUnionWithCharacterSet:v3];

  [v1 removeCharactersInRange:917504, 196608];
  [v1 removeCharactersInRange:10, 1];
  [v1 removeCharactersInRange:11, 1];
  [v1 removeCharactersInRange:8233, 1];
  [v1 removeCharactersInRange:8232, 1];
  [v1 removeCharactersInRange:13, 1];
  [v1 removeCharactersInRange:9, 1];
  [v1 removeCharactersInRange:173, 1];
  [v1 removeCharactersInRange:8203, 1];
  [v1 removeCharactersInRange:65279, 1];
  [v1 removeCharactersInRange:8204, 1];
  [v1 removeCharactersInRange:8205, 1];
  [v1 removeCharactersInRange:12, 1];
  [v1 removeCharactersInRange:78896, 16];
  id v4 = [v1 copy];
  uint64_t v5 = (void *)qword_1016A92F0;
  qword_1016A92F0 = (uint64_t)v4;

  [v1 removeCharactersInRange:1564, 1];
  [v1 removeCharactersInRange:8203, 5];
  [v1 removeCharactersInRange:8234, 5];
  [v1 removeCharactersInRange:8288, 5];
  [v1 removeCharactersInRange:8294, 4];
  uint64_t v6 = (void *)qword_1016A9300;
  qword_1016A9300 = (uint64_t)v1;
  id v12 = v1;

  id v7 = [(id)qword_1016A92F0 mutableCopy];
  [v7 addCharactersInRange:65532, 1];
  unint64_t v8 = (void *)qword_1016A92F8;
  qword_1016A92F8 = (uint64_t)v7;
  id v9 = v7;

  id v10 = [(id)qword_1016A9300 mutableCopy];
  [v10 addCharactersInRange:65532, 1];
  uint64_t v11 = (void *)qword_1016A9308;
  qword_1016A9308 = (uint64_t)v10;
}

void sub_1001FA274(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FA2B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1001FA2FC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  id v10 = a2;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  CFStringRef theString = v10;
  unint64_t v40 = a3;
  uint64_t v41 = a4;
  CharactersPtr = CFStringGetCharactersPtr(v10);
  if (CharactersPtr) {
    CStringPtr = 0;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(v10, 0x600u);
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v30 = 0u;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  double v39 = CStringPtr;
  if (a3 < a3 + a4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 64;
    while (1)
    {
      uint64_t v17 = (unint64_t)v14 >= 4 ? 4 : v14;
      if (v14 < 0 || v41 <= v14)
      {
        UniChar v18 = 0;
      }
      else if (CharactersPtr)
      {
        UniChar v18 = CharactersPtr[v14 + v40];
      }
      else if (v39)
      {
        UniChar v18 = v39[v40 + v14];
      }
      else
      {
        if (v43 <= v14 || v15 > v14)
        {
          uint64_t v21 = -v17;
          uint64_t v22 = v17 + v13;
          uint64_t v23 = v16 - v17;
          uint64_t v24 = v14 + v21;
          uint64_t v25 = v24 + 64;
          if (v24 + 64 >= v41) {
            uint64_t v25 = v41;
          }
          uint64_t v42 = v24;
          uint64_t v43 = v25;
          v26.location = v24 + v40;
          if (v41 >= v23) {
            uint64_t v27 = v23;
          }
          else {
            uint64_t v27 = v41;
          }
          v26.length = v27 + v22;
          CFStringGetCharacters(theString, v26, buffer);
          uint64_t v15 = v42;
        }
        UniChar v18 = buffer[v14 - v15];
      }
      BOOL v19 = v18 >= a5;
      unint64_t v20 = v18 - a5;
      if (v19 && v20 < a6) {
        break;
      }
      ++v14;
      --v13;
      ++v16;
      if (a4 == v14)
      {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_31;
      }
    }
    uint64_t v11 = a3 + v14;
  }
LABEL_31:

  return v11;
}

void sub_1001FA4CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FA510(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAAB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAAF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAB3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAB80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAEFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FAF40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB2FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB340(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB63C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB680(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB93C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FB980(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FBC60(uint64_t a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  uint64_t v2 = *(double **)(a1 + 32);
  if (v3 - v2[9] > 0.190000003)
  {
    id v4 = [v2 p_delegate];
    [v4 removeCollaboratorHUDController:*(void *)(a1 + 32)];

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 56);
    *(void *)(v5 + 56) = 0;

    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = *(void **)(v7 + 280);
    *(void *)(v7 + 280) = 0;

    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 288);
    *(void *)(v9 + 28_Block_object_dispose(&STACK[0x2F0], 8) = 0;
  }
}

id sub_1001FBD08(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 280) setAlpha:0.0];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 288);

  return [v2 setAlpha:0.0];
}

void sub_1001FC750(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FC794(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FC7D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FC81C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FD45C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FD4A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FD4E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FD528(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FD56C(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_1001FDE44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDE88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDECC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDF10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDF54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDF98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FDFDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FE020(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FE1F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FE234(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FE3E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FE428(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FEC4C(uint64_t a1)
{
  [*(id *)(a1 + 32) p_fontForFollowButtonString];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) p_sizeForString:*(void *)(*(void *)(a1 + 32) + 120) font:v5];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 192) = v3;
  *(void *)(v2 + 200) = v4;
}

void sub_1001FEE04(uint64_t a1)
{
  [*(id *)(a1 + 32) p_fontForDisplayString];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) p_sizeForString:*(void *)(*(void *)(a1 + 32) + 104) font:v5];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 160) = v3;
  *(void *)(v2 + 16_Block_object_dispose(&STACK[0x2F0], 8) = v4;
}

void sub_1001FEE68(uint64_t a1)
{
  [*(id *)(a1 + 32) p_fontForDisplayString];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) p_sizeForString:*(void *)(*(void *)(a1 + 32) + 112) font:v5];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 176) = v3;
  *(void *)(v2 + 184) = v4;
}

void sub_1001FF640(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FF684(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FF8EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FF930(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1001FFBC0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

double sub_1001FFBF4()
{
  return v0;
}

void sub_100200274(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002002B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002006E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020072C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100200770(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002007B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100200B60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100200BA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100200BE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100200C2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100200E58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _accessibilityUnregister];
}

id sub_100201280(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t sub_1002019BC(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    return (uint64_t)_[v3 _accessibilitySetIsSpeakThisElement:v4];
  }
  return result;
}

void sub_100201BF0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) crlaxTarget];
  [v1 setNeedsInputViewsReloaded];
}

id sub_100201E80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextInputResponderAccessibility;
  return [super forwardInvocation:v1];
}

BOOL sub_100202F18(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

BOOL sub_1002031F0(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

id sub_1002033E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) p_didEnterBackground];
  if ((result & 1) == 0)
  {
    objc_super v3 = *(void **)(a1 + 32);
    return [v3 p_reloadAllPresetCollectionViewControllers];
  }
  return result;
}

id sub_100203874(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 childItems];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_1002038CC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  uint64_t v6 = [v9 details];
  if ([v6 containsProperty:7])
  {
  }
  else
  {
    uint64_t v7 = [v9 details];
    unsigned int v8 = [v7 containsProperty:6];

    if (!v8) {
      goto LABEL_5;
    }
  }
  [*(id *)(a1 + 32) dismissViewControllerAnimated:1 completion:0];
  *a4 = 1;
LABEL_5:
}

void sub_100203C98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100203CDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100203F44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100203F88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204190(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002041D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002043FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204440(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204638(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020467C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020482C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204870(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204A78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204ABC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204C68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204CAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204E74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100204EB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002050B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002053E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100205408(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020544C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205490(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || *(unsigned char *)(a1 + 80))
  {
    id v3 = (objc_class *)objc_opt_class();
    uint64_t v4 = sub_10024715C(v3, *(void **)(a1 + 32));
    [v4 reloadData];
    if (*(void *)(a1 + 64) == 2 && *(void *)(a1 + 72) == 1)
    {
      id v5 = (objc_class *)objc_opt_class();
      uint64_t v6 = sub_10024715C(v5, *(void **)(a1 + 40));
      [v6 scrollToTop];
    }
    id v7 = [*(id *)(a1 + 48) length];
    unsigned int v8 = (id *)(a1 + 56);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v10 = [WeakRetained p_announcementTimer];
    uint64_t v11 = v10;
    if (v7)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1002055F8;
      v12[3] = &unk_1014CBF60;
      objc_copyWeak(&v13, v8);
      [v11 afterDelay:v12 processBlock:1.0];

      objc_destroyWeak(&v13);
    }
    else
    {
      [v10 cancel];
    }
  }
}

void sub_1002055E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1002055F8(uint64_t a1)
{
  uint64_t v2 = +[NSBundle mainBundle];
  id v6 = [v2 localizedStringForKey:@"%lu match(es) found" value:0 table:0];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = [WeakRetained p_shapeSearchResultsCollection];
  id v5 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, [v4 numberOfShapes]);

  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, v5);
}

void sub_10020587C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002058C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205AA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205AE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205CB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205CFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205F30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100205F74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100206158(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020619C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100206474(uint64_t a1, char a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    unsigned int v4 = [v3 p_shouldChangeSelectedShapes];
    id v5 = *(void **)(a1 + 32);
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      [v5 p_changeSelectedShapesToItemAtIndexPath:v6 forPresetCollectionViewController:v7];
    }
    else
    {
      unsigned int v8 = [v5 p_delegate];
      [v8 willInsertBoardItemsFromShapeLibraryViewController:*(void *)(a1 + 32)];

      id v9 = [*(id *)(a1 + 32) contextWithPresetCollectionViewController:*(void *)(a1 + 48)];
      if (![*(id *)(a1 + 48) presetCollectionType]) {
        [*(id *)(a1 + 32) p_insertShapeAtIndexPath:*(void *)(a1 + 40) context:v9];
      }
      [*(id *)(a1 + 32) p_dismissIfNeededWithBlock:0];
    }
  }
  else
  {
    [v3 dismissViewControllerAnimated:1 completion:0];
  }
}

void sub_100206CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_100206D34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100206D78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100206DBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100206DCC(uint64_t a1)
{
}

void sub_100206DD4(void *a1, void *a2)
{
  id v3 = [a2 layoutForInfo:a1[4]];
  uint64_t v4 = [v3 i_wrapPath];
  uint64_t v5 = *(void *)(a1[5] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (v3) {
    [v3 transform];
  }
  else {
    memset(v88, 0, sizeof(v88));
  }
  [v7 transformUsingAffineTransform:v88];
  unint64_t v8 = a1[6];
  if (v8 <= 0x13 && ((1 << v8) & 0xC0004) != 0)
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = sub_1002469D0(v9, v3);
    [v10 tailPoint];
    double v12 = v11;
    double v14 = v13;
    [v10 getControlKnobPosition:12];
    double v16 = v15;
    double v18 = v17;
    [v10 headPoint];
    double v20 = v19;
    double v22 = v21;
    [v10 pathBounds];
    double v24 = v23;
    double v25 = sub_100064680(v12, v14, v23);
    double v27 = v26;
    double v28 = sub_100064680(v16, v18, v24);
    double v30 = v29;
    double v31 = sub_100064680(v20, v22, v24);
    double v33 = v32;
    long long v34 = +[CRLCanvasKnob defaultSelectionKnobImage];
    [v34 size];
    double v36 = v35;

    double v37 = sub_10006402C(v28, v30, v36);
    CGFloat v81 = v38;
    CGFloat v83 = v37;
    CGFloat v40 = v39;
    CGFloat v42 = v41;
    double v43 = sub_10006402C(v25, v27, v36);
    CGFloat v75 = v44;
    CGFloat v77 = v43;
    CGFloat v46 = v45;
    CGFloat v48 = v47;
    double v49 = sub_10006402C(v31, v33, v36);
    CGFloat v51 = v50;
    CGFloat v79 = v53;
    CGFloat v80 = v52;
    if (v3) {
      [v3 transform];
    }
    else {
      memset(&v87, 0, sizeof(v87));
    }
    v89.origin.double y = v81;
    v89.origin.double x = v83;
    v89.size.double width = v40;
    v89.size.double height = v42;
    CGRect v90 = CGRectApplyAffineTransform(v89, &v87);
    double y = v90.origin.y;
    double x = v90.origin.x;
    double height = v90.size.height;
    double width = v90.size.width;
    if (v3) {
      [v3 transform:v90.origin.y, v90.origin.x];
    }
    else {
      memset(&v86, 0, sizeof(v86));
    }
    v91.origin.double y = v75;
    v91.origin.double x = v77;
    v91.size.double width = v46;
    v91.size.double height = v48;
    CGRect v92 = CGRectApplyAffineTransform(v91, &v86);
    double v54 = v92.origin.x;
    double v55 = v92.origin.y;
    double v76 = v92.size.height;
    double v78 = v92.size.width;
    if (v3) {
      [v3 transform];
    }
    else {
      memset(&v85, 0, sizeof(v85));
    }
    v93.origin.double x = v49;
    v93.origin.double y = v51;
    v93.size.double height = v79;
    v93.size.double width = v80;
    CGRect v94 = CGRectApplyAffineTransform(v93, &v85);
    double v56 = v94.origin.x;
    double v57 = v94.origin.y;
    double v58 = v94.size.width;
    double v59 = v94.size.height;
    double v60 = sub_1000674F0(x, y);
    double v62 = v61;
    double v63 = sub_1000674F0(v54, v55);
    double v65 = v64;
    double v66 = sub_1000674F0(v56, v57);
    double v68 = v67;
    [*(id *)(*(void *)(a1[5] + 8) + 40) appendBezierPathWithOvalInRect:v60, v62, width, height];
    [*(id *)(*(void *)(a1[5] + 8) + 40) appendBezierPathWithOvalInRect:v63, v65, v78, v76];
    [*(id *)(*(void *)(a1[5] + 8) + 40) appendBezierPathWithOvalInRect:v66, v68, v58, v59];
    v69 = [*(id *)(*(void *)(a1[5] + 8) + 40) arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved:0];
    uint64_t v70 = +[CRLBezierPath uniteBezierPaths:v69];
    uint64_t v71 = *(void *)(a1[5] + 8);
    v72 = *(void **)(v71 + 40);
    *(void *)(v71 + 40) = v70;
  }
}

id sub_10020718C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)UIDragPreviewParameters);
  id v3 = +[UIColor clearColor];
  [v2 setBackgroundColor:v3];

  uint64_t v4 = +[UIBezierPath bezierPathWithCGPath:](UIBezierPath, "bezierPathWithCGPath:", [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) CGPath]);
  [v2 setVisiblePath:v4];

  id v5 = objc_alloc((Class)UIImageView);
  uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) image];
  id v7 = [v5 initWithImage:v6];

  id v8 = [objc_alloc((Class)UIDragPreview) initWithView:v7 parameters:v2];

  return v8;
}

void sub_100207C04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100207C48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100207EFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100207F40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100208CE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100208D28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100208D6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100208DB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

NSUInteger sub_1002093DC(NSRange a1, NSRange a2, int a3)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  NSUInteger v6 = a1.length;
  NSUInteger v7 = a1.location;
  NSRange v8 = NSIntersectionRange(a1, a2);
  if (length) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v7 | location) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v8 == 0uLL) {
    NSUInteger v12 = v11;
  }
  else {
    NSUInteger v12 = v8.location;
  }
  if (location + length == v7) {
    NSUInteger v13 = v7;
  }
  else {
    NSUInteger v13 = v12;
  }
  if (v7 + v6 == location) {
    NSUInteger v14 = location;
  }
  else {
    NSUInteger v14 = v13;
  }
  if (a3) {
    return v14;
  }
  else {
    return v12;
  }
}

NSUInteger sub_100209474(NSRange a1, NSRange range1)
{
  if (a1.location != range1.location + range1.length)
  {
    if (a1.location + a1.length == range1.location) {
      a1.NSUInteger location = range1.location;
    }
    else {
      a1.NSUInteger location = NSIntersectionRange(a1, range1).location;
    }
  }
  return a1.location;
}

uint64_t sub_1002094A4()
{
  return 0x3000200000000;
}

BOOL sub_1002094B0(unint64_t a1)
{
  return a1 > 0x3000200000000;
}

BOOL sub_1002094C4(unint64_t a1)
{
  return a1 < 0x3000200000001;
}

uint64_t sub_1002094D8(uint64_t result, _WORD *a2, _WORD *a3, _DWORD *a4)
{
  if (a2) {
    *a2 = HIWORD(result);
  }
  if (a3) {
    *a3 = WORD2(result);
  }
  if (a4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_1002094FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a1 << 48) | (a2 << 32) | a3;
}

NSString *sub_100209510(unint64_t a1)
{
  return +[NSString stringWithFormat:@"%u.%u.%u", HIWORD(a1), WORD2(a1), a1];
}

uint64_t sub_100209554(double a1)
{
  return (uint64_t)a1;
}

double sub_100209560(double a1, double a2, double a3)
{
  return a2 * a3;
}

BOOL sub_100209574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t sub_100209584@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

CGFloat sub_100209590@<D0>(uint64_t *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v10 = (uint64_t)a2;
  uint64_t v11 = (uint64_t)a3;
  uint64_t v12 = (uint64_t)(CGRectGetMaxX(*(CGRect *)&a2) - (double)(uint64_t)a2);
  v14.origin.double x = a2;
  v14.origin.double y = a3;
  v14.size.double width = a4;
  v14.size.double height = a5;
  CGFloat result = CGRectGetMaxY(v14) - (double)(uint64_t)a3;
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v12;
  a1[3] = (uint64_t)result;
  return result;
}

CGFloat sub_100209620@<D0>(uint64_t *a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>)
{
  double v7 = sub_1000652FC(a2, a3, a4, a5, a6);

  return sub_100209590(a1, v7, v8, v9, v10);
}

uint64_t sub_100209658(void *a1)
{
  return a1[2] + *a1;
}

uint64_t sub_100209668(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100209670(uint64_t a1)
{
  return *(void *)(a1 + 24) + *(void *)(a1 + 8);
}

BOOL sub_100209680(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 <= *a1) {
    return 0;
  }
  if (a2 >= a1[2] + *a1) {
    return 0;
  }
  uint64_t v3 = a1[1];
  return a3 > v3 && a3 < a1[3] + v3;
}

int64x2_t sub_1002096C4@<Q0>(int64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t v4 = a1->i64[1] + a3;
  v5.i64[0] = a2;
  v5.i64[1] = a3;
  a4->i64[0] = a1->i64[0] + a2;
  a4->i64[1] = v4;
  int64x2_t result = vsubq_s64(a1[1], vaddq_s64(v5, v5));
  a4[1] = result;
  return result;
}

uint64_t sub_1002096F0(uint64_t a1)
{
  return qword_101176FD8[2 * a1];
}

uint64_t sub_100209704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 - a3;
}

uint64_t sub_100209710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4 * a2 + a3 * a1;
}

uint64_t sub_10020971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 - a3;
  if (a1 - a3 < 0) {
    uint64_t v4 = a3 - a1;
  }
  uint64_t v5 = a2 - a4;
  if (a2 - a4 < 0) {
    uint64_t v5 = a4 - a2;
  }
  return v4 + v5;
}

void sub_100209B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100209B68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100209BAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100209BF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100209C34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100209C78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020A32C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020A370(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020B1E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020B224(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020B3D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020B41C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020C3A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020C3EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020C59C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020C5E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020CA34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020CA78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020CFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10020CFEC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
  [v2 combineUUIDWithUUID:v3 mixValue:[v4 unsignedIntValue] + 500];
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 148));
  uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 104);
  NSUInteger v6 = [*(id *)(a1 + 56) id];
  double v7 = [v5 objectForKeyedSubscript:v6];

  if (v7)
  {
    [*(id *)(*(void *)(a1 + 48) + 120) setObject:0 forKeyedSubscript:v7];
    [*(id *)(*(void *)(a1 + 48) + 128) setObject:0 forKeyedSubscript:v7];
    [*(id *)(*(void *)(a1 + 48) + 136) setObject:0 forKeyedSubscript:v7];
  }
  [*(id *)(*(void *)(a1 + 48) + 120) setObject:*(void *)(a1 + 64) forKeyedSubscript:v8];
  [*(id *)(*(void *)(a1 + 48) + 128) setObject:*(void *)(a1 + 56) forKeyedSubscript:v8];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 148));
}

void sub_10020D114(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) p_updatePKStrokesForShapeItemsIfNeeded:*(void *)(a1 + 40) boardIdentifier:*(void *)(a1 + 48)];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020D1C0;
    block[3] = &unk_1014CBBB0;
    id v4 = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_10020D1C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_updateObservers];
}

void sub_10020D968(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020D9AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10020DD80(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

void sub_10020E6A8(void *a1)
{
  if (!*(unsigned char *)(a1[4] + 145))
  {
    id v2 = (objc_class *)objc_opt_class();
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 8));
    id v4 = [WeakRetained board];
    uint64_t v5 = [v4 getBoardItemForUUID:a1[5]];
    sub_10024715C(v2, v5);
    id v13 = (id)objc_claimAutoreleasedReturnValue();

    NSUInteger v6 = v13;
    if (v13)
    {
      double v7 = (objc_class *)objc_opt_class();
      id v8 = objc_loadWeakRetained((id *)(a1[4] + 8));
      CGFloat v9 = [v8 repForInfo:v13];
      CGFloat v10 = sub_10024715C(v7, v9);

      if (v10)
      {
        uint64_t v11 = [v10 mathRecognitionHandler];
        uint64_t v12 = [v11 mathViewController];
        [v12 registerRecentlyCreatedLocalStroke:a1[6]];
      }
      NSUInteger v6 = v13;
    }
  }
}

void sub_10020F28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020F2E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020F328(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020F428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020F528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020F7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020F82C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020F870(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020FB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020FB8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020FBD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10020FD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020FDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100210190(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002101D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100210218(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10021025C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100210538(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021057C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_100210858(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 observerIgnoringCount];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_1002109C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100210BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_sync_exit(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100210C30(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 32) > 0;
  return result;
}

id sub_100210C4C(uint64_t a1)
{
  uint64_t v1 = 48;
  if (!*(unsigned char *)(a1 + 56)) {
    uint64_t v1 = 40;
  }
  return [*(id *)(*(void *)(a1 + 32) + v1) setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_100211398()
{
}

void sub_1002113A4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1002115C8);
}

void sub_1002113AC(void *a1, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x1002112C4);
    }
    id v3 = objc_begin_catch(a1);
    uint64_t v4 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2C18);
    }
    uint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      NSUInteger v6 = NSStringFromSelector(v2);
      sub_10108C818(v6, (uint64_t)&STACK[0x230], v4, v5);
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2C38);
    }
    double v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = +[CRLAssertionHandler packedBacktraceString];
      sub_10106CDAC(v8, (uint8_t *)&STACK[0x210], v4, (os_log_t)v7);
    }

    CGFloat v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLChangeNotifier p_processChanges:preprocessing:]");
    CGFloat v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m"];
    uint64_t v11 = NSStringFromSelector(v2);
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:310 isFatal:0 description:"Exception thrown during %@; some observers may not have been notified."];

    objc_exception_rethrow();
  }
  JUMPOUT(0x1002115C8);
}

void sub_10021158C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x100211414);
  }
  JUMPOUT(0x1002115C8);
}

void sub_1002115BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id obj)
{
}

void sub_1002115D0(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3 < 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2B58);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108C9EC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2B78);
    }
    double v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v15);
    }
    uint64_t v27 = *(void *)(*v2 + 32);
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d _currentlyNotifyingCount managed to get negative! %zi", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
    double v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
    double v24 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v23, v24, 238, 1, "_currentlyNotifyingCount managed to get negative! %zi", *(void *)(*v2 + 32), "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m", 238, v27);

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v25, v26);
    abort();
  }
  *(void *)(v1 + 32) = v3 + 1;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 32) == 1)
  {
    if (*(void *)(v4 + 48))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E2B98);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108C94C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E2BB8);
      }
      uint64_t v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      NSUInteger v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
      double v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 242, 0, "expected nil value for '%{public}s'", "_classObserversToCheckForRemovalAfterNotifications");

      uint64_t v4 = *v2;
    }
    if (*(void *)(v4 + 40))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E2BD8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108C8AC();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E2BF8);
      }
      id v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v8);
      }
      CGFloat v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
      CGFloat v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 243, 0, "expected nil value for '%{public}s'", "_objectObserversToCheckForRemovalAfterNotifications");
    }
    id v11 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:512 valueOptions:517 capacity:0];
    uint64_t v12 = *(void **)(*v2 + 48);
    *(void *)(*v2 + 4_Block_object_dispose(&STACK[0x2F0], 8) = v11;

    id v13 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:512 valueOptions:517 capacity:0];
    CGRect v14 = *(void **)(*v2 + 40);
    *(void *)(*v2 + 40) = v13;
  }
}

void sub_100211A14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211A58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211A9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211AE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211B68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211BAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211BF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_100211C34(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3 <= 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2C58);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108CA88();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E2C78);
    }
    CGFloat v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    uint64_t v21 = *((void *)*v2 + 4);
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d _currentlyNotifyingCount should be > 0! %zi", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
    uint64_t v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke");
    uint64_t v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 321, 1, "_currentlyNotifyingCount should be > 0! %zi", *((void *)*v2 + 4), "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m", 321, v21);

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v19, v20);
    abort();
  }
  *(void *)(v1 + 32) = v3 - 1;
  int64x2_t result = *v2;
  if (!*((void *)*v2 + 4))
  {
    [result p_removeZeroCountObserversInMap:result[6] fromCountedObserversByChangeSourceMap:result[2]];
    uint64_t v5 = (void *)*((void *)*v2 + 6);
    *((void *)*v2 + 6) = 0;

    [*v2 p_removeZeroCountObserversInMap:*((void *)*v2 + 5) fromCountedObserversByChangeSourceMap:*((void *)*v2 + 1)];
    NSUInteger v6 = (void *)*((void *)*v2 + 5);
    *((void *)*v2 + 5) = 0;

    [*v2 p_trimChangeSourceToCountedObserversMap:*((void *)*v2 + 2)];
    id v7 = *v2;
    uint64_t v8 = *((void *)*v2 + 1);
    return [v7 p_trimChangeSourceToCountedObserversMap:v8];
  }
  return result;
}

void sub_100211E50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100211E94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100212044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1002120D8(id a1, CRLCountedObserver *a2, NSDictionary *a3)
{
  uint64_t v3 = [(CRLCountedObserver *)a2 observerIgnoringCount];
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_100212ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100213024(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100213068(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002130AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002130F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100213134(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_100004E40();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_10021518C((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2F0], 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_1002131DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100213220(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100213264(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002132A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021416C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214344(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214388(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002143CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214410(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214454(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214498(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002144DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214520(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214564(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002145A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002145EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100214630(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002148CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021518C(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_100004E40();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_10021524C(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_100215294(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_100215234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10021524C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100004E40();
  }
  int64x2_t result = sub_10002B494((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_100215294(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_100215338(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_100215338(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_1002153C8((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x2F0], 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_1002153C8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x2F0], 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x2F0], 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x2F0], 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_100218EC0(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 sharpenAllNodes];
}

BOOL sub_100218F04(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_100219010(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  [v2 smoothAllNodes];
}

BOOL sub_100219054(id a1, CRLPathEditableRep *a2)
{
  id v2 = [(CRLPathEditableRep *)a2 editablePathSource];
  unsigned __int8 v3 = [v2 hasSelectedNode];

  return v3;
}

void sub_100219530(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100219574(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100219D6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  int v5 = sub_1002469D0(v4, v3);

  uint64_t v6 = [v5 path];
  id v7 = [v6 copy];

  int v8 = [v5 pureGeometry];
  uint64_t v9 = v8;
  if (v8) {
    [v8 transform];
  }
  else {
    memset(v10, 0, sizeof(v10));
  }
  [v7 transformUsingAffineTransform:v10];

  [*(id *)(a1 + 32) addObject:v7];
}

void sub_100219E38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) selectionModelTranslator];
  id v3 = +[NSSet setWithObject:*(void *)(a1 + 40)];
  id v6 = [v2 selectionPathForInfos:v3];

  uint64_t v4 = [*(id *)(a1 + 32) layerHost];
  int v5 = [v4 miniFormatterPresenter];
  [v5 presentMiniFormatterForSelectionPath:v6];
}

void sub_10021A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10021A660(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10021A670(uint64_t a1)
{
}

void sub_10021A678(uint64_t a1, void *a2)
{
  id v6 = [a2 geometry];
  [v6 size];
  uint64_t v3 = +[CRLBezierPath bezierPathWithRect:sub_100064070()];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

__n128 sub_10021A6F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = [a2 pureGeometry];
  int v5 = v4;
  if (v4) {
    [v4 transform];
  }
  else {
    memset(&t2, 0, sizeof(t2));
  }
  long long v6 = v3[3];
  *(_OWORD *)&v11.a = v3[2];
  *(_OWORD *)&v11.c = v6;
  *(_OWORD *)&v11.tdouble x = v3[4];
  CGAffineTransformConcat(&v13, &v11, &t2);
  id v7 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  long long v9 = *(_OWORD *)&v13.c;
  long long v8 = *(_OWORD *)&v13.tx;
  v7[2] = *(_OWORD *)&v13.a;
  v7[3] = v9;
  v7[4] = v8;

  return result;
}

__n128 sub_10021A798(uint64_t a1, void *a2)
{
  uint64_t v3 = (_OWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 32);
  id v4 = a2;
  int v5 = [v4 pureGeometry];
  long long v6 = v5;
  if (v5) {
    [v5 transform];
  }
  else {
    memset(&t2, 0, sizeof(t2));
  }
  long long v7 = v3[1];
  *(_OWORD *)&t1.a = *v3;
  *(_OWORD *)&t1.c = v7;
  *(_OWORD *)&t1.tdouble x = v3[2];
  CGAffineTransformConcat(&v22, &t1, &t2);
  long long v8 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  long long v10 = *(_OWORD *)&v22.c;
  long long v9 = *(_OWORD *)&v22.tx;
  v8[2] = *(_OWORD *)&v22.a;
  v8[3] = v10;
  v8[4] = v9;

  CGAffineTransform v11 = *(_OWORD **)(*(void *)(a1 + 40) + 8);
  int v12 = [v4 pureGeometry];

  if (v12) {
    [v12 transform];
  }
  else {
    memset(&v18, 0, sizeof(v18));
  }
  long long v13 = v11[3];
  *(_OWORD *)&t1.a = v11[2];
  *(_OWORD *)&t1.c = v13;
  *(_OWORD *)&t1.tdouble x = v11[4];
  CGAffineTransformConcat(&v19, &t1, &v18);
  uint64_t v14 = *(_OWORD **)(*(void *)(a1 + 40) + 8);
  long long v16 = *(_OWORD *)&v19.c;
  long long v15 = *(_OWORD *)&v19.tx;
  v14[2] = *(_OWORD *)&v19.a;
  v14[3] = v16;
  v14[4] = v15;

  return result;
}

void sub_10021AB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3) {
    [v3 pureTransformInRoot];
  }
  else {
    memset(&v16, 0, sizeof(v16));
  }
  CGAffineTransformInvert(&v17, &v16);
  float64x2_t v15 = vaddq_f64(*(float64x2_t *)&v17.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v17.c, *(double *)(a1 + 56)), *(float64x2_t *)&v17.a, *(double *)(a1 + 48)));
  int v5 = [v4 pureGeometry];
  [v5 size];
  double v6 = sub_100064070();
  double v9 = sub_100066AA4(v15.f64[0], v15.f64[1], v6, v7, v8);
  double v11 = v10;

  int v12 = *(unsigned __int8 *)(a1 + 64);
  long long v13 = -[CRLConnectionLineMagnet initWithType:normalizedPosition:]([CRLConnectionLineMagnet alloc], "initWithType:normalizedPosition:", [*(id *)(a1 + 40) magnetType], v9, v11);
  uint64_t v14 = *(void **)(a1 + 32);
  if (v12) {
    [v14 setHeadMagnet:v13];
  }
  else {
    [v14 setTailMagnet:v13];
  }
}

void sub_10021B430(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (objc_class *)objc_opt_class();
  int v5 = sub_10024715C(v4, v3);

  if (v5)
  {
    double v6 = *(void **)(a1 + 32);
    [v5 transformInRoot];
    [v6 transformUsingAffineTransform:&v7];
  }
}

BOOL sub_10021B750(id a1, id a2, BOOL *a3)
{
  id v3 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

BOOL sub_10021B804(id a1, id a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  int v5 = sub_1002469D0(v4, v3);

  LOBYTE(v3) = [v5 pathIsOpen];
  return (char)v3;
}

void sub_10021D2A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D2E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D32C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D370(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D3B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D3F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10021D610(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1[7] == 6)
  {
    [v3 findNewEdgeMagnetCanvasPositionForConnectionLine:a1[4] forLineEnd:a1[8] withCanvasPosition:*(double *)(*(void *)(a1[5] + 8) + 32) *(double *)(*(void *)(a1[5] + 8) + 40)];
    uint64_t v5 = *(void *)(a1[5] + 8);
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
  }
  uint64_t v8 = *(void *)(a1[5] + 8);
  if (v4) {
    [v4 pureTransformInRoot];
  }
  else {
    memset(&v17, 0, sizeof(v17));
  }
  CGAffineTransformInvert(&v18, &v17);
  float64x2_t v16 = vaddq_f64(*(float64x2_t *)&v18.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v18.c, *(double *)(v8 + 40)), *(float64x2_t *)&v18.a, *(double *)(v8 + 32)));
  double v9 = [v4 pureGeometry];
  [v9 size];
  double v10 = sub_100064070();
  double v13 = sub_100066AA4(v16.f64[0], v16.f64[1], v10, v11, v12);
  uint64_t v14 = *(void *)(a1[6] + 8);
  *(double *)(v14 + 32) = v13;
  *(void *)(v14 + 40) = v15;
}

void sub_10021DEF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10021E168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021E1AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021E434(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021E478(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10021E74C()
{
  if (qword_1016A9338 != -1) {
    dispatch_once(&qword_1016A9338, &stru_1014E3258);
  }
  double v0 = (void *)qword_1016A9330;

  return v0;
}

void sub_10021E7A0(id a1)
{
  uint64_t v1 = +[NSString stringWithUTF8String:"com.apple.freeform"];
  id v2 = (void *)qword_1016A9330;
  qword_1016A9330 = v1;

  if (([(id)qword_1016A9330 hasPrefix:@"com.apple."] & 1) == 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E3278);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108D130();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E3298);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v3);
    }
    uint64_t v15 = qword_1016A9330;
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d App bundle identifier (%@) has unexpected prefix.", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"NSString *CRLAppBundleIdentifier()_block_invoke");
    double v11 = +[NSString stringWithUTF8String:"NSString *CRLAppBundleIdentifier()_block_invoke"];
    double v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m"];
    +[CRLAssertionHandler handleFailureInFunction:v11, v12, 29, 1, "App bundle identifier (%@) has unexpected prefix.", qword_1016A9330, "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m", 29, v15 file lineNumber isFatal description];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v13, v14);
    abort();
  }
}

void sub_10021E950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021E994(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10021E9D8()
{
  if (qword_1016A9348 != -1) {
    dispatch_once(&qword_1016A9348, &stru_1014E32B8);
  }
  double v0 = (void *)qword_1016A9340;

  return v0;
}

void sub_10021EA2C(id a1)
{
  uint64_t v1 = +[NSString stringWithUTF8String:"group.com.apple.freeform"];
  id v2 = (void *)qword_1016A9340;
  qword_1016A9340 = v1;

  if (([(id)qword_1016A9340 hasPrefix:@"group.com.apple."] & 1) == 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E32D8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10108D1D8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E32F8);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v3);
    }
    uint64_t v15 = qword_1016A9340;
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d App group identifier (%@) has unexpected prefix.", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"NSString *CRLAppGroupIdentifier()_block_invoke");
    double v11 = +[NSString stringWithUTF8String:"NSString *CRLAppGroupIdentifier()_block_invoke"];
    double v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m"];
    +[CRLAssertionHandler handleFailureInFunction:v11, v12, 51, 1, "App group identifier (%@) has unexpected prefix.", qword_1016A9340, "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBundleUtilities.m", 51, v15 file lineNumber isFatal description];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v13, v14);
    abort();
  }
}

void sub_10021EBDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021EC20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10021EEB4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 encodedLength];
  if (v5 == [v4 encodedLength])
  {
    id v6 = [v3 decodedLength];
    BOOL v7 = v6 == [v4 decodedLength];
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_10021F63C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021F680(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021F914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021F958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10021FBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021FD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100220064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100220750(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100220794(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100221660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_100221788(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002217CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100221810(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100221854(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100221BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10022219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10022245C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100222974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100222A14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100222A58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100222A9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100222AE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100222D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100222F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022305C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022397C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002239C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100223AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100223FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10022439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10022441C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100224460(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022455C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002246A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002246B4(uint64_t a1, uint64_t a2)
{
  sub_100147824(&v2, a2);
}

void sub_1002247A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224A84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100224AC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100224CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224CE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100224D28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100224FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100225408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100225AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022609C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100226124(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100226168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100226410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100226580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100226E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100226FA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100226FE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022702C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100227070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002270B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002270F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002275E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100227900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_100227964(uint64_t a1, CTRunRef run)
{
  CFDictionaryRef result = CTRunGetAttributes(run);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, kCTFontAttributeName);
    if (result)
    {
      CFDictionaryRef result = (const __CFDictionary *)CTFontGetSymbolicTraits(result);
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
      int v5 = *(_DWORD *)(v4 + 24);
      if (v5)
      {
        if (v5 == result) {
          return result;
        }
        CFDictionaryRef result = (const __CFDictionary *)((v5 | result) & 0xFFFFFFF);
      }
      *(_DWORD *)(v4 + 24) = result;
    }
  }
  return result;
}

void sub_100227D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002280B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100228118(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022815C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100228328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100228600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022867C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100228810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  _Unwind_Resume(a1);
}

void sub_1002295F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022963C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100229788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022995C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100229A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100229AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100229BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022A20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10022A750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022A780(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022A7C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022ACEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022AD14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022AD58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id a54)
{
  sub_10022BEAC(&a54);
  _Unwind_Resume(a1);
}

void sub_10022BE24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022BE68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id *sub_10022BEAC(id *a1)
{
  return a1;
}

void sub_10022BF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022C030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10022C048(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  id v8 = [v6 type];
  uint64_t v9 = [v11 stroke];
  uint64_t v10 = [v11 fill];
  [v11 rect];
  (*(void (**)(uint64_t, id, void *, void *, uint64_t))(v7 + 16))(v7, v8, v9, v10, a4);
}

void sub_10022C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10022C678(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022C6BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022C700(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (*(void *)(a1 + 72) <= a3)
  {
    id v6 = objc_alloc_init(CRLCanvasSubview);
    uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 8) layerDelegate];
    [(CRLCanvasSubview *)v6 setLayerDelegate:v7];
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  }
  -[CRLCanvasSubview setFrame:](v6, "setFrame:", *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104));
  -[CRLCanvasSubview setBounds:](v6, "setBounds:", *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104));
  id v8 = [(CRLCanvasSubview *)v6 layer];
  [*(id *)(a1 + 48) addObject:v6];
  uint64_t v15 = sub_100246AC8(v5, 1, v9, v10, v11, v12, v13, v14, (uint64_t)&OBJC_PROTOCOL___CRLInteractiveCanvasRepLayerPile);
  CGAffineTransform v22 = v15;
  if (v15)
  {
    double v23 = [v15 contentLayers];
    if (!v23)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E38A8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108DBDC();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E38C8);
      }
      double v24 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v24);
      }
      CKRecordID v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLInteractiveCanvasRepContentSubviewUpdater p_mainThreadUpdateSubviewsFromRepContentPiles:]_block_invoke");
      Swift::String v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 138, 0, "invalid nil value for '%{public}s'", "contentLayers");
    }
    uint64_t v27 = [(CRLCanvasSubview *)v6 subviews];
    id v28 = [v27 count];

    if (v28) {
      [(CRLCanvasSubview *)v6 setSubviews:&__NSArray0__struct];
    }
    double v29 = [v8 sublayers];
    unsigned __int8 v30 = [v23 isEqualToArray:v29];

    if ((v30 & 1) == 0) {
      [v8 setSublayers:v23];
    }
  }
  else
  {
    uint64_t v31 = sub_100246AC8(v5, 1, v16, v17, v18, v19, v20, v21, (uint64_t)&OBJC_PROTOCOL___CRLInteractiveCanvasRepContentPlatformViewPile);
    if (v31)
    {
      double v23 = (void *)v31;
      double v32 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:v6];
      double v33 = objc_opt_class();
      long long v34 = [(CRLCanvasSubview *)v6 layerDelegate];
      id v49 = v32;
      uint64_t v35 = [v33 p_contentPlatformViewForRepContentPlatformViewPile:v23 layerDelegate:v34 reusableMaskView:&v49];
      id v36 = v49;

      if (v36) {
        [*(id *)(a1 + 56) setObject:v36 forKeyedSubscript:v6];
      }
      if (v35)
      {
        uint64_t v50 = v35;
        double v37 = +[NSArray arrayWithObjects:&v50 count:1];
      }
      else
      {
        double v37 = &__NSArray0__struct;
      }
      double v47 = v36;
      CGFloat v48 = (void *)v35;
      CGFloat v40 = [v8 sublayers];
      if ([v40 count])
      {
        double v41 = [(CRLCanvasSubview *)v6 subviews];
        id v42 = [v41 count];

        if (!v42) {
          [v8 setSublayers:&__NSArray0__struct];
        }
      }
      else
      {
      }
      double v43 = [(CRLCanvasSubview *)v6 subviews];
      unsigned __int8 v44 = [v37 isEqualToArray:v43];

      if ((v44 & 1) == 0) {
        [(CRLCanvasSubview *)v6 setSubviews:v37];
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E38E8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108DB48();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E3908);
      }
      double v38 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v38);
      }
      double v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLInteractiveCanvasRepContentSubviewUpdater p_mainThreadUpdateSubviewsFromRepContentPiles:]_block_invoke");
      double v39 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m"];
      +[CRLAssertionHandler handleFailureInFunction:v23, v39, 178, 0, "Rep content pile did not implement either CRLInteractiveCanvasRepLayerPile or CRLInteractiveCanvasRepContentPlatformViewPile: %@", v5 file lineNumber isFatal description];
    }
  }

  double v45 = *(void **)(a1 + 64);
  CGFloat v46 = [[CRLInteractiveCanvasRepContentSubviewReuser alloc] initWithSubview:v6 originalRepContentPile:v5];
  [v45 addObject:v46];
}

void sub_10022CC9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022CCE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022CD24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022CD68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DBE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DC28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DC6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DCB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DCF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DD38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DD7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DDC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DE04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DE48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022DE8C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 24) == *(void *)(a1 + 48))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    id v1 = *(id *)(a1 + 40);
    id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v7;
      do
      {
        id v5 = 0;
        do
        {
          if (*(void *)v7 != v4) {
            objc_enumerationMutation(v1);
          }
          [*(id *)(*((void *)&v6 + 1) + 8 * (void)v5) removeRepContentPlatformViews:(void)v6];
          id v5 = (char *)v5 + 1;
        }
        while (v3 != v5);
        id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      }
      while (v3);
    }
  }
}

void sub_10022E1FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E240(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E4E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E52C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E714(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E758(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022E9C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022EA08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022F228(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022F26C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022F550(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10022F594(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002304D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023051C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023075C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) _crlaxStoredLabel];
  [v1 _crlaxSetStoredLabel:v2];
}

void sub_100231490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1002314E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100231524(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100231568(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v5, "wantsAlternateContextMenuBehaviorAtPoint:", *(double *)(a1 + 40), *(double *)(a1 + 48)))
  {
    *a3 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

UIMenu *sub_1002315E4(uint64_t a1)
{
  return +[UIMenu menuWithTitle:&stru_101538650 children:*(void *)(a1 + 32)];
}

void sub_100231AE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100231B24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023220C(id a1)
{
  int v1 = +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E3D18);
  }
  id v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10108E418(v1, v2);
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E3D38);
  }
  id v3 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101066770(v3, v1);
  }
  uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBezierPath(CRLCanvasAdditions) boundsIncludingCRLStroke:]_block_invoke");
  id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPath_CRLCanvasAdditions.m"];
}

void sub_100232348(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023238C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002323D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100232DCC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100232E10(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100233448(uint64_t a1, void *a2, BOOL *a3, BOOL *a4)
{
  uint64_t v6 = a1;
  char v12 = 0;
  char v11 = 1;
  uint64_t v7 = *(void *)(a1 + 32);
  long long v8 = *(uint64_t (**)(uint64_t, id, char *, char *))(v7 + 16);
  id v9 = a2;
  LODWORD(v7) = v8(v7, v9, &v12, &v11);
  LODWORD(v6) = (*(uint64_t (**)(void))(*(void *)(v6 + 40) + 16))();

  *a3 = v12 != 0;
  *a4 = v11 != 0;
  return v7 & v6;
}

void sub_100234F20(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100234F64(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100234FA8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100234FEC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235030(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235074(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002350B8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002350FC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235140(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235184(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002351C8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023520C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235250(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100235294(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002352D8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023531C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023668C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002366D0(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100236714(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100236758(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023679C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002367E0(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100236B30(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

id sub_10023700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) p_appendAttributedTextForDrawing:a2 drawingResults:a3 to:*(void *)(a1 + 40)];
}

int64_t sub_100237214(id a1, id a2, id a3)
{
  return (int64_t)[a2 compare:a3];
}

void sub_100237784(uint64_t a1)
{
  double v23 = +[NSMutableDictionary dictionary];
  id v2 = [*(id *)(a1 + 32) consolidatedDrawing];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) consolidatedDrawing];
    uint64_t v4 = [v3 visualizationManager];
    id v5 = [v4 valueForRecognitionStatusKey:@"CHStatusKeyStatus"];
    if ([v5 isEqualToString:@"Finished"])
    {
    }
    else
    {
      uint64_t v6 = (uint64_t)[*(id *)(a1 + 32) refreshCount];

      if (v6 < 60)
      {
        char v21 = 0;
        goto LABEL_8;
      }
    }
    uint64_t v7 = *(void **)(a1 + 32);
    long long v8 = [v7 consolidatedDrawing];
    id v9 = [v7 p_recognitionStatusStringsForDrawing:v8];
    [v23 setObject:v9 forKeyedSubscript:@"CRLPKDrawingCombinedStatus"];
  }
  char v21 = 1;
LABEL_8:
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = *(id *)(a1 + 40);
  id v10 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v27;
    do
    {
      for (int i = 0; i != v11; int i = (char *)i + 1)
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        uint64_t v15 = [v14 visualizationManager];
        uint64_t v16 = [v15 valueForRecognitionStatusKey:@"CHStatusKeyStatus"];
        if ([v16 isEqualToString:@"Finished"])
        {
        }
        else
        {
          uint64_t v17 = (uint64_t)[*(id *)(a1 + 32) refreshCount];

          if (v17 < 60)
          {
            char v21 = 0;
            continue;
          }
        }
        uint64_t v18 = [*(id *)(a1 + 32) p_idStringForDrawing:v14];
        uint64_t v19 = [*(id *)(a1 + 32) p_recognitionStatusStringsForDrawing:v14];
        [v23 setObject:v19 forKeyedSubscript:v18];
      }
      id v11 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v11);
  }

  if ((v21 & 1) == 0 && (uint64_t)[*(id *)(a1 + 32) refreshCount] <= 59)
  {
    dispatch_time_t v20 = dispatch_time(0, 500000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100237B04;
    block[3] = &unk_1014CBBB0;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v20, (dispatch_queue_t)&_dispatch_main_q, block);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100237B50;
  v24[3] = &unk_1014CBE78;
  v24[4] = *(void *)(a1 + 32);
  v24[5] = v23;
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, v24);
}

id sub_100237B04(uint64_t a1)
{
  [*(id *)(a1 + 32) setRefreshCount:[*(id *)(a1 + 32) refreshCount] + 1];
  id v2 = *(void **)(a1 + 32);

  return _[v2 refresh];
}

void sub_100237B50(uint64_t a1)
{
  [*(id *)(a1 + 32) setRecognitionStatusStrings:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handwritingRecognitionStatusHelperDidUpdateRecognitionStatusStrings];
}

void sub_100237ED8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100237F1C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100239528(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023956C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023972C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100239770(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023AD30(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023AD74(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023ADB8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023ADFC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023AF4C(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_1016A9368;
  qword_1016A9368 = v1;
}

void sub_10023AFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10023B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRLWPFontMetricsCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10023B574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10023B5C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023B608(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023B64C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023B690(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10023C790(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C7D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C818(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C85C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C8A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C8E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C928(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C96C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C9B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023C9F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CA38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CA7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CAC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CB04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CB48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CB8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CBD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CC14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CC58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CC9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CCE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023CD24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_10023D050(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    CFDictionaryRef result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + _Block_object_dispose(&STACK[0x2F0], 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + _Block_object_dispose(&STACK[0x2F0], 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        CFDictionaryRef result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t **sub_10023D0B4(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    id v11 = (char *)operator new(0x98uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 8_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_10001C4D8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10023D194(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10001C988((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_10023D2B0(id a1)
{
  id v1 = [(CRLInsertionContext *)[CRLNonInteractiveInsertionContext alloc] initSubclass];
  uint64_t v2 = (void *)qword_1016A9370;
  qword_1016A9370 = (uint64_t)v1;
}

void sub_10023D344(id a1)
{
  id v1 = [(CRLInsertionContext *)[CRLNonInteractiveFloatingInsertionContext alloc] initSubclass];
  uint64_t v2 = (void *)qword_1016A9380;
  qword_1016A9380 = (uint64_t)v1;
}

void sub_10023D3D8(id a1)
{
  id v1 = [(CRLInsertionContext *)[CRLIosDragFloatingInsertionContext alloc] initSubclass];
  uint64_t v2 = (void *)qword_1016A9390;
  qword_1016A9390 = (uint64_t)v1;
}

void sub_10023D46C(id a1)
{
  id v1 = [(CRLInsertionContext *)[CRLNonInteractiveNonEditingEndingFloatingInsertionContext alloc] initSubclass];
  uint64_t v2 = (void *)qword_1016A93A0;
  qword_1016A93A0 = (uint64_t)v1;
}

void sub_10023D500(id a1)
{
  id v1 = [(CRLInsertionContext *)[CRLNonInteractiveInlineInsertionContext alloc] initSubclass];
  uint64_t v2 = (void *)qword_1016A93B0;
  qword_1016A93B0 = (uint64_t)v1;
}

void sub_10023D7C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023D804(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023DCE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023DD24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023E1CC(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v4 = +[CRLAsset null];
  id v2 = [v1 initWithImageData:v4];
  unint64_t v3 = (void *)qword_1016A93C0;
  qword_1016A93C0 = (uint64_t)v2;
}

void sub_10023E4FC(id a1)
{
  id v1 = +[NSBundle mainBundle];
  id v5 = [v1 URLForResource:@"CRLErrorImageIcon" withExtension:@"pdf"];

  id v2 = +[CRLAssetManager readonlyAssetFromURL:v5];
  unint64_t v3 = [(CRLImageProvider *)[CRLPDFImageProvider alloc] initWithImageData:v2];
  id v4 = (void *)qword_1016A93D0;
  qword_1016A93D0 = (uint64_t)v3;
}

void sub_10023E820(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023E864(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10023EFC4(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  BOOL v6 = a2;
  uint64_t v7 = a4;
  if (a3 == 2)
  {
    CFStringRef v9 = @"com.apple.freeform";
  }
  else
  {
    if (a3 == 28)
    {
      unint64_t v8 = &NSPOSIXErrorDomain;
    }
    else
    {
      if (a3 != 640)
      {
        unsigned __int8 v10 = 0;
        goto LABEL_10;
      }
      unint64_t v8 = &NSCocoaErrorDomain;
    }
    CFStringRef v9 = (const __CFString *)*v8;
  }
  unsigned __int8 v10 = [(NSString *)v6 isEqualToString:v9];
LABEL_10:

  return v10;
}

BOOL sub_10023F068(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  BOOL v6 = a2;
  uint64_t v7 = a4;
  switch(a3)
  {
    case -999:
      unint64_t v8 = &NSURLErrorDomain;
      break;
    case 104:
      unint64_t v8 = (const NSErrorDomain *)&off_1014F2B68;
      break;
    case 3072:
      unint64_t v8 = &NSCocoaErrorDomain;
      break;
    default:
      unsigned __int8 v9 = 0;
      goto LABEL_9;
  }
  unsigned __int8 v9 = [(NSString *)v6 isEqualToString:*v8];
LABEL_9:

  return v9;
}

BOOL sub_10023F10C(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  BOOL v6 = a2;
  uint64_t v7 = a4;
  if (a3 == 17)
  {
    unint64_t v8 = &NSPOSIXErrorDomain;
  }
  else
  {
    if (a3 != 516)
    {
      unsigned __int8 v9 = 0;
      goto LABEL_7;
    }
    unint64_t v8 = &NSCocoaErrorDomain;
  }
  unsigned __int8 v9 = [(NSString *)v6 isEqualToString:*v8];
LABEL_7:

  return v9;
}

BOOL sub_10023F19C(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  BOOL v6 = a2;
  uint64_t v7 = a4;
  if (a3 == 2)
  {
    unint64_t v8 = &NSPOSIXErrorDomain;
  }
  else
  {
    if (a3 != 260 && a3 != 4)
    {
      unsigned __int8 v9 = 0;
      goto LABEL_8;
    }
    unint64_t v8 = &NSCocoaErrorDomain;
  }
  unsigned __int8 v9 = [(NSString *)v6 isEqualToString:*v8];
LABEL_8:

  return v9;
}

BOOL sub_10023F234(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  BOOL v6 = a2;
  uint64_t v7 = a4;
  unsigned __int8 v8 = 0;
  if (a3 <= 512)
  {
    if (a3 == 1)
    {
      unsigned __int8 v9 = &NSPOSIXErrorDomain;
      goto LABEL_9;
    }
    if (a3 != 257) {
      goto LABEL_10;
    }
LABEL_7:
    unsigned __int8 v9 = &NSCocoaErrorDomain;
LABEL_9:
    unsigned __int8 v8 = [(NSString *)v6 isEqualToString:*v9];
    goto LABEL_10;
  }
  if (a3 == 513 || a3 == 5124) {
    goto LABEL_7;
  }
LABEL_10:

  return v8;
}

BOOL sub_10023F2E0(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  if (a3 == 3328) {
    return -[NSString isEqualToString:](a2, "isEqualToString:", NSCocoaErrorDomain, a4);
  }
  else {
    return 0;
  }
}

void sub_10023F4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10023F4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_10023F9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10023FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10023FDDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10023FE20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002400A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002400EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024064C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100240664(void *a1)
{
  id v2 = [*(id *)(a1[4] + 144) objectForKey:a1[6]];
  unint64_t v3 = v2;
  if (v2)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = [v2 BOOLValue];
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = *(id *)(a1[4] + 8);
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
LABEL_5:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = [*(id *)(*((void *)&v14 + 1) + 8 * v8) canLoadObjectOfClass:a1[6]];
        if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
          break;
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v6) {
            goto LABEL_5;
          }
          break;
        }
      }
    }

    unsigned __int8 v9 = *(void **)(a1[4] + 144);
    if (!v9)
    {
      id v10 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:0 capacity:0];
      uint64_t v11 = a1[4];
      uint64_t v12 = *(void **)(v11 + 144);
      *(void *)(v11 + 144) = v10;

      unsigned __int8 v9 = *(void **)(a1[4] + 144);
    }
    uint64_t v13 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), (void)v14);
    [v9 setObject:v13 forKey:a1[6]];
  }
}

void sub_1002408AC(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v8 = +[CRLBoardItemImporter supportedFileTypes];
        unsigned __int8 v9 = [v7 crl_conformsToAnyUTI:v8];

        if (v9)
        {
          uint64_t v12 = 2;
          goto LABEL_16;
        }
        id v10 = +[CRLIngestionTypes supportedRichTextTypes];
        unsigned __int8 v11 = [v7 crl_conformsToAnyUTI:v10];

        if (v11)
        {
          uint64_t v12 = 1;
          goto LABEL_16;
        }
        if (+[CRLIngestionTypes isValidPlainTextUTI:v7])
        {
          uint64_t v12 = 4;
          goto LABEL_16;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      uint64_t v12 = 0;
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_16:

  *(void *)(*(void *)(a1 + 32) + 32) = v12;
}

void sub_100240AC8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[CRLIngestionTypes supportedImageTypes];
  *(unsigned char *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x2F0], 8) = [v2 p_containsAnyUTIFromList:v3];
}

void sub_1002412A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    dispatch_time_t v20 = sub_1002415AC;
    char v21 = &unk_1014E4918;
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    id v22 = v8;
    uint64_t v23 = v9;
    id v24 = v10;
    id v25 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 80);
    id v26 = v11;
    uint64_t v29 = v12;
    id v27 = *(id *)(a1 + 64);
    id v28 = *(id *)(a1 + 72);
    if (+[NSThread isMainThread]) {
      v20((uint64_t)block);
    }
    else {
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else
  {
    if (v6)
    {
      long long v13 = *(void **)(a1 + 64);
      long long v14 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 80)];
      [v13 setObject:v7 forKey:v14];

      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014E4978);
      }
      long long v15 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10108F9E4(v15);
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4938);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108F94C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4958);
      }
      long long v16 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v16);
      }
      long long v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]_block_invoke");
      uint64_t v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 219, 0, "invalid nil value for '%{public}s'", "itemProviderError");
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
  }
}

void sub_1002415AC(uint64_t a1)
{
  id v2 = [[CRLImageFillProvider alloc] initWithData:*(void *)(a1 + 32) type:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100241698;
  v7[3] = &unk_1014E48F0;
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 88);
  id v8 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 72);
  id v10 = *(id *)(a1 + 80);
  [(CRLImageFillProvider *)v2 provideImageDataForAssetOwner:v3 compatibilityAlertPresenter:v4 completionHandler:v7];
}

void sub_100241698(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
    id v10 = v8;
    id v11 = v5;
LABEL_5:
    [v10 setObject:v11 forKey:v9];
    goto LABEL_6;
  }
  if (v6)
  {
    uint64_t v12 = *(void **)(a1 + 40);
    id v9 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
    id v10 = v12;
    id v11 = v7;
    goto LABEL_5;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E48A8);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10108FA8C();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E48C8);
  }
  long long v13 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v13);
  }
  id v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]_block_invoke");
  long long v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v14, 210, 0, "invalid nil value for '%{public}s'", "imageFillError");

LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100241878(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002418BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100241900(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100241944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100241988(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002419CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100241A10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100241A54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100241A98(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  uint64_t v3 = [*(id *)(a1 + 32) allKeys];
  uint64_t v4 = [v3 sortedArrayUsingSelector:"compare:"];

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v26;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(*((void *)&v25 + 1) + 8 * (void)v9)];
        [v2 addObject:v10];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v7);
  }

  id v11 = +[NSMutableArray array];
  uint64_t v12 = [*(id *)(a1 + 40) allKeys];
  long long v13 = [v12 sortedArrayUsingSelector:"compare:"];

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = v13;
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(*((void *)&v21 + 1) + 8 * (void)v18) v21];
        [v11 addObject:v19];

        uint64_t v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v16);
  }

  uint64_t v20 = *(void *)(a1 + 48);
  if (v20) {
    (*(void (**)(uint64_t, void *, void *))(v20 + 16))(v20, v2, v11);
  }
}

void sub_100241D74(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasImportableImages])
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
  }
  else
  {
    id v2 = +[CRLIngestionTypes supportedMovieTypes];
    uint64_t v3 = +[CRLIngestionTypes supportedGenericFileTypes];
    id v7 = [v2 arrayByAddingObjectsFromArray:v3];

    if (sub_1002094C4(0x2000000000000uLL))
    {
      uint64_t v4 = +[CRLIngestionTypes supported3DFileTypes];
      uint64_t v5 = [v7 arrayByAddingObjectsFromArray:v4];

      id v6 = (id)v5;
    }
    else
    {
      id v6 = v7;
    }
    id v8 = v6;
    *(unsigned char *)(*(void *)(a1 + 32) + 64) = [*(id *)(a1 + 32) p_containsAnyUTIFromList:v6];
  }
}

void sub_100241F14(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (+[CRLIngestionTypes isValidPlainTextUTI:](CRLIngestionTypes, "isValidPlainTextUTI:", *(void *)(*((void *)&v7 + 1) + 8 * i), (void)v7))
        {
          *(unsigned char *)(*(void *)(a1 + 32) + 80) = 1;
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1002420AC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[CRLIngestionTypes supportedRichTextTypes];
  *(unsigned char *)(*(void *)(a1 + 32) + 96) = [v2 p_containsAnyUTIFromList:v3];
}

void sub_100242430(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = objc_alloc((Class)NSMutableAttributedString);
    NSAttributedStringDocumentAttributeKey v21 = NSDocumentTypeDocumentAttribute;
    NSAttributedStringDocumentType v22 = NSRTFDTextDocumentType;
    long long v8 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    id v20 = 0;
    id v9 = [v7 initWithURL:v5 options:v8 documentAttributes:0 error:&v20];
    id v10 = v20;

    if (!v9)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4A20);
      }
      id v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108FBCC(v11, v10);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4A40);
      }
      uint64_t v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v12);
      }
      long long v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadImportedRichTextStringWithHandler:]_block_invoke");
      id v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      id v15 = (objc_class *)objc_opt_class();
      id v16 = NSStringFromClass(v15);
      uint64_t v17 = [v10 domain];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 326, 0, "Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v16, v17, [v10 code], v10);
    }
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E4A60);
    }
    uint64_t v18 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10108FB24(v18);
    }
    id v9 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if (v19) {
    (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v9, 0);
  }
}

void sub_10024271C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100242760(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002427A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002427E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v19 = 0;
    long long v8 = +[NSAttributedString objectWithItemProviderData:v5 typeIdentifier:v7 error:&v19];
    id v9 = v19;
    if (!v8)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4AA8);
      }
      id v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108FD64(v10, v9);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4AC8);
      }
      id v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v11);
      }
      uint64_t v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadImportedRichTextStringWithHandler:]_block_invoke");
      long long v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      id v14 = (objc_class *)objc_opt_class();
      id v15 = NSStringFromClass(v14);
      id v16 = [v9 domain];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 338, 0, "Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v15, v16, [v9 code], v9);
    }
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E4AE8);
    }
    uint64_t v17 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10108FCBC(v17);
    }
    long long v8 = 0;
  }
  uint64_t v18 = *(void *)(a1 + 40);
  if (v18) {
    (*(void (**)(uint64_t, void *, void))(v18 + 16))(v18, v8, 0);
  }
}

void sub_100242A58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100242A9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100242AE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100242D80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E4B30);
    }
    long long v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10108FFAC(v8);
    }
    id v9 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v17 = 0;
    id v9 = +[NSString crl_stringWithItemProviderData:v5 typeIdentifier:v10 error:&v17];
    id v7 = v17;
    if (!v9)
    {
      int v16 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4B50);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10108FEFC(a1 + 32, v16);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4B70);
      }
      id v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v11);
      }
      uint64_t v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadImportedTextStringWithHandler:]_block_invoke");
      long long v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      +[CRLAssertionHandler handleFailureInFunction:v12, v13, 374, 0, "Unable to make a string out of data with UTI %@", *(void *)(a1 + 32) file lineNumber isFatal description];
    }
    if (v7)
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014E4B90);
      }
      id v14 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10108FE54(v14);
      }
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v9, 0);
  }
}

void sub_100243014(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100243058(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024309C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002430E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002431A8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasNativeTypes])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 8) firstObject];
    id v3 = [v2 teamData];
    if (v3)
    {
      uint64_t v4 = objc_opt_class();
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = objc_opt_class();
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = objc_opt_class();
      uint64_t v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, v7, v8, v9, objc_opt_class(), 0);
      id v11 = (objc_class *)objc_opt_class();
      id v18 = 0;
      uint64_t v12 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v10 fromData:v3 error:&v18];
      id v13 = v18;
      uint64_t v14 = sub_10024715C(v11, v12);

      if (!v14)
      {
        if (qword_101719A68 != -1) {
          dispatch_once(&qword_101719A68, &stru_1014E4BB0);
        }
        uint64_t v15 = off_10166B498;
        if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
          sub_101090054(v15);
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = *(void **)(v16 + 128);
  *(void *)(v16 + 12_Block_object_dispose(&STACK[0x2F0], 8) = v14;
}

void sub_10024339C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100243460(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v4[0] = @"com.apple.freeform.CRLNativeMetadata";
  v4[1] = @"com.apple.freeform.CRLNativeData";
  id v3 = +[NSArray arrayWithObjects:v4 count:2];
  *(unsigned char *)(*(void *)(a1 + 32) + 112) = [v2 p_containsAnyUTIFromList:v3];
}

void sub_100243A04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100243A48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100243A8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[NSMutableArray array];
  if (v6)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E4C10);
    }
    uint64_t v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010902F8(v8);
    }
    [v7 addObject:v6];
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = objc_opt_class();
    id v11 = sub_1002469D0(v10, v5);
    if (v11)
    {
      id v12 = [*(id *)(a1 + 32) p_shouldKeepHighlights];
      id v13 = +[CRLPasteboardController descriptionsForBoardItemsOnPasteboardObject:v11];
      uint64_t v9 = +[CRLPasteboardController providersForBoardItemsAndTextWithBoardItemFactory:*(void *)(a1 + 40) keepHighlights:v12 fromPasteboardObject:v11 descriptionsForBoardItems:v13 validGeometries:0];
    }
    else
    {
      int v14 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4C30);
      }
      uint64_t v15 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10109021C(v15, (uint64_t)v5, v14);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4C50);
      }
      uint64_t v16 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v16);
      }
      id v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForNativeBoardItemsWithBoardItemFactory:loadHandler:]_block_invoke");
      id v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      id v19 = (objc_class *)objc_opt_class();
      id v20 = NSStringFromClass(v19);
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 541, 0, "Native object provided was not a pasteboard object! Got %{public}@", v20);

      uint64_t v9 = 0;
    }
  }
  uint64_t v21 = *(void *)(a1 + 48);
  if (v21) {
    (*(void (**)(uint64_t, void *, void *))(v21 + 16))(v21, v9, v7);
  }
}

void sub_100243D40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100243D84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100243DC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100243E0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100243E50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100244D40(_Unwind_Exception *a1)
{
}

uint64_t sub_100244DBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100244DCC(uint64_t a1)
{
}

void sub_100244DD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  id v18 = sub_100245010;
  id v19 = &unk_1014E4D80;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  id v20 = v5;
  uint64_t v21 = v6;
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v26 = v8;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 56);
  id v22 = v9;
  uint64_t v23 = v10;
  id v24 = *(id *)(a1 + 32);
  id v11 = [v4 loadDataRepresentationForTypeIdentifier:v5 completionHandler:&v16];
  if (v11)
  {
    [*(id *)(a1 + 64) addObject:v11];
  }
  else
  {
    int v12 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E4DA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010903A0((uint64_t)v5, v12);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E4DC0);
    }
    id v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v13);
    }
    int v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
    uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
    +[CRLAssertionHandler handleFailureInFunction:v14, v15, 609, 0, "No progress provided for UTI %@", v5, v16, v17, v18, v19, v20, v21, v22, v23 file lineNumber isFatal description];
  }
}

void sub_100245010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v35 = 0;
    uint64_t v8 = +[NSString crl_stringWithItemProviderData:v5 typeIdentifier:v7 error:&v35];
    id v9 = v35;
    if (v9)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4CD8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101090578();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4CF8);
      }
      uint64_t v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v10);
      }
      id v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
      int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 572, 0, "expected nil value for '%{public}s'", "stringError");
    }
    id v13 = +[CRLPasteboardController detectedImportableURLForPasteboardString:v8 canTrimWhitespace:1];
    if (v13)
    {
      int v14 = [CRLURLBoardItemProvider alloc];
      uint64_t v15 = [*(id *)(a1 + 40) suggestedName];
      uint64_t v16 = [(CRLURLBoardItemProvider *)v14 initWithURL:v13 fallbackBoardItemProvider:0 isDetectedURL:0 suggestedName:v15];
    }
    else
    {
      if ((unint64_t)[v8 length] > *(void *)(a1 + 80))
      {
        uint64_t v16 = [[CRLBoardItemProviderFactory alloc] initWithBoardItemFactory:*(void *)(a1 + 48)];
        id v18 = [*(id *)(a1 + 56) defaultTextFileName];
        id v19 = [*(id *)(a1 + 40) suggestedName];

        if (v19)
        {
          uint64_t v20 = [*(id *)(a1 + 40) suggestedName];

          id v18 = (void *)v20;
        }
        id v34 = 0;
        uint64_t v21 = [v8 crl_writeToFileUsingName:v18 error:&v34];
        id v22 = v34;
        uint64_t v23 = v22;
        double v33 = v18;
        if (v22)
        {
          id v31 = v22;
          int v29 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          unsigned __int8 v30 = v21;
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E4D18);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_1010904E0((uint64_t)v6, v29);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E4D38);
          }
          id v24 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10106590C(v24);
          }
          uint64_t v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
          uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
          +[CRLAssertionHandler handleFailureInFunction:v25, v26, 591, 0, "Failed to create a temporary file for oversize string: %@", v6 file lineNumber isFatal description];

          long long v27 = (void *)v25;
          uint64_t v23 = v31;
          uint64_t v21 = v30;
        }
        else
        {
          id v36 = v21;
          long long v28 = +[NSArray arrayWithObjects:&v36 count:1];
          uint64_t v32 = [(CRLBoardItemProviderFactory *)v16 providersForBoardItemsFromURLs:v28];

          long long v27 = (void *)v32;
          [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) crl_addObjectsFromNonNilArray:v32];
        }

        goto LABEL_33;
      }
      uint64_t v16 = +[CRLTextBoxingBoardItemProvider objectWithItemProviderData:v5 typeIdentifier:*(void *)(a1 + 32) error:0];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) crl_addNonNilObject:v16];
LABEL_33:

    goto LABEL_34;
  }
  if (qword_101719A68 != -1) {
    dispatch_once(&qword_101719A68, &stru_1014E4D58);
  }
  uint64_t v17 = off_10166B498;
  if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
    sub_101090438(v17);
  }
LABEL_34:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100245544(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245588(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002455CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245610(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245654(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100245698(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002456DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245720(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100245954;
  v14[3] = &unk_1014E4EB0;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 64);
  id v15 = v5;
  uint64_t v17 = v6;
  int8x16_t v13 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v13.i64[0];
  int8x16_t v16 = vextq_s8(v13, v13, 8uLL);
  uint64_t v8 = [v4 loadDataRepresentationForTypeIdentifier:v5 completionHandler:v14];
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
  }
  else
  {
    int v9 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E4ED0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101090610((uint64_t)v5, v9);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E4EF0);
    }
    uint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    id v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
    int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
    +[CRLAssertionHandler handleFailureInFunction:v11, v12, 634, 0, "No progress provided for UTI %@", v5 file lineNumber isFatal description];
  }
}

void sub_100245954(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v21 = 0;
    uint64_t v8 = +[NSString crl_stringWithItemProviderData:v5 typeIdentifier:v7 error:&v21];
    id v9 = v21;
    if (v9)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4E08);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010907E8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4E28);
      }
      uint64_t v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v10);
      }
      id v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
      int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 620, 0, "expected nil value for '%{public}s'", "stringError");
    }
    int8x16_t v13 = +[NSURL URLWithString:v8];
    if (!v13)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4E48);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101090750();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E4E68);
      }
      int v14 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v14);
      }
      id v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSItemProviderItemSource loadProvidersForImportedBoardItemsUsingBoardItemFactory:maximumStringLength:WithLoadHandler:]_block_invoke");
      int8x16_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSItemProviderItemSource.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 623, 0, "invalid nil value for '%{public}s'", "url");
    }
    uint64_t v17 = [CRLURLBoardItemProvider alloc];
    id v18 = [*(id *)(a1 + 40) suggestedName];
    id v19 = [(CRLURLBoardItemProvider *)v17 initWithURL:v13 fallbackBoardItemProvider:0 isDetectedURL:0 suggestedName:v18];

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) crl_addNonNilObject:v19];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E4E88);
    }
    uint64_t v20 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010906A8(v20);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100245D1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245D60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245DA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245DE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245E2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100245E70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245EB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245EF8(uint64_t a1, uint64_t a2)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) crl_addObjectsFromNonNilArray:a2];
  id v3 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v3);
}

void sub_100245F40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245F84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100245FC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (!v5 || v6)
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014E4FA0);
      }
      id v9 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_101090880((uint64_t)v5, v9, v7);
      }
    }
    else
    {
      uint64_t v8 = [[CRLInfoImporterBoardItemProvider alloc] initWithURL:v5 type:*(void *)(a1 + 32) boardItemFactory:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v8];
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_1002460C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100246104(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  id v2 = [*(id *)(a1 + 40) cancellationHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) cancellationHandler];
    v3[2]();
  }
}

void sub_1002461A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002461EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100246230(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100246274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_10024658C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002465D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100246614(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[NSMutableArray array];
  if (v6)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014E50B0);
    }
    uint64_t v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010902F8(v8);
    }
    [v7 addObject:v6];
  }
  else
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = sub_1002469D0(v9, v5);
    id v11 = v10;
    if (v10)
    {
      int v12 = [v10 makeTextboxFromCopiedTextWith:*(void *)(a1 + 32)];
      int8x16_t v13 = [v12 textStorage];
      (*(void (**)(void, void *, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v13, [v11 isSmartCopyPaste]);
    }
  }
}

void sub_10024675C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_1002469B8()
{
  return [v0 code];
}

id sub_1002469D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2 && (objc_opt_isKindOfClass() & 1) != 0) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id sub_100246A34(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  uint64_t v9 = a3;
  if (v5)
  {
    if (!a2)
    {
LABEL_5:
      id v7 = v5;
      goto LABEL_7;
    }
    while (1)
    {
      id v6 = v9++;
      if (([v5 conformsToProtocol:*v6] & 1) == 0) {
        break;
      }
      if (!--a2) {
        goto LABEL_5;
      }
    }
  }
  id v7 = 0;
LABEL_7:

  return v7;
}

id sub_100246AC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_100246A34(a1, a2, &a9);

  return v9;
}

id sub_100246B08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a1;
  uint64_t v11 = sub_100246A34(v10, a2, &a9);
  int v12 = (void *)v11;
  if (v10 && !v11)
  {
    int v13 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E50F8);
    }
    int v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101090A08(v14, (uint64_t)v10, v13);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5118);
    }
    id v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v15);
    }
    int8x16_t v16 = +[NSString stringWithUTF8String:"id CRLCheckedProtocolCast(__strong id<NSObject>, NSUInteger, ...)"];
    uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m"];
    id v18 = (objc_class *)objc_opt_class();
    id v19 = NSStringFromClass(v18);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 65, 0, "Unexpected object type %{public}@ in checked cast to multiple protocols", v19, &a9);
  }

  return v12;
}

void sub_100246CBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100246D00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100246D44(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a1;
  id v10 = a4;
  if (v6 && (objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!a3)
    {
LABEL_6:
      id v8 = v6;
      goto LABEL_8;
    }
    while (1)
    {
      id v7 = v10++;
      if (([v6 conformsToProtocol:*v7] & 1) == 0) {
        break;
      }
      if (!--a3) {
        goto LABEL_6;
      }
    }
  }
  id v8 = 0;
LABEL_8:

  return v8;
}

id sub_100246DEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_100246D44(a1, a2, a3, &a9);

  return v9;
}

id sub_100246E2C(void *a1, objc_class *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a1;
  uint64_t v12 = sub_100246D44(v11, (uint64_t)a2, a3, &a9);
  int v13 = (void *)v12;
  if (v11 && !v12)
  {
    unsigned int v14 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5138);
    }
    id v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = v15;
      id v24 = (objc_class *)objc_opt_class();
      uint64_t v25 = NSStringFromClass(v24);
      uint64_t v26 = NSStringFromClass(a2);
      *(_DWORD *)buf = 67110402;
      unsigned int v28 = v14;
      __int16 v29 = 2082;
      unsigned __int8 v30 = "id CRLCheckedClassAndProtocolCast(__strong id<NSObject>, __unsafe_unretained Class, NSUInteger, ...)";
      __int16 v31 = 2082;
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m";
      __int16 v33 = 1024;
      int v34 = 106;
      __int16 v35 = 2114;
      id v36 = v25;
      __int16 v37 = 2114;
      double v38 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected object type %{public}@ in checked dynamic cast to class %{public}@ and 1 or more protocols", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5158);
    }
    int8x16_t v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v16);
    }
    uint64_t v17 = +[NSString stringWithUTF8String:"id CRLCheckedClassAndProtocolCast(__strong id<NSObject>, __unsafe_unretained Class, NSUInteger, ...)"];
    id v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m"];
    id v19 = (objc_class *)objc_opt_class();
    uint64_t v20 = NSStringFromClass(v19);
    id v21 = NSStringFromClass(a2);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 106, 0, "Unexpected object type %{public}@ in checked dynamic cast to class %{public}@ and 1 or more protocols", v20, v21);
  }

  return v13;
}

void sub_1002470D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100247118(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10024715C(objc_class *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1002469D0((uint64_t)a1, v3);
  id v5 = (void *)v4;
  if (v3 && !v4)
  {
    unsigned int v6 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5178);
    }
    id v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      id v15 = v7;
      int8x16_t v16 = (objc_class *)objc_opt_class();
      uint64_t v17 = NSStringFromClass(v16);
      id v18 = NSStringFromClass(a1);
      *(_DWORD *)buf = 67110402;
      unsigned int v20 = v6;
      __int16 v21 = 2082;
      id v22 = "id CRLCheckedDynamicCast(__unsafe_unretained Class, __strong id<NSObject>)";
      __int16 v23 = 2082;
      id v24 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m";
      __int16 v25 = 1024;
      int v26 = 131;
      __int16 v27 = 2114;
      unsigned int v28 = v17;
      __int16 v29 = 2114;
      unsigned __int8 v30 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected object type %{public}@ in checked dynamic cast to %{public}@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5198);
    }
    id v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v8);
    }
    uint64_t v9 = +[NSString stringWithUTF8String:"id CRLCheckedDynamicCast(__unsafe_unretained Class, __strong id<NSObject>)"];
    id v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m"];
    id v11 = (objc_class *)objc_opt_class();
    uint64_t v12 = NSStringFromClass(v11);
    int v13 = NSStringFromClass(a1);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 131, 0, "Unexpected object type %{public}@ in checked dynamic cast to %{public}@", v12, v13);
  }

  return v5;
}

void sub_1002473F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100247438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100247530(id a1)
{
  uint64_t v3 = 0x3F00A10021002ELL;
  __int16 v4 = 191;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:5];
  id v2 = (void *)qword_1016A93E0;
  qword_1016A93E0 = v1;
}

void sub_10024760C(id a1)
{
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&unk_101177028 length:15];
  id v2 = (void *)qword_1016A93F0;
  qword_1016A93F0 = v1;
}

void sub_1002476AC(id a1)
{
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&unk_101177046 length:31];
  id v2 = (void *)qword_1016A9400;
  qword_1016A9400 = v1;
}

void sub_10024774C(id a1)
{
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&unk_101177084 length:19];
  id v2 = (void *)qword_1016A9410;
  qword_1016A9410 = v1;
}

void sub_1002477EC(id a1)
{
  int v3 = 538517528;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:2];
  id v2 = (void *)qword_1016A9420;
  qword_1016A9420 = v1;
}

void sub_100247890(id a1)
{
  int v3 = 538443815;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:2];
  id v2 = (void *)qword_1016A9430;
  qword_1016A9430 = v1;
}

void sub_100247934(id a1)
{
  int v3 = 538509351;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:2];
  id v2 = (void *)qword_1016A9440;
  qword_1016A9440 = v1;
}

void sub_1002479D8(id a1)
{
  uint64_t v3 = 0x201D201C20192018;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:4];
  id v2 = (void *)qword_1016A9450;
  qword_1016A9450 = v1;
}

void sub_100247AB0(id a1)
{
  uint64_t v1 = +[NSCharacterSet characterSetWithRange:](NSCharacterSet, "characterSetWithRange:", 65024, 16);
  id v2 = (void *)qword_1016A9460;
  qword_1016A9460 = v1;
}

void sub_100247B4C(id a1)
{
  uint64_t v3 = 0x270022201D2019;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:4];
  id v2 = (void *)qword_1016A9470;
  qword_1016A9470 = v1;
}

void sub_100247C24(id a1)
{
  uint64_t v3 = 0x270022201C2018;
  uint64_t v1 = +[NSCharacterSet crlwp_characterSetWithCharactersInArray:&v3 length:4];
  id v2 = (void *)qword_1016A9480;
  qword_1016A9480 = v1;
}

id sub_100247CBC(id a1)
{
  uint64_t v8 = 0xEFFFC00050004;
  __int16 v9 = 6;
  uint64_t v1 = +[NSString stringWithCharacters:&v8 length:5];
  v3 = id v2 = +[NSMutableCharacterSet characterSetWithCharactersInString:v1];
  __int16 v4 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  [v3 formUnionWithCharacterSet:v4];

  [v3 formUnionWithCharacterSet:v2];
  id v5 = +[NSCharacterSet crlwp_allQuotesCharacterSetExcludingRight];
  [v3 formUnionWithCharacterSet:v5];

  id v6 = [v3 copy];

  return v6;
}

id sub_100247E10(id a1)
{
  uint64_t v9 = 0xEFFFC00050004;
  __int16 v10 = 6;
  uint64_t v1 = +[NSString stringWithCharacters:&v9 length:5];
  id v2 = +[NSMutableCharacterSet characterSetWithCharactersInString:v1];
  uint64_t v3 = +[NSMutableCharacterSet characterSetWithCharactersInString:@"]., :?'!\"%*-/}"]);;
  __int16 v4 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  [v3 formUnionWithCharacterSet:v4];

  [v3 formUnionWithCharacterSet:v2];
  id v5 = +[NSCharacterSet crlwp_allQuotesCharacterSetExcludingLeft];
  [v3 formUnionWithCharacterSet:v5];

  id v6 = +[NSCharacterSet punctuationCharacterSet];
  [v3 formUnionWithCharacterSet:v6];

  id v7 = [v3 copy];

  return v7;
}

NSCharacterSet *__cdecl sub_100247F84(id a1)
{
  long long v4 = xmmword_1011770BE;
  int v5 = 539492356;
  uint64_t v1 = +[NSString stringWithCharacters:&v4 length:10];
  id v2 = +[NSCharacterSet characterSetWithCharactersInString:v1];

  return (NSCharacterSet *)v2;
}

void sub_100248520(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  int v5 = [*(id *)(a1 + 32) repForInfo:];
  if (+[CRLConnectionLineRep canConnectToRep:v5])
  {
    [*(id *)(a1 + 40) addObject:v6];
    if ((unint64_t)[*(id *)(a1 + 40) count] >= 3) {
      *a3 = 1;
    }
  }
}

void sub_100249150(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100249194(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024A1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A26C(id a1)
{
  if (!qword_1016A9490)
  {
    uint64_t v1 = +[NSSet setWithArray:&off_10155CBA8];
    id v2 = (void *)qword_1016A9490;
    qword_1016A9490 = v1;
  }
}

void sub_10024A368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A968(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024A9AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024AAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024ABD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024AC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024AD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024ADDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024AE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024AFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024B09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_10024BCE4(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v18 = sub_100064680(a4, a5, a8);
  double v20 = sub_10006468C(a6, a7, v18, v19);
  double v21 = sub_100347EC0(a1, a4, a5) * a10 / v20;
  *a2 = fmax(*a2, v21);
  double result = fmin(*a3, v21);
  *a3 = result;
  return result;
}

void sub_10024D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024D994(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) crlax_rangeOfLineFragmentAtCharIndex:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = result;
  *(void *)(v3 + 40) = v4;
  return result;
}

void sub_10024DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024DC54(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) wpSelectionClass];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10024DDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024DDDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10024DDEC(uint64_t a1)
{
}

void sub_10024DDF4(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_crlaxWPSelectionClass"), "selectionWithRange:", *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10024E204(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024E248(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024E5E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10024E5F8(uint64_t a1)
{
}

id sub_10024E600(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[CRLImageProviderPool sharedPool];
  uint64_t v5 = [v4 temporaryProviderForAsset:v3 shouldValidate:1];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isValid]
    && ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isError] & 1) == 0)
  {
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = sub_1002469D0(v8, *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (!v12)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E54C0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101090D24();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E54E0);
    }
    int v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v13);
    }
    unsigned int v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageFaceAnalyzer p_analyzeFaceRectsIfNeeded]_block_invoke");
    id v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageFaceAnalyzer.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 87, 0, "invalid nil value for '%{public}s'", "bitmapProvider");

    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  return [*(id *)(a1 + 32) p_analyzeFaceRectsWithProvider:v12];
}

void sub_10024E824(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024E868(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024EAFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

BOOL sub_10024EC10(uint64_t a1, void *a2)
{
  [a2 CGRectValue];
  return v3 * v4 > *(double *)(a1 + 32) * 0.699999988;
}

void sub_10024F3E4(uint64_t a1)
{
}

void sub_10024F5F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024F63C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024F9B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10024F9F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002502B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10025033C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100250380(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025075C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002507E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100250824(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100250A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);

  _Unwind_Resume(a1);
}

__n128 sub_100250A84(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_100250A94(uint64_t a1, uint64_t a2)
{
  id v19 = +[CRLBezierPath bezierPath];
  [v19 moveToPoint:*(double *)(a1 + 64), *(double *)(a1 + 72)];
  double v4 = sub_100454A90(a2);
  [v19 relativeLineToPoint:sub_1000646A4(v4, v5, *(double *)(a1 + 80))];
  uint64_t v6 = [*(id *)(a1 + 32) clipPath:v19 onLayout:*(void *)(a1 + 40) outset:0 reversed:*(void *)(*(void *)(a1 + 48) + 8) + 24 isValid:*(double *)(a1 + 88)];
  id v7 = v6;
  if (v6 && *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v8 = *(double **)(*(void *)(a1 + 56) + 8);
    CGFloat v9 = v8[6];
    CGFloat v10 = v8[7];
    CGFloat v11 = v8[8];
    CGFloat v12 = v8[9];
    [v6 point];
    double v14 = sub_100065928(v9, v10, v11, v12, v13);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    *(double *)(v15 + 4_Block_object_dispose(&STACK[0x360], 8) = v14;
    *(void *)(v15 + 56) = v16;
    *(void *)(v15 + 64) = v17;
    *(void *)(v15 + 72) = v18;
  }
}

void sub_100250B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 sub_100250BC4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  long long v9 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v9;
  uint64_t v10 = sub_1001BAB78((uint64_t)v20);
  uint64_t v11 = *(void *)(a1 + 16);
  if (a2 == v10)
  {
    --*(void *)a1;
    *(void *)(a1 + 16) = ++v11;
  }
  long long v12 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v12;
  if (a2 == sub_100209658(v19)) {
    *(void *)(a1 + 16) = ++v11;
  }
  if (v11)
  {
LABEL_9:
    long long v13 = *(_OWORD *)(a1 + 16);
    v18[0] = *(_OWORD *)a1;
    v18[1] = v13;
    if (a3 == sub_100209668((uint64_t)v18))
    {
      --*(void *)(a1 + 8);
      *(void *)(a1 + 24) = ++v7;
    }
    long long v14 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v14;
    if (a3 == sub_100209670((uint64_t)v17)) {
      *(void *)(a1 + 24) = v7 + 1;
    }
  }
LABEL_13:
  __n128 result = *(__n128 *)a1;
  long long v16 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v16;
  return result;
}

void sub_1002518F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }

  _Unwind_Resume(a1);
}

void sub_1002519F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v12 = 0;
  long long v5 = a5[3];
  long long v9 = a5[2];
  long long v10 = v5;
  uint64_t v11 = *((void *)a5 + 8);
  long long v6 = a5[1];
  long long v7 = *a5;
  long long v8 = v6;
  sub_100255574();
}

void sub_100252188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v72 - 224), 8);
  _Block_object_dispose(&a55, 8);
  if (__p)
  {
    a62 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a64, 8);
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void sub_1002523E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100252608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100252878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002532F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100253724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100253808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002538A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100253BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100253D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002543C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100254664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  __int16 v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  int v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(void *)(v31 - 112) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_100254D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a58) {
    operator delete(a58);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100255090(uint64_t a1, uint64_t a2)
{
  return sub_1002550A0((unsigned __int8 *)(a2 + 128), (unsigned __int8 *)(a1 + 128));
}

BOOL sub_1002550A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  if (v2 != *a2) {
    return v2 == 0;
  }
  int v2 = a1[1];
  if (v2 != a2[1]) {
    return v2 == 0;
  }
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a2 + 1);
  BOOL v5 = v3 < v4;
  if (v3 != v4) {
    return v5;
  }
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a2 + 2);
  BOOL v5 = v6 < v7;
  if (v6 != v7) {
    return v5;
  }
  double v8 = *((double *)a1 + 3);
  double v9 = *((double *)a2 + 3);
  BOOL v10 = v8 < v9;
  if (v8 != v9) {
    return v10;
  }
  double v11 = *((double *)a1 + 4);
  double v12 = *((double *)a2 + 4);
  BOOL v10 = v11 < v12;
  if (v11 != v12) {
    return v10;
  }
  double v14 = *((double *)a1 + 5);
  double v15 = *((double *)a2 + 5);
  return v14 != v15 && v14 < v15;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100255134(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v5 = a2;
  sub_100257364(a3, &v6, &v6);
  sub_100257364(a4, &v5, &v5);
}

unint64_t sub_100255188(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = *(void *)(a1 + 32);
      long long v4 = *(_OWORD *)(a1 + 16);
      v16[0] = *(_OWORD *)a1;
      v16[1] = v4;
      uint64_t v5 = sub_100209670((uint64_t)v16);
      goto LABEL_5;
    case 1:
      uint64_t v3 = *(void *)(a1 + 32);
      long long v8 = *(_OWORD *)(a1 + 16);
      v15[0] = *(_OWORD *)a1;
      v15[1] = v8;
      uint64_t v5 = sub_100209668((uint64_t)v15);
LABEL_5:
      uint64_t v9 = v5;
      uint64_t v10 = v3;
      goto LABEL_9;
    case 2:
      long long v11 = *(_OWORD *)(a1 + 16);
      v14[0] = *(_OWORD *)a1;
      v14[1] = v11;
      uint64_t v10 = sub_1001BAB78((uint64_t)v14);
      goto LABEL_8;
    case 3:
      long long v12 = *(_OWORD *)(a1 + 16);
      v13[0] = *(_OWORD *)a1;
      v13[1] = v12;
      uint64_t v10 = sub_100209658(v13);
LABEL_8:
      uint64_t v9 = *(void *)(a1 + 40);
LABEL_9:
      unint64_t result = (unint64_t)SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v10, *(Swift::String *)(&v6 - 1));
      break;
    default:
      unint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_100255260(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6)
{
  uint64_t v6 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  long long v11 = sub_100255318;
  long long v12 = &unk_1014E5700;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  char v17 = a5;
  uint64_t v15 = a1;
  uint64_t v16 = a6;
  char v18 = a4;
  do
  {
    uint64_t v7 = qword_101177138[v6];
    char v19 = 0;
    uint64_t result = ((uint64_t (*)(void *, uint64_t, char *))v11)(v10, v7, &v19);
    if (v19) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == 3;
    }
    ++v6;
  }
  while (!v9);
  return result;
}

uint64_t sub_100255318(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  long long v4 = *(long long **)(a1 + 40);
  long long v6 = v4[1];
  long long v32 = *v4;
  long long v33 = v6;
  uint64_t result = sub_100209680(&v32, *(void *)v5, *(void *)(v5 + 8));
  if (result)
  {
    do
    {
      uint64_t v5 = *(void *)(v5 + 8 * a2 + 16);
      long long v8 = v4[1];
      long long v32 = *v4;
      long long v33 = v8;
      uint64_t result = sub_100209680(&v32, *(void *)v5, *(void *)(v5 + 8));
    }
    while ((result & 1) != 0);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v9 = sub_100255188((uint64_t)v4, a2);
    uint64_t v11 = v10;
    uint64_t result = sub_100209574(v9, v10, *(void *)v5, *(void *)(v5 + 8));
    if ((result & 1) == 0)
    {
      long long v12 = *(void ***)(a1 + 48);
      uint64_t v13 = (char *)v12[1];
      uint64_t v14 = (char *)v12[2];
      if (v13 >= v14)
      {
        uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v13 - (unsigned char *)*v12) >> 3);
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x2E8BA2E8BA2E8BALL) {
          sub_100004E40();
        }
        unint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((v14 - (unsigned char *)*v12) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x1745D1745D1745DLL) {
          unint64_t v19 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          double v20 = (char *)sub_100004EE8((uint64_t)(v12 + 2), v19);
        }
        else {
          double v20 = 0;
        }
        double v21 = &v20[88 * v16];
        id v22 = &v20[88 * v19];
        *(void *)double v21 = v9;
        *((void *)v21 + 1) = v11;
        *((_OWORD *)v21 + 1) = 0u;
        *((_OWORD *)v21 + 2) = 0u;
        *((_OWORD *)v21 + 3) = 0u;
        *((_OWORD *)v21 + 4) = 0u;
        *((_WORD *)v21 + 40) = 0;
        uint64_t v15 = v21 + 88;
        id v24 = (char *)*v12;
        __int16 v23 = (char *)v12[1];
        if (v23 != *v12)
        {
          do
          {
            long long v25 = *(_OWORD *)(v23 - 88);
            *(_OWORD *)(v21 - 72) = *(_OWORD *)(v23 - 72);
            *(_OWORD *)(v21 - 8_Block_object_dispose(&STACK[0x360], 8) = v25;
            long long v26 = *(_OWORD *)(v23 - 56);
            long long v27 = *(_OWORD *)(v23 - 40);
            long long v28 = *(_OWORD *)(v23 - 24);
            *((_DWORD *)v21 - 2) = *((_DWORD *)v23 - 2);
            *(_OWORD *)(v21 - 24) = v28;
            *(_OWORD *)(v21 - 40) = v27;
            *(_OWORD *)(v21 - 56) = v26;
            v21 -= 88;
            v23 -= 88;
          }
          while (v23 != v24);
          __int16 v23 = (char *)*v12;
        }
        *long long v12 = v21;
        v12[1] = v15;
        v12[2] = v22;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)uint64_t v13 = v9;
        *((void *)v13 + 1) = v11;
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *((_OWORD *)v13 + 3) = 0u;
        *((_OWORD *)v13 + 4) = 0u;
        uint64_t v15 = v13 + 88;
        *((_WORD *)v13 + 40) = 0;
      }
      v12[1] = v15;
      uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t result = sub_100454A80(a2);
      *(void *)(v29 - 72 + 8 * a2) = v5;
      uint64_t v30 = v5 + 8 * result;
      *(void *)(v29 - 72 + 8 * result) = *(void *)(v30 + 16);
      *(void *)(*(void *)(v30 + 16) + 8 * a2 + 16) = v29 - 88;
      *(void *)(v30 + 16) = v29 - 88;
      uint64_t v5 = v29 - 88;
    }
  }
  __int16 v31 = *(_WORD *)(v5 + 80) | 2;
  *(_WORD *)(v5 + 80) = v31;
  *(_WORD *)(v5 + 80) = v31 & 0xFFBF | ((*(unsigned char *)(a1 + 65) & 3) << 6);
  *(void *)(*(void *)(a1 + 40) + 8 * a2 + 56) = v5;
  return result;
}

void sub_100255574()
{
}

void sub_100255FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10001BC78(v53 - 232, *(void **)(v53 - 224));
  sub_10001BC78(v53 - 208, *(void **)(v53 - 200));
  _Unwind_Resume(a1);
}

void sub_100256030(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_100004E40();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)sub_100004EE8(v3, a2);
    uint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[88 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v12 - 8_Block_object_dispose(&STACK[0x360], 8) = v13;
        long long v14 = *(_OWORD *)(v10 - 56);
        long long v15 = *(_OWORD *)(v10 - 40);
        long long v16 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v16;
        *(_OWORD *)(v12 - 40) = v15;
        *(_OWORD *)(v12 - 56) = v14;
        v12 -= 88;
        v10 -= 88;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100256134(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100257420((void **)a1, a2 - v2);
  }
}

double sub_100256164(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = *(uint64_t **)a1;
    double v4 = 0.0;
    double v5 = 0.0;
    double v6 = 0.0;
    double v7 = 0.0;
    do
    {
      char v8 = *(unsigned char *)(v2 + 176);
      uint64_t v2 = v1;
      unint64_t v9 = *(uint64_t **)v1;
      if ((v8 & 2) == 0 || (*(unsigned char *)(v1 + 176) & 2) == 0)
      {
        uint64_t v10 = sub_100209704(*v3, v3[1], *v9);
        double v12 = (double)v11;
        double v13 = -0.0;
        if (v10 == 0 && v11 > 0) {
          double v14 = (double)v11;
        }
        else {
          double v14 = -0.0;
        }
        double v4 = v4 + v14;
        if (v10 != 0 || v11 >= 0) {
          double v12 = 0.0;
        }
        double v5 = v5 - v12;
        double v15 = (double)v10;
        if (v11 == 0 && v10 > 0) {
          double v13 = (double)v10;
        }
        double v7 = v7 + v13;
        if (v11 != 0 || v10 >= 0) {
          double v15 = 0.0;
        }
        double v6 = v6 - v15;
      }
      uint64_t v1 = *(void *)(v2 + 24);
      uint64_t v3 = v9;
    }
    while (v1);
  }
  else
  {
    double v7 = 0.0;
    double v6 = 0.0;
    double v5 = 0.0;
    double v4 = 0.0;
  }
  return fmin(v6, v7) + fmin(v4, v5);
}

uint64_t sub_100256274(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    sub_10020971C(**(void **)a1, *(void *)(*(void *)a1 + 8), *a2, a2[1]);
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6 != a3) {
      sub_100454A80(v6);
    }
    double v7 = (uint64_t **)a1;
    do
    {
      if (*v7 == a2) {
        break;
      }
      double v7 = (uint64_t **)v7[3];
    }
    while (v7);
    operator new();
  }
  return 0;
}

void *sub_100256474(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  double v7 = (void *)a1;
  *(unsigned char *)(a1 + 176) |= 2u;
  uint64_t v8 = (uint64_t)(a4 + 2);
  do
  {
    if (*v7 == a3) {
      break;
    }
    uint64_t v9 = sub_100256274((uint64_t)v7, *(uint64_t **)(*v7 + 8 * a2 + 16), a2);
    if ((void *)v9 != v7)
    {
      uint64_t v10 = (void *)v9;
      double v12 = a4[1];
      unint64_t v11 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_100004E40();
        }
        uint64_t v15 = v11 - (void)*a4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)sub_10002B494(v8, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v7;
        double v13 = v19 + 8;
        double v21 = (char *)*a4;
        double v20 = (char *)a4[1];
        if (v20 != *a4)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          double v20 = (char *)*a4;
        }
        *a4 = v19;
        a4[1] = v13;
        a4[2] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *double v12 = v7;
        double v13 = v12 + 1;
      }
      a4[1] = v13;
      double v7 = v10;
    }
  }
  while (v7);
  return v7;
}

uint64_t sub_1002565BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100454A80(a6);
  if (a1 == a4 && a2 == a5)
  {
    if (a3 == a6) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 1;
    }
    BOOL v14 = v12 == a3;
LABEL_7:
    if (v14) {
      return 0;
    }
    else {
      return v13;
    }
  }
  if (v12 == a3)
  {
    uint64_t v16 = sub_1002096F0(a3);
    uint64_t v18 = v17;
    uint64_t v19 = sub_100209704(a4, a5, a1);
    if (sub_100209710(v16, v18, v19, v20) < 0) {
      return 4;
    }
    double v21 = sub_100454A90(a3);
    if (a1 == a4 && v21 == 0.0) {
      return 0;
    }
    BOOL v14 = a2 == a5 && v22 == 0.0;
    unsigned int v13 = 2;
    goto LABEL_7;
  }
  if (a3 == a6)
  {
    double v23 = sub_100454A90(a6);
    uint64_t result = 4;
    if (a1 != a4 || v23 != 0.0)
    {
      if (a2 == a5 && v24 == 0.0) {
        return 4;
      }
      else {
        return 2;
      }
    }
  }
  else
  {
    uint64_t v26 = sub_1002096F0(a3);
    uint64_t v28 = v27;
    uint64_t v29 = sub_100209704(a4, a5, a1);
    uint64_t v31 = sub_100209710(v26, v28, v29, v30);
    uint64_t v32 = sub_1002096F0(a6);
    uint64_t v34 = v33;
    uint64_t v35 = sub_100209704(a1, a2, a4);
    if ((v31 | sub_100209710(v32, v34, v35, v36)) >= 0) {
      return 1;
    }
    else {
      return 3;
    }
  }
  return result;
}

void sub_100256778(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  uint64_t v9 = *(void *)(a3 + 8 * a4 + 88);
  int v10 = *((unsigned __int8 *)a1 + 16);
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 16) || (*(_WORD *)(v11 + 80) & 8) != 0)
  {
    uint64_t v19 = *(void *)v11;
    uint64_t v20 = *(void *)(v11 + 8);
    uint64_t v21 = *(void *)v9;
    uint64_t v22 = *(void *)(v9 + 8);
    *(double *)(a5 + 32) = (double)sub_10020971C(*(void *)v11, v20, *(void *)v9, v22);
    *(void *)(a5 + _Block_object_dispose(&STACK[0x360], 8) = sub_1002565BC(v19, v20, a1[1], v21, v22, a4);
    if (v10) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    double v14 = (double)sub_10020971C(*(void *)v11, *(void *)(v11 + 8), *(void *)a2, v13);
    uint64_t v15 = sub_10020971C(v12, v13, *(void *)v9, *(void *)(v9 + 8));
    uint64_t v16 = 0;
    *(double *)(a5 + 32) = v14 + (double)v15;
    uint64_t v32 = 0;
    uint64_t v33 = &v32;
    uint64_t v34 = 0x2020000000;
    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    long long v25 = sub_100256990;
    uint64_t v26 = &unk_1014E5728;
    uint64_t v29 = a2;
    uint64_t v30 = v9;
    uint64_t v31 = a4;
    uint64_t v27 = &v32;
    uint64_t v28 = a1;
    do
    {
      uint64_t v17 = qword_101177138[v16];
      char v36 = 0;
      ((void (*)(void *, uint64_t, char *))v25)(v24, v17, &v36);
      if (v36) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v16 == 3;
      }
      ++v16;
    }
    while (!v18);
    *(void *)(a5 + _Block_object_dispose(&STACK[0x360], 8) = v33[3];
    _Block_object_dispose(&v32, 8);
    if (*((unsigned char *)a1 + 16)) {
      goto LABEL_13;
    }
  }
  if ((*(_WORD *)(a2 + 80) & 0x10) != 0)
  {
LABEL_15:
    *(unsigned char *)(a5 + 1) = 1;
    return;
  }
LABEL_13:
  if ((*(_WORD *)(v9 + 80) & 0x10) != 0 || (*(_WORD *)(*(void *)(a3 + 8 * a4 + 56) + 80) & 0x10) != 0) {
    goto LABEL_15;
  }
}

void sub_100256978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100256990(uint64_t a1, uint64_t a2)
{
  double v4 = *(uint64_t **)(a1 + 48);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = sub_1002565BC(***(void ***)(a1 + 40), *(void *)(**(void **)(a1 + 40) + 8), *(void *)(*(void *)(a1 + 40) + 8), *v4, v6, a2);
  uint64_t v8 = sub_100454A80(a2);
  uint64_t result = sub_1002565BC(v5, v6, v8, **(void **)(a1 + 56), *(void *)(*(void *)(a1 + 56) + 8), *(void *)(a1 + 64));
  uint64_t v10 = (result + v7);
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v11 + 24) < v10) {
    uint64_t v10 = *(void *)(v11 + 24);
  }
  *(void *)(v11 + 24) = v10;
  return result;
}

void sub_100256A24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v17 = 0;
  BOOL v18 = &v17;
  uint64_t v19 = 0x6012000000;
  uint64_t v20 = sub_100256B70;
  uint64_t v21 = nullsub_35;
  uint64_t v22 = "";
  long long v23 = xmmword_101177108;
  long long v24 = unk_101177118;
  long long v25 = xmmword_101177128;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  uint64_t v11 = sub_100256B88;
  uint64_t v12 = &unk_1014E5750;
  uint64_t v13 = &v17;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  do
  {
    uint64_t v6 = qword_101177138[v5];
    char v26 = 0;
    ((void (*)(void *, uint64_t, char *))v11)(v10, v6, &v26);
    if (v26) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v5 == 3;
    }
    ++v5;
  }
  while (!v7);
  uint64_t v8 = v18;
  long long v9 = *((_OWORD *)v18 + 4);
  *a4 = *((_OWORD *)v18 + 3);
  a4[1] = v9;
  a4[2] = *((_OWORD *)v8 + 5);
  _Block_object_dispose(&v17, 8);
}

void sub_100256B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100256B70(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = result;
  return result;
}

double sub_100256B88(uint64_t a1, uint64_t a2)
{
  double v4 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  sub_100256778(*(uint64_t **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), a2, (uint64_t)v9);
  if (sub_1002550A0(v4, v9))
  {
    uint64_t v5 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
    long long v6 = v5[4];
    long long v10 = v5[3];
    long long v11 = v6;
    long long v12 = v5[5];
  }
  else
  {
    sub_100256778(*(uint64_t **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), a2, (uint64_t)&v10);
    uint64_t v5 = *(_OWORD **)(*(void *)(a1 + 32) + 8);
  }
  long long v7 = v11;
  v5[3] = v10;
  v5[4] = v7;
  double result = *(double *)&v12;
  v5[5] = v12;
  return result;
}

__n128 sub_100256C30(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100256C54(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100256C6C()
{
}

void sub_100256E58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_100256E9C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v6 = *(void **)(a1 + 40);
  uint64_t result = sub_100454A80(v6[1]);
  if (result != a2)
  {
    if (*(void *)(*v6 + 8 * a2 + 16))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      *a3 = 1;
    }
  }
  return result;
}

void sub_100256F04(uint64_t a1, uint64_t a2)
{
  double v4 = *(void **)(a1 + 64);
  if (sub_100454A80(v4[1]) != a2 || *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v48 = 0;
    id v49 = &v48;
    uint64_t v50 = 0x2020000000;
    uint64_t v51 = 0;
    uint64_t v51 = sub_100256274((uint64_t)v4, *(uint64_t **)(*v4 + 8 * a2 + 16), a2);
    uint64_t v5 = v49;
    long long v6 = (unsigned char *)v49[3];
    if (v6)
    {
      if (v6[16] || *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        if (*(unsigned char *)(a1 + 73) && (*(_WORD *)(*(void *)v6 + 80) & 0x100) != 0)
        {
          v6[176] |= 1u;
        }
        else if ((*(_WORD *)(*(void *)v6 + 80) & 4) != 0)
        {
          uint64_t v7 = 0;
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          id v42 = (void *(*)(void *, uint64_t, BOOL (**)(uint64_t, uint64_t)))sub_10025723C;
          double v43 = &unk_1014E57E8;
          uint64_t v8 = *(void *)(a1 + 144);
          uint64_t v46 = a2;
          uint64_t v47 = v8;
          uint64_t v9 = *(void *)(a1 + 48);
          unsigned __int8 v44 = &v48;
          uint64_t v45 = v9;
          do
          {
            uint64_t v10 = qword_101177138[v7];
            LOBYTE(v37) = 0;
            v42(v41, v10, &v37);
            if ((_BYTE)v37) {
              BOOL v11 = 1;
            }
            else {
              BOOL v11 = v7 == 3;
            }
            ++v7;
          }
          while (!v11);
          uint64_t v5 = v49;
        }
      }
      uint64_t v12 = v5[3];
      if (*(unsigned char *)(v12 + 176))
      {
        BOOL v17 = 0;
        BOOL v16 = 0;
        int64x2_t v13 = 0uLL;
        float64x2_t v14 = 0uLL;
        double v15 = 0.0;
      }
      else
      {
        sub_100256A24(v12, *(void *)(a1 + 152), *(void *)(a1 + 144), &v37);
        int64x2_t v13 = v38;
        float64x2_t v14 = v39;
        double v15 = v40;
        BOOL v16 = (_BYTE)v37 != 0;
        BOOL v17 = BYTE1(v37) != 0;
        uint64_t v5 = v49;
        uint64_t v12 = v49[3];
      }
      if (*(unsigned char *)(v12 + 80)) {
        BOOL v16 = 1;
      }
      if (*(unsigned char *)(v12 + 81)) {
        BOOL v17 = 1;
      }
      double v18 = v15 + *(double *)(v12 + 120);
      *(unsigned char *)(v12 + 12_Block_object_dispose(&STACK[0x360], 8) = v16;
      *(unsigned char *)(v12 + 129) = v17;
      *(int64x2_t *)(v12 + 136) = vaddq_s64(*(int64x2_t *)(v12 + 88), v13);
      *(float64x2_t *)(v12 + 152) = vaddq_f64(v14, *(float64x2_t *)(v12 + 104));
      *(double *)(v12 + 16_Block_object_dispose(&STACK[0x360], 8) = v18;
      uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8);
      uint64_t v20 = (void *)v19[7];
      unint64_t v21 = v19[8];
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v23 = v19[6];
        uint64_t v24 = ((uint64_t)v20 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_100004E40();
        }
        uint64_t v25 = v21 - v23;
        uint64_t v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          uint64_t v28 = (char *)sub_10002B494((uint64_t)(v19 + 8), v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v24];
        uint64_t v30 = &v28[8 * v27];
        *(void *)uint64_t v29 = v5[3];
        uint64_t v22 = v29 + 8;
        uint64_t v32 = (char *)v19[6];
        uint64_t v31 = (char *)v19[7];
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *((void *)v29 - 1) = v33;
            v29 -= 8;
          }
          while (v31 != v32);
          uint64_t v31 = (char *)v19[6];
        }
        v19[6] = v29;
        v19[7] = v22;
        v19[8] = v30;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *uint64_t v20 = v5[3];
        uint64_t v22 = v20 + 1;
      }
      v19[7] = v22;
      uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v35 = *(void *)(v34 + 48);
      uint64_t v36 = *(void *)(v34 + 56);
      __int16 v37 = sub_100255090;
      sub_1002576A8(v35, v36, (uint64_t (**)(uint64_t, uint64_t))&v37, (v36 - v35) >> 3);
    }
    _Block_object_dispose(&v48, 8);
  }
}

void sub_10025721C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *sub_10025723C(void *result, uint64_t a2, unsigned char *a3)
{
  if (result[6] != a2)
  {
    long long v3 = result;
    double v4 = *(void **)(*(void *)(result[4] + 8) + 24);
    uint64_t v5 = result[7] + 8 * a2;
    if (*v4 == *(void *)(v5 + 88))
    {
      uint64_t v7 = sub_100454A80(a2);
      uint64_t result = sub_100256474((uint64_t)v4, v7, *(void *)(v5 + 56), (void **)(*(void *)(v3[5] + 8) + 48));
      *(void *)(*(void *)(v3[4] + 8) + 24) = result;
      uint64_t v8 = *(void *)(*(void *)(v3[4] + 8) + 24);
      *(unsigned char *)(v8 + 176) |= 1u;
      *a3 = 1;
    }
  }
  return result;
}

void *sub_1002572E8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_10002B450(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100257348(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x360], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100257364(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10001C4D8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_100257420(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int64x2_t v13 = (char *)sub_10002B494(v4, v12);
    }
    else {
      int64x2_t v13 = 0;
    }
    float64x2_t v14 = &v13[8 * v10];
    double v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    BOOL v16 = &v14[8 * a2];
    double v18 = (char *)*a1;
    BOOL v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      BOOL v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t sub_100257534(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) | 1;
      uint64_t v8 = (unint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        if (*v8 < v8[1])
        {
          unint64_t v10 = v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 8 * v12);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v12;
          }
          else
          {
            unint64_t v10 = *v8;
            if (*v8 >= v8[1])
            {
              uint64_t v7 = v12;
            }
            else
            {
              unint64_t v10 = v8[1];
              ++v8;
            }
          }
        }
        while (v10 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void *sub_1002575F8(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1002576A8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void sub_100257B94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100257BD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100257F28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100257F6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100258B28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 144);
  *(void *)(v1 + 144) = 0;
}

void sub_100258CFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100258D40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002599C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100259A04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10025A2C4(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void sub_10025B440(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025B484(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025B4C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025B50C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025BDB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025BDFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025CDE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025CE28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025DC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithUnsignedInteger:a2];
  [v2 addObject:v3];
}

void sub_10025E8D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025E914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025E958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025E99C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025E9E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025EA24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025EF24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025EF68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025F268(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025F2AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10025F7EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_10025F910(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_100260510(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_100260554(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_100260598(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002605DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100260620(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_100260BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v53 - 224), 8);
  _Block_object_dispose((const void *)(v53 - 96), 8);
  _Unwind_Resume(a1);
}

void *sub_100260C30(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (!result[18])
  {
    uint64_t result = [result shouldCreateKnobs];
    if (result) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  return result;
}

void sub_100260C74(uint64_t a1)
{
}

uint64_t sub_100260C80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100260C90(uint64_t a1)
{
}

void sub_100260C98(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(unsigned char *)(v2 + 152))
  {
    id v3 = [*(id *)(v2 + 144) count];
    char v4 = (unint64_t)v3 > 1;
    if (v3 == (id)1)
    {
      int64_t v5 = [*(id *)(a1[4] + 144) firstObject];
      objc_opt_class();
      char v4 = objc_opt_isKindOfClass() ^ 1;
    }
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4 & 1;
    uint64_t v2 = a1[4];
  }
  uint64_t v6 = *(void **)(v2 + 144);
  unint64_t v7 = (id *)(*(void *)(a1[6] + 8) + 40);

  objc_storeStrong(v7, v6);
}

void sub_100260D48(uint64_t a1)
{
}

uint64_t sub_100260D5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(void *)(a1 + 40) & sub_1002893CC((char)[v3 tag])) != 0
    || [*(id *)(a1 + 32) directlyManagesVisibilityOfKnob:v3])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      id v6 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
      }
      else
      {
        char isKindOfClass = 1;
      }
    }
    else
    {
      char isKindOfClass = 0;
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

id sub_100260E64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) directlyManagesVisibilityOfKnob:a2];
}

void sub_100260E70(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 32);
  char v4 = *(void **)(*(void *)(*(void *)(v3 + 8) + 8) + 40);
  id v6 = *(void **)(v2 + 144);
  int64_t v5 = (id *)(v2 + 144);
  if (v4 != v6)
  {
    objc_storeStrong(v5, v4);
    char v4 = *(void **)(*(void *)(a1 + 32) + 144);
  }
  if (![v4 count])
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 144);
    *(void *)(v7 + 144) = 0;
  }
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 144);
  uint64_t v10 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);

  objc_storeStrong(v10, v9);
}

void sub_100260F8C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 144);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v6) renderable:(void)v10];
        [v7 setDelegate:0];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 144);
  *(void *)(v8 + 144) = 0;
}

void sub_100261C8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100261CD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100261F5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100261FA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002625D4(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 144);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v8 = [v7 renderable:(void)v12];
        [v8 opacity];
        if (v9 != 1.0)
        {
          unsigned __int8 v10 = [*(id *)(a1 + 32) directlyManagesVisibilityOfKnob:v7];

          if (v10) {
            continue;
          }
          uint64_t v8 = [v7 renderable];
          LODWORD(v11) = 1.0;
          [v8 setOpacity:v11];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
}

void sub_100262830(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 144);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v8 = [v7 renderable:v15];
        [v8 opacity];
        if (v9 != 1.0)
        {
          unsigned __int8 v10 = [*(id *)(a1 + 32) directlyManagesVisibilityOfKnob:v7];

          if (v10) {
            continue;
          }
          double v11 = [v7 renderable];
          [v11 opacity];
          long long v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
          [*(id *)(a1 + 40) setFromValue:v12];

          long long v13 = [v7 renderable];
          LODWORD(v14) = 1.0;
          [v13 setOpacity:v14];

          uint64_t v8 = [v7 renderable];
          [v8 addAnimation:*(void *)(a1 + 40) forKey:@"fade in"];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
}

void sub_100262B14(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 144);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v8 = [v7 renderable:v12];
        [v8 opacity];
        if (v9 == 1.0)
        {
          unsigned __int8 v10 = [*(id *)(a1 + 32) directlyManagesVisibilityOfKnob:v7];

          if (v10) {
            continue;
          }
          double v11 = [v7 renderable];
          [v11 setOpacity:0.0];

          uint64_t v8 = [v7 renderable];
          [v8 addAnimation:*(void *)(a1 + 40) forKey:@"fade out"];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
}

void sub_100262DD0(id a1)
{
  uint64_t v1 = +[CRLColor colorWithRed:0.682352941 green:0.682352941 blue:0.698039216 alpha:1.0];
  id v2 = (void *)qword_1016A94B0;
  qword_1016A94B0 = v1;
}

void sub_100263590(uint64_t a1, void *a2)
{
  uint64_t v28 = a2;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v31 = a1;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v32 objects:v46 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = &qword_101719A70;
    uint64_t v6 = *(void *)v33;
    uint64_t v29 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v7);
        float v9 = [v8 renderable];
        if (objc_opt_respondsToSelector())
        {
          unsigned int v10 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (*v5 != -1) {
            dispatch_once(v5, &stru_1014E5DD8);
          }
          double v11 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = v11;
            uint64_t v23 = (objc_class *)objc_opt_class();
            uint64_t v24 = NSStringFromClass(v23);
            *(_DWORD *)buf = 67110146;
            unsigned int v37 = v10;
            __int16 v38 = 2082;
            float64x2_t v39 = "-[CRLCanvasRep p_addRenderablesForKnobsToArray:withDelegate:isOverlay:]_block_invoke";
            __int16 v40 = 2082;
            double v41 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRep.m";
            __int16 v42 = 1024;
            int v43 = 2694;
            __int16 v44 = 2114;
            uint64_t v45 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Knob class %{public}@ is trying to vend a layer directly!", buf, 0x2Cu);
          }
          if (*v5 != -1) {
            dispatch_once(v5, &stru_1014E5DF8);
          }
          long long v12 = v5;
          long long v13 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = v13;
            uint64_t v26 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = 67109378;
            unsigned int v37 = v10;
            __int16 v38 = 2114;
            float64x2_t v39 = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          long long v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasRep p_addRenderablesForKnobsToArray:withDelegate:isOverlay:]_block_invoke");
          long long v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRep.m"];
          long long v16 = (objc_class *)objc_opt_class();
          long long v17 = NSStringFromClass(v16);
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 2694, 0, "Knob class %{public}@ is trying to vend a layer directly!", v17);

          uint64_t v5 = v12;
          uint64_t v6 = v29;
        }
        if (v9)
        {
          int v18 = *(unsigned __int8 *)(v31 + 48);
          if (v18 != [v8 shouldDisplayDirectlyOverRep])
          {
            if (!*(unsigned char *)(*(void *)(v31 + 40) + 154))
            {
              [v9 opacity];
              if (v19 == 0.0)
              {
                uint64_t v20 = [v9 presentationRenderable];
                [v20 opacity];
                if (v21 == 0.0)
                {
                  unsigned int v27 = [*(id *)(v31 + 40) directlyManagesVisibilityOfKnob:v8];

                  if (!v27) {
                    goto LABEL_24;
                  }
                }
                else
                {
                }
              }
            }
            v28[2](v28, v8, v9);
          }
        }
LABEL_24:

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      id v4 = [obj countByEnumeratingWithState:&v32 objects:v46 count:16];
    }
    while (v4);
  }
}

void sub_1002639A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002639EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100263A30(uint64_t a1, void *a2)
{
  id v6 = a2;
  unsigned int v3 = [v6 isMemberOfClass:objc_opt_class()];
  id v4 = v6;
  if (v3)
  {
    uint64_t v5 = [v6 underlayRenderableForRep:*(void *)(a1 + 32)];
    if (v5) {
      [*(id *)(a1 + 40) addObject:v5];
    }

    id v4 = v6;
  }
}

void sub_100263ABC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v6 delegate];

  if (!v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (!v8) {
      uint64_t v8 = *(void *)(a1 + 40);
    }
    [v6 setDelegate:v8];
  }
  [v5 position];
  [v5 pixelAlignedScaledCanvasCenterPositionFromKnobPosition:];
  double v11 = v10;
  double v12 = v9;
  if (fabs(v10) == INFINITY || (double v13 = fabs(v9), v13 >= INFINITY) && v13 <= INFINITY)
  {
    unsigned int v14 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5E68);
    }
    long long v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = v15;
      uint64_t v24 = (objc_class *)objc_opt_class();
      uint64_t v25 = NSStringFromClass(v24);
      uint64_t v26 = (objc_class *)objc_opt_class();
      unsigned int v27 = NSStringFromClass(v26);
      *(_DWORD *)buf = 67110402;
      unsigned int v29 = v14;
      __int16 v30 = 2082;
      uint64_t v31 = "-[CRLCanvasRep p_addRenderablesForKnobsToArray:withDelegate:isOverlay:]_block_invoke_3";
      __int16 v32 = 2082;
      long long v33 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRep.m";
      __int16 v34 = 1024;
      int v35 = 2725;
      __int16 v36 = 2114;
      unsigned int v37 = v25;
      __int16 v38 = 2114;
      float64x2_t v39 = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Knob type %{public}@ layer position must be finite for rep class %{public}@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E5E88);
    }
    long long v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v16);
    }
    long long v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasRep p_addRenderablesForKnobsToArray:withDelegate:isOverlay:]_block_invoke");
    int v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRep.m"];
    float v19 = (objc_class *)objc_opt_class();
    uint64_t v20 = NSStringFromClass(v19);
    float v21 = (objc_class *)objc_opt_class();
    uint64_t v22 = NSStringFromClass(v21);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 2725, 0, "Knob type %{public}@ layer position must be finite for rep class %{public}@", v20, v22);
  }
  else
  {
    +[CATransaction begin];
    +[CATransaction setDisableActions:1];
    [v6 setPosition:v11, v12];
    +[CATransaction commit];
    [*(id *)(a1 + 56) addObject:v6];
  }
}

void sub_100263DF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100263E34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100264274(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002642B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002644A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1002644C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    WeakRetained[155] = 0;
  }
}

void sub_100264CD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100264D14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100264D58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100264D9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026551C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100265560(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100265AA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100265AE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100265D48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100265D8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002663C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026640C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266450(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266628(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026666C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266A2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266A70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266C50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100266C94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002687EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100268830(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100268D84(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100268DB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = [*(id *)(a1 + 40) count];
  uint64_t v4 = +[CRLBezierPath uniteBezierPaths:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  CGAffineTransformMakeTranslation(&v25, -*(double *)(a1 + 80), -*(double *)(a1 + 88));
  [v7 transformUsingAffineTransform:&v25];
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  [*(id *)(a1 + 48) viewScale];
  CGFloat v10 = v9;
  [*(id *)(a1 + 48) viewScale];
  CGAffineTransformMakeScale(&v24, v10, v11);
  [v8 transformUsingAffineTransform:&v24];
  if (v2 < v3)
  {
    double v12 = +[CRLBezierPath tracedPathForImage:*(void *)(a1 + 112) alphaThreshold:0.5 pointSpacing:0.0];
    [*(id *)(a1 + 48) viewScale];
    double v14 = v13;
    [*(id *)(a1 + 56) viewScale];
    CGFloat v16 = v14 / v15;
    [*(id *)(a1 + 48) viewScale];
    double v18 = v17;
    [*(id *)(a1 + 56) viewScale];
    CGAffineTransformMakeScale(&v23, v16, v18 / v19);
    [v12 transformUsingAffineTransform:&v23];
    uint64_t v20 = [v12 bezierPathByOffsettingPath:1 joinStyle:2.0];

    id v21 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) uniteWithBezierPath:v20];
  }
  CGImageRelease(*(CGImageRef *)(a1 + 112));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
}

void sub_100268F50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100268F94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100268FD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
    if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) CGPath])
    {
      uint64_t v4 = +[UIBezierPath bezierPathWithCGPath:](UIBezierPath, "bezierPathWithCGPath:", [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) CGPath]);
      [v4 bounds];
      double v9 = sub_100065738(v5, v6, v7, v8);
      double v11 = v10;
      [*(id *)(a1 + 32) bounds];
      double v16 = sub_100065738(v12, v13, v14, v15);
      double x = sub_100064680(v9, v11, v16);
    }
    else
    {
      uint64_t v4 = 0;
      double x = CGPointZero.x;
    }
    id v19 = objc_alloc((Class)UIDragPreviewTarget);
    uint64_t v20 = [*(id *)(a1 + 48) canvasView];
    id v21 = *(void **)(a1 + 56);
    [*(id *)(a1 + 32) frame];
    [v21 p_centerForPreviewFrame:];
    id v24 = [v19 initWithContainer:v20 center:sub_100064698(v22, v23, x)];

    id v25 = objc_alloc_init((Class)UIDragPreviewParameters);
    [v25 setBackgroundColor:*(void *)(a1 + 64)];
    if (v4) {
      [v25 setVisiblePath:v4];
    }
    id v18 = [objc_alloc((Class)UITargetedDragPreview) initWithView:*(void *)(a1 + 32) parameters:v25 target:v24];
  }
  else
  {
    id v18 = 0;
  }
  uint64_t v26 = *(void *)(a1 + 72);
  if (v26)
  {
    unsigned int v27 = (*(void (**)(void))(v26 + 16))();
    [v3 setLocalObject:v27];
  }

  return v18;
}

void sub_1002699CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100269A10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A0B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A0F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A13C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A180(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CBC0];
  id v2 = (void *)qword_1016A94B8;
  qword_1016A94B8 = (uint64_t)v1;

  id v3 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CBD8];
  uint64_t v4 = (void *)qword_1016A94C0;
  qword_1016A94C0 = (uint64_t)v3;

  id v5 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CBF0];
  CGFloat v6 = (void *)qword_1016A94C8;
  qword_1016A94C8 = (uint64_t)v5;

  id v7 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC08];
  CGFloat v8 = (void *)qword_1016A94D0;
  qword_1016A94D0 = (uint64_t)v7;

  id v9 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC20];
  double v10 = (void *)qword_1016A94D8;
  qword_1016A94D8 = (uint64_t)v9;

  id v11 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC38];
  CGFloat v12 = (void *)qword_1016A94E0;
  qword_1016A94E0 = (uint64_t)v11;

  id v13 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC50];
  CGFloat v14 = (void *)qword_1016A94E8;
  qword_1016A94E8 = (uint64_t)v13;

  id v15 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC68];
  double v16 = (void *)qword_1016A94F0;
  qword_1016A94F0 = (uint64_t)v15;

  id v17 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC80];
  id v18 = (void *)qword_1016A94F8;
  qword_1016A94F8 = (uint64_t)v17;

  id v19 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CC98];
  uint64_t v20 = (void *)qword_1016A9500;
  qword_1016A9500 = (uint64_t)v19;
}

void sub_10026A314(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CCB0];
  id v2 = (void *)qword_1016A9510;
  qword_1016A9510 = (uint64_t)v1;
}

void sub_10026A35C(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CCC8];
  id v2 = (void *)qword_1016A9520;
  qword_1016A9520 = (uint64_t)v1;
}

void sub_10026A5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026A5F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A638(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026A854(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026A898(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026AAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026AB0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026AB50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10026ABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 3;
  if (a1 == a2) {
    uint64_t v2 = a1;
  }
  if (!a2) {
    uint64_t v2 = a1;
  }
  if (a1) {
    return v2;
  }
  else {
    return a2;
  }
}

uint64_t sub_10026ABC8(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:AVAssetExportPresetPassthrough])
  {
    uint64_t v2 = 1;
    goto LABEL_13;
  }
  if ([v1 isEqualToString:AVAssetExportPreset1920x1080])
  {
    uint64_t v2 = 2;
    goto LABEL_13;
  }
  if ([v1 isEqualToString:AVAssetExportPreset3840x2160])
  {
    uint64_t v2 = 3;
    goto LABEL_13;
  }
  if ([v1 isEqualToString:AVAssetExportPresetHEVC1920x1080WithAlpha])
  {
LABEL_10:
    uint64_t v2 = 4;
    goto LABEL_13;
  }
  if ([v1 isEqualToString:AVAssetExportPresetHEVC3840x2160WithAlpha]) {
    goto LABEL_12;
  }
  if ([v1 isEqualToString:AVAssetExportPresetHEVC1920x1080]) {
    goto LABEL_10;
  }
  if ([v1 isEqualToString:AVAssetExportPresetHEVC3840x2160])
  {
LABEL_12:
    uint64_t v2 = 5;
    goto LABEL_13;
  }
  if ([v1 isEqualToString:AVAssetExportPresetMediumQuality]) {
    uint64_t v2 = 6;
  }
  else {
    uint64_t v2 = 0;
  }
LABEL_13:

  return v2;
}

id sub_10026ACE0(id a1, int a2)
{
  id v3 = (id *)&AVAssetExportPresetPassthrough;
  switch((unint64_t)a1)
  {
    case 0uLL:
    case 2uLL:
      id v3 = (id *)&AVAssetExportPreset1920x1080;
      goto LABEL_12;
    case 1uLL:
      goto LABEL_12;
    case 3uLL:
      id v3 = (id *)&AVAssetExportPreset3840x2160;
      goto LABEL_12;
    case 4uLL:
      id v3 = (id *)&AVAssetExportPresetHEVC1920x1080;
      id v5 = &AVAssetExportPresetHEVC1920x1080WithAlpha;
      goto LABEL_10;
    case 5uLL:
      id v3 = (id *)&AVAssetExportPresetHEVC3840x2160;
      id v5 = &AVAssetExportPresetHEVC3840x2160WithAlpha;
LABEL_10:
      if (a2) {
        id v3 = (id *)v5;
      }
      goto LABEL_12;
    case 6uLL:
      id v3 = (id *)&AVAssetExportPresetMediumQuality;
LABEL_12:
      a1 = *v3;
      break;
    default:
      break;
  }
  return a1;
}

uint64_t sub_10026ADBC(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:AVAssetExportPresetPassthrough] & 1) != 0
    || ([v1 isEqualToString:AVAssetExportPresetHEVCHighestQualityWithAlpha] & 1) != 0
    || ([v1 isEqualToString:AVAssetExportPresetHEVC1920x1080WithAlpha] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:AVAssetExportPresetHEVC3840x2160WithAlpha];
  }

  return v2;
}

uint64_t sub_10026AE4C(unint64_t a1)
{
  return (a1 < 7) & (0x4Cu >> a1);
}

BOOL sub_10026AE64(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL sub_10026AE74(uint64_t a1)
{
  return ((a1 - 3) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

BOOL sub_10026B480(id a1, CRLCanvasElementInfo *a2, BOOL *a3)
{
  id v3 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_10026B4CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026B510(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026BD90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026BDD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10026BE18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)UIDragPreviewParameters);
  [v4 setVisiblePath:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) UIColor];
  [v4 setBackgroundColor:v5];

  id v6 = objc_alloc((Class)UIDragPreviewTarget);
  id v7 = [*(id *)(a1 + 48) canvasView];
  [*(id *)(a1 + 56) frame];
  id v12 = [v6 initWithContainer:v7 center:sub_100065738(v8, v9, v10, v11)];

  id v13 = [objc_alloc((Class)UITargetedDragPreview) initWithView:*(void *)(a1 + 56) parameters:v4 target:v12];
  [v3 setLocalObject:*(void *)(a1 + 64)];

  return v13;
}

void sub_10026C0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10026C0CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10026C0DC(uint64_t a1)
{
}

void sub_10026C0E4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  sub_1002469D0(v6, v5);
  id obj = (id)objc_claimAutoreleasedReturnValue();

  id v7 = [obj storage];
  CGFloat v8 = *(void **)(a1 + 32);

  if (v7 == v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
    *a3 = 1;
  }
}

void sub_10026C610(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026C654(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026C750(id a1)
{
  id v1 = objc_alloc_init(CRLDisplayLinkManager);
  uint64_t v2 = (void *)qword_1016A9530;
  qword_1016A9530 = (uint64_t)v1;
}

void sub_10026CBE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026CC24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026CDD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026CE1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026CFF8(id a1)
{
  id v1 = +[NSBundle mainBundle];
  id v2 = [v1 bundleIdentifier];
  [v2 UTF8String];

  byte_1016A9540 = os_variant_has_internal_content();
}

void sub_10026D5F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026D63C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026DF88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026DFCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026E188(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026E1CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026EBC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026EC08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026F094(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10026F0D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100270624(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100270668(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002722DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100272320(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027255C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002725A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002727FC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1016A9550;
  qword_1016A9550 = (uint64_t)v1;
}

void sub_1002731A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002731E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027322C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100273270(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100273928(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  id v5 = [*(id *)(a1 + 32) view];
  [v5 setFrame:v1, v2, v3, v4];
}

void sub_10027471C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100274760(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002749F0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100274A34(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100274C44(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100274C88(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100274DA4(uint64_t a1)
{
  uint64_t v37 = 0;
  __int16 v38 = &v37;
  uint64_t v39 = 0x2020000000;
  uint64_t v40 = 0;
  double v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v36 = 0;
  id v3 = [v2 statusOfValueForKey:@"hasProtectedContent" error:&v36];
  id v4 = v36;
  if (v3 == (id)2)
  {
    if ([*(id *)(*(void *)(a1 + 32) + 16) hasProtectedContent])
    {
      uint64_t v8 = objc_opt_class();
      id v7 = sub_1002469D0(v8, *(void **)(*(void *)(a1 + 32) + 16));
      if (!v7)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E6970);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101092D6C();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E6990);
        }
        CGFloat v9 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        CGFloat v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityChecker p_checkCompatibilityOfAVAssetUpToLevel:completionHandler:]_block_invoke");
        CGFloat v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityChecker.m"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 111, 0, "invalid nil value for '%{public}s'", "URLAsset");
      }
      id v12 = [v7 URL];
      id v35 = 0;
      [v12 getResourceValue:&v35 forKey:NSURLLocalizedNameKey error:0];
      id v13 = v35;
      if (!v13)
      {
        CGFloat v14 = [v7 URL];
        id v13 = [v14 lastPathComponent];
      }
      id v15 = +[NSBundle mainBundle];
      double v16 = [v15 localizedStringForKey:@"The media file “%@” is copy protected. You don’t have permission to use it." value:0 table:0];
      uint64_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v16, v13);

      NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
      __int16 v42 = v6;
      id v17 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
      uint64_t v18 = +[NSError errorWithDomain:@"com.apple.freeform.CRLErrorDomainMediaCompatibility" code:99 userInfo:v17];

      id v4 = (id)v18;
      goto LABEL_27;
    }
    v38[3] = 1;
    id v19 = *(void **)(*(void *)(a1 + 32) + 16);
    id v34 = 0;
    id v20 = [v19 statusOfValueForKey:@"playable" error:&v34];
    id v21 = v34;
    if (v20 != (id)2)
    {
      if (v20 == (id)4)
      {
        if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E6A98);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_101092E08();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E6AB8);
          }
          double v22 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
          {
            +[CRLAssertionHandler packedBacktraceString];
            objc_claimAutoreleasedReturnValue();
            sub_1010663B0();
          }

          double v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityChecker p_checkCompatibilityOfAVAssetUpToLevel:completionHandler:]_block_invoke");
          id v24 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityChecker.m"];
          +[CRLAssertionHandler handleFailureInFunction:v23 file:v24 lineNumber:238 isFatal:0 description:"Movie validation cancelled itself without the checker knowing about it."];
        }
      }
      else
      {
        v38[3] = 0;
      }
      goto LABEL_46;
    }
    if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "crl_isPlayable"))
    {
      v38[3] = 2;
      uint64_t v25 = *(void *)(a1 + 48);
      if (v25 < 3)
      {
LABEL_46:
        [*(id *)(a1 + 32) p_didFinishCheckingCompatibilityUpToLevel:v38[3] actualLevel:v21 completionHandler:*(void *)(a1 + 40)];
LABEL_49:

        goto LABEL_29;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      unsigned int v27 = *(void **)(v26 + 16);
      uint64_t v28 = v33;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_100275674;
      v33[3] = &unk_1014E6A38;
      v33[4] = v26;
      v33[6] = &v37;
      v33[7] = v25;
      v33[5] = *(id *)(a1 + 40);
      [v27 loadValuesAsynchronouslyForKeys:&off_10155CCF8 completionHandler:v33];
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 32);
      __int16 v30 = *(void **)(v29 + 16);
      uint64_t v28 = v32;
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_100275958;
      v32[3] = &unk_1014E6A38;
      v32[4] = v29;
      v32[6] = &v37;
      uint64_t v31 = *(void **)(a1 + 40);
      v32[7] = *(void *)(a1 + 48);
      v32[5] = v31;
      [v30 loadValuesAsynchronouslyForKeys:&off_10155CD10 completionHandler:v32];
    }

    goto LABEL_49;
  }
  if (v3 != (id)4 || ([*(id *)(a1 + 32) isCancelled] & 1) != 0) {
    goto LABEL_28;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E69B0);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101092E90();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E69D0);
  }
  id v5 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityChecker p_checkCompatibilityOfAVAssetUpToLevel:completionHandler:]_block_invoke");
  id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityChecker.m"];
  +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:130 isFatal:0 description:"Movie validation cancelled itself without the checker knowing about it."];
LABEL_27:

LABEL_28:
  [*(id *)(a1 + 32) p_didFinishCheckingCompatibilityUpToLevel:v38[3] actualLevel:v4 error:v4 completionHandler:*(void *)(a1 + 40)];
LABEL_29:

  _Block_object_dispose(&v37, 8);
}

void sub_100275514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100275564(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002755A8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002755EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275630(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275674(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v10 = 0;
  id v3 = [v2 statusOfValueForKey:@"tracks" error:&v10];
  id v4 = v10;
  if (v3 == (id)4)
  {
    if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E69F0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101092F18();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E6A10);
      }
      id v7 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v7);
      }
      uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityChecker p_checkCompatibilityOfAVAssetUpToLevel:completionHandler:]_block_invoke");
      CGFloat v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityChecker.m"];
      +[CRLAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:182 isFatal:0 description:"Movie validation cancelled itself without the checker knowing about it."];
    }
  }
  else if (v3 == (id)2)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x360], 8) = [*(id *)(a1 + 32) p_doesLoadedAssetHaveHEVCTracks];
    *(unsigned char *)(*(void *)(a1 + 32) + 49) = [*(id *)(a1 + 32) p_doesLoadedAssetHaveProResTracks];
    if (*(unsigned char *)(*(void *)(a1 + 32) + 49)
      && ([(id)objc_opt_class() platformSupportsProRes] & 1) == 0)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v6 = 2;
    }
    else if (*(uint64_t *)(a1 + 56) >= 4 {
           && objc_msgSend(*(id *)(a1 + 32), "p_isLoadedAssetPlayableOnSupportedDevices"))
    }
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      if (*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
        uint64_t v6 = 4;
      }
      else {
        uint64_t v6 = 5;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v6 = 3;
    }
    *(void *)(v5 + 24) = v6;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  [*(id *)(a1 + 32) p_didFinishCheckingCompatibilityUpToLevel:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) actualLevel:v4 error:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 56)];
}

void sub_1002758D0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275914(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275958(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v8 = 0;
  id v3 = [v2 statusOfValueForKey:@"tracks" error:&v8];
  id v4 = v8;
  if (v3 == (id)4)
  {
    if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E6A58);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101092FA0();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E6A78);
      }
      uint64_t v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityChecker p_checkCompatibilityOfAVAssetUpToLevel:completionHandler:]_block_invoke");
      id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityChecker.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:220 isFatal:0 description:"Movie validation cancelled itself without the checker knowing about it."];
    }
  }
  else if (v3 == (id)2)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x360], 8) = [*(id *)(a1 + 32) p_doesLoadedAssetHaveHEVCTracks];
    *(unsigned char *)(*(void *)(a1 + 32) + 49) = [*(id *)(a1 + 32) p_doesLoadedAssetHaveProResTracks];
    if (*(unsigned char *)(*(void *)(a1 + 32) + 49)) {
      [(id)objc_opt_class() platformSupportsProRes];
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 2;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  [*(id *)(a1 + 32) p_didFinishCheckingCompatibilityUpToLevel:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) actualLevel:v4 error:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 56)];
}

void sub_100275B64(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275BA8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275BEC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275C30(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275F34(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100275F78(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002769A0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002769E4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100276B94(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100276BD8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100277020(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100277064(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002791BC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100279200(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100279F58(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100279F9C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027A538(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027A57C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027ACF8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027AD3C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027AF58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  [*(id *)(a1 + 32) setGeometry:a2];
  if (v9)
  {
    id v8 = [*(id *)(a1 + 32) maskInfo];
    [v8 setGeometry:v9];
    [v8 setPathSource:v7];
  }
}

void sub_10027B0F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10027B108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10027B118(uint64_t a1)
{
}

void sub_10027B120(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v23 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [*(id *)(a1 + 32) imageInfo];
  id v10 = [v9 geometry];
  unsigned __int8 v11 = [v10 isEqual:v23];
  unsigned __int8 v12 = v11;
  if (!v7)
  {

    if (v12) {
      goto LABEL_10;
    }
    id v17 = [_TtC8Freeform25CRLCommandSetInfoGeometry alloc];
    uint64_t v18 = [*(id *)(a1 + 32) imageInfo];
    id v19 = [(CRLCommandSetInfoGeometry *)v17 initWithBoardItem:v18 geometry:v23];
    goto LABEL_9;
  }
  if ((v11 & 1) == 0)
  {

    goto LABEL_8;
  }
  id v13 = [*(id *)(a1 + 32) imageInfo];
  CGFloat v14 = [v13 maskInfo];
  id v15 = [v14 geometry];
  unsigned __int8 v16 = [v15 isEqual:v7];

  if ((v16 & 1) == 0)
  {
LABEL_8:
    id v20 = [_TtC8Freeform30CRLCommandSetImageItemGeometry alloc];
    uint64_t v18 = [*(id *)(a1 + 32) imageInfo];
    id v19 = [(CRLCommandSetImageItemGeometry *)v20 initWithImageItem:v18 imageGeometry:v23 maskGeometry:v7 maskPathSource:v8];
LABEL_9:
    uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
    double v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v19;
  }
LABEL_10:
}

void sub_10027B6B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027B6FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027B898(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027B8DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BBD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BC1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BC60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BCA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BE7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027BEC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027C6E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027C728(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027CE6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027CEB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D1E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D228(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D26C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D2B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D490(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D4D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D7CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D810(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D854(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027D898(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027DC6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027DCB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027E130(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027E174(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027E1B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027E1FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027EA30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10027EA74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10027F2C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  void v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [v1 setTransform:v4];
}

void sub_10027F3CC(uint64_t a1)
{
  double x = CGRectNull.origin.x;
  double y = CGRectNull.origin.y;
  double width = CGRectNull.size.width;
  double height = CGRectNull.size.height;
  uint64_t v6 = objc_opt_class();
  id v7 = [*(id *)(a1 + 32) target];
  id v8 = sub_1002469D0(v6, v7);

  id v9 = [v8 selection];
  if ([v9 isInsertionPoint])
  {
    id v10 = [v8 selection];
    if ([v10 type] != (id)3)
    {
      unsigned __int8 v11 = [v8 selection];
      id v12 = [v11 type];

      if (v12 == (id)5) {
        goto LABEL_7;
      }
      id v9 = [v8 interactiveCanvasController];
      id v10 = [v9 layerHost];
      id v13 = [v10 canvasView];
      CGFloat v14 = [v8 interactiveCanvasController];
      [v8 caretRect];
      [v14 convertUnscaledToBoundsRect:];
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
      id v23 = [*(id *)(a1 + 32) superview];
      [v13 convertRect:v23 toView:v16];
      double x = v24;
      double y = v25;
      double width = v26;
      double height = v27;
    }
  }

LABEL_7:
  v32.origin.double x = x;
  v32.origin.double y = y;
  v32.size.double width = width;
  v32.size.double height = height;
  if (CGRectIsEmpty(v32))
  {
    memset(&v31, 0, sizeof(v31));
    [*(id *)(a1 + 32) bounds];
    CGFloat MaxY = CGRectGetMaxY(v33);
    CGAffineTransformMakeTranslation(&v31, 0.0, MaxY * 0.5);
    CGAffineTransform v29 = v31;
    CGAffineTransformScale(&v30, &v29, 0.25, 0.25);
    CGAffineTransform v31 = v30;
    [*(id *)(a1 + 32) setTransform:&v30];
  }
  else
  {
    [*(id *)(a1 + 32) setFrame:x, y, width, height];
  }
}

id sub_10027F614(uint64_t a1)
{
  [*(id *)(a1 + 32) remove];
  long long v2 = *(void **)(a1 + 32);

  return [v2 setTarget:0];
}

void sub_100280344(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100280388(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1002804DC(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

id sub_10028059C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 frame];
  double v11 = sub_100065738(v7, v8, v9, v10);
  double v13 = v12;
  double v14 = *(double *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  double v15 = +[UIPointerShape shapeWithRoundedRect:cornerRadius:](UIPointerShape, "shapeWithRoundedRect:cornerRadius:", sub_10006402C(v11, v13, v14));
  double v16 = +[UIPointerStyle styleWithEffect:v5 shape:v15];

  return v16;
}

void sub_100281110(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100281154(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028142C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100281470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002819C8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  long long v2 = (void *)qword_1016A9560;
  qword_1016A9560 = (uint64_t)v1;
}

void sub_100282D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100282D78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = sub_1002469D0(v4, v3);

  [v5 tailPoint];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  [v5 getControlKnobPosition:12];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v11;
  [v5 headPoint];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v14;
  [v5 pathBounds];
  double v16 = v15;
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v17 + 32) = sub_100064680(*(double *)(v17 + 32), *(double *)(v17 + 40), v15);
  *(void *)(v17 + 40) = v18;
  uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
  *(double *)(v19 + 32) = sub_100064680(*(double *)(v19 + 32), *(double *)(v19 + 40), v16);
  *(void *)(v19 + 40) = v20;
  uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
  *(double *)(v21 + 32) = sub_100064680(*(double *)(v21 + 32), *(double *)(v21 + 40), v16);
  *(void *)(v21 + 40) = v22;
  memset(&v48, 0, sizeof(v48));
  if (v5) {
    [v5 transformInRoot];
  }
  CGAffineTransformMakeScale(&t2, *(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 56));
  CGAffineTransform t1 = v48;
  CGAffineTransformConcat(&v47, &t1, &t2);
  CGAffineTransform v48 = v47;
  double v23 = sub_100064070();
  sub_10007FA0C(0, 1, (uint64_t)&v44, v23, v24, v25, v26);
  CGAffineTransform t1 = v48;
  CGAffineTransformConcat(&v47, &t1, &v44);
  CGAffineTransform v48 = v47;
  uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8);
  double v28 = *(double *)(v27 + 32);
  double v29 = *(double *)(v27 + 40);
  long long v30 = *(_OWORD *)&v47.a;
  long long v31 = *(_OWORD *)&v47.c;
  CGFloat v32 = v47.tx + v29 * v47.c + v47.a * v28;
  CGFloat v33 = v47.ty + v29 * v47.d + v47.b * v28;
  *(CGFloat *)(v27 + 32) = v32;
  *(CGFloat *)(v27 + 40) = v33;
  uint64_t v34 = *(void *)(*(void *)(a1 + 40) + 8);
  double v35 = *(double *)(v34 + 32);
  double v36 = *(double *)(v34 + 40);
  CGFloat v37 = v48.tx + *(double *)&v31 * v36 + *(double *)&v30 * v35;
  CGFloat v38 = v48.ty + *((double *)&v31 + 1) * v36 + *((double *)&v30 + 1) * v35;
  *(CGFloat *)(v34 + 32) = v37;
  *(CGFloat *)(v34 + 40) = v38;
  uint64_t v39 = *(void *)(*(void *)(a1 + 48) + 8);
  double v40 = *(double *)(v39 + 32);
  double v41 = *(double *)(v39 + 40);
  CGFloat v42 = v48.tx + *(double *)&v31 * v41 + *(double *)&v30 * v40;
  CGFloat v43 = v48.ty + *((double *)&v31 + 1) * v41 + *((double *)&v30 + 1) * v40;
  *(CGFloat *)(v39 + 32) = v42;
  *(CGFloat *)(v39 + 40) = v43;
}

id sub_100283130(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 posterImageAssetPayload];
  uint64_t v6 = [*(id *)(a1 + 40) boardItemFactory];
  uint64_t v7 = [*(id *)(a1 + 32) movieAssetPayload];
  [*(id *)(a1 + 32) posterTime];
  uint64_t v8 = [v6 makeMovieItemWithGeometry:v4 movieData:v7 posterImageData:v5];

  return v8;
}

void sub_1002838A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002838EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028431C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100284360(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002843A4(uint64_t a1, void *a2)
{
  id v3 = [a2 repForSelecting];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 layout];
    if (v5 == *(void **)(a1 + 32))
    {
      char v9 = 0;
    }
    else
    {
      uint64_t v6 = [v4 layout];
      uint64_t v7 = [v6 info];
      if (v7 == *(void **)(a1 + 40))
      {
        char v9 = 0;
      }
      else
      {
        uint64_t v8 = [v4 layout];
        objc_opt_class();
        char v9 = objc_opt_isKindOfClass() ^ 1;
      }
    }
  }
  else
  {
    char v9 = 0;
  }

  return v9 & 1;
}

void sub_1002849A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002849D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002849E4(uint64_t a1)
{
}

void sub_1002849EC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (objc_class *)objc_opt_class();
  id v5 = [v3 layoutForInfo:a1[4]];

  uint64_t v6 = sub_10024715C(v4, v5);

  if (!v6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7328);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010940F4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7348);
    }
    uint64_t v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v7);
    }
    uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLConnectionLineAdjustmentHelper p_computeLayoutInfoGeometry:andPathSource:forConnectionLine:withBoardItemOwner:]_block_invoke");
    char v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLineAdjustmentHelper.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 239, 0, "invalid nil value for '%{public}s'", "layout");
  }
  [v6 invalidateConnections];
  uint64_t v10 = [v6 layoutInfoGeometry];
  uint64_t v11 = *(void *)(a1[5] + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = [v6 pathSource];
  uint64_t v14 = *(void *)(a1[6] + 8);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
}

void sub_100284BE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100284C28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100284F5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100284FA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100284FE4(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) boardItems];
  id v3 = [v2 count];

  if (v3 != (id)1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E73D0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10109422C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E73F0);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMediaReplacingHelper showMediaReplaceUI:]_block_invoke");
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:68 isFatal:0 description:"Showing replace media UI when more than one image is selected!"];
  }
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = [*(id *)(a1 + 32) boardItems];
  char v9 = [v8 anyObject];
  uint64_t v10 = [v7 repForInfo:v9];

  uint64_t v11 = [v10 repForSelecting];
  uint64_t v12 = objc_opt_class();
  uint64_t v18 = sub_100246DEC(v11, v12, 1, v13, v14, v15, v16, v17, (uint64_t)&OBJC_PROTOCOL___CRLMediaReplacingRep);

  uint64_t v19 = [*(id *)(a1 + 40) mediaReplacer];
  [v19 showMediaReplacerForMediaReplacingRep:v18];
}

void sub_1002851F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100285234(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100285278(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_100285920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10028594C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1[7] == 6)
  {
    [v3 findNewEdgeMagnetCanvasPositionForConnectionLine:a1[4] forLineEnd:a1[8] withCanvasPosition:*(double *)(*(void *)(a1[5] + 8) + 32) *(double *)(*(void *)(a1[5] + 8) + 40)];
    uint64_t v5 = *(void *)(a1[5] + 8);
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
  }
  uint64_t v8 = *(void *)(a1[5] + 8);
  if (v4) {
    [v4 pureTransformInRoot];
  }
  else {
    memset(&v17, 0, sizeof(v17));
  }
  CGAffineTransformInvert(&v18, &v17);
  float64x2_t v16 = vaddq_f64(*(float64x2_t *)&v18.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v18.c, *(double *)(v8 + 40)), *(float64x2_t *)&v18.a, *(double *)(v8 + 32)));
  char v9 = [v4 pureGeometry];
  [v9 size];
  double v10 = sub_100064070();
  double v13 = sub_100066AA4(v16.f64[0], v16.f64[1], v10, v11, v12);
  uint64_t v14 = *(void *)(a1[6] + 8);
  *(double *)(v14 + 32) = v13;
  *(void *)(v14 + 40) = v15;
}

void sub_100285CBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100285D00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100285D44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
  if (v6) {
    v6[2](v6);
  }
}

void sub_1002861D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028621C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100286260(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  uint64_t v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v9);
  }
  if (v7) {
    v7[2](v7);
  }
}

void sub_100286620(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100286664(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100286D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 248), 8);
  _Block_object_dispose((const void *)(v52 - 216), 8);
  _Block_object_dispose((const void *)(v52 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_100286DD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100286E18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100286E5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100286E6C(uint64_t a1)
{
}

void sub_100286E74(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  [*(id *)(a1 + 32) cancel];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 80) + 8);
    if (!*(unsigned char *)(v2 + 24))
    {
      *(unsigned char *)(v2 + 24) = 1;
      id v3 = objc_alloc((Class)NSError);
      id v4 = +[NSBundle mainBundle];
      uint64_t v5 = [v4 localizedStringForKey:@"The user cancelled the import." value:0 table:0];
      uint64_t v6 = +[NSDictionary dictionaryWithObjectsAndKeys:v5, NSLocalizedFailureReasonErrorKey, &off_10155DBC8, @"CRLBoardItemImporterErrorMediaTypeKey", 0];
      id v7 = [v3 initWithDomain:@"com.apple.freeform.CRLErrorDomainInfoImporter" code:104 userInfo:v6];

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      void block[2] = sub_10028704C;
      block[3] = &unk_1014E7560;
      uint64_t v15 = *(void *)(a1 + 88);
      uint64_t v8 = *(NSObject **)(a1 + 40);
      id v12 = *(id *)(a1 + 48);
      id v9 = *(id *)(a1 + 56);
      id v13 = v7;
      id v14 = v9;
      id v10 = v7;
      dispatch_async(v8, block);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
}

uint64_t sub_10028704C(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v2 = [*(id *)(a1 + 32) layerHost];
    [v2 endModalOperationWithToken:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v3();
}

void sub_1002870CC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1002871F4;
  block[3] = &unk_1014E76F0;
  long long v16 = *(_OWORD *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v2 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v9 = v3;
  uint64_t v10 = v4;
  id v5 = *(id *)(a1 + 88);
  char v19 = *(unsigned char *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 120);
  id v15 = v5;
  uint64_t v18 = v6;
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 80);
  dispatch_async(v2, block);
}

void sub_1002871F4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
  if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40)
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
  {
    uint64_t v2 = [*(id *)(a1 + 32) layerHost];
    [v2 endModalOperationWithToken:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40)];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
  id v3 = [*(id *)(a1 + 40) error];
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v6 = [*(id *)(a1 + 40) boardItem];

  if (v6)
  {
    uint64_t v7 = objc_opt_class();
    id v8 = [*(id *)(a1 + 40) boardItem];
    id v9 = sub_1002469D0(v7, v8);

    if (![v9 isAudioOnly]) {
      goto LABEL_12;
    }
    uint64_t v10 = [*(id *)(a1 + 48) boardItems];
    id v11 = [v10 objectsPassingTest:&stru_1014E75C8];
    id v12 = [v11 count];

    id v13 = [*(id *)(a1 + 48) boardItems];
    id v14 = [v13 count];

    if (v12 != v14)
    {
      uint64_t v39 = +[NSBundle mainBundle];
      double v40 = [v39 localizedStringForKey:@"The movie couldn’t be inserted." value:0 table:0];

      v66[0] = NSLocalizedDescriptionKey;
      v66[1] = @"CRLBoardItemImporterErrorMediaTypeKey";
      v67[0] = v40;
      v67[1] = &off_10155DBE0;
      double v41 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:2];
      id v42 = [v41 mutableCopy];
      id v3 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.freeform.CRLErrorDomainInfoImporter" code:100 userInfo:v42];

      if (v3)
      {
LABEL_5:
        if (*(void *)(a1 + 88))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
          uint64_t v4 = *(void *)(*(void *)(a1 + 112) + 8);
          if (!*(unsigned char *)(v4 + 24))
          {
            *(unsigned char *)(v4 + 24) = 1;
            uint64_t v5 = *(void *)(a1 + 88);
            v61[0] = _NSConcreteStackBlock;
            v61[1] = 3221225472;
            v61[2] = sub_100287AF8;
            v61[3] = &unk_1014E75F0;
            char v64 = *(unsigned char *)(a1 + 128);
            id v62 = *(id *)(a1 + 32);
            id v63 = v3;
            (*(void (**)(uint64_t, void, id, void *))(v5 + 16))(v5, 0, v63, v61);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
        }
        else if (*(unsigned char *)(a1 + 128))
        {
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472;
          v58[2] = sub_100287BCC;
          v58[3] = &unk_1014CBE78;
          id v59 = *(id *)(a1 + 32);
          id v3 = v3;
          id v60 = v3;
          long long v16 = v58;
          Main = CFRunLoopGetMain();
          CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v16);
          CFRunLoopWakeUp(Main);
        }
        goto LABEL_59;
      }
    }
    else
    {
LABEL_12:
    }
  }
  CGAffineTransform v47 = [*(id *)(a1 + 40) boardItem];
  if (v47 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24))
  {
    id v46 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:0 capacity:0];
    uint64_t v18 = [*(id *)(a1 + 32) editingCoordinator];
    uint64_t v45 = [v18 boardItemFactory];

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    char v19 = [*(id *)(a1 + 48) boardItems];
    id v20 = [v19 countByEnumeratingWithState:&v54 objects:v65 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v55;
      do
      {
        for (int i = 0; i != v21; int i = (char *)i + 1)
        {
          if (*(void *)v55 != v22) {
            objc_enumerationMutation(v19);
          }
          CGFloat v24 = *(void **)(*((void *)&v54 + 1) + 8 * i);
          if (!*(void *)(a1 + 56)
            || objc_msgSend(*(id *)(*((void *)&v54 + 1) + 8 * i), "isEqual:"))
          {
            CGFloat v25 = [*(id *)(a1 + 48) interactiveCanvasController];
            CGFloat v26 = [v25 canvasEditor];
            uint64_t v27 = [v26 canvasEditorHelper];
            unsigned int v28 = [v27 canReplaceBoardItem:v24];

            if (v28)
            {
              double v29 = [v45 makeDuplicateOfBoardItem:v47];
              [v29 takePropertiesFromReplacedBoardItem:v24];
              uint64_t v30 = objc_opt_class();
              long long v31 = sub_1002469D0(v30, v29);
              if ([v31 isAnimatedImage]) {
                [v31 setShadow:0];
              }
              uint64_t v32 = objc_opt_class();
              CGFloat v33 = sub_1002469D0(v32, v24);
              if ([v31 isAnimatedImage]
                && ([v33 isAnimatedImage] & 1) == 0)
              {
                [v31 setIsLooping:1];
              }
              [v46 setObject:v29 forKey:v24];
            }
          }
        }
        id v21 = [v19 countByEnumeratingWithState:&v54 objects:v65 count:16];
      }
      while (v21);
    }

    if ([v46 count])
    {
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100287BDC;
      v48[3] = &unk_1014E7668;
      v48[4] = *(void *)(a1 + 48);
      id v49 = v46;
      id v50 = *(id *)(a1 + 56);
      id v51 = *(id *)(a1 + 32);
      id v52 = *(id *)(a1 + 64);
      id v53 = v47;
      id v15 = (Block_layout *)[v48 copy];
      if (!*(void *)(a1 + 88))
      {
        if (*(_UNKNOWN **)(a1 + 72) != &_dispatch_main_q)
        {
          int v34 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E7688);
          }
          double v35 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_1010945D0(v34, v35);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E76A8);
          }
          double v36 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10106590C(v36);
          }
          CGFloat v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMediaReplacingHelper p_replaceCanvasElementInfo:withInfoFromInfoImporter:interactively:allowedTypes:actionString:queue:completion:]_block_invoke");
          CGFloat v38 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m"];
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v37, v38, 445, 0, "expected equality between %{public}s and %{public}s", "dispatch_get_main_queue()", "queue");
        }
        v15->invoke(v15);
      }
    }
    else
    {
      id v15 = 0;
    }
  }
  else
  {
    id v15 = 0;
  }
  if (*(void *)(a1 + 88))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
    uint64_t v43 = *(void *)(*(void *)(a1 + 112) + 8);
    if (!*(unsigned char *)(v43 + 24))
    {
      *(unsigned char *)(v43 + 24) = 1;
      if (!v15) {
        id v15 = &stru_1014E76C8;
      }
      (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
  }

  id v3 = 0;
LABEL_59:
  CGAffineTransform v44 = [*(id *)(a1 + 32) editingCoordinator];
  [v44 resumeCollaborationWithReason:*(void *)(a1 + 80)];
}

BOOL sub_100287A9C(id a1, _TtC8Freeform12CRLBoardItem *a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = sub_1002469D0(v4, v3);

  LOBYTE(v3) = [v5 isAudioOnly];
  return (char)v3;
}

void sub_100287AF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100287BBC;
    v3[3] = &unk_1014CBE78;
    id v4 = *(id *)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    Main = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v3);
    CFRunLoopWakeUp(Main);
  }
}

id sub_100287BBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentError:*(void *)(a1 + 40) completionHandler:0];
}

id sub_100287BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentError:*(void *)(a1 + 40) completionHandler:0];
}

void sub_100287BDC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v3 = [v2 canvasEditor];
  id v4 = [*(id *)(a1 + 32) boardItems];
  id v5 = [v3 selectionPathWithInfos:v4];
  uint64_t v6 = [*(id *)(a1 + 32) interactiveCanvasController];
  uint64_t v7 = [v6 editorController];
  [v7 setSelectionPath:v5];

  id v8 = [*(id *)(a1 + 40) crl_allObjects];
  id v9 = +[NSMutableSet setWithArray:v8];

  if (*(void *)(a1 + 48))
  {
    uint64_t v10 = [*(id *)(a1 + 32) boardItems];
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_100288174;
    v52[3] = &unk_1014E7618;
    id v53 = *(id *)(a1 + 48);
    id v11 = [v10 objectsPassingTest:v52];

    [v9 unionSet:v11];
  }
  id v12 = [*(id *)(a1 + 56) commandController];
  id v13 = [CRLCanvasCommandSelectionBehavior alloc];
  id v14 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v15 = [v14 canvasEditor];
  id v42 = v9;
  long long v16 = [(CRLCanvasCommandSelectionBehavior *)v13 initWithCanvasEditor:v15 type:3 constructedInfos:v9];

  double v40 = v16;
  double v41 = v12;
  [v12 openGroupWithSelectionBehavior:v16];
  uint64_t v17 = +[NSMutableArray array];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v18 = [*(id *)(a1 + 32) boardItems];
  id v19 = [v18 countByEnumeratingWithState:&v48 objects:v55 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v49;
    do
    {
      for (int i = 0; i != v20; int i = (char *)i + 1)
      {
        if (*(void *)v49 != v21) {
          objc_enumerationMutation(v18);
        }
        double v23 = [*(id *)(a1 + 32) p_commandsToSwapConnectionsFromInfo:*(void *)(*((void *)&v48 + 1) + 8 * i) infoMap:*(void *)(a1 + 40)];
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v24 = [v23 countByEnumeratingWithState:&v44 objects:v54 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = *(void *)v45;
          do
          {
            for (j = 0; j != v25; j = (char *)j + 1)
            {
              if (*(void *)v45 != v26) {
                objc_enumerationMutation(v23);
              }
              [v17 addObject:*(void *)(*((void *)&v44 + 1) + 8 * (void)j)];
            }
            id v25 = [v23 countByEnumeratingWithState:&v44 objects:v54 count:16];
          }
          while (v25);
        }
      }
      id v20 = [v18 countByEnumeratingWithState:&v48 objects:v55 count:16];
    }
    while (v20);
  }

  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100288198;
  v43[3] = &unk_1014E7640;
  unsigned int v28 = *(void **)(a1 + 40);
  v43[4] = *(void *)(a1 + 32);
  [v28 crl_enumerateKeysAndObjectsUsingBlock:v43];
  if ([v17 count])
  {
    double v29 = [[_TtC8Freeform15CRLCommandGroup alloc] initWithCommands:v17];
    [v41 enqueueCommand:v29];
  }
  uint64_t v30 = *(void **)(a1 + 64);
  if (v30)
  {
    id v31 = v30;
LABEL_34:
    [v41 setCurrentGroupActionString:v31];

    goto LABEL_35;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v32 = +[NSBundle mainBundle];
    CGFloat v33 = v32;
    CFStringRef v34 = @"Replace with Image";
LABEL_32:
    id v31 = [v32 localizedStringForKey:v34 value:0 table:@"UndoStrings"];
    goto LABEL_33;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v32 = +[NSBundle mainBundle];
      CGFloat v33 = v32;
      CFStringRef v34 = @"Replace with File";
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v32 = +[NSBundle mainBundle];
      CGFloat v33 = v32;
      CFStringRef v34 = @"Replace with 3D Object";
    }
    goto LABEL_32;
  }
  uint64_t v35 = objc_opt_class();
  CGFloat v33 = sub_1002469D0(v35, *(void **)(a1 + 72));
  unsigned int v36 = [v33 isAudioOnly];
  CGFloat v37 = +[NSBundle mainBundle];
  CGFloat v38 = v37;
  if (v36) {
    CFStringRef v39 = @"Replace with Audio";
  }
  else {
    CFStringRef v39 = @"Replace with Video";
  }
  id v31 = [v37 localizedStringForKey:v39 value:0 table:@"UndoStrings"];

LABEL_33:
  if (v31) {
    goto LABEL_34;
  }
LABEL_35:
  [v41 closeGroup];
}

uint64_t sub_100288174(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)] ^ 1;
}

void sub_100288198(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v9 = [v4 interactiveCanvasController];
  uint64_t v7 = [v9 canvasEditor];
  id v8 = [v7 canvasEditorHelper];
  [v8 replaceBoardItem:v6 withBoardItem:v5];
}

void sub_100288234(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100288278(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002882C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1002883A8;
    _OWORD v4[3] = &unk_1014CBE78;
    id v5 = *(id *)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    Main = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v4);
    CFRunLoopWakeUp(Main);
  }
  return (*(uint64_t (**)(void, void, void, Block_layout *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0, *(void *)(a1 + 40), &stru_1014E7738);
}

id sub_1002883A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentError:*(void *)(a1 + 40) completionHandler:0];
}

uint64_t sub_1002884BC(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) cancel];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_1002893CC(char a1)
{
  return 1 << a1;
}

uint64_t sub_1002893D8(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  if (unint64_t)(a1 - 1) < 9 && ((0x1EFu >> v1)) {
    return qword_101177298[v1];
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E77C8);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10109469C();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E77E8);
  }
  uint64_t v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v2);
  }
  id v3 = +[NSString stringWithUTF8String:"CRLCanvasKnobTag CRLCanvasKnobTagByRotating270Degrees(CRLCanvasKnobTag)"];
  id v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m"];
  +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:59 isFatal:0 description:"Unexpected knob tag"];

  return 0;
}

void sub_100289540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100289584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002895C8(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA) {
    return 0;
  }
  else {
    return qword_101177328[a1 - 1];
  }
}

uint64_t sub_1002895EC(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  if (unint64_t)(a1 - 1) < 9 && ((0x1EFu >> v1)) {
    return qword_1011772E0[v1];
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7808);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_101094730();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7828);
  }
  uint64_t v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v2);
  }
  id v3 = +[NSString stringWithUTF8String:"CRLCanvasKnobTag CRLCanvasKnobTagByRotating90Degrees(CRLCanvasKnobTag)"];
  id v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m"];
  +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:88 isFatal:0 description:"Unexpected knob tag"];

  return 0;
}

void sub_100289754(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100289798(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002897DC(double a1)
{
  if (a1 > 22.5 && a1 <= 67.5) {
    return 7;
  }
  if (a1 > 67.5 && a1 <= 112.5) {
    return 4;
  }
  if (a1 > 112.5 && a1 <= 157.5) {
    return 1;
  }
  if (a1 > 157.5 && a1 <= 202.5) {
    return 2;
  }
  if (a1 > 202.5 && a1 <= 247.5) {
    return 3;
  }
  if (a1 > 247.5 && a1 <= 292.5) {
    return 6;
  }
  if (a1 > 292.5 && a1 <= 337.5) {
    return 9;
  }
  if (a1 >= 22.5 && a1 <= 337.5) {
    return 0;
  }
  else {
    return 8;
  }
}

uint64_t sub_1002898F4(uint64_t a1, double a2)
{
  double v3 = sub_100407DFC(a2 / 90.0);
  sub_100065C2C(v3 * 90.0);
  if (v4 != 90.0 && fabs(v4 + -90.0) >= 0.00999999978)
  {
    if (v4 == 180.0 || fabs(v4 + -180.0) < 0.00999999978)
    {
      if ((unint64_t)(a1 - 1) >= 0xB) {
        return 0;
      }
      else {
        return qword_101177328[a1 - 1];
      }
    }
    else if (v4 == 270.0 || fabs(v4 + -270.0) < 0.00999999978)
    {
      return sub_1002893D8(a1);
    }
    return a1;
  }

  return sub_1002895EC(a1);
}

double sub_100289A18(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if ((unint64_t)(a1 - 1) > 8) {
    return CGPointZero.x;
  }
  uint64_t v9 = 2 - (a1 - 1) % 3u;
  if (a4 >= 0.0) {
    uint64_t v9 = (a1 - 1) % 3u;
  }
  if (a5 >= 0.0) {
    uint64_t v10 = (a1 - 1) / 3u;
  }
  else {
    uint64_t v10 = 2 - (a1 - 1) / 3u;
  }
  double v11 = ((double (*)(void))*(&off_1014E7848 + v9))();
  ((void (*)(double, double, double, double))*(&off_1014E7860 + v10))(a2, a3, a4, a5);
  return v11;
}

BOOL sub_100289AF0(char a1)
{
  return ((1 << a1) & 0x28A) != 0;
}

uint64_t sub_100289B08(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 - 1;
  if (unint64_t)(a1 - 1) < 0xC && ((0xFEFu >> v2)) {
    return qword_101177380[v2];
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7878);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010947C4();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7898);
  }
  double v3 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v3);
  }
  double v4 = +[NSString stringWithUTF8String:"CRLCanvasKnobTag CRLCanvasKnobTagWithFlip(CRLCanvasKnobTag)"];
  id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 238, 0, "don't know how to flip knob tag %tu", v1);

  return v1;
}

void sub_100289C84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100289CC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100289F10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100289F54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028BA04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028BA48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028C0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10028C0D4(uint64_t a1, void *a2)
{
  double v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

void sub_10028C2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

UIAccessibilityCustomRotorItemResult *__cdecl sub_10028C2FC(id a1, UIAccessibilityCustomRotorSearchPredicate *a2)
{
  return 0;
}

id sub_10028C304(uint64_t a1, void *a2)
{
  double v3 = (id *)(a1 + 32);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = [WeakRetained crlaxCustomRotorResultForRotor:v6 predicate:v4];

  return v7;
}

void sub_10028C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10028C540(uint64_t a1, void *a2)
{
  double v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

void sub_10028CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10028CE44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10028CE54(uint64_t a1)
{
}

void sub_10028CE5C(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = [v3 canvas];
  uint64_t v5 = [v8 repForLayout:v4];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

double sub_10028D29C(char a1, uint64_t a2, double a3)
{
  if (a2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = a3 < 0.02;
  }
  BOOL v4 = v3 || a2 == 3;
  if (v4 && (a1 & 1) != 0) {
    return 0.05;
  }
  float v6 = a3;
  return (fminf(fmaxf(v6, 0.0), 2.0) * 1.25 * 0.5 + 0.25) * 14.0;
}

void sub_10028D55C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028D5A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028D82C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028D870(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028DC84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028DCC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028DD08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028DF84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028DFC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028E008(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028EE84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028EEC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028EF04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028EF44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028EF84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028EFC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10028F00C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028F7D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028F814(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028FE70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_10028FEB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_100290DE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_100290E28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_1002910CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_100291568(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragGRCat");
  uint64_t v2 = off_10166D380;
  off_10166D380 = v1;
}

void sub_100291A00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100291A44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100291F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100291F64(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) p_allowedToEditChildren];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10029259C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002925E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100292BE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100292C2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002933B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002933FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100293A58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100293A9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100293D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100293F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v11 != v12)
  {
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100294148(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5, char a6)
{
  id v11 = a2;
  id v12 = a4;
  *(void *)a1 = &off_1014E7E90;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 24) = [v11 wpKind];
  *(void *)(a1 + _Block_object_dispose(&STACK[0x360], 8) = a3;
  *(unsigned char *)(a1 + 30) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 27) = a5;
  *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x360], 8) = a6;
  id v13 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;

  id v14 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v12;
  id v15 = v12;

  long long v16 = *(void **)(a1 + 256);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x360], 8) = 0;
  *(void *)(a1 + 256) = 0;

  return a1;
}

void sub_100294228(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 240);
  if (v5) {
    sub_100039CE8(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10029427C(uint64_t a1)
{
  *(void *)a1 = &off_1014E7E90;
  if (*(unsigned char *)(a1 + 31))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7EB8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010952B0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7ED8);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v3 = +[NSString stringWithUTF8String:"virtual CRLWPCoreTextTypesetter::~CRLWPCoreTextTypesetter()"];
    BOOL v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:392 isFatal:0 description:"Didn't end paragraph layout"];
  }
  if (*(unsigned char *)(a1 + 30)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }

  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 240);
  if (v5) {
    sub_100039CE8(v5);
  }

  return a1;
}

void sub_10029449C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000C318(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002944A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002944EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100294534(uint64_t a1)
{
  sub_10029427C(a1);

  operator delete();
}

uint64_t sub_10029456C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 31))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7EF8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095338();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7F18);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v3 = +[NSString stringWithUTF8String:"CTTypesetterRef CRLWPCoreTextTypesetter::pCTTypesetter() const"];
    BOOL v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v3 file:v4 lineNumber:399 isFatal:0 description:"paragraph must be set up before requesting typesetter"];
  }
  return sub_1005032B8(*(void *)(a1 + 232));
}

void sub_100294700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100294728(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029476C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002947B0(uint64_t result)
{
  *(_WORD *)(result + 30) = 1;
  return result;
}

void sub_1002947BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 31)) {
    sub_1002947F0(a1);
  }
  *(unsigned char *)(a1 + 30) = 0;
}

void sub_1002947F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 31))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 240);
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (v2) {
      sub_100039CE8(v2);
    }
    BOOL v3 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = 0;

    *(unsigned char *)(a1 + 31) = 0;
    BOOL v4 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    uint64_t v5 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = 0;
  }
}

uint64_t sub_100294868(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 31);
}

uint64_t sub_100294870(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100294880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7F38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010953C0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7F58);
    }
    v103 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v103, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d nil state in paragraph layout", v104, v105, v106, v107, v108, v109, v110, (uint64_t)"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)");
    v111 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
    v112 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v111 file:v112 lineNumber:430 isFatal:1 description:"nil state in paragraph layout"];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v113, v114);
    abort();
  }
  BOOL v3 = sub_100061D48(a2);

  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7F78);
    }
    BOOL v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_101095564();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E7F98);
    }
    uint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      float v6 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v6);
    }

    uint64_t v7 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
    id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 431, 0, "invalid nil value for '%{public}s'", "state->paragraphStyle()");
  }
  if (*(unsigned char *)(a1 + 31)) {
    sub_1002947F0(a1);
  }
  *(unsigned char *)(a1 + 31) = 1;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 96);
  unint64_t v9 = *(void *)(a2 + 16) - *(void *)(a1 + 32);
  if (v9 >= *(void *)(a1 + 40)) {
    unint64_t v9 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 40) = v9;
  char v10 = *(unsigned char *)(a2 + 351);
  if (v10)
  {
    if (*(unsigned char *)(a2 + 349)) {
      char v10 = 0;
    }
    else {
      char v10 = *(unsigned char *)(a2 + 352) != 0;
    }
  }
  *(unsigned char *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 29) = 0;
  uint64_t v118 = a2 + 24;
  unint64_t v11 = variable initialization expression of CRLDocumentSessionAnalyticsManager.totalEventKeyCount();
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x360], 8) = sub_1001CEC8C(v11);
  uint64_t v12 = *(void *)(a1 + 80);
  if (v12 == 6) {
    *(unsigned char *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x360], 8) = 0;
  *(void *)(a1 + 96) = v12;
  id v13 = sub_100061D58(a2);
  id v117 = [v13 scaleTextPercent];

  id v14 = -[CRLWPTypesetterTextSource initWithSource:subRange:]([CRLWPTypesetterTextSource alloc], "initWithSource:subRange:", *(void *)(a1 + 16), *(void *)(a1 + 32), *(void *)(a1 + 40));
  id v15 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v14;

  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x360], 8) = [*(id *)(a1 + 56) length];
  long long v16 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  if (v16) {
    sub_100039CE8(v16);
  }
  uint64_t v17 = *(void **)(a1 + 224);
  if (v17)
  {
    if (v117 == (id)100 && !*(unsigned char *)(a1 + 24) && *(void *)(a2 + 16) == 0x7FFFFFFFFFFFFFFFLL)
    {
      [v17 cachedTypesetterForParagraphIdentifier:a3];
      long long v18 = *(_OWORD *)buf;
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      id v19 = *(std::__shared_weak_count **)(a1 + 240);
      *(_OWORD *)(a1 + 232) = v18;
      if (v19)
      {
        sub_100039CE8(v19);
        if (*(void *)&buf[8]) {
          sub_100039CE8(*(std::__shared_weak_count **)&buf[8]);
        }
      }
    }
  }
  uint64_t v20 = a1;
  uint64_t v21 = *(void *)(a1 + 232);
  if (!v21) {
    goto LABEL_47;
  }
  if (*(void *)(a1 + 48) == (uint64_t)(*(void *)(v21 + 40) - *(void *)(v21 + 32)) >> 1) {
    goto LABEL_42;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7FB8);
  }
  uint64_t v22 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR)) {
    sub_1010954DC();
  }

  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014E7FD8);
  }
  double v23 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
  {
    id v24 = +[CRLAssertionHandler packedBacktraceString];
    sub_10107C04C(v24);
  }

  id v25 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
  uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
  +[CRLAssertionHandler handleFailureInFunction:v25 file:v26 lineNumber:486 isFatal:0 description:"cached paragraph typesetter has wrong char count"];

  uint64_t v20 = a1;
  uint64_t v21 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 48) == (uint64_t)(*(void *)(v21 + 40) - *(void *)(v21 + 32)) >> 1)
  {
LABEL_42:
    sub_100503524(v21, *(void **)(v20 + 56));
    goto LABEL_43;
  }
  [*(id *)(a1 + 224) clearCache];
  unsigned int v28 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  if (!v28) {
LABEL_47:
  }
    operator new();
  sub_100039CE8(v28);
LABEL_43:
  uint64_t v27 = *(void *)(a1 + 232);
  if (!v27) {
    goto LABEL_47;
  }
  uint64_t v30 = v27 + 32;
  uint64_t v29 = *(void *)(v27 + 32);
  if (*(void *)(v30 + 8) == v29) {
    uint64_t v29 = 0;
  }
  *(void *)(a1 + 64) = v29;
  unint64_t v121 = *(void *)(a1 + 48);
  id v31 = [objc_alloc((Class)NSMutableArray) initWithCapacity:100];
  uint64_t v32 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v31;

  objc_storeStrong((id *)(a1 + 112), *(id *)(a1 + 104));
  v116 = +[CRLWPRangeArray rangeArray];
  unint64_t v33 = 0;
  do
  {
    CFStringRef v34 = [*(id *)(a1 + 56) characterStyleAtCharIndex:v33 effectiveRange:&v128];
    unint64_t v122 = v33;
    uint64_t v35 = sub_100189FF0(v118);
    BOOL v36 = v35 == 0;

    if (!v36)
    {
      id v37 = [*(id *)(a1 + 56) charRangeMappedToStorage:v122];
      CGFloat v38 = sub_100189FF0(v118);
      uint64_t v39 = [v38 characterStyleAtCharIndex:v37 effectiveRange:0];

      CFStringRef v34 = (void *)v39;
    }
    double v40 = sub_100061D48(a2);
    BOOL v41 = v40 == 0;

    if (v41)
    {
      unsigned int v42 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8038);
      }
      uint64_t v43 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CR"
                              "LWPLayoutState *, CRLWPAttributeIndex)";
        __int16 v132 = 2082;
        v133 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v134 = 1024;
        int v135 = 555;
        __int16 v136 = 2082;
        v137 = "state->paragraphStyle()";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v43, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8058);
      }
      long long v44 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
      {
        id v98 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v98;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v44, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      long long v45 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
      long long v46 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v45, v46, 555, 0, "invalid nil value for '%{public}s'", "state->paragraphStyle()");
    }
    long long v47 = sub_100061D48(a2);
    long long v48 = sub_100296504(v47, v34, (unint64_t)v117, *(unsigned __int8 *)(a2 + 349), 1);
    id v49 = [v48 mutableCopy];

    unint64_t v50 = v128;
    unint64_t v51 = v129 + v128;
    if (v121 < v129 + v128) {
      unint64_t v51 = v121;
    }
    if (v128 <= v122) {
      unint64_t v50 = v122;
    }
    unint64_t v128 = v50;
    unint64_t v129 = v51 - v50;
    id v52 = [v49 objectForKeyedSubscript:kCTFontAttributeName];

    id v53 = sub_100061DC4(a2);
    BOOL v54 = v53 == 0;

    if (v54)
    {
      long long v56 = 0;
      if (!v34) {
        goto LABEL_87;
      }
    }
    else
    {
      long long v55 = sub_100061DC4(a2);
      long long v56 = v55;
      if (v55)
      {
        objc_msgSend(v49, "setObject:forKeyedSubscript:", objc_msgSend(v55, "CGColor"), kCTForegroundColorAttributeName);
        [v49 removeObjectForKey:@"CRLWPCharacterFillAttribute"];
        [v49 removeObjectForKey:@"CRLWPCharacterStrokeAttribute"];
        [v49 removeObjectForKey:kCTForegroundColorFromContextAttributeName];
      }
      if (!v34) {
        goto LABEL_87;
      }
    }
    int v57 = *(unsigned __int8 *)(a2 + 349);
    uint64_t v58 = objc_opt_class();
    id v59 = [v34 valueForProperty:28];
    id v60 = sub_1002469D0(v58, v59);
    unsigned int v61 = [v60 intValue];

    if (v61 != -1 && v61 != v57)
    {
      if (v129)
      {
        unint64_t v62 = 0;
        unint64_t v63 = v128;
        uint64_t v64 = 2 * v128;
        while (sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + v64 + 2 * v62)))
        {
          if (++v62 >= v129) {
            goto LABEL_81;
          }
        }
        if (v62)
        {
LABEL_81:
          unint64_t v129 = v62;
          goto LABEL_87;
        }
        unint64_t v65 = v129;
        if (v129 >= 2)
        {
          unint64_t v66 = v63 - 1;
          do
          {
            if (!sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (v66 + v65)))) {
              break;
            }
            unint64_t v65 = v129 - 1;
            unint64_t v129 = v65;
          }
          while (v65 > 1);
        }
      }
      double v67 = +[NSNumber numberWithInt:v61 == 1];
      v130 = v67;
      double v68 = +[NSArray arrayWithObjects:&v130 count:1];

      [v49 setObject:v68 forKeyedSubscript:kCTWritingDirectionAttributeName];
    }
LABEL_87:
    v69 = sub_100061D48(a2);
    v120 = v56;
    uint64_t v70 = sub_1001CD4F8(v34, v69, 0x12uLL);

    if (v70)
    {
      if ([v70 isEnabled]) {
        uint64_t v71 = 4;
      }
      else {
        uint64_t v71 = 0;
      }
    }
    else
    {
      uint64_t v71 = 0;
    }
    v119 = [v49 objectForKeyedSubscript:@"CRLWPCharacterStrokeAttribute"];
    uint64_t v72 = [v49 objectForKeyedSubscript:@"CRLWPCharacterFillAttribute"];
    uint64_t v73 = [v49 objectForKeyedSubscript:@"CRLWPInvisibleTextAttribute"];
    v74 = (void *)v73;
    uint64_t v75 = v71 | 8;
    if (!v119) {
      uint64_t v75 = v71;
    }
    if (v72) {
      v75 |= 0x10uLL;
    }
    if (v73) {
      uint64_t v76 = v75 | 0x20;
    }
    else {
      uint64_t v76 = v75;
    }
    CGFloat v77 = objc_opt_new();
    [v77 setRunLength:v129];
    [v77 setCharIndex:v122];
    [v77 setCharacterStyle:v34];
    [v77 setCtFont:v52];
    [v77 setAttributes:v49];
    [v77 setFlags:v76];
    sub_1001CE5C0((uint64_t)v52, v127);
    v126[2] = v127[2];
    v126[3] = v127[3];
    v126[4] = v127[4];
    v126[5] = v127[5];
    v126[0] = v127[0];
    v126[1] = v127[1];
    [v77 setFontHeightInfo:v126];
    double v78 = *(void **)(a1 + 104);
    if (!v78)
    {
      unsigned int v79 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8078);
      }
      CGFloat v80 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v80, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v79;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CR"
                              "LWPLayoutState *, CRLWPAttributeIndex)";
        __int16 v132 = 2082;
        v133 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v134 = 1024;
        int v135 = 830;
        __int16 v136 = 2082;
        v137 = "_mutableStyleRunArray";
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v80, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8098);
      }
      CGFloat v81 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v81, OS_LOG_TYPE_ERROR))
      {
        id v99 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v79;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v99;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v81, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      v82 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
      CGFloat v83 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v82, v83, 830, 0, "invalid nil value for '%{public}s'", "_mutableStyleRunArray");

      double v78 = *(void **)(a1 + 104);
    }
    if (![v78 count]
      || ([*(id *)(a1 + 104) lastObject],
          v84 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v85 = [v84 coalesceWith:v77],
          v84,
          (v85 & 1) == 0))
    {
      [*(id *)(a1 + 104) addObject:v77];
    }
    CGAffineTransform v86 = sub_100061D48(a2);
    int v87 = sub_1001CD5B0(v34, v86, 2, 0);

    CFIndex v88 = v129;
    if (v87 == 1)
    {
      sub_1002971A8(a1, v122, v129);
    }
    else if (v87 == 3)
    {
      CGRect v89 = sub_100061D48(a2);
      BOOL v90 = sub_1001CD5B0(v34, v89, 3, 0) == 1;

      if (v90) {
        [v116 addRange:v122, v88];
      }
      else {
        sub_1002977D8(a1, v122, v88);
      }
    }
    else if (v87 == 2 && (v76 & 1) == 0 && v129)
    {
      sub_10029664C(a1, v122, v129);
    }
    unint64_t v91 = v129 + v128;
    if (v129 + v128 > v121)
    {
      unsigned int v92 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E80B8);
      }
      CGRect v93 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v92;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CR"
                              "LWPLayoutState *, CRLWPAttributeIndex)";
        __int16 v132 = 2082;
        v133 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v134 = 1024;
        int v135 = 858;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v93, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad curCharIndex", buf, 0x22u);
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E80D8);
      }
      CGRect v94 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v94, OS_LOG_TYPE_ERROR))
      {
        id v97 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v92;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v97;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v94, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      v95 = +[NSString stringWithUTF8String:"CRLWPTypesetterParagraphSetupResult CRLWPCoreTextTypesetter::beginParagraphLayout(const CRLWPLayoutState *, CRLWPAttributeIndex)"];
      v96 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v95 file:v96 lineNumber:858 isFatal:0 description:"Bad curCharIndex"];
    }
    unint64_t v33 = v91;
  }
  while (v91 < v121);
  v100 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;

  v125[0] = _NSConcreteStackBlock;
  v125[1] = 3221225472;
  v125[2] = sub_100297D34;
  v125[3] = &unk_1014E80F8;
  v125[4] = a1;
  [v116 enumerateRanges:v125];
  if (*(void *)(a2 + 400) == 4) {
    uint64_t v101 = *(unsigned __int8 *)(a2 + 349);
  }
  else {
    uint64_t v101 = *(void *)(a2 + 400);
  }

  return v101;
}

void sub_100295F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029625C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002962A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002962E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100296328(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029636C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002963B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002963F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100296438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029647C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002964C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100296504(void *a1, void *a2, unint64_t a3, unsigned int a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  CTParagraphStyleRef v11 = sub_1002A5FF4(v9, a4);
  uint64_t v12 = sub_1002A676C((uint64_t)v11, v9, v10, a5, a3);
  CFRelease(v11);

  return v12;
}

void sub_1002965A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002965C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100296608(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029664C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (![*(id *)(a1 + 112) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8CA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010955F8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8CC0);
    }
    uint64_t v58 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v58, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Must have at least one style run", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)");
    id v59 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)"];
    id v52 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v59 file:v52 lineNumber:4074 isFatal:1 description:"Must have at least one style run"];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v53, v54);
    abort();
  }
  if (!a3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8CE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095708();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8D00);
    }
    long long v55 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v55, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    long long v56 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)"];
    float v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v56 file:v6 lineNumber:4075 isFatal:0 description:"localRange.length must be >= 1"];
  }
  uint64_t v7 = (char *)[*(id *)(a1 + 112) count] - 1;
  int v57 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v7];
  id v8 = [v57 range];
  unint64_t v10 = a2 + a3;
  if ((unint64_t)v8 > a2 || (unint64_t)v8 + v9 < v10)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8D20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095680();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8D40);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v13 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)"];
    id v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:4080 isFatal:0 description:"Incorrect initial range"];

    unint64_t v10 = a2 + a3;
  }
  id v15 = +[NSCharacterSet lowercaseLetterCharacterSet];
  if (a2 < v10)
  {
    CTFontRef cf = 0;
    do
    {
      unsigned int v16 = [v15 characterIsMember:*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * a2)];
      unint64_t v17 = a2 + 1;
      do
      {
        long long v18 = (unsigned char *)v17;
        if (v17 >= v10) {
          break;
        }
        unsigned int v19 = [v15 characterIsMember:*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v17)];
        unint64_t v17 = (unint64_t)(v18 + 1);
      }
      while (v16 == v19);
      if (a2 <= (unint64_t)v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = (unsigned char *)a2;
      }
      if (a2 >= (unint64_t)v18) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = (unsigned char *)a2;
      }
      id v62 = v57;
      uint64_t v22 = (uint64_t)v62;
      if (v7 + 1 == [*(id *)(a1 + 112) count])
      {
        uint64_t v22 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v7];
      }
      unsigned int v61 = (void *)v22;
      uint64_t v23 = v20 - v21;
      if (v7 == [*(id *)(a1 + 112) count] || v21 != objc_msgSend(v61, "range") || v23 != v33)
      {
        id v24 = *(void **)(a1 + 104);
        if (!v24)
        {
          unsigned int v25 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E8D60);
          }
          uint64_t v26 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67110146;
            unsigned int v73 = v25;
            __int16 v74 = 2082;
            uint64_t v75 = "void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)";
            __int16 v76 = 2082;
            CGFloat v77 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
            __int16 v78 = 1024;
            int v79 = 4105;
            __int16 v80 = 2082;
            CGFloat v81 = "_mutableStyleRunArray";
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014E8D80);
          }
          uint64_t v27 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
          {
            long long v44 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = 67109378;
            unsigned int v73 = v25;
            __int16 v74 = 2114;
            uint64_t v75 = v44;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v27, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          unsigned int v28 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeToSmallCapsForRange(const NSRange)"];
          uint64_t v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v28, v29, 4105, 0, "invalid nil value for '%{public}s'", "_mutableStyleRunArray");

          id v24 = *(void **)(a1 + 104);
        }
        id v30 = [v61 copy];
        [v24 addObject:v30];

        uint64_t v7 = (char *)[*(id *)(a1 + 112) count] - 1;
        if (v61)
        {
          id v31 = [v61 range];
          if (v21 < &v31[v32]) {
            [v61 setRunLength:v21 - v31];
          }
        }
      }
      CFStringRef v34 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v7];
      [v34 setRunLength:v23];
      [v34 setCharIndex:v21];
      uint64_t v35 = [v62 characterStyle];
      [v34 setCharacterStyle:v35];

      unint64_t v36 = (unint64_t)[v34 flags];
      uint64_t v37 = 2;
      if (!v16) {
        uint64_t v37 = 0;
      }
      [v34 setFlags:v36 | v37];
      if (v16)
      {
        sub_1002971A8(a1, (uint64_t)v21, v23);
        if (cf
          || (double Size = CTFontGetSize((CTFontRef)[v62 ctFont]),
              unsigned int v42 = CTFontCopyFontDescriptor((CTFontRef)[v62 ctFont]),
              (uint64_t v43 = v42) != 0)
          && (CTFontRef cf = CTFontCreateWithFontDescriptor(v42, Size * 0.800000012, 0), CFRelease(v43), cf))
        {
          CGFloat v38 = [v62 attributes];
          id v39 = [v38 mutableCopy];

          [v39 setObject:cf forKeyedSubscript:kCTFontAttributeName];
          [v34 setAttributes:v39];
          [v34 setCtFont:cf];
          sub_1001CE5C0((uint64_t)cf, v64);
          v63[2] = v64[2];
          v63[3] = v64[3];
          v63[4] = v64[4];
          v63[5] = v64[5];
          v63[0] = v64[0];
          v63[1] = v64[1];
          [v34 setFontHeightInfo:v63];
        }
        else
        {
          CTFontRef cf = 0;
        }
      }
      else
      {
        double v40 = [v62 attributes];
        [v34 setAttributes:v40];

        [v34 setCtFont:[v62 ctFont]];
        if (v57)
        {
          [v62 fontHeightInfo];
        }
        else
        {
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
        }
        v65[2] = v68;
        v65[3] = v69;
        v65[4] = v70;
        v65[5] = v71;
        v65[0] = v66;
        v65[1] = v67;
        [v34 setFontHeightInfo:v65];
      }

      ++v7;
      a2 = (unint64_t)v18;
    }
    while ((unint64_t)v18 < v10);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_10029708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1002971A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a2 + a3) > *(void *)(a1 + 48))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E89F8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095824();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8A18);
    }
    float v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v7 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToUppercaseForRange(NSRange)"];
    id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:3914 isFatal:0 description:"Invalid local range"];
  }
  uint64_t v9 = +[CRLLocale currentLocale];
  if (!v9)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8A38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095790();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8A58);
    }
    unint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    CTParagraphStyleRef v11 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToUppercaseForRange(NSRange)"];
    uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 3917, 0, "invalid nil value for '%{public}s'", "locale");
  }
  if (a3 >= 1)
  {
    id v13 = (UniChar *)(*(void *)(a1 + 64) + 2 * a2);
    uint64_t v14 = a3 + 1;
    do
    {
      UniChar v15 = *v13;
      MutableWithExternalCharactersNoCopdouble y = CFStringCreateMutableWithExternalCharactersNoCopy(0, v13, 1, 1, kCFAllocatorNull);
      if (MutableWithExternalCharactersNoCopy)
      {
        CFLocaleRef v17 = [v9 locale];
        CFStringUppercase(MutableWithExternalCharactersNoCopy, v17);

        if (CFStringGetLength(MutableWithExternalCharactersNoCopy) != 1) {
          *id v13 = v15;
        }
        CFRelease(MutableWithExternalCharactersNoCopy);
      }
      else
      {
        unsigned int v18 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8A78);
        }
        unsigned int v19 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109890;
          unsigned int v25 = v18;
          __int16 v26 = 2082;
          uint64_t v27 = "void CRLWPCoreTextTypesetter::pChangeTextToUppercaseForRange(NSRange)";
          __int16 v28 = 2082;
          uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
          __int16 v30 = 1024;
          int v31 = 3928;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create temporary string for _textBuffer", buf, 0x22u);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8A98);
        }
        uint64_t v20 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = +[CRLAssertionHandler packedBacktraceString];
          *(_DWORD *)buf = 67109378;
          unsigned int v25 = v18;
          __int16 v26 = 2114;
          uint64_t v27 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
        }
        uint64_t v21 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToUppercaseForRange(NSRange)"];
        uint64_t v22 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
        +[CRLAssertionHandler handleFailureInFunction:v21 file:v22 lineNumber:3928 isFatal:0 description:"Failed to create temporary string for _textBuffer"];
      }
      ++v13;
      --v14;
    }
    while (v14 > 1);
  }
}

void sub_10029774C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002977D8(uint64_t a1, uint64_t a2, CFIndex numChars)
{
  if ((unint64_t)(a2 + numChars) > *(void *)(a1 + 48))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8BE0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010959C8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8C00);
    }
    float v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v7 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToStartCaseForRange(NSRange)"];
    id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:4055 isFatal:0 description:"Invalid local range"];
  }
  MutableWithExternalCharactersNoCopdouble y = CFStringCreateMutableWithExternalCharactersNoCopy(0, (UniChar *)(*(void *)(a1 + 64) + 2 * a2), numChars, numChars, kCFAllocatorNull);
  if (MutableWithExternalCharactersNoCopy)
  {
    unint64_t v10 = +[CRLLocale currentLocale];
    if (!v10)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8C60);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101095934();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8C80);
      }
      CTParagraphStyleRef v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v12 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToStartCaseForRange(NSRange)"];
      id v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 4064, 0, "invalid nil value for '%{public}s'", "locale");
    }
    CFLocaleRef v14 = [v10 locale];
    CFStringCapitalize(MutableWithExternalCharactersNoCopy, v14);

    CFRelease(MutableWithExternalCharactersNoCopy);
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8C20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010958AC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8C40);
    }
    UniChar v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    unint64_t v10 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToStartCaseForRange(NSRange)"];
    unsigned int v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v16 lineNumber:4060 isFatal:0 description:"Failed to create temporary string for _textBuffer"];
  }
}

void sub_100297C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100297CAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100297CF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100297D34(uint64_t a1, uint64_t a2, CFIndex a3)
{
}

void sub_100297D3C(uint64_t a1, uint64_t a2, CFIndex a3)
{
  if ((unint64_t)(a2 + a3) > *(void *)(a1 + 48))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8AB8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095C0C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8AD8);
    }
    float v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v7 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToTitleCaseForRange(NSRange)"];
    id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:3957 isFatal:0 description:"Invalid localRange parameter"];
  }
  uint64_t v9 = sub_1002A5254(a1);
  if (v9)
  {
    MutableWithExternalCharactersNoCopdouble y = CFStringCreateMutableWithExternalCharactersNoCopy(0, (UniChar *)(*(void *)(a1 + 64) + 2 * a2), a3, a3, kCFAllocatorNull);
    if (MutableWithExternalCharactersNoCopy)
    {
      CTParagraphStyleRef v11 = +[NSCharacterSet alphanumericCharacterSet];
      uint64_t v12 = +[NSCharacterSet crlwp_sentenceDelimiterCharacterSet];
      id v13 = +[CRLLocale currentLocale];
      if (!v13)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8B78);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101095B78();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8B98);
        }
        CFLocaleRef v14 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        unsigned int v18 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToTitleCaseForRange(NSRange)"];
        UniChar v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v18, v15, 3970, 0, "invalid nil value for '%{public}s'", "locale");
      }
      [v9 setString:MutableWithExternalCharactersNoCopy];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      _OWORD v19[2] = sub_1002A5564;
      v19[3] = &unk_1014E8BC0;
      v19[8] = a2;
      v19[9] = a3;
      v19[4] = v12;
      v19[5] = v11;
      v19[6] = v13;
      v19[7] = a1;
      [v9 enumerateTagsInRange:0 scheme:a3 options:NSLinguisticTagSchemeNameTypeOrLexicalClass usingBlock:v19];
      CFRelease(MutableWithExternalCharactersNoCopy);
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8B38);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101095AE4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8B58);
      }
      CFLocaleRef v17 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      CTParagraphStyleRef v11 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToTitleCaseForRange(NSRange)"];
      uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 3965, 0, "invalid nil value for '%{public}s'", "text");
    }
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8AF8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101095A50();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8B18);
    }
    unsigned int v16 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    CTParagraphStyleRef v11 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pChangeTextToTitleCaseForRange(NSRange)"];
    uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 3959, 0, "invalid nil value for '%{public}s'", "tagger");
  }
}

void sub_10029838C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100298468(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = xmmword_101176F48;
  if (*(void *)(a1 + 48))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = [*(id *)(a1 + 56) hyperlinkFieldAtCharIndex:v4 effectiveRange:&v8];
      uint64_t v6 = v8;
      if (v5) {
        BOOL v7 = (void)v8 == 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        [v3 addAttribute:@"CRLWPUnderline" value:&off_10155DBF8 range:];
        uint64_t v6 = v8;
      }
      if (v4 + 1 > *((void *)&v8 + 1) + v6) {
        ++v4;
      }
      else {
        unint64_t v4 = *((void *)&v8 + 1) + v6;
      }
    }
    while (v4 < *(void *)(a1 + 48));
  }
}

void sub_10029854C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100298568(uint64_t a1, uint64_t a2)
{
  double v260 = *(double *)a2;
  if (!*(unsigned char *)(a1 + 31)
    || ((unint64_t v4 = *(void *)(a1 + 32), **(void **)&v260 >= v4)
      ? (BOOL v5 = **(void **)&v260 > *(void *)(a1 + 40) + v4)
      : (BOOL v5 = 1),
        v5))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8118);
    }
    uint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR)) {
      sub_101095FC4();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8138);
    }
    BOOL v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      long long v8 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v8);
    }

    uint64_t v9 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
    unint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:1039 isFatal:0 description:"layoutLine called without paragraph being set up correctly"];
  }
  if ((*(unsigned char *)(a2 + 66) & 1) != 0
    && *(void *)(*(void *)(a1 + 232) + 80) != *(void *)(*(void *)(a1 + 232) + 88))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8158);
    }
    CTParagraphStyleRef v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
      sub_101095F3C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8178);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v13);
    }

    CFLocaleRef v14 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
    UniChar v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:1040 isFatal:0 description:"Can't skip glyph vectors with ruby"];
  }
  uint64_t v16 = *(void *)(a2 + 224);
  id v17 = [*(id *)(a1 + 56) charIndexMappedFromStorage:**(void **)&v260];
  unint64_t v18 = (unint64_t)v17;
  if (v17 == (id)0x7FFFFFFFFFFFFFFFLL || (unint64_t)v17 > *(void *)(a1 + 48))
  {
    if (**(void **)&v260 != *(void *)(a1 + 40) + *(void *)(a1 + 32))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8198);
      }
      unsigned int v19 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR)) {
        sub_101095EB4();
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E81B8);
      }
      uint64_t v20 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = +[CRLAssertionHandler packedBacktraceString];
        sub_10107C04C(v21);
      }

      uint64_t v22 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      uint64_t v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v22 file:v23 lineNumber:1049 isFatal:0 description:"bad start char index"];
    }
    unint64_t v18 = *(void *)(a1 + 48);
  }
  v268 = (char *)v18;
  *(void *)uint64_t v16 = **(void **)&v260;
  *(void *)(v16 + 16) = *(void *)(a1 + 32);
  long long v24 = *(_OWORD *)(*(void *)&v260 + 480);
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(*(void *)&v260 + 464);
  *(_OWORD *)(v16 + 56) = v24;
  if (*(unsigned char *)(a1 + 27)) {
    *(void *)(v16 + 24) |= 0x2000uLL;
  }
  if (*(unsigned char *)(a1 + 72)) {
    *(void *)(v16 + 24) |= 0x20000uLL;
  }
  sub_1001524E0(v16, *(void **)(a1 + 56));
  long long v25 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 120) = v25;
  long long v26 = *(_OWORD *)(a2 + 104);
  long long v27 = *(_OWORD *)(a2 + 120);
  long long v28 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 184) = v28;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x360], 8) = v27;
  *(_OWORD *)(a1 + 152) = v26;
  *(void *)&long long v27 = *(void *)(*(void *)&v260 + 216);
  double v266 = *(double *)(a2 + 24) - *(double *)(*(void *)&v260 + 224);
  double v267 = *(double *)&v27;
  sub_10029B204(v29, (double *)a2, &v267, &v266);
  char v265 = 1;
  if (!*(unsigned char *)(*(void *)&v260 + 456)) {
    goto LABEL_50;
  }
  __int16 v30 = sub_100061D78(*(uint64_t *)&v260);
  if (!v30 || !*(unsigned char *)(*(void *)&v260 + 348))
  {

LABEL_50:
    if (*(unsigned char *)(a2 + 208)) {
      *(void *)(v16 + 24) |= 0x10000000uLL;
    }
    goto LABEL_52;
  }
  BOOL v31 = *(unsigned char *)(a2 + 208) == 0;

  if (!v31) {
    goto LABEL_50;
  }
  sub_10029B438(a1, a2, v18, &v265, &v267, &v266);
LABEL_52:
  double v32 = v266;
  double v33 = v267;
  if (v267 >= v266) {
    double v32 = v267;
  }
  double v266 = v32;
  double width = fmin(v32 - v267, 32000.0);
  CFStringRef v34 = *(char **)(a1 + 48);
  if ((*(unsigned char *)(a2 + 40) & 4) != 0) {
    goto LABEL_61;
  }
  uint64_t v35 = *(void *)(*(void *)&v260 + 400);
  if (v35 == 1) {
    goto LABEL_60;
  }
  if (v35 == 2)
  {
    double v33 = v267 + width * 0.5;
    goto LABEL_61;
  }
  if (v35 == 3 && *(unsigned char *)(*(void *)&v260 + 349)) {
LABEL_60:
  }
    double v33 = v32;
LABEL_61:
  if (!v265 || width <= 1.0 && !*(unsigned char *)(a2 + 169) || (unint64_t)(v34 - 1) < v18)
  {
    v268 = (char *)v18;
    sub_10029C558(v33, a1, *(uint64_t *)&v260, v16, 0);
    CFStringRef v34 = (char *)v18;
    goto LABEL_326;
  }
  if (v18 >= (unint64_t)&v34[-(*(_WORD *)(*(void *)(a1 + 232) + 72) != 0)])
  {
    v268 = *(char **)(a1 + 48);
    *(void *)(v16 + _Block_object_dispose(&STACK[0x360], 8) = (char *)objc_msgSend(*(id *)(a1 + 56), "charIndexMappedToStorage:", v34, 1.0, width)
                         - *(void *)v16;
    sub_10029C558(v33, a1, *(uint64_t *)&v260, v16, *(unsigned __int16 *)(*(void *)(a1 + 232) + 72));
    goto LABEL_326;
  }
  uint64_t v36 = objc_opt_class();
  uint64_t v37 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v18 attributeKind:7 effectiveRange:v285];
  v255 = sub_1002469D0(v36, v37);

  if (v255) {
    sub_1005031EC(*(void *)(a1 + 232), (uint64_t)v255);
  }
  sub_10015DF40(v16);
  for (unint64_t i = 0; ; unint64_t i = v256 + 1)
  {
    unint64_t v256 = i;
    if (i) {
      sub_10015EF68(v16);
    }
    if (!*(unsigned char *)(a1 + 72))
    {
LABEL_84:
      if (!*(unsigned char *)(a1 + 28) || !*(unsigned char *)(a1 + 88))
      {
        id v62 = (const __CTTypesetter *)sub_10029456C(a1);
        double v63 = v267;
        uint64_t v64 = (char *)(CTTypesetterSuggestLineBreakWithOffset(v62, v18, width, v267) + v18);
        v268 = v64;
        if (v64)
        {
          unint64_t v65 = sub_1005032C0(*(void *)(a1 + 232));
          long long v66 = [v65 attribute:kCTKernAttributeName atIndex:v64 - 1 effectiveRange:0];

          [v66 floatValue];
          float v68 = v67;
          if (v67 > 0.0 || v67 < 0.0 && *(unsigned char *)(a2 + 171))
          {
            long long v69 = (const __CTTypesetter *)sub_10029456C(a1);
            double v70 = v68;
            uint64_t v64 = (char *)(CTTypesetterSuggestLineBreakWithOffset(v69, v18, width + v70, v63) + v18);
            v268 = v64;
            *(double *)(a1 + 24_Block_object_dispose(&STACK[0x360], 8) = v70;
          }

          if ((unint64_t)v64 > *(void *)(a1 + 48))
          {
            unsigned int v71 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E81D8);
            }
            uint64_t v72 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v72, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v71;
              *(_WORD *)&buf[8] = 2082;
              *(void *)&buf[10] = "CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)";
              __int16 v270 = 2082;
              v271 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
              __int16 v272 = 1024;
              int v273 = 1321;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v72, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad endCharIndex", buf, 0x22u);
            }

            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E81F8);
            }
            unsigned int v73 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v73, OS_LOG_TYPE_ERROR))
            {
              id v113 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v71;
              *(_WORD *)&buf[8] = 2114;
              *(void *)&buf[10] = v113;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v73, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            __int16 v74 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
            uint64_t v75 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
            +[CRLAssertionHandler handleFailureInFunction:v74 file:v75 lineNumber:1321 isFatal:0 description:"Bad endCharIndex"];
          }
          if (!v64
            || *(unsigned char *)(a2 + 169)
            || (unint64_t)v64 >= *(void *)(a1 + 48)
            || (v18 <= (unint64_t)v64 ? (unint64_t v76 = (unint64_t)v64) : (unint64_t v76 = v18),
                v18 >= (unint64_t)v64 ? (uint64_t v77 = (uint64_t)v64) : (uint64_t v77 = v18),
                (sub_10029CD78((CFIndex *)a1, v77, v76 - v77) & 1) != 0))
          {
            if ((unint64_t)v64 > v18)
            {
              *(_OWORD *)buf = xmmword_101176F48;
              uint64_t v78 = objc_opt_class();
              int v79 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v64 attributeKind:7 effectiveRange:buf];
              __int16 v80 = sub_1002469D0(v78, v79);

              if (v80 && *(void *)&buf[8] + *(void *)buf > (unint64_t)v64)
              {
                BOOL v81 = sub_100503120(*(void *)(a1 + 232), (uint64_t)v80);
                uint64_t v82 = *(void *)buf;
                if (!v81)
                {
                  if (*(void *)buf <= v18 && *(unsigned char *)(a2 + 169))
                  {
                    sub_100503184(*(void *)(a1 + 232), (uint64_t)v80);
                    uint64_t v82 = *(void *)buf;
                  }
                  else
                  {
                    if (*(void *)buf <= v18) {
                      uint64_t v64 = (char *)v18;
                    }
                    else {
                      uint64_t v64 = *(char **)buf;
                    }
                    v268 = v64;
                  }
                }
                if (v64 == (char *)(v82 + *(void *)&buf[8] - 1)) {
                  v268 = v64 + 1;
                }
              }
            }
          }
          else
          {
            v268 = (char *)v18;
            sub_10015D3A0(v16, 0);
          }
        }
LABEL_245:
        unsigned int v42 = v268;
        if ((unint64_t)v268 > v18)
        {
          v123 = v268 - 1;
          if (*(_WORD *)(*(void *)(a1 + 64) + 2 * (void)(v268 - 1)) == 173)
          {
            *(double *)buf = width;
            if (sub_10029D054(a1, v18, (CFIndex)&v268[~v18], 45, (double *)buf, v16))
            {
              sub_10015D380(v16, 1);
            }
            else
            {
              v124 = (char *)[*(id *)(a1 + 56) wordAtCharIndex:v42 includePreviousWord:0];
              if (v18 <= (unint64_t)v124) {
                v125 = v124;
              }
              else {
                v125 = (char *)v18;
              }
              if (v123 <= v125)
              {
LABEL_258:
                v268 = v123;
                unsigned int v42 = v123;
              }
              else
              {
                v126 = v42 - 2;
                while (1)
                {
                  if (*(_WORD *)(*(void *)(a1 + 64) + 2 * (void)v126) == 173)
                  {
                    *(double *)buf = width;
                    if (sub_10029D054(a1, v18, (CFIndex)&v126[-v18], 45, (double *)buf, v16)) {
                      break;
                    }
                  }
                  v127 = v126 - 1;
                  BOOL v5 = v126-- > v125;
                  if (!v5)
                  {
                    v123 = v127 + 1;
                    goto LABEL_258;
                  }
                }
                unsigned int v42 = v126 + 1;
                v268 = v126 + 1;
                sub_10015D380(v16, 1);
              }
            }
          }
        }
        goto LABEL_259;
      }
      id v52 = (const __CTTypesetter *)sub_10029456C(a1);
      double v53 = v267;
      Swift::String v54 = (char *)(CTTypesetterSuggestClusterBreakWithOffset(v52, v18, width, v267) + v18);
      v268 = v54;
      if (v54)
      {
        long long v55 = sub_1005032C0(*(void *)(a1 + 232));
        long long v56 = [v55 attribute:kCTKernAttributeName atIndex:v54 - 1 effectiveRange:0];

        [v56 floatValue];
        float v58 = v57;
        id v59 = v54;
        if (v57 > 0.0)
        {
          id v60 = (const __CTTypesetter *)sub_10029456C(a1);
          double v61 = v58;
          id v59 = (char *)(CTTypesetterSuggestClusterBreakWithOffset(v60, v18, width + v61, v53) + v18);
          *(double *)(a1 + 24_Block_object_dispose(&STACK[0x360], 8) = v61;
        }
      }
      else
      {
        id v59 = 0;
      }
      CGRect v94 = (char *)[*(id *)(a1 + 56) length];
      uint64_t v95 = objc_opt_class();
      v96 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v54 attributeKind:7 effectiveRange:v285];
      id v97 = sub_1002469D0(v95, v96);

      id v98 = v268;
      if (v97 && *(void *)&v285[0] <= v18)
      {
        if (sub_100503240(*(void *)(a1 + 232), (unint64_t)v268))
        {
          v268 = ++v98;
        }
        else if (*(unsigned char *)(a2 + 169))
        {
          sub_100503184(*(void *)(a1 + 232), (uint64_t)v97);
        }
        else if (*(unsigned char *)(a2 + 170))
        {
          v268 = (char *)v18;
          id v98 = (char *)v18;
        }
      }
      if (v98 >= v94 || (unint64_t)v98 <= sub_10029C7A0(a1, v18))
      {
LABEL_236:
        uint64_t v119 = (uint64_t)v97;
LABEL_237:
        if (v119)
        {
LABEL_238:
          v255 = (void *)v119;
          if (*((void *)&v285[0] + 1) + *(void *)&v285[0] > (unint64_t)v268
            && v268 == (char *)(*((void *)&v285[0] + 1) + *(void *)&v285[0] - 1))
          {
            ++v268;
          }
        }
        else
        {
LABEL_244:
          v255 = 0;
        }
        goto LABEL_245;
      }
      if (sub_10029C834(a1, &v268, v285))
      {
        uint64_t v99 = *(void *)(a1 + 64);
        v100 = v268;
        uint64_t v101 = *(unsigned __int16 *)(v99 + 2 * (void)sub_10029CC70(a1, v268));
        unsigned __int8 v102 = sub_1001CA284(v101);
        if (v101 == 8232) {
          char v103 = 1;
        }
        else {
          char v103 = v102;
        }
        if ((v103 & 1) == 0)
        {
          if (v100 < v94)
          {
            while (sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v100)))
            {
              unsigned __int8 v104 = sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v100));
              uint64_t v105 = v100 + 1;
              if (v100 + 1 >= v94) {
                char v106 = 1;
              }
              else {
                char v106 = v104;
              }
              if ((v106 & 1) == 0
                && (sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v100 + 2)) & 1) == 0)
              {
                v268 = v100;
                uint64_t v174 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v100 + 2);
                unsigned int v175 = sub_1001CA284(v174) ^ 1;
                if (v174 == 8232) {
                  LOBYTE(v175) = 0;
                }
                if ((v175 & 1) == 0)
                {
                  char v107 = 0;
                  int v108 = 0;
                  ++v100;
                  goto LABEL_175;
                }
                while (1)
                {
LABEL_228:
                  while (1)
                  {
                    uint64_t v118 = sub_10029CC70(a1, v268);
                    if ((unint64_t)v118 <= v18) {
                      break;
                    }
                    v268 = v118;
                    uint64_t v119 = (uint64_t)v97;
                    if (sub_10029C834(a1, &v268, 0)) {
                      goto LABEL_237;
                    }
                  }
                  v268 = v59;
                  if (!*(unsigned char *)(a2 + 169)) {
                    goto LABEL_236;
                  }
                  uint64_t v120 = objc_opt_class();
                  unint64_t v121 = [*(id *)(a1 + 56) smartFieldAtCharIndex:sub_10029CC70(a1, v59) attributeKind:7 effectiveRange:v285];
                  uint64_t v119 = sub_1002469D0(v120, v121);

                  if (!v119) {
                    goto LABEL_244;
                  }
                  if (sub_100503120(*(void *)(a1 + 232), v119)
                    || (sub_100503184(*(void *)(a1 + 232), v119) & 1) == 0)
                  {
                    goto LABEL_238;
                  }
                  id v97 = (void *)v119;
                }
              }
              ++v100;
              if (v94 == v105)
              {
                v100 = v94;
                break;
              }
            }
          }
          char v107 = 0;
          int v108 = 0;
LABEL_175:
          v268 = v100;
          goto LABEL_221;
        }
        goto LABEL_191;
      }
      v100 = v268;
      unint64_t v109 = sub_10029C7A0(a1, (unint64_t)v268);
      unint64_t v110 = v109;
      *(void *)buf = v109;
      if (v109 >= *(void *)&v285[0]
        && v109 - *(void *)&v285[0] < *((void *)&v285[0] + 1)
        && *(_WORD *)(*(void *)(a1 + 64) + 2 * v109) == 8209)
      {
        unint64_t v110 = v109 + 1;
        *(void *)buf = v109 + 1;
      }
      if (v110 < (unint64_t)v94)
      {
        if (!sub_10029C834(a1, (char **)buf, 0)) {
          goto LABEL_185;
        }
        unint64_t v110 = *(void *)buf;
      }
      if ((char *)v110 == v94
        && sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v100)))
      {
LABEL_185:
        v111 = v100;
        if (v100 < v94)
        {
          v111 = v100;
          while (sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v111)))
          {
            if (v94 == ++v111) {
              goto LABEL_202;
            }
          }
        }
        v284[0] = v111;
        if (v111 != v94)
        {
          if (!sub_10029C834(a1, v284, 0))
          {
            int v108 = 1;
            goto LABEL_203;
          }
          CGRect v94 = v284[0];
        }
LABEL_202:
        int v108 = 0;
        v268 = v94;
        v100 = v94;
LABEL_203:
        char v107 = 0;
        goto LABEL_221;
      }
      if (v256)
      {
LABEL_191:
        char v107 = 0;
        int v108 = 0;
LABEL_221:
        if ((v107 & 1) != 0 || (v108 & 1) != 0 || (id v117 = sub_10029CC70(a1, v100)) == 0 || v117 >= v100)
        {
          if (v108) {
            goto LABEL_228;
          }
        }
        else if ((sub_10029C834(a1, &v268, 0) & 1) == 0)
        {
          goto LABEL_228;
        }
        goto LABEL_236;
      }
      double v114 = 0.0;
      if (v18 < (unint64_t)v100)
      {
        unint64_t v115 = v18;
        do
          double v114 = v114 + sub_1001CAA28(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v115++));
        while (v114 < 1.0 && v115 < (unint64_t)v100);
      }
      if (v110 < (unint64_t)v94)
      {
        while (sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v110)))
        {
          if (v94 == (char *)++v110)
          {
            unint64_t v110 = (unint64_t)v94;
            break;
          }
        }
      }
      v284[0] = (char *)v110;
      if (v114 < 1.0)
      {
LABEL_216:
        char v107 = 0;
        int v108 = 1;
        goto LABEL_221;
      }
      if ((char *)v110 != v94)
      {
        if (!sub_10029C834(a1, v284, 0)) {
          goto LABEL_216;
        }
        CGRect v94 = v284[0];
      }
      v268 = v94;
      char v107 = 1;
      sub_10015DF24(v16, 1);
      int v108 = 0;
      v100 = v94;
      goto LABEL_221;
    }
    id v39 = (const __CTTypesetter *)sub_10029456C(a1);
    double v40 = v267;
    CFIndex v41 = CTTypesetterSuggestClusterBreakWithOffset(v39, v18, width, v267);
    unsigned int v42 = (char *)(v41 + v18);
    v268 = (char *)(v41 + v18);
    unint64_t v43 = *(void *)(a1 + 48);
    if (v41 + v18 > v43)
    {
      unsigned int v44 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8218);
      }
      uint64_t v45 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v44;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)";
        __int16 v270 = 2082;
        v271 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v272 = 1024;
        int v273 = 1388;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v45, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad endCharIndex", buf, 0x22u);
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8238);
      }
      uint64_t v46 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_ERROR))
      {
        id v112 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v44;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v112;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v46, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      uint64_t v47 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      uint64_t v48 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v47 file:v48 lineNumber:1388 isFatal:0 description:"Bad endCharIndex"];

      unint64_t v43 = *(void *)(a1 + 48);
    }
    if ((unint64_t)v42 >= v43) {
      goto LABEL_137;
    }
    uint64_t v49 = objc_opt_class();
    uint64_t v50 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v42 attributeKind:7 effectiveRange:0];
    uint64_t v51 = sub_1002469D0(v49, v50);

    if (v51) {
      goto LABEL_84;
    }
    if (v42)
    {
      int v83 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42 - 2);
      unsigned __int8 v84 = sub_1001CA284(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42 - 2));
      char v85 = v83 == 8232 ? 1 : v84;
      if (v85) {
        goto LABEL_138;
      }
    }
    if (sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42)))
    {
      CGAffineTransform v86 = (char *)(v18 + 1 + v41);
      while (1)
      {
        unsigned int v42 = v86;
        unint64_t v87 = *(void *)(a1 + 48);
        if ((unint64_t)v42 >= v87) {
          break;
        }
        unsigned __int8 v88 = sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42));
        CGAffineTransform v86 = v42 + 1;
        if ((v88 & 1) == 0)
        {
          unint64_t v87 = *(void *)(a1 + 48);
          break;
        }
      }
      v268 = v42;
      if ((unint64_t)v42 >= v87) {
        goto LABEL_137;
      }
      int v89 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42);
      unsigned int v90 = sub_1001CA284(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42)) ^ 1;
      if (v89 == 8232) {
        LOBYTE(v90) = 0;
      }
      if (v90)
      {
LABEL_137:
        if (!v42) {
          goto LABEL_269;
        }
LABEL_138:
        int v91 = 0;
      }
      else
      {
        int v91 = 0;
        v268 = ++v42;
      }
LABEL_139:
      uint64_t v92 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v42 - 2);
      if (qword_1016A95A8 != -1) {
        dispatch_once(&qword_1016A95A8, &stru_1014E8FF0);
      }
      if ((v91 & ([(id)qword_1016A95A0 characterIsMember:v92] ^ 1)) != 1) {
        goto LABEL_259;
      }
      goto LABEL_142;
    }
    if (v42)
    {
      int v91 = 1;
      goto LABEL_139;
    }
LABEL_142:
    *(void *)buf = v18;
    *(void *)&buf[8] = &v42[-v18];
    int v93 = sub_10029D448(a1, (NSRange *)buf, *(uint64_t *)&v260, v16, width, v40);
    if (v93 == 1)
    {
      sub_10015D380(v16, 1);
      unsigned int v42 = (char *)(*(void *)&buf[8] + *(void *)buf);
      v268 = (char *)(*(void *)&buf[8] + *(void *)buf);
    }
    else if (v93 == -1)
    {
      goto LABEL_84;
    }
LABEL_259:
    if ((unint64_t)v42 > *(void *)(a1 + 48))
    {
      unsigned int v128 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8258);
      }
      unint64_t v129 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v129, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v128;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)";
        __int16 v270 = 2082;
        v271 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v272 = 1024;
        int v273 = 1450;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v129, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad localEndCharIndex", buf, 0x22u);
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8278);
      }
      v130 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v130, OS_LOG_TYPE_ERROR))
      {
        id v170 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v128;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v170;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v130, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      v131 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      __int16 v132 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v131 file:v132 lineNumber:1450 isFatal:0 description:"Bad localEndCharIndex"];
    }
LABEL_269:
    if ((char *)v18 == v42)
    {
      if (!*(void *)(a1 + 48) || !*(unsigned char *)(a2 + 169))
      {
LABEL_278:
        double v135 = v266;
        double v134 = v267;
        sub_10029C558(v267, a1, *(uint64_t *)&v260, v16, 0);
        goto LABEL_279;
      }
      v133 = [(char *)[*(id *)(a1 + 56) charIndexMappedFromStorage:sub_1001CB3C4((unint64_t)[*(id *)(a1 + 56) charIndexMappedToStorage:v18], *(void **)(a1 + 56))]
      unsigned int v42 = v133;
      v268 = v133;
      if (*(_WORD *)(*(void *)(a1 + 232) + 72)
        && v133
        && v133 == (char *)(*(void *)(a1 + 48) - 1)
        && *(_WORD *)(*(void *)(a1 + 64) + 2 * (void)v133 - 2) != 8232)
      {
        unsigned int v42 = v133 + 1;
        v268 = v133 + 1;
      }
    }
    if ((char *)v18 == v42) {
      goto LABEL_278;
    }
    v138 = (char *)[*(id *)(a1 + 56) charIndexMappedToStorage:v42];
    v139 = &v138[-*(void *)v16];
    if (v138 == *(char **)v16)
    {
      unsigned int v140 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8298);
      }
      v141 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v141, OS_LOG_TYPE_ERROR))
      {
        unint64_t v171 = *(void *)(a1 + 48);
        if ((unint64_t)v42 >= v171)
        {
          unsigned int v172 = 0;
        }
        else
        {
          v253 = [*(id *)(a1 + 56) string];
          unsigned int v172 = [v253 characterAtIndex:v42];
        }
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v140;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)";
        __int16 v270 = 2082;
        v271 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v272 = 1024;
        int v273 = 1503;
        __int16 v274 = 1024;
        LODWORD(v275) = v172;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v141, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to map end of line to a positive index: U+%x", buf, 0x28u);
        if ((unint64_t)v42 < v171) {
      }
        }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E82B8);
      }
      v142 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v142, OS_LOG_TYPE_ERROR))
      {
        id v173 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v140;
        *(_WORD *)&buf[8] = 2114;
        *(void *)&buf[10] = v173;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v142, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      v143 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      v144 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      v145 = v268;
      unint64_t v146 = *(void *)(a1 + 48);
      if ((unint64_t)v268 >= v146)
      {
        id v147 = 0;
      }
      else
      {
        v254 = [*(id *)(a1 + 56) string];
        id v147 = [v254 characterAtIndex:v145];
      }
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v143, v144, 1503, 0, "Failed to map end of line to a positive index: U+%x", v147);
      if ((unint64_t)v145 < v146) {
    }
      }
    *(void *)(v16 + _Block_object_dispose(&STACK[0x360], 8) = v139;
    uint64_t v148 = *(void *)(a2 + 40);
    double v135 = v266;
    double v134 = v267;
    sub_10015DDCC(v16, v267, v266);
    uint64_t v149 = *(void *)(a2 + 64);
    int v150 = *(unsigned __int8 *)(a2 + 169);
    BOOL v151 = sub_10015CBE0(v16, *(void *)(a2 + 176));
    BOOL v153 = (v149 & 0x10000) == 0 || v150 == 0;
    if (!v151 && v153)
    {
      sub_10029DEDC(a1, v16, *(uint64_t *)&v260, (v148 & 0xC) != 0);
      if (!v150 && sub_1002A0A58(a1, v16, v18, (unint64_t)v268))
      {
        double v154 = sub_100158764(v16);
        CGFloat v156 = v155;
        CGFloat v158 = v157;
        CGFloat v160 = v159;
        v293.origin.double x = sub_100158EB4((unint64_t *)v16, 1);
        v293.origin.double y = v161;
        v293.size.double width = v162;
        v293.size.double height = v163;
        v290.origin.double x = v154;
        v290.origin.double y = v156;
        v290.size.double width = v158;
        v290.size.double height = v160;
        CGRect v291 = CGRectUnion(v290, v293);
        CGFloat v164 = *(double *)(v16 + 40);
        CGFloat v165 = *(double *)(v16 + 48);
        CGFloat v166 = *(double *)(v16 + 56);
        CGFloat v167 = *(double *)(v16 + 64);
        double v168 = CGRectGetWidth(v291);
        double v169 = *(double *)(a1 + 248);
        v292.origin.double x = v164;
        v292.origin.double y = v165;
        v292.size.double width = v166;
        v292.size.double height = v167;
        if (v168 - v169 > CGRectGetWidth(v292) + 0.25)
        {
          v268 = (char *)v18;
          *(void *)(v16 + _Block_object_dispose(&STACK[0x360], 8) = 0;
          if ((v149 & 0x10000) == 0) {
            sub_10029C558(v134, a1, *(uint64_t *)&v260, v16, 0);
          }
        }
      }
    }
LABEL_279:
    if ((sub_10050258C(*(void *)(a1 + 232), v16, v135 - v134) & 1) == 0) {
      break;
    }
    if (v256 >= 2) {
      goto LABEL_408;
    }
LABEL_286:
    ;
  }
  int v136 = *(unsigned __int8 *)(v16 + 25) >> 7;
  if (!*(unsigned char *)(a1 + 88)) {
    int v136 = 0;
  }
  v137 = v255;
  if (v256 <= 1 && v136) {
    goto LABEL_286;
  }
  if (!v136) {
    goto LABEL_413;
  }
LABEL_408:
  if (qword_101719A68 != -1) {
    dispatch_once(&qword_101719A68, &stru_1014E82D8);
  }
  v249 = off_10166B498;
  if (os_log_type_enabled((os_log_t)v249, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = 3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v249, OS_LOG_TYPE_INFO, "Line not cut correctly, but maximum number of tries (%lu) exceeded.", buf, 0xCu);
  }

  v137 = v255;
LABEL_413:

  CFStringRef v34 = v268;
LABEL_326:
  *(void *)(v16 + _Block_object_dispose(&STACK[0x360], 8) = (char *)[*(id *)(a1 + 56) charIndexMappedToStorage:v34] - *(void *)v16;
  uint64_t v176 = (uint64_t)&v34[-v18];
  if ((unint64_t)v34 <= v18)
  {
    unsigned __int16 v177 = 0;
    *(void *)(a2 + 240) = 0;
  }
  else
  {
    *(void *)(a2 + 240) = [*(id *)(a1 + 56) charIndexMappedToStorage:v34 - 1];
    unsigned __int16 v177 = (unsigned __int16)[*(id *)(a1 + 56) characterAtIndex:v34 - 1];
  }
  *(_WORD *)(a2 + 232) = v177;
  if ((unint64_t)v34 >= *(void *)(a1 + 48)) {
    v176 -= *(_WORD *)(*(void *)(a1 + 232) + 72) != 0;
  }
  sub_1002A0B48(a1, a2, (char *)v18, v176);
  if ((*(unsigned char *)(a2 + 66) & 1) == 0) {
    sub_10015F000((id)v16);
  }
  double v178 = sub_10050288C(*(void *)(a1 + 232), v16);
  double v263 = 0.0;
  double v264 = 0.0;
  sub_1002A0D64(a1, a2, &v264, &v263);
  v179.recordID.super.isa = (Class)sub_100502F34(*(void **)(a1 + 232), (uint64_t *)v16);
  double v180 = v264;
  if (v178 >= v264) {
    double v180 = v178;
  }
  if (v180 > 0.0)
  {
    double v181 = *(double *)(v16 + 144);
    double v182 = v180 - (*(double *)(a2 + 200) + v181);
    if (v182 > 0.0)
    {
      *(double *)(v16 + 144) = v181 + v182;
      Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v288 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v179.recordID, v179.recordType);
      *(void *)(v16 + 72) = v183;
      *(void *)(v16 + 80) = v184;
      *(void *)(v16 + 8_Block_object_dispose(&STACK[0x360], 8) = v185;
      *(void *)(v16 + 96) = v186;
      Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v179 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v288.recordID, v288.recordType);
      *(void *)(v16 + 40) = v187;
      *(void *)(v16 + 4_Block_object_dispose(&STACK[0x360], 8) = v188;
      *(void *)(v16 + 56) = v189;
      *(void *)(v16 + 64) = v190;
    }
  }
  double v191 = v263;
  if (v263 > 0.0)
  {
    double v192 = *(double *)(v16 + 136);
    double v193 = *(double *)(v16 + 152);
    double v194 = v192 + v193;
    double v195 = v263 + v192;
    *(double *)(v16 + 136) = v195;
    double v196 = fmax(v193 - v191, 0.0);
    *(double *)(v16 + 152) = v196;
    if (v195 + v196 - v194 > 0.0)
    {
      Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v289 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v179.recordID, v179.recordType);
      *(void *)(v16 + 72) = v197;
      *(void *)(v16 + 80) = v198;
      *(void *)(v16 + 8_Block_object_dispose(&STACK[0x360], 8) = v199;
      *(void *)(v16 + 96) = v200;
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v289.recordID, v289.recordType);
      *(void *)(v16 + 40) = v201;
      *(void *)(v16 + 4_Block_object_dispose(&STACK[0x360], 8) = v202;
      *(void *)(v16 + 56) = v203;
      *(void *)(v16 + 64) = v204;
    }
  }
  sub_1002A15AC(a1, *(uint64_t *)&v260, v16);
  v205 = &xmmword_101176F48;
  if (*(uint64_t *)(v16 + 24) >= 0) {
    v205 = (long long *)v16;
  }
  uint64_t v207 = *(void *)v205;
  uint64_t v206 = *((void *)v205 + 1);
  v208 = (char *)[*(id *)(a1 + 16) range];
  if ((char *)(v207 + v206) == &v208[v209]) {
    *(void *)(v16 + 24) |= 0x200000uLL;
  }
  if (*(double *)(v16 + 144) == -3.40282347e38)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E82F8);
    }
    v210 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v210, OS_LOG_TYPE_ERROR)) {
      sub_101095E2C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8318);
    }
    v211 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v211, OS_LOG_TYPE_ERROR))
    {
      v212 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v212);
    }

    v213 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
    v214 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v213 file:v214 lineNumber:1606 isFatal:0 description:"Bad leading"];
  }
  if (!sub_100152BC0(v16) && (*(unsigned char *)(a2 + 66) & 1) == 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8338);
    }
    v215 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v215, OS_LOG_TYPE_ERROR)) {
      sub_101095DA4();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8358);
    }
    v216 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v216, OS_LOG_TYPE_ERROR))
    {
      v217 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v217);
    }

    v218 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
    v219 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v218 file:v219 lineNumber:1607 isFatal:0 description:"Bad lineRef count"];
  }
  if ((unint64_t)v34 > *(void *)(a1 + 48))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8378);
    }
    v220 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v220, OS_LOG_TYPE_ERROR)) {
      sub_101095D1C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8398);
    }
    v221 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v221, OS_LOG_TYPE_ERROR))
    {
      v222 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v222);
    }

    v223 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
    v224 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v223 file:v224 lineNumber:1608 isFatal:0 description:"Bad endCharIndex"];
  }
  uint64_t v225 = objc_opt_class();
  v226 = sub_1002469D0(v225, *(void **)(a1 + 56));
  uint64_t v227 = *(void *)(v16 + 24);
  if (!v18)
  {
    v228 = &xmmword_101176F48;
    if (v227 >= 0) {
      v228 = (long long *)v16;
    }
    if (*(void *)v228 != *(void *)(a1 + 32))
    {
      unsigned int v229 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E83B8);
      }
      v230 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v230, OS_LOG_TYPE_ERROR))
      {
        v250 = (NSRange *)&xmmword_101176F48;
        if (*(uint64_t *)(v16 + 24) >= 0) {
          v250 = (NSRange *)v16;
        }
        NSStringFromRange(*v250);
        id widtha = (id)objc_claimAutoreleasedReturnValue();
        NSStringFromRange(*(NSRange *)(a1 + 32));
        id v262 = (id)objc_claimAutoreleasedReturnValue();
        v287.NSUInteger location = [*(id *)(a1 + 56) charRangeRemappedFromStorage:*(void *)(a1 + 32) *(void *)(a1 + 40)];
        NSStringFromRange(v287);
        id v251 = (id)objc_claimAutoreleasedReturnValue();
        id v257 = [v226 spaceCharIndexCount];
        id v252 = [v226 bidiCharIndexCount];
        *(_DWORD *)buf = 67111170;
        *(_DWORD *)&uint8_t buf[4] = v229;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)";
        __int16 v270 = 2082;
        v271 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
        __int16 v272 = 1024;
        int v273 = 1623;
        __int16 v274 = 2114;
        id v275 = widtha;
        __int16 v276 = 2114;
        id v277 = v262;
        __int16 v278 = 2114;
        id v279 = v251;
        __int16 v280 = 2048;
        id v281 = v257;
        __int16 v282 = 2048;
        id v283 = v252;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v230, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d First line should lie at the beginning of the paragraph: %{public}@ vs %{public}@ (%{public}@); ruby: %lu, bidi: %lu",
          buf,
          0x54u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E83D8);
      }
      v231 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v231, OS_LOG_TYPE_ERROR))
      {
        v232 = +[CRLAssertionHandler packedBacktraceString];
        sub_10107C04C(v232);
      }

      v261 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      v233 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      v234 = (NSRange *)&xmmword_101176F48;
      if (*(uint64_t *)(v16 + 24) >= 0) {
        v234 = (NSRange *)v16;
      }
      v235 = NSStringFromRange(*v234);
      v236 = NSStringFromRange(*(NSRange *)(a1 + 32));
      v286.NSUInteger location = [*(id *)(a1 + 56) charRangeRemappedFromStorage:*(void *)(a1 + 32) *(void *)(a1 + 40)];
      v237 = NSStringFromRange(v286);
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v261, v233, 1623, 0, "First line should lie at the beginning of the paragraph: %{public}@ vs %{public}@ (%{public}@); ruby: %lu, bidi: %lu",
        v235,
        v236,
        v237,
        [v226 spaceCharIndexCount],
        [v226 bidiCharIndexCount]);

      uint64_t v227 = *(void *)(v16 + 24);
    }
  }
  if (v34 == *(char **)(a1 + 48))
  {
    v238 = &xmmword_101176F48;
    if (v227 >= 0) {
      v238 = (long long *)v16;
    }
    if (*(void *)v238 + *((void *)v238 + 1) != *(void *)(a1 + 40) + *(void *)(a1 + 32))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E83F8);
      }
      v239 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v239, OS_LOG_TYPE_ERROR)) {
        sub_101095C94();
      }

      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8418);
      }
      v240 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v240, OS_LOG_TYPE_ERROR))
      {
        v241 = +[CRLAssertionHandler packedBacktraceString];
        sub_10107C04C(v241);
      }

      v242 = +[NSString stringWithUTF8String:"CRLWPCharIndex CRLWPCoreTextTypesetter::layOutLine(CRLWPTypesetterParamBlock *const)"];
      v243 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v242 file:v243 lineNumber:1624 isFatal:0 description:"Last line should reach the end of the paragraph"];

      uint64_t v227 = *(void *)(v16 + 24);
    }
  }
  BOOL v244 = v227 < 0;
  v245 = &xmmword_101176F48;
  if (!v244) {
    v245 = (long long *)v16;
  }
  uint64_t v247 = *(void *)v245;
  uint64_t v246 = *((void *)v245 + 1);

  return v247 + v246;
}

void sub_10029ACEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029B06C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B0B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B0F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B138(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B17C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B1C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029B204(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v7 = *a2;
  uint64_t v8 = (void)a2[5] & 0x14;
  uint64_t v9 = *(void *)(*((void *)a2 + 28) + 24);
  double v10 = a2[1];
  double v11 = *(double *)(*(void *)a2 + 464);
  v25.origin.double y = *(CGFloat *)(*(void *)a2 + 472);
  v25.size.double width = *(CGFloat *)(*(void *)a2 + 480);
  v25.size.double height = *(CGFloat *)(*(void *)a2 + 488);
  v25.origin.double x = v11;
  double MaxX = CGRectGetMaxX(v25);
  double v13 = a2[1];
  double v14 = a2[3];
  if ((v9 & 0x1000) != 0)
  {
    if (!*(unsigned char *)(*(void *)&v7 + 348)
      && *(unsigned char *)(*(void *)&v7 + 456)
      && !*(unsigned char *)(*(void *)&v7 + 457))
    {
      *a4 = v14 - *(double *)(*(void *)&v7 + 232);
    }
    if (!*((unsigned char *)a2 + 170))
    {
      double v17 = fmax(fmin(*a3, *a4 + -18.0), 0.0);
      *a3 = v17;
      if (v8 != 4) {
        *a4 = fmin(fmax(*a4, v17 + 18.0), v14);
      }
      goto LABEL_17;
    }
LABEL_8:
    int v16 = 0;
    goto LABEL_18;
  }
  if (!*(unsigned char *)(*(void *)&v7 + 348) && *(unsigned char *)(*(void *)&v7 + 456) && !*(unsigned char *)(*(void *)&v7 + 457)) {
    *a3 = *(double *)(*(void *)&v7 + 232);
  }
  if (*((unsigned char *)a2 + 170)) {
    goto LABEL_8;
  }
  double v15 = fmin(fmax(*a4, *a3 + 18.0), v14);
  *a4 = v15;
  if (v8 != 4) {
    *a3 = fmax(fmin(*a3, v15 + -18.0), 0.0);
  }
LABEL_17:
  int v16 = 1;
LABEL_18:
  double v18 = v11 - v10;
  double v19 = MaxX - v13;
  double v20 = *(double *)(*(void *)&v7 + 240);
  if (*(unsigned char *)(*(void *)&v7 + 350))
  {
    double v21 = *a4 - v20;
    *a4 = v21;
    if (!v16) {
      goto LABEL_31;
    }
    double v22 = *a3;
    if (v8 != 4)
    {
      *a4 = fmin(fmax(v21, v22 + 18.0), v14);
      goto LABEL_31;
    }
LABEL_24:
    if (v18 >= v22) {
      double v23 = v11 - v10;
    }
    else {
      double v23 = v22;
    }
    *a3 = v23;
    if (*a4 < v19) {
      double v19 = *a4;
    }
    *a4 = v19;
    goto LABEL_36;
  }
  double v22 = v20 + *a3;
  *a3 = v22;
  if (v16)
  {
    if (v8 == 4) {
      goto LABEL_24;
    }
    *a3 = fmax(fmin(v22, *a4 + -18.0), 0.0);
  }
LABEL_31:
  double v24 = *a3;
  if (v18 >= *a3) {
    double v24 = v11 - v10;
  }
  *a3 = v24;
  if (*a4 < v19) {
    double v19 = *a4;
  }
  *a4 = v19;
  if (v8 == 4) {
LABEL_36:
  }
    *a4 = *a3 + a2[6];
}

void sub_10029B438(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, double *a5, double *a6)
{
  uint64_t v9 = *(void *)a2;
  double v10 = sub_100061D78(*(void *)a2);
  unint64_t v11 = (unint64_t)[v10 labelTypeForLevel:*(void *)(v9 + 208)];

  uint64_t v12 = sub_100061D78(v9);
  double v13 = [v12 valueForProperty:54];

  unsigned __int8 v102 = v13;
  if (v13) {
    [v13 objectAtIndexedSubscript:*(void *)(v9 + 208)];
  }
  else {
  uint64_t v105 = +[CRLWPListLabelGeometry listLabelGeometry];
  }
  unsigned __int8 v104 = [*(id *)(a1 + 56) characterStyleAtCharIndex:a3 effectiveRange:0];
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 2) {
    goto LABEL_99;
  }
  uint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
  double v14 = sub_100061D78(v9);
  double v15 = [v14 valueForProperty:57];

  id v97 = v15;
  if (v15)
  {
    int v16 = [v15 objectAtIndexedSubscript:*(void *)(v9 + 208)];
    uint64_t v17 = (int)[v16 intValue];
  }
  else
  {
    uint64_t v17 = +[CRLWPListStyle defaultLabelNumberType];
  }
  if (v11 == 2)
  {
    double v18 = sub_100061D78(v9);
    double v19 = [v18 valueForProperty:59];

    if (v19) {
      [v19 objectAtIndexedSubscript:*(void *)(v9 + 208)];
    }
    else {
    char v103 = +[CRLWPListStyle defaultLabelString];
    }
    BOOL v93 = *(unsigned char *)(a1 + 27) != 0;

    BOOL v94 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 27)) {
      BOOL v94 = sub_1001CF4A8(v17);
    }
    else {
      BOOL v94 = 1;
    }
    sub_100189D50(v109, v9 + 24);
    char v103 = sub_1002A1F50(a1, (void *)v9, v20, *(void *)(v9 + 208), 0, &v110);
    sub_100189C94(v109);
    BOOL v93 = 0;
  }
  if (!v103)
  {

    goto LABEL_99;
  }
  unint64_t v92 = v17;
  uint64_t v21 = objc_opt_class();
  double v22 = sub_100061D78(v9);
  double v23 = [v22 valueForProperty:9];
  v96 = sub_1002469D0(v21, v23);

  double v24 = sub_100061D48(v9);
  CGRect v25 = sub_100061D58(v9);
  long long v26 = (const void *)sub_1001CE814(v24, v104, v96, v105, (double)(unint64_t)[v25 scaleTextPercent]);

  long long v27 = sub_100061D78(v9);
  v116[0] = v27;
  long long v28 = sub_100061D48(v9);
  v116[1] = v28;
  uint64_t v29 = +[NSArray arrayWithObjects:v116 count:2];
  __int16 v30 = sub_1001CD36C(v29, 0x35uLL);

  if (!v30)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8438);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096168();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8458);
    }
    BOOL v31 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v31, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v32 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pCalculateListLabel(const CRLWPTypesetterParamBlock *const, const CRLWPCharIndex, BOOL &, CGFloat &, CGFloat &) const"];
    double v33 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v32, v33, 2006, 0, "Expect label color, or paragraph color as the default.");

    __int16 v30 = +[CRLColor magentaColor];
  }
  CFStringRef v34 = sub_100061DC4(v9);
  BOOL v35 = v34 == 0;

  if (!v35)
  {
    uint64_t v36 = sub_100061DC4(v9);

    __int16 v30 = (void *)v36;
  }
  id v37 = [v30 CGColor];
  char v108 = *(unsigned char *)(v9 + 350);
  settings.spec = kCTParagraphStyleSpecifierBaseWritingDirection;
  settings.valuedouble Size = 1;
  settings.value = &v108;
  CTParagraphStyleRef v38 = CTParagraphStyleCreate(&settings, 1uLL);
  v113[0] = kCTFontAttributeName;
  v113[1] = kCTForegroundColorAttributeName;
  v114[0] = v26;
  v114[1] = v37;
  v113[2] = kCTParagraphStyleAttributeName;
  v114[2] = v38;
  uint64_t v95 = +[NSDictionary dictionaryWithObjects:v114 forKeys:v113 count:3];
  CFRelease(v38);
  CFRelease(v26);
  CFAttributedStringRef attrString = (CFAttributedStringRef)[objc_alloc((Class)NSMutableAttributedString) initWithString:v103 attributes:v95];
  if (v11 != 3) {
    goto LABEL_71;
  }
  id v39 = (char *)[v103 length];
  unint64_t v40 = (unint64_t)v39;
  unint64_t v41 = (unint64_t)(v39 - 2);
  NSUInteger v42 = (NSUInteger)(v94 ? v39 - 2 : v39);
  if (!*(unsigned char *)(a1 + 27)) {
    goto LABEL_71;
  }
  unint64_t v43 = sub_100061D48(v9);
  unsigned int v44 = (const __CTFont *)sub_1001CDA80(0, v43, 0x64uLL);

  double v45 = sub_1001C9FE8(v44);
  CFRelease(v44);
  id v91 = [(__CFAttributedString *)attrString mutableCopy];
  if (v42) {
    sub_1005039F0(attrString, v94, v42);
  }
  if (!v94)
  {
    if (sub_1001CF4B4(v92))
    {
      -[__CFAttributedString addAttribute:value:range:](attrString, "addAttribute:value:range:", kCTVerticalFormsAttributeName, &__kCFBooleanTrue, v94, v40);
    }
    else
    {
      id v53 = [(__CFAttributedString *)attrString mutableCopy];
      if (v40 > v94)
      {
        uint64_t v54 = 0;
        do
          [v53 replaceCharactersInRange:v54++ withString:@"0"];
        while (v40 != v54);
      }
      long long v55 = CTLineCreateWithAttributedString((CFAttributedStringRef)v53);
      long long v56 = v55;
      if (v55)
      {
        if (CTLineGetTypographicBounds(v55, 0, 0, 0) >= v45 || v42 >= 6)
        {
          -[__CFAttributedString addAttribute:value:range:](attrString, "addAttribute:value:range:", kCTVerticalFormsAttributeName, &__kCFBooleanTrue, v94, v40);
          sub_1002A2224(attrString, v94, v40);
        }
        else
        {
          BOOL v93 = 1;
        }
        CFRelease(v56);
      }
      else
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8478);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010960D4();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E8498);
        }
        float v57 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v57, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        float v58 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pCalculateListLabel(const CRLWPTypesetterParamBlock *const, const CRLWPCharIndex, BOOL &, CGFloat &, CGFloat &) const"];
        id v59 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v58, v59, 2115, 0, "invalid nil value for '%{public}s'", "tmpLineRef");
      }
    }

LABEL_71:
    CTLineRef v48 = CTLineCreateWithAttributedString(attrString);
    goto LABEL_72;
  }
  -[__CFAttributedString addAttribute:value:range:](attrString, "addAttribute:value:range:");
  if (v41 > 4)
  {
    CTLineRef v48 = 0;
    uint64_t v49 = attrString;
    CFAttributedStringRef attrString = (CFAttributedStringRef)v91;
    goto LABEL_48;
  }
  uint64_t v46 = +[NSNumber numberWithUnsignedInteger:v41];
  -[__CFAttributedString addAttribute:value:range:](attrString, "addAttribute:value:range:", kCTHorizontalInVerticalFormsAttributeName, v46, v94, v41);

  uint64_t v47 = CTLineCreateWithAttributedString(attrString);
  CTLineRef v48 = v47;
  if (!v47) {
    goto LABEL_49;
  }
  uint64_t v49 = CTLineGetGlyphRuns(v47);
  if ([v49 count] != (id)3)
  {
LABEL_48:

LABEL_49:
    -[__CFAttributedString addAttribute:value:range:](attrString, "addAttribute:value:range:", kCTVerticalFormsAttributeName, &__kCFBooleanTrue, v94, v41);
    sub_1002A2224(attrString, v94, v41);

    if (v48) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  uint64_t v50 = [v49 objectAtIndexedSubscript:1];

  ascent[0] = 0.0;
  CGFloat leading = 0.0;
  CGFloat descent = 0.0;
  v117.NSUInteger location = 0;
  v117.NSUInteger length = 0;
  double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v50, v117, ascent, &descent, &leading);
  if (TypographicBounds > ascent[0] + descent
    && vabdd_f64(TypographicBounds, ascent[0] + descent) >= (ascent[0] + descent) * 0.1)
  {
    CFRelease(v48);
    CFAttributedStringRef v52 = (const __CFAttributedString *)v91;

    CTLineRef v48 = 0;
    CFAttributedStringRef attrString = v52;
    goto LABEL_48;
  }

LABEL_72:
  [v105 baselineOffset];
  double v61 = v60;
  id v62 = [CRLWPListLabel alloc];
  double v63 = [(CRLWPListLabel *)v62 initWithType:v11 labelString:v103 textLine:v48 listNumber:v110 isTateChuYoko:v93 baselineOffset:v61];
  CFRelease(v48);

  if (v63)
  {
    uint64_t v64 = sub_100061D78(v9);
    v111[0] = v64;
    unint64_t v65 = sub_100061D48(v9);
    v111[1] = v65;
    long long v66 = +[NSArray arrayWithObjects:v111 count:2];
    float v67 = sub_1001CD36C(v66, 0x12uLL);

    float v68 = +[NSNull null];
    LODWORD(v64) = v67 == v68;

    if (v64)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E84B8);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10109604C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E84D8);
      }
      long long v69 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v69, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      double v70 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pCalculateListLabel(const CRLWPTypesetterParamBlock *const, const CRLWPCharIndex, BOOL &, CGFloat &, CGFloat &) const"];
      unsigned int v71 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v70 file:v71 lineNumber:2150 isFatal:0 description:"CRLWPResolvePropertyForStyles should not return NSNull."];
    }
    if (v67) {
      [(CRLWPListLabel *)v63 setShadow:v67];
    }
    uint64_t v72 = sub_100061D78(v9);
    unsigned int v73 = [v72 valueForProperty:56];

    double v74 = *(double *)(v9 + 232);
    uint64_t v75 = [v73 objectAtIndexedSubscript:*(void *)(v9 + 208)];
    [v75 crl_CGFloatValue];
    double v77 = v76;

    if (*(unsigned char *)(a1 + 27) && (id)[(CRLWPListLabel *)v63 labelType] == (id)1) {
      [(CRLWPListLabel *)v63 height];
    }
    else {
      [(CRLWPListLabel *)v63 width];
    }
    double v79 = v78;
    double v80 = *(double *)(a2 + 24);
    double v81 = *(double *)(a2 + 8);
    double v82 = *(double *)(v9 + 464);
    v118.origin.double y = *(CGFloat *)(v9 + 472);
    v118.size.double width = *(CGFloat *)(v9 + 480);
    v118.size.double height = *(CGFloat *)(v9 + 488);
    v118.origin.double x = v82;
    double MaxX = CGRectGetMaxX(v118);
    double v84 = v74 + v77;
    if (*(unsigned char *)(v9 + 350))
    {
      double v85 = MaxX;
      double v86 = *(double *)(a2 + 8);
      [(CRLWPListLabel *)v63 setIsLabelRTL:1];
      double v87 = v80 - (v85 - v86);
      double v88 = fmax(fmin(v84, v80 - *a5 + -20.0), v87);
      [(CRLWPListLabel *)v63 setLabelIndent:v88 - v87];
      double v89 = fmax(*(double *)(v9 + 232) + *(double *)(v9 + 240), v79 + v88);
      double v90 = *a6;
      if ((*(void *)(a2 + 40) & 0x14) != 4) {
        double v90 = v80;
      }
      *a6 = v90 - v89;
    }
    else
    {
      double v88 = fmax(fmin(v84, *a6 + -20.0), v82 - v81);
      [(CRLWPListLabel *)v63 setLabelIndent:v88 - (v82 - v81)];
      double v89 = fmax(*(double *)(v9 + 232) + *(double *)(v9 + 240), v79 + v88);
      *a5 = v89;
    }
    [(CRLWPListLabel *)v63 setLabelTypographicExtent:v89 - v88];
    sub_10015D3A0(*(void *)(a2 + 224), v63);
    if (*a5 > *a6 + -10.0)
    {
      *a4 = 0;
      if (*(unsigned char *)(a2 + 170))
      {
        if (*(void *)(a1 + 48)) {
          sub_10015D3A0(*(void *)(a2 + 224), 0);
        }
      }
    }
  }
LABEL_99:
}

void sub_10029C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_10029C558(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_10015CD20(a4);
  double v10 = sub_1002A3870(a1, v9, a3, a4);
  if (a5)
  {
    id v11 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
    CTFontRef v12 = CTFontCreateWithName(@"Helvetica", 25.1950798, 0);
    [v11 setObject:v12 forKeyedSubscript:kCTFontAttributeName];
    CFRelease(v12);
    CFAttributedStringRef v13 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:@"\n" attributes:v11];
    CTLineRef v14 = CTLineCreateWithAttributedString(v13);
    sub_1001BAA00((uint64_t)v19, v14, 0x7FFFFFFFFFFFFFFFLL, 0, 0, v10, 0.0);
    sub_10015275C(a4, (uint64_t)v19);
    uint64_t v15 = sub_1001BAAFC(v19);
    if (v14) {
      CFRelease(v14);
    }
    uint64_t v16 = *(void *)(a4 + 24);
    if (v16 < 0) {
      uint64_t v17 = &xmmword_101176F48;
    }
    else {
      uint64_t v17 = (long long *)a4;
    }
    if (*((void *)v17 + 1))
    {
      *(void *)(a4 + 24) = v16 | 0x800;
      sub_1002A46C0(0.0, v15, a3, a4, a5, 0);
    }

    unint64_t v18 = *(void *)(a4 + 24);
  }
  else
  {
    if (qword_1016A9598 != -1) {
      dispatch_once(&qword_1016A9598, &stru_1014E8858);
    }
    sub_1001BAA00((uint64_t)v19, (CFTypeRef)qword_1016A9590, 0x7FFFFFFFFFFFFFFFLL, 0, 0, v10, 0.0);
    sub_10015275C(a4, (uint64_t)v19);
    sub_1001BAAFC(v19);
    *(double *)(a4 + 240) = a1 + 0.0;
    unint64_t v18 = *(void *)(a4 + 24) & 0xFFFFFFFFFFFFF7FFLL;
    *(void *)(a4 + 24) = v18;
  }
  *(void *)(a4 + 24) = v18 | 0x4000;
}

void sub_10029C75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001BAAFC(va);
  _Unwind_Resume(a1);
}

unint64_t sub_10029C7A0(uint64_t a1, unint64_t a2)
{
  id v3 = sub_1005032C0(*(void *)(a1 + 232));
  if ((unint64_t)[v3 length] > a2)
  {
    unint64_t v4 = [v3 string];
    id v5 = [v4 rangeOfComposedCharacterSequenceAtIndex:a2];
    uint64_t v7 = v6;

    a2 = (unint64_t)v5 + v7;
  }

  return a2;
}

void sub_10029C814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10029C834(uint64_t a1, char **a2, long long *a3)
{
  uint64_t v6 = sub_10029CC70(a1, *a2);
  unint64_t v7 = (unint64_t)*a2;
  if (*a2 != *(char **)(a1 + 48))
  {
    uint64_t v9 = v6;
    long long v36 = xmmword_101176F48;
    uint64_t v10 = objc_opt_class();
    id v11 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v7 attributeKind:7 effectiveRange:&v36];
    CTFontRef v12 = sub_1002469D0(v10, v11);

    if (v12)
    {
      long long v35 = v36;
      id v13 = v12;
      CTLineRef v14 = v13;
      unint64_t v15 = v35;
      if (v7 + 1 == *((void *)&v35 + 1) + (void)v35)
      {
        unint64_t v7 = sub_10029C7A0(a1, v7);
        uint64_t v16 = objc_opt_class();
        uint64_t v17 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v7 attributeKind:7 effectiveRange:&v35];
        unint64_t v18 = sub_1002469D0(v16, v17);

        unint64_t v15 = v35;
      }
      else
      {
        unint64_t v18 = v13;
      }
      unint64_t v19 = v7;
      if (v18)
      {
        unint64_t v19 = v7;
        if (v7 == v15) {
          unint64_t v19 = sub_10029C7A0(a1, v15);
        }
      }
    }
    else
    {
      unint64_t v19 = v7;
    }
    long long v35 = xmmword_101176F48;
    uint64_t v20 = objc_opt_class();
    uint64_t v21 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v9 attributeKind:7 effectiveRange:&v35];
    double v22 = sub_1002469D0(v20, v21);

    if (!v22)
    {
LABEL_21:
      uint64_t v28 = sub_1002A5B98(a1, (unint64_t)v9);
      uint64_t v29 = sub_1002A5B98(a1, v19);
      if (a3) {
        *a3 = xmmword_101176F48;
      }
      unsigned __int8 v30 = sub_1001CA284(v28);
      if (v28 == 8232) {
        char v31 = 1;
      }
      else {
        char v31 = v30;
      }
      if ((v31 & 1) != 0
        || (sub_1001CA534(v28) & 1) == 0
        && (sub_1001CA668(v29) & 1) == 0
        && sub_1001CA910(v28, v29))
      {
        if (a3) {
          *a3 = v36;
        }
        if (!v12
          || sub_100503120(*(void *)(a1 + 232), (uint64_t)v12)
          || v7 <= (unint64_t)v36
          || v7 >= *((void *)&v36 + 1) + (void)v36)
        {
LABEL_33:
          *a2 = (char *)v7;
          uint64_t v8 = 1;
LABEL_44:

          return v8;
        }
      }
      else if (sub_1001CA378(v28) && (sub_1001CA378(v29) & 1) == 0)
      {
        unsigned __int8 v32 = sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v9));
        char v33 = v9 ? v32 : 1;
        if ((v33 & 1) == 0)
        {
          uint64_t v8 = 0;
          while (sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v9)))
          {
            if (sub_1001CA3D4(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * (void)v9))) {
              goto LABEL_33;
            }
            uint64_t v9 = sub_10029CC70(a1, v9);
            if (!v9) {
              goto LABEL_44;
            }
          }
        }
      }
      uint64_t v8 = 0;
      goto LABEL_44;
    }
    uint64_t v23 = v35;
    if (v9 == (char *)v35)
    {
      double v24 = sub_10029CC70(a1, v9);
      uint64_t v25 = objc_opt_class();
      long long v26 = [*(id *)(a1 + 56) smartFieldAtCharIndex:v24 attributeKind:7 effectiveRange:&v35];
      uint64_t v27 = sub_1002469D0(v25, v26);

      if (!v27)
      {
        double v22 = 0;
LABEL_20:
        unint64_t v7 = (unint64_t)v9;
        uint64_t v9 = v24;
        goto LABEL_21;
      }
      uint64_t v23 = v35;
      double v22 = (void *)v27;
    }
    else
    {
      double v24 = v9;
      uint64_t v9 = (char *)v7;
    }
    if (v24 + 1 == (char *)(*((void *)&v35 + 1) + v23))
    {
      unint64_t v7 = (unint64_t)v9;
      uint64_t v9 = sub_10029CC70(a1, v24);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  return 1;
}

void sub_10029CC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_10029CC70(uint64_t a1, char *a2)
{
  id v3 = sub_1005032C0(*(void *)(a1 + 232));
  unint64_t v4 = v3;
  if (a2)
  {
    id v5 = [v3 string];
    a2 = (char *)[v5 rangeOfComposedCharacterSequenceAtIndex:a2 - 1];
  }
  return a2;
}

void sub_10029CCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029CCF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029CD34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10029CD78(CFIndex *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + a3;
  if (a2 + a3 > (unint64_t)a1[6])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8558);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010961F0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8578);
    }
    unint64_t v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v8 = +[NSString stringWithUTF8String:"BOOL CRLWPCoreTextTypesetter::pCanBreakLineInRange(NSRange)"];
    uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:2351 isFatal:0 description:"Bad localMaxCharIndex"];
  }
  uint64_t v10 = sub_1002A252C();
  if ([v10 characterIsMember:*(unsigned __int16 *)(a1[8] + 2 * v6 - 2)])
  {
    uint64_t v11 = 1;
  }
  else
  {
    CTFontRef v12 = (void *)a1[27];
    if (!v12)
    {
      id v13 = objc_alloc_init((Class)NSMutableIndexSet);
      CTLineRef v14 = (__CFString *)[objc_alloc((Class)NSString) initWithCharactersNoCopy:a1[8] length:a1[6] freeWhenDone:0];
      v20.NSUInteger length = a1[6];
      v20.NSUInteger location = 0;
      unint64_t v15 = CFStringTokenizerCreate(0, v14, v20, 3uLL, 0);
      while (CFStringTokenizerAdvanceToNextToken(v15))
      {
        CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v15);
        [v13 addIndex:CurrentTokenRange.length + CurrentTokenRange.location - 1];
      }
      CFRelease(v15);
      unint64_t v18 = (void *)a1[27];
      uint64_t v17 = (void **)(a1 + 27);
      *uint64_t v17 = v13;

      CTFontRef v12 = *v17;
    }
    uint64_t v11 = [v12 intersectsIndexesInRange:a2, a3];
  }

  return v11;
}

void sub_10029D000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10029D054(uint64_t a1, CFIndex a2, CFIndex a3, uint64_t a4, double *a5, uint64_t a6)
{
  CTFontRef v12 = sub_1002A413C(a1, a2 + a3);
  id v13 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v12];
  CTLineRef v14 = [v13 attributes];
  sub_10015DE60(a6, v14, a4);

  unint64_t v15 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v12];
  uint64_t v16 = (const __CTFont *)[v15 ctFont];

  if ((a4 - 0x10000) >> 20)
  {
    CFIndex v18 = 1;
    LOWORD(v17) = a4;
  }
  else
  {
    unsigned int v17 = ((a4 + 67043328) >> 10) - 10240;
    characters[1] = a4 & 0x3FF | 0xDC00;
    CFIndex v18 = 2;
  }
  characters[0] = v17;
  CTFontGetGlyphsForCharacters(v16, characters, glyphs, v18);
  CTFontGetAdvancesForGlyphs(v16, kCTFontOrientationDefault, glyphs, &advances, 1);
  unint64_t v19 = (const __CTTypesetter *)sub_10029456C(a1);
  v33.NSUInteger location = a2;
  v33.NSUInteger length = a3;
  Line = CTTypesetterCreateLine(v19, v33);
  uint64_t v21 = Line;
  if (Line)
  {
    double TypographicBounds = CTLineGetTypographicBounds(Line, 0, 0, 0);
    TruncatedLine = CTLineCreateTruncatedLine(v21, *a5 - advances.width, kCTLineTruncationEnd, 0);
    double v24 = TruncatedLine;
    if (TruncatedLine)
    {
      double v25 = CTLineGetTypographicBounds(TruncatedLine, 0, 0, 0);
      *a5 = v25;
      CFRelease(v24);
    }
    else
    {
      double v25 = NAN;
    }
    CFRelease(v21);
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8978);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096278();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8998);
    }
    long long v26 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v27 = +[NSString stringWithUTF8String:"BOOL CRLWPCoreTextTypesetter::pRoomForHyphen(CFRange, UTF32Char, CGFloat &, CRLWPLineFragment *const)"];
    uint64_t v28 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v27 file:v28 lineNumber:3885 isFatal:0 description:"CTTypesetterCreateLine returned nil"];

    double TypographicBounds = 0.0;
    double v25 = NAN;
  }
  return v25 == TypographicBounds;
}

void sub_10029D374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029D3C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029D404(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10029D448(uint64_t a1, NSRange *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  if (*(double *)(a3 + 416) < a5)
  {
    CFIndex location = a2->location;
    if (a2->location != 0x7FFFFFFFFFFFFFFFLL)
    {
      NSUInteger length = (char *)a2->length;
      double v51 = NAN;
      uint64_t v9 = &length[location];
      if ((uint64_t)&length[location] > location)
      {
        unint64_t v14 = 0;
        while (1)
        {
          v64[0] = 0;
          unint64_t v15 = sub_100061DD4(a3);
          BOOL v16 = v15 == 0;

          if (v16)
          {
            unsigned int v17 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8878);
            }
            CFIndex v18 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67110146;
              unsigned int v53 = v17;
              __int16 v54 = 2082;
              long long v55 = "CRLWPHyphenationResult CRLWPCoreTextTypesetter::pHyphenateLocalRange(CFRange &, const CRLWPLayoutSta"
                    "te *, const CGFloat, const CGFloat, CRLWPLineFragment *const)";
              __int16 v56 = 2082;
              float v57 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
              __int16 v58 = 1024;
              int v59 = 3802;
              __int16 v60 = 2082;
              double v61 = "state->hyphenationLocale()";
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8898);
            }
            unint64_t v19 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v28 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = 67109378;
              unsigned int v53 = v17;
              __int16 v54 = 2114;
              long long v55 = v28;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            CFRange v20 = +[NSString stringWithUTF8String:"CRLWPHyphenationResult CRLWPCoreTextTypesetter::pHyphenateLocalRange(CFRange &, const CRLWPLayoutState *, const CGFloat, const CGFloat, CRLWPLineFragment *const)"];
            uint64_t v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v20, v21, 3802, 0, "invalid nil value for '%{public}s'", "state->hyphenationLocale()");
          }
          double v22 = *(void **)(a1 + 56);
          uint64_t v23 = sub_100061DD4(a3);
          double v24 = (char *)[v22 hyphenationLocationBeforeIndex:v9 inRange:location length:length locale:v23 hyphenChar:v64];

          if ((uint64_t)v9 <= (uint64_t)v24) {
            break;
          }
          CFIndex v25 = a2->location;
          CFIndex v26 = (CFIndex)&v24[-a2->location];
          if ((uint64_t)v24 <= (int64_t)a2->location) {
            break;
          }
          if (v24 != (char *)-1)
          {
            if ((unint64_t)v24 < location || &v24[-location] >= length)
            {
              +[CRLAssertionHandler _atomicIncrementAssertCount];
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014E88B8);
              }
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
                sub_101096388();
              }
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014E88D8);
              }
              uint64_t v29 = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
              {
                +[CRLAssertionHandler packedBacktraceString];
                objc_claimAutoreleasedReturnValue();
                sub_1010663B0();
              }

              unsigned __int8 v30 = +[NSString stringWithUTF8String:"CRLWPHyphenationResult CRLWPCoreTextTypesetter::pHyphenateLocalRange(CFRange &, const CRLWPLayoutState *, const CGFloat, const CGFloat, CRLWPLineFragment *const)"];
              char v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
              +[CRLAssertionHandler handleFailureInFunction:v30 file:v31 lineNumber:3809 isFatal:0 description:"Bad hyphenation result"];

              return 0xFFFFFFFFLL;
            }
            double v51 = a5;
            if (sub_10029D054(a1, v25, v26, v64[0], &v51, a4))
            {
              double v32 = v51;
              NSUInteger v33 = a2->location;
              CFStringRef v34 = (const __CTTypesetter *)sub_10029456C(a1);
              CFIndex v35 = CTTypesetterSuggestLineBreakWithOffset(v34, a2->location, v32, a6);
              CFIndex v36 = a2->location;
              if ((uint64_t)(v35 + v33) >= (uint64_t)v24) {
                CFIndex v37 = a2->location;
              }
              else {
                CFIndex v37 = v35 + v33;
              }
              if (v37 > v36)
              {
                CTParagraphStyleRef v38 = (const __CTTypesetter *)sub_10029456C(a1);
                v65.CFIndex location = v36;
                v65.NSUInteger length = v37 - v36;
                Line = CTTypesetterCreateLine(v38, v65);
                unint64_t v40 = Line;
                if (Line)
                {
                  if (a5 - CTLineGetTypographicBounds(Line, 0, 0, 0) < *(double *)(a3 + 416))
                  {
                    a2->NSUInteger length = v37 - a2->location;
                    CFRelease(v40);
                    return 0xFFFFFFFFLL;
                  }
                  CFRelease(v40);
                }
              }
              uint64_t v42 = (uint64_t)&v24[-a2->location];
              BOOL v41 = (uint64_t)v24 <= (int64_t)a2->location;
              a2->NSUInteger length = v42;
              if (v41)
              {
                unsigned int v43 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                if (qword_101719A70 != -1) {
                  dispatch_once(&qword_101719A70, &stru_1014E8938);
                }
                unsigned int v44 = off_10166B4A0;
                if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
                {
                  NSStringFromRange(*a2);
                  uint64_t v49 = (char *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 67110402;
                  unsigned int v53 = v43;
                  __int16 v54 = 2082;
                  long long v55 = "CRLWPHyphenationResult CRLWPCoreTextTypesetter::pHyphenateLocalRange(CFRange &, const CRLWPLayou"
                        "tState *, const CGFloat, const CGFloat, CRLWPLineFragment *const)";
                  __int16 v56 = 2082;
                  float v57 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
                  __int16 v58 = 1024;
                  int v59 = 3849;
                  __int16 v60 = 2114;
                  double v61 = v49;
                  __int16 v62 = 2048;
                  double v63 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v44, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad hyphenation result range: %{public}@ vs %lu", buf, 0x36u);
                }
                if (qword_101719A70 != -1) {
                  dispatch_once(&qword_101719A70, &stru_1014E8958);
                }
                double v45 = off_10166B4A0;
                if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                {
                  +[CRLAssertionHandler packedBacktraceString];
                  objc_claimAutoreleasedReturnValue();
                  sub_1010663B0();
                }

                uint64_t v46 = +[NSString stringWithUTF8String:"CRLWPHyphenationResult CRLWPCoreTextTypesetter::pHyphenateLocalRange(CFRange &, const CRLWPLayoutState *, const CGFloat, const CGFloat, CRLWPLineFragment *const)"];
                uint64_t v47 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
                CTLineRef v48 = NSStringFromRange(*a2);
                +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v46, v47, 3849, 0, "Bad hyphenation result range: %{public}@ vs %lu", v48, v24);

                uint64_t v42 = a2->length;
              }
              if (v42 < 0) {
                return 0xFFFFFFFFLL;
              }
              else {
                return 1;
              }
            }
          }
          uint64_t result = 0xFFFFFFFFLL;
          if (v14 <= 0x12)
          {
            ++v14;
            uint64_t v9 = v24;
            if ((uint64_t)v24 > location) {
              continue;
            }
          }
          return result;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_10029DD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029DDCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029DE10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029DE54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10029DE98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10029DEDC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id result = (id)sub_100152BC0(a2);
  if (result) {
    return result;
  }
  int v242 = a4;
  uint64_t v275 = a1;
  uint64_t v251 = a3;
  double offset = 0.0;
  double v292 = 0.0;
  uint64_t v259 = a2;
  sub_10015DE18(a2, &offset, &v292);
  if (v292 - offset <= 32000.0) {
    double v9 = v292 - offset;
  }
  else {
    double v9 = 32000.0;
  }
  if (sub_100159020(a2))
  {
    *(_DWORD *)buf = 0;
    uint64_t v10 = sub_10015DED8(a2, buf);
    if ((*(_DWORD *)buf - 0x10000) >> 20)
    {
      uint64_t v12 = 1;
      LOWORD(v11) = *(_WORD *)buf;
    }
    else
    {
      unsigned int v11 = ((*(_DWORD *)buf + 67043328) >> 10) - 10240;
      *(_WORD *)&translations[2] = *(_WORD *)buf & 0x3FF | 0xDC00;
      uint64_t v12 = 2;
    }
    *(_WORD *)translations = v11;
    id v13 = [objc_alloc((Class)NSString) initWithCharacters:translations length:v12];
    CFAttributedStringRef v14 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:v13 attributes:v10];
    unint64_t v15 = CTLineCreateWithAttributedString(v14);
    double TypographicBounds = CTLineGetTypographicBounds(v15, 0, 0, 0);
    CTFontRef cf = v15;
  }
  else
  {
    CTFontRef cf = 0;
    double TypographicBounds = 0.0;
  }
  id v16 = sub_100189F3C(v251 + 24);
  uint64_t v17 = v259;
  if (v16 != *(id *)(v259 + 16))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E85D8);
    }
    CFIndex v18 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR)) {
      sub_1010965CC();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E85F8);
    }
    unint64_t v19 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
    {
      CFRange v20 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v20);
    }

    uint64_t v21 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
    double v22 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v21 file:v22 lineNumber:2875 isFatal:0 description:"line fragment isn't from the current paragraph"];

    uint64_t v17 = v259;
  }
  if (*(uint64_t *)(v17 + 24) < 0) {
    uint64_t v23 = &xmmword_101176F48;
  }
  else {
    uint64_t v23 = (long long *)v17;
  }
  unint64_t v24 = [*(id *)(a1 + 56) charRangeMappedFromStorage:*(void *)v23 *((void *)v23 + 1)];
  CFIndex v26 = v25;
  if (v25 < 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8618);
    }
    uint64_t v27 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR)) {
      sub_101096520();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8638);
    }
    uint64_t v28 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v29);
    }

    unsigned __int8 v30 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
    char v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v30, v31, 2878, 0, "Bad range length %ld.", v26);
  }
  unint64_t v32 = v24 + v26;
  uint64_t v33 = a1;
  if (*(_WORD *)(*(void *)(a1 + 232) + 72)) {
    BOOL v272 = v32 == *(void *)(a1 + 48);
  }
  else {
    BOOL v272 = 0;
  }
  uint64_t v34 = v259;
  charIndedouble x = v24 + v26;
  if (v32) {
    BOOL v35 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v32 - 2) == 8232;
  }
  else {
    BOOL v35 = 0;
  }
  if (*(void *)(v251 + 400) == 3 && charIndex < *(void *)(a1 + 48))
  {
    unsigned int v36 = 1;
  }
  else
  {
    unsigned int v36 = sub_10015DF30(v259);
    uint64_t v34 = v259;
    uint64_t v33 = a1;
  }
  uint64_t v260 = *(void *)(v34 + 24);
  if (!sub_10029456C(v33))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8658);
    }
    CFIndex v37 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v37, OS_LOG_TYPE_ERROR)) {
      sub_101096498();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8678);
    }
    CTParagraphStyleRef v38 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_ERROR))
    {
      id v39 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v39);
    }

    unint64_t v40 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
    BOOL v41 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v40 file:v41 lineNumber:2887 isFatal:0 description:"nil typesetter"];
  }
  uint64_t v42 = (const __CTTypesetter *)sub_10029456C(a1);
  v319.CFIndex location = v24;
  v319.NSUInteger length = v26;
  LineWithOffset = CTTypesetterCreateLineWithOffset(v42, v319, offset);
  if (!LineWithOffset)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8698);
    }
    unsigned int v44 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR)) {
      sub_101096410();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E86B8);
    }
    double v45 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v46);
    }

    uint64_t v47 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
    CTLineRef v48 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v47 file:v48 lineNumber:2889 isFatal:0 description:"nil lineRef"];
  }
  uint64_t GlyphCount = CTLineGetGlyphCount(LineWithOffset);
  if (!GlyphCount)
  {
    unsigned int v50 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E86D8);
    }
    double v51 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v51, OS_LOG_TYPE_ERROR))
    {
      if (v24 >= *(void *)(a1 + 48)) {
        int v236 = 0;
      }
      else {
        int v236 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v24);
      }
      *(_DWORD *)buf = 67110658;
      unsigned int v307 = v50;
      *(_WORD *)v308 = 2082;
      *(void *)&v308[2] = "void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRL"
                            "WPLayoutState *, BOOL, CRLWPLayoutFlags) const";
      __int16 v309 = 2082;
      v310 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
      __int16 v311 = 1024;
      int v312 = 2890;
      __int16 v313 = 2048;
      unint64_t v314 = v24;
      __int16 v315 = 2048;
      CFIndex v316 = v26;
      __int16 v317 = 1024;
      int v318 = v236;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v51, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad lineGlyphCount 0 for line range {%ld, %ld} 0x%X", buf, 0x3Cu);
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E86F8);
    }
    CFAttributedStringRef v52 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v52, OS_LOG_TYPE_ERROR))
    {
      unsigned int v53 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v53);
    }

    __int16 v54 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
    long long v55 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    if (v24 >= *(void *)(a1 + 48)) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v24);
    }
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v54, v55, 2890, 0, "bad lineGlyphCount 0 for line range {%ld, %ld} 0x%X", v24, v26, v56);
  }
  if (((v36 ^ 1 | (v272 || v35)) & 1) == 0)
  {
    double v9 = v9 - TypographicBounds + *(double *)(a1 + 248);
    line = CTLineCreateJustifiedLine(LineWithOffset, 1.0, v9);
    if (line)
    {
      CFRelease(LineWithOffset);
      uint64_t v57 = v259;
      *(void *)(v259 + 24) &= ~0x8000uLL;
      goto LABEL_81;
    }
    *(void *)(v259 + 24) |= 0x8000uLL;
    uint64_t GlyphCount = (uint64_t)sub_10015DF30(v259);
  }
  line = LineWithOffset;
  uint64_t v57 = v259;
LABEL_81:
  uint64_t v58 = *(void *)(v251 + 400);
  if (v58 != 3)
  {
    if (v58 == 2)
    {
      double v60 = 0.5;
    }
    else
    {
      CGFloat v59 = 0.0;
      if (v58 != 1)
      {
LABEL_89:
        if (v58 == 1 || ((v58 == 3) & (v260 >> 12)) != 0) {
          *(void *)(v57 + 24) |= 0x800000uLL;
        }
        goto LABEL_92;
      }
      double v60 = 1.0;
    }
LABEL_88:
    double v9 = v9 - TypographicBounds + *(double *)(a1 + 248);
    CGFloat v59 = v60;
    goto LABEL_89;
  }
  CGFloat v59 = 0.0;
  double v60 = 1.0;
  if ((v260 & 0x1000) != 0) {
    goto LABEL_88;
  }
LABEL_92:
  if (v242)
  {
    double v61 = sub_1002A3870(offset, GlyphCount, v251, v57);
    __int16 v62 = sub_100152CD8(v259);
    double v63 = 0.0;
    double v64 = v61 + 0.0;
    if (v62)
    {
      BOOL v65 = *(unsigned char *)(v251 + 350) == 0;

      if (!v65)
      {
        long long v66 = sub_100152CD8(v259);
        [v66 labelTypographicExtent];
        double v68 = v67;

        double v63 = v68 + 0.0;
      }
    }
  }
  else
  {
    double v63 = 0.0;
    double v69 = CTLineGetPenOffsetForFlush(line, v59, v9) + 0.0;
    double v64 = sub_1002A3870(offset, v70, v251, v259) + v69;
  }
  double v71 = CTLineGetTypographicBounds(line, 0, 0, 0);
  uint64_t v72 = v259;
  *(double *)(v259 + 240) = v64 + v63 + v71;
  if (charIndex <= v24)
  {
    unsigned int v241 = 0;
  }
  else
  {
    unsigned int v241 = [*(id *)(a1 + 56) characterAtIndex:charIndex - 1];
    unsigned int v73 = sub_1001CA284(v241) ^ 1;
    if (v241 == 8232) {
      LOBYTE(v73) = 0;
    }
    uint64_t v72 = v259;
    if ((v73 & 1) == 0) {
      *(void *)(v259 + 24) |= 0x800uLL;
    }
  }
  if (line)
  {
    double v74 = sub_1005032C0(*(void *)(a1 + 232));
    v240 = [v74 string];

    sub_10015CD18(v259, v240);
    sub_1001BAA00((uint64_t)buf, line, 0x7FFFFFFFFFFFFFFFLL, 0, 0, v64, 0.0);
    uint64_t v75 = a1;
    sub_10015275C(v259, (uint64_t)buf);
    v238 = CTLineGetGlyphRuns(line);
    double v76 = (char *)[v238 count];
    double v77 = (const __CTLine *)sub_1001BAB78((uint64_t)buf);
    double TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(v77);
    long long v290 = 0u;
    long long v291 = 0u;
    long long v288 = 0u;
    long long v289 = 0u;
    id obj = v238;
    id v78 = [obj countByEnumeratingWithState:&v288 objects:v305 count:16];
    if (!v78)
    {
      double x = INFINITY;
      goto LABEL_317;
    }
    v254 = 0;
    BOOL v244 = v76 - 1;
    double x = INFINITY;
    uint64_t v249 = *(void *)v289;
    while (1)
    {
      id v257 = 0;
      id v250 = v78;
      do
      {
        if (*(void *)v289 != v249) {
          objc_enumerationMutation(obj);
        }
        double v80 = *(const __CTRun **)(*((void *)&v288 + 1) + 8 * (void)v257);
        CTRunRef run = v80;
        CFRange StringRange = CTRunGetStringRange(v80);
        unint64_t v82 = CTRunGetGlyphCount(v80);
        v261 = CTRunGetAttributes(v80);
        unsigned int v83 = [*(id *)(v75 + 56) characterAtIndex:StringRange.location];
        double v263 = [[CRLWPAdornments alloc] initWithType:4 color:0 font:0 flippedFont:0];
        CGSize v286 = CGSizeZero;
        CGGlyph v285 = 0;
        double v84 = [v261 objectForKeyedSubscript:@"CRLWPEmphasisMarksAttribute"];
        id v252 = v84;
        if (v84)
        {
          BOOL v256 = 0;
          if ([v84 length] && v82) {
            BOOL v256 = sub_1002A3A6C(v275, v251, v263, &run, v259, v252, &v285, &v286);
          }
        }
        else
        {
          BOOL v256 = 0;
        }
        if ((v83 == 14 || v83 == 65532) && v82 != 1)
        {
          if (StringRange.length < 2) {
            unsigned int v87 = 0;
          }
          else {
            unsigned int v87 = [*(id *)(v275 + 56) characterAtIndex:StringRange.location + 1];
          }
          if (v83 == 65532)
          {
            unsigned int v88 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8718);
            }
            double v89 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v89, OS_LOG_TYPE_ERROR))
            {
              NSStringFromRange((NSRange)StringRange);
              id v158 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)translations = 67110658;
              *(_DWORD *)&translations[4] = v88;
              *(_WORD *)&translations[8] = 2082;
              *(void *)&translations[10] = "void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFrag"
                                             "ment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const";
              __int16 v295 = 2082;
              v296 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
              __int16 v297 = 1024;
              int v298 = 2996;
              __int16 v299 = 2048;
              v300 = (const char *)v82;
              __int16 v301 = 2114;
              id v302 = v158;
              __int16 v303 = 1024;
              unsigned int v304 = v87;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v89, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attachment spanning wrong number of glyphs (%lu) range: %{public}@ %x", translations, 0x3Cu);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8738);
            }
            double v90 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v90, OS_LOG_TYPE_ERROR))
            {
              id v160 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)translations = 67109378;
              *(_DWORD *)&translations[4] = v88;
              *(_WORD *)&translations[8] = 2114;
              *(void *)&translations[10] = v160;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v90, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", translations, 0x12u);
            }
            id v91 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
            unint64_t v92 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
            BOOL v93 = NSStringFromRange((NSRange)StringRange);
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v91, v92, 2996, 0, "Attachment spanning wrong number of glyphs (%lu) range: %{public}@ %x", v82, v93, v87);
          }
          else
          {
            unsigned int v94 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8758);
            }
            uint64_t v95 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v95, OS_LOG_TYPE_ERROR))
            {
              NSStringFromRange((NSRange)StringRange);
              id v159 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)translations = 67110658;
              *(_DWORD *)&translations[4] = v94;
              *(_WORD *)&translations[8] = 2082;
              *(void *)&translations[10] = "void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFrag"
                                             "ment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const";
              __int16 v295 = 2082;
              v296 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
              __int16 v297 = 1024;
              int v298 = 2998;
              __int16 v299 = 2048;
              v300 = (const char *)v82;
              __int16 v301 = 2114;
              id v302 = v159;
              __int16 v303 = 1024;
              unsigned int v304 = v87;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v95, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Footnote spanning wrong number of glyphs (%lu) range: %{public}@ %x", translations, 0x3Cu);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8778);
            }
            v96 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v96, OS_LOG_TYPE_ERROR))
            {
              id v161 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)translations = 67109378;
              *(_DWORD *)&translations[4] = v94;
              *(_WORD *)&translations[8] = 2114;
              *(void *)&translations[10] = v161;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v96, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", translations, 0x12u);
            }
            id v91 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
            unint64_t v92 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
            BOOL v93 = NSStringFromRange((NSRange)StringRange);
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v91, v92, 2998, 0, "Footnote spanning wrong number of glyphs (%lu) range: %{public}@ %x", v82, v93, v87);
          }
        }
        id v97 = [v261 objectForKeyedSubscript:@"CRLWPUnderline"];
        id v98 = [v97 integerValue];

        uint64_t v99 = [v261 objectForKeyedSubscript:@"CRLWPStrikethrough"];
        uint64_t v100 = (uint64_t)[v99 integerValue];

        v255 = [v261 objectForKeyedSubscript:@"CRLWPTextBackgroundColor"];
        uint64_t v101 = objc_opt_class();
        unsigned __int8 v102 = [v261 objectForKeyedSubscript:@"CRLWPTextHighlightsAttribute"];
        v253 = sub_1002469D0(v101, v102);

        if (!v82)
        {
          uint64_t v113 = v259;
          goto LABEL_311;
        }
        sub_10002B3D8(buffer, v82);
        v320.CFIndex location = 0;
        v320.NSUInteger length = v82;
        CTRunGetStringIndices(v80, v320, buffer[0]);
        sub_10002B4CC(v283, v82);
        v321.CFIndex location = 0;
        v321.NSUInteger length = v82;
        CTRunGetPositions(v80, v321, v283[0]);
        sub_1002A7DB4(v282, v82);
        v322.CFIndex location = 0;
        v322.NSUInteger length = v82;
        CTRunGetAdvances(v80, v322, v282[0]);
        uint64_t v103 = *(void *)(v275 + 232);
        if (!v103 || *(__int16 *)(*(void *)(v275 + 64) + 2 * *buffer[0]) != -4)
        {
          CGFloat ascent = 0.0;
          CGFloat descent = 0.0;
          CGFloat leading = 0.0;
LABEL_150:
          v323.CFIndex location = 0;
          v323.NSUInteger length = v82;
          double v106 = CTRunGetTypographicBounds(v80, v323, &ascent, &descent, &leading);
          int v107 = 0;
          goto LABEL_151;
        }
        unsigned __int8 v104 = (double *)sub_10050309C(v103, *buffer[0]);
        CGFloat ascent = 0.0;
        CGFloat descent = 0.0;
        CGFloat leading = 0.0;
        if (!v104) {
          goto LABEL_150;
        }
        double v105 = v104[4];
        CGFloat ascent = v104[3] * 0.5;
        CGFloat descent = ascent;
        double v106 = v105 + v104[5];
        int v107 = 1;
LABEL_151:
        CTRunStatus v108 = (CTRunGetStatus(v80) >> 2) & 1;
        if (!*(unsigned char *)(v275 + 27)) {
          CTRunStatus v108 = 0;
        }
        int v262 = v108;
        unint64_t v109 = [*(id *)(v275 + 112) objectAtIndexedSubscript:sub_1002A413C(v275, *buffer[0])];
        id v110 = [v109 ctFont];

        cf1 = [v261 objectForKeyedSubscript:kCTFontAttributeName];

        if (!cf1 || !v110 || !CFEqual(cf1, v110)) {
          *(void *)(v259 + 24) |= 0x80uLL;
        }
        if ((v260 & 0x1000) != 0 || v254 != v244)
        {
          double v111 = 0.0;
          if (((v254 == 0) & (v260 >> 12)) != 0) {
            double v112 = TrailingWhitespaceWidth;
          }
          else {
            double v112 = 0.0;
          }
        }
        else
        {
          double v111 = sub_1002A4370(v275, 0, *(unsigned char *)(v275 + 27), v82, (uint64_t)v283[0], (uint64_t)v282[0], (uint64_t)buffer[0], TrailingWhitespaceWidth);
          double v112 = 0.0;
        }
        if (v262)
        {
          UniChar characters = 0;
          UniChar characters = *(_WORD *)(*(void *)(v275 + 64) + 2 * *buffer[0]);
          CGGlyph glyphs = 0;
          if (CTFontGetGlyphsForCharacters((CTFontRef)cf1, &characters, &glyphs, 1))
          {
            CTFontGetVerticalTranslationsForGlyphs((CTFontRef)cf1, &glyphs, (CGSize *)translations, 1);
            double v114 = v64 - v283[0]->y + *(double *)&translations[8];
          }
          else
          {
            double v114 = sub_100502748(v259, StringRange.location);
          }
        }
        else
        {
          double v114 = v64 + v283[0]->x;
        }
        unsigned __int8 v115 = sub_100159020(v259);
        double v116 = v112 + v114;
        double v117 = v106 - (v112 + v111);
        CFIndex v118 = StringRange.location + StringRange.length;
        double v119 = -0.0;
        if ((v115 & (StringRange.location + StringRange.length == charIndex)) != 0) {
          double v119 = TypographicBounds;
        }
        double v120 = v117 + v119;
        if (v117 + v119 > 0.0 || v100 == -1)
        {
          if (v98)
          {
            id v121 = [v261 objectForKeyedSubscript:@"CRLWPUnderlineColor"];
            id v122 = [v121 CGColor];

            if (!v122)
            {
              id v122 = [v261 objectForKeyedSubscript:kCTForegroundColorAttributeName];
            }
            uint64_t v123 = sub_1001CEE40(*(void *)(v275 + 96), *(unsigned __int8 *)(v275 + 27), 5);
            if (v123 != 1
              || (*(_OWORD *)translations = xmmword_101176F48,
                  [*(id *)(v275 + 56) smartFieldAtCharIndex:*buffer[0] attributeKind:7 effectiveRange:translations], (v124 = objc_claimAutoreleasedReturnValue()) == 0)|| (*buffer[0] >= *(void *)translations? (BOOL v125 = *buffer[0] - *(void *)translations >= *(void *)&translations[8]): (BOOL v125 = 1), !v125 ? (v126 = 0) : (v126 = 1), v124, (v126 & 1) != 0))
            {
              v127 = sub_100061D58(v251);
              [v127 scaleTextPercent];
              double v128 = sub_100152DCC(v261);

              BOOL v129 = 0;
              uint64_t v130 = 0;
              double v131 = -v128;
              do
              {
                if ((sub_1001CA378(*(unsigned __int16 *)(*(void *)(v275 + 64) + 2 * buffer[0][v130])) & 1) == 0) {
                  break;
                }
                BOOL v129 = ++v130 >= v82;
              }
              while (v82 != v130);
              sub_1001CE984((uint64_t)cf1, (uint64_t)v110, (uint64_t)v98, *(unsigned __int8 *)(v275 + 27), *(void *)(v275 + 80), v123, v131);
              double v133 = v132;
              double v135 = v134;
              double v137 = v136;
              v138 = [CRLWPAdornmentLine alloc];
              if (v98 == (id)2) {
                uint64_t v139 = 2;
              }
              else {
                uint64_t v139 = 1;
              }
              LOBYTE(v237) = 0;
              unsigned int v140 = -[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:isWhitespace:renderingDelegate:allowAntialiasing:](v138, "initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:isWhitespace:renderingDelegate:allowAntialiasing:", v122, v139, v98, v123, v129, 0, v116, v133, v120, v135, v137, v237);
              v141 = sub_100152CF8(v259);
              v142 = sub_1002A440C(v141, v140);

              if (v256 && v123 == [(CRLWPAdornments *)v263 location])
              {
                [v142 underlineAdjustment];
                -[CRLWPAdornments setVerticalAdjustment:](v263, "setVerticalAdjustment:");
              }
            }
          }
          if (v100)
          {
            v143 = sub_100061D58(v251);
            [v143 scaleTextPercent];
            double v144 = sub_100152DCC(v261);

            id v145 = [v261 objectForKeyedSubscript:@"CRLWPStrikethroughColor"];
            id v146 = [v145 CGColor];

            if (!v146)
            {
              id v146 = [v261 objectForKeyedSubscript:kCTForegroundColorAttributeName];
            }
            sub_1001CEC98((uint64_t)v110, *(unsigned __int8 *)(v275 + 27), v262, -v144);
            double v149 = v148;
            if (*(unsigned char *)(v275 + 27)) {
              double v150 = 0.0 - v144;
            }
            else {
              double v150 = v147;
            }
            if (v100 == 2) {
              double v151 = v148;
            }
            else {
              double v151 = 0.0;
            }
            if (v100 == -1)
            {
              id v152 = [*(id *)(v275 + 56) characterAtIndex:v118 - 1];
              if (sub_1001CCFB0(v118 - 1, *(void **)(v275 + 56)))
              {
                double v120 = v292 - v116;
              }
              else
              {
                unsigned int v153 = sub_1001CA284((uint64_t)v152) ^ 1;
                if (v152 == 8232) {
                  LOBYTE(v153) = 0;
                }
                double v154 = v111;
                if ((v153 & 1) == 0)
                {
                  unint64_t v155 = v82;
                  uint64_t v156 = v82;
                  do
                  {
                    if (v156 <= 0)
                    {
                      double v154 = v111;
                      goto LABEL_215;
                    }
                    CFIndex v157 = buffer[0][--v156];
                    --v155;
                  }
                  while (v157 != v118 - 1);
                  double v154 = v111 - v282[0][v155].width + 7.0;
                }
LABEL_215:
                double v162 = v120 + v154;
                if (v292 - v116 >= v162) {
                  double v120 = v162;
                }
                else {
                  double v120 = v292 - v116;
                }
              }
              uint64_t v100 = 1;
            }
            if (v120 > 0.0)
            {
              CGFloat v163 = -[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:]([CRLWPAdornmentLine alloc], "initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:", v146, v100, 0, 0, v116, v150 - v151, v120, v149, 0.0);
              CGFloat v164 = sub_100152D00(v259);
              id v165 = sub_1002A440C(v164, v163);
            }
          }
        }
        if (v255 && v120 > 0.0)
        {
          CGFloat v166 = -[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:]([CRLWPAdornmentLine alloc], "initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:", [v255 CGColor], 0, 0, 0, v116, 0.0, v111 + v120, 0.0, 0.0);
          CGFloat v167 = sub_100152D08(v259);
          id v168 = sub_1002A440C(v167, v166);
        }
        [v253 count];
        double v169 = [v261 objectForKeyedSubscript:@"CRLWPCharacterFillAttribute"];
        if (v169)
        {
          uint64_t v170 = objc_opt_class();
          unint64_t v171 = [v261 objectForKeyedSubscript:@"CRLWPCharacterFillAttribute"];
          unsigned int v172 = sub_10024715C((objc_class *)v170, v171);
          LOBYTE(v170) = [v172 fillType] == 0;

          if ((v170 & 1) == 0) {
            *(void *)(v259 + 24) |= 0x400uLL;
          }
        }
        id v173 = [v261 objectForKeyedSubscript:@"CRLWPCharacterStrokeAttribute"];
        if (v173)
        {
          uint64_t v174 = [v261 objectForKeyedSubscript:@"CRLWPCharacterFillAttribute"];
          BOOL v175 = v174 == 0;

          if (v175) {
            *(void *)(v259 + 24) |= 0x400uLL;
          }
        }
        uint64_t v176 = [v261 objectForKeyedSubscript:@"CRLWPInvisibleTextAttribute"];
        BOOL v177 = v176 == 0;

        if (!v177) {
          *(void *)(v259 + 24) |= 0x400uLL;
        }
        CFIndex v178 = 0;
        if (v82 <= 1) {
          uint64_t v179 = 1;
        }
        else {
          uint64_t v179 = v82;
        }
        BOOL v180 = v256;
        double v181 = (const __CTFont *)cf1;
        do
        {
          int v182 = 0;
          uint64_t v183 = buffer[0][v178];
          uint64_t v184 = *(unsigned __int16 *)(*(void *)(v275 + 64) + 2 * v183);
          int v185 = 1;
          if (*(unsigned __int16 *)(*(void *)(v275 + 64) + 2 * v183) < 0x2000u)
          {
            if (v184 > 0x20) {
              goto LABEL_249;
            }
            if (((1 << v184) & 0x3C30) != 0)
            {
LABEL_246:
              double x = v283[0][v178].x;
              int v182 = 0;
              if ((v260 & 0x1000) != 0) {
                double x = x + v282[0][v178].width;
              }
              int v185 = 1;
              goto LABEL_249;
            }
            if (v184 == 9)
            {
              double v191 = v283[0][v178].x;
              double MaxX = CGRectGetMaxX(*(CGRect *)(v259 + 40));
              if ((v260 & 0x1000) != 0) {
                double v193 = MaxX - (v64 + v191 + v282[0][v178].width);
              }
              else {
                double v193 = v191 + offset;
              }
              double v194 = (objc_class *)objc_opt_class();
              double v195 = sub_100061D98(v251);
              v269 = sub_10024715C(v194, v195);

              double v196 = [v269 tabAfterPosition:v193];
              id v274 = [v196 leader];

              if ([v274 length]
                && ([v274 isEqualToString:@" "] & 1) == 0)
              {
                double width = v282[0][v178].width;
                char v265 = [*(id *)(v275 + 56) characterStyleAtCharIndex:v183 effectiveRange:0];
                double v267 = [*(id *)(v275 + 56) paragraphStyleAtCharIndex:v183 effectiveRange:0];
                uint64_t v198 = sub_100061D58(v251);
                uint64_t v199 = sub_100296504(v267, v265, (unint64_t)[v198 scaleTextPercent], 1u, 1);
                id v271 = [v199 mutableCopy];

                if (v271)
                {
                  if (width > 0.0)
                  {
                    if (*(unsigned char *)(v251 + 349)
                      && (+[CRLWPTab tabStopLeaderStringArrow],
                          uint64_t v200 = objc_claimAutoreleasedReturnValue(),
                          unsigned int v201 = [v274 isEqualToString:v200],
                          v200,
                          v201))
                    {
                      uint64_t v202 = +[CRLWPTab tabStopLeaderStringArrowRTL];
                    }
                    else
                    {
                      uint64_t v202 = v274;
                    }
                    id v274 = v202;
                    CFAttributedStringRef v208 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:v274 attributes:v271];
                    uint64_t v209 = CTLineCreateWithAttributedString(v208);

                    double v210 = CTLineGetTypographicBounds(v209, 0, 0, 0);
                    CFRelease(v209);
                    id v211 = v274;
                    if (v210 <= 0.0)
                    {
                      uint64_t v218 = 1;
                    }
                    else
                    {
                      float v212 = width / v210;
                      unint64_t v213 = vcvtms_u32_f32(v212);
                      while (v213)
                      {
                        id v214 = [&stru_101538650 stringByPaddingToLength:v213 withString:v211 startingAtIndex:0];
                        CFAttributedStringRef v215 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:v214 attributes:v271];
                        v216 = CTLineCreateWithAttributedString(v215);

                        double v217 = CTLineGetTypographicBounds(v216, 0, 0, 0);
                        CFRelease(v216);

                        --v213;
                        id v211 = v274;
                        if (v217 <= width)
                        {
                          uint64_t v218 = v213 + 1;
                          goto LABEL_288;
                        }
                      }
                      uint64_t v218 = 0;
                    }
LABEL_288:
                    v219 = 0;
                    double v220 = 0.0;
                    while (1)
                    {
                      id v221 = [&stru_101538650 stringByPaddingToLength:v218 withString:v211 startingAtIndex:0];
                      CFAttributedStringRef v222 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:v221 attributes:v271];
                      v223 = CTLineCreateWithAttributedString(v222);

                      double v224 = CTLineGetTypographicBounds(v223, 0, 0, 0);
                      double v225 = v224;
                      if (v224 <= v220 || v224 > width) {
                        break;
                      }
                      if (v219) {
                        CFRelease(v219);
                      }

                      ++v218;
                      double v220 = v225;
                      v219 = v223;
                      id v211 = v274;
                    }
                    if (v223) {
                      CFRelease(v223);
                    }

                    if (v219)
                    {
                      sub_1001BAA00((uint64_t)translations, v219, v183, 1, 0, width + v191 + *(double *)v308 - v220, 0.0);
                      sub_100152B6C((uint64_t *)v259, (uint64_t)translations);
                      CFRelease(v219);
                      sub_1001BAAFC(translations);
                    }
                  }
                }
                else
                {
                  unsigned int v203 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                  if (qword_101719A70 != -1) {
                    dispatch_once(&qword_101719A70, &stru_1014E8798);
                  }
                  uint64_t v204 = off_10166B4A0;
                  if (os_log_type_enabled((os_log_t)v204, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)translations = 67110146;
                    *(_DWORD *)&translations[4] = v203;
                    *(_WORD *)&translations[8] = 2082;
                    *(void *)&translations[10] = "void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLi"
                                                   "neFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const";
                    __int16 v295 = 2082;
                    v296 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
                    __int16 v297 = 1024;
                    int v298 = 3331;
                    __int16 v299 = 2082;
                    v300 = "tabLeaderAttrs";
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v204, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", translations, 0x2Cu);
                  }

                  if (qword_101719A70 != -1) {
                    dispatch_once(&qword_101719A70, &stru_1014E87B8);
                  }
                  v205 = off_10166B4A0;
                  if (os_log_type_enabled((os_log_t)v205, OS_LOG_TYPE_ERROR))
                  {
                    id v227 = +[CRLAssertionHandler packedBacktraceString];
                    *(_DWORD *)translations = 67109378;
                    *(_DWORD *)&translations[4] = v203;
                    *(_WORD *)&translations[8] = 2114;
                    *(void *)&translations[10] = v227;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v205, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", translations, 0x12u);
                  }
                  uint64_t v206 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::createLineVectorForLineFragment(CRLWPLineFragment *, const CRLWPLayoutState *, BOOL, CRLWPLayoutFlags) const"];
                  uint64_t v207 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
                  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v206, v207, 3331, 0, "invalid nil value for '%{public}s'", "tabLeaderAttrs");
                }
              }

              int v185 = 0;
              int v182 = 0;
              BOOL v180 = v256;
              double v181 = (const __CTFont *)cf1;
            }
            else if (v184 == 32)
            {
              goto LABEL_239;
            }
          }
          else
          {
            if ((v184 - 0x2000) <= 0x29)
            {
              if (((1 << v184) & 0xF7F) != 0) {
                goto LABEL_239;
              }
              if (((1 << v184) & 0x30000000000) != 0) {
                goto LABEL_246;
              }
            }
            if (v184 == 12288 || v184 == 8287)
            {
LABEL_239:
              int v185 = 0;
              int v182 = 1;
            }
          }
LABEL_249:
          if (((v185 | v107 & v182) & v180) == 1)
          {
            uint64_t v186 = &v283[0][v178];
            double v273 = v186->x;
            double y = v186->y;
            uint64_t v187 = run;
            CTRunGetTextMatrix(&v276, run);
            float64x2_t v264 = *(float64x2_t *)&v276.c;
            float64x2_t v266 = *(float64x2_t *)&v276.tx;
            float64x2_t v268 = *(float64x2_t *)&v276.a;
            if (v262)
            {
              *(_WORD *)translations = 0;
              v324.CFIndex location = v178;
              v324.NSUInteger length = 1;
              CTRunGetGlyphs(v187, v324, (CGGlyph *)translations);
              CGRect BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(v181, kCTFontOrientationVertical, (const CGGlyph *)translations, 0, 1);
              double v188 = -BoundingRectsForGlyphs.size.width;
            }
            else
            {
              double v188 = v282[0][v178].width;
            }
            float64x2_t v189 = vaddq_f64(v266, vmlaq_n_f64(vmulq_n_f64(v264, y), v268, v273));
            sub_1002A455C(v275, v263, v184, buffer[0][v178], v285, v107, v189.f64[0], v189.f64[1], v188, v286.width);
          }
          ++v178;
        }
        while (v178 != v179);
        v228 = (__CFString *)CTFontCopyFamilyName(v181);
        if ([(__CFString *)v228 isEqualToString:@"Zapfino"]) {
          *(void *)(v259 + 24) |= 0x40000uLL;
        }

        if (v282[0])
        {
          v282[1] = v282[0];
          operator delete(v282[0]);
        }
        uint64_t v113 = v259;
        if (v283[0])
        {
          v283[1] = v283[0];
          operator delete(v283[0]);
        }
        if (buffer[0])
        {
          buffer[1] = buffer[0];
          operator delete(buffer[0]);
        }
LABEL_311:
        if ([(CRLWPAdornments *)v263 positionCount]) {
          sub_100152D20(v113, (uint64_t)v263);
        }

        ++v254;
        id v257 = (char *)v257 + 1;
        uint64_t v75 = v275;
      }
      while (v257 != v250);
      id v78 = [obj countByEnumeratingWithState:&v288 objects:v305 count:16];
      if (!v78)
      {
LABEL_317:

        if ((*(unsigned char *)(v259 + 25) & 8) != 0) {
          sub_1002A46C0(x, v230, v251, v259, v241, v242);
        }
        if (sub_100159020(v259))
        {
          OffsetForStringIndedouble x = CTLineGetOffsetForStringIndex(line, charIndex, 0);
          double v232 = *(double *)v308;
          v233 = sub_100061D58(v251);
          v234 = sub_100061D58(v251);
          [v234 scaleTextPercent];
          double v235 = CRLWPShapeLayout.gap(forColumnIndex:bodyWidth:)();
          sub_1001BAA00((uint64_t)translations, cf, 0x7FFFFFFFFFFFFFFFLL, 0, 2, OffsetForStringIndex + v232, v235);

          sub_100152B6C((uint64_t *)v259, (uint64_t)translations);
          if (cf) {
            CFRelease(cf);
          }
          sub_1001BAAFC(translations);
        }
        CFRelease(line);

        sub_1001BAAFC(buf);
        uint64_t v72 = v259;
        return sub_10015DF38(v72);
      }
    }
  }
  return sub_10015DF38(v72);
}

void sub_1002A0498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002A0A58(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  CFIndex v7 = sub_1001597CC(a2);
  BOOL result = v7 == 1;
  if (a4 > a3 && v7 != 1)
  {
    while (1)
    {
      uint64_t v9 = a4--;
      if (a4 <= a3) {
        break;
      }
      if ((sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * v9 - 2)) & 1) == 0) {
        goto LABEL_7;
      }
    }
    a4 = a3;
LABEL_7:
    if (a3 + 2 == v9) {
      return (*(_WORD *)(*(void *)(a1 + 64) + 2 * a4) & 0xFC00) == 56320;
    }
    else {
      return a4 == a3;
    }
  }
  return result;
}

void sub_1002A0B04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002A0B48(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 224);
  id v10 = [*(id *)(a1 + 112) count];
  if ((unint64_t)[*(id *)(a1 + 112) count] >= 2)
  {
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v11];
      id v13 = (char *)[v12 charIndex];

      if (v13 > a3) {
        break;
      }
      if (++v11 >= (unint64_t)[*(id *)(a1 + 112) count]) {
        goto LABEL_7;
      }
    }
    id v10 = (id)v11;
  }
LABEL_7:
  unint64_t v14 = (unint64_t)v10 - 1;
  CGFloat v15 = *(double *)(v8 + 464);
  CGFloat v16 = *(double *)(v8 + 472);
  CGFloat v17 = *(double *)(v8 + 488);
  if (*(double *)(v8 + 480) == 0.0) {
    double v18 = 1.0;
  }
  else {
    double v18 = *(double *)(v8 + 480);
  }
  double v19 = sub_1002A271C(a1, (uint64_t *)a2, v14, a3, a4, *(CGFloat *)(v8 + 464), *(CGFloat *)(v8 + 472), v18, *(CGFloat *)(v8 + 488));
  if ((*(_DWORD *)(v9 + 24) & 0x20000020) != 0) {
    double v19 = sub_1002A271C(a1, (uint64_t *)a2, v14, a3, a4, v15, v16, v18, v17);
  }
  CGFloat v23 = v19;
  CGFloat v24 = v20;
  CGFloat v25 = v21;
  CGFloat v26 = v22;
  *(double *)(a1 + 160) = *(double *)(a2 + 216) - fmax(*(double *)(a1 + 136), *(double *)(a1 + 128));
  uint64_t v27 = +[CRLWPFontMetricsCache sharedCache];
  [v27 validateFontHeightInfo:a1 + 120 description:@"calcHeightInfo"];

  long long v28 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v9 + 104) = v28;
  long long v29 = *(_OWORD *)(a1 + 152);
  long long v30 = *(_OWORD *)(a1 + 168);
  long long v31 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v9 + 184) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v9 + 16_Block_object_dispose(&STACK[0x360], 8) = v31;
  *(_OWORD *)(v9 + 152) = v30;
  *(_OWORD *)(v9 + 136) = v29;
  v33.size.double height = sub_10015DA38((double *)v9, *(void *)(v8 + 272), 0, *(double *)(v8 + 312));
  v33.origin.double x = *(CGFloat *)(v9 + 40);
  v33.origin.double y = *(CGFloat *)(v9 + 48);
  v33.size.double width = *(CGFloat *)(v9 + 56);
  *(CGFloat *)(v9 + 64) = v33.size.height;
  v32.origin.double x = v23;
  v32.origin.double y = v24;
  v32.size.double width = v25;
  v32.size.double height = v26;
  *(CGRect *)(v9 + 72) = CGRectUnion(v32, v33);
}

void sub_1002A0D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A0D64(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  uint64_t v5 = *(void *)(a2 + 224);
  uint64_t v6 = sub_100152D18(v5);
  id v7 = [v6 count];

  if (v7)
  {
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v8 = sub_100152D18(v5);
    id v9 = [v8 countByEnumeratingWithState:&v85 objects:v100 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v86;
      while (2)
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v86 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void **)(*((void *)&v85 + 1) + 8 * i);
          if ([v12 type] == 4)
          {
            unsigned int v71 = [v12 location];

            if (v71 == 1)
            {
              uint64_t v13 = sub_100152C58(v5);
              if (v13) {
                sub_1002A5CA4(v13, v14, v5);
              }
              unsigned int v71 = 1;
            }
            goto LABEL_15;
          }
        }
        id v9 = [v8 countByEnumeratingWithState:&v85 objects:v100 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    unsigned int v71 = 0;
LABEL_15:
    *a3 = 0.0;
    *a4 = 0.0;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    CGFloat v15 = sub_100152D18(v5);
    id v16 = [v15 countByEnumeratingWithState:&v81 objects:v99 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v82;
      double v18 = 0.0;
      do
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(void *)v82 != v17) {
            objc_enumerationMutation(v15);
          }
          double v20 = *(void **)(*((void *)&v81 + 1) + 8 * (void)j);
          if ([v20 type] == 4)
          {
            [v20 verticalAdjustment];
            if (v18 < v21) {
              double v18 = v21;
            }
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v81 objects:v99 count:16];
      }
      while (v16);
    }
    else
    {
      double v18 = 0.0;
    }

    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    double v22 = sub_100152D18(v5);
    id v23 = [v22 countByEnumeratingWithState:&v77 objects:v98 count:16];
    if (v23)
    {
      uint64_t v25 = *(void *)v78;
      *(void *)&long long v24 = 67109378;
      long long v70 = v24;
      do
      {
        CGFloat v26 = 0;
        do
        {
          if (*(void *)v78 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void **)(*((void *)&v77 + 1) + 8 * (void)v26);
          if (objc_msgSend(v27, "type", v70) == 4)
          {
            id v28 = v27;
            [v28 textPosition];
            double v30 = v29;
            double v32 = v31;
            [v28 setVerticalAdjustment:v18];
            if (v30 == 0.0 && v32 == 0.0)
            {
              if ((*(unsigned char *)(v5 + 25) & 0x20) != 0)
              {
                double v38 = (*(double *)(v5 + 120) + *(double *)(v5 + 136)) * 0.5;
                if (v71 != 2)
                {
                  [v28 verticalAdjustment];
                  double v51 = v50;
                  [v28 ascent];
                  double v38 = -v38 - v51;
                  goto LABEL_52;
                }
                unsigned int v41 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                if (qword_101719A70 != -1) {
                  dispatch_once(&qword_101719A70, &stru_1014E8DE0);
                }
                uint64_t v42 = off_10166B4A0;
                if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109890;
                  unsigned int v91 = v41;
                  __int16 v92 = 2082;
                  BOOL v93 = "void CRLWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(CRLWPTypesetterParamBlock *con"
                        "st, CGFloat &, CGFloat &)";
                  __int16 v94 = 2082;
                  uint64_t v95 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
                  __int16 v96 = 1024;
                  int v97 = 4451;
                  _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Vertical below is not currently supported.", buf, 0x22u);
                }
                if (qword_101719A70 != -1) {
                  dispatch_once(&qword_101719A70, &stru_1014E8E00);
                }
                unsigned int v43 = off_10166B4A0;
                if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR))
                {
                  unsigned int v53 = +[CRLAssertionHandler packedBacktraceString];
                  *(_DWORD *)buf = v70;
                  unsigned int v91 = v41;
                  __int16 v92 = 2114;
                  BOOL v93 = v53;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v43, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
                }
                unsigned int v44 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(CRLWPTypesetterParamBlock *const, CGFloat &, CGFloat &)"];
                double v45 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
                +[CRLAssertionHandler handleFailureInFunction:v44 file:v45 lineNumber:4451 isFatal:0 description:"Vertical below is not currently supported."];
              }
              else
              {
                if (v71 == 2)
                {
                  double v33 = *(double *)(v5 + 136);
                  [v28 verticalAdjustment];
                  double v35 = v34;
                  [v28 ascent];
                  double v37 = v36;
                  [v28 descent];
                  double v38 = v33 + 0.0 + v35 + v37;
                  double v40 = v38 + v39 - *(double *)(v5 + 136);
                  if (*a4 >= v40) {
                    double v40 = *a4;
                  }
                  *a4 = v40;
                  goto LABEL_55;
                }
                double v46 = *(double *)(v5 + 120);
                [v28 verticalAdjustment];
                double v48 = v47;
                [v28 ascent];
                double v38 = 0.0 - v46 - v48;
LABEL_52:
                double v52 = -(v38 - v49 + *(double *)(v5 + 120));
                if (*a3 >= v52) {
                  double v52 = *a3;
                }
                *a3 = v52;
              }
LABEL_55:
              [v28 setTextPosition:0.0 v38];
            }
          }
          CGFloat v26 = (char *)v26 + 1;
        }
        while (v23 != v26);
        id v23 = [v22 countByEnumeratingWithState:&v77 objects:v98 count:16];
      }
      while (v23);
    }
  }
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  __int16 v54 = sub_100152CF8(v5);
  id v55 = [v54 countByEnumeratingWithState:&v73 objects:v89 count:16];
  if (v55)
  {
    uint64_t v56 = *(void *)v74;
    do
    {
      for (k = 0; k != v55; k = (char *)k + 1)
      {
        if (*(void *)v74 != v56) {
          objc_enumerationMutation(v54);
        }
        uint64_t v58 = *(void **)(*((void *)&v73 + 1) + 8 * (void)k);
        if ([v58 underline])
        {
          [v58 thickness];
          double v60 = v59;
          if ([v58 underline] == (id)2)
          {
            double v60 = v60 * 3.0;
          }
          else if ([v58 underline] == (id)3 && (*(unsigned char *)(v5 + 25) & 0x20) == 0)
          {
            double v61 = sub_1001CE960(v60);
            double v60 = v61 + v61;
          }
          [v58 start];
          double v63 = v62;
          if ([v58 adornmentLocation] == 2)
          {
            double v64 = v60 * 0.5 + v63;
            double v65 = *(double *)(v5 + 136);
            if (v64 > v65)
            {
              double v66 = v64 - v65;
              if (*a4 >= v66) {
                double v66 = *a4;
              }
              *a4 = v66;
            }
          }
          else if ([v58 adornmentLocation] == 1)
          {
            double v67 = v63 + v60 * -0.5;
            double v68 = *(double *)(v5 + 120);
            if (v67 < v68)
            {
              double v69 = -(v67 + v68);
              if (*a3 >= v69) {
                double v69 = *a3;
              }
              *a3 = v69;
            }
          }
        }
      }
      id v55 = [v54 countByEnumeratingWithState:&v73 objects:v89 count:16];
    }
    while (v55);
  }
}

void sub_1002A14F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A15AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a3 + 72);
  double v7 = *(double *)(a3 + 80);
  double v9 = *(double *)(a3 + 88);
  CGFloat height = *(double *)(a3 + 96);
  __p = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v10 = sub_100152C58(a3);
  if (v10)
  {
    double v11 = sub_1002A34C4(v10, a2, a3);
    uint64_t v12 = *(void *)(a3 + 40);
    uint64_t v14 = *(void *)(a3 + 56);
    double v13 = *(double *)(a3 + 64);
    double v15 = v11 + v13;
    double v16 = *(double *)(a3 + 48) + v13 - (v11 + v13);
    uint64_t v17 = (v99 - (unsigned char *)__p) >> 5;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59) {
      sub_100004E40();
    }
    uint64_t v19 = v100 - (unsigned char *)__p;
    if ((v100 - (unsigned char *)__p) >> 4 > v18) {
      unint64_t v18 = v19 >> 4;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20) {
      double v21 = (char *)sub_100148898((uint64_t)&v100, v20);
    }
    else {
      double v21 = 0;
    }
    double v22 = &v21[32 * v17];
    *(void *)double v22 = v12;
    *((double *)v22 + 1) = v16;
    *((void *)v22 + 2) = v14;
    *((double *)v22 + 3) = v15;
    __p = v22;
    uint64_t v100 = &v21[32 * v20];
    uint64_t v99 = v22 + 32;
  }
  uint64_t v23 = *(void *)(a3 + 40);
  double v24 = *(double *)(a3 + 48);
  uint64_t v25 = *(void *)(a3 + 56);
  double v26 = sub_1001459A0((double *)(a3 + 104), a2) + v24;
  if ((*(unsigned char *)(a3 + 25) & 0x20) != 0)
  {
    double v27 = 1.79999995;
    double v24 = floor(v26 - *(double *)(a3 + 120)) + 1.79999995 * -0.5;
  }
  else
  {
    double v27 = floor(v26) + 1.79999995 + 1.79999995 * 0.5 - v24;
  }
  id v28 = v99;
  if (v99 >= v100)
  {
    double v30 = (char *)__p;
    uint64_t v31 = (v99 - (unsigned char *)__p) >> 5;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 59) {
      sub_100004E40();
    }
    uint64_t v33 = v100 - (unsigned char *)__p;
    if ((v100 - (unsigned char *)__p) >> 4 > v32) {
      unint64_t v32 = v33 >> 4;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      double v35 = (char *)sub_100148898((uint64_t)&v100, v34);
      double v30 = (char *)__p;
      id v28 = v99;
    }
    else
    {
      double v35 = 0;
    }
    double v36 = &v35[32 * v31];
    *(void *)double v36 = v23;
    *((double *)v36 + 1) = v24;
    double v37 = &v35[32 * v34];
    *((void *)v36 + 2) = v25;
    *((double *)v36 + 3) = v27;
    double v29 = v36 + 32;
    if (v28 == v30)
    {
      double v39 = v36;
    }
    else
    {
      do
      {
        long long v38 = *((_OWORD *)v28 - 1);
        double v39 = v36 - 32;
        *((_OWORD *)v36 - 2) = *((_OWORD *)v28 - 2);
        *((_OWORD *)v36 - 1) = v38;
        v28 -= 32;
        v36 -= 32;
      }
      while (v28 != v30);
    }
    __p = v39;
    uint64_t v99 = v29;
    uint64_t v100 = v37;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *(void *)uint64_t v99 = v23;
    *((double *)v28 + 1) = v24;
    double v29 = v28 + 32;
    *((void *)v28 + 2) = v25;
    *((double *)v28 + 3) = v27;
  }
  uint64_t v99 = v29;
  double v40 = sub_1001459A0((double *)(a3 + 104), a2);
  uint64_t v41 = *(void *)(a3 + 40);
  double v42 = *(double *)(a3 + 48);
  uint64_t v43 = *(void *)(a3 + 56);
  double v93 = *(double *)(a3 + 64);
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  unsigned int v44 = sub_100152D18(a3);
  id v45 = [v44 countByEnumeratingWithState:&v94 objects:v101 count:16];
  uint64_t v89 = v43;
  uint64_t v88 = v41;
  double v90 = v9;
  double v91 = v7;
  double v92 = v6;
  if (v45)
  {
    uint64_t v46 = *(void *)v95;
    double v47 = 0.0;
    double v48 = 0.0;
    double v49 = 0.0;
    do
    {
      for (unint64_t i = 0; i != v45; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v95 != v46) {
          objc_enumerationMutation(v44);
        }
        double v51 = *(void **)(*((void *)&v94 + 1) + 8 * i);
        if ([v51 type] == 4)
        {
          [v51 textPosition];
          double v53 = v52;
          if ([v51 location] == 1)
          {
            [v51 ascent];
            double v55 = -(v40 + v53 - v54);
            if (v47 < v55) {
              double v47 = v55;
            }
          }
          else
          {
            [v51 descent];
            double v62 = v53 - v40 + v61;
            if (v48 < v62) {
              double v48 = v62;
            }
          }
        }
        else if ([v51 type] == 6)
        {
          [v51 textPosition];
          double v57 = v56;
          [v51 descent];
          double v59 = v58;
          double v60 = *((double *)[v51 rects] + 3) * 0.5;
          if (v49 < v57 - v40 + v59 + v60) {
            double v49 = v57 - v40 + v59 + v60;
          }
        }
      }
      id v45 = [v44 countByEnumeratingWithState:&v94 objects:v101 count:16];
    }
    while (v45);
  }
  else
  {
    double v47 = 0.0;
    double v48 = 0.0;
    double v49 = 0.0;
  }

  double v63 = v42 + v93 - (v93 + v47);
  if (v49 >= v48) {
    double v64 = v49;
  }
  else {
    double v64 = v48;
  }
  double v65 = v93 + v47 + v64;
  double v66 = v99;
  if (v99 >= v100)
  {
    unsigned int v71 = (char *)__p;
    uint64_t v72 = (v99 - (unsigned char *)__p) >> 5;
    unint64_t v73 = v72 + 1;
    CGFloat y = v91;
    CGFloat x = v92;
    CGFloat width = v90;
    if ((unint64_t)(v72 + 1) >> 59) {
      sub_100004E40();
    }
    uint64_t v74 = v100 - (unsigned char *)__p;
    if ((v100 - (unsigned char *)__p) >> 4 > v73) {
      unint64_t v73 = v74 >> 4;
    }
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v75 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v75 = v73;
    }
    if (v75)
    {
      long long v76 = (char *)sub_100148898((uint64_t)&v100, v75);
      unsigned int v71 = (char *)__p;
      double v66 = v99;
    }
    else
    {
      long long v76 = 0;
    }
    long long v77 = &v76[32 * v72];
    *(void *)long long v77 = v88;
    *((double *)v77 + 1) = v63;
    long long v78 = &v76[32 * v75];
    *((void *)v77 + 2) = v89;
    *((double *)v77 + 3) = v65;
    double v67 = v77 + 32;
    if (v66 == v71)
    {
      long long v80 = v77;
    }
    else
    {
      do
      {
        long long v79 = *((_OWORD *)v66 - 1);
        long long v80 = v77 - 32;
        *((_OWORD *)v77 - 2) = *((_OWORD *)v66 - 2);
        *((_OWORD *)v77 - 1) = v79;
        v66 -= 32;
        v77 -= 32;
      }
      while (v66 != v71);
    }
    __p = v80;
    uint64_t v99 = v67;
    uint64_t v100 = v78;
    if (v71) {
      operator delete(v71);
    }
  }
  else
  {
    *(void *)uint64_t v99 = v88;
    *((double *)v66 + 1) = v63;
    double v67 = v66 + 32;
    *((void *)v66 + 2) = v89;
    *((double *)v66 + 3) = v65;
    CGFloat y = v91;
    CGFloat x = v92;
    CGFloat width = v90;
  }
  uint64_t v99 = v67;
  if (*(unsigned char *)(a1 + 29))
  {
    v102.origin.CGFloat x = x;
    v102.origin.CGFloat y = y;
    v102.size.CGFloat width = width;
    v102.size.CGFloat height = height;
    CGRect v103 = CGRectInset(v102, -10.0, 0.0);
    CGFloat x = v103.origin.x;
    CGFloat y = v103.origin.y;
    CGFloat width = v103.size.width;
    CGFloat height = v103.size.height;
    double v67 = v99;
  }
  long long v81 = (double *)__p;
  if (__p != v67)
  {
    do
    {
      double v82 = v81[3];
      if (v82 != INFINITY)
      {
        double v83 = *v81;
        uint64_t v84 = *((void *)v81 + 1);
        uint64_t v85 = *((void *)v81 + 2);
        v104.origin.CGFloat x = x;
        v104.origin.CGFloat y = y;
        v104.size.CGFloat width = width;
        v104.size.CGFloat height = height;
        CGRect v105 = CGRectUnion(v104, *(CGRect *)(&v82 - 3));
        CGFloat x = v105.origin.x;
        CGFloat y = v105.origin.y;
        CGFloat width = v105.size.width;
        CGFloat height = v105.size.height;
        double v67 = v99;
      }
      v81 += 4;
    }
    while (v81 != (double *)v67);
  }
  double v86 = 50.0;
  if ((*(void *)(a3 + 24) & 0x40000) == 0) {
    double v86 = 0.0;
  }
  CGFloat v87 = -((*(double *)(a3 + 120) + *(double *)(a3 + 136)) * 0.25 + v86);
  v106.origin.CGFloat x = x;
  v106.origin.CGFloat y = y;
  v106.size.CGFloat width = width;
  v106.size.CGFloat height = height;
  *(CGRect *)(a3 + 72) = CGRectInset(v106, v87, v87);
  if (__p)
  {
    uint64_t v99 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1002A1C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A1CA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1CEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1D30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1D74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1DB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1DFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1E40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1E84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1EC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A1F0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__CFString *sub_1002A1F50(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (a4 >= 9)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E84F8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096654();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8518);
    }
    double v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v14 = +[NSString stringWithUTF8String:"NSString *CRLWPCoreTextTypesetter::pNumberedListLabel(const CRLWPLayoutState *, CRLWPParagraphEnumerator, CRLWPParagraphLevel, BOOL, NSUInteger *) const"];
    double v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:2306 isFatal:0 description:"illegal list level"];

    uint64_t v12 = &stru_101538650;
  }
  else
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = sub_1002469D0(v9, *(void **)(a1 + 16));
    double v11 = v10;
    if (a6) {
      *a6 = [v10 listNumberAtParIndex:[v10 paragraphIndexAtCharIndex:*a2]];
    }
    uint64_t v12 = [v11 numberedListLabelAtCharIndex:*a2];
  }

  return v12;
}

void sub_1002A2158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A219C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A21E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A2224(void *a1, unint64_t a2, uint64_t a3)
{
  id v9 = a1;
  uint64_t v5 = [v9 string];
  if (a2 < a2 + a3)
  {
    do
    {
      CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(v5, a2);
      unsigned int v7 = sub_1001C998C(CharacterAtIndex);
      if (CharacterAtIndex != v7)
      {
        uint64_t v8 = +[NSString stringWithFormat:@"%C", v7];
        [v9 replaceCharactersInRange:a2 withString:v8];
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
}

void sub_1002A2304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A2338(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A237C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A23C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A2404(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002A2448(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)a2 + *(void *)(*(void *)(a2 + 224) + 8);
  if (v3) {
    uint64_t v4 = v3 - 1;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a2 + 240) = v4;
  if (v3) {
    unsigned __int16 v5 = [(id)[*(id *)(a1 + 16) characterAtIndex:]];
  }
  else {
    unsigned __int16 v5 = 0;
  }
  *(_WORD *)(a2 + 232) = v5;
  return v3;
}

void sub_1002A24A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A24E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002A252C()
{
  if (qword_1016A9580 != -1) {
    dispatch_once(&qword_1016A9580, &stru_1014E8538);
  }
  double v0 = (void *)qword_1016A9578;

  return v0;
}

void sub_1002A2580(id a1)
{
  id v4 = (id)objc_opt_new();
  uint64_t v1 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  [v4 formUnionWithCharacterSet:v1];

  [v4 addCharactersInRange:8232, 1];
  [v4 addCharactersInRange:65532, 1];
  [v4 addCharactersInRange:45, 1];
  [v4 removeCharactersInRange:160, 1];
  [v4 removeCharactersInRange:8239, 1];
  [v4 removeCharactersInRange:8199, 1];
  [v4 removeCharactersInRange:65279, 1];
  id v2 = [v4 copy];
  uint64_t v3 = (void *)qword_1016A9578;
  qword_1016A9578 = (uint64_t)v2;
}

void sub_1002A2674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A2694(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A26D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1002A271C(uint64_t a1, uint64_t *a2, unint64_t a3, char *a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v72 = *a2;
  uint64_t v74 = a2[28];
  if ((unint64_t)[*(id *)(a1 + 112) count] <= a3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8598);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010966DC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E85B8);
    }
    double v67 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v67, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v68 = +[NSString stringWithUTF8String:"CGRect CRLWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(CRLWPTypesetterParamBlock *const, const CGRect, const NSUInteger, const NSRange)"];
    uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v68 file:v14 lineNumber:2432 isFatal:0 description:"Bad run index"];
  }
  GlyphRuns = (void *)sub_100152BC0(v74);
  if (GlyphRuns)
  {
    uint64_t v16 = sub_100152BE4(v74, 0);
    uint64_t v17 = (const __CTLine *)sub_1001BAB78(v16);
    GlyphRuns = CTLineGetGlyphRuns(v17);
  }
  id v69 = GlyphRuns;
  id v75 = [v69 count];
  unint64_t v18 = 0;
  CFStringRef v65 = kCTFontAttributeName;
  unint64_t v19 = a3;
  double x = a6;
  CGFloat y = a7;
  CGFloat width = a8;
  CGFloat height = a9;
  unint64_t v24 = (unint64_t)v75;
  do
  {
    if (v18 >= v24 || (*(unsigned char *)(v74 + 25) & 0x40) != 0)
    {
      uint64_t v43 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19, v65];
      unint64_t v25 = v18;
      unint64_t location = (unint64_t)[v43 charIndex];

      BOOL v44 = 0;
      id v31 = 0;
      long long v76 = 0;
      uint64_t v45 = 1;
    }
    else
    {
      unint64_t v25 = v18;
      double v26 = [v69 objectAtIndexedSubscript:v18];

      long long v76 = CTRunGetAttributes((CTRunRef)v26);
      unint64_t location = CTRunGetStringRange((CTRunRef)v26).location;
      id v28 = (char *)a3;
      do
      {
        unint64_t v19 = (unint64_t)v28;
        if (v28 >= (char *)objc_msgSend(*(id *)(a1 + 112), "count", v65) - 1) {
          break;
        }
        double v29 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19 + 1];
        BOOL v30 = (unint64_t)[v29 charIndex] > location;

        id v28 = (char *)(v19 + 1);
      }
      while (!v30);
      id v31 = [v76 objectForKeyedSubscript:v65];

      unint64_t v32 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19];
      id v33 = [v32 ctFont];

      if (v31 == v33)
      {
        int v42 = 0;
        id v31 = 0;
      }
      else
      {
        unint64_t v34 = [v76 objectForKeyedSubscript:kCTVerticalFormsAttributeName];

        if (v34 && CFBooleanGetValue((CFBooleanRef)v34)
          || (CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v26), GlyphCount < 1))
        {
          int v42 = 0;
        }
        else
        {
          sub_10002B3D8(buffer, GlyphCount);
          v78.unint64_t location = 0;
          v78.NSUInteger length = 0;
          CTRunGetStringIndices((CTRunRef)v26, v78, buffer[0]);
          uint64_t v36 = 0;
          while (1)
          {
            int v37 = *(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * buffer[0][v36]);
            if ((sub_1001CA378(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * buffer[0][v36])) & 1) == 0)
            {
              if (v37 != 8209) {
                break;
              }
              long long v38 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19];
              double v39 = [v38 attributes];
              double v40 = [v39 objectForKeyedSubscript:@"__wpAttachmentMap"];
              BOOL v41 = v40 == 0;

              if (v41) {
                break;
              }
            }
            if (GlyphCount == ++v36)
            {
              int v42 = 1;
              goto LABEL_33;
            }
          }
          int v42 = 0;
LABEL_33:
          if (buffer[0])
          {
            buffer[1] = buffer[0];
            operator delete(buffer[0]);
          }
        }
      }
      uint64_t v45 = 0;
      BOOL v44 = v42 != 0;
    }
    uint64_t v46 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19];
    double v47 = [v76 objectForKeyedSubscript:kCTVerticalFormsAttributeName];

    char v48 = 0;
    if (*(unsigned char *)(a1 + 27) && v76 && v47) {
      char v48 = CFBooleanGetValue((CFBooleanRef)v47) != 0;
    }
    if ([v46 charIndex] < &a4[a5] || objc_msgSend(v46, "charIndex") == a4 && !a5)
    {
      if ([v46 flags]) {
        [v46 charIndex];
      }
      if (location < *(void *)(a1 + 48) - 1
        || (char *)location == a4
        || (sub_1001CA284(*(unsigned __int16 *)(*(void *)(a1 + 64) + 2 * location)) & 1) == 0)
      {
        if (v44) {
          double v49 = 0;
        }
        else {
          double v49 = (const __CTFont *)v31;
        }
        sub_1002A30DC(a1, a2, v46, v49, v48);
      }
      if (([v46 flags] & 4) != 0)
      {
        double v50 = [v46 characterStyle];
        double v51 = sub_100061D48(v72);
        double v52 = sub_1001CD4F8(v50, v51, 0x12uLL);

        if (v52 && [v52 isEnabled])
        {
          [v52 shadowBoundsForRect:a6, a7, a8, a9];
          v84.origin.double x = v53;
          v84.origin.CGFloat y = v54;
          v84.size.CGFloat width = v55;
          v84.size.CGFloat height = v56;
          v79.origin.double x = x;
          v79.origin.CGFloat y = y;
          v79.size.CGFloat width = width;
          v79.size.CGFloat height = height;
          CGRect v80 = CGRectUnion(v79, v84);
          double x = v80.origin.x;
          CGFloat y = v80.origin.y;
          CGFloat width = v80.size.width;
          CGFloat height = v80.size.height;
          *(void *)(v74 + 24) |= 0x20uLL;
        }
      }
      if (([v46 flags] & 8) != 0)
      {
        double v57 = [v46 characterStyle];
        double v58 = sub_100061D48(v72);
        double v59 = sub_1001CD4F8(v57, v58, 6uLL);

        if (v59)
        {
          [v59 renderedWidth];
          CGFloat v61 = v60 * -0.5;
          v81.origin.double x = a6;
          v81.origin.CGFloat y = a7;
          v81.size.CGFloat width = a8;
          v81.size.CGFloat height = a9;
          CGRect v85 = CGRectInset(v81, v61, v61);
          v82.origin.double x = x;
          v82.origin.CGFloat y = y;
          v82.size.CGFloat width = width;
          v82.size.CGFloat height = height;
          CGRect v83 = CGRectUnion(v82, v85);
          double x = v83.origin.x;
          CGFloat y = v83.origin.y;
          CGFloat width = v83.size.width;
          CGFloat height = v83.size.height;
          *(void *)(v74 + 24) |= 0x20000000uLL;
        }
      }
      if (([v46 flags] & 0x10) != 0) {
        *(void *)(v74 + 24) |= 0x40000000uLL;
      }
      if (([v46 flags] & 0x20) != 0) {
        *(void *)(v74 + 24) |= 0x80000000uLL;
      }
    }

    unint64_t v62 = v25 + 1;
    v19 += v45;
    if (v75)
    {
      unint64_t v24 = (unint64_t)v75;
      BOOL v63 = v62 >= (unint64_t)v75;
    }
    else
    {
      BOOL v63 = v19 >= (unint64_t)[*(id *)(a1 + 112) count];
      unint64_t v24 = 0;
    }
    unint64_t v18 = v62;
  }
  while (!v63);

  return x;
}

void sub_1002A2EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Unwind_Resume(a1);
}

void sub_1002A3054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A3098(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A30DC(uint64_t a1, uint64_t *a2, void *a3, const __CTFont *a4, char a5)
{
  id v9 = a3;
  uint64_t v10 = v9;
  uint64_t v11 = *a2;
  if (!a4) {
    a4 = (const __CTFont *)[v9 ctFont];
  }
  if (*(unsigned char *)(a1 + 27)) {
    a4 = sub_1001C9C74(a4);
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  sub_1001CE5C0((uint64_t)a4, &v31);
  uint64_t v12 = [v10 characterStyle];
  double v13 = sub_100061D48(v11);
  int v14 = sub_1001CD5B0(v12, v13, 22, 0);

  BOOL v15 = v14 != 0;
  if (v14)
  {
    CGFloat Size = CTFontGetSize(a4);
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(a4, Size * 1.5, 0, 0);
    sub_1001CE5C0((uint64_t)CopyWithAttributes, &v25);
    long long v33 = v27;
    long long v34 = v28;
    long long v35 = v29;
    long long v36 = v30;
    long long v31 = v25;
    long long v32 = v26;
  }
  else
  {
    CTFontRef CopyWithAttributes = 0;
  }
  objc_msgSend(v10, "characterStyle", 0, 0, 0, unk_101176400, 0, 0, 0, unk_101176420, 0, 0, 0, unk_101176440, v31, v32, v33, v34, v35,
  unint64_t v18 = v36);
  unint64_t v19 = sub_100061D48(v11);
  double v20 = sub_1001CD810(v18, v19, 0, 0.0);

  if (v20 != 0.0)
  {
    if (v14 == 2)
    {
      if (v20 >= 0.0)
      {
        double Descent = CTFontGetDescent(CopyWithAttributes);
        double v24 = v20 - (Descent - CTFontGetDescent(a4));
        if (v24 > 0.0) {
          *(double *)&long long v26 = v24;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (v14 == 1)
      {
        if (v20 <= 0.0)
        {
          double CapHeight = CTFontGetCapHeight(CopyWithAttributes);
          double v22 = -v20 - (CapHeight - CTFontGetCapHeight(a4));
          if (v22 <= 0.0) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
        goto LABEL_18;
      }
      if (v20 > 0.0)
      {
LABEL_18:
        *(double *)&long long v26 = v20;
LABEL_22:
        BOOL v15 = 1;
        goto LABEL_23;
      }
      if (v20 >= 0.0) {
        goto LABEL_22;
      }
    }
    double v22 = -v20;
LABEL_21:
    *(double *)&long long v27 = v22;
    goto LABEL_22;
  }
LABEL_23:
  if (CopyWithAttributes) {
    CFRelease(CopyWithAttributes);
  }
  if (v15) {
    *(void *)(a2[28] + 24) |= 0x400uLL;
  }
  sub_1002A33B0(a1, (double *)&v31, (uint64_t)&v25, (uint64_t)a2, a5);
}

void sub_1002A3358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A33B0(uint64_t result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v5 = a2[2];
  double v6 = a2[4];
  double v7 = v5 + v6;
  if (!*(unsigned char *)(result + 27) || (a5 & 1) != 0)
  {
    if (v7 < *(double *)(result + 184)) {
      double v7 = *(double *)(result + 184);
    }
    *(double *)(result + 184) = v7;
    double v11 = v5 + *(double *)(a3 + 16);
    a2[2] = v11;
    a2[4] = v6 + *(double *)(a3 + 32);
    double v12 = *(double *)(result + 136);
    if (v12 < v11) {
      double v12 = v11;
    }
    *(double *)(result + 136) = v12;
    double v13 = *(double *)(result + 152);
    if (v13 < a2[4]) {
      double v13 = a2[4];
    }
    *(double *)(result + 152) = v13;
    double v8 = 0.0;
  }
  else
  {
    double v8 = *(double *)(a3 + 16) + v7 * 0.5;
    double v9 = v7 * 0.5 + *(double *)(a3 + 32);
    double v10 = *(double *)(result + 136);
    if (v10 < v8) {
      double v10 = *(double *)(a3 + 16) + v7 * 0.5;
    }
    *(double *)(result + 136) = v10;
    if (*(double *)(result + 152) >= v9) {
      double v9 = *(double *)(result + 152);
    }
    *(double *)(result + 152) = v9;
    if (v7 < *(double *)(result + 184)) {
      double v7 = *(double *)(result + 184);
    }
    *(double *)(result + 184) = v7;
  }
  double v14 = a2[6];
  double v15 = *(double *)(result + 176);
  if (*(double *)(result + 168) >= v14) {
    double v14 = *(double *)(result + 168);
  }
  *(double *)(result + 16_Block_object_dispose(&STACK[0x360], 8) = v14;
  double v16 = *(double *)(result + 120);
  if (v16 < *a2) {
    double v16 = *a2;
  }
  *(double *)(result + 120) = v16;
  double v17 = a2[7];
  if (v15 >= v17) {
    double v17 = v15;
  }
  *(double *)(result + 176) = v17;
  if (v8 == 0.0) {
    double v8 = a2[2];
  }
  double v18 = v8 + a2[5];
  if (*(double *)(a4 + 216) >= v18) {
    double v18 = *(double *)(a4 + 216);
  }
  *(double *)(a4 + 216) = v18;
  return result;
}

double sub_1002A34C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = 0.0;
  if (sub_100152C58(a3))
  {
    double v6 = sub_1001459A0((double *)(a3 + 104), a2);
    double v7 = (void *)sub_100152BFC(a3);
    if (v7[1] != *v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)sub_100152BFC(a3) + v8;
        CGFloat ascent = 0.0;
        double v11 = (const __CTLine *)sub_1001BAB78(v10);
        CTLineGetTypographicBounds(v11, &ascent, 0, 0);
        if (v5 <= -(v6 + *(double *)(v10 + 16) - ascent)) {
          double v5 = -(v6 + *(double *)(v10 + 16) - ascent);
        }
        ++v9;
        double v12 = (void *)sub_100152BFC(a3);
        v8 += 104;
      }
      while (v9 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12[1] - *v12) >> 3));
    }
  }
  return v5;
}

void sub_1002A35C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A360C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A3650(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A3694(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A36D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A371C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A3760(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A37A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A37E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A382C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1002A3870(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5 = *(double *)(a4 + 40);
  double v6 = sub_100061D58(a3);
  [v6 frameBounds];
  double v8 = v5 - v7;

  double v9 = a1 - v8;
  if (v9 < 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8E20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096764();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8E40);
    }
    uint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v11 = +[NSString stringWithUTF8String:"CGFloat CRLWPCoreTextTypesetter::pLineRefStartForLineFragment(const CRLWPLayoutState *, const CRLWPLineFragment *, CGFloat) const"];
    double v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:4558 isFatal:0 description:"Negative lineRef start position"];
  }
  return v9;
}

void sub_1002A3A2C(_Unwind_Exception *a1)
{
  id v2 = v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002A3A6C(uint64_t a1, uint64_t a2, void *a3, CTRunRef *a4, uint64_t a5, void *a6, CGGlyph *a7, CGSize *a8)
{
  CGSize advances = a8;
  id v14 = a3;
  id v47 = a6;
  double v15 = [*(id *)(a1 + 56) characterStyleAtCharIndex:CTRunGetStringRange(*a4).location effectiveRange:0];
  double v16 = sub_100061D48(a2);
  double v17 = sub_1001CD4F8(v15, v16, 0xBuLL);
  [v17 doubleValue];
  double v19 = v18;

  double v20 = CTRunGetAttributes(*a4);
  double v21 = [v20 objectForKeyedSubscript:kCTRunDelegateAttributeName];

  if (!v21) {
    goto LABEL_7;
  }
  v49.unint64_t location = 0;
  v49.NSUInteger length = 1;
  CTRunGetStringIndices(*a4, v49, buffer);
  uint64_t v22 = *(void *)(a1 + 232);
  if (v22 && *(__int16 *)(*(void *)(a1 + 64) + 2 * buffer[0]) == -4)
  {
    uint64_t v23 = sub_10050309C(v22, buffer[0]);
    BOOL v24 = v23 != 0;
    if (v15 && v23)
    {
      long long v25 = sub_100061D48(a2);
      long long v26 = sub_1001CD4F8(0, v25, 0xBuLL);
      [v26 doubleValue];
      double v19 = v27;

LABEL_7:
      BOOL v24 = 1;
    }
  }
  else
  {
    BOOL v24 = 0;
  }
  long long v28 = sub_100061D58(a2);
  id v29 = [v28 scaleTextPercent];

  long long v30 = CTFontCreateWithName(@"HiraMinProN-W3", v19 * (float)((float)(unint64_t)v29 / 100.0) / 3.0, 0);
  if (v30)
  {
    if (v24)
    {
      uint64_t v31 = objc_opt_class();
      long long v32 = [v20 objectForKeyedSubscript:@"CRLWPCharacterFillAttribute"];
      long long v33 = sub_1002469D0(v31, v32);

      if (!v33
        || ([v33 referenceColor],
            long long v34 = objc_claimAutoreleasedReturnValue(),
            id v35 = [v34 CGColor],
            v34,
            !v35))
      {
        [v20 objectForKeyedSubscript:kCTForegroundColorAttributeName];
        id v35 = (id)objc_claimAutoreleasedReturnValue();
      }
      [v14 setFont:v30 advances:advances];
      [v14 setColor:v35];
      unsigned int v36 = [v47 characterAtIndex:0];
      LOWORD(buffer[0]) = v36;
      uint64_t v37 = sub_1001CEE40(*(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 27), 4);
      uint64_t v38 = v37;
      if (v36 == 65093)
      {
        if (v37 == 2 || *(void *)(a1 + 80) == 1)
        {
          unsigned int v36 = 8226;
          LOWORD(buffer[0]) = 8226;
        }
        else
        {
          unsigned int v36 = 65093;
        }
      }
      [v14 setShouldRotate:(v36 == 65093) & (*(_DWORD *)(a5 + 24) >> 13)];
      BOOL GlyphsForCharacters = CTFontGetGlyphsForCharacters(v30, (const UniChar *)buffer, a7, 1);
      if (GlyphsForCharacters)
      {
        CTFontGetAdvancesForGlyphs((CTFontRef)[v14 font], kCTFontOrientationDefault, a7, advancesa, 1);
        double Ascent = CTFontGetAscent(v30);
        [v14 setAscent:Ascent descent:CTFontGetDescent(v30) advance:advancesa->width];
        [v14 setLocation:v38];
      }
    }
    else
    {
      BOOL GlyphsForCharacters = 0;
    }
    CFRelease(v30);
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8DA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010967EC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8DC0);
    }
    double v39 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v40 = +[NSString stringWithUTF8String:"BOOL CRLWPCoreTextTypesetter::pSetUpEmphasisMarkAdornments(const CRLWPLayoutState *, CRLWPAdornments *__strong, const CTRunRef &, CRLWPLineFragment *, NSString *__strong, CGGlyph &, CGSize &) const"];
    BOOL v41 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v40, v41, 4324, 0, "Emphasis marks, no font.");

    BOOL GlyphsForCharacters = 0;
  }

  return GlyphsForCharacters;
}

void sub_1002A3F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A402C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A40B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A40F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

char *sub_1002A413C(uint64_t a1, unint64_t a2)
{
  if (![*(id *)(a1 + 112) count])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E89B8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096874();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E89D8);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v5 = +[NSString stringWithUTF8String:"NSUInteger CRLWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex(CRLWPCharIndex) const"];
    double v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:3902 isFatal:0 description:"Bad runCount"];
  }
  double v7 = (char *)[*(id *)(a1 + 112) count];
  if ((unint64_t)[*(id *)(a1 + 112) count] >= 2)
  {
    uint64_t v8 = 1;
    while (1)
    {
      double v9 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v8];
      BOOL v10 = (unint64_t)[v9 charIndex] > a2;

      if (v10) {
        break;
      }
      if (++v8 >= (unint64_t)[*(id *)(a1 + 112) count]) {
        return v7 - 1;
      }
    }
    double v7 = (char *)v8;
  }
  return v7 - 1;
}

void sub_1002A4344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1002A4370(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double result)
{
  if ((a3 & 1) == 0 && a5 && !a2 && a6 && a7 && result > 0.0 && a4 && a4 - 1 >= 0)
  {
    double v8 = *(double *)(a5 + 16 * (a4 - 1)) + *(double *)(a6 + 16 * (a4 - 1));
    uint64_t v9 = 16 * a4 - 16;
    BOOL v10 = (double *)(a6 + v9);
    double v11 = (double *)(a5 + v9);
    do
    {
      double v12 = v8 - (*v11 + *v10);
      if (v12 >= result) {
        break;
      }
      if (*(_WORD *)(*(void *)(a1 + 64) + 2 * *(void *)(a7 - 8 + 8 * a4)) == 9)
      {
        if (v12 >= 0.0) {
          return v8 - (*v11 + *v10);
        }
        return result;
      }
      --a4;
      v10 -= 2;
      v11 -= 2;
    }
    while (a4 >= 1);
  }
  return result;
}

id sub_1002A440C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (![v3 count]
    || ([v3 lastObject],
        double v5 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v6 = [v5 merge:v4],
        v5,
        (v6 & 1) == 0))
  {
    [v3 addObject:v4];
  }
  double v7 = [v3 lastObject];

  return v7;
}

void sub_1002A44AC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002A44D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4518(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A455C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10)
{
  id v18 = a2;
  if ((a6 & 1) != 0
    || (sub_1001CA478(a3) & 1) == 0
    && (+[NSCharacterSet punctuationCharacterSet],
        double v21 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v22 = [v21 characterIsMember:a3],
        v21,
        (v22 & 1) == 0))
  {
    if ([v18 location] != 1
      || (long long v23 = xmmword_101176F48,
          [*(id *)(a1 + 56) smartFieldAtCharIndex:a4 attributeKind:7 effectiveRange:&v23],
          (double v19 = objc_claimAutoreleasedReturnValue()) == 0)
      || (long long v20 = v23, v19, a4 < (unint64_t)v20)
      || a4 - (unint64_t)v20 >= *((void *)&v20 + 1))
    {
      [v18 addAdornmentWithCharIndex:[*(id *)(a1 + 56) charIndexMappedToStorage:a4] point:a5 glyph:a7 + (a9 - a10) * 0.5 rect:0.0, a7, fabs(a9), 1.0];
    }
  }
}

void sub_1002A469C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double *sub_1002A46C0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  BOOL result = (double *)sub_100152BE4(a4, 0);
  double v12 = result[1];
  double v13 = 0.0;
  unsigned int v14 = 3;
  switch(a5)
  {
    case 4:
      double v13 = 2.0;
      unsigned int v14 = 7;
      goto LABEL_9;
    case 5:
      double v13 = 2.0;
      unsigned int v14 = 6;
      goto LABEL_9;
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
    case 11:
    case 13:
      goto LABEL_9;
    case 12:
      double v13 = 1.0;
      unsigned int v14 = 4;
      goto LABEL_9;
    default:
      if (a5 == 8232)
      {
        unsigned int v14 = 2;
      }
      else if (a5 != 8233)
      {
        return result;
      }
LABEL_9:
      if (sub_100189F3C(a3 + 24) != *(id *)(a4 + 16))
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E87D8);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_101096984();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014E87F8);
        }
        double v15 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        double v16 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pAddInvisibleBreakToLineFragment(const CRLWPLayoutState *, CRLWPLineFragment *, unichar, CGFloat, BOOL) const"];
        double v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
        +[CRLAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:3612 isFatal:0 description:"line fragment isn't from the current paragraph"];
      }
      double v18 = v12 + a1;
      double v19 = *((double *)&unk_10166D9D8 + 5 * v14 + 1);
      uint64_t v20 = *(void *)(a4 + 24);
      if (fabs(v18) == INFINITY)
      {
        if ((v20 & 0x1000) == 0)
        {
          double v18 = *(double *)(a4 + 240) + 0.0;
          goto LABEL_31;
        }
        double v21 = 0.0;
        goto LABEL_30;
      }
      if ((v20 & 0x1000) != 0)
      {
        double v21 = 0.0;
        if (v18 >= 0.0) {
          double v21 = v18;
        }
LABEL_30:
        double v18 = v21 - v19;
        goto LABEL_31;
      }
      if ((a6 & 1) == 0 && *(double *)(a4 + 56) < v18) {
        double v18 = *(double *)(a4 + 56);
      }
LABEL_31:
      if (!*((unsigned char *)&unk_10166D9D8 + 40 * v14 + 2)) {
        return (double *)sub_10015F000((id)a4);
      }
      if ((v20 & 0x1000) != 0)
      {
        double v24 = v19 + fmin(v18, 0.0);
        double v23 = v19 + v18 - v24;
        double v18 = v24;
LABEL_38:
        if (v23 > 0.0)
        {
          if (v13 <= 0.0)
          {
            +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8818);
            }
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
              sub_1010968FC();
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014E8838);
            }
            long long v25 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
            {
              +[CRLAssertionHandler packedBacktraceString];
              objc_claimAutoreleasedReturnValue();
              sub_1010663B0();
            }

            long long v26 = +[NSString stringWithUTF8String:"void CRLWPCoreTextTypesetter::pAddInvisibleBreakToLineFragment(const CRLWPLayoutState *, CRLWPLineFragment *, unichar, CGFloat, BOOL) const"];
            double v27 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
            +[CRLAssertionHandler handleFailureInFunction:v26 file:v27 lineNumber:3659 isFatal:0 description:"break line has no thickness"];
          }
          if (!qword_1016A9588)
          {
            long long v28 = +[CRLColor colorWithRed:0.180392161 green:0.533333361 blue:0.921568632 alpha:1.0];
            qword_1016A9588 = (uint64_t)CGColorRetain((CGColorRef)[v28 CGColor]);
          }
          id v29 = [CRLWPAdornmentLine alloc];
          long long v30 = -[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:](v29, "initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustment:", qword_1016A9588, 1, 0, 0, v18, NAN, v23, v13, 0.0);
          sub_100152D34(a4, v30);
        }
        return (double *)sub_10015F000((id)a4);
      }
      double v22 = *(double *)(a4 + 56) - v19;
      if (v22 < v18) {
        double v22 = v18;
      }
      double v23 = v22 - v18;
      if (v22 - v18 >= 0.0) {
        goto LABEL_38;
      }
      return (double *)sub_10015F000((id)a4);
  }
}

void sub_1002A4B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A4C04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4C48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4C8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4CD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4D14(id a1)
{
  CFAttributedStringRef v1 = (const __CFAttributedString *)[objc_alloc((Class)NSAttributedString) initWithString:&stru_101538650 attributes:0];
  qword_1016A9590 = (uint64_t)CTLineCreateWithAttributedString(v1);
}

void sub_1002A4D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A4D8C(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4DD0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4E14(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4E58(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4E9C(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4EE0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4F24(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4F68(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4FAC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A4FF0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5034(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5078(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A50BC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5100(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5144(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5188(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A51CC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5210(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002A5254(uint64_t a1)
{
  id v2 = *(void **)(a1 + 256);
  if (!v2)
  {
    id v3 = objc_alloc((Class)NSLinguisticTagger);
    NSLinguisticTagScheme v8 = NSLinguisticTagSchemeNameTypeOrLexicalClass;
    id v4 = +[NSArray arrayWithObjects:&v8 count:1];
    id v5 = [v3 initWithTagSchemes:v4 options:22];
    unsigned __int8 v6 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v5;

    id v2 = *(void **)(a1 + 256);
  }

  return v2;
}

void sub_1002A532C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A5344(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5388(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A53CC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5410(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5454(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5498(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A54DC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5520(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5564(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  long long v25 = a2;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = +[NSCharacterSet decimalDigitCharacterSet];
  uint64_t v10 = v7 + a3;
  unsigned __int8 v11 = [v9 characterIsMember:*(unsigned __int16 *)(*(void *)(v8 + 64) + 2 * (v7 + a3))];

  if (v10) {
    char v12 = v11;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    double v13 = +[NSCharacterSet decimalDigitCharacterSet];
    unsigned __int8 v11 = [v13 characterIsMember:*(unsigned __int16 *)(*(void *)(v8 + 64) + 2 * v10 - 2)];
  }
  if ((v11 & 1) == 0)
  {
    MutableWithExternalCharactersNoCopCGFloat y = CFStringCreateMutableWithExternalCharactersNoCopy(0, (UniChar *)(*(void *)(v8 + 64) + 2 * (*(void *)(a1 + 64) + a3)), a4, a4, kCFAllocatorNull);
    if (MutableWithExternalCharactersNoCopy)
    {
      double v15 = MutableWithExternalCharactersNoCopy;
      double v16 = v15;
      if (a4
        && (a4 == 1 || [(__CFString *)v15 crlwp_isLowerCaseFromIndex:1]))
      {
        if (v10)
        {
          uint64_t v17 = v10 - 1;
          if (v10 != 0x8000000000000000)
          {
            do
            {
              uint64_t v18 = *(unsigned __int16 *)(*(void *)(v8 + 64) + 2 * v17);
              if ([*(id *)(a1 + 32) characterIsMember:v18]) {
                break;
              }
              if ([*(id *)(a1 + 40) characterIsMember:v18])
              {
                BOOL v19 = NSLinguisticTagDeterminer == v25 || NSLinguisticTagConjunction == v25;
                BOOL v21 = !v19 && NSLinguisticTagPreposition != v25 || a4 >= 4;
                if (!v21
                  || (+[NSCharacterSet crlwp_singleRightQuoteCharacterSet], double v22 = objc_claimAutoreleasedReturnValue(), v23 = [(__CFString *)v16 rangeOfCharacterFromSet:v22], v22, v23 != (id)0x7FFFFFFFFFFFFFFFLL))
                {
                  CFLocaleRef v24 = [*(id *)(a1 + 48) locale];
                  CFStringLowercase(v16, v24);
                  goto LABEL_31;
                }
                break;
              }
              BOOL v19 = (v17-- & 0x7FFFFFFFFFFFFFFFLL) == 0;
            }
            while (!v19);
          }
        }
        CFLocaleRef v24 = [*(id *)(a1 + 48) locale];
        CFStringCapitalize(v16, v24);
LABEL_31:
      }
      CFRelease(v16);
    }
  }
}

void sub_1002A578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A57E0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5824(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5868(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A58AC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A58F0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5934(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5978(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A59BC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5A00(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5A44(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5A88(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5ACC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5B10(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5B54(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002A5B98(uint64_t a1, unint64_t a2)
{
  id v4 = [*(id *)(a1 + 56) length];
  if ((unint64_t)v4 <= a2) {
    return 0;
  }
  unint64_t v5 = (unint64_t)v4;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = *(unsigned __int16 *)(v6 + 2 * a2);
  if (a2 + 1 < v5)
  {
    int v8 = *(unsigned __int16 *)(v6 + 2 * (a2 + 1));
    if ((result & 0xFC00) == 0xD800 && (v8 & 0xFC00) == 56320) {
      return (v8 + (result << 10) - 56613888);
    }
  }
  return result;
}

void sub_1002A5C1C(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5C60(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  sub_100152D18(a3);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v4)
  {
    uint64_t v21 = *(void *)v23;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v7 = [v6 rectCount];
        int v8 = (char *)[v6 rects];
LABEL_7:
        while (v7)
        {
          id v7 = (char *)v7 - 1;
          uint64_t v9 = (double *)&v8[32 * (void)v7];
          double v11 = *v9;
          CGFloat v10 = v9[1];
          CGFloat v12 = v9[2];
          CGFloat v13 = v9[3];
          double v14 = v11 + *(double *)(sub_100152BE4(a3, 0) + 8);
          uint64_t v15 = -1;
          uint64_t v16 = 8;
          while (1)
          {
            uint64_t v17 = (void *)sub_100152BFC(a3);
            if (++v15 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17[1] - *v17) >> 3))) {
              break;
            }
            uint64_t v18 = *(void *)sub_100152BFC(a3);
            BOOL v19 = (const __CTLine *)sub_1001BAB78(v18 + v16 - 8);
            v28.size.CGFloat width = CTLineGetTypographicBounds(v19, 0, 0, 0);
            v28.origin.double x = *(CGFloat *)(v18 + v16);
            v28.origin.CGFloat y = 0.0;
            v28.size.CGFloat height = 1.0;
            v27.origin.double x = v14;
            v27.origin.CGFloat y = v10;
            v27.size.CGFloat width = v12;
            v27.size.CGFloat height = v13;
            v16 += 104;
            if (CGRectIntersectsRect(v27, v28))
            {
              [v6 removeAdornmentAt:v7];
              goto LABEL_7;
            }
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v4);
  }
}

void sub_1002A5EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1002A5EE4(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5F28(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5F6C(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A5FB0(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CTParagraphStyleRef sub_1002A5FF4(void *a1, unsigned int a2)
{
  id v3 = a1;
  double v50 = v3;
  signed int v4 = [v3 intValueForProperty:28];
  if (v4 == -1) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = v4;
  }
  int v6 = [v3 intValueForProperty:29];
  if (v6 >= 256)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8E60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096A0C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8E80);
    }
    uint64_t v43 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    BOOL v44 = +[NSString stringWithUTF8String:"CTParagraphStyleRef CRLWPCreateCoreTextParagraphStyle(CRLWPParagraphStyle *__strong, BOOL)"];
    uint64_t v45 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v44 file:v45 lineNumber:4951 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

    char v49 = -1;
  }
  else
  {
    char v49 = v6;
    if (v6 < 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8EA0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101096A8C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014E8EC0);
      }
      uint64_t v46 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      id v47 = +[NSString stringWithUTF8String:"CTParagraphStyleRef CRLWPCreateCoreTextParagraphStyle(CRLWPParagraphStyle *__strong, BOOL)"];
      char v48 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v47 file:v48 lineNumber:4951 isFatal:0 description:"Out-of-bounds type assignment was clamped to min"];

      char v49 = 0;
    }
  }
  int v52 = sub_1002A77DC(v5, a2);
  char v58 = v52;
  [v50 floatValueForProperty:31];
  double v8 = v7;
  double v57 = v7;
  uint64_t v9 = (objc_class *)objc_opt_class();
  CGFloat v10 = [v50 valueForProperty:51];
  CGFloat v53 = sub_10024715C(v9, v10);

  id v11 = [v53 count];
  CGFloat v54 = objc_opt_new();
  id v56 = v54;
  [v50 floatValueForProperty:33];
  float v13 = v12;
  [v50 floatValueForProperty:39];
  double v15 = v14;
  BOOL v17 = v13 < v14 && v52 == 0;
  BOOL v51 = v17;
  if (v11)
  {
    uint64_t v18 = 0;
    double v19 = v13;
    if (v52) {
      uint64_t v20 = &unk_101177514;
    }
    else {
      uint64_t v20 = &unk_101177510;
    }
    unsigned int v21 = 1;
    id v22 = v11;
    do
    {
      long long v23 = [v53 tabAtIndex:v18];
      unsigned int v24 = [v23 alignment];
      [v23 position];
      double v26 = v25;
      if (v24 == 3)
      {
        CGRect v27 = [v50 valueForProperty:30];
        CGRect v28 = +[NSNull null];
        BOOL v29 = v27 == v28;

        if (v29)
        {

          CGRect v27 = &stru_101538650;
        }
        long long v30 = +[NSCharacterSet characterSetWithCharactersInString:v27];
        CFStringRef v69 = kCTTabColumnTerminatorsAttributeName;
        long long v70 = v30;
        CFDictionaryRef v31 = +[NSDictionary dictionaryWithObjects:&v70 forKeys:&v69 count:1];
      }
      else
      {
        CFDictionaryRef v31 = 0;
      }
      double v32 = v26 - v19 + v15;
      if (!v52) {
        double v32 = v26;
      }
      CTTextTabRef v33 = CTTextTabCreate((CTTextAlignment)v20[v24], v32, v31);
      [v54 addObject:v33];
      CFRelease(v33);
      BOOL v34 = v51;
      if (v22 != v11) {
        BOOL v34 = 0;
      }
      if (v34 && v26 > v15) {
        id v22 = v18;
      }

      uint64_t v18 = (void *)v21;
    }
    while ((unint64_t)v11 > v21++);
  }
  else
  {
    id v22 = 0;
  }
  if (v51)
  {
    CTTextTabRef v36 = CTTextTabCreate(kCTTextAlignmentLeft, v15, 0);
    [v54 insertObject:v36 atIndex:v22];
    CFRelease(v36);
  }
  if ([v54 count])
  {
    uint64_t v37 = [v54 lastObject];

    double Location = CTTextTabGetLocation((CTTextTabRef)v37);
    double v39 = (floor(Location / v8) + 1.0) * v8;
    if (v39 - Location < v8)
    {
      CTTextTabRef v40 = CTTextTabCreate(kCTTextAlignmentLeft, v39, 0);
      [v54 addObject:v40];
      CFRelease(v40);
    }
  }
  char v55 = v49;
  settings.spec = kCTParagraphStyleSpecifierAlignment;
  settings.valueCGFloat Size = 1;
  settings.value = &v55;
  int v60 = 13;
  uint64_t v61 = 1;
  unint64_t v62 = &v58;
  int v63 = 5;
  uint64_t v64 = 8;
  CFStringRef v65 = &v57;
  int v66 = 4;
  uint64_t v67 = 8;
  double v68 = &v56;
  CTParagraphStyleRef v41 = CTParagraphStyleCreate(&settings, 4uLL);

  return v41;
}

void sub_1002A6660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1002A676C(uint64_t a1, void *a2, void *a3, int a4, unint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = objc_opt_new();
  [v11 setObject:a1 forKeyedSubscript:kCTParagraphStyleAttributeName];
  CGRect v83 = +[NSMutableArray array];
  [v83 crl_addNonNilObject:v10];
  [v83 crl_addNonNilObject:v9];
  font = (const __CTFont *)sub_1001CDEB8(v83, a5);
  if (!font)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8EE0);
    }
    float v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR)) {
      sub_101096C1C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8F00);
    }
    float v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      float v14 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v14);
    }

    double v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSDictionary<NSString *,id> *CRLWPCoreTextAttributes(CTParagraphStyleRef, CRLWPParagraphStyle *__strong, CRLWPCharacterStyle *__strong, BOOL, NSUInteger)");
    uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:5044 isFatal:0 description:"Bad font"];
  }
  [v11 setObject:forKeyedSubscript:];
  double v17 = sub_1001CD810(v10, v9, 24, 0.0);
  if (v17 == 0.0)
  {
    if (a4)
    {
      uint64_t v19 = sub_1001CD5B0(v10, v9, 16, 0);
      if (v19 == 1) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v18 = +[NSNumber numberWithDouble:v17 * CTFontGetSize(font)];
    [v11 setObject:v18 forKeyedSubscript:kCTKernAttributeName];
  }
  uint64_t v19 = 0;
LABEL_17:
  uint64_t v20 = +[NSNumber numberWithInt:v19];
  [v11 setObject:v20 forKeyedSubscript:kCTLigatureAttributeName];

LABEL_18:
  unsigned int v21 = +[NSNumber numberWithDouble:sub_1001CD810(v10, v9, 0, 0.0)];
  [v11 setObject:v21 forKeyedSubscript:@"CRLWPBaselineShift"];

  uint64_t v22 = sub_1001CD5B0(v10, v9, 22, 0);
  long long v23 = +[NSNumber numberWithUnsignedInt:v22];
  [v11 setObject:v23 forKeyedSubscript:@"CRLWPSuperscript"];

  if (v22)
  {
    double v24 = sub_1001CD810(v10, v9, 11, 0.0);
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(font, v24, 0, 0);
    [v11 setObject:CopyWithAttributes forKeyedSubscript:@"CRLWPUnadjustedFont"];
    CFRelease(CopyWithAttributes);
  }
  CGRect v84 = sub_1001CD4F8(v10, v9, 0x12uLL);
  if ([v84 isEnabled]) {
    [v11 setObject:v84 forKeyedSubscript:@"CRLWPShadow"];
  }
  unsigned int v26 = sub_1001CD5B0(v10, v9, 25, 0);
  if (v26 >= 4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8F20);
    }
    CGRect v27 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR)) {
      sub_101096B94();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8F40);
    }
    CGRect v28 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
    {
      BOOL v29 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v29);
    }

    long long v30 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSDictionary<NSString *,id> *CRLWPCoreTextAttributes(CTParagraphStyleRef, CRLWPParagraphStyle *__strong, CRLWPCharacterStyle *__strong, BOOL, NSUInteger)");
    CFDictionaryRef v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v30 file:v31 lineNumber:5086 isFatal:0 description:"bad underline value"];
  }
  if (v26 >= 3) {
    uint64_t v32 = 3;
  }
  else {
    uint64_t v32 = v26;
  }
  CTTextTabRef v33 = +[NSNumber numberWithUnsignedInt:v32];
  [v11 setObject:v33 forKeyedSubscript:];

  sub_1001CD4F8(v10, v9, 0x1AuLL);
  id v34 = (id)objc_claimAutoreleasedReturnValue();
  id v35 = +[NSNull null];
  BOOL v36 = v35 == v34;

  uint64_t v37 = 0;
  if (!v36) {
    uint64_t v37 = v34;
  }
  id v85 = v37;

  if (v85) {
    [v11 setObject:v85 forKeyedSubscript:@"CRLWPUnderlineColor"];
  }
  double v86 = sub_1001CD4F8(v10, v9, 8uLL);
  if (v86)
  {
    uint64_t v38 = +[NSNull null];
    BOOL v39 = v86 == v38;

    if (!v39) {
      [v11 setObject:v86 forKeyedSubscript:@"CRLWPEmphasisMarksAttribute"];
    }
  }
  unsigned int v40 = sub_1001CD5B0(v10, v9, 19, 0);
  if (v40 >= 3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8F60);
    }
    CTParagraphStyleRef v41 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_ERROR)) {
      sub_101096B0C();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8F80);
    }
    int v42 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = +[CRLAssertionHandler packedBacktraceString];
      sub_10107C04C(v43);
    }

    BOOL v44 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSDictionary<NSString *,id> *CRLWPCoreTextAttributes(CTParagraphStyleRef, CRLWPParagraphStyle *__strong, CRLWPCharacterStyle *__strong, BOOL, NSUInteger)");
    uint64_t v45 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v44 file:v45 lineNumber:5103 isFatal:0 description:"bad strikethru value"];
  }
  if (v40 >= 2) {
    uint64_t v46 = 2;
  }
  else {
    uint64_t v46 = v40;
  }
  id v47 = +[NSNumber numberWithUnsignedInt:v46];
  [v11 setObject:v47 forKeyedSubscript:@"CRLWPStrikethrough"];

  uint64_t v48 = sub_1001CD4F8(v10, v9, 0x14uLL);
  CGRect v81 = (void *)v48;
  if (v48) {
    [v11 setObject:v48 forKeyedSubscript:@"CRLWPStrikethroughColor"];
  }
  uint64_t v49 = sub_1001CD4F8(v10, v9, 0x17uLL);
  CGRect v82 = (void *)v49;
  if (v49) {
    [v11 setObject:v49 forKeyedSubscript:@"CRLWPTextBackgroundColor"];
  }
  uint64_t v50 = objc_opt_class();
  BOOL v51 = sub_1001CD4F8(v10, v9, 6uLL);
  CGFloat v87 = sub_1002469D0(v50, v51);

  uint64_t v52 = objc_opt_class();
  CGFloat v53 = sub_1001CD4F8(v10, v9, 4uLL);
  CGFloat v54 = sub_1002469D0(v52, v53);

  if (v87)
  {
    char v55 = +[CRLStroke emptyStroke];
    unsigned int v56 = [v87 isEqual:v55];

    int v57 = v56 ^ 1;
    if (v54)
    {
LABEL_61:
      unsigned int v58 = [v54 isClear] ^ 1;
      goto LABEL_64;
    }
  }
  else
  {
    int v57 = 0;
    if (v54) {
      goto LABEL_61;
    }
  }
  unsigned int v58 = 0;
LABEL_64:
  if ((v57 | v58) == 1)
  {
    if (v57) {
      [v11 setObject:v87 forKeyedSubscript:@"CRLWPCharacterStrokeAttribute"];
    }
    if (v58)
    {
      uint64_t v59 = objc_opt_class();
      int v60 = sub_1002469D0(v59, v54);
      uint64_t v61 = v60;
      if (v60)
      {
        objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v60, "CGColor"), kCTForegroundColorAttributeName);
        id v62 = 0;
      }
      else
      {
        [v11 setObject:v54 forKeyedSubscript:@"CRLWPCharacterFillAttribute"];
        CFStringRef v65 = [v54 referenceColor];
        int v66 = v65;
        if (v65)
        {
          id v62 = v65;
        }
        else
        {
          id v62 = +[CRLColor blackColor];
        }
      }
    }
    else
    {
      id v62 = +[CRLColor clearColor];
    }
    if (v62)
    {
      uint64_t v67 = [v11 objectForKeyedSubscript:kCTForegroundColorAttributeName];
      BOOL v68 = v67 == 0;

      if (v68)
      {
        if (!v54 || ([v62 isClear] & 1) == 0) {
          [v11 setObject:kCFBooleanTrue forKeyedSubscript:kCTForegroundColorFromContextAttributeName];
        }
        objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v62, "CGColor"), kCTForegroundColorAttributeName);
      }
    }
    if (v57) {
      [v87 color];
    }
    else {
    id v69 = [v54 referenceColor];
    }

    long long v70 = [v11 objectForKeyedSubscript:@"CRLWPUnderline"];
    if ([v70 isEqual:&off_10155DC10])
    {
    }
    else
    {
      unsigned int v71 = [v11 objectForKeyedSubscript:@"CRLWPUnderlineColor"];
      BOOL v72 = v71 == 0;

      if (v72) {
        [v11 setObject:v69 forKeyedSubscript:@"CRLWPUnderlineColor"];
      }
    }
    unint64_t v73 = [v11 objectForKeyedSubscript:@"CRLWPStrikethrough"];
    if ([v73 isEqual:&off_10155DC10])
    {
    }
    else
    {
      uint64_t v74 = [v11 objectForKeyedSubscript:@"CRLWPStrikethroughColor"];
      BOOL v75 = v74 == 0;

      if (v75) {
        [v11 setObject:v69 forKeyedSubscript:@"CRLWPStrikethroughColor"];
      }
    }
  }
  else
  {
    int v63 = +[CRLColor grayColor];
    uint64_t v64 = [v63 colorWithAlphaComponent:0.7];
    objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v64, "CGColor"), kCTStrokeColorAttributeName);

    [v11 setObject:&off_10155DC28 forKeyedSubscript:kCTStrokeWidthAttributeName];
    [v11 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CRLWPInvisibleTextAttribute"];
  }
  uint64_t v76 = objc_opt_class();
  long long v77 = sub_1001CD4F8(v10, v9, 5uLL);
  CFRange v78 = sub_1002469D0(v76, v77);

  if (v78) {
    [v11 setObject:v78 forKeyedSubscript:@"CRLWPCharacterFillShouldFillTextContainerAttribute"];
  }
  CFRelease(font);
  id v79 = v11;

  return v79;
}

void sub_1002A7458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1002A76CC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7710(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7754(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7798(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002A77DC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a2;
  if (a1 != -1) {
    uint64_t v2 = a1;
  }
  if (v2)
  {
    if (v2 == 1) {
      return 1;
    }
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8FA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101096CA4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E8FC0);
    }
    signed int v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v5 = +[NSString stringWithUTF8String:"CTWritingDirection CRLWPCoreTextWritingDirectionFromWPWritingDirection(CRLWPWritingDirection, BOOL)"];
    int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:5210 isFatal:0 description:"Bad writing direction map."];
  }
  return 0;
}

void sub_1002A7980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A79A8(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A79EC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7A30(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7A74(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7AB8(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7AFC(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7B40(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7B84(id a1)
{
  CFAttributedStringRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A7BC8(id a1)
{
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:@"-—–‐‒−﹣－﹘"];
  uint64_t v2 = (void *)qword_1016A95A0;
  qword_1016A95A0 = v1;
}

void sub_1002A7C10(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1002A7C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A7D64((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1002A7CA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A7CD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_100502160();
    operator delete();
  }
  return result;
}

uint64_t sub_1002A7D20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1002A7D64(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100502160();
    operator delete();
  }
  return result;
}

void *sub_1002A7DB4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001EBF4(a1, a2);
    signed int v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1002A7E10(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x360], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A847C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A84F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A8534(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A8620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A88A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A88F4(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v5) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = *(void *)(a1 + 40);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, 1, v4);
  }
}

void sub_1002A8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002A8978(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A89BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A8C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A8C68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A8CAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002A8CF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1002A9024(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1002A9070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A90B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002A9374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A9418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A9FD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002AAFF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AB03C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002AB080(id a1, id a2)
{
  uint64_t v2 = (objc_class *)objc_opt_class();

  return NSStringFromClass(v2);
}

void sub_1002AB0AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AB0F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002AB134(id a1, id a2)
{
  uint64_t v2 = (objc_class *)objc_opt_class();

  return NSStringFromClass(v2);
}

void sub_1002AB160(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AB1A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ABB9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ABBE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AC5EC(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"CRLCanvasLayoutsChangedForCanvasNotification" object:*(void *)(a1 + 32)];
}

uint64_t sub_1002AC9F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002ACCDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ACD20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD100(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD144(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD418(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD45C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD6A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD6EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD8C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AD908(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ADAD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ADB14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ADE2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ADE70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE0BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE100(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE3B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE3F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE5D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AE61C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AEBB0(uint64_t a1)
{
  [*(id *)(a1 + 32) setPreferredContentSize: *(double *)(a1 + 40), *(double *)(a1 + 48)];
  if (objc_msgSend(*(id *)(a1 + 32), "crl_shouldUpdateNavigationContentSizeWithPreferredContentSize"))
  {
    double v2 = *(double *)(a1 + 40);
    double v3 = *(double *)(a1 + 48);
    id v4 = [*(id *)(a1 + 32) navigationController];
    [v4 setPreferredContentSize:v2, v3];
  }
}

void sub_1002AF090(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF0D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF5CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF610(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF654(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF698(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AF9D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002AFA18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B01A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B01E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0228(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B026C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B05A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B05EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B09C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0A08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0A4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0A90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0F80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B0FC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1C34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1C78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1CBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1D00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1D44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B1D88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B2A1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B2A60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3D5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3DA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3DE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3E28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3E6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B3EB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B4460(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B44A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B55D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B561C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5DD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5E14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5E58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5E9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5EE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B5F24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B6238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B627C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B62C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B6304(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B6944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B6988(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

int64_t sub_1002B81FC(id a1, CRLCollaboratorCursorHUDPosition *a2, CRLCollaboratorCursorHUDPosition *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [(CRLCollaboratorCursorHUDPosition *)v4 direction];
  if (v6 == (id)[(CRLCollaboratorCursorHUDPosition *)v5 direction])
  {
    int64_t v7 = 0;
  }
  else
  {
    int64_t v7 = -1;
    switch([(CRLCollaboratorCursorHUDPosition *)v4 direction])
    {
      case 0uLL:
        int64_t v7 = 1;
        break;
      case 1uLL:
        BOOL v8 = (id)[(CRLCollaboratorCursorHUDPosition *)v5 direction] == (id)2;
        uint64_t v9 = 1;
        goto LABEL_11;
      case 3uLL:
        if ((id)[(CRLCollaboratorCursorHUDPosition *)v5 direction] != (id)4
          && [(CRLCollaboratorCursorHUDPosition *)v5 direction])
        {
          int64_t v7 = 1;
        }
        break;
      case 4uLL:
        BOOL v8 = [(CRLCollaboratorCursorHUDPosition *)v5 direction] == 0;
        uint64_t v9 = -1;
LABEL_11:
        if (v8) {
          int64_t v7 = v9;
        }
        else {
          int64_t v7 = -v9;
        }
        break;
      default:
        break;
    }
  }

  return v7;
}

int64_t sub_1002B8304(id a1, CRLCollaboratorCursorHUDPosition *a2, CRLCollaboratorCursorHUDPosition *a3)
{
  id v4 = a3;
  [(CRLCollaboratorCursorHUDPosition *)a2 position];
  double v6 = v5;
  double v8 = v7;
  [(CRLCollaboratorCursorHUDPosition *)v4 position];
  double v10 = v9;
  double v12 = v11;

  double v13 = vabdd_f64(v8, v12);
  int64_t v14 = -1;
  if (v6 >= v10) {
    int64_t v15 = 1;
  }
  else {
    int64_t v15 = -1;
  }
  if (v8 > v12) {
    int64_t v14 = 1;
  }
  if (v13 >= 0.01) {
    return v14;
  }
  else {
    return v15;
  }
}

void sub_1002B8704(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B8748(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B878C(uint64_t a1, void *a2)
{
  id v6 = a2;
  double v3 = (objc_class *)objc_opt_class();
  id v4 = sub_10024715C(v3, *(void **)(a1 + 32));
  double v5 = v4;
  if (v4) {
    [v4 setGeometry:v6];
  }
}

void sub_1002B88FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B8914(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002B8924(uint64_t a1)
{
}

void sub_1002B892C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  double v5 = [*(id *)(a1 + 32) info];
  id v6 = sub_1002469D0(v4, v5);

  if (v6)
  {
    double v7 = [v6 geometry];
    unsigned __int8 v8 = [v3 isEqual:v7];

    if ((v8 & 1) == 0)
    {
      double v9 = [[_TtC8Freeform25CRLCommandSetInfoGeometry alloc] initWithBoardItem:v6 geometry:v3];
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      double v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E9CE8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101098080();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014E9D08);
    }
    double v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v12);
    }
    double v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasLayout commandToClampModelToLayoutSizeWithAdditionalTransform:]_block_invoke");
    int64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayout.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 1140, 0, "invalid nil value for '%{public}s'", "boardItem");
  }
}

void sub_1002B8B2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B8B70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002B99E0(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithUnsignedInteger:a2];
  [v2 addObject:v3];
}

void sub_1002BD7B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BD7F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BDA04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BDA48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BDD64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BDDA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BE9AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BE9F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEA34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEA78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEE90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEED4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEF18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BEF5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BF368(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BF3AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BF3F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BF434(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002BFDBC(void *a1)
{
  uint64_t v1 = a1;
  double v2 = objc_alloc_init(CRLOnce);
  id v3 = (id)v1[27];
  v1[27] = v2;
}

void sub_1002C01DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C0200(uint64_t a1, void *a2)
{
  double v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained p_willEnterForeground:v3];
}

void sub_1002C03B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C03D4(uint64_t a1, void *a2)
{
  double v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained p_didEnterBackground:v3];
}

void sub_1002C07C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C080C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C10C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C1104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C1148(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C118C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C2038(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C207C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C22EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C2330(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C3F98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C3FDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C4974(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C49B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5A58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5A9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5AE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5DAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C5DF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C613C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C6180(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C61C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C6208(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C63D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1002C63F0(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v3 = [v2 editorController];
  uint64_t v4 = [v3 textInputEditor];
  unsigned int v5 = [v4 resignFirstResponderWhenKeyboardHides];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) interactiveCanvasController];
    double v7 = [v6 editorController];
    unsigned __int8 v8 = [v7 textInputEditor];
    [v8 setResignFirstResponderWhenKeyboardHides:0];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  [*(id *)(a1 + 32) forceStopScrolling];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  double v9 = [*(id *)(a1 + 32) commonGestureRecognizers];
  id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        int64_t v14 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0
          && (![v14 state] || objc_msgSend(v14, "state") == (id)1 || objc_msgSend(v14, "state") == (id)2))
        {
          [v14 performSelector:"cancelBecauseOfRotation"];
        }
      }
      id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v11);
  }
}

void sub_1002C65CC(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v3 = [*(id *)(a1 + 32) interactiveCanvasController];
    uint64_t v1 = [v3 editorController];
    double v2 = [v1 textInputEditor];
    [v2 setResignFirstResponderWhenKeyboardHides:1];
  }
}

void sub_1002C77A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C77E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1002C7A98(id a1, id a2, BOOL *a3)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v4 = [v3 locked] ^ 1;
  }
  else {
    LOBYTE(v4) = 1;
  }

  return v4;
}

void sub_1002C8B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C8B68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C8D8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C8DD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C962C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C9670(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C9C10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002C9C54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CA090(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CA0D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CA2E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CA324(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CA420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002CA438(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0 && [v5 shouldPreventQuickSelect])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
}

void sub_1002CAB4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CAB90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CAEC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CAF08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CAF4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CAF90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CB914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CB958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CC1F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAlertCat");
  double v2 = off_10166B4B8;
  off_10166B4B8 = v1;
}

id sub_1002CC23C(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

uint64_t sub_1002CC480(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002CC498(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1002CC4B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

void sub_1002CC7BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CC800(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CC844(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CC888(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCBC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCC08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCC4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCC90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCF80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CCFC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD008(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD04C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD774(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD7B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD99C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CD9E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CEBCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CEC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CED3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002CED58(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained preventInsertScribbleElementTimer];
  [v3 invalidate];

  id v4 = objc_loadWeakRetained(v1);
  [v4 setPreventInsertScribbleElementTimer:0];
}

void sub_1002CF430(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CF474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002CF75C(uint64_t a1)
{
  double v2 = objc_alloc_init(CRLiOSImageHUDViewController);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 208);
  *(void *)(v3 + 20_Block_object_dispose(&STACK[0x360], 8) = v2;
}

uint64_t sub_1002D10D0(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D10F0(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D12E0(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D1304(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D1820(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D1840(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D1860(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D1880(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D18A0(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D18C0(uint64_t a1)
{
  return 1;
}

uint64_t sub_1002D18E0(uint64_t a1)
{
  return 1;
}

void sub_1002D1EB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1002D1ED0(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

void sub_1002D207C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1002D2098(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

void sub_1002D2244(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_1002D2260(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

void sub_1002D246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1002D2488(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained crlaxCustomRotorResultForRotorName:*(void *)(a1 + 32) predicate:v4];

  return v6;
}

id sub_1002D2F68(uint64_t a1)
{
  return _[*(id *)(a1 + 32) crlaxAnnounceSearchReference:*(void *)(a1 + 40) forRotor:*(void *)(a1 + 48)];
}

void sub_1002D3F9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D3FE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D429C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D42E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D4F30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D4F74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5E30(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLCurvedShadowRenderHelper);
  uint64_t v2 = (void *)qword_1016A95C8;
  qword_1016A95C8 = (uint64_t)v1;
}

void sub_1002D5E6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5EB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5EF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5F38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5F7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D5FC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D6270(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D62B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1002D67D8(id a1, CRLStreamCompression *a2, BOOL a3, OS_dispatch_data *a4, NSError *a5)
{
  if (!a4) {
    return 1;
  }
  uint64_t v5 = a3;
  double v7 = a4;
  unsigned __int8 v8 = a2;
  uint64_t v9 = objc_opt_class();
  id v10 = sub_1002469D0(v9, v8);

  LOBYTE(v5) = [v10 handleData:v7 isDone:v5];
  return v5;
}

uint64_t sub_1002D6954(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = v11;
  uint64_t v13 = 1;
  if (v10 && v11)
  {
    uint64_t v14 = objc_opt_class();
    long long v15 = sub_1002469D0(v14, v9);
    uint64_t v13 = (uint64_t)[v15 handleData:v10 isDone:a3];
  }
  uint64_t v16 = *(void *)(a1 + 32);
  if (v16) {
    uint64_t v13 = (*(unsigned int (**)(uint64_t, id, uint64_t, id, void *))(v16 + 16))(v16, v9, a3, v10, v12) & v13;
  }

  return v13;
}

void sub_1002D6B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002D6B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id result = [*(id *)(a1 + 32) processBytes:a2];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  *a5 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^ 1;
  return result;
}

void sub_1002D707C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D70C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002D7104(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_1002D7164(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 16))(result, a2);
  }
  *(void *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_1002D71C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  unsigned __int8 v7 = [WeakRetained isSnappedToRuler];

  if (v7)
  {
    return sub_1002D7294((void *)a1, a2, a3);
  }
  else
  {
    id v9 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 40);
    return v9();
  }
}

void sub_1002D7284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7294(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 56))(a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  sub_100172254(a3, *(void *)(a3 + 8), (char *)(*(void *)v6 + 80 * a2), *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 + 8) - (*(void *)v6 + 80 * a2)) >> 4));
  return a1[9];
}

void sub_1002D7340(void *a1)
{
  unint64_t v1 = a1[5];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - a1[6]) >> 4) > v1)
  {
    if (v1 && a1[4] < v1)
    {
      sub_10016BE28((uint64_t)(a1 + 10), 0);
      unint64_t v3 = 0;
      a1[5] = 0;
      a1[9] = 0;
    }
    else
    {
      sub_10016BE28((uint64_t)(a1 + 10), a1[9]);
      unint64_t v3 = a1[5];
    }
    uint64_t v4 = a1[6];
    if (v3 < 0xCCCCCCCCCCCCCCCDLL * ((a1[7] - v4) >> 4))
    {
      uint64_t v5 = (char **)(a1 + 10);
      uint64_t v6 = a1 + 12;
      unsigned __int8 v7 = (_OWORD *)a1[11];
      while (1)
      {
        unsigned __int8 v8 = (_OWORD *)(v4 + 80 * v3);
        if ((unint64_t)v7 >= *v6)
        {
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - *v5) >> 4);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x333333333333333) {
            goto LABEL_83;
          }
          if (0x999999999999999ALL * ((uint64_t)(*v6 - (void)*v5) >> 4) > v13) {
            unint64_t v13 = 0x999999999999999ALL * ((uint64_t)(*v6 - (void)*v5) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v6 - (void)*v5) >> 4) >= 0x199999999999999) {
            unint64_t v14 = 0x333333333333333;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            long long v15 = (char *)sub_1001725F0((uint64_t)(a1 + 12), v14);
          }
          else {
            long long v15 = 0;
          }
          uint64_t v16 = &v15[80 * v12];
          *(_OWORD *)uint64_t v16 = *v8;
          long long v17 = v8[1];
          long long v18 = v8[2];
          long long v19 = v8[4];
          *((_OWORD *)v16 + 3) = v8[3];
          *((_OWORD *)v16 + 4) = v19;
          *((_OWORD *)v16 + 1) = v17;
          *((_OWORD *)v16 + 2) = v18;
          unsigned int v21 = (char *)a1[10];
          uint64_t v20 = (char *)a1[11];
          uint64_t v22 = v16;
          if (v20 != v21)
          {
            do
            {
              *((_OWORD *)v22 - 5) = *((_OWORD *)v20 - 5);
              long long v23 = *((_OWORD *)v20 - 4);
              long long v24 = *((_OWORD *)v20 - 3);
              long long v25 = *((_OWORD *)v20 - 1);
              *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
              *((_OWORD *)v22 - 1) = v25;
              *((_OWORD *)v22 - 4) = v23;
              *((_OWORD *)v22 - 3) = v24;
              v22 -= 80;
              v20 -= 80;
            }
            while (v20 != v21);
            uint64_t v20 = *v5;
          }
          unsigned __int8 v7 = v16 + 80;
          a1[10] = v22;
          a1[11] = v16 + 80;
          a1[12] = &v15[80 * v14];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          _OWORD *v7 = *v8;
          long long v9 = v8[1];
          long long v10 = v8[2];
          long long v11 = v8[4];
          v7[3] = v8[3];
          void v7[4] = v11;
          v7[1] = v9;
          v7[2] = v10;
          v7 += 5;
        }
        a1[11] = v7;
        if (sub_1002D7884((uint64_t)a1)) {
          break;
        }
        unint64_t v31 = a1[4];
        if (v3 < v31)
        {
          uint64_t v32 = 1;
LABEL_77:
          a1[9] += v32;
        }
LABEL_78:
        ++v3;
        uint64_t v4 = a1[6];
        if (v3 >= 0xCCCCCCCCCCCCCCCDLL * ((a1[7] - v4) >> 4)) {
          goto LABEL_81;
        }
      }
      unsigned int v26 = (char *)(v7 - 5);
      a1[11] = v7 - 5;
      CGRect v27 = v7 - 10;
      unint64_t v28 = a1[12];
      if ((unint64_t)(v7 - 5) >= v28)
      {
        unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - *v5) >> 4);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0x333333333333333) {
          goto LABEL_83;
        }
        unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (void)*v5) >> 4);
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x199999999999999) {
          unint64_t v36 = 0x333333333333333;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_1001725F0((uint64_t)(a1 + 12), v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = &v37[80 * v33];
        *(_OWORD *)uint64_t v38 = *v27;
        long long v39 = v27[1];
        long long v40 = v27[2];
        long long v41 = v27[4];
        *((_OWORD *)v38 + 3) = v27[3];
        *((_OWORD *)v38 + 4) = v41;
        *((_OWORD *)v38 + 1) = v39;
        *((_OWORD *)v38 + 2) = v40;
        uint64_t v43 = (char *)a1[10];
        int v42 = (char *)a1[11];
        BOOL v44 = v38;
        if (v42 != v43)
        {
          do
          {
            *((_OWORD *)v44 - 5) = *((_OWORD *)v42 - 5);
            long long v45 = *((_OWORD *)v42 - 4);
            long long v46 = *((_OWORD *)v42 - 3);
            long long v47 = *((_OWORD *)v42 - 1);
            *((_OWORD *)v44 - 2) = *((_OWORD *)v42 - 2);
            *((_OWORD *)v44 - 1) = v47;
            *((_OWORD *)v44 - 4) = v45;
            *((_OWORD *)v44 - 3) = v46;
            v44 -= 80;
            v42 -= 80;
          }
          while (v42 != v43);
          int v42 = *v5;
        }
        unsigned __int8 v7 = v38 + 80;
        a1[10] = v44;
        a1[11] = v38 + 80;
        a1[12] = &v37[80 * v36];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        long long v29 = *(v7 - 7);
        *(v7 - 3) = *(v7 - 8);
        *(v7 - 2) = v29;
        *(v7 - 1) = *(v7 - 6);
        long long v30 = *(v7 - 9);
        *(_OWORD *)unsigned int v26 = *v27;
        *(v7 - 4) = v30;
      }
      a1[11] = v7;
      uint64_t v48 = v7 - 5;
      unint64_t v49 = a1[12];
      if ((unint64_t)v7 >= v49)
      {
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - *v5) >> 4);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0x333333333333333) {
          goto LABEL_83;
        }
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - (void)*v5) >> 4);
        if (2 * v55 > v54) {
          unint64_t v54 = 2 * v55;
        }
        if (v55 >= 0x199999999999999) {
          unint64_t v56 = 0x333333333333333;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56) {
          int v57 = (char *)sub_1001725F0((uint64_t)(a1 + 12), v56);
        }
        else {
          int v57 = 0;
        }
        unsigned int v58 = &v57[80 * v53];
        *(_OWORD *)unsigned int v58 = *v48;
        long long v59 = v48[1];
        long long v60 = v48[2];
        long long v61 = v48[4];
        *((_OWORD *)v58 + 3) = v48[3];
        *((_OWORD *)v58 + 4) = v61;
        *((_OWORD *)v58 + 1) = v59;
        *((_OWORD *)v58 + 2) = v60;
        int v63 = (char *)a1[10];
        id v62 = (char *)a1[11];
        uint64_t v64 = v58;
        if (v62 != v63)
        {
          do
          {
            *((_OWORD *)v64 - 5) = *((_OWORD *)v62 - 5);
            long long v65 = *((_OWORD *)v62 - 4);
            long long v66 = *((_OWORD *)v62 - 3);
            long long v67 = *((_OWORD *)v62 - 1);
            *((_OWORD *)v64 - 2) = *((_OWORD *)v62 - 2);
            *((_OWORD *)v64 - 1) = v67;
            *((_OWORD *)v64 - 4) = v65;
            *((_OWORD *)v64 - 3) = v66;
            v64 -= 80;
            v62 -= 80;
          }
          while (v62 != v63);
          id v62 = *v5;
        }
        uint64_t v52 = v58 + 80;
        a1[10] = v64;
        a1[11] = v58 + 80;
        a1[12] = &v57[80 * v56];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        long long v50 = *(v7 - 2);
        v7[2] = *(v7 - 3);
        v7[3] = v50;
        void v7[4] = *(v7 - 1);
        long long v51 = *(v7 - 4);
        _OWORD *v7 = *v48;
        v7[1] = v51;
        uint64_t v52 = v7 + 5;
      }
      a1[11] = v52;
      BOOL v68 = (_OWORD *)(a1[6] + 80 * v3);
      unint64_t v69 = a1[12];
      if ((unint64_t)v52 >= v69)
      {
        unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v52 - *v5) >> 4);
        unint64_t v74 = v73 + 1;
        if (v73 + 1 > 0x333333333333333) {
LABEL_83:
        }
          sub_100004E40();
        unint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (void)*v5) >> 4);
        if (2 * v75 > v74) {
          unint64_t v74 = 2 * v75;
        }
        if (v75 >= 0x199999999999999) {
          unint64_t v76 = 0x333333333333333;
        }
        else {
          unint64_t v76 = v74;
        }
        if (v76) {
          long long v77 = (char *)sub_1001725F0((uint64_t)(a1 + 12), v76);
        }
        else {
          long long v77 = 0;
        }
        CFRange v78 = &v77[80 * v73];
        *(_OWORD *)CFRange v78 = *v68;
        long long v79 = v68[1];
        long long v80 = v68[2];
        long long v81 = v68[4];
        *((_OWORD *)v78 + 3) = v68[3];
        *((_OWORD *)v78 + 4) = v81;
        *((_OWORD *)v78 + 1) = v79;
        *((_OWORD *)v78 + 2) = v80;
        CGRect v83 = (char *)a1[10];
        CGRect v82 = (char *)a1[11];
        CGRect v84 = v78;
        if (v82 != v83)
        {
          do
          {
            *((_OWORD *)v84 - 5) = *((_OWORD *)v82 - 5);
            long long v85 = *((_OWORD *)v82 - 4);
            long long v86 = *((_OWORD *)v82 - 3);
            long long v87 = *((_OWORD *)v82 - 1);
            *((_OWORD *)v84 - 2) = *((_OWORD *)v82 - 2);
            *((_OWORD *)v84 - 1) = v87;
            *((_OWORD *)v84 - 4) = v85;
            *((_OWORD *)v84 - 3) = v86;
            v84 -= 80;
            v82 -= 80;
          }
          while (v82 != v83);
          CGRect v82 = *v5;
        }
        unsigned __int8 v7 = v78 + 80;
        a1[10] = v84;
        a1[11] = v78 + 80;
        a1[12] = &v77[80 * v76];
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        *uint64_t v52 = *v68;
        long long v70 = v68[1];
        long long v71 = v68[2];
        long long v72 = v68[4];
        v52[3] = v68[3];
        void v52[4] = v72;
        v52[1] = v70;
        v52[2] = v71;
        unsigned __int8 v7 = v52 + 5;
      }
      a1[11] = v7;
      unint64_t v31 = a1[4];
      if (v3 >= v31) {
        goto LABEL_78;
      }
      uint64_t v32 = 3;
      goto LABEL_77;
    }
    unint64_t v31 = a1[4];
LABEL_81:
    a1[5] = v31;
  }
}

BOOL sub_1002D7884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 88) - v1) >> 4) < 3) {
    return 0;
  }
  uint64_t v3 = v1 + 16 * ((*(void *)(a1 + 88) - v1) >> 4);
  double v4 = *(double *)(v3 - 152);
  double v5 = sub_100064680(*(double *)(v3 - 232), *(double *)(v3 - 224), v4);
  double v7 = v6;
  double v8 = sub_100064680(*(double *)(v3 - 72), *(double *)(v3 - 64), v4);
  double v10 = v9;
  double v11 = sub_100065398(v5, v7);
  double v12 = sub_100065398(v8, v10);
  BOOL result = 0;
  if (v11 >= 0.00001 && v12 >= 0.00001)
  {
    double v13 = sub_100064660(v5, v7);
    double v15 = v14;
    double v16 = sub_100064660(v8, v10);
    return sub_10006468C(v13, v15, v16, v17) >= 0.9;
  }
  return result;
}

uint64_t sub_1002D7998(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014EAC90;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x360], 8) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014EACF8;
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1002D7A1C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  *(void *)a1 = off_1014EAC90;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x360], 8) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014EACF8;
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }

  operator delete();
}

void *sub_1002D7AC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_1002D7B50(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_10016BE28(a1 + 48, *(void *)(a1 + 32));
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 32), v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 72);

  return v3(a1);
}

uint64_t sub_1002D7BE8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1002D7BF0()
{
  return 0;
}

void *sub_1002D7BF8(void *a1)
{
  *a1 = off_1014EAC90;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014EACF8;
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1002D7C74(void *a1)
{
  *a1 = off_1014EAC90;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_1014EACF8;
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1002D7D14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_1002D80AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D8114(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8158(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D819C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D81E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D84A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D84E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D8AC8(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100004E40();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)sub_10001EAB0(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    double v9 = &v6[16 * v8];
    double v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1002D8B7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8BC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D8E44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D8E88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D922C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D9268(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D92AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D92F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D9334(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D97A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D9804(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002D9848(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_1002D9A5C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    uint64_t result = sub_10001EBF4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002D9ABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x360], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DA350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002DA368(uint64_t a1, void *a2)
{
  id result = [a2 frameForCulling];
  double v4 = *(void **)(*(void *)(a1 + 32) + 8);
  void v4[4] = v5;
  v4[5] = v6;
  v4[6] = v7;
  v4[7] = v8;
  return result;
}

void sub_1002DB2B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DB2FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DBF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_1002DBF54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DBF98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1002DBFDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002DBFEC(uint64_t a1)
{
}

void sub_1002DBFF4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = [a2 geometryInRoot];
    double v4 = v3;
    if (v3) {
      [v3 fullTransform];
    }
    else {
      memset(v16, 0, sizeof(v16));
    }
    double v10 = +[CRLCanvasInfoGeometry geometryFromFullTransform:v16];
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EAFC8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10109A388();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EAFE8);
    }
    uint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFreehandDrawingEditor createFreehandDrawingsToCopyForSubselection]_block_invoke");
    uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingEditor.m"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:464 isFatal:0 description:"Expected a layout so that we can calculate the geometries correctly"];

    uint64_t v8 = [CRLCanvasInfoGeometry alloc];
    double v9 = *(void **)(a1 + 32);
    if (v9)
    {
      [v9 transformInRoot];
      double v9 = *(void **)(a1 + 32);
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
    }
    double v4 = [v9 geometry:v13, v14, v15];
    [v4 size];
    double v10 = -[CRLCanvasInfoGeometry initWithTransform:size:](v8, "initWithTransform:size:", &v13);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  double v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_1002DC1F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC27C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC2C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC304(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC348(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC670(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC6B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC964(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC9A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DC9EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  double v12 = sub_1002DCAF8;
  long long v13 = &unk_1014EB130;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v7;
  long long v18 = *(_OWORD *)(a1 + 48);
  id v16 = v6;
  id v17 = v8;
  id v9 = v6;
  id v10 = v5;
  if (+[NSThread isMainThread]) {
    v12((uint64_t)v11);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);
  }
}

void sub_1002DCAF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    [*(id *)(a1 + 40) p_insertFreehandDrawingsFromProviders:v2 atUnscaledPoint:0 isCrossDocument:*(void *)(a1 + 56) completionHandler:*(double *)(a1 + 64), *(double *)(a1 + 72)];
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014EB108);
    }
    uint64_t v3 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10106BD98(v3);
    }
    if ([*(id *)(a1 + 48) count])
    {
      double v4 = [*(id *)(a1 + 40) interactiveCanvasController];
      id v5 = [v4 layerHost];
      [v5 presentErrors:*(void *)(a1 + 48) withLocalizedDescription:0 completionHandler:0];
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void *))(v6 + 16))(v6, &__NSArray0__struct);
    }
  }
  uint64_t v7 = [*(id *)(a1 + 40) interactiveCanvasController];
  uint64_t v8 = [v7 editingCoordinator];
  [v8 resumeCollaborationWithReason:@"CRLFreehandEditorInsertingAsyncDrawables"];
}

void sub_1002DCC20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002DD574(_Unwind_Exception *a1)
{
}

void sub_1002DD5E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DD628(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DD66C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(CGRect **)(*(void *)(a1 + 32) + 8);
  [v3 boundsForStandardKnobs];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  if (v3) {
    [v3 transform];
  }
  else {
    memset(&v13, 0, sizeof(v13));
  }
  v14.origin.double x = v6;
  v14.origin.CGFloat y = v8;
  v14.size.CGFloat width = v10;
  v14.size.CGFloat height = v12;
  CGRect v15 = CGRectApplyAffineTransform(v14, &v13);
  *(CGRect *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) = CGRectUnion(v4[1], v15);
}

void sub_1002DDDA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DDDEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DDE30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DDE74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002DFD20(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) makeDuplicateOfBoardItem:a2];
}

void sub_1002DFD2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DFD70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DFDB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DFDF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DFE3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002DFE80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E0440(id *a1)
{
  id v4 = [a1[5] canvasEditor];
  uint64_t v2 = [a1[6] boardItems];
  id v3 = [v4 selectionPathWithInfos:v2];
  [a1[4] setSelectionPath:v3];
}

_TtC8Freeform12CRLBoardItem *__cdecl sub_1002E06A4(id a1, CRLCanvasElementInfo *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class();
  id v4 = sub_1002469D0(v3, v2);

  return (_TtC8Freeform12CRLBoardItem *)v4;
}

_TtC8Freeform27CRLFreehandDrawingShapeItem *__cdecl sub_1002E0700(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class();
  id v4 = sub_1002469D0(v3, v2);

  return (_TtC8Freeform27CRLFreehandDrawingShapeItem *)v4;
}

void sub_1002E0844(id a1)
{
  id v1 = objc_alloc_init((Class)NSNumberFormatter);
  uint64_t v2 = (void *)qword_1016A95E8;
  qword_1016A95E8 = (uint64_t)v1;

  uint64_t v3 = (void *)qword_1016A95E8;

  [v3 setNumberStyle:3];
}

void sub_1002E0E70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E0EB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E1074(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E10B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E12D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E131C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E14B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E14F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E16A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E16EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E1880(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E18C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E3850(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E3894(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E38D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E391C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E3960(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E39A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E4500(void *a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = a1;
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.freeform.CRLMovieItemImporter", v2);
  double v5 = (void *)v3[6];
  v3[6] = v4;

  CGFloat v6 = objc_alloc_init(CRLScaledProgress);
  id v7 = (id)v3[8];
  v3[8] = v6;
}

id sub_1002E46E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_createAssetDataAndThenContinueImport];
}

void sub_1002E4A98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E4ADC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E4B20(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014EB640);
    }
    CGFloat v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10109ACFC(v8, v7);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), a2);
    uint64_t v9 = [v6 AVAssetAndReturnError:0];
    uint64_t v10 = *(void *)(a1 + 32);
    double v11 = *(void **)(v10 + 96);
    *(void *)(v10 + 96) = v9;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  CGAffineTransform v13 = *(NSObject **)(v12 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1002E4CB0;
  block[3] = &unk_1014CBBB0;
  void block[4] = v12;
  dispatch_async(v13, block);
}

void sub_1002E4C6C(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_1002E4CB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_performMovieCompatibilityAnalysis];
}

void sub_1002E4FE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E5028(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E506C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1002E5110;
  block[3] = &unk_1014CD770;
  void block[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, block);
}

void sub_1002E5110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 128))
  {
    uint64_t v5 = [*(id *)(v2 + 104) error];
    uint64_t v3 = *(void *)(a1 + 32);
    if (v5)
    {
      id v4 = (void *)v5;
      goto LABEL_6;
    }
    uint64_t v7 = (uint64_t)[*(id *)(v3 + 104) compatibilityLevel];
    unsigned __int8 v8 = [*(id *)(*(void *)(a1 + 32) + 104) wasAssetHEVC];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9)
    {
      if (*(unsigned char *)(*(void *)(a1 + 32) + 129)) {
        LODWORD(v9) = 0;
      }
      else {
        LODWORD(v9) = *(void *)(a1 + 48) > 3;
      }
    }
    if (v7 < 5) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v7 == 4) {
      +[CRLMovieCompatibilityChecker assetContainsVideoTracksWithAlpha:*(void *)(*(void *)(a1 + 32) + 96)];
    }
    unsigned int v11 = [*(id *)(*(void *)(a1 + 32) + 96) crl_containsHDRContent];
    if (*(void *)(a1 + 40) && v11 | v10)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 129) = 1;
      LOBYTE(v12) = v8;
      [*(id *)(a1 + 40) boardItemImporter:_NSConcreteStackBlock needsMediaCompatibilityFeedbackWithReasons:3221225472 forMediaType:sub_1002E531C usingBlock:*(void *)(a1 + 32) v7:v12];
    }
    else
    {
      [*(id *)(a1 + 32) p_importBoardItemFromAssetConvertingIfNeededToRequiredCompatibilityLevel:*(void *)(a1 + 48) allowHEVCContent:1 fromCompatibilityLevel:v7];
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 128))
  {
    id v4 = 0;
LABEL_6:
    [v3 p_finishImportingWithBoardItem:0 error:v4];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  id v6 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = 0;
}

void sub_1002E531C(uint64_t a1, char a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002E53B4;
  v5[3] = &unk_1014EB6D0;
  v5[4] = v3;
  char v7 = a2;
  char v8 = a3;
  char v9 = *(unsigned char *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 40);
  dispatch_async(v4, v5);
}

id sub_1002E53B4(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[128]) {
    return [v2 p_finishImportingWithBoardItem:0 error:0];
  }
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v4 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v4 = 3;
  }
  if (!*(unsigned char *)(a1 + 57))
  {
    if (*(unsigned char *)(a1 + 58)) {
      uint64_t v4 = 5;
    }
  }
  return [v2 p_importBoardItemFromAssetConvertingIfNeededToRequiredCompatibilityLevel:v4 allowHEVCContent:[*(unsigned __int8 *)(a1 + 57) != 0] fromCompatibilityLevel:[*(void *)(a1 + 48)]];
}

void sub_1002E5764(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E57A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E57EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1002E5868;
  block[3] = &unk_1014CBBB0;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1002E5868(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 128))
  {
    uint64_t v3 = 0;
LABEL_3:
    [v2 p_finishImportingWithBoardItem:0 error:v3];
    id obj = 0;
    goto LABEL_6;
  }
  id obj = [*(id *)(v2 + 112) convertedMediaData];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 112) error];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!obj) {
    goto LABEL_3;
  }
  objc_storeStrong((id *)(v2 + 72), obj);
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 72) AVAssetAndReturnError:0];
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(void **)(v5 + 96);
  *(void *)(v5 + 96) = v4;

  [*(id *)(a1 + 32) p_importBoardItemFromAsset];
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(void **)(v7 + 112);
  *(void *)(v7 + 112) = 0;
}

void sub_1002E5CFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E5D40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E6164(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E61A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E62EC(uint64_t a1, CGImage *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  CGImageRetain(a2);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(NSObject **)(v7 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1002E63C0;
  _OWORD v10[3] = &unk_1014EB870;
  CGAffineTransform v13 = a2;
  v10[4] = v7;
  id v11 = v6;
  id v12 = *(id *)(a1 + 40);
  id v9 = v6;
  dispatch_async(v8, v10);
}

void sub_1002E63C0(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (!v2[128])
  {
    if (*(void *)(a1 + 56))
    {
      uint64_t v5 = [_TtC8Freeform27CRLPreinsertionAssetWrapper alloc];
      id v6 = sub_10047EC98(*(CGImage **)(a1 + 56));
      uint64_t v7 = [*(id *)(a1 + 32) boardItemFactory];
      char v8 = [v7 assetOwner];
      id v17 = 0;
      id v9 = [(CRLPreinsertionAssetWrapper *)v5 initWithData:v6 filename:@"posterImage.png" owner:v8 error:&v17];
      id v10 = v17;

      if (v9)
      {

        goto LABEL_8;
      }
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014EB7D8);
      }
      id v11 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_10109B004(v11, v10);
      }
    }
    if (!*(void *)(a1 + 40)
      || ([*(id *)(a1 + 48) isAudioOnly] & 1) != 0
      || [*(id *)(a1 + 40) code] != (id)-11832
      || ([*(id *)(a1 + 40) domain],
          id v12 = objc_claimAutoreleasedReturnValue(),
          unsigned int v13 = [v12 isEqualToString:AVFoundationErrorDomain],
          v12,
          !v13)
      || ([*(id *)(a1 + 48) generateEmptyPosterImage],
          (id v9 = (_TtC8Freeform27CRLPreinsertionAssetWrapper *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      unsigned int v14 = [*(id *)(a1 + 48) isAudioOnly];
      uint64_t v2 = *(unsigned char **)(a1 + 32);
      if (v14)
      {
        uint64_t v4 = *(void *)(a1 + 40);
        uint64_t v3 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 40);
        uint64_t v3 = 0;
      }
      goto LABEL_3;
    }
LABEL_8:
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1002E664C;
    v15[3] = &unk_1014EB848;
    v15[4] = *(void *)(a1 + 32);
    id v16 = *(id *)(a1 + 48);
    [(CRLPreinsertionAssetWrapper *)v9 createAssetWithCompletionHandler:v15];

    goto LABEL_4;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_3:
  [v2 p_finishImportingWithBoardItem:v3 error:v4];
LABEL_4:
  CGImageRelease(*(CGImageRef *)(a1 + 56));
}

void sub_1002E6608(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002E664C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(NSObject **)(v7 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1002E6734;
  v11[3] = &unk_1014EB820;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

id sub_1002E6734(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014EB7F8);
    }
    uint64_t v3 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10109B0BC(v2, v3);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 80), *(id *)(a1 + 48));
  }
  return [*(id *)(a1 + 40) p_finishImportingWithBoardItem:*(void *)(a1 + 56) error:*(void *)(a1 + 32)];
}

void sub_1002E67E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002E68F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002E6994;
  v3[3] = &unk_1014CBE78;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_1002E6994(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 128))
  {
    uint64_t v2 = 0;
    goto LABEL_3;
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    while (2)
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        id v10 = *(void **)(*(void *)(a1 + 32) + 96);
        id v18 = 0;
        id v11 = [v10 statusOfValueForKey:v9 error:&v18];
        id v12 = v18;
        uint64_t v13 = v12;
        if (v11 != (id)2)
        {
          id v3 = [v12 copy];

          goto LABEL_16;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  id v14 = [*(id *)(a1 + 32) p_isURLRemote];
  id v15 = [*(id *)(*(void *)(a1 + 32) + 96) crl_containsVideoTracks];
  unsigned __int8 v16 = [*(id *)(*(void *)(a1 + 32) + 96) crl_containsAudioTracks];
  id v17 = *(void **)(a1 + 32);
  if ((v15 & 1) == 0 && (v16 & 1) == 0)
  {
    [v17 p_importErrorForLackOfAVTracks];
    id v3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  uint64_t v2 = [v17 p_makeMovieItemWithContainsVisibleTrack:v15 andIsURLRemote:v14];
  if (!v2
    || (objc_msgSend(*(id *)(a1 + 32), "p_setPropertiesFromLoadedAssetToMovie:containsVideoTrack:", v2, v15),
        objc_msgSend(*(id *)(a1 + 32), "p_asynchronouslyGeneratePosterImagesAndFinishImportingMovieItem:", v2),
        *(unsigned char *)(*(void *)(a1 + 32) + 128)))
  {
LABEL_3:
    id v3 = 0;
LABEL_17:
    [*(id *)(a1 + 32) p_finishImportingWithBoardItem:0 error:v3];
  }
}

void sub_1002E7218(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E725C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E72A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1002E72E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(NSObject **)(v7 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1002E73CC;
  v11[3] = &unk_1014EB820;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

id sub_1002E73CC(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014EB918);
    }
    id v3 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_10109B0BC(v2, v3);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 80), *(id *)(a1 + 48));
  }
  return [*(id *)(a1 + 40) p_finishImportingWithBoardItem:*(void *)(a1 + 56) error:*(void *)(a1 + 32)];
}

void sub_1002E7478(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_1002E7B24(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 12_Block_object_dispose(&STACK[0x220], 8) = 1;
  [*(id *)(*(void *)(a1 + 32) + 104) cancel];
  [*(id *)(*(void *)(a1 + 32) + 96) cancelLoading];
  [*(id *)(*(void *)(a1 + 32) + 112) cancel];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);

  return _[v2 cancelAllCGImageGeneration];
}

void sub_1002E8288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1002E82CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v2)
  {
    [WeakRetained maxValue];
    if (v3 > 0.0)
    {
      double v4 = v3;
      [WeakRetained value];
      [v2 setCompletedUnitCount:(uint64_t)(v5 / v4 * (double)*(uint64_t *)(a1 + 48))];
    }
  }
}

void sub_1002E8368(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002E83AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002E987C(CRLCanvasKnobAccessibilityElement *self, SEL a2, id a3, id a4, CGPoint a5)
{
  return 0;
}

BOOL sub_1002EA190(id a1, CRLCanvasRep *a2, NSDictionary *a3)
{
  double v3 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return (isKindOfClass & 1) == 0;
}

id sub_1002EA520(CRLCanvasKnobAccessibilityElement *self, SEL a2, id a3, unint64_t a4, CGPoint a5)
{
  return 0;
}

int64_t sub_1002EA74C(id a1, CRLCanvasKnobAccessibilityElement *a2, CRLCanvasKnobAccessibilityElement *a3)
{
  double v4 = a2;
  double v5 = a3;
  signed int v6 = +[CRLCanvasKnobAccessibilityElement _crlaxCategoryRankForKnobElement:v4];
  signed int v7 = +[CRLCanvasKnobAccessibilityElement _crlaxCategoryRankForKnobElement:v5];
  BOOL v8 = v6 == v7;
  if (v6 < v7) {
    int64_t v9 = -1;
  }
  else {
    int64_t v9 = 1;
  }
  if (v8)
  {
    unint64_t v10 = sub_1002EA7F8(v4);
    unint64_t v12 = v11;
    unint64_t v13 = sub_1002EA7F8(v5);
    if (v10 < v13) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = 1;
    }
    if (v10 == v13) {
      uint64_t v15 = 0;
    }
    if (v12 < v14) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 1;
    }
    if (v12 == v14) {
      int64_t v9 = v15;
    }
    else {
      int64_t v9 = v16;
    }
  }

  return v9;
}

uint64_t sub_1002EA7F8(void *a1)
{
  uint64_t v8 = 0;
  int64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002EC2E4;
  v5[3] = &unk_1014CB090;
  signed int v7 = &v8;
  id v1 = a1;
  id v6 = v1;
  if (__CRLAccessibilityPerformSafeBlock((uint64_t)v5)) {
    abort();
  }

  uint64_t v2 = v9[3];
  _Block_object_dispose(&v8, 8);
  if ((unint64_t)(v2 - 1) > 8) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = qword_101177810[v2 - 1];
  }

  return v3;
}

void sub_1002EA90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002EC2E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) knobTag];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1002EC4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002EC938(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EC97C(id a1, CRLKeyboardObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(CRLKeyboardObserver *)v2 keyboardHideCanceled];
  }
}

void sub_1002EC9CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardWillShowOrDock:*(void *)(a1 + 32)];
  }
}

void sub_1002ECBD0(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002ECC14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardDidShowOrDock:*(void *)(a1 + 32)];
  }
}

void sub_1002ECE14(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002ECE58(id a1, CRLKeyboardObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(CRLKeyboardObserver *)v2 keyboardShowCanceled];
  }
}

void sub_1002ECEA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardWillHideOrUndock:*(void *)(a1 + 32)];
  }
}

void sub_1002ED07C(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002ED0C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardDidHideOrUndock:*(void *)(a1 + 32)];
  }
}

void sub_1002ED254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002ED270(uint64_t a1)
{
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014EBB50);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10109B2D0();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014EBB70);
  }
  uint64_t v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v2);
  }
  id v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSKeyboardMonitor p_scheduleKeyboardIsAnimatingInTimer]_block_invoke");
  double v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSKeyboardMonitor.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 278, 0, "Had to force keyboard animating to NO, OS never finished telling us the keyboard came in or cancelled.");

  double v5 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v5);
  [WeakRetained setKeyboardIsAnimatingInOrDocking:0];

  id v7 = objc_loadWeakRetained(v5);
  [v7 p_clearKeyboardIsAnimatingInTimer];
}

void sub_1002ED3E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ED424(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ED738(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ED77C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002ED938(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002ED9D0(id a1)
{
  id v1 = objc_alloc_init(CRLiOSKeyboardMonitor);
  uint64_t v2 = (void *)qword_1016A95F0;
  qword_1016A95F0 = (uint64_t)v1;
}

void sub_1002EDF34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EDF78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EDFBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE000(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE3D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE414(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE5F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE634(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EE7CC(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EEBD4(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EEE0C(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

uint64_t sub_1002EEE50(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1002EF3D8(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EF62C(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EF7F8(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EF83C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardWillChangeFrame:*(void *)(a1 + 32)];
  }
}

void sub_1002EFA30(id a1)
{
  id v1 = sub_100401ECC("CRLKeyboardCat");
  uint64_t v2 = off_10166B5D0;
  off_10166B5D0 = v1;
}

void sub_1002EFA74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 keyboardDidChangeFrame:*(void *)(a1 + 32)];
  }
}

void sub_1002EFDD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EFE18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002EFFD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F0018(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F0A9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F0AE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F14F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F1538(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F17FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F1840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F1DF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F1E3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F241C(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (!CGRectIsNull(*(CGRect *)&a2))
  {
    CGContextSaveGState(a1);
    uint64_t v10 = +[CRLColor whiteColor];
    CGContextSetFillColorWithColor(a1, (CGColorRef)[v10 CGColor]);

    v19.origin.double x = a2;
    v19.origin.CGFloat y = a3;
    v19.size.CGFloat width = a4;
    v19.size.CGFloat height = a5;
    CGContextFillRect(a1, v19);
    CGContextSetLineWidth(a1, 1.0);
    uint64_t v11 = +[CRLColor redColor];
    unint64_t v12 = [v11 colorWithAlphaComponent:0.38];
    CGContextSetStrokeColorWithColor(a1, (CGColorRef)[v12 CGColor]);

    Mutable = CGPathCreateMutable();
    v20.origin.double x = a2;
    v20.origin.CGFloat y = a3;
    v20.size.CGFloat width = a4;
    v20.size.CGFloat height = a5;
    CGFloat MinX = CGRectGetMinX(v20);
    v21.origin.double x = a2;
    v21.origin.CGFloat y = a3;
    v21.size.CGFloat width = a4;
    v21.size.CGFloat height = a5;
    CGFloat MaxY = CGRectGetMaxY(v21);
    CGPathMoveToPoint(Mutable, 0, MinX, MaxY);
    v22.origin.double x = a2;
    v22.origin.CGFloat y = a3;
    v22.size.CGFloat width = a4;
    v22.size.CGFloat height = a5;
    CGFloat MaxX = CGRectGetMaxX(v22);
    v23.origin.double x = a2;
    v23.origin.CGFloat y = a3;
    v23.size.CGFloat width = a4;
    v23.size.CGFloat height = a5;
    CGFloat MinY = CGRectGetMinY(v23);
    CGPathAddLineToPoint(Mutable, 0, MaxX, MinY);
    CGContextAddPath(a1, Mutable);
    CGContextStrokePath(a1);
    CGPathRelease(Mutable);
    CGContextRestoreGState(a1);
  }
}

void sub_1002F290C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F2950(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F2994(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F29D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F2D30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F2D74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F2F14(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initDefaultCursor];
  uint64_t v2 = (void *)qword_1016A9600;
  qword_1016A9600 = (uint64_t)v1;
}

void sub_1002F3334(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F3378(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F3AF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F3B38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F4648(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F468C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F4724(id a1)
{
  id v1 = [[CRLCursor alloc] initRepContentPlatformViewPlaceholder];
  uint64_t v2 = (void *)qword_1016A9638;
  qword_1016A9638 = (uint64_t)v1;
}

void sub_1002F4B28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F4B6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F4D30(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1016A9648;
  qword_1016A9648 = (uint64_t)v1;
}

void sub_1002F51B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F51F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F5488(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F54CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F5E74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F5EB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F5EFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F5F40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F61F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F6234(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7A20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7A64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7DC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7E08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7E4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F7E90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002F8E30(uint64_t a1)
{
  return [*(id *)(a1 + 32) willBeginEditingContainedInfo:*(void *)(a1 + 40)];
}

int64_t sub_1002F8FE0(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  char v27 = 0;
  id v6 = v4;
  id v7 = objc_opt_class();
  uint64_t v8 = __CRLAccessibilityCastAsSafeCategory(v7, (uint64_t)v6, 1, &v27);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v9 = (void *)v8;

  char v26 = 0;
  id v10 = v5;
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = __CRLAccessibilityCastAsSafeCategory(v11, (uint64_t)v10, 1, &v26);
  if (v26) {
    goto LABEL_14;
  }
  unint64_t v13 = (void *)v12;

  if (!v9 || !v13)
  {
    if (!CRLAccessibilityShouldPerformValidationChecks()
      || (int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch(),
          uint64_t v19 = objc_opt_class(),
          objc_opt_class(),
          !__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"Expected content siblings to be text reps, got %@ and %@", v20, v21, v22, v23, v24, v19)))
    {
      int64_t v17 = 0;
      goto LABEL_13;
    }
LABEL_14:
    abort();
  }
  id v14 = [v9 crlaxStorageRangeOfRep];
  id v15 = [v13 crlaxStorageRangeOfRep];
  uint64_t v16 = -1;
  if (v14 >= v15) {
    uint64_t v16 = 1;
  }
  if (v14 == v15) {
    int64_t v17 = 0;
  }
  else {
    int64_t v17 = v16;
  }
LABEL_13:

  return v17;
}

void sub_1002F92FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9314(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002F9324(uint64_t a1)
{
}

void sub_1002F932C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) columnForCharIndex:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002F9498(uint64_t a1, void *a2)
{
  return [a2 crlaxSetParentInteractiveCanvasController:*(void *)(a1 + 32)];
}

int64_t sub_1002F97DC(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  char v20 = 0;
  id v6 = v4;
  id v7 = objc_opt_class();
  uint64_t v8 = __CRLAccessibilityCastAsSafeCategory(v7, (uint64_t)v6, 1, &v20);
  if (v20
    || (int64_t v9 = (void *)v8,
        v6,
        char v19 = 0,
        id v10 = v5,
        uint64_t v11 = objc_opt_class(),
        __CRLAccessibilityCastAsSafeCategory(v11, (uint64_t)v10, 1, &v19),
        uint64_t v12 = objc_claimAutoreleasedReturnValue(),
        v19))
  {
    abort();
  }
  unint64_t v13 = (void *)v12;

  [v9 crlaxFrameInScreenSpace];
  double v15 = v14;
  [v13 crlaxFrameInScreenSpace];
  if (v15 >= v16) {
    int64_t v17 = 1;
  }
  else {
    int64_t v17 = -1;
  }

  return v17;
}

void sub_1002F98D8(uint64_t a1, void *a2)
{
  char v8 = 0;
  id v3 = a2;
  id v4 = objc_opt_class();
  uint64_t v5 = __CRLAccessibilityCastAsSafeCategory(v4, (uint64_t)v3, 1, &v8);
  if (v8) {
    abort();
  }
  id v6 = (void *)v5;

  id v7 = [v6 crlaxSummaryDescription];
  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_1002F9BB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002F9BF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA5C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA604(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA8C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA90C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA950(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FA994(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FAC58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FAC9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FACE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FAD24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FB848(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FB88C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FBA6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FBAB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FBF38(uint64_t a1)
{
  id v4 = +[CRLPair pairWithFirst:*(void *)(a1 + 32) second:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 48) + 48) addObject:v4];
  id v2 = [*(id *)(a1 + 56) copy];
  id v3 = objc_retainBlock(v2);
  [*(id *)(*(void *)(a1 + 48) + 56) setObject:v3 forKeyedSubscript:v4];

  *(unsigned char *)(*(void *)(a1 + 48) + 72) = 0;
}

void sub_1002FC0D0(void *a1)
{
  id v2 = (void *)a1[4];
  if (!v2[8])
  {
    objc_initWeak(&location, v2);
    uint64_t v5 = _NSConcreteStackBlock;
    uint64_t v6 = 3221225472;
    id v7 = sub_1002FC230;
    char v8 = &unk_1014EC5F8;
    objc_copyWeak(&v9, &location);
    *(void *)(a1[4] + 64) = CFRunLoopObserverCreateWithHandler(0, 0x20uLL, 0, 0, &v5);
    Main = CFRunLoopGetMain();
    CFRunLoopAddObserver(Main, *(CFRunLoopObserverRef *)(a1[4] + 64), kCFRunLoopCommonModes);
    *(unsigned char *)(a1[4] + 72) = 1;
    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
  id v4 = +[CRLPair pairWithFirst:second:](CRLPair, "pairWithFirst:second:", a1[5], a1[6], v5, v6, v7, v8);
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = [*(id *)(a1[4] + 48) containsObject:v4];
  if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)) {
    [*(id *)(a1[4] + 48) removeObject:v4];
  }
}

void sub_1002FC210(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1002FC230(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained p_tearDownRunloopObserver];
}

id sub_1002FC3A8(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1002FC3D4(uint64_t a1)
{
}

void sub_1002FC3DC(void *a1)
{
  id v5 = +[CRLPair pairWithFirst:a1[4] second:a1[5]];
  uint64_t v2 = [*(id *)(a1[6] + 56) objectForKeyedSubscript:v5];
  uint64_t v3 = *(void *)(a1[7] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(a1[6] + 56) removeObjectForKey:v5];
}

void sub_1002FC7D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(__CFRunLoopObserver **)(v2 + 64);
  if (v3)
  {
    if (*(unsigned char *)(v2 + 72))
    {
      [*(id *)(v2 + 48) removeAllObjects];
      uint64_t v3 = *(__CFRunLoopObserver **)(*(void *)(a1 + 32) + 64);
    }
    CFRunLoopObserverInvalidate(v3);
    id v4 = *(const void **)(*(void *)(a1 + 32) + 64);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(a1 + 32) + 64) = 0;
    }
  }
}

uint64_t sub_1002FC99C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = [v3 rootIndex] == (id)0x7FFFFFFFFFFFFFFFLL
    || [v4 rootIndex] == (id)0x7FFFFFFFFFFFFFFFLL;
  id v6 = [v3 rootIndex];
  id v7 = [v4 rootIndex];
  if ((uint64_t)v6 < (uint64_t)v7) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = (uint64_t)v6 > (uint64_t)v7;
  }
  if (v5 || !v8)
  {
    uint64_t v8 = (uint64_t)[v3 compare:v4];
    if (!v8)
    {
      [v3 searchReferencePoint];
      double v10 = v9;
      double v12 = v11;
      [v4 searchReferencePoint];
      uint64_t v15 = v12 > v14;
      if (v12 < v14) {
        uint64_t v15 = -1;
      }
      uint64_t v16 = v10 > v13;
      if (v10 < v13) {
        uint64_t v16 = -1;
      }
      if (v15) {
        uint64_t v8 = v15;
      }
      else {
        uint64_t v8 = v16;
      }
    }
  }

  return v8;
}

void sub_1002FCD4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FCD90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD290(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD2D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD5CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD610(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD908(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FD94C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FDD48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FDD8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002FDDD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) continueCountingHits];
}

void sub_1002FDF4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FDF90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FE25C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FE2A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002FE2E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) continueCountingHits];
}

void sub_1002FE4A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FE4E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FE6EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FE730(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FEBDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FEC20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FEF2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FEF70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

int64_t sub_1002FEFC4(id a1, id a2, id a3)
{
  return sub_1002FC99C(a2, a3);
}

void sub_1002FF6C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FF70C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1002FF750(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) performSearchWithSearchTarget:a2 resultsArray:*(void *)(a1 + 40)];
}

void sub_1002FFB20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FFB64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1002FFBA8(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002FFC94;
  v8[3] = &unk_1014EC9A8;
  id v9 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  [v4 asyncPerformSearchWithSearchTarget:a2 resultsArray:v5 completionBlock:v8];
}

void sub_1002FFC94(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) count];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = *(id *)(a1 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        [v8 setRootIndex:*(void *)(a1 + 72) v15];
        [*(id *)(a1 + 32) addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }

  id v9 = [*(id *)(a1 + 32) count];
  id v10 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
  uint64_t v11 = +[NSNumber numberWithUnsignedInteger:v9 - v2];
  id v12 = [*(id *)(a1 + 48) layoutSearchCountForRootIndexMap];
  [v12 setObject:v11 forKey:v10];

  [*(id *)(a1 + 56) removeAllObjects];
  id v13 = *(void **)(a1 + 56);
  uint64_t v14 = [*(id *)(a1 + 32) allObjects];
  [v13 addObjectsFromArray:v14];

  [*(id *)(a1 + 48) sortLayoutSearchResultsArray:*(void *)(a1 + 56)];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100300094(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003000D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100300838(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030087C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003008C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100300904(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100300E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100300E64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100300E74(uint64_t a1)
{
}

void sub_100300E7C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  [v9 searchReferencePoint];
  v11.double x = v7;
  v11.CGFloat y = v8;
  if (CGRectContainsPoint(*(CGRect *)(a1 + 40), v11))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1003010B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003010F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003014AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003014F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100301950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100301978(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if ([(id)objc_opt_class() searchReference:v7 isAfterSearchReference:a1[5] inDirection:a1[7]])
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_100301AC8(uint64_t a1)
{
  [*(id *)(a1 + 32) p_searchReferenceAfterReference:*(void *)(a1 + 40) inDirection:*(void *)(a1 + 56)];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100302950(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302994(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003029D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302A1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302A60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302AA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302AE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302B2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100302C10(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1016A9660;
  qword_1016A9660 = (uint64_t)v1;
}

void sub_100303834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10030384C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10030385C(uint64_t a1)
{
}

void sub_100303864(uint64_t a1)
{
  id v5 = +[UIColor secondaryLabelColor];
  uint64_t v2 = +[CRLColor colorWithUIColor:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100303B04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dismissAnimated:0];
}

void sub_100303CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100303DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100303E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100303F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100304148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100304770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100304848(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030488C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003048D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100304914(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100304958(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030499C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100304A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100304B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100304FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305030(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100305074(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003050B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003050FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100305218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003052F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003056D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_100305BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_100189C94((id *)va);
  _Unwind_Resume(a1);
}

void sub_100305C3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100305C80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100305D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305FB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100305FFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100306190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100306DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v50 - 240), 8);

  _Block_object_dispose((const void *)(v50 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100306F74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100306F84(uint64_t a1)
{
}

void sub_100306F8C(void *a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), a3);
  *(void *)(*(void *)(a1[5] + 8) + 24) = a2;
  id v6 = [v12 range];
  unint64_t v8 = a1[8];
  if (v8 - (unint64_t)v6 < v7 && v8 >= (unint64_t)v6 || v8 == (void)v6 + v7)
  {
    id v11 = [v12 lineIndexForCharIndex:eol:];
    if ((unint64_t)v11 <= 0x7FFFFFFFFFFFFFFELL)
    {
      objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
      *(void *)(*(void *)(a1[7] + 8) + 24) = [v12 lineFragmentAtIndex:v11];
    }
  }
}

void sub_10030706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100307084(uint64_t a1, uint64_t a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), obj);
  id v6 = obj;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
}

void sub_1003070E8(void **a1, long long *a2)
{
  id v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  id v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      sub_100004E40();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      long long v15 = (char *)sub_10015F68C(v4, v14);
    }
    else {
      long long v15 = 0;
    }
    long long v16 = &v15[40 * v11];
    long long v17 = &v15[40 * v14];
    long long v18 = *a2;
    long long v19 = a2[1];
    *((void *)v16 + 4) = *((void *)a2 + 4);
    *(_OWORD *)long long v16 = v18;
    *((_OWORD *)v16 + 1) = v19;
    id v10 = v16 + 40;
    uint64_t v21 = (char *)*a1;
    char v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 40);
        long long v23 = *(_OWORD *)(v20 - 24);
        *((void *)v16 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        *(_OWORD *)(v16 - 40) = v22;
        v16 -= 40;
        v20 -= 40;
      }
      while (v20 != v21);
      char v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    id v10 = (char *)(v7 + 40);
  }
  a1[1] = v10;
}

void sub_100307218(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030725C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003072A0(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) editorController];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) editor];
  [v4 setSelection:v2 forEditor:v3 withFlags:1024];
}

void sub_100307314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100307600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100307778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100307E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10030828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

char *sub_10030834C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) range];
  if (v2 >= [*(id *)(a1 + 40) range]
    || (uint64_t v3 = (char *)[*(id *)(a1 + 40) range],
        id v5 = &v3[v4],
        id v6 = (char *)[*(id *)(a1 + 32) range],
        v5 >= &v6[v7]))
  {
    id v13 = [*(id *)(a1 + 32) range];
    NSUInteger v15 = v14;
    v17.id location = (NSUInteger)[*(id *)(a1 + 40) range];
    v17.NSUInteger length = v16;
    v18.id location = (NSUInteger)v13;
    v18.NSUInteger length = v15;
    return (char *)NSUnionRange(v18, v17).location;
  }
  else
  {
    long long v8 = (char *)[*(id *)(a1 + 40) range];
    long long v9 = (char *)[*(id *)(a1 + 32) range];
    if (v8 <= &v9[v10 >> 1])
    {
      long long v19 = (char *)[*(id *)(a1 + 40) range];
      char v20 = (char *)[*(id *)(a1 + 32) range];
      if (v19 >= &v20[v21]) {
        return &v20[v21];
      }
      else {
        return v19;
      }
    }
    else
    {
      unint64_t v11 = (char *)[*(id *)(a1 + 32) range];
      id result = (char *)[*(id *)(a1 + 40) range];
      if (v11 < result) {
        return v11;
      }
    }
  }
  return result;
}

void sub_100308950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003089E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308A24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308A68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308AAC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308AF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308B34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100308C2C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100309208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100309280(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003092C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100309308(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030934C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100309390(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003093D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003094C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003094E0(uint64_t a1, uint64_t a2, id a3)
{
  id result = a3;
  **(void **)(a1 + 40) = result;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return result;
}

void sub_1003095FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100309620(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = a1;
  id v4 = a3;
  __p = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  id v5 = (double *)[v4 lineFragmentAtIndex:a2];
  unint64_t v6 = 0;
  double v7 = v5[6];
  uint64_t v8 = *((void *)v5 + 3);
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  while (v6 < (unint64_t)objc_msgSend(v4, "lineCount", v40))
  {
    unint64_t v10 = (double *)[v4 lineFragmentAtIndex:v6];
    unint64_t v11 = v10;
    double v12 = v10[6];
    if (v7 == v12 || vabdd_f64(v7, v12) < 0.00999999978)
    {
      if (v9 + 1 == v6)
      {
        id v14 = [v4 lineFragmentAtIndex:v9];
        id v15 = v14;
        if (v42 >= (double **)v43)
        {
          uint64_t v21 = ((char *)v42 - __p) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_100004E40();
          }
          unint64_t v22 = (v43 - __p) >> 2;
          if (v22 <= v21 + 1) {
            unint64_t v22 = v21 + 1;
          }
          if ((unint64_t)(v43 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            uint64_t v24 = (char *)sub_10002B494((uint64_t)&v43, v23);
          }
          else {
            uint64_t v24 = 0;
          }
          unint64_t v28 = &v24[8 * v21];
          *(void *)unint64_t v28 = v15;
          NSUInteger v16 = (double **)(v28 + 8);
          long long v29 = v42;
          if (v42 != (double **)__p)
          {
            do
            {
              uint64_t v30 = (uint64_t)*--v29;
              *((void *)v28 - 1) = v30;
              v28 -= 8;
            }
            while (v29 != (double **)__p);
            long long v29 = (double **)__p;
          }
          __p = v28;
          uint64_t v43 = &v24[8 * v23];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *int v42 = (double *)v14;
          NSUInteger v16 = v42 + 1;
        }
        int v42 = v16;
      }
      else
      {
        NSUInteger v16 = v42;
      }
      if (v16 >= (double **)v43)
      {
        uint64_t v32 = ((char *)v16 - __p) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_69:
        }
          sub_100004E40();
        unint64_t v33 = (v43 - __p) >> 2;
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        if ((unint64_t)(v43 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34) {
          unint64_t v35 = (char *)sub_10002B494((uint64_t)&v43, v34);
        }
        else {
          unint64_t v35 = 0;
        }
        unint64_t v36 = (double **)&v35[8 * v32];
        *unint64_t v36 = v11;
        unint64_t v31 = v36 + 1;
        uint64_t v37 = v42;
        if (v42 != (double **)__p)
        {
          do
          {
            uint64_t v38 = *--v37;
            *--unint64_t v36 = v38;
          }
          while (v37 != (double **)__p);
          uint64_t v37 = (double **)__p;
        }
        __p = (char *)v36;
        uint64_t v43 = &v35[8 * v34];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *NSUInteger v16 = v11;
        unint64_t v31 = v16 + 1;
      }
      int v42 = v31;
    }
    else if ((v8 & 0x100000000) != 0 && v6 == a2 + 1)
    {
      if (v42 >= (double **)v43)
      {
        uint64_t v17 = ((char *)v42 - __p) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          goto LABEL_69;
        }
        unint64_t v18 = (v43 - __p) >> 2;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if ((unint64_t)(v43 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          char v20 = (char *)sub_10002B494((uint64_t)&v43, v19);
        }
        else {
          char v20 = 0;
        }
        long long v25 = (double **)&v20[8 * v17];
        *long long v25 = v11;
        id v13 = v25 + 1;
        char v26 = v42;
        if (v42 != (double **)__p)
        {
          do
          {
            char v27 = *--v26;
            *--long long v25 = v27;
          }
          while (v26 != (double **)__p);
          char v26 = (double **)__p;
        }
        __p = (char *)v25;
        uint64_t v43 = &v20[8 * v19];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *int v42 = v10;
        id v13 = v42 + 1;
      }
      int v42 = v13;
      double v7 = v12;
    }
    else if (((void)v10[3] & (unint64_t)&_mh_execute_header) != 0)
    {
      uint64_t v9 = v6;
    }
    ++v6;
  }
  long long v39 = v42;
  if (v42 != (double **)__p)
  {
    (*(void (**)(void))(*(void *)(v40 + 32) + 16))();
    long long v39 = (double **)__p;
  }
  *(unsigned char *)(*(void *)(*(void *)(v40 + 40) + 8) + 24) = 1;
  if (v39) {
    operator delete(v39);
  }
}

void sub_100309998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100309BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100309C30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100309C74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100309F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

__n128 sub_100309FA8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100309FB8(uint64_t a1, void *a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v50 = a2;
  uint64_t v3 = [v50 columns];
  id v4 = [v3 countByEnumeratingWithState:&v54 objects:v58 count:16];
  if (v4)
  {
    uint64_t v51 = *(void *)v55;
    id v5 = v3;
    do
    {
      id v52 = v4;
      for (unint64_t i = 0; i != v52; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v55 != v51) {
          objc_enumerationMutation(v3);
        }
        double v7 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        id v8 = [v7 range];
        unint64_t v10 = *(void *)(a1 + 64);
        if (v10 - (unint64_t)v8 < v9 && v10 >= (unint64_t)v8 || v10 == (void)v8 + v9)
        {
          id v13 = [v7 lineIndexForCharIndex:eol:];
          if (v13 != (char *)0x7FFFFFFFFFFFFFFFLL)
          {
            id v14 = [v7 lineFragmentAtIndex:v13];
            id v15 = (long long *)v14;
            if (*((uint64_t *)v14 + 3) < 0) {
              NSUInteger v16 = &xmmword_101176F48;
            }
            else {
              NSUInteger v16 = (long long *)v14;
            }
            uint64_t v17 = *((void *)v16 + 1);
            uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
            *(void *)(v18 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v16;
            *(void *)(v18 + 56) = v17;
            *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *((void *)v14 + 3);
            double v19 = *((double *)v14 + 6);
            char v20 = [*(id *)(a1 + 32) textSource];
            uint64_t v21 = [*(id *)(a1 + 32) textSource];
            sub_100189DF8(v53, v20, 0, 0, 0, [v21 paragraphCount] != (id)1);

            id v22 = sub_100189F3C((uint64_t)v53);
            if (*(unsigned char *)(a1 + 88))
            {
              if (v13)
              {
                id v23 = v22;
                uint64_t v24 = v13 - 1;
                while (1)
                {
                  long long v25 = (long long *)[v7 lineFragmentAtIndex:v24];
                  char v26 = v25;
                  if (*((uint64_t *)v25 + 3) < 0) {
                    char v27 = &xmmword_101176F48;
                  }
                  else {
                    char v27 = v25;
                  }
                  uint64_t v28 = *((void *)v27 + 1);
                  uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
                  *(void *)(v29 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v27;
                  *(void *)(v29 + 56) = v28;
                  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *((void *)v15 + 3);
                  uint64_t v30 = *((void *)v25 + 3);
                  if ((v30 & 0x100000000) != 0
                    && *(id *)v25 == v23
                    && (v30 < 0 ? (uint64_t v31 = &xmmword_101176F48) : (uint64_t v31 = v25),
                        *(void *)v31 + *((void *)v31 + 1) == *(void *)v15))
                  {
                    if (!v23)
                    {
                      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v24;
                      id v49 = v7;
                      goto LABEL_71;
                    }
                  }
                  else if (!v24 {
                         || !*(unsigned char *)(a1 + 89)
                  }
                         || (uint64_t v32 = (id *)[v7 lineFragmentAtIndex:v24 - 1],
                             (*((unsigned char *)v32 + 28) & 1) == 0)
                         || *v32 != v23)
                  {
                    double v33 = *((double *)v26 + 6);
                    BOOL v34 = v33 >= v19 || v33 == v19;
                    if (!v34 && vabdd_f64(v33, v19) >= 0.00999999978)
                    {
                      uint64_t v47 = *((void *)v26 + 3);
                      if ((v47 & 0x100) != 0 && (v47 & 0x200800) != 0)
                      {
                        **(unsigned char **)(a1 + 72) = 0;
                        goto LABEL_69;
                      }
                      if ((*((void *)v26 + 3) & 0x201) != 1)
                      {
LABEL_69:
                        BOOL v48 = (v47 & 0x200) == 0;
                        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v24;
                        **(void **)(a1 + 80) = v7;
                        if (!v48) {
LABEL_70:
                        }
                          **(unsigned char **)(a1 + 72) = 0;
                      }
                      goto LABEL_72;
                    }
                  }
                  if (--v24 == (char *)-1) {
                    goto LABEL_72;
                  }
                }
              }
              if (!*(void *)v15)
              {
                *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
                **(void **)(a1 + 80) = v7;
                goto LABEL_70;
              }
            }
            else
            {
              if (v13 + 1 == [v7 lineCount])
              {
                unint64_t v35 = *((uint64_t *)v15 + 3) < 0 ? &xmmword_101176F48 : v15;
                uint64_t v36 = *(void *)v35;
                uint64_t v37 = *((void *)v35 + 1);
                uint64_t v38 = [*(id *)(a1 + 32) textSource];
                LODWORD(v36) = v36 + v37 == (void)[v38 length];

                if (v36)
                {
                  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v13;
                  **(void **)(a1 + 80) = v7;
                }
              }
              while (1)
              {
                long long v39 = v13++;
                if (v39 + 1 >= [v7 lineCount]) {
                  goto LABEL_72;
                }
                uint64_t v40 = (long long *)[v7 lineFragmentAtIndex:v39 + 1];
                long long v41 = v40;
                if (*((uint64_t *)v40 + 3) < 0) {
                  int v42 = &xmmword_101176F48;
                }
                else {
                  int v42 = v40;
                }
                uint64_t v43 = *((void *)v42 + 1);
                uint64_t v44 = *(void *)(*(void *)(a1 + 40) + 8);
                *(void *)(v44 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v42;
                *(void *)(v44 + 56) = v43;
                *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *((void *)v15 + 3);
                if (*(unsigned char *)(a1 + 89) || (*((unsigned char *)v40 + 28) & 1) == 0)
                {
                  long long v45 = [v7 lineFragmentAtIndex:v39];
                  if ((!*(unsigned char *)(a1 + 89) || (v45[28] & 1) == 0) && v19 != 0.0 && *((double *)v41 + 6) != 0.0) {
                    break;
                  }
                }
              }
              uint64_t v46 = *((void *)v41 + 3);
              if ((v46 & 1) == 0 || (v46 & 0x100) != 0 && (v46 & 0x200800) != 0)
              {
                *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v39 + 1;
                id v49 = v7;
LABEL_71:
                **(void **)(a1 + 80) = v49;
              }
            }
LABEL_72:
            sub_100189C94(v53);
            uint64_t v3 = v5;
          }
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v54 objects:v58 count:16];
    }
    while (v4);
  }
}

void sub_10030A490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10030A524(uint64_t a1, void *a2)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v3 = [a2 columns];
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        double v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v8 = [v7 range];
        unint64_t v10 = *(void *)(a1 + 40);
        if (v10 - (unint64_t)v8 < v9 && v10 >= (unint64_t)v8 || v10 == (void)v8 + v9)
        {
          id v13 = [v7 lineIndexForCharIndex:eol:];
          if (v13 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
            **(void **)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = v7;
            goto LABEL_19;
          }
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_19:
}

void sub_10030A678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10030A768(uint64_t a1, void *a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = [a2 columns];
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v3);
        }
        double v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        id v8 = [v7 range];
        unint64_t v10 = *(void *)(a1 + 40);
        BOOL v12 = v10 - (unint64_t)v8 < v9 && v10 >= (unint64_t)v8 || v10 == (void)v8 + v9;
        if (v12 && (unint64_t)objc_msgSend(v7, "lineIndexForCharIndex:eol:") <= 0x7FFFFFFFFFFFFFFELL)
        {
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
          goto LABEL_19;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_19:
}

void sub_10030A8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030AAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030AB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10030AB94(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [v5 lineCount];
  if (a2 != 0x7FFFFFFFFFFFFFFFLL && !v6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014ED1D0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10109D3E4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014ED1F0);
    }
    double v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLWPEditorHelper withLineFragmentForCharIndex:eol:performBlock:]_block_invoke");
    unint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v8 file:v9 lineNumber:1670 isFatal:0 description:"Empty column in p_withLineIndexForCharIndex"];
  }
  if ((unint64_t)[v5 lineCount] > a2) {
    [v5 lineFragmentAtIndex:a2];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030AD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030ADC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030AE08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030B08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030B0E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030B124(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030B3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030B3FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030B440(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030B61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10030C5F4(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10030C638(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10030C67C(uint64_t a1, uint64_t a2, void *a3)
{
  id v40 = a3;
  id v5 = *(void ***)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == *(void *)a2)
  {
    uint64_t v17 = *(void *)(a1 + 56);
    id v5 = *(void ***)(a2 + 8);
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    double MaxX = -INFINITY;
    double MinX = INFINITY;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      BOOL v12 = (double *)v5[v7];
      CGFloat v13 = v12[5];
      CGFloat v14 = v12[6];
      CGFloat v15 = v12[7];
      CGFloat v16 = v12[8];
      v42.origin.double x = v13;
      v42.origin.CGFloat y = v14;
      v42.size.CGFloat width = v15;
      v42.size.CGFloat height = v16;
      if (CGRectGetMinX(v42) < MinX)
      {
        v43.origin.double x = v13;
        v43.origin.CGFloat y = v14;
        v43.size.CGFloat width = v15;
        v43.size.CGFloat height = v16;
        double MinX = CGRectGetMinX(v43);
        uint64_t v8 = v7;
      }
      v44.origin.double x = v13;
      v44.origin.CGFloat y = v14;
      v44.size.CGFloat width = v15;
      v44.size.CGFloat height = v16;
      if (CGRectGetMaxX(v44) > MaxX)
      {
        v45.origin.double x = v13;
        v45.origin.CGFloat y = v14;
        v45.size.CGFloat width = v15;
        v45.size.CGFloat height = v16;
        double MaxX = CGRectGetMaxX(v45);
        uint64_t v11 = v7;
      }
      ++v7;
      id v5 = *(void ***)a2;
      uint64_t v6 = *(void *)(a2 + 8);
    }
    while (v7 < (v6 - *(void *)a2) >> 3);
    uint64_t v17 = *(void *)(a1 + 56);
    if (v17 == 3 && v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v18 = (uint64_t)v5[v8];
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_10015909C(v18);
      if (*(void *)(a1 + 64)
        && sub_100159174((long long *)v18, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) == 1)
      {
        unint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        char v20 = [*(id *)(a1 + 32) textSource];
        if (v19 >= (unint64_t)[v20 length])
        {
        }
        else
        {
          id v21 = [*(id *)(a1 + 40) characterAtIndex:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
          int v22 = (int)v21;
          unsigned __int8 v23 = sub_1001CA284((uint64_t)v21);
          if (v22 == 8232) {
            char v24 = 1;
          }
          else {
            char v24 = v23;
          }

          if ((v24 & 1) == 0) {
            **(unsigned char **)(a1 + 64) = 0;
          }
        }
      }
      uint64_t v38 = *(unsigned char **)(a1 + 72);
      int v39 = (*(_DWORD *)(v18 + 24) >> 12) & 1;
LABEL_44:
      *uint64_t v38 = v39;
      goto LABEL_45;
    }
    if (v17 == 2 && v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = (uint64_t)v5[v11];
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_1001590D0(v25);
      if (*(void *)(a1 + 64)
        && !sub_100159174((long long *)v25, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)))
      {
        unint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        char v27 = [*(id *)(a1 + 32) textSource];
        if (v26 >= (unint64_t)[v27 length])
        {
        }
        else
        {
          id v28 = [*(id *)(a1 + 40) characterAtIndex:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
          int v29 = (int)v28;
          unsigned __int8 v30 = sub_1001CA284((uint64_t)v28);
          if (v29 == 8232) {
            char v31 = 1;
          }
          else {
            char v31 = v30;
          }

          if ((v31 & 1) == 0) {
            **(unsigned char **)(a1 + 64) = 0;
          }
        }
      }
      LOBYTE(v39) = (*(void *)(v25 + 24) & 0x1000) == 0;
      uint64_t v38 = *(unsigned char **)(a1 + 72);
      goto LABEL_44;
    }
  }
  if (v17)
  {
    if (v17 == 1) {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = **v5;
    }
  }
  else
  {
    uint64_t v32 = *(long long **)(v6 - 8);
    if (*((uint64_t *)v32 + 3) < 0) {
      uint64_t v32 = &xmmword_101176F48;
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) charIndexRemappedFromStorage:*(void *)v32 + *((void *)v32 + 1)];
    unint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v33 > *(void *)(a1 + 80) && v33 > *(void *)(a1 + 88))
    {
      id v34 = [*(id *)(a1 + 40) characterAtIndex:v33 - 1];
      int v35 = (int)v34;
      unsigned int v36 = sub_1001CA284((uint64_t)v34) ^ 1;
      if (v35 == 8232) {
        LOBYTE(v36) = 0;
      }
      if ((v36 & 1) == 0)
      {
        uint64_t v37 = [*(id *)(a1 + 32) textSource];
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v37 previousCharacterIndex:*(void *)(*(void *)(*(void *)(a1 + 48)+ 8)+ 24)];
      }
    }
  }
LABEL_45:
}

void sub_10030CA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030CA4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030CA90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030CAD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030CB18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030CB5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030CBA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, ...)
{
  va_start(va, a6);

  sub_100189C94((id *)va);
  _Unwind_Resume(a1);
}

void sub_10030D62C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030D670(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030D6B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030D6F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030D7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030DAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030DFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030E064(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030E0A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030E40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  sub_100189C94(&a9);
  _Unwind_Resume(a1);
}

void sub_10030E484(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030E4C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030E5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030E688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030EEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  char v31 = *(void **)(v29 - 248);
  if (v31)
  {
    *(void *)(v29 - 240) = v31;
    operator delete(v31);
  }
  _Block_object_dispose((const void *)(v29 - 224), 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);

  _Unwind_Resume(a1);
}

double sub_10030F004(void *a1, uint64_t *a2)
{
  if (a2)
  {
    if (a2[3] < 0) {
      id v4 = &xmmword_101176F48;
    }
    else {
      id v4 = (long long *)a2;
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = *(void *)(a1[4] + 8);
    *(void *)(v6 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v4;
    *(void *)(v6 + 56) = v5;
    sub_10015B2B4(a2, &v10);
    uint64_t v7 = a1[6];
    uint64_t v8 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(v7 + _Block_object_dispose(&STACK[0x220], 8) = v8;
      operator delete(v8);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + _Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    double result = *(double *)&v10;
    *(_OWORD *)uint64_t v7 = v10;
    *(void *)(v7 + 16) = v11;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (a2[3] & 0x1000) != 0;
  }
  return result;
}

double sub_10030F0B0(void *a1, uint64_t *a2)
{
  if (a2)
  {
    if (a2[3] < 0) {
      id v4 = &xmmword_101176F48;
    }
    else {
      id v4 = (long long *)a2;
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = *(void *)(a1[4] + 8);
    *(void *)(v6 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v4;
    *(void *)(v6 + 56) = v5;
    sub_10015B2B4(a2, &v10);
    uint64_t v7 = a1[6];
    uint64_t v8 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(v7 + _Block_object_dispose(&STACK[0x220], 8) = v8;
      operator delete(v8);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + _Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    double result = *(double *)&v10;
    *(_OWORD *)uint64_t v7 = v10;
    *(void *)(v7 + 16) = v11;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (a2[3] & 0x1000) != 0;
  }
  return result;
}

void sub_10030F15C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030F1A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10030F3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10030FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003103D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310410(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100310454(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003106AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031098C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003109D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100310BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310C20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100310C64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100311224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1003113D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100311500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100311680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003117C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100311A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100311CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1003122F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003124BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003125B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003126E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003127DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100312934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100312A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100312BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100312CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100312E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100312F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100312FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003130C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031321C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003132D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100313398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100313458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_100313544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100313830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100313978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100313AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100313B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100313BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100313C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003141BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100314250(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100314294(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100314794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100314830(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100314874(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003148B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003148FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003149E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11)
{
  sub_100189C94(&a11);
  _Unwind_Resume(a1);
}

void sub_1003151D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031521C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100315260(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003152A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100315320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100315494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003155BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003156C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003157C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003158C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100315AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100315BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100315D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100315E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100315EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100315FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100316124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003164CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100316808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100316E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100316FD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317018(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031705C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003170A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003170E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317128(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031724C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100317290()
{
}

void sub_100317308(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1003179B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100317B50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317B94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317BD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317C1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317C60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317CA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100317D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003181B4(_Unwind_Exception *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, ...)
{
  va_start(va, a15);

  sub_100189C94((id *)va);
  _Unwind_Resume(a1);
}

id sub_1003182E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) addRange:];
}

void sub_100318378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_100318398(id a1, NSString *a2)
{
  id v2 = a2;
  uint64_t v3 = +[NSLocale currentLocale];
  id v4 = [(NSString *)v2 uppercaseStringWithLocale:v3];

  return (NSString *)v4;
}

void sub_100318408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003184AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_1003184CC(id a1, NSString *a2)
{
  id v2 = a2;
  uint64_t v3 = +[NSLocale currentLocale];
  id v4 = [(NSString *)v2 lowercaseStringWithLocale:v3];

  return (NSString *)v4;
}

void sub_10031853C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003185E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_100318600(id a1, NSString *a2)
{
  id v2 = a2;
  uint64_t v3 = +[NSLocale currentLocale];
  id v4 = [(NSString *)v2 capitalizedStringWithLocale:v3];

  return (NSString *)v4;
}

void sub_100318670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100318DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100318EE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100318F2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100319164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100319274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003195CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v36 - 168), 8);

  _Unwind_Resume(a1);
}

void sub_100319644(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(uint64_t *)(a2 + 24) < 0) {
      uint64_t v3 = &xmmword_101176F48;
    }
    else {
      uint64_t v3 = (long long *)a2;
    }
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v5 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v3;
    *(void *)(v5 + 56) = v4;
    sub_10015A1EC(a2, *(void *)(a1 + 48), *(unsigned char *)(a1 + 56), 1, 1);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  }
}

void sub_1003196B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(uint64_t *)(a2 + 24) < 0) {
      uint64_t v3 = &xmmword_101176F48;
    }
    else {
      uint64_t v3 = (long long *)a2;
    }
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v5 + 4_Block_object_dispose(&STACK[0x220], 8) = *(void *)v3;
    *(void *)(v5 + 56) = v4;
    sub_10015A1EC(a2, *(void *)(a1 + 48), *(unsigned char *)(a1 + 56), 1, 1);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  }
}

void sub_100319EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100319FCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031A010(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031A054(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031A098(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031A0DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031A120(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031ABA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031ABEC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AC30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AC74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031ACB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031ACFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AD40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AD84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031ADC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AE0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031AF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031B494(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031B4D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031B764(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031B7A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031B968(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031B9AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031BB5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031BBA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10031BD2C(int a1, double a2)
{
  switch(a1)
  {
    case -2:
      double v2 = (3.0 - a2) * a2 + -3.0;
      goto LABEL_6;
    case -1:
      double v2 = (a2 * 3.0 + -6.0) * a2;
      double v4 = 4.0;
      goto LABEL_7;
    case 0:
      double v2 = (a2 * -3.0 + 3.0) * a2 + 3.0;
LABEL_6:
      double v4 = 1.0;
LABEL_7:
      double v5 = v4 + v2 * a2;
      goto LABEL_9;
    case 1:
      double v5 = a2 * a2 * a2;
LABEL_9:
      double result = v5 / 6.0;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_10031BDCC(int a1, double a2)
{
  switch(a1)
  {
    case -2:
      double v2 = (a2 * -2.0 + 3.0) * a2 / 6.0 + (3.0 - a2) * a2 / 6.0;
      double v3 = -0.5;
      goto LABEL_6;
    case -1:
      double result = a2 * a2 * 0.5 + (a2 * 3.0 + -6.0) * a2 / 3.0;
      break;
    case 0:
      __asm
      {
        FMOV            V2.2D, #3.0
        FMOV            V1.2D, #6.0
      }
      double v2 = vaddvq_f64(vdivq_f64(vmulq_n_f64(vmlaq_n_f64(_Q2, (float64x2_t)xmmword_101177BF0, a2), a2), _Q1));
      double v3 = 0.5;
LABEL_6:
      double result = v2 + v3;
      break;
    case 1:
      double result = a2 * a2 * 3.0 / 6.0;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_10031BEAC(int a1, double result)
{
  switch(a1)
  {
    case -2:
      double result = 1.0 - result;
      break;
    case -1:
      double v2 = -2.0;
      double v3 = 3.0;
      goto LABEL_6;
    case 0:
      double v2 = 1.0;
      double v3 = -3.0;
LABEL_6:
      double result = v2 + result * v3;
      break;
    case 1:
      return result;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_10031BF18(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = (a5 + a3 * 2.0) * 0.333333333;
  double v9 = (a6 + a4 * 2.0) * 0.333333333;
  double v10 = (a3 + a5 * 2.0) * 0.333333333;
  double v11 = (a4 + a6 * 2.0) * 0.333333333;
  double v19 = ((a1 + a3 * 2.0) * 0.333333333 + v8) * 0.5;
  double v12 = ((a2 + a4 * 2.0) * 0.333333333 + v9) * 0.5;
  double v13 = (v10 + (a7 + a5 * 2.0) * 0.333333333) * 0.5;
  double v14 = (v11 + (a8 + a6 * 2.0) * 0.333333333) * 0.5;
  double v18 = sub_1000653B4(v19, v12, v8, v9);
  double v15 = sub_1000653B4(v8, v9, v10, v11);
  double v16 = v18 + v15 + sub_1000653B4(v10, v11, v13, v14);
  return v16 * 0.5 + sub_1000653B4(v19, v12, v13, v14) * 0.5;
}

double sub_10031C030(void *a1, uint64_t a2, double (*a3)(void, double), double a4)
{
  uint64_t v8 = 80 * a2 - 72;
  uint64_t v9 = -4;
  double x = CGPointZero.x;
  double y = CGPointZero.y;
  do
  {
    if (a2 + v9 + 2 > -2)
    {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
      if (v14 >> 31)
      {
        unsigned int v24 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EDCD8);
        }
        log = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109890;
          unsigned int v31 = v24;
          __int16 v32 = 2082;
          unint64_t v33 = "CGPoint splinePoint(const std::vector<_CRLPKStrokePoint> &, NSInteger, CGFloat, CGFloat (*)(int, CGFloat))";
          __int16 v34 = 2082;
          int v35 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKBSplineUtility.mm";
          __int16 v36 = 1024;
          int v37 = 113;
          _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EDCF8);
        }
        os_log_t loga = off_10166B4A0;
        BOOL v20 = os_log_type_enabled(loga, OS_LOG_TYPE_ERROR);
        os_log_t v21 = loga;
        if (v20)
        {
          uint64_t v22 = +[CRLAssertionHandler packedBacktraceString];
          *(_DWORD *)buf = 67109378;
          unsigned int v31 = v24;
          __int16 v32 = 2114;
          unint64_t v33 = (const char *)v22;
          unint64_t v26 = (void *)v22;
          _os_log_error_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          os_log_t v21 = loga;
        }

        os_log_t logb = +[NSString stringWithUTF8String:"CGPoint splinePoint(const std::vector<_CRLPKStrokePoint> &, NSInteger, CGFloat, CGFloat (*)(int, CGFloat))"];
        uint64_t v25 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKBSplineUtility.mm"];
        +[CRLAssertionHandler handleFailureInFunction:logb file:v25 lineNumber:113 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

        unint64_t v14 = 0x7FFFFFFFLL;
      }
      if (a2 + v9 + 3 >= v14)
      {
        uint64_t v15 = a1[1];
        double v12 = (double *)(v15 - 72);
        double v13 = (double *)(v15 - 64);
      }
      else
      {
        double v12 = (double *)(*a1 + v8);
        double v13 = v12 + 1;
      }
    }
    else
    {
      double v12 = (double *)(*a1 + 8);
      double v13 = (double *)(*a1 + 16);
    }
    double v16 = *v13;
    double v17 = *v12;
    double v18 = a3((v9 + 2), a4);
    double x = x + v18 * v17;
    double y = y + v18 * v16;
    v8 += 80;
  }
  while (!__CFADD__(v9++, 1));
  return x;
}

void sub_10031C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10031C3CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031C410(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

float64x2_t sub_10031C454(float64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = (double *)&qword_101177C40;
  do
  {
    float64x2_t result = a1[2];
    *(float64x2_t *)(a2 + v2) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[1], *(v3 - 4)), *a1, *(v3 - 8)), result, *v3), a1[3], v3[4]);
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

CGPath *sub_10031C4A0(void *a1, int a2)
{
  id v3 = a1;
  Mutable = CGPathCreateMutable();
  if ((unint64_t)[v3 count] >= 2)
  {
    for (unint64_t i = 0; i < (char *)[v3 count] - 1 && (!a2 || i != (char *)[v3 count] - 2); ++i)
    {
      uint64_t v7 = 0;
      uint64_t v8 = &v31.f64[1];
      do
      {
        if (!&i[v7])
        {
          BOOL v20 = [v3 objectAtIndexedSubscript:0];
          [v20 location];
          double v11 = v21;
          uint64_t v22 = [v3 objectAtIndexedSubscript:1];
          [v22 location];
          double v14 = v23;

          uint64_t v15 = [v3 objectAtIndexedSubscript:0];
          [v15 location];
          double v17 = v24;
          double v18 = [v3 objectAtIndexedSubscript:1];
          [v18 location];
          goto LABEL_12;
        }
        if (&i[v7] == (char *)[v3 count] + 1)
        {
          uint64_t v9 = [v3 objectAtIndexedSubscript:[v3 count] - 1];
          [v9 location];
          double v11 = v10;
          double v12 = [v3 objectAtIndexedSubscript:[v3 count] - 2];
          [v12 location];
          double v14 = v13;

          uint64_t v15 = [v3 objectAtIndexedSubscript:[v3 count] - 1];
          [v15 location];
          double v17 = v16;
          double v18 = [v3 objectAtIndexedSubscript:[v3 count] - 2];
          [v18 location];
LABEL_12:
          double v25 = -(v14 - v11 * 2.0);
          double v26 = -(v19 - v17 * 2.0);

          *(v8 - 1) = v25;
          *uint64_t v8 = v26;
          goto LABEL_14;
        }
        char v27 = [v3 objectAtIndexedSubscript:&i[v7 - 1]];
        [v27 location];
        *((void *)v8 - 1) = v28;
        *(void *)uint64_t v8 = v29;

LABEL_14:
        ++v7;
        v8 += 2;
      }
      while (v7 != 4);
      sub_10031C454(&v31, (uint64_t)v30);
      if (!i) {
        CGPathMoveToPoint(Mutable, 0, v30[0], v30[1]);
      }
      CGPathAddCurveToPoint(Mutable, 0, v30[2], v30[3], v30[4], v30[5], v30[6], v30[7]);
    }
  }

  return Mutable;
}

void sub_10031C744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGPath *sub_10031C7B8(void *a1, char a2)
{
  Mutable = CGPathCreateMutable();
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v6 = v5 - 2;
  if (v5 < 2) {
    return Mutable;
  }
  unint64_t v7 = v5 - 1;
  uint64_t v8 = 0;
  unint64_t v9 = ~v5;
  uint64_t v10 = -72;
  __asm { FMOV            V2.2D, #2.0 }
  float64x2_t v22 = _Q2;
  do
  {
    if (v8 == v6 && (a2 & 1) != 0) {
      return Mutable;
    }
    uint64_t v16 = 0;
    double v17 = v24;
    uint64_t v18 = v10;
    do
    {
      if (v8 == v16)
      {
        float64x2_t v19 = *(float64x2_t *)(*a1 + 8);
        float64x2_t v20 = *(float64x2_t *)(*a1 + 88);
LABEL_11:
        *double v17 = vmlaq_f64(vnegq_f64(v20), _Q2, v19);
        goto LABEL_13;
      }
      if (v9 == v16)
      {
        float64x2_t v19 = *(float64x2_t *)(*a1 + 80 * v7 + 8);
        float64x2_t v20 = *(float64x2_t *)(*a1 + 80 * v6 + 8);
        goto LABEL_11;
      }
      *double v17 = *(float64x2_t *)(*a1 + v18);
LABEL_13:
      ++v17;
      v18 += 80;
      --v16;
    }
    while (v16 != -4);
    sub_10031C454(v24, (uint64_t)v23);
    if (!v8) {
      CGPathMoveToPoint(Mutable, 0, v23[0], v23[1]);
    }
    CGPathAddCurveToPoint(Mutable, 0, v23[2], v23[3], v23[4], v23[5], v23[6], v23[7]);
    ++v8;
    v10 += 80;
    ++v9;
    _Q2 = v22;
  }
  while (v8 != v7);
  return Mutable;
}

void sub_10031D028(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  unint64_t v5 = sub_1002469D0(v4, v3);

  if (v5)
  {
    unint64_t v6 = [v5 fileType];
    unint64_t v7 = +[CRLIngestionTypes supportedImageTypes];
    if (objc_msgSend(v6, "crl_conformsToAnyUTI:", v7))
    {

LABEL_5:
      double v11 = [v5 fileWrapper];
      double v12 = v11;
      if (!v11 || ![v11 isRegularFile]) {
        goto LABEL_36;
      }
      id v27 = 0;
      double v13 = [[CRLTemporaryDirectory alloc] initWithError:&v27];
      id v14 = v27;
      if (v14)
      {
        id v15 = v14;
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EDD58);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10109E734();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EDD78);
        }
        uint64_t v16 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010668E0(v16);
        }
        double v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBoardItemProviderFactory extractPasteboardBoardItemsFrom:]_block_invoke");
        uint64_t v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLBoardItemProviderFactory.m"];
        +[CRLAssertionHandler handleFailureInFunction:v17, v18, 145, 0, "Error extracting attachment: %@", v15 file lineNumber isFatal description];
      }
      else
      {
        float64x2_t v19 = [v12 filename];
        if (v19) {
          [v12 filename];
        }
        else {
        double v17 = [v12 preferredFilename];
        }

        if (!v17)
        {
          id v15 = 0;
LABEL_35:

LABEL_36:
          goto LABEL_37;
        }
        float64x2_t v20 = [(CRLTemporaryDirectory *)v13 URL];
        uint64_t v18 = [v20 URLByAppendingPathComponent:v17];

        id v26 = 0;
        [v12 writeToURL:v18 options:0 originalContentsURL:0 error:&v26];
        id v15 = v26;
        if (v15)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014EDD18);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10109E6A0();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014EDD38);
          }
          double v21 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_1010668E0(v21);
          }
          +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBoardItemProviderFactory extractPasteboardBoardItemsFrom:]_block_invoke");
          float64x2_t v22 = (CRLURLBoardItemProvider *)objc_claimAutoreleasedReturnValue();
          double v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLBoardItemProviderFactory.m"];
          +[CRLAssertionHandler handleFailureInFunction:v22, v23, 141, 0, "Error extracting attachment: %@", v15 file lineNumber isFatal description];
        }
        else
        {
          double v24 = [CRLURLBoardItemProvider alloc];
          double v25 = [v12 preferredFilename];
          float64x2_t v22 = [(CRLURLBoardItemProvider *)v24 initWithURL:v18 fallbackBoardItemProvider:0 isDetectedURL:0 suggestedName:v25];

          [(CRLTemporaryDirectory *)v13 setAssociatedLifetimeObject:v22];
          [*(id *)(a1 + 32) addObject:v22];
        }
      }
      goto LABEL_35;
    }
    uint64_t v8 = [v5 fileType];
    unint64_t v9 = +[CRLIngestionTypes supportedMovieTypes];
    unsigned int v10 = [v8 crl_conformsToAnyUTI:v9];

    if (v10) {
      goto LABEL_5;
    }
  }
LABEL_37:
}

void sub_10031D4A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031D4E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031D52C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031D570(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CRLURLBoardItemProvider *__cdecl sub_10031D618(id a1, NSURL *a2)
{
  uint64_t v2 = a2;
  if (+[CRLURLBoardItemProvider canInitWithURL:v2]) {
    id v3 = [[CRLURLBoardItemProvider alloc] initWithURL:v2 fallbackBoardItemProvider:0 isDetectedURL:0 suggestedName:0];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id sub_10031D984(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelectionPath:*(void *)(a1 + 40)];
}

id sub_10031DA30(uint64_t a1)
{
  return [*(id *)(a1 + 32) setSelectionPath:*(void *)(a1 + 40) withFlags:*(void *)(a1 + 48)];
}

void sub_10031DC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031DC4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10031DC5C(uint64_t a1)
{
}

void sub_10031DC64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) editorForEditAction:*(void *)(a1 + 56) withSender:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10031DF20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031DF64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031E0C8(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031ED08(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031ED48(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031ED88(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EDC8(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EE08(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EE48(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EE88(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EEC8(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EF08(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031EF48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_101719CC0 != -1) {
    dispatch_once(&qword_101719CC0, &stru_1014EDFA8);
  }
  uint64_t v4 = off_10166D808;
  if (os_log_type_enabled((os_log_t)off_10166D808, OS_LOG_TYPE_DEBUG)) {
    sub_10109EAF8(a1, v4);
  }
  if ([*(id *)(a1 + 32) state] == (id)1 || objc_msgSend(*(id *)(a1 + 32), "state") == (id)2)
  {
    unint64_t v5 = *(unsigned char **)(a1 + 32);
    if (!v5[64]) {
      [v5 p_beginDynamicDrawing];
    }
  }
}

void sub_10031F004(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F044(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F084(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_101719CC0 != -1) {
    dispatch_once(&qword_101719CC0, &stru_1014EDFE8);
  }
  uint64_t v4 = off_10166D808;
  if (os_log_type_enabled((os_log_t)off_10166D808, OS_LOG_TYPE_DEBUG)) {
    sub_10109EAF8(a1, v4);
  }
  if (![*(id *)(a1 + 32) state])
  {
    [*(id *)(a1 + 32) setState:1];
    if (!*(unsigned char *)(a1 + 40)) {
      [*(id *)(a1 + 32) p_beginDynamicDrawing];
    }
  }
}

void sub_10031F130(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F170(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F1B0(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F544(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031F8E8(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031FC50(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031FC90(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031FCD0(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031FF3C(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_10031FF7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10031FFC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003203C4(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_100320404(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100320448(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003206B4(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_100320C30(id a1)
{
  id v1 = sub_100401ECC("CRLFreehandGRCat");
  uint64_t v2 = off_10166D808;
  off_10166D808 = v1;
}

void sub_100320ED8(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100321024(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100321490(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003214D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100321518(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100321558(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_1003216F8(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_1003218E8(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100321C0C(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100321C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100321C90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100321DF4(void *a1, const char *a2)
{
  id v3 = a1;
  if (qword_101719CC8 != -1) {
    dispatch_once(&qword_101719CC8, &stru_1014EE378);
  }
  uint64_t v4 = off_10166D810;
  if (os_log_type_enabled((os_log_t)off_10166D810, OS_LOG_TYPE_INFO))
  {
    LODWORD(v10.receiver) = 138412290;
    *(id *)((char *)&v10.receiver + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "universal reset called for %@", (uint8_t *)&v10, 0xCu);
  }
  unint64_t v5 = +[NSNotificationCenter defaultCenter];
  [v5 postNotificationName:@"CRLCanvasControllingGRDidResetNotification" object:v3];

  Class = object_getClass(v3);
  unint64_t v7 = NSStringFromClass(Class);
  if ([v7 hasPrefix:@"__TSDResetNotifying"])
  {
    v10.receiver = v3;
    uint64_t v8 = object_getClass(v3);
    v10.super_class = class_getSuperclass(v8);
    [super a2];
  }
  else
  {
    [v3 reset];
  }
}

void sub_100321F54(id a1)
{
  id v1 = sub_100401ECC("CRLTrackerManipulatorCat");
  uint64_t v2 = off_10166D810;
  off_10166D810 = v1;
}

void sub_100322404(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100322440(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100322484(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003224C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032250C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100322788(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1003227B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003227F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100323344(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100324040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10032405C(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained crlaxEnsureChildrenAreLoaded];

  id v3 = objc_loadWeakRetained(v1);
  [v3 _crlaxSetHasEnqueuedBlockToLoadChildren:0];
}

BOOL sub_100324904(id a1, id a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v2 accessibilityFrame];
    BOOL v3 = CGRectGetMaxY(v5) >= 0.0;
  }
  else
  {
    BOOL v3 = 1;
  }

  return v3;
}

void sub_100325464(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003254A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032594C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100325990(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100325DFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100325E40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003263B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003263FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100326440(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100326484(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003264C8(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100326E70(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100326EB0(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100326EF0(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

id sub_100327B4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_clearVolumeRampFromPlayerItem];
}

void sub_100328180(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100328444(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100328488(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003288C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032890C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100328950(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100328FC8(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329008(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329238(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329458(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329498(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329600(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329728(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithObjects:@"player.currentItem.canPlayFastReverse", 0];
  id v2 = (void *)qword_1016A9680;
  qword_1016A9680 = (uint64_t)v1;
}

void sub_100329A70(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_100329B04(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithObjects:@"player.currentItem.canPlayFastForward", 0];
  id v2 = (void *)qword_1016A9690;
  qword_1016A9690 = (uint64_t)v1;
}

void sub_100329E48(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

uint64_t sub_10032A2F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10032A59C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032A5E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032ABBC(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032ABFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032AC40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032AC84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032ACC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032B0F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032B13C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032B180(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032B1C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032B208(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032BBDC(uint64_t a1)
{
  Main = CFRunLoopGetMain();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10032BC94;
  v5[3] = &unk_1014CBE78;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = v3;
  uint64_t v7 = v4;
  CFRunLoopPerformBlock(Main, kCFRunLoopCommonModes, v5);
  CFRunLoopWakeUp(Main);
}

void sub_10032BC94(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) player];
  uint64_t v4 = [v3 currentItem];
  CGRect v5 = [v4 asset];

  if (v2 == v5)
  {
    if ([*(id *)(a1 + 32) statusOfValueForKey:@"playable" error:0] == (id)2
      && objc_msgSend(*(id *)(a1 + 32), "crl_isPlayable"))
    {
      [*(id *)(a1 + 40) willChangeValueForKey:@"canPlay"];
      *(unsigned char *)(*(void *)(a1 + 40) + 192) = 1;
      [*(id *)(a1 + 40) didChangeValueForKey:@"canPlay"];
    }
    id v6 = *(void **)(a1 + 40);
    [v6 rate];
    [v6 p_updatePlayerItemsAndApplyRate:];
  }
}

void sub_10032BD88(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032BDC8(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

id sub_10032BE08(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) rate];
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  if (v4[201] && (!v4[218] ? (BOOL v5 = v3 == -2.0) : (BOOL v5 = 0), v5))
  {
    if (qword_101719CD0 != -1) {
      dispatch_once(&qword_101719CD0, &stru_1014EEA60);
    }
    double v11 = off_10166D878;
    if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)float64x2_t v19 = 134218240;
      *(void *)&v19[4] = v12;
      *(_WORD *)&v19[12] = 2048;
      *(void *)&v19[14] = 0xC000000000000000;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CRLAVPlayerController %p: Marking as fast reversing because player rate changed to %f.", v19, 0x16u);
    }
    [*(id *)(a1 + 32) willChangeValueForKey:@"fastReversing"];
    *(unsigned char *)(*(void *)(a1 + 32) + 21_Block_object_dispose(&STACK[0x220], 8) = 1;
    id result = [*(id *)(a1 + 32) didChangeValueForKey:@"fastReversing"];
    uint64_t v13 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v13 + 200) && !*(unsigned char *)(v13 + 217))
    {
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEA80);
      }
      uint64_t v8 = off_10166D878;
      if (!os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)float64x2_t v19 = 134218240;
      *(void *)&v19[4] = v14;
      *(_WORD *)&v19[12] = 2048;
      *(void *)&v19[14] = 0xC000000000000000;
      objc_super v10 = "CRLAVPlayerController %p: Also marking as playing because player rate changed to %f.";
      goto LABEL_41;
    }
  }
  else
  {
    if (!v4[202] || (!v4[219] ? (BOOL v6 = v3 == 2.0) : (BOOL v6 = 0), !v6))
    {
      if (!v4[200]) {
        goto LABEL_43;
      }
      if (v4[217] || v3 != 1.0) {
        goto LABEL_43;
      }
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEAE0);
      }
      uint64_t v8 = off_10166D878;
      if (!os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
      {
LABEL_42:
        [*(id *)(a1 + 32) willChangeValueForKey:@"playing" withSetMutation:v19[0] usingObjects:v19[16]];
        *(unsigned char *)(*(void *)(a1 + 32) + 217) = 1;
        id result = [*(id *)(a1 + 32) didChangeValueForKey:@"playing"];
        goto LABEL_43;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)float64x2_t v19 = 134218240;
      *(void *)&v19[4] = v9;
      *(_WORD *)&v19[12] = 2048;
      *(void *)&v19[14] = 0x3FF0000000000000;
      objc_super v10 = "CRLAVPlayerController %p: Marking as playing because player rate changed to %f.";
LABEL_41:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, v19, 0x16u);
      goto LABEL_42;
    }
    if (qword_101719CD0 != -1) {
      dispatch_once(&qword_101719CD0, &stru_1014EEAA0);
    }
    id v15 = off_10166D878;
    if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)float64x2_t v19 = 134218240;
      *(void *)&v19[4] = v16;
      *(_WORD *)&v19[12] = 2048;
      *(void *)&v19[14] = 0x4000000000000000;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CRLAVPlayerController %p: Marking as fast forwarding because player rate changed to %f.", v19, 0x16u);
    }
    [*(id *)(a1 + 32) willChangeValueForKey:@"fastForwarding"];
    *(unsigned char *)(*(void *)(a1 + 32) + 219) = 1;
    id result = [*(id *)(a1 + 32) didChangeValueForKey:@"fastForwarding"];
    uint64_t v17 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v17 + 200) && !*(unsigned char *)(v17 + 217))
    {
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEAC0);
      }
      uint64_t v8 = off_10166D878;
      if (!os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)float64x2_t v19 = 134218240;
      *(void *)&v19[4] = v18;
      *(_WORD *)&v19[12] = 2048;
      *(void *)&v19[14] = 0x4000000000000000;
      objc_super v10 = "CRLAVPlayerController %p: Also marking as playing because player rate changed to %f.";
      goto LABEL_41;
    }
  }
LABEL_43:
  *(unsigned char *)(*(void *)(a1 + 32) + 200) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 201) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 202) = 0;
  return result;
}

void sub_10032C200(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C240(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C280(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C2C0(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C300(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C340(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

id sub_10032C380(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) rate];
  if (v3 == 0.0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 200) = [*(id *)(a1 + 32) isPlaying];
    *(unsigned char *)(*(void *)(a1 + 32) + 201) = [*(id *)(a1 + 32) isFastReversing];
    id result = [*(id *)(a1 + 32) isFastForwarding];
    *(unsigned char *)(*(void *)(a1 + 32) + 202) = (_BYTE)result;
    uint64_t v4 = *(unsigned char **)(a1 + 32);
    if (v4[200])
    {
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEB20);
      }
      BOOL v5 = off_10166D878;
      if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v11 = 134217984;
        uint64_t v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CRLAVPlayerController %p: Marking as not playing because player rate changed to 0.", (uint8_t *)&v11, 0xCu);
      }
      [*(id *)(a1 + 32) willChangeValueForKey:@"playing"];
      *(unsigned char *)(*(void *)(a1 + 32) + 217) = 0;
      id result = [*(id *)(a1 + 32) didChangeValueForKey:@"playing"];
      uint64_t v4 = *(unsigned char **)(a1 + 32);
    }
    if (v4[201])
    {
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEB40);
      }
      uint64_t v7 = off_10166D878;
      if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v11 = 134217984;
        uint64_t v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CRLAVPlayerController %p: Marking as not fast reversing because player rate changed to 0.", (uint8_t *)&v11, 0xCu);
      }
      [*(id *)(a1 + 32) willChangeValueForKey:@"fastReversing"];
      *(unsigned char *)(*(void *)(a1 + 32) + 21_Block_object_dispose(&STACK[0x220], 8) = 0;
      id result = [*(id *)(a1 + 32) didChangeValueForKey:@"fastReversing"];
      uint64_t v4 = *(unsigned char **)(a1 + 32);
    }
    if (v4[202])
    {
      if (qword_101719CD0 != -1) {
        dispatch_once(&qword_101719CD0, &stru_1014EEB60);
      }
      uint64_t v9 = off_10166D878;
      if (os_log_type_enabled((os_log_t)off_10166D878, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v11 = 134217984;
        uint64_t v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CRLAVPlayerController %p: Marking as not fast forwarding because player rate changed to 0.", (uint8_t *)&v11, 0xCu);
      }
      [*(id *)(a1 + 32) willChangeValueForKey:@"fastForwarding"];
      *(unsigned char *)(*(void *)(a1 + 32) + 219) = 0;
      return [*(id *)(a1 + 32) didChangeValueForKey:@"fastForwarding"];
    }
  }
  return result;
}

void sub_10032C610(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C650(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C690(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_10032C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10032C9D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10032C9E8(uint64_t a1)
{
}

UIImage *sub_10032C9F0(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) CGImageForSize:0 inContext:0 orContentsScaleProvider:0];

  return +[UIImage imageWithCGImage:v1];
}

void sub_10032CDCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032CE10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D214(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D258(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D29C(uint64_t a1)
{
  id v2 = +[NSRunLoop currentRunLoop];
  float v3 = +[NSDate dateWithTimeIntervalSinceNow:0.1];
  [*(id *)(a1 + 32) addToRunLoop:v2 forMode:@"com.apple.freeform.CRLAVPlayerControllerVideoDisplayBarrier"];
  p_vtable = CRLiOSImageHUDSlider.vtable;
  *(void *)&long long v5 = 67109378;
  long long v21 = v5;
  while ((objc_msgSend(*(id *)(a1 + 40), "allVideoFramesDisplayed", v21) & 1) == 0)
  {
    unsigned __int8 v6 = [v2 runMode:@"com.apple.freeform.CRLAVPlayerControllerVideoDisplayBarrier" beforeDate:v3];
    if ((v6 & 1) == 0)
    {
      unsigned int v7 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EEC28);
      }
      uint64_t v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        unsigned int v24 = v7;
        __int16 v25 = 2082;
        id v26 = "-[CRLAVPlayerControllerVideoDisplayBarrier waitUntilAllVideoFramesAreDisplayed]_block_invoke";
        __int16 v27 = 2082;
        uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAVPlayerController.m";
        __int16 v29 = 1024;
        int v30 = 1753;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Run loop didn't run while waiting for all video frames to display.", buf, 0x22u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EEC48);
      }
      uint64_t v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = v9;
        uint64_t v17 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = v21;
        unsigned int v24 = v7;
        __int16 v25 = 2114;
        id v26 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

        p_vtable = (void **)(CRLiOSImageHUDSlider + 24);
      }
      uint64_t v10 = p_vtable + 152;
      int v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLAVPlayerControllerVideoDisplayBarrier waitUntilAllVideoFramesAreDisplayed]_block_invoke");
      uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAVPlayerController.m"];
      [v10 handleFailureInFunction:v11 file:v12 lineNumber:1753 isFatal:0 description:"Run loop didn't run while waiting for all video frames to display."];

      p_vtable = CRLiOSImageHUDSlider.vtable;
    }
    +[NSDate timeIntervalSinceReferenceDate];
    double v14 = v13;
    [v3 timeIntervalSinceReferenceDate];
    if (v14 >= v15)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EEC68);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10109FCD0();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EEC88);
      }
      uint64_t v18 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v18);
      }
      float64x2_t v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLAVPlayerControllerVideoDisplayBarrier waitUntilAllVideoFramesAreDisplayed]_block_invoke");
      float64x2_t v20 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAVPlayerController.m"];
      +[CRLAssertionHandler handleFailureInFunction:v19 file:v20 lineNumber:1756 isFatal:0 description:"Timed out while waiting for all video frames to display."];

      break;
    }
    if ((v6 & 1) == 0) {
      break;
    }
  }
  [*(id *)(a1 + 32) invalidate];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10032D6BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D700(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D744(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D788(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D9B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032D9FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032E2C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032E304(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032E8F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032E934(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032EC04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032EC48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032EE10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10032EE54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__CFString *sub_10033005C(unsigned int a1)
{
  if (a1 < 5) {
    return *(&off_1014EEE68 + (int)a1);
  }
  if (a1 == 5) {
    return @"CRLGestureStateFailed";
  }
  return @"#Unknown CRLGestureState#";
}

BOOL sub_1003303F4(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  unsigned __int8 v6 = a2;
  unsigned int v7 = a4;
  if (a3 == 256 && [(NSString *)v6 isEqualToString:NSCocoaErrorDomain])
  {
    unsigned __int8 v8 = 1;
  }
  else
  {
    uint64_t v9 = [(NSDictionary *)v7 objectForKeyedSubscript:@"CRLIOErrorType"];
    unsigned __int8 v8 = [v9 isEqual:&off_10155DD18];
  }
  return v8;
}

BOOL sub_10033049C(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  if (a3 == 259) {
    return -[NSString isEqualToString:](a2, "isEqualToString:", NSCocoaErrorDomain, a4);
  }
  else {
    return 0;
  }
}

BOOL sub_1003304CC(id a1, NSString *a2, int64_t a3, NSDictionary *a4)
{
  unsigned __int8 v6 = a2;
  unsigned int v7 = a4;
  if (a3 == 512 && [(NSString *)v6 isEqualToString:NSCocoaErrorDomain])
  {
    unsigned __int8 v8 = 1;
  }
  else
  {
    uint64_t v9 = [(NSDictionary *)v7 objectForKeyedSubscript:@"CRLIOErrorType"];
    unsigned __int8 v8 = [v9 isEqual:&off_10155DD30];
  }
  return v8;
}

void sub_100330C28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100330C6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100330D18(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPatternType:1 pattern:0 count:0 phase:0.0];
  id v2 = (void *)qword_1016A96A8;
  qword_1016A96A8 = (uint64_t)v1;
}

void sub_100330DBC(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPatternType:2 pattern:0 count:0 phase:0.0];
  id v2 = (void *)qword_1016A96B8;
  qword_1016A96B8 = (uint64_t)v1;
}

void sub_100330E60(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPattern:&unk_101177C98 count:2 phase:0.0];
  id v2 = (void *)qword_1016A96C8;
  qword_1016A96C8 = (uint64_t)v1;
}

void sub_100330F04(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPattern:&unk_101177CA8 count:2 phase:0.0];
  id v2 = (void *)qword_1016A96D8;
  qword_1016A96D8 = (uint64_t)v1;
}

void sub_100330FA8(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPattern:&unk_101177CB8 count:2 phase:0.0];
  id v2 = (void *)qword_1016A96E8;
  qword_1016A96E8 = (uint64_t)v1;
}

void sub_10033104C(id a1)
{
  id v1 = [[CRLStrokePattern alloc] initWithPattern:&unk_101177CC8 count:2 phase:0.0];
  id v2 = (void *)qword_1016A96F8;
  qword_1016A96F8 = (uint64_t)v1;
}

void sub_1003319E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100331A24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100331DD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100331E18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100332160(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003321A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033234C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100332390(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033260C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100332650(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100332834(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) i_newStroke];
  id v2 = (void *)qword_1016A9708;
  qword_1016A9708 = (uint64_t)v1;
}

void sub_10033290C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) i_newEmptyStroke];
  id v2 = (void *)qword_1016A9718;
  qword_1016A9718 = (uint64_t)v1;
}

void sub_1003345AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003345F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100334904(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100334948(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003352E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100335324(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100336CC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100336D08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100336D4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100336D90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003376A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003376E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003378C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033790C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100337AF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100337B3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100337CE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100337D28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100338120(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100338164(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100338900(id a1)
{
  qword_1016A9728 = (uint64_t)sub_100455AA8(19, 1.0, 1.0);
  qword_1016A9720 = (uint64_t)CGBitmapContextGetData((CGContextRef)qword_1016A9728);
}

void sub_100338938(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033897C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100338EB4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  unsigned int v7 = [*(id *)(a1 + 32) imageInfo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100338FC0;
  v11[3] = &unk_1014EF470;
  void v11[4] = &v12;
  *(double *)&v11[5] = a3;
  *(double *)&v11[6] = a4;
  v11[7] = a2;
  [v7 withTemporaryLayoutPerform:v11];

  unsigned __int8 v8 = (const void *)v13[3];
  if (v8)
  {
    CFAutorelease(v8);
    uint64_t v9 = v13[3];
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_100338FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100338FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  long long v5 = sub_1002469D0(v4, v3);

  unsigned __int8 v6 = [v5 maskLayout];
  if (!v6
    || +[CRLImageRep p_canRenderWithMaskToBoundsWithImageLayout:v5])
  {
LABEL_3:

    goto LABEL_4;
  }
  unsigned int v7 = [v5 maskIntersectsImage];

  if (v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = +[CRLImageRep p_newPathToBakeIntoSizedImageForSize:withImageLayout:orientation:](CRLImageRep, "p_newPathToBakeIntoSizedImageForSize:withImageLayout:orientation:", v5, *(void *)(a1 + 56), *(double *)(a1 + 40), *(double *)(a1 + 48));
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EF428);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A09E8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EF448);
      }
      unsigned __int8 v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v8);
      }
      unsigned __int8 v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRep processChangedProperty:]_block_invoke");
      uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRep.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v9, 1196, 0, "invalid nil value for '%{public}s'", "maskPath");

      goto LABEL_3;
    }
  }
LABEL_4:
}

void sub_1003391B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003391F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033A684(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033A6C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033AC78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033ACBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033AD00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033AD44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033AD88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033ADCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033BF84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033BFC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033C00C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  unsigned __int8 v6 = v5;
  if (v5)
  {
    if ([v5 needsDownload])
    {
      objc_initWeak(&location, *(id *)(a1 + 32));
      unsigned int v7 = [v6 assetUUID];
      if (qword_101719BB0 != -1) {
        dispatch_once(&qword_101719BB0, &stru_1014EF638);
      }
      unsigned __int8 v8 = off_10166B5E0;
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [*(id *)(a1 + 40) UUIDString];
        uint64_t v10 = [v7 UUIDString];
        *(_DWORD *)buf = 138543874;
        unsigned int v24 = v9;
        __int16 v25 = 2112;
        id v26 = v10;
        __int16 v27 = 1024;
        int v28 = a3;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, "Image Rep becoming asset observer. observerUUID %{public}@, assetUUID %{pubilc}@, isThumbnail %d", buf, 0x1Cu);
      }
      uint64_t v11 = *(void *)(a1 + 40);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      _OWORD v18[2] = sub_10033C464;
      v18[3] = &unk_1014EF680;
      v18[4] = v11;
      id v12 = v7;
      id v19 = v12;
      char v21 = a3;
      objc_copyWeak(&v20, &location);
      [v6 addDownloadObserverWithIdentifier:v11 options:2 handler:v18];
      [v6 downloadIfNeeded];
      objc_destroyWeak(&v20);

      objc_destroyWeak(&location);
    }
    else
    {
      if (qword_101719BB0 != -1) {
        dispatch_once(&qword_101719BB0, &stru_1014EF618);
      }
      uint64_t v14 = off_10166B5E0;
      if (os_log_type_enabled((os_log_t)off_10166B5E0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v14;
        uint64_t v16 = [v6 assetUUID];
        uint64_t v17 = [v16 UUIDString];
        *(_DWORD *)buf = 138543618;
        unsigned int v24 = v17;
        __int16 v25 = 1024;
        LODWORD(v26) = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Image Rep does not need to download asset %{public}@, isThumbnail %d", buf, 0x12u);
      }
    }
  }
  else
  {
    if (qword_101719BB0 != -1) {
      dispatch_once(&qword_101719BB0, &stru_1014EF5F8);
    }
    double v13 = off_10166B5E0;
    if (os_log_type_enabled((os_log_t)off_10166B5E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v24) = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Image Rep got a nil image asset, isThumbnail %d", buf, 8u);
    }
  }
}

void sub_10033C358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10033C398(id a1)
{
  id v1 = sub_100401ECC("CRLAssetManagementCat");
  id v2 = off_10166B5E0;
  off_10166B5E0 = v1;
}

void sub_10033C3DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssetManagementCat");
  id v2 = off_10166B5E0;
  off_10166B5E0 = v1;
}

void sub_10033C420(id a1)
{
  id v1 = sub_100401ECC("CRLAssetManagementCat");
  id v2 = off_10166B5E0;
  off_10166B5E0 = v1;
}

void sub_10033C464(uint64_t a1)
{
  if (qword_101719BB0 != -1) {
    dispatch_once(&qword_101719BB0, &stru_1014EF658);
  }
  id v2 = off_10166B5E0;
  if (os_log_type_enabled((os_log_t)off_10166B5E0, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = [v3 UUIDString];
    unsigned __int8 v6 = [*(id *)(a1 + 40) UUIDString];
    int v7 = *(unsigned __int8 *)(a1 + 56);
    int v9 = 138543874;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Image Rep received asset sucessfully. observerUUID %{public}@, assetUUID %@ isThumbnail %d", (uint8_t *)&v9, 0x1Cu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained p_handleAssetPreparationCompletion];
}

void sub_10033C5A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssetManagementCat");
  id v2 = off_10166B5E0;
  off_10166B5E0 = v1;
}

void sub_10033C744(id a1)
{
  id v1 = sub_100401ECC("CRLAssetManagementCat");
  id v2 = off_10166B5E0;
  off_10166B5E0 = v1;
}

void sub_10033D130(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D174(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D1B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D1FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D6B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D6F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D73C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033D780(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033E348(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033E38C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033EC10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033EC54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033EC98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033ECDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033ED20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033ED64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10033F540(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  id v3 = [v2 layerHost];
  uint64_t v4 = [v3 imageHUDController];

  id v5 = [*(id *)(a1 + 32) interactiveCanvasController];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10033F60C;
  v7[3] = &unk_1014CBE78;
  uint64_t v6 = *(void *)(a1 + 32);
  void v7[4] = v4;
  v7[5] = v6;
  [v5 performBlockOnMainThreadAfterLayoutIfNecessary:v7];
}

id sub_10033F60C(uint64_t a1)
{
  return [*(id *)(a1 + 32) hideHUDForRep:*(void *)(a1 + 40)];
}

void sub_1003401AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003401F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340234(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 32) directlyManagesLayerContent]
    || ([*(id *)(a1 + 32) shadowRenderable],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        v4,
        v4)
    || ![*(id *)(*(void *)(a1 + 32) + 328) sizedImage])
  {
LABEL_3:
    *(unsigned char *)(*(void *)(a1 + 32) + 465) = 1;
    [*(id *)(a1 + 40) invalidateContentLayersForRep:*(void *)(a1 + 32)];
    goto LABEL_4;
  }
  [*(id *)(a1 + 32) p_updateDirectlyManagesLayerContentForRenderable:v3];
  if (![*(id *)(a1 + 32) directlyManagesLayerContent])
  {
    if ([*(id *)(a1 + 32) directlyManagesLayerContent])
    {
      [*(id *)(a1 + 32) updateRenderableGeometryFromLayout:v3];
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EF928);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A1240();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014EF948);
      }
      id v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v5);
      }
      uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRep p_injectSizedImageIntoLayerContentsIfReady]_block_invoke");
      int v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRep.m"];
      +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:2657 isFatal:0 description:"directly manages layer content changed when generated sized image"];
    }
    goto LABEL_3;
  }
  +[CATransaction begin];
  +[CATransaction setDisableActions:1];
  [*(id *)(a1 + 32) willUpdateRenderable:v3];
  if ([*(id *)(a1 + 32) directlyManagesLayerContent])
  {
    [*(id *)(a1 + 32) updateRenderableGeometryFromLayout:v3];
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EF968);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A11B8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EF988);
    }
    unsigned __int8 v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v8);
    }
    int v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRep p_injectSizedImageIntoLayerContentsIfReady]_block_invoke");
    uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRep.m"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:2660 isFatal:0 description:"directly manages layer content changed when generated sized image"];
  }
  [*(id *)(a1 + 32) didUpdateRenderable:v3];
  +[CATransaction commit];
LABEL_4:
}

void sub_10034057C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003405C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340604(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340648(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340E98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340EDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100340F20(uint64_t a1)
{
  id v2 = +[CRLInstantAlphaHelper removeBackgroundFromCGImage:*(void *)(a1 + 40)];
  CGImageRelease(*(CGImageRef *)(a1 + 40));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100341004;
  _OWORD v4[3] = &unk_1014EFA58;
  objc_copyWeak(v6, (id *)(a1 + 32));
  v6[1] = *(id *)(a1 + 48);
  id v5 = v2;
  char v7 = *(unsigned char *)(a1 + 56);
  id v3 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  objc_destroyWeak(v6);
}

void sub_100341004(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained && ([WeakRetained hasBeenRemoved] & 1) == 0)
  {
    uint64_t v4 = [v3 p_validatedImageProvider];
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = [v4 imageData];
    id v7 = [v6 crl_hash];

    if (v5 == v7)
    {
      unsigned __int8 v8 = [*(id *)(a1 + 32) error];
      if ([*(id *)(a1 + 32) image])
      {
        os_unfair_lock_lock((os_unfair_lock_t)v3 + 150);
        if (*(unsigned char *)(a1 + 56)) {
          int v9 = &OBJC_IVAR___CRLImageRep__userInitiatedBackgroundRemovalState;
        }
        else {
          int v9 = &OBJC_IVAR___CRLImageRep__autoBackgroundRemovalState;
        }
        *(void *)&v3[*v9] = 3;
        objc_storeStrong((id *)v3 + 72, *(id *)(a1 + 32));
        os_unfair_lock_unlock((os_unfair_lock_t)v3 + 150);
        if (*(unsigned char *)(a1 + 56)) {
          [v3 p_calcNewImageGeometryAndReplaceImageWithRemoveImageBackgroundData:*(void *)(a1 + 32) dismissMiniFormatter:1];
        }
      }
      else if (v8)
      {
        int v10 = *(unsigned __int8 *)(a1 + 56);
        os_unfair_lock_lock((os_unfair_lock_t)v3 + 150);
        uint64_t v11 = 2 * ([v8 code] != (id)2);
        if (v10)
        {
          *((void *)v3 + 73) = v11;
          os_unfair_lock_unlock((os_unfair_lock_t)v3 + 150);
          id v12 = [v3 interactiveCanvasController];
          __int16 v13 = [v12 layerHost];
          [v13 presentError:v8 completionHandler:0];
        }
        else
        {
          *((void *)v3 + 74) = v11;
          os_unfair_lock_unlock((os_unfair_lock_t)v3 + 150);
        }
      }
      else
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EFA10);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010A1350();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014EFA30);
        }
        int v14 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106590C(v14);
        }
        uint64_t v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRep p_removeBackgroundFromImageInitiatedByUser:]_block_invoke");
        uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRep.m"];
        +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:2843 isFatal:0 description:"Didn't receive an image or an error from CRLInstantAlphaHelper.removeBackgroundFromCGImage which should not happen"];

        if (*(unsigned char *)(a1 + 56)) {
          uint64_t v17 = 584;
        }
        else {
          uint64_t v17 = 592;
        }
        *(void *)&v3[v17] = 0;
      }
    }
  }
}

void sub_1003412F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100341338(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003415E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100341628(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100341A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100341A5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100341AA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100341AE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014EFB20);
    }
    id v7 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010A15F4(v7, v6);
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    void block[2] = sub_100341C64;
    block[3] = &unk_1014EFB88;
    objc_copyWeak(&v13, (id *)(a1 + 56));
    id v10 = v5;
    long long v11 = *(_OWORD *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    long long v8 = *(_OWORD *)(a1 + 80);
    long long v14 = *(_OWORD *)(a1 + 64);
    long long v15 = v8;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v13);
  }
}

void sub_100341C20(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100341C64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained) {
    goto LABEL_54;
  }
  id v3 = +[CRLImageProviderPool sharedPool];
  uint64_t v4 = [v3 providerForAsset:*(void *)(a1 + 32) shouldValidate:1];

  if (!v4 || ([v4 isError] & 1) != 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EFB40);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A16E4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014EFB60);
    }
    id v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v5);
    }
    id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRep p_replaceImageDataWithRemoveImageBackgroundData:rect:]_block_invoke");
    id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRep.m"];
    +[CRLAssertionHandler handleFailureInFunction:v6 file:v7 lineNumber:2973 isFatal:0 description:"image provider for current image is invalid"];
    goto LABEL_53;
  }
  long long v65 = v4;
  id v66 = WeakRetained;
  id v76 = objc_alloc_init((Class)NSMapTable);
  id v75 = objc_alloc_init((Class)NSMapTable);
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  id obj = [*(id *)(a1 + 40) connectedLayouts];
  id v8 = [obj countByEnumeratingWithState:&v85 objects:v91 count:16];
  if (!v8) {
    goto LABEL_38;
  }
  id v9 = v8;
  uint64_t v73 = *(void *)v86;
  do
  {
    for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v86 != v73) {
        objc_enumerationMutation(obj);
      }
      long long v11 = *(void **)(*((void *)&v85 + 1) + 8 * i);
      uint64_t v12 = [v11 connectionLineInfo];
      id v13 = [v12 connectionLinePathSource];

      uint64_t v14 = [v13 headMagnet];
      if (v14)
      {
        long long v15 = (void *)v14;
        uint64_t v16 = [v13 headMagnet];
        id v17 = [v16 magnetType];
        if (v17 != (id)7)
        {
          unint64_t v69 = [v13 headMagnet];
          if ([v69 magnetType] != (id)6)
          {
            char v21 = v69;
            goto LABEL_26;
          }
        }
        uint64_t v18 = [v11 connectedTo];
        id v19 = *(void **)(a1 + 40);

        if (v17 != (id)7) {
        if (v18 == v19)
        }
        {
          id v20 = *(void **)(a1 + 48);
          long long v15 = [v13 headMagnet];
          uint64_t v16 = [v11 connectedTo];
          char v21 = [v20 p_getMagnetUnscaledPositionValueForMagnet:v15 withConnectedItem:v16];
          [v76 setObject:v21 forKey:v11];
LABEL_26:
        }
      }
      uint64_t v22 = [v13 tailMagnet];
      if (!v22) {
        goto LABEL_36;
      }
      double v23 = (void *)v22;
      unsigned int v24 = [v13 tailMagnet];
      id v25 = [v24 magnetType];
      if (v25 != (id)7)
      {
        long long v71 = [v13 tailMagnet];
        if ([v71 magnetType] != (id)6)
        {
          __int16 v29 = v71;
          goto LABEL_35;
        }
      }
      id v26 = [v11 connectedFrom];
      __int16 v27 = *(void **)(a1 + 40);

      if (v25 != (id)7) {
      if (v26 == v27)
      }
      {
        int v28 = *(void **)(a1 + 48);
        double v23 = [v13 tailMagnet];
        unsigned int v24 = [v11 connectedFrom];
        __int16 v29 = [v28 p_getMagnetUnscaledPositionValueForMagnet:v23 withConnectedItem:v24];
        [v75 setObject:v29 forKey:v11];
LABEL_35:
      }
LABEL_36:
    }
    id v9 = [obj countByEnumeratingWithState:&v85 objects:v91 count:16];
  }
  while (v9);
LABEL_38:

  int v30 = [*(id *)(a1 + 48) interactiveCanvasController];
  float64x2_t v31 = [v30 commandController];
  [v31 openGroup];
  __int16 v32 = +[NSBundle mainBundle];
  unint64_t v33 = [v32 localizedStringForKey:@"Remove Background" value:0 table:@"UndoStrings"];
  [v31 setCurrentGroupActionString:v33];

  [v31 enableProgressiveEnqueuingInCurrentGroup];
  [v31 openGroup];
  __int16 v34 = [[_TtC8Freeform38CRLCommandReplaceImageWithImageSubject alloc] initWithImageItem:*(void *)(a1 + 56) imageData:*(void *)(a1 + 32) isBackgroundRemoved:1 thumbnailData:0];
  int v35 = [*(id *)(a1 + 40) boardItem];
  __int16 v36 = [v35 geometry];
  int v37 = [v36 geometryWithNewBounds:*(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)];

  uint64_t v38 = [CRLCanvasInfoGeometry alloc];
  [v37 size];
  int v39 = -[CRLCanvasInfoGeometry initWithSize:](v38, "initWithSize:");
  id v40 = [*(id *)(a1 + 56) maskInfo];
  long long v41 = [v40 pathSource];
  id v42 = [v41 copy];

  [v37 size];
  [v42 scaleToNaturalSize];
  id obja = v42;
  long long v70 = v39;
  CGRect v43 = [[_TtC8Freeform30CRLCommandSetImageItemGeometry alloc] initWithImageItem:*(void *)(a1 + 56) imageGeometry:v37 maskGeometry:v39 maskPathSource:v42];
  CGRect v44 = [CRLCanvasCommandSelectionBehavior alloc];
  CGRect v45 = [v30 canvasEditor];
  unint64_t v74 = v30;
  uint64_t v46 = [v30 editorController];
  uint64_t v47 = [v46 selectionPath];
  BOOL v48 = [(CRLCanvasCommandSelectionBehavior *)v44 initWithCanvasEditor:v45 type:2 selectionPath:v47 selectionFlags:4];

  long long v72 = v34;
  [v31 enqueueCommand:v34 withSelectionBehavior:v48];
  uint64_t v64 = v43;
  [v31 enqueueCommand:v43 withSelectionBehavior:v48];
  [v31 closeGroup];
  id v49 = [*(id *)(a1 + 48) interactiveCanvasController];
  [v49 layoutIfNeeded];

  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  id v50 = [v76 keyEnumerator];
  id v51 = [v50 countByEnumeratingWithState:&v81 objects:v90 count:16];
  if (v51)
  {
    id v52 = v51;
    uint64_t v53 = *(void *)v82;
    do
    {
      for (j = 0; j != v52; j = (char *)j + 1)
      {
        if (*(void *)v82 != v53) {
          objc_enumerationMutation(v50);
        }
        uint64_t v55 = *(void *)(*((void *)&v81 + 1) + 8 * (void)j);
        long long v56 = [v76 objectForKey:v55];
        [*(id *)(a1 + 48) p_enqueueCommandsToUpdateMagnetsForLineEnd:11 withClineLayout:v55 withUnscaledPosition:v56];
      }
      id v52 = [v50 countByEnumeratingWithState:&v81 objects:v90 count:16];
    }
    while (v52);
  }

  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  id v7 = v75;
  long long v57 = [v75 keyEnumerator];
  id v58 = [v57 countByEnumeratingWithState:&v77 objects:v89 count:16];
  if (v58)
  {
    id v59 = v58;
    uint64_t v60 = *(void *)v78;
    do
    {
      for (k = 0; k != v59; k = (char *)k + 1)
      {
        if (*(void *)v78 != v60) {
          objc_enumerationMutation(v57);
        }
        uint64_t v62 = *(void *)(*((void *)&v77 + 1) + 8 * (void)k);
        int v63 = [v7 objectForKey:v62];
        [*(id *)(a1 + 48) p_enqueueCommandsToUpdateMagnetsForLineEnd:10 withClineLayout:v62 withUnscaledPosition:v63];

        id v7 = v75;
      }
      id v59 = [v57 countByEnumeratingWithState:&v77 objects:v89 count:16];
    }
    while (v59);
  }

  [v31 closeGroup];
  uint64_t v4 = v65;
  id WeakRetained = v66;
  id v6 = v76;
LABEL_53:

LABEL_54:
}

void sub_1003424B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003424F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100342B30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100342B74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100342DB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100342DF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100343DF4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100343E20(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100343FB0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100343FDC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100344118(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100344144(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100344278(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1003442A4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_100344870(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003448B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345AC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345B0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345B50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345B94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345BD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345C1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345EE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100345F28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100346294(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003462D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034660C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100346650(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003468B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003468F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100346B74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100346BB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_100346CF8(id a1, _TtC8Freeform12CRLBoardItem *a2, BOOL *a3)
{
  return ![(CRLBoardItem *)a2 locked];
}

float64x2_t sub_100347C70(float64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  id v3 = (double *)&qword_101177D90;
  do
  {
    float64x2_t result = a1[2];
    *(float64x2_t *)(a2 + v2) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[1], *(v3 - 4)), *a1, *(v3 - 8)), result, *v3), a1[3], v3[4]);
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

float64x2_t sub_100347CBC(float64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  id v3 = (double *)&qword_101177E10;
  do
  {
    float64x2_t result = a1[2];
    *(float64x2_t *)(a2 + v2) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[1], *(v3 - 4)), *a1, *(v3 - 8)), result, *v3), a1[3], v3[4]);
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

double sub_100347D08(float64x2_t *a1, double a2)
{
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[1], a1[1]), a2), 1.0 - a2), vmulq_n_f64(*a1, 1.0 - a2), 1.0 - a2), vmulq_n_f64(a1[2], a2), a2);
  return result;
}

void sub_100347D40(float64x2_t *a1, uint64_t a2, double a3, double a4)
{
  double v8 = 1.0 - a3;
  *(double *)a2 = sub_10034AAEC(a1, 1.0 - a3, a3, 1.0 - a3, a3, 1.0 - a3, a3);
  *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v9;
  *(double *)(a2 + 16) = sub_10034AAEC(a1, v8, a3, v8, a3, 1.0 - a4, a4);
  *(void *)(a2 + 24) = v10;
  *(double *)(a2 + 32) = sub_10034AAEC(a1, v8, a3, 1.0 - a4, a4, 1.0 - a4, a4);
  *(void *)(a2 + 40) = v11;
  *(double *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = sub_10034AAEC(a1, 1.0 - a4, a4, 1.0 - a4, a4, 1.0 - a4, a4);
  *(void *)(a2 + 56) = v12;
}

uint64_t sub_100347E14(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5 = a1[1];
  double v6 = a1[2] - *a1;
  double v7 = a1[3] - v5;
  double v8 = a2[1];
  double v9 = a2[2] - *a2;
  double v10 = a2[3] - v8;
  double v11 = (v7 * (*a2 - *a1) + (v5 - v8) * v6) / (v10 * v6 - v9 * v7);
  *a4 = v11;
  if (v11 >= 0.0)
  {
    BOOL v13 = v11 == 1.0;
    BOOL v12 = v11 >= 1.0;
  }
  else
  {
    BOOL v12 = 1;
    BOOL v13 = 0;
  }
  if (!v13 && v12) {
    return 0;
  }
  double v14 = (v10 * (*a1 - *a2) + (a2[1] - a1[1]) * v9) / (v7 * v9 - v6 * v10);
  *a3 = v14;
  if (v14 >= 0.0)
  {
    BOOL v16 = v14 == 1.0;
    BOOL v15 = v14 >= 1.0;
  }
  else
  {
    BOOL v15 = 1;
    BOOL v16 = 0;
  }
  if (!v16 && v15) {
    return 0;
  }
  double v17 = a1[1];
  *a5 = *a1 + v14 * v6;
  a5[1] = v17 + *a3 * v7;
  return 1;
}

double sub_100347EC0(double *a1, double a2, double a3)
{
  double v4 = a1[2];
  double v3 = a1[3];
  double v5 = v3 - a1[1];
  double v6 = v4 - *a1;
  float v7 = v6 * v6 + v5 * v5;
  double v8 = (float)(1.0 / sqrtf(v7));
  return a3 * -(v6 * v8) + v5 * v8 * a2 - (v3 * -(v6 * v8) + v5 * v8 * v4);
}

double sub_100347F0C(double *a1, double a2, double a3)
{
  double v3 = *a1;
  double v4 = a1[1];
  double v5 = a1[2];
  double v6 = a1[3];
  if (*a1 == v5 && v4 == v6) {
    return 0.0;
  }
  double v8 = sub_100064680(a2, a3, *a1);
  double v10 = v9;
  double v11 = sub_100064680(v5, v6, v3);
  double v13 = sub_10006468C(v8, v10, v11, v12);
  double v14 = v13 / sub_1000643CC(v5, v6, v3, v4);

  return sub_100407E48(v14, 0.0, 1.0);
}

double sub_100347FD4(float64x2_t *a1, double a2, double a3, double a4)
{
  double v24 = a4 * a4;
  double v6 = 1.0;
  double v7 = 0.0;
  do
  {
    double v8 = (v6 - v7) * 0.125;
    double v9 = 0.0;
    if (v7 <= v6)
    {
      double v10 = 3.40282347e38;
      double v11 = v7;
      do
      {
        double v12 = sub_100064570(a1, v11);
        double v14 = sub_100064680(v12, v13, a2);
        double v16 = sub_1000653A8(v14, v15);
        if (v16 < v10)
        {
          double v10 = v16;
          double v9 = v11;
        }
        double v11 = v8 + v11;
      }
      while (v11 <= v6);
    }
    double v17 = sub_100064570(a1, v7);
    double v19 = v18;
    double v20 = sub_100064570(a1, v6);
    double v21 = sub_100064680(v17, v19, v20);
    double v7 = fmax(v9 - v8, 0.0);
    double v6 = fmin(v8 + v9, 1.0);
  }
  while (sub_1000653A8(v21, v22) >= v24);
  return v9;
}

double sub_1003480F4(float64x2_t *a1, double *a2, uint64_t a3)
{
  double v6 = a2[2];
  double v5 = a2[3];
  double v7 = v5 - a2[1];
  double v8 = v6 - *a2;
  float v9 = v8 * v8 + v7 * v7;
  double v10 = (float)(1.0 / sqrtf(v9));
  double v11 = v7 * v10;
  double v12 = -(v8 * v10);
  double v13 = v5 * v12 + v11 * v6;
  float64_t v14 = a1->f64[1] * v12 + v11 * a1->f64[0] - v13;
  v36.f64[0] = 0.0;
  v36.f64[1] = v14;
  double v15 = a1[1].f64[1] * v12 + v11 * a1[1].f64[0] - v13;
  uint64_t v37 = 0x3FD5555555555555;
  double v38 = v15;
  double v16 = a1[2].f64[1] * v12 + v11 * a1[2].f64[0] - v13;
  uint64_t v39 = 0x3FE5555555555555;
  double v40 = v16;
  double v17 = v12 * a1[3].f64[1] + v11 * a1[3].f64[0] - v13;
  uint64_t v41 = 0x3FF0000000000000;
  double v42 = v17;
  double v18 = v15 * 9.0 + v14 * -3.0 + v16 * -9.0 + v17 * 3.0;
  double v19 = v15 * -12.0 + v14 * 6.0 + v16 * 6.0;
  double v20 = sqrt((v15 * 3.0 + v14 * -3.0) * (v18 * -4.0) + v19 * v19);
  double v21 = v18 + v18;
  double v22 = (-v19 - v20) / v21;
  double v23 = sub_100064570(&v36, (v20 - v19) / v21);
  double v25 = v24;
  double v26 = sub_100064570(&v36, v22);
  double v27 = fabs(v25);
  double v29 = fabs(v28);
  BOOL v31 = v26 > 1.0 || v26 < 0.0 || v27 < v29;
  if (!v31 || (v23 >= 0.0 ? (BOOL v32 = v23 > 1.0) : (BOOL v32 = 1), v32))
  {
    BOOL v33 = v26 < 0.0 || v26 > 1.0;
    double v23 = v26;
    double v27 = v29;
    if (v33) {
      return 3.40282347e38;
    }
  }
  *(double *)a3 = sub_100064570(a1, v23);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v34;
  return v27;
}

uint64_t sub_1003482F0(const CGPath *a1)
{
  uint64_t info = 0;
  CGPathApply(a1, &info, (CGPathApplierFunction)sub_10034832C);
  return info;
}

void *sub_10034832C(void *result)
{
  return result;
}

uint64_t sub_10034833C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)result == v2)
  {
    *(_DWORD *)(result + 16) = *(_DWORD *)a2;
    *(_OWORD *)(result + 72) = *(_OWORD *)(*(void *)(a2 + 8) + 48);
    *(_OWORD *)(result + 56) = *(_OWORD *)(*(void *)(a2 + 8) + 32);
    *(_OWORD *)(result + 40) = *(_OWORD *)(*(void *)(a2 + 8) + 16);
    *(_OWORD *)(result + 24) = *(_OWORD *)*(void *)(a2 + 8);
  }
  *(void *)(result + _Block_object_dispose(&STACK[0x220], 8) = v2 + 1;
  return result;
}

uint64_t sub_10034838C(const CGPath *a1, uint64_t a2, _OWORD *a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  uint64_t info = a2;
  CGPathApply(a1, &info, (CGPathApplierFunction)sub_10034833C);
  if (!a3) {
    return DWORD2(v7);
  }
  *a3 = v8;
  uint64_t result = DWORD2(v7);
  if (DWORD2(v7) == 3)
  {
    long long v5 = v10;
    a3[1] = v9;
    a3[2] = v5;
  }
  return result;
}

void sub_100348910(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  id v11 = a6;
  double v12 = *a1;
  double v13 = a1[2];
  double v14 = a1[4];
  double v15 = a1[5];
  double v16 = a1[6];
  double v17 = a1[7];
  double v19 = a2[2];
  double v18 = a2[3];
  double v20 = v18 - a2[1];
  double v21 = v19 - *a2;
  float v22 = v21 * v21 + v20 * v20;
  double v23 = (float)(1.0 / sqrtf(v22));
  double v24 = v20 * v23;
  double v25 = -(v21 * v23);
  double v26 = v18 * v25 + v24 * v19;
  double v57 = a1[3];
  double v58 = a1[1];
  v59.f64[0] = 0.0;
  v59.f64[1] = v58 * v25 + v24 * v12 - v26;
  uint64_t v60 = 0x3FD5555555555555;
  double v61 = v57 * v25 + v24 * v13 - v26;
  double v55 = v17;
  double v56 = v15;
  uint64_t v62 = 0x3FE5555555555555;
  double v63 = v15 * v25 + v24 * v14 - v26;
  uint64_t v64 = 0x3FF0000000000000;
  double v65 = v17 * v25 + v24 * v16 - v26;
  id v27 = objc_alloc_init((Class)NSMutableArray);
  sub_10034D020(&v59, (uint64_t)&v59, v27, 1.0);
  uint64_t v28 = (uint64_t)[v27 count];
  if (v28 >= 1)
  {
    uint64_t v29 = v28;
    uint64_t v30 = 0;
    double v54 = v14;
    do
    {
      BOOL v31 = [v27 objectAtIndex:v30];
      [v31 doubleValue];
      double v33 = v32;

      double v35 = v33 * (v33 * (v16 * v33 + (1.0 - v33) * v14) + (1.0 - v33) * (v14 * v33 + (1.0 - v33) * v13))
          + (1.0 - v33) * (v33 * (v14 * v33 + (1.0 - v33) * v13) + (1.0 - v33) * (v13 * v33 + (1.0 - v33) * v12));
      double v36 = a2[2] - *a2;
      double v37 = v35 - *a2;
      if (v36 * v37 > -0.001)
      {
        double v34 = 1.0 - v33;
        double v38 = v33 * (v33 * (v55 * v33 + v34 * v56) + v34 * (v56 * v33 + v34 * v57))
            + v34 * (v33 * (v56 * v33 + v34 * v57) + v34 * (v57 * v33 + v34 * v58));
        double v39 = a2[1];
        double v40 = a2[3] - v39;
        double v41 = v40 * v40 + v36 * v36;
        double v42 = (v38 - v39) * (v38 - v39) + v37 * v37;
        if (v40 * (v38 - v39) > -0.001 && v42 <= v41)
        {
          if (!v11) {
            break;
          }
          double v44 = v13;
          double v45 = v16;
          double v46 = v12;
          double v47 = sqrt(v42) / sqrt(v41);
          BOOL v48 = [CRLPathIntersection alloc];
          if (a5)
          {
            uint64_t v49 = a4;
            double v50 = v47;
            uint64_t v51 = a3;
            double v52 = v33;
          }
          else
          {
            uint64_t v49 = a3;
            double v50 = v33;
            uint64_t v51 = a4;
            double v52 = v47;
          }
          uint64_t v53 = -[CRLPathIntersection initWithSegment:atT:onSegmentB:atT:atPoint:](v48, "initWithSegment:atT:onSegmentB:atT:atPoint:", v49, v51, v50, v52, v35, v38);
          [v11 addObject:v53];

          double v12 = v46;
          double v16 = v45;
          double v13 = v44;
          double v14 = v54;
        }
      }
      ++v30;
    }
    while (v29 != v30);
  }
}

void sub_100348C30(double *a1, double *a2, uint64_t a3, uint64_t a4, void *a5)
{
  double v12 = 0.0;
  double v13 = 0.0;
  CGPoint v11 = CGPointZero;
  if (sub_100347E14(a1, a2, &v13, &v12, &v11.x))
  {
    id v8 = a5;
    long long v9 = [CRLPathIntersection alloc];
    long long v10 = [(CRLPathIntersection *)v9 initWithSegment:a3 atT:a4 onSegmentB:v13 atT:v12 atPoint:v11];
    [v8 addObject:v10];
  }
}

double sub_1003496E4(float64x2_t *a1, double *a2, uint64_t a3)
{
  double v5 = *a2;
  double v6 = sub_100064680(a2[2], a2[3], *a2);
  double v8 = sub_100064660(v6, v7);
  double v10 = v9;
  double v11 = sub_100064680(a1->f64[0], a1->f64[1], v5);
  double v13 = sub_100064660(v11, v12);
  v43.f64[0] = 0.0;
  v43.f64[1] = sub_10006468C(v8, v10, v13, v14);
  double v15 = sub_100064680(a1[1].f64[0], a1[1].f64[1], v5);
  double v17 = sub_100064660(v15, v16);
  uint64_t v44 = 0x3FD5555555555555;
  double v45 = sub_10006468C(v8, v10, v17, v18);
  double v19 = sub_100064680(a1[2].f64[0], a1[2].f64[1], v5);
  double v21 = sub_100064660(v19, v20);
  uint64_t v46 = 0x3FE5555555555555;
  double v47 = sub_10006468C(v8, v10, v21, v22);
  double v23 = sub_100064680(a1[3].f64[0], a1[3].f64[1], v5);
  double v25 = sub_100064660(v23, v24);
  uint64_t v48 = 0x3FF0000000000000;
  double v49 = sub_10006468C(v8, v10, v25, v26);
  double v27 = v45 * 9.0 + v43.f64[1] * -3.0 + v47 * -9.0 + v49 * 3.0;
  double v28 = v45 * -12.0 + v43.f64[1] * 6.0 + v47 * 6.0;
  double v29 = sqrt((v45 * 3.0 + v43.f64[1] * -3.0) * (v27 * -4.0) + v28 * v28);
  double v30 = (-v28 - v29) / (v27 + v27);
  double v31 = sub_100064570(&v43, (v29 - v28) / (v27 + v27));
  double v33 = v32;
  double v34 = sub_100064570(&v43, v30);
  BOOL v37 = v34 <= 1.0 && v34 >= 0.0 && v33 <= v35;
  if (!v37 && (v31 >= 0.0 ? (BOOL v38 = v31 > 1.0) : (BOOL v38 = 1), !v38)
    || ((v39 = -2.0, v34 >= 0.0) ? (v40 = v34 > 1.0) : (v40 = 1), double v31 = v34, v33 = v35, !v40))
  {
    *(double *)a3 = sub_100064570(a1, v31);
    *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = v41;
    return fabs(v33);
  }
  return v39;
}

void sub_100349CBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100349D00(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100349D44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100349D88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034A110(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034A154(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034A614(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034A658(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034AA64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034AAA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_10034AAEC(float64x2_t *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float64x2_t v7 = a1[1];
  float64x2_t v8 = a1[2];
  float64x2_t v9 = vmlaq_n_f64(vmulq_n_f64(v8, a7), v7, a6);
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[3], a7), v8, a6), a5), v9, a4), a3), vmlaq_n_f64(vmulq_n_f64(v9, a5), vmlaq_n_f64(vmulq_n_f64(v7, a7), *a1, a6), a4), a2);
  return result;
}

void sub_10034AB30(float64x2_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int a6, uint64_t a7)
{
  id v13 = a2;
  id v14 = a5;
  uint64_t v79 = 0;
  double v80 = 0.0;
  [v13 transformedTotalCoordinate:a3 betweenElement:a4 andElement:&v79 getPercentage:&v80 a1->f64[0], a1->f64[1]];
  double v75 = v15;
  double v77 = v16;
  v83.f64[0] = v15;
  v83.f64[1] = v16;
  [v13 curvatureAt:v79 fromElement:v80];
  double v18 = v17;
  [v13 myGradientAt:v79 fromElement:v80];
  double v20 = v19;
  double v22 = v21;
  [v13 transformedTotalCoordinate:a3 betweenElement:a4 andElement:&v79 getPercentage:&v80 a1[3].f64[0] a1[3].f64[1]];
  double v78 = v23;
  double v76 = v24;
  double v88 = v23;
  double v89 = v24;
  [v13 curvatureAt:v79 fromElement:v80];
  double v26 = v25;
  [v13 myGradientAt:v79 fromElement:v80];
  double v73 = v28;
  double v74 = v27;
  double v29 = 0.5;
  if (v18 <= 0.5) {
    double v30 = v18;
  }
  else {
    double v30 = 0.5;
  }
  if (v30 >= -0.5) {
    double v31 = v30;
  }
  else {
    double v31 = -0.5;
  }
  if (v26 <= 0.5) {
    double v29 = v26;
  }
  if (v29 < -0.5) {
    double v29 = -0.5;
  }
  [v13 lineWidth:v29];
  double v33 = v32 * a1->f64[1];
  double v34 = v32 * a1[2].f64[1];
  double v35 = v32 * a1[3].f64[1];
  float64_t v36 = a1[1].f64[0] - a1->f64[0];
  double v37 = v32 * a1[1].f64[1] - v33;
  double v38 = sub_1000646A4(v20, v22, 1.0 - v33 * v31);
  double v39 = v37 * sub_100064660(-v22, v20) + v36 * v38;
  double v84 = sub_100064698(v75, v77, v39);
  double v85 = v40;
  float64_t v41 = a1[2].f64[0] - a1[3].f64[0];
  double v42 = sub_1000646A4(v74, v73, 1.0 - v35 * v72);
  double v43 = (v34 - v35) * sub_100064660(-v73, v74) + v41 * v42;
  double v86 = sub_100064698(v78, v76, v43);
  double v87 = v44;
  if (a6)
  {
    if (a6 > 19) {
      goto LABEL_16;
    }
    double v45 = sub_100064680(v78, v76, v75);
    if (sub_1000653A8(v45, v46) <= 0.5) {
      goto LABEL_16;
    }
  }
  double v47 = sub_100064570(&v83, 0.33);
  double v49 = v48;
  [v13 transformedTotalCoordinate:a3 betweenElement:a4 getElement:&v79 getPercentage:sub_100064570(a1, 0.33)];
  double v51 = sub_100064680(v47, v49, v50);
  double v53 = sub_1000653A8(v51, v52) + 0.0;
  double v54 = sub_100064570(&v83, 0.5);
  double v56 = v55;
  [v13 transformedTotalCoordinate:a3 betweenElement:a4 getElement:&v79 getPercentage:sub_100064570(a1, 0.5)];
  double v58 = sub_100064680(v54, v56, v57);
  double v60 = v53 + sub_1000653A8(v58, v59);
  double v61 = sub_100064570(&v83, 0.66);
  double v63 = v62;
  [v13 transformedTotalCoordinate:a3 betweenElement:a4 andElement:&v79 getPercentage:sub_100064570(a1, 0.66)];
  double v65 = sub_100064680(v61, v63, v64);
  if (v60 + sub_1000653A8(v65, v66) <= 0.2)
  {
LABEL_16:
    if (a7)
    {
      [v14 moveToPoint:*(_OWORD *)&v83];
    }
    else
    {
      [v14 currentPoint];
      float64x2_t v68 = v83;
      double v70 = sub_100064680(v83.f64[0], v83.f64[1], v69);
      if (sub_1000653A8(v70, v71) > 1.0) {
        [v14 lineToPoint:*(_OWORD *)&v68];
      }
    }
    [v14 curveToPoint:v88 controlPoint1:v89 controlPoint2:v84, v85, v86, v87];
  }
  else
  {
    sub_100347D40(a1, (uint64_t)v82, 0.0, 0.5);
    sub_100347D40(a1, (uint64_t)v81, 0.5, 1.0);
    uint64_t v67 = (a6 + 1);
    sub_10034AB30(v82, v13, a3, a4, v14, v67, a7);
    sub_10034AB30(v81, v13, a3, a4, v14, v67, 0);
  }
}

void sub_10034AFCC(float64x2_t *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  double v12 = (char *)[v11 count];
  id v13 = v12 - 1;
  if ((unint64_t)(v12 - 1) < 2)
  {
    id v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_23;
  }
  id v14 = v12;
  int v107 = v12 - 1;
  id v103 = v10;
  id v109 = v9;
  id v15 = 0;
  uint64_t v16 = 0;
  double v17 = 0;
  double v18 = a1[1].f64[0];
  double v19 = a1[2].f64[0];
  double v20 = a1[3].f64[0];
  double v21 = fmin(a1->f64[0], fmin(v18, fmin(v19, v20)));
  double v22 = fmax(a1->f64[0], fmax(v18, fmax(v19, v20)));
  uint64_t v23 = 2;
  do
  {
    double v24 = [v11 objectAtIndex:v23 - 1];
    [v24 t];
    double v26 = v25;
    if (v25 > v21 && v25 < v22)
    {
      if (!v15) {
        id v15 = objc_alloc_init((Class)NSMutableArray);
      }
      v111.f64[0] = v26;
      v111.f64[1] = -100.0;
      v112.f64[0] = v26;
      v112.f64[1] = 100.0;
      sub_100348910(a1->f64, v111.f64, v23 - 1, v23 - 1, 0, v15);
    }
    double v28 = a1[3].f64[0];
    if (v26 < v28) {
      uint64_t v16 = v23 - 1;
    }
    if (v26 > v28) {
      uint64_t v29 = v23 - 1;
    }
    else {
      uint64_t v29 = 0;
    }
    if (!v17) {
      double v17 = (char *)v29;
    }

    ++v23;
  }
  while (v14 != (char *)v23);
  id v9 = v109;
  id v10 = v103;
  id v13 = v107;
  if (!v17)
  {
LABEL_23:
    double v17 = v13;
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  if (!v15)
  {
LABEL_37:
    double v73 = [v11 objectAtIndex:v16];
    double v74 = [v11 objectAtIndex:v17];
    [v73 t];
    uint64_t v110 = v75;
    [v74 t];
    double v77 = v76;
    [v73 skew];
    double v79 = v78;
    [v74 skew];
    double v81 = v80;
    [v9 lineWidth];
    double v83 = v82;
    [v9 length];
    uint64_t v84 = 0;
    float64x2_t v85 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v86 = (float64x2_t)vdupq_lane_s64(v110, 0);
    float64x2_t v87 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v77 - *(double *)&v110), 0);
    float64x2_t v88 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v79 + v81), 0);
    float64x2_t v89 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v79), 0);
    __asm
    {
      FMOV            V6.2D, #0.5
      FMOV            V7.2D, #1.0
    }
    double v93 = v83 / v92;
    do
    {
      f64 = a1[v84].f64;
      float64x2x2_t v116 = vld2q_f64(f64);
      float64x2_t v95 = vdivq_f64(vsubq_f64(v116.val[0], v86), v87);
      float64x2_t v96 = vabsq_f64(v95);
      v116.val[0] = vmlaq_f64(v116.val[0], v116.val[1], vmulq_n_f64(vmlaq_f64(v89, v88, vmaxnmq_f64(vminnmq_f64((float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcgtq_f64(v85, v96), (int8x16_t)vcgtq_f64(v96, v85)), (int8x16_t)v95, _Q6), _Q7), (float64x2_t)0)), v93));
      double *f64 = v116.val[0].f64[0];
      a1[v84 + 1].f64[0] = v116.val[0].f64[1];
      v84 += 2;
    }
    while (v84 != 4);
    sub_10034AB30(a1, v9, (uint64_t)[v73 segment] + 1, (uint64_t)[v74 segment], v10, 0, a4);

    goto LABEL_40;
  }
LABEL_24:
  if (![v15 count]) {
    goto LABEL_37;
  }
  CGRect v104 = v10;
  [v15 sortUsingSelector:"compareT:"];
  double v108 = 0.0;
  long long v97 = -[CRLPathIntersection initWithSegment:atT:atPoint:]([CRLPathIntersection alloc], "initWithSegment:atT:atPoint:", v16, 1.0, 1000.0, 0.0);
  [v15 addObject:];
  CGRect v102 = (char *)[v15 count];
  if (v102)
  {
    double v30 = 0;
    id v98 = v102 - 1;
    __asm { FMOV            V0.2D, #0.5 }
    int8x16_t v100 = _Q0;
    float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v99 = _Q0;
    do
    {
      float64_t v36 = [v15 objectAtIndex:v30];
      [v36 t];
      float64x2_t v37 = a1[1];
      float64x2_t v111 = *a1;
      float64x2_t v112 = v37;
      float64x2_t v38 = a1[3];
      float64x2_t v113 = a1[2];
      float64x2_t v114 = v38;
      float64x2_t v39 = vmlaq_n_f64(vmulq_n_f64(v113, v108), v112, 1.0 - v108);
      float64x2_t v105 = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, v108), v113, 1.0 - v108), v108), v39, 1.0 - v108), v108), vmlaq_n_f64(vmulq_n_f64(v39, v108), vmlaq_n_f64(vmulq_n_f64(v112, v108), v111, 1.0 - v108), 1.0 - v108), 1.0 - v108);
      float64x2_t v41 = vmlaq_n_f64(vmulq_n_f64(v112, v40), v111, 1.0 - v40);
      float64x2_t v42 = vmlaq_n_f64(vmulq_n_f64(v113, v40), v112, 1.0 - v40);
      float64x2_t v43 = vmlaq_n_f64(vmulq_n_f64(v114, v40), v113, 1.0 - v40);
      float64x2_t v111 = v105;
      float64x2_t v112 = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v43, v108), v42, 1.0 - v108), v108), vmlaq_n_f64(vmulq_n_f64(v42, v108), v41, 1.0 - v108), 1.0 - v108);
      float64x2_t v44 = vmlaq_n_f64(vmulq_n_f64(v42, v40), v41, 1.0 - v40);
      float64x2_t v45 = vmlaq_n_f64(vmulq_n_f64(v43, v40), v42, 1.0 - v40);
      float64x2_t v46 = vmlaq_n_f64(vmulq_n_f64(v45, v108), v44, 1.0 - v108);
      double v108 = v40;
      float64x2_t v113 = v46;
      float64x2_t v114 = vmlaq_n_f64(vmulq_n_f64(v45, v40), v44, 1.0 - v40);
      [v36 point];
      double v48 = v47;
      double v49 = (char *)[v36 segment];
      double v50 = (char *)[v36 segment];
      if (v105.f64[0] <= v48)
      {
        if (v30 == v98) {
          double v51 = v50 + 1;
        }
        else {
          double v51 = v50;
        }
        v49 -= v30 != v98;
      }
      else
      {
        double v51 = v50 + 1;
      }
      double v52 = [v11 objectAtIndex:v49, v105.f64[0]];
      double v53 = [v11 objectAtIndex:v51];
      [v52 t];
      uint64_t v106 = v54;
      [v53 t];
      double v56 = v55;
      [v52 skew];
      double v58 = v57;
      [v53 skew];
      double v60 = v59;
      [v9 lineWidth];
      double v62 = v61;
      [v9 length];
      uint64_t v63 = 0;
      float64x2_t v64 = (float64x2_t)vdupq_lane_s64(v106, 0);
      float64x2_t v65 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v56 - *(double *)&v106), 0);
      float64x2_t v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v58 + v60), 0);
      float64x2_t v67 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v58), 0);
      double v69 = v62 / v68;
      do
      {
        double v70 = &v111.f64[v63];
        float64x2x2_t v115 = vld2q_f64(v70);
        float64x2_t v71 = vdivq_f64(vsubq_f64(v115.val[0], v64), v65);
        float64x2_t v72 = vabsq_f64(v71);
        v115.val[0] = vmlaq_f64(v115.val[0], v115.val[1], vmulq_n_f64(vmlaq_f64(v67, v66, vmaxnmq_f64(vminnmq_f64((float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcgtq_f64(v101, v72), (int8x16_t)vcgtq_f64(v72, v101)), (int8x16_t)v71, v100), v99), (float64x2_t)0)), v69));
        *double v70 = v115.val[0].f64[0];
        *(float64_t *)((char *)&v111 + v63 * 8 + 16) = v115.val[0].f64[1];
        v63 += 4;
      }
      while (v63 != 8);
      sub_10034AB30(&v111, v9, (uint64_t)[v52 segment] + 1, (uint64_t)[v53 segment], v104, 0, a4 & 1);

      LOBYTE(a4) = 0;
      ++v30;
    }
    while (v30 != v102);
  }

  id v10 = v104;
LABEL_40:
}

void sub_10034BEB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034BEFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGFloat sub_10034C66C(const CGPath *a1, double *a2)
{
  double v4 = sub_100064680(a2[2], a2[3], *a2);
  double v6 = sub_100064660(v4, v5);
  v9[0] = a2;
  v9[1] = 0xC000000000000000;
  CGPoint v10 = CGPointZero;
  double v11 = v6;
  uint64_t v12 = v7;
  sub_1000D64F0(a1, (uint64_t)v9, (uint64_t)sub_10034C6E4);
  return v10.x;
}

void sub_10034C6E4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 3)
  {
    uint64_t v7 = *(float64x2_t **)(a2 + 8);
    double v5 = v7[3].f64[0];
    double v6 = v7[3].f64[1];
    CGPoint v18 = CGPointZero;
    double v8 = sub_1003496E4(v7, *(double **)a1, (uint64_t)&v18);
    if (v8 > *(double *)(a1 + 8))
    {
      *(CGPoint *)(a1 + 16) = v18;
      *(double *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v8;
    }
  }
  else if (*(_DWORD *)a2 == 1)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = *(double *)(v4 + 16);
    double v6 = *(double *)(v4 + 24);
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0170);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A2260();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0190);
    }
    id v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    CGPoint v10 = +[NSString stringWithUTF8String:"void CRLPathNearestAngleOnPathToLineApplier(void * _Nonnull, const CRLPathSegment * _Nonnull)"];
    double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLPathDistortion.m"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:2072 isFatal:0 description:"CRLPathNearestAngleOnPathToLineApplier doesn't handle quad curves or some other element type"];

    uint64_t v12 = *(void *)(a2 + 8);
    double v5 = *(double *)(v12 + 32);
    double v6 = *(double *)(v12 + 40);
  }
  double v13 = sub_100064680(v5, v6, **(double **)a1);
  double v15 = sub_100064660(v13, v14);
  double v17 = sub_10006468C(*(double *)(a1 + 32), *(double *)(a1 + 40), v15, v16);
  if (v17 > *(double *)(a1 + 8))
  {
    *(double *)(a1 + 16) = v5;
    *(double *)(a1 + 24) = v6;
    *(double *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v17;
  }
}

void sub_10034C8E4(float64x2_t *a1, double *a2, uint64_t a3, uint64_t a4, int a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v38 = a6;
  double v41 = 0.0;
  double v42 = 0.0;
  sub_10034CB9C(a1->f64, a2, &v42, &v41);
  double v19 = v42;
  if (v42 <= 1.0)
  {
    double v20 = v41;
    if (v41 >= 0.0)
    {
      if ((v41 - v42) * a7 >= 0.0001)
      {
        if (v41 - v42 >= 0.8)
        {
          double v35 = (v42 + v41) * 0.5;
          sub_100347D40(a1, (uint64_t)v43, v42, v35);
          uint64_t v36 = a5 ^ 1u;
          sub_10034C8E4(a2, v43, a4, a3, v36, v38, a9, a10, (v20 - v35) * a7, a8 + v19 * a7);
          sub_100347D40(a1, (uint64_t)v43, (v19 + v20) * 0.5, v20);
          double v27 = a8 + v35 * a7;
          uint64_t v29 = a2;
          double v30 = a9;
          double v31 = a10;
          double v32 = (v20 - v35) * a7;
          uint64_t v33 = a4;
          uint64_t v34 = a3;
          uint64_t v28 = v36;
        }
        else
        {
          sub_100347D40(a1, (uint64_t)v43, v42, v41);
          double v27 = a8 + v19 * a7;
          uint64_t v28 = a5 ^ 1u;
          uint64_t v29 = a2;
          double v30 = a9;
          double v31 = a10;
          double v32 = (v20 - v19) * a7;
          uint64_t v33 = a4;
          uint64_t v34 = a3;
        }
        sub_10034C8E4(v29, v43, v33, v34, v28, v38, v30, v31, v32, v27);
      }
      else
      {
        double v39 = 0.0;
        double v40 = 0.0;
        sub_100347D40(a1, (uint64_t)v43, v42, v41);
        sub_10034CB9C(a2, v43, &v40, &v39);
        if ((v39 - v40) * a9 < 0.1)
        {
          double v21 = (v39 + v40) * a9 * 0.5 + a10;
          double v22 = [CRLPathIntersection alloc];
          if (a5)
          {
            uint64_t v23 = a4;
            double v24 = v21;
            uint64_t v25 = a3;
            double v26 = (v19 + v20) * a7 * 0.5 + a8;
          }
          else
          {
            uint64_t v23 = a3;
            double v24 = (v19 + v20) * a7 * 0.5 + a8;
            uint64_t v25 = a4;
            double v26 = v21;
          }
          float64x2_t v37 = -[CRLPathIntersection initWithSegment:atT:onSegmentB:atT:atPoint:](v22, "initWithSegment:atT:onSegmentB:atT:atPoint:", v23, v25, v24, v26, CGPointZero.x, CGPointZero.y, v38);
          [v38 addObject:v37];
        }
      }
    }
  }
}

double *sub_10034CB9C(double *a1, double *a2, double *a3, double *a4)
{
  double v6 = a2[6];
  double v7 = a2[7];
  double v8 = v7 - a2[1];
  double v9 = v6 - *a2;
  float v10 = v9 * v9 + v8 * v8;
  double v11 = (float)(1.0 / sqrtf(v10));
  double v12 = v8 * v11;
  double v13 = -(v9 * v11);
  double v14 = v7 * v13 + v12 * v6;
  double v15 = a1[1] * v13 + v12 * *a1 - v14;
  v39[0] = 0;
  *(double *)&v39[1] = v15;
  double v16 = a1[3] * v13 + v12 * a1[2] - v14;
  v39[2] = 0x3FD5555555555555;
  *(double *)&v39[3] = v16;
  double v17 = v13 * a1[5] + v12 * a1[4] - v14;
  v39[4] = 0x3FE5555555555555;
  *(double *)&v39[5] = v17;
  double v18 = v13 * a1[7] + v12 * a1[6] - v14;
  v39[6] = 0x3FF0000000000000;
  *(double *)&v39[7] = v18;
  double v20 = a2[2];
  double v19 = a2[3];
  double v21 = v13 * v19 + v12 * v20 - v14;
  double v22 = v13 * a2[5] + v12 * a2[4] - v14;
  double v23 = fmin(v22, 0.0);
  double v24 = fmin(v21, v23);
  double v25 = fmax(v22, 0.0);
  double v26 = fmax(v21, v25);
  if (v24 == v26)
  {
    double v27 = sqrt(v8 * v8 + v9 * v9);
    double v28 = v20 + v8 / v27 * 1.0e-10;
    double v29 = v19 + v9 / v27 * 1.0e-10;
    a2[2] = v28;
    a2[3] = v29;
    double v30 = v13 * v29 + v12 * v28 - v14;
    double v24 = fmin(v30, v23);
    double v26 = fmax(v30, v25);
  }
  if (v24 == v26)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0130);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A22E8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0150);
    }
    double v31 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v31);
    }
    double v32 = +[NSString stringWithUTF8String:"void clipToFatCurve(CRLDoublePoint *, CRLDoublePoint *, CRLDoubleFloat * _Nonnull, CRLDoubleFloat * _Nonnull)"];
    uint64_t v33 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLPathDistortion.m"];
    +[CRLAssertionHandler handleFailureInFunction:v32 file:v33 lineNumber:495 isFatal:0 description:"Degenerate curve! Cannot do intersection logic correctly"];
  }
  *a3 = 2.0;
  *a4 = -1.0;
  sub_10034CF58(a3, a4, (uint64_t)v39, v24);
  double result = sub_10034CF58(a3, a4, (uint64_t)v39, v26);
  for (uint64_t i = 0; i != 8; i += 2)
  {
    double v36 = *(double *)&v39[i + 1];
    if (v36 > v24 && v36 < v26)
    {
      double v38 = *(double *)&v39[i];
      *a3 = fmin(*a3, v38);
      *a4 = fmax(*a4, v38);
    }
  }
  return result;
}

void sub_10034CED0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034CF14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double *sub_10034CF58(double *result, double *a2, uint64_t a3, double a4)
{
  unint64_t v4 = 0;
  double v5 = (double *)(a3 + 24);
  uint64_t v6 = 3;
  do
  {
    if (v4 <= 2)
    {
      double v7 = (double *)(a3 + 16 * v4);
      double v8 = v7 + 1;
      double v9 = v5;
      uint64_t v10 = v6;
      do
      {
        double v11 = *v8;
        if ((*v8 <= a4 || *v9 <= a4) && (v11 >= a4 || *v9 >= a4))
        {
          double v12 = *v7;
          double v13 = *(v9 - 1) - *v7;
          if (v13 != 0.0) {
            double v12 = v13 * (a4 - (v11 - v12 * (*v9 - v11) / v13)) / (*v9 - v11);
          }
          if (v12 < *result) {
            *double result = v12;
          }
          if (v12 > *a2) {
            *a2 = v12;
          }
        }
        v9 += 2;
        --v10;
      }
      while (v10);
    }
    ++v4;
    --v6;
    v5 += 2;
  }
  while (v4 != 4);
  return result;
}

void sub_10034D020(float64x2_t *a1, uint64_t a2, void *a3, double a4)
{
  double v15 = 2.0;
  id v13 = a3;
  double v14 = -1.0;
  sub_10034CF58(&v15, &v14, a2, 0.0);
  double v7 = v15;
  if (v15 <= 1.0)
  {
    double v8 = v14;
    if (v14 >= 0.0)
    {
      if (v14 - v15 >= 0.00005)
      {
        if (v14 - v15 >= a4 * 0.8)
        {
          double v12 = (v15 + v14) * 0.5;
          sub_100347D40(a1, (uint64_t)v16, v15, v12);
          sub_10034D020(a1, v16, v13, v12 - v7);
          sub_100347D40(a1, (uint64_t)v16, (v7 + v8) * 0.5, v8);
          double v11 = v8 - v12;
          uint64_t v10 = a1;
        }
        else
        {
          sub_100347D40(a1, (uint64_t)v16, v15, v14);
          uint64_t v10 = a1;
          double v11 = v8 - v7;
        }
        sub_10034D020(v10, v16, v13, v11);
      }
      else
      {
        double v9 = +[NSNumber numberWithDouble:(v15 + v14) * 0.5];
        [v13 addObject:v9];
      }
    }
  }
}

void sub_10034D1C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034D204(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034D53C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034D580(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034D760(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034D7A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034DFE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E024(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E068(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E0AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E0F0(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  uint64_t v2 = off_10166DB68;
  off_10166DB68 = v1;
}

uint64_t sub_10034E130(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 112) = 0;
  *(unsigned char *)(*(void *)(result + 32) + 113) = 0;
  return result;
}

uint64_t sub_10034E144(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10034E154(uint64_t a1)
{
}

void sub_10034E15C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  unsigned int v3 = [v2 canInsertBoardItemsFromDragOperationForDragInfo:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) nativeProvidersForDynamicDragInsertionWithDragInfo:*(void *)(a1 + 40)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(NSObject **)(v7 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_10034E29C;
  block[3] = &unk_1014CBBB0;
  void block[4] = v7;
  dispatch_sync(v8, block);
  double v9 = dispatch_get_global_queue(2, 0);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10034E2E8;
  _OWORD v10[3] = &unk_1014E5D18;
  v10[4] = *(void *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  dispatch_async(v9, v10);
}

void sub_10034E29C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;

  *(unsigned char *)(*(void *)(a1 + 32) + 112) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 113) = 0;
}

void sub_10034E2E8(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count];
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count])
  {
    double v27 = v2;
    if (qword_101719CF0 != -1) {
      dispatch_once(&qword_101719CF0, &stru_1014F02D0);
    }
    uint64_t v4 = off_10166DB68;
    if (os_log_type_enabled((os_log_t)off_10166DB68, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      uint64_t v6 = v4;
      *(_DWORD *)buf = 134217984;
      *(void *)double v38 = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "creating infos from %lu native objects on pasteboard for drag-insert", buf, 0xCu);
    }
    uint64_t v7 = +[NSMutableArray arrayWithCapacity:v3];
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v8 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v34;
      do
      {
        long long v11 = 0;
        do
        {
          if (*(void *)v34 != v10) {
            objc_enumerationMutation(obj);
          }
          double v12 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v11);
          id v13 = [*(id *)(a1 + 32) interactiveCanvasController];
          double v14 = [v13 editingCoordinator];
          double v15 = [v14 boardItemFactory];
          id v16 = [v12 newBoardItemWithFactory:v15 bakedSize:0];

          if (v16)
          {
            [v7 addObject:v16];
          }
          else
          {
            unsigned int v17 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014F02F0);
            }
            double v18 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)double v38 = v17;
              *(_WORD *)&v38[4] = 2082;
              *(void *)&v38[6] = "-[CRLDragAndDropController draggingEntered:atScaledPoint:]_block_invoke_2";
              __int16 v39 = 2082;
              double v40 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropController.m";
              __int16 v41 = 1024;
              int v42 = 232;
              __int16 v43 = 2082;
              float64x2_t v44 = "boardItem";
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014F0310);
            }
            double v19 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              double v22 = v19;
              double v23 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)double v38 = v17;
              *(_WORD *)&v38[4] = 2114;
              *(void *)&v38[6] = v23;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            double v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLDragAndDropController draggingEntered:atScaledPoint:]_block_invoke");
            double v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropController.m"];
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v20, v21, 232, 0, "invalid nil value for '%{public}s'", "boardItem");
          }
          long long v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
      }
      while (v9);
    }

    id v2 = v27;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v24 = *(void *)(a1 + 32);
  double v25 = *(NSObject **)(v24 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_10034E898;
  block[3] = &unk_1014F0358;
  id v30 = v7;
  uint64_t v31 = v24;
  uint64_t v32 = *(void *)(a1 + 48);
  id v26 = v7;
  dispatch_async(v25, block);
}

void sub_10034E7D0(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034E810(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E854(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034E898(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    [*(id *)(*(void *)(a1 + 40) + 120) addObjectsFromArray:];
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count])
  {
    if (qword_101719CF0 != -1) {
      dispatch_once(&qword_101719CF0, &stru_1014F0330);
    }
    id v3 = off_10166DB68;
    if (os_log_type_enabled((os_log_t)off_10166DB68, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      uint64_t v5 = v3;
      *(_DWORD *)buf = 134217984;
      id v17 = [v4 count];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "making %lu infos from importable items provided for drag insert", buf, 0xCu);
    }
    uint64_t v6 = [[CRLPasteboardMultipleImportableBoardItemProvider alloc] initWithImportableBoardItemProviders:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    uint64_t v7 = [*(id *)(a1 + 40) p_alertPresenter];
    [(CRLPasteboardMultipleImportableBoardItemProvider *)v6 setAlertPresenter:v7];

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 128), v6);
    id v8 = [*(id *)(a1 + 40) interactiveCanvasController];
    id v9 = [v8 editingCoordinator];
    uint64_t v10 = [v9 boardItemFactory];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_10034EB24;
    v14[3] = &unk_1014CBE78;
    void v14[4] = *(void *)(a1 + 40);
    double v15 = v6;
    long long v11 = v6;
    [(CRLPasteboardMultipleImportableBoardItemProvider *)v11 provideBoardItemsWithFactory:v10 completionHandler:v14];
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 112) = 1;
    *(unsigned char *)(*(void *)(a1 + 40) + 113) = 1;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

void sub_10034EAE4(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034EB24(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10034EBBC;
  v5[3] = &unk_1014CBE78;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  dispatch_async(v2, v5);
}

void sub_10034EBBC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 32) boardItems];
    if ([v3 count]) {
      [*(id *)(*(void *)(a1 + 40) + 120) addObjectsFromArray:v3];
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 112) = 1;
    *(unsigned char *)(*(void *)(a1 + 40) + 113) = 1;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(v4 + 128);
  *(void *)(v4 + 12_Block_object_dispose(&STACK[0x220], 8) = 0;
}

void sub_10034EC5C(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10034F22C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034F270(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10034F2B4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 113);
  return result;
}

void sub_10034F2C8(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

uint64_t sub_10034F308(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 113) = 0;
  return result;
}

void sub_10034F5CC(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034F60C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034F650(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034FAF0(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034FB30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034FB74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034FBB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034FBFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10034FC40(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10034FD70(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_10035018C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003501D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350214(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350258(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350664(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003506A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003506EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350730(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100350964(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(void *)(a1 + 32))
    {
      [*(id *)(a1 + 40) setShouldHidePromisedFileTypes:1];
      id v3 = [*(id *)(a1 + 32) dragOperationForDragInfo:*(void *)(a1 + 40) atUnscaledPoint:*(double *)(a1 + 64) atUnscaledPoint:*(double *)(a1 + 72)];
      [*(id *)(a1 + 40) setShouldHidePromisedFileTypes:0];
      uint64_t v4 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v4 = 0;
      id v3 = 0;
    }
    [*(id *)(a1 + 48) p_updateHighlightStateForDragInfo:*(void *)(a1 + 40) atUnscaledPoint:v3 dragOperation:v4 dragDestination:*(double *)(a1 + 64) *(double *)(a1 + 72)];
    if (v3 != (id)64)
    {
      *(_OWORD *)(*(void *)(a1 + 48) + 56) = *(_OWORD *)(a1 + 64);
      if (qword_101719CF0 != -1) {
        dispatch_once(&qword_101719CF0, &stru_1014F0638);
      }
      uint64_t v5 = off_10166DB68;
      if (os_log_type_enabled((os_log_t)off_10166DB68, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        CGFloat v7 = *(double *)(a1 + 64);
        CGFloat v8 = *(double *)(a1 + 72);
        id v9 = v5;
        v40.double x = v7;
        v40.double y = v8;
        uint64_t v10 = NSStringFromCGPoint(v40);
        *(_DWORD *)buf = 138412546;
        uint64_t v37 = v6;
        __int16 v38 = 2112;
        __int16 v39 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "p_performDragOperationWithDragInfo:onDragDestination: %@ atUnscaledPoint: %@", buf, 0x16u);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8));
      uint64_t v12 = [*(id *)(a1 + 32) repToHighlightForDragInfo:*(void *)(a1 + 40) atUnscaledPoint:*(double *)(a1 + 64) atUnscaledPoint:*(double *)(a1 + 72)];
      if (!*(void *)(a1 + 32) && !*(unsigned char *)(*(void *)(a1 + 48) + 96))
      {
        id v13 = [WeakRetained canvasEditor];
        uint64_t v14 = [v13 repToHighlightForDragInfo:*(void *)(a1 + 40) atUnscaledPoint:*(double *)(a1 + 64) atUnscaledPoint:*(double *)(a1 + 72)];

        uint64_t v12 = (void *)v14;
      }
      double v15 = [v12 info];
      id v16 = v15;
      if (v15
        && [v15 isSelectable]
        && [v12 shouldSelectInfoWhenTargetOfDrag:*(void *)(a1 + 40)]
        && ([WeakRetained currentSelectionPathContainsInfo:v16] & 1) == 0)
      {
        id v17 = [WeakRetained canvasEditor];
        double v18 = [v17 selectionPathWithInfo:v16];

        double v19 = [WeakRetained editorController];
        [v19 setSelectionPath:v18];
      }
      double v20 = *(void **)(a1 + 32);
      if (v20 && !*(void *)(*(void *)(a1 + 48) + 88))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v20 handleDragOperation:v3 withDragInfo:*(void *)(a1 + 40) atUnscaledPoint:*(double *)(a1 + 64) *(double *)(a1 + 72)];
        if (qword_101719CF0 != -1) {
          dispatch_once(&qword_101719CF0, &stru_1014F0658);
        }
        uint64_t v24 = off_10166DB68;
        if (os_log_type_enabled((os_log_t)off_10166DB68, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(a1 + 32);
          int v26 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          *(_DWORD *)buf = 138412546;
          uint64_t v37 = v25;
          __int16 v38 = 1024;
          LODWORD(v39) = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "dragDestination %@ handled drag operation. Success: %i", buf, 0x12u);
        }
      }
      else if (objc_msgSend(*(id *)(a1 + 48), "p_shouldInsertDraggedBoardItems:", *(void *)(a1 + 40)))
      {
        double v21 = *(id **)(a1 + 48);
        if (v21[17])
        {
          [v21[17] commitDragToInsert];
          uint64_t v22 = *(void *)(a1 + 48);
          double v23 = *(void **)(v22 + 136);
          *(void *)(v22 + 136) = 0;

          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
        }
        else
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v21 insertBoardItemsForDragInfo:*(void *)(a1 + 40) atPoint:v12 onRep:*(double *)(a1 + 64) *(double *)(a1 + 72)];
        }
      }
      if (*(void *)(*(void *)(a1 + 48) + 136))
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014F0678);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010A2A00();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014F0698);
        }
        double v27 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106590C(v27);
        }
        double v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLDragAndDropController p_performDragOperationWithDragInfo:onDragDestination:atUnscaledPoint:]_block_invoke");
        double v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropController.m"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v28, v29, 646, 0, "expected nil value for '%{public}s'", "self->_dragToInsertController");

        id v30 = *(void **)(*(void *)(a1 + 48) + 136);
      }
      else
      {
        id v30 = 0;
      }
      [v30 cancelDragToInsert];
      uint64_t v31 = *(void *)(a1 + 48);
      uint64_t v32 = *(void **)(v31 + 136);
      *(void *)(v31 + 136) = 0;

      uint64_t v33 = *(void *)(a1 + 48);
      long long v34 = *(NSObject **)(v33 + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      void block[2] = sub_100350FC0;
      block[3] = &unk_1014CBBB0;
      void block[4] = v33;
      dispatch_async(v34, block);
    }
  }
}

void sub_100350EB8(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_100350EF8(id a1)
{
  id v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_100350F38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350F7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100350FC0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 128) cancel];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = 0;
}

void sub_100351260(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003512A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003512E8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 128) cancel];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = 0;
}

uint64_t sub_100351534(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_100351608;
  block[3] = &unk_1014F0728;
  id v10 = v3;
  long long v11 = &v12;
  void block[4] = v4;
  id v6 = v3;
  dispatch_sync(v5, block);
  uint64_t v7 = *((unsigned __int8 *)v13 + 24);

  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_100351608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 112))
  {
    id v3 = *(void **)(v1 + 120);
    if (v3)
    {
      if ([v3 count])
      {
        uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 120);
        id v8 = [*(id *)(a1 + 40) info];
        if (objc_msgSend(v4, "containsObject:"))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        }
        else
        {
          uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 120);
          id v6 = [*(id *)(a1 + 40) repForSelecting];
          uint64_t v7 = [v6 info];
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 containsObject:v7] ^ 1;
        }
      }
    }
  }
}

void sub_100352078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1003520C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100352104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100352148(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

void sub_100352188(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003521CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100352210(void *a1)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = *(unsigned char *)(a1[4] + 112);
  id v2 = [*(id *)(a1[4] + 120) copy];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100352270(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003522B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003527F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035283C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100352DFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100352E40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003531F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100353220(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = [v3 layoutForInfo:*(void *)(*((void *)&v16 + 1) + 8 * (void)v8) (void)v16];
        id v10 = *(CGRect **)(*(void *)(a1 + 40) + 8);
        long long v11 = [v9 geometryInRoot];
        [v11 frame];
        v21.origin.double x = v12;
        v21.origin.double y = v13;
        v21.size.CGFloat width = v14;
        v21.size.CGFloat height = v15;
        *(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = CGRectUnion(v10[1], v21);

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
}

void sub_100353384(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

id sub_10035377C(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

void sub_100353784(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003537C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035380C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) p_modalOperationPresenter];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100353908;
  v5[3] = &unk_1014F0950;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 80);
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  [v2 continueAsynchronousWorkOnMainThreadUsingBlock:v5];
}

void sub_100353908(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = [*(id *)(a1 + 40) p_modalOperationPresenter];
    [v2 endModalOperationWithToken:*(void *)(a1 + 32)];
  }
  if ([*(id *)(a1 + 48) isCancelled])
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 16);
      v4();
    }
  }
  else
  {
    id v5 = [*(id *)(a1 + 48) boardItems];
    if ([v5 count])
    {
      id v6 = [*(id *)(a1 + 56) canvasEditor];
      if (qword_101719CF0 != -1) {
        dispatch_once(&qword_101719CF0, &stru_1014F0928);
      }
      uint64_t v7 = off_10166DB68;
      if (os_log_type_enabled((os_log_t)off_10166DB68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        long long v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Inserting importable infos %@", buf, 0xCu);
      }
      id v8 = +[CRLInsertionContext dragInsertionContextWithPreferredCenter:required:shouldEndEditing:fromDragToInsertController:insertFloating:targetZOrder:](CRLInsertionContext, "dragInsertionContextWithPreferredCenter:required:shouldEndEditing:fromDragToInsertController:insertFloating:targetZOrder:", 0, 1, 0, 0, *(void *)(*(void *)(a1 + 40) + 104), *(double *)(a1 + 80), *(double *)(a1 + 88));
      [v6 insertBoardItemsFromDragAndDrop:v5 atPoint:*(void *)(a1 + 64) onRep:v8 insertionContext:0 alreadyPositionedInputInfos:*(double *)(a1 + 80)];
    }
    id v9 = [*(id *)(a1 + 48) errors];
    if ([v9 count])
    {
      id v10 = [*(id *)(a1 + 40) p_modalOperationPresenter];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100353BEC;
      v12[3] = &unk_1014D39B8;
      void v12[4] = *(void *)(a1 + 40);
      id v13 = v9;
      id v14 = *(id *)(a1 + 48);
      id v15 = *(id *)(a1 + 72);
      [v10 continueAsynchronousWorkOnMainThreadUsingBlock:v12];
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11) {
        (*(void (**)(void))(v11 + 16))();
      }
    }
  }
}

void sub_100353BAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDragAndDropCat");
  id v2 = off_10166DB68;
  off_10166DB68 = v1;
}

uint64_t sub_100353BEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) p_errorPresenter];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) localizedErrorDescription];
  [v2 presentErrors:v3 withLocalizedDescription:v4 completionHandler:0];

  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

double sub_100353D68(float64x2_t *a1)
{
  return fmin(sub_1000645C8(a1) * 0.002, 0.6);
}

void sub_100354284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003542F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354334(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354378(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003543BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_100354494(void *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  if (result)
  {
    unint64_t v4 = a2 + a3;
    unint64_t v6 = a2;
    if (a2 < a2 + a3)
    {
      id v5 = result + 1;
      do
      {
        uint64_t result = sub_100363E48(v5, (uint64_t *)&v6, &v7);
        ++v6;
      }
      while (v6 < v4);
    }
  }
  return result;
}

void sub_1003544F8(void *a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a3 < 0.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F09F0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A2F94();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F0A10);
      }
      unint64_t v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBezierPathBooleanOperationInputPathMap p_mapBooleanSubpathIndex:toInputBezierPathT:]");
      id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 740, 0, "inputBezierPathT (%f) should be greater than or equal to zero.", *(void *)&a3);
    }
    unint64_t v9 = a1[8];
    id v10 = (double *)a1[7];
    if ((unint64_t)v10 >= v9)
    {
      long long v12 = (double *)a1[6];
      uint64_t v13 = ((char *)v10 - (char *)v12) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_100004E40();
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        long long v17 = (char *)sub_10001EAB0((uint64_t)(a1 + 8), v16);
        long long v12 = (double *)a1[6];
        id v10 = (double *)a1[7];
      }
      else
      {
        long long v17 = 0;
      }
      long long v18 = (double *)&v17[16 * v13];
      long long v19 = &v17[16 * v16];
      *(void *)long long v18 = a2;
      v18[1] = a3;
      uint64_t v11 = v18 + 2;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v18 -= 2;
          v10 -= 2;
        }
        while (v10 != v12);
        long long v12 = (double *)a1[6];
      }
      a1[6] = v18;
      a1[7] = v11;
      a1[8] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)id v10 = a2;
      v10[1] = a3;
      uint64_t v11 = v10 + 2;
    }
    a1[7] = v11;
  }
}

void sub_100354780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003547A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003547EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354830(void *a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a3 < 0.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F0A30);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A30A4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F0A50);
      }
      unint64_t v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBezierPathBooleanOperationInputPathMap p_replaceLastMappingWithBooleanSubpathIndex:mappedToInputBezierPathT:]");
      id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 745, 0, "inputBezierPathT (%f) should be greater than or equal to zero.", *(void *)&a3);
    }
    uint64_t v9 = a1[7];
    if (v9 == a1[6])
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F0A70);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A301C();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F0A90);
      }
      id v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBezierPathBooleanOperationInputPathMap p_replaceLastMappingWithBooleanSubpathIndex:mappedToInputBezierPathT:]");
      long long v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:747 isFatal:0 description:"Unable to replace last point in empty path map."];

      sub_1003544F8(a1, a2, a3);
    }
    else
    {
      *(void *)(v9 - 16) = a2;
      *(double *)(v9 - _Block_object_dispose(&STACK[0x220], 8) = a3;
    }
  }
}

void sub_100354B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100354B64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354BA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354BEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354C30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100354D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10035522C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100355320(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100355364(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1003553A8@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRect v21 = CGRectIntegral(*(CGRect *)&a2);
  CGFloat x = v21.origin.x;
  CGFloat y = v21.origin.y;
  CGFloat width = v21.size.width;
  CGFloat height = v21.size.height;
  double v10 = CGRectGetWidth(v21);
  v22.origin.CGFloat x = x;
  v22.origin.CGFloat y = y;
  v22.size.CGFloat width = width;
  v22.size.CGFloat height = height;
  double v11 = CGRectGetWidth(v22);
  if (v10 >= 0.0) {
    double v12 = v11;
  }
  else {
    double v12 = -v11;
  }
  v23.origin.CGFloat x = x;
  v23.origin.CGFloat y = y;
  v23.size.CGFloat width = width;
  v23.size.CGFloat height = height;
  double v13 = CGRectGetHeight(v23);
  v24.origin.CGFloat x = x;
  v24.origin.CGFloat y = y;
  v24.size.CGFloat width = width;
  v24.size.CGFloat height = height;
  double v14 = CGRectGetHeight(v24);
  if (v13 < 0.0) {
    double v14 = -v14;
  }
  if (v12 <= v14)
  {
    v27.origin.CGFloat x = x;
    v27.origin.CGFloat y = y;
    v27.size.CGFloat width = width;
    v27.size.CGFloat height = height;
    double v15 = CGRectGetHeight(v27);
    v28.origin.CGFloat x = x;
    v28.origin.CGFloat y = y;
    v28.size.CGFloat width = width;
    v28.size.CGFloat height = height;
    double v16 = CGRectGetHeight(v28);
  }
  else
  {
    v25.origin.CGFloat x = x;
    v25.origin.CGFloat y = y;
    v25.size.CGFloat width = width;
    v25.size.CGFloat height = height;
    double v15 = CGRectGetWidth(v25);
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    double v16 = CGRectGetWidth(v26);
  }
  if (v15 < 0.0) {
    double v16 = -v16;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double v17 = 1063256060.0 / v16;
  v29.origin.CGFloat x = x;
  v29.origin.CGFloat y = y;
  v29.size.CGFloat width = width;
  v29.size.CGFloat height = height;
  double v18 = -(v17 * CGRectGetMidX(v29));
  v30.origin.CGFloat x = x;
  v30.origin.CGFloat y = y;
  v30.size.CGFloat width = width;
  v30.size.CGFloat height = height;
  CGFloat MidY = CGRectGetMidY(v30);
  *(double *)a1 = v17;
  double result = -(v17 * MidY);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = v17;
  *(double *)(a1 + 32) = v18;
  *(double *)(a1 + 40) = result;
  return result;
}

unint64_t sub_10035551C(uint64_t *a1, void *a2, _OWORD *a3, int a4, int a5)
{
  id v7 = a2;
  __p = 0;
  v127 = 0;
  double v128 = 0;
  id v121 = v7;
  id v8 = (char *)[v7 elementCount];
  if (!v8)
  {
    uint64_t v112 = *a1;
    uint64_t v111 = a1[1];
    unint64_t v118 = 0x6DB6DB6DB6DB6DB7 * ((v111 - *a1) >> 3);
    CGPoint v125 = CGPointZero;
    goto LABEL_121;
  }
  int v115 = a5;
  uint64_t v9 = 0;
  int64x2_t v122 = vdupq_n_s64(1uLL);
  uint64_t v123 = a1;
  do
  {
    id v10 = [v7 elementAtIndex:v9];
    if (v10)
    {
      if (v10 == (id)1)
      {
        double v11 = v127;
        int64x2_t v12 = v127[-1];
        int64x2_t v13 = vdupq_n_s64(1uLL);
      }
      else
      {
        if (v10 != (id)2) {
          goto LABEL_9;
        }
        double v11 = v127;
        int64x2_t v12 = v127[-1];
        int64x2_t v13 = (int64x2_t)xmmword_101177E70;
      }
      v11[-1] = vaddq_s64(v12, v13);
    }
    else if (v9 + 1 < v8)
    {
      double v14 = v127;
      if (v127 >= v128)
      {
        uint64_t v16 = ((char *)v127 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v16 + 1) >> 60) {
          sub_100004E40();
        }
        unint64_t v17 = ((char *)v128 - (unsigned char *)__p) >> 3;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)((char *)v128 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        long long v19 = (char *)sub_10001EAB0((uint64_t)&v128, v18);
        CGRect v21 = (int64x2_t *)&v19[16 * v16];
        *CGRect v21 = vdupq_n_s64(1uLL);
        double v15 = v21 + 1;
        CGRect v23 = (int64x2_t *)__p;
        CGRect v22 = v127;
        if (v127 != __p)
        {
          do
          {
            v21[-1] = v22[-1];
            --v21;
            --v22;
          }
          while (v22 != v23);
          CGRect v22 = (int64x2_t *)__p;
        }
        __p = v21;
        v127 = v15;
        double v128 = (int64x2_t *)&v19[16 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        int64x2_t *v127 = v122;
        double v15 = v14 + 1;
      }
      v127 = v15;
      a1 = v123;
    }
LABEL_9:
    ++v9;
  }
  while (v9 != v8);
  CGRect v24 = 0;
  uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  CGPoint v125 = CGPointZero;
  *((void *)&v26 + 1) = *(void *)&v125.y;
  unint64_t v118 = v25;
  double v119 = (unint64_t *)(a1 + 2);
  uint64_t v117 = ~v25;
  *(void *)&long long v26 = 67109378;
  long long v114 = v26;
  do
  {
    __src[0] = xmmword_101175160;
    __src[1] = xmmword_101175160;
    __src[2] = xmmword_101175160;
    CGRect v27 = v24 - 1;
    switch((unint64_t)objc_msgSend(v7, "elementAtIndex:associatedPoints:", v24, __src, v114))
    {
      case 0uLL:
        if (v24 + 1 < v8)
        {
          unint64_t v28 = a1[1];
          if (a4 && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v28 - *a1) >> 3) > v118)
          {
            sub_10035B9A0((void **)(v28 - 56), (uint64_t)(v24 - 2));
            unint64_t v28 = a1[1];
          }
          if (v28 >= *v119)
          {
            uint64_t v77 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v28 - *a1) >> 3);
            unint64_t v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) > 0x492492492492492) {
              sub_100004E40();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v119 - *a1) >> 3) > v78) {
              unint64_t v78 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v119 - *a1) >> 3);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v119 - *a1) >> 3)) >= 0x249249249249249) {
              unint64_t v79 = 0x492492492492492;
            }
            else {
              unint64_t v79 = v78;
            }
            *(void *)&v131[24] = v119;
            double v80 = (char *)sub_10001D4D0((uint64_t)v119, v79);
            double v81 = &v80[56 * v77];
            *(void *)buf = v80;
            *(void *)double v131 = v81;
            *(void *)&v131[16] = &v80[56 * v82];
            *((void *)v81 + 6) = 0;
            *(_OWORD *)double v81 = 0u;
            *((_OWORD *)v81 + 1) = 0u;
            *((_OWORD *)v81 + 2) = 0u;
            v81[48] = 1;
            *(void *)&v131[8] = v81 + 56;
            sub_10035BC10(a1, buf);
            uint64_t v29 = a1[1];
            sub_10035BE38((void **)buf);
          }
          else
          {
            *(void *)(v28 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
            *(_OWORD *)(v28 + 16) = 0u;
            *(_OWORD *)(v28 + 32) = 0u;
            *(_OWORD *)unint64_t v28 = 0u;
            *(unsigned char *)(v28 + 4_Block_object_dispose(&STACK[0x220], 8) = 1;
            uint64_t v29 = v28 + 56;
            a1[1] = v28 + 56;
          }
          a1[1] = v29;
          double v83 = (unint64_t *)((char *)__p
                                   + 16 * v117
                                   + 0xDB6DB6DB6DB6DB70 * ((unint64_t)(v29 - *a1) >> 3));
          unint64_t v84 = v83[1];
          sub_1000D7970((void **)(v29 - 56), *v83);
          float64x2_t v85 = (CGPoint **)(v29 - 32);
          sub_1002D8AC8((void **)(v29 - 32), v84);
          CGPoint v125 = (CGPoint)__src[0];
          unint64_t v86 = *(void *)(v29 - 16);
          float64x2_t v87 = *(_OWORD **)(v29 - 24);
          if ((unint64_t)v87 >= v86)
          {
            uint64_t v89 = ((char *)v87 - (char *)*v85) >> 4;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 60) {
              sub_100004E40();
            }
            uint64_t v91 = v86 - (void)*v85;
            if (v91 >> 3 > v90) {
              unint64_t v90 = v91 >> 3;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92) {
              double v93 = (char *)sub_10001EAB0(v29 - 16, v92);
            }
            else {
              double v93 = 0;
            }
            uint64_t v106 = (CGPoint *)&v93[16 * v89];
            *uint64_t v106 = v125;
            double v108 = *(CGPoint **)(v29 - 32);
            int v107 = *(CGPoint **)(v29 - 24);
            id v109 = v106;
            if (v107 != v108)
            {
              do
              {
                v109[-1] = v107[-1];
                --v109;
                --v107;
              }
              while (v107 != v108);
              int v107 = *v85;
            }
            p_CGFloat x = (_OWORD *)&v106[1].x;
            *(void *)(v29 - 32) = v109;
            *(void *)(v29 - 24) = v106 + 1;
            *(void *)(v29 - 16) = &v93[16 * v92];
            if (v107) {
              operator delete(v107);
            }
          }
          else
          {
            *float64x2_t v87 = __src[0];
            p_CGFloat x = v87 + 1;
          }
          *(void *)(v29 - 24) = p_x;
        }
        break;
      case 1uLL:
        uint64_t v36 = a1[1];
        uint64_t v37 = *(void *)(v36 - 56);
        unint64_t v38 = *(void *)(v36 - 48);
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v37) >> 3);
        if (v39 < 2) {
          goto LABEL_50;
        }
        if (*(unsigned char *)(v38 - 16)) {
          goto LABEL_50;
        }
        uint64_t v40 = *(void *)(v36 - 24);
        double v41 = *(double *)(v40 - 32);
        double v42 = *(double *)(v40 - 24);
        double v43 = *(double *)(v40 - 16);
        double v44 = *(double *)(v40 - 8);
        long long v45 = a3[1];
        v124[0] = *a3;
        v124[1] = v45;
        v124[2] = a3[2];
        if (!sub_10035BAF8((double *)v124, v41, v42, v43, v44, *(double *)__src, *((double *)__src + 1)))
        {
LABEL_50:
          unint64_t v51 = *(void *)(v36 - 40);
          double v52 = (char **)(v36 - 32);
          uint64_t v53 = ((uint64_t)(*(void *)(v36 - 24) - *(void *)(v36 - 32)) >> 4) - 1;
          if (v38 >= v51)
          {
            unint64_t v67 = v39 + 1;
            if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_100004E40();
            }
            unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v37) >> 3);
            if (2 * v68 > v67) {
              unint64_t v67 = 2 * v68;
            }
            if (v68 >= 0x555555555555555) {
              unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v69 = v67;
            }
            double v70 = (char *)sub_100046F5C(v36 - 40, v69);
            float64x2_t v72 = &v70[8 * ((uint64_t)(v38 - v37) >> 3)];
            *(void *)float64x2_t v72 = v53;
            v72[8] = 0;
            *((void *)v72 + 2) = v27;
            double v74 = *(char **)(v36 - 56);
            double v73 = *(char **)(v36 - 48);
            uint64_t v75 = v72;
            if (v73 == v74)
            {
              id v7 = v121;
            }
            else
            {
              id v7 = v121;
              do
              {
                long long v76 = *(_OWORD *)(v73 - 24);
                *((void *)v75 - 1) = *((void *)v73 - 1);
                *(_OWORD *)(v75 - 24) = v76;
                v75 -= 24;
                v73 -= 24;
              }
              while (v73 != v74);
              double v73 = *(char **)(v36 - 56);
            }
            uint64_t v54 = v72 + 24;
            *(void *)(v36 - 56) = v75;
            *(void *)(v36 - 4_Block_object_dispose(&STACK[0x220], 8) = v72 + 24;
            *(void *)(v36 - 40) = &v70[24 * v71];
            if (v73) {
              operator delete(v73);
            }
          }
          else
          {
            *(void *)unint64_t v38 = v53;
            *(unsigned char *)(v38 + _Block_object_dispose(&STACK[0x220], 8) = 0;
            uint64_t v54 = (char *)(v38 + 24);
            *(void *)(v38 + 16) = v27;
            id v7 = v121;
          }
          unint64_t v94 = *(void *)(v36 - 16);
          *(void *)(v36 - 4_Block_object_dispose(&STACK[0x220], 8) = v54;
          float64x2_t v95 = *(_OWORD **)(v36 - 24);
          if ((unint64_t)v95 >= v94)
          {
            uint64_t v97 = ((char *)v95 - *v52) >> 4;
            unint64_t v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 60) {
              sub_100004E40();
            }
            uint64_t v99 = v94 - (void)*v52;
            if (v99 >> 3 > v98) {
              unint64_t v98 = v99 >> 3;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v100 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v98;
            }
            if (v100) {
              float64x2_t v101 = (char *)sub_10001EAB0(v36 - 16, v100);
            }
            else {
              float64x2_t v101 = 0;
            }
            CGRect v102 = &v101[16 * v97];
            *(_OWORD *)CGRect v102 = __src[0];
            CGRect v104 = *(char **)(v36 - 32);
            id v103 = *(char **)(v36 - 24);
            float64x2_t v105 = v102;
            if (v103 != v104)
            {
              do
              {
                *((_OWORD *)v105 - 1) = *((_OWORD *)v103 - 1);
                v105 -= 16;
                v103 -= 16;
              }
              while (v103 != v104);
              id v103 = *v52;
            }
            float64x2_t v96 = v102 + 16;
            *(void *)(v36 - 32) = v105;
            *(void *)(v36 - 24) = v102 + 16;
            *(void *)(v36 - 16) = &v101[16 * v100];
            if (v103) {
              operator delete(v103);
            }
          }
          else
          {
            _OWORD *v95 = __src[0];
            float64x2_t v96 = v95 + 1;
          }
          *(void *)(v36 - 24) = v96;
          a1 = v123;
        }
        else
        {
          id v7 = v121;
          if (v115)
          {
            unsigned int v46 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014F0D30);
            }
            double v47 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v46;
              *(_WORD *)double v131 = 2082;
              *(void *)&v131[2] = "NSRange CRLBooleanPath::addPath(CRLBezierPath *const  _Nonnull __strong, const CGAff"
                                    "ineTransform, const BOOL, const BOOL)";
              *(_WORD *)&v131[10] = 2082;
              *(void *)&v131[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBoole"
                                     "anOperationHelper.mm";
              *(_WORD *)&v131[20] = 1024;
              *(_DWORD *)&v131[22] = 621;
              _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We are currently unable to populate an input path map accurately when consuming collinear point(s).", buf, 0x22u);
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014F0D50);
            }
            double v48 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v48, OS_LOG_TYPE_ERROR))
            {
              uint64_t v110 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = v114;
              *(_DWORD *)&uint8_t buf[4] = v46;
              *(_WORD *)double v131 = 2114;
              *(void *)&v131[2] = v110;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v48, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            double v49 = +[NSString stringWithUTF8String:"NSRange CRLBooleanPath::addPath(CRLBezierPath *const  _Nonnull __strong, const CGAffineTransform, const BOOL, const BOOL)"];
            double v50 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
            +[CRLAssertionHandler handleFailureInFunction:v49 file:v50 lineNumber:621 isFatal:0 description:"We are currently unable to populate an input path map accurately when consuming collinear point(s)."];

            unint64_t v38 = *(void *)(v36 - 48);
            uint64_t v40 = *(void *)(v36 - 24);
          }
          *(void *)(v38 - _Block_object_dispose(&STACK[0x220], 8) = v27;
          *(_OWORD *)(v40 - 16) = __src[0];
          a1 = v123;
        }
        break;
      case 2uLL:
        uint64_t v30 = a1[1];
        uint64_t v31 = ((uint64_t)(*(void *)(v30 - 24) - *(void *)(v30 - 32)) >> 4) - 1;
        unint64_t v32 = *(void *)(v30 - 48);
        unint64_t v33 = *(void *)(v30 - 40);
        if (v32 >= v33)
        {
          uint64_t v55 = *(void *)(v30 - 56);
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v55) >> 3);
          unint64_t v57 = v56 + 1;
          if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100004E40();
          }
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v55) >> 3);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x555555555555555) {
            unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v59 = v57;
          }
          double v60 = (char *)sub_100046F5C(v30 - 40, v59);
          double v62 = &v60[24 * v56];
          *(void *)double v62 = v31;
          v62[8] = 1;
          *((void *)v62 + 2) = v27;
          float64x2_t v64 = *(char **)(v30 - 56);
          uint64_t v63 = *(char **)(v30 - 48);
          float64x2_t v65 = v62;
          if (v63 != v64)
          {
            do
            {
              long long v66 = *(_OWORD *)(v63 - 24);
              *((void *)v65 - 1) = *((void *)v63 - 1);
              *(_OWORD *)(v65 - 24) = v66;
              v65 -= 24;
              v63 -= 24;
            }
            while (v63 != v64);
            uint64_t v63 = *(char **)(v30 - 56);
          }
          long long v34 = v62 + 24;
          *(void *)(v30 - 56) = v65;
          *(void *)(v30 - 4_Block_object_dispose(&STACK[0x220], 8) = v62 + 24;
          *(void *)(v30 - 40) = &v60[24 * v61];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *(void *)unint64_t v32 = v31;
          *(unsigned char *)(v32 + _Block_object_dispose(&STACK[0x220], 8) = 1;
          long long v34 = (char *)(v32 + 24);
          *(void *)(v32 + 16) = v27;
        }
        *(void *)(v30 - 4_Block_object_dispose(&STACK[0x220], 8) = v34;
        sub_10035BEB4(v30 - 32, *(void *)(v30 - 24), (char *)__src, (char *)buf, 3);
        a1 = v123;
        break;
      case 3uLL:
        uint64_t v35 = a1[1];
        *(unsigned char *)(v35 - _Block_object_dispose(&STACK[0x220], 8) = 0;
        sub_10035B9A0((void **)(v35 - 56), (uint64_t)(v24 - 1));
        break;
      default:
        break;
    }
    ++v24;
  }
  while (v24 != v8);
  uint64_t v112 = *a1;
  uint64_t v111 = a1[1];
LABEL_121:
  if ((a4 & 1) != 0 && 0x6DB6DB6DB6DB6DB7 * ((v111 - v112) >> 3) > v118) {
    sub_10035B9A0((void **)(v111 - 56), (uint64_t)v8);
  }
  if (__p)
  {
    v127 = (int64x2_t *)__p;
    operator delete(__p);
  }

  return v118;
}

void sub_10035612C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003561E0()
{
}

void sub_100356398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003563AC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  int v10 = 0;
  double v11 = (double *)(a1 + 2);
  int64x2_t v12 = (double *)(a1 + 6);
  int64x2_t v13 = a5 + 2;
  while (1)
  {
    int v14 = *(_DWORD *)v11;
    if ((*(_DWORD *)v11 & 0x80000000) == 0)
    {
      uint64_t v15 = 0;
      double v16 = v11[1];
      while (1)
      {
        if (v14 == LODWORD(a2[v15 + 2]))
        {
          double v17 = *(double *)&a2[v15 + 3];
          if (vabdd_f64(v16, v17) <= 1.0 || v17 == 0.0 || v16 == 0.0) {
            break;
          }
        }
        v15 += 2;
        if (v15 == 4) {
          goto LABEL_11;
        }
      }
      unint64_t v18 = (double *)&v13[2 * v10];
      *(_DWORD *)unint64_t v18 = v14;
      float v19 = v16;
      float v20 = v17;
      v18[1] = sub_10035D0E8(a1, a2, a5, v19, v20);
      if (++v10 > 1u) {
        break;
      }
    }
LABEL_11:
    v11 += 2;
    if (v11 == v12)
    {
      CGRect v21 = (double *)(a3 + 2);
      while (1)
      {
        int v22 = *(_DWORD *)v21;
        if ((*(_DWORD *)v21 & 0x80000000) == 0)
        {
          uint64_t v23 = 0;
          double v24 = v21[1];
          while (1)
          {
            if (v22 == LODWORD(a4[v23 + 2]))
            {
              double v25 = *(double *)&a4[v23 + 3];
              if (vabdd_f64(v24, v25) <= 1.0 || v25 == 0.0 || v24 == 0.0) {
                break;
              }
            }
            v23 += 2;
            if (v23 == 4) {
              goto LABEL_22;
            }
          }
          long long v26 = (double *)&v13[2 * v10];
          *(_DWORD *)long long v26 = v22;
          float v27 = v24;
          float v28 = v25;
          v26[1] = sub_10035D0E8(a3, a4, a5, v27, v28);
          if (++v10 > 1u) {
            return;
          }
        }
LABEL_22:
        v21 += 2;
        if (v21 == (double *)(a3 + 6)) {
          return;
        }
      }
    }
  }
}

uint64_t sub_10035654C(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_10035CB88(a1, a2, a3, a4, v6);
  id v7 = (void **)v6;
  sub_100134888(&v7);
  return v4;
}

void sub_100356598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100134888((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1003565B0(uint64_t *a1, _OWORD *a2, double **a3, char a4, uint64_t a5)
{
  memset(&v73, 0, sizeof(v73));
  long long v8 = a2[1];
  *(_OWORD *)&v72.a = *a2;
  *(_OWORD *)&v72.c = v8;
  *(_OWORD *)&v72.tCGFloat x = a2[2];
  CGAffineTransformInvert(&v73, &v72);
  uint64_t v9 = *a1;
  uint64_t v59 = a1[1];
  if (*a1 != v59)
  {
    do
    {
      double v10 = *(double *)v9;
      uint64_t v11 = *(void *)(v9 + 8) - *(void *)v9;
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        unint64_t v13 = v11 / 0x30uLL;
        if ((uint64_t)(v11 / 0x30uLL) <= 1) {
          unint64_t v13 = 1;
        }
        do
        {
          char v14 = 0;
          uint64_t v15 = *(void *)&v10 + 48 * v12 + 16;
          do
          {
            if (*(_DWORD *)v15 != -1)
            {
              if ((v14 & 1) != 0 || *(double *)(v15 + 8) - (double)(uint64_t)*(double *)(v15 + 8) == 0.0) {
                goto LABEL_13;
              }
              char v14 = 1;
            }
            v15 += 16;
          }
          while (v15 != *(void *)&v10 + 48 + 48 * v12);
          ++v12;
        }
        while (v12 != v13);
      }
      uint64_t v12 = 0;
LABEL_13:
      double v71 = 0.0;
      long long v69 = 0u;
      long long v70 = 0u;
      sub_10035D318((double *)v9, v12, a3, (uint64_t)&v69);
      *(double *)&long long v70 = (double)v12;
      double v68 = 0.0;
      long long v66 = 0u;
      long long v67 = 0u;
      unint64_t v16 = v12;
      if (!v12) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 8) - *(void *)&v10) >> 4);
      }
      sub_10035D318((double *)v9, v16 - 1, a3, (uint64_t)&v66);
      uint64_t v17 = v69;
      if ((void)v69 != -1
        && ((*(_DWORD *)(*(void *)&v10 + 48 * v12 + 16) & 0x80000000) != 0
         || (*(_DWORD *)(*(void *)&v10 + 48 * v12 + 32) & 0x80000000) != 0))
      {
        double v23 = *((double *)&v70 + 1);
        double v21 = sub_100362228((uint64_t *)&(*a3)[7 * v69], *((double *)&v70 + 1));
        double v22 = v24;
      }
      else
      {
        unint64_t v18 = (uint64_t *)(*(void *)&v10 + 48 * v12);
        double v19 = (double)*v18;
        double v20 = (double)v18[1];
        double v21 = v73.tx + v73.c * v20 + v73.a * v19;
        double v22 = v73.ty + v73.d * v20 + v73.b * v19;
        if ((void)v69 == -1)
        {
          uint64_t v49 = 0;
          uint64_t v50 = *(void *)&v10 + 48 * v12 + 16;
          char v51 = 1;
          while (1)
          {
            char v52 = v51;
            uint64_t v17 = *(int *)(v50 + 16 * v49);
            if (v17 != -1) {
              break;
            }
            char v51 = 0;
            uint64_t v49 = 1;
            if ((v52 & 1) == 0)
            {
              uint64_t v17 = -1;
              double v31 = 0.0;
              goto LABEL_25;
            }
          }
          uint64_t v53 = v50 + 16 * v49;
          double v54 = (*a3)[7 * (int)v17];
          double v55 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&(*a3)[7 * (int)v17 + 1] - *(void *)&v54) >> 3));
          double v56 = *(double *)(v53 + 8);
          if (v56 < v55) {
            double v55 = 0.0;
          }
          double v57 = v56 - v55;
          uint64_t v58 = (uint64_t)v57;
          double v29 = v57 - (double)(uint64_t)v57;
          uint64_t v30 = *(void *)&v54 + 24 * v58;
          goto LABEL_24;
        }
        double v23 = *((double *)&v70 + 1);
      }
      double v25 = (*a3)[7 * v17];
      double v26 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&(*a3)[7 * v17 + 1] - *(void *)&v25) >> 3));
      if (v23 < v26) {
        double v26 = 0.0;
      }
      double v27 = v23 - v26;
      uint64_t v28 = (uint64_t)v27;
      double v29 = v27 - (double)(uint64_t)v27;
      uint64_t v30 = *(void *)&v25 + 24 * v28;
LABEL_24:
      double v31 = v29 + (double)*(uint64_t *)(v30 + 16);
LABEL_25:
      sub_100362098(a5, v17, v21, v22, v31);
      if (v11 >= 1)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v11 / 48;
        uint64_t v34 = v33 - 1;
        do
        {
          double v65 = 0.0;
          uint64_t v35 = v12 + v32 + 1;
          long long v63 = 0u;
          long long v64 = 0u;
          sub_10035D318((double *)v9, v35, a3, (uint64_t)&v63);
          *(void *)&long long v64 = v70;
          uint64_t v36 = v35 % v33;
          double v37 = *(double *)v9;
          if ((v63 & 0x8000000000000000) != 0
            || (void)v63 != (void)v69
            || BYTE8(v63) != BYTE8(v69)
            || v34 == v32
            || (int v38 = *(_DWORD *)(*(void *)&v37 + 48 * v36 + 32), (v38 & 0x80000000) == 0)
            && (*(_DWORD *)(*(void *)&v37 + 48 * v36 + 16) != v38
             || *(double *)(*(void *)&v37 + 48 * v36 + 24) != *(double *)(*(void *)&v37 + 48 * v36 + 40)))
          {
            unint64_t v39 = (uint64_t *)(*(void *)&v37 + 48 * v36);
            if (*(double *)&v70 + 1.0 == (double)v35 || (void)v69 == -1)
            {
              if (v34 != v32)
              {
                if ((void)v63 == -1)
                {
                  double v43 = 0.0;
                }
                else
                {
                  double v41 = (*a3)[7 * (void)v63];
                  double v42 = (double)(0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(void *)&(*a3)[7 * v63 + 1] - *(void *)&v41) >> 3));
                  if (*((double *)&v64 + 1) < v42) {
                    double v42 = 0.0;
                  }
                  double v43 = *((double *)&v64 + 1)
                      - v42
                      - (double)(uint64_t)(*((double *)&v64 + 1) - v42)
                      + (double)*(uint64_t *)(*(void *)&v41 + 24 * (uint64_t)(*((double *)&v64 + 1) - v42) + 16);
                }
                float64x2_t v47 = vaddq_f64(*(float64x2_t *)&v73.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v73.c, (double)*(uint64_t *)(*(void *)&v37 + 48 * v36 + 8)), *(float64x2_t *)&v73.a, (double)*v39));
                long long v48 = a2[1];
                v62[0] = *a2;
                v62[1] = v48;
                v62[2] = a2[2];
                sub_100362134(a5, v62, v63, v47.f64[0], v47.f64[1], v43);
              }
            }
            else
            {
              v44.f64[0] = v21;
              double v45 = v22;
              if (v34 != v32)
              {
                float64x2_t v44 = vaddq_f64(*(float64x2_t *)&v73.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v73.c, (double)*(uint64_t *)(*(void *)&v37 + 48 * v36 + 8)), *(float64x2_t *)&v73.a, (double)*v39));
                double v45 = v44.f64[1];
              }
              long long v46 = a2[1];
              v74[0] = *a2;
              v74[1] = v46;
              v74[2] = a2[2];
              sub_100362344((uint64_t *)&(*a3)[7 * v69], v69, BYTE8(v69), v34 == v32, v74, a5, *((double *)&v70 + 1), v68, v44.f64[0], v45);
            }
            *(double *)&long long v64 = (double)v35;
            double v71 = v65;
            long long v69 = v63;
            long long v70 = v64;
          }
          long long v66 = v63;
          long long v67 = v64;
          double v68 = v65;
          ++v32;
        }
        while (v12 + v32 < v12 + v33);
      }
      if ((a4 & 1) == 0) {
        sub_1003621D8(a5);
      }
      v9 += 24;
    }
    while (v9 != v59);
  }
}

id sub_100356B54(void **a1)
{
  sub_10035D070((uint64_t)a1);
  id v2 = *a1;

  return v2;
}

void sub_1003573DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100357554(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100357598(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003575DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100357620(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100357664(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003576A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003576EC(void *a1, int a2, void *a3, uint64_t a4, _OWORD *a5, void *a6)
{
  id v20 = a1;
  id v9 = a3;
  double v23 = a6;
  v30[5] = 0;
  int v31 = 2;
  uint64_t v32 = 0;
  __int16 v33 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  memset(v43, 0, 29);
  v43[29] = 1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  v47[3] = 0;
  __int16 v48 = 1;
  uint64_t v49 = 0;
  v30[4] = &off_1014F0DA8;
  v30[0] = off_1014F1208;
  v30[1] = sub_1003563AC;
  v30[3] = v30;
  sub_10035C810(v47, (uint64_t)v30);
  sub_10036371C(v30);
  LOBYTE(v4_Block_object_dispose(&STACK[0x220], 8) = 1;
  double v10 = [v9 objectAtIndexedSubscript:0];
  id v22 = [v10 windingRule];

  if (a2 && [v20 windingRule] != v22)
  {
    int v11 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0DD0);
    }
    uint64_t v12 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR)) {
      sub_1010A3400();
    }

    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0DF0);
    }
    unint64_t v13 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      char v14 = +[CRLAssertionHandler packedBacktraceString];
      sub_1010A3380(v14, (uint64_t)v29, v11, v13);
    }

    uint64_t v15 = +[NSString stringWithUTF8String:"CRLBezierPath * _Nonnull _performBooleanOperation(CRLBezierPath *const  _Nonnull __strong, const BOOL, NSArray<CRLBezierPath *> *const  _Nonnull __strong, const Clipper2Lib::ClipType, const CGAffineTransform, CRLBezierPathBooleanOperationInputPathMap *const  _Nullable __strong)"];
    unint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:1234 isFatal:0 description:"All input paths must use the same winding rule."];
  }
  memset(v28, 0, 24);
  double v26 = 0;
  __p = 0;
  uint64_t v27 = 0;
  long long v17 = a5[1];
  v24[0] = *a5;
  v24[1] = v17;
  void v24[2] = a5[2];
  unint64_t v18 = sub_10035551C(v28, v20, v24, a2, v23 != 0);
  sub_100354494(v23, v18, v19, 0);
  sub_1003561E0();
}

void sub_100358594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  sub_100411F00((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_100358850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100358868(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0EB0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A351C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0ED0);
    }
    double v24 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    double v25 = +[NSString stringWithUTF8String:"CRLBezierPath * _Nonnull _performLinePathBooleanOperation(const Clipper2Lib::ClipType, CRLBezierPath *const  _Nonnull __strong, CRLBezierPath *const  _Nonnull __strong, CRLBezierPathBooleanOperationInputPathMap *const  _Nullable __strong)"];
    double v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 1402, 0, "invalid nil value for '%{public}s'", "lineSubjectPath");

    if (v8) {
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  if (!v8)
  {
LABEL_23:
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0EF0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A3488();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0F10);
    }
    uint64_t v27 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v28 = +[NSString stringWithUTF8String:"CRLBezierPath * _Nonnull _performLinePathBooleanOperation(const Clipper2Lib::ClipType, CRLBezierPath *const  _Nonnull __strong, CRLBezierPath *const  _Nonnull __strong, CRLBezierPathBooleanOperationInputPathMap *const  _Nullable __strong)"];
    double v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v28, v29, 1403, 0, "invalid nil value for '%{public}s'", "filledClipPath");

LABEL_32:
    double v23 = +[CRLBezierPath bezierPath];
    goto LABEL_34;
  }
  double x = CGRectNull.origin.x;
  CGFloat y = CGRectNull.origin.y;
  CGFloat width = CGRectNull.size.width;
  CGFloat height = CGRectNull.size.height;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  v42[0] = v7;
  v42[1] = v8;
  char v14 = +[NSArray arrayWithObjects:v42 count:2];
  id v15 = [v14 countByEnumeratingWithState:&v34 objects:v43 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v16) {
          objc_enumerationMutation(v14);
        }
        unint64_t v18 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (([v18 isEmpty] & 1) == 0)
        {
          [v18 controlPointBounds];
          v48.origin.double x = v19;
          v48.origin.CGFloat y = v20;
          v48.size.CGFloat width = v21;
          v48.size.CGFloat height = v22;
          v45.origin.double x = x;
          v45.origin.CGFloat y = y;
          v45.size.CGFloat width = width;
          v45.size.CGFloat height = height;
          CGRect v46 = CGRectUnion(v45, v48);
          double x = v46.origin.x;
          CGFloat y = v46.origin.y;
          CGFloat width = v46.size.width;
          CGFloat height = v46.size.height;
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v34 objects:v43 count:16];
    }
    while (v15);
  }

  v47.origin.double x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  if (!CGRectIsNull(v47))
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    double v30 = sub_1003553A8((uint64_t)&v39, x);
    id v38 = v8;
    int v31 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1, v30);
    v33[0] = v39;
    v33[1] = v40;
    v33[2] = v41;
    sub_1003576EC(v7, 0, v31, a1, v33, v9);
  }
  double v23 = +[CRLBezierPath bezierPath];
  [v7 copyPathAttributesTo:v23];
LABEL_34:

  return v23;
}

void sub_100358D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100358ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100359778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100359BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100359C64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100359CA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100359CEC(void *a1, unint64_t a2)
{
  id v21 = a1;
  if ([v21 containsElementsOtherThanMoveAndClose])
  {
    CGFloat v20 = [v21 arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved:1];
    uint64_t v3 = +[NSMutableArray array];
    uint64_t v4 = +[NSMutableArray array];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v5 = v20;
    id v6 = [v5 countByEnumeratingWithState:&v23 objects:v35 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if ([v9 containsClosePathElement]) {
            double v10 = v4;
          }
          else {
            double v10 = v3;
          }
          [v10 addObject:v9];
        }
        id v6 = [v5 countByEnumeratingWithState:&v23 objects:v35 count:16];
      }
      while (v6);
    }

    if (a2 && (unint64_t)[v3 count] >= a2)
    {
      int v11 = +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, a2);
      id v16 = [v3 objectsAtIndexes:v11];
    }
    else
    {
      int v11 = +[CRLBezierPath appendBezierPaths:v4];
      if ([v11 containsElementsOtherThanMoveAndClose])
      {
        CGFloat v19 = v11;
        if (a2 && a2 < (unint64_t)objc_msgSend(v3, "count", v11))
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F1028);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_1010A385C();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F1048);
          }
          uint64_t v12 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
          {
            +[CRLAssertionHandler packedBacktraceString];
            objc_claimAutoreleasedReturnValue();
            sub_1010663B0();
          }

          unint64_t v13 = +[NSString stringWithUTF8String:"NSArray<CRLBezierPath *> * _Nonnull _pathsBySeparatingVisuallyDistinctSubregionsOfPath(CRLBezierPath *const  _Nonnull __strong, const NSUInteger)"];
          char v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
          +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:1557 isFatal:0 description:"closedStopCount should not be greater than stopAfterFoundCount."];
        }
        id v22 = v19;
        [v22 controlPointBounds];
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        sub_1003553A8((uint64_t)&v32, v17);
        memset(v31, 0, sizeof(v31));
        v30[0] = v32;
        v30[1] = v33;
        v30[2] = v34;
        sub_10035551C(v31, v22, v30, 1, 0);
        long long v27 = v32;
        long long v28 = v33;
        long long v29 = v34;
        sub_1003561E0();
      }
      id v16 = v3;
    }
    id v15 = v16;
  }
  else
  {
    id v15 = &__NSArray0__struct;
  }

  return v15;
}

void sub_10035A3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10035A544(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035A588(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035A79C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10035A7E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035A824(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10035B808(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B84C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B890(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B8D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B918(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B95C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035B9A0(void **a1, uint64_t a2)
{
  id v2 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = v3 - (unsigned char *)*a1;
  if (v3 != *a1)
  {
    id v6 = (double *)a1[3];
    uint64_t v7 = (double *)a1[4];
    uint64_t v8 = (((char *)v7 - (char *)v6) >> 4) - 1;
    if (*((void *)v3 - 3) != v8 && (*(v7 - 2) != *v6 || *(v7 - 1) != v6[1]))
    {
      uint64_t v11 = (uint64_t)(a1 + 2);
      uint64_t v12 = (char *)a1[2];
      if (v3 >= v12)
      {
        uint64_t v14 = v4 / 24;
        unint64_t v15 = v4 / 24 + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004E40();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v2) >> 3);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v15;
        }
        unint64_t v18 = (char *)sub_100046F5C(v11, v17);
        CGFloat v19 = &v18[24 * v14];
        id v21 = &v18[24 * v20];
        *(void *)CGFloat v19 = v8;
        v19[8] = 0;
        *((void *)v19 + 2) = a2;
        unint64_t v13 = v19 + 24;
        long long v23 = (char *)*a1;
        id v22 = (char *)a1[1];
        if (v22 != *a1)
        {
          do
          {
            long long v24 = *(_OWORD *)(v22 - 24);
            *((void *)v19 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v19 - 24) = v24;
            v19 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          id v22 = (char *)*a1;
        }
        *a1 = v19;
        a1[1] = v13;
        a1[2] = v21;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(void *)uint64_t v3 = v8;
        v3[8] = 0;
        unint64_t v13 = v3 + 24;
        *((void *)v3 + 2) = a2;
      }
      a1[1] = v13;
    }
  }
}

BOOL sub_10035BAF8(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7 = a1[1];
  double v8 = a1[2];
  double v9 = a1[3];
  double v10 = a1[4];
  double v11 = a1[5];
  double v12 = v10 + a3 * v8 + *a1 * a2;
  double v13 = v11 + a3 * v9 + v7 * a2;
  double v14 = v10 + a5 * v8 + *a1 * a4;
  return ((uint64_t)v13 - (uint64_t)(v11 + a5 * v9 + v7 * a4)) * ((uint64_t)v14 - (uint64_t)(v10 + a7 * v8 + *a1 * a6)) == ((uint64_t)(v11 + a5 * v9 + v7 * a4) - (uint64_t)(v11 + a7 * v9 + v7 * a6)) * ((uint64_t)v12 - (uint64_t)v14);
}

void sub_10035BB88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035BBCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10035BC10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10035BC88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10035BC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 4_Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(v7 - 40) = 0;
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 40) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + _Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 16) = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(unsigned char *)(v7 - _Block_object_dispose(&STACK[0x220], 8) = *(unsigned char *)(a3 + 48);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10035BD54((uint64_t)v11);
  return v9;
}

uint64_t sub_10035BD54(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10035BD8C((uint64_t *)a1);
  }
  return a1;
}

void sub_10035BD8C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10035BDE0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void sub_10035BDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v4;
    operator delete(v4);
  }
}

void **sub_10035BE38(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10035BE6C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_10035BDE0(v4, i - 56);
  }
}

char *sub_10035BEB4(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      sub_100004E40();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)sub_10001EAB0(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    long long v28 = &v18[16 * v15];
    __p = v18;
    long long v34 = v28;
    long long v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    double v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)long long v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = (char *)sub_10001EC38((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    id v21 = &__src[16 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    long long v24 = &v5[16 * a5];
    long long v25 = &v23[-16 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)long long v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  id v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_10035C08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035C0C4(uint64_t *a1, __int32 a2, float64x2_t *a3, char **a4, char a5)
{
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v10 = 0;
    uint64_t v68 = (uint64_t)(a4 + 2);
    do
    {
      if (!v10)
      {
        int64x2_t v11 = vcvtq_s64_f64(vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], *(double *)(a1[3] + 8)), *a3, *(double *)a1[3])));
        unint64_t v12 = (int64x2_t *)a4[1];
        unint64_t v13 = (unint64_t)a4[2];
        if ((unint64_t)v12 >= v13)
        {
          int64x2_t v66 = v11;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - *a4) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            sub_100004E40();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)*a4) >> 4);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x555555555555555;
          }
          else {
            unint64_t v18 = v16;
          }
          uint64_t v19 = (char *)sub_100134B88(v68, v18);
          id v21 = &v19[48 * v15];
          *(int64x2_t *)id v21 = v66;
          *((_DWORD *)v21 + 4) = a2;
          *((_DWORD *)v21 + 5) = 0;
          *((void *)v21 + 3) = 0;
          *((void *)v21 + 4) = 0xFFFFFFFFLL;
          *((void *)v21 + 5) = 0xBFF0000000000000;
          long long v23 = *a4;
          int64_t v22 = a4[1];
          long long v24 = v21;
          if (v22 != *a4)
          {
            do
            {
              long long v25 = *((_OWORD *)v22 - 3);
              long long v26 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v26;
              *((_OWORD *)v24 - 3) = v25;
              v24 -= 48;
              v22 -= 48;
            }
            while (v22 != v23);
            int64_t v22 = *a4;
          }
          unint64_t v14 = (int64x2_t *)(v21 + 48);
          *a4 = v24;
          a4[1] = v21 + 48;
          a4[2] = &v19[48 * v20];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *unint64_t v12 = v11;
          v12[1].i32[0] = a2;
          v12[1].i32[1] = 0;
          v12[1].i64[1] = 0;
          v12[2].i64[0] = 0xFFFFFFFFLL;
          unint64_t v14 = v12 + 3;
          v12[2].i64[1] = 0xBFF0000000000000;
        }
        a4[1] = (char *)v14;
        uint64_t v6 = *a1;
      }
      uint64_t v27 = v6 + 24 * v10;
      if (*(unsigned char *)(v27 + 8))
      {
        v74[0] = 0;
        v74[1] = v74;
        v74[2] = 0x5012000000;
        v74[3] = sub_10035C630;
        long long v74[4] = nullsub_39;
        v74[5] = "";
        uint64_t v77 = 0;
        int v79 = 0;
        int v76 = 0;
        __int32 v75 = a2;
        int v78 = -1;
        unint64_t v80 = 0xBFF0000000000000;
        uint64_t v28 = a1[3] + 16 * *(void *)v27;
        double v30 = *(double *)(v28 + 8);
        double v31 = *(double *)(v28 + 16);
        double v32 = *(double *)(v28 + 24);
        double v33 = *(double *)(v28 + 32);
        double v34 = *(double *)(v28 + 40);
        uint64_t v36 = *(void *)(v28 + 48);
        uint64_t v35 = *(void *)(v28 + 56);
        v81.f64[0] = *(float64_t *)v28;
        double v29 = v81.f64[0];
        v81.f64[1] = v30;
        double v82 = v31;
        double v83 = v32;
        double v84 = v33;
        double v85 = v34;
        uint64_t v86 = v36;
        uint64_t v87 = v35;
        float64_t v37 = sub_1000645C8(&v81);
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472;
        v69[2] = sub_10035C640;
        v69[3] = &unk_1014F0D78;
        v69[4] = v74;
        v69[5] = v10;
        float64x2_t v38 = a3[1];
        float64x2_t v70 = *a3;
        float64x2_t v71 = v38;
        float64x2_t v72 = a3[2];
        CGAffineTransform v73 = a4;
        +[CRLBezierPath subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:addLineBlock:](CRLBezierPath, "subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:addLineBlock:", v69, fmin(v37 * 0.002, 0.6), v29, v30, v31, v32, v33, v34, v36, v35);
        _Block_object_dispose(v74, 8);
        ++v10;
      }
      else
      {
        double v39 = (double)++v10;
        uint64_t v40 = a1[3];
        int64x2_t v41 = vcvtq_s64_f64(vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], *(double *)(v40 + 16 * ((*(void *)v27 + 1) % (unint64_t)((a1[4] - v40) >> 4)) + 8)), *a3, *(double *)(v40 + 16 * ((*(void *)v27 + 1) % (unint64_t)((a1[4] - v40) >> 4))))));
        unint64_t v42 = (unint64_t)a4[1];
        unint64_t v43 = (unint64_t)a4[2];
        if (v42 >= v43)
        {
          int64x2_t v67 = v41;
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)*a4) >> 4);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0x555555555555555) {
            sub_100004E40();
          }
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)*a4) >> 4);
          if (2 * v47 > v46) {
            unint64_t v46 = 2 * v47;
          }
          if (v47 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v48 = 0x555555555555555;
          }
          else {
            unint64_t v48 = v46;
          }
          uint64_t v49 = (char *)sub_100134B88(v68, v48);
          char v51 = &v49[48 * v45];
          *(int64x2_t *)char v51 = v67;
          *((_DWORD *)v51 + 4) = a2;
          *((_DWORD *)v51 + 5) = 0;
          *((double *)v51 + 3) = v39;
          *((void *)v51 + 4) = 0xFFFFFFFFLL;
          *((void *)v51 + 5) = 0xBFF0000000000000;
          uint64_t v53 = *a4;
          char v52 = a4[1];
          double v54 = v51;
          if (v52 != *a4)
          {
            do
            {
              long long v55 = *((_OWORD *)v52 - 3);
              long long v56 = *((_OWORD *)v52 - 1);
              *((_OWORD *)v54 - 2) = *((_OWORD *)v52 - 2);
              *((_OWORD *)v54 - 1) = v56;
              *((_OWORD *)v54 - 3) = v55;
              v54 -= 48;
              v52 -= 48;
            }
            while (v52 != v53);
            char v52 = *a4;
          }
          uint64_t v44 = v51 + 48;
          *a4 = v54;
          a4[1] = v51 + 48;
          a4[2] = &v49[48 * v50];
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(int64x2_t *)unint64_t v42 = v41;
          *(_DWORD *)(v42 + 16) = a2;
          *(_DWORD *)(v42 + 20) = 0;
          *(double *)(v42 + 24) = v39;
          *(void *)(v42 + 32) = 0xFFFFFFFFLL;
          uint64_t v44 = (char *)(v42 + 48);
          *(void *)(v42 + 40) = 0xBFF0000000000000;
        }
        a4[1] = v44;
      }
      uint64_t v6 = *a1;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
  if (a5)
  {
    uint64_t v58 = *a4;
    double v57 = a4[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v57 - *a4) >> 4) >= 2)
    {
      uint64_t v60 = *((void *)v57 - 6);
      uint64_t v61 = *((void *)v57 - 5);
      uint64_t v59 = v57 - 48;
      uint64_t v63 = *(void *)v58;
      uint64_t v62 = *((void *)v58 + 1);
      if (v60 == v63 && v61 == v62) {
        a4[1] = v59;
      }
    }
  }
}

void sub_10035C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

__n128 sub_10035C630(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_10035C640(uint64_t a1, double a2, double a3, double a4)
{
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = (double)*(unint64_t *)(a1 + 40) + a4;
  uint64_t v4 = *(void ***)(a1 + 96);
  int64x2_t v5 = vcvtq_s64_f64(vaddq_f64(*(float64x2_t *)(a1 + 80), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 64), a3), *(float64x2_t *)(a1 + 48), a2)));
  uint64_t v6 = (int64x2_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  uint64_t v7 = (int64x2_t *)v4[1];
  unint64_t v8 = (unint64_t)v4[2];
  if ((unint64_t)v7 >= v8)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*v4) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v4) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      int64x2_t v25 = v5;
      unint64_t v16 = (char *)sub_100134B88((uint64_t)(v4 + 2), v15);
      int64x2_t v5 = v25;
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v17 = (int64x2_t *)&v16[48 * v12];
    unint64_t v18 = &v16[48 * v15];
    int64x2_t v20 = *v6;
    int64x2_t v19 = v6[1];
    *unint64_t v17 = v5;
    v17[1] = v20;
    _OWORD v17[2] = v19;
    int64x2_t v11 = v17 + 3;
    int64_t v22 = (int64x2_t *)*v4;
    id v21 = (int64x2_t *)v4[1];
    if (v21 != *v4)
    {
      do
      {
        int64x2_t v23 = v21[-3];
        int64x2_t v24 = v21[-1];
        v17[-2] = v21[-2];
        v17[-1] = v24;
        v17[-3] = v23;
        v17 -= 3;
        v21 -= 3;
      }
      while (v21 != v22);
      id v21 = (int64x2_t *)*v4;
    }
    void *v4 = v17;
    v4[1] = v11;
    void v4[2] = v18;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    int64x2_t v10 = *v6;
    int64x2_t v9 = *(int64x2_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 64);
    int64x2_t *v7 = v5;
    v7[1] = v10;
    v7[2] = v9;
    int64x2_t v11 = v7 + 3;
  }
  v4[1] = v11;
}

void sub_10035C7D8(uint64_t a1)
{
  sub_100411F00(a1);

  operator delete();
}

void *sub_10035C810(void *a1, uint64_t a2)
{
  sub_10035C884((uint64_t)v4, a2);
  sub_10035C91C(v4, a1);
  sub_10036371C(v4);
  return a1;
}

uint64_t sub_10035C884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10035C91C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int64x2_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10035CB7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000C318(a1);
}

uint64_t sub_10035CB88(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  if (sub_100414C80(a1, a2, a3, 0)) {
    sub_100417D18(a1, a4, a5);
  }
  sub_10041201C((void *)a1);
  return *(unsigned __int8 *)(a1 + 221);
}

uint64_t sub_10035CC0C(uint64_t a1)
{
  *(void *)a1 = +[CRLBezierPath bezierPath];
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101175160;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = -1;
  *(void *)(a1 + 56) = 0;
  sub_10035CCA0((uint64_t)v3, 0);

  return a1;
}

void sub_10035CC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035CCA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = +[CRLBezierPath bezierPath];
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101175160;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = -1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v3;
  *(void *)(a1 + 16) = -1;
  return a1;
}

void sub_10035CD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10035CD10(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10001D608(result, a4);
    __n128 result = (void *)sub_10035CD98((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10035CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x220], 8) = v10;
  sub_10035CFD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10035CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10035CE44(a1, v4, v6);
      v6 += 56;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10035CF4C((uint64_t)v9);
  return v4;
}

void sub_10035CE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10035CE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10035CED0((void *)a2, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  __n128 result = sub_100174154((void *)(a2 + 24), *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
  *(unsigned char *)(a2 + 4_Block_object_dispose(&STACK[0x220], 8) = *(unsigned char *)(a3 + 48);
  return result;
}

void sub_10035CEB4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10035CED0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1000841A0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10035CF30(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035CF4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10035CF84((uint64_t *)a1);
  }
  return a1;
}

void sub_10035CF84(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 56;
      sub_10035BDE0(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10035CFD8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_10035BDE0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10035D070(uint64_t a1)
{
  double v3 = *(double *)(a1 + 32);
  double v4 = *(double *)(a1 + 40);
  uint64_t v2 = (_OWORD *)(a1 + 32);
  if (!sub_100065BF8(v3, v4))
  {
    [*(id *)a1 lineToPoint:v3, v4];
    sub_1003544F8(*(void **)(a1 + 8), *(void *)(a1 + 48), *(double *)(a1 + 56));
    _OWORD *v2 = xmmword_101175160;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = -1;
    *(void *)(a1 + 56) = 0;
  }
}

float sub_10035D0E8(void *a1, void *a2, void *a3, float a4, float a5)
{
  float v5 = vabds_f32(a4, a5);
  float v6 = (float)((uint64_t)a4 + 1);
  if (a5 != 0.0) {
    float v6 = a5;
  }
  float v7 = (float)((uint64_t)a5 + 1);
  if (a4 == 0.0) {
    float v6 = a5;
  }
  else {
    float v7 = a4;
  }
  if (v5 > 1.0)
  {
    a5 = v6;
    a4 = v7;
  }
  uint64_t v8 = a1[1];
  double v9 = (double)((*a3 - *a1) * (*a2 - *a1) + (a3[1] - v8) * (a2[1] - v8))
     / (double)((*a2 - *a1) * (*a2 - *a1) + (a2[1] - v8) * (a2[1] - v8));
  return v9 * a5 + a4 * (1.0 - v9);
}

void sub_10035D180(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035D1C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035D208(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035D24C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10035D290(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  if (sub_100414C80(a1, a2, a3, 1))
  {
    sub_1001348DC(a5);
    (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
    sub_100418100(a1, a4, a5);
  }
  sub_10041201C((void *)a1);
  return *(unsigned __int8 *)(a1 + 221);
}

double *sub_10035D318@<X0>(double *result@<X0>, uint64_t a2@<X1>, double **a3@<X2>, uint64_t a4@<X8>)
{
  double v4 = *result;
  int64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)result + 1) - *(void *)result) >> 4);
  v39[0] = 0;
  long long v40 = 0u;
  v41[0] = 0;
  long long v42 = 0u;
  uint64_t v43 = 0;
  long long v45 = 0u;
  uint64_t v46 = 0;
  long long v38 = 0u;
  uint64_t v6 = *(void *)&v4 + 48 * (a2 % v5);
  uint64_t v37 = -1;
  v39[1] = -1;
  v41[1] = -1;
  uint64_t v44 = -1;
  float v7 = (double *)(v6 + 16);
  uint64_t v8 = (int *)(v6 + 48);
  if (v6 + 16 == v6 + 48)
  {
    *(_OWORD *)(a4 + 24) = 0uLL;
    *(_OWORD *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = 0uLL;
    *(void *)a4 = -1;
    return result;
  }
  uint64_t v9 = 0;
  char v10 = (double *)v39;
  uint64_t v11 = (double *)&v38 + 1;
  uint64_t v12 = *(void *)&v4 + 48 * ((a2 + 1) % v5);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = v12 + 48;
  __n128 result = *a3;
  do
  {
    uint64_t v15 = *(int *)v7;
    if (v15 != -1 && v13 != v14)
    {
      double v17 = v7[1];
      for (uint64_t i = v13; i != v14; i += 16)
      {
        if (v15 == *(_DWORD *)i)
        {
          double v19 = *(double *)(i + 8);
          if (v17 == v19) {
            break;
          }
          if (vabdd_f64(v17, v19) <= 1.0)
          {
            int64x2_t v24 = &v37 + 4 * v9;
            *int64x2_t v24 = v15;
            *((unsigned char *)v24 + _Block_object_dispose(&STACK[0x220], 8) = v19 > v17;
            *((double *)v24 + 2) = v17;
          }
          else
          {
            double v20 = (double)(0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(*(void *)&result[7 * (int)v15 + 1] - *(void *)&result[7 * (int)v15]) >> 3));
            if (v20 - v19 <= 1.0 && v17 < 1.0)
            {
              int64x2_t v25 = &v37 + 4 * v9;
              *int64x2_t v25 = v15;
              *((unsigned char *)v25 + _Block_object_dispose(&STACK[0x220], 8) = 0;
              *((double *)v25 + 2) = v17 + v20;
            }
            else
            {
              if (v20 - v17 > 1.0 || v19 >= 1.0) {
                continue;
              }
              int64x2_t v23 = &v37 + 4 * v9;
              *int64x2_t v23 = v15;
              *((unsigned char *)v23 + _Block_object_dispose(&STACK[0x220], 8) = 1;
              *((double *)v23 + 2) = v17;
              double v19 = v19 + v20;
            }
          }
          *(double *)&v39[4 * v9++] = v19;
        }
      }
    }
    v7 += 2;
  }
  while (v7 != (double *)v8);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = 0u;
  *(void *)a4 = -1;
  if (v9 > 0)
  {
    long long v26 = &v37;
    if (v9 != 1)
    {
      uint64_t v27 = (double *)v41;
      uint64_t v28 = 32 * v9 - 32;
      double v29 = (double *)&v38 + 1;
      double v30 = (double *)v39;
      double v31 = (double *)&v38 + 1;
      __n128 result = (double *)v39;
      double v32 = (double *)v41;
      do
      {
        double v33 = *v32;
        v32 += 4;
        double v34 = vabdd_f64(*(v27 - 1), v33);
        double v35 = vabdd_f64(*v11, *v10);
        if (v34 >= v35)
        {
          char v10 = v30;
        }
        else
        {
          long long v26 = (uint64_t *)(v27 - 3);
          char v10 = v27;
        }
        if (v34 >= v35) {
          double v30 = result;
        }
        else {
          double v30 = v27;
        }
        __n128 result = (double *)(v26 + 3);
        if (v34 >= v35) {
          uint64_t v11 = v29;
        }
        else {
          uint64_t v11 = v27 - 1;
        }
        if (v34 >= v35) {
          double v29 = v31;
        }
        else {
          double v29 = v27 - 1;
        }
        double v31 = (double *)(v26 + 2);
        uint64_t v27 = v32;
        v28 -= 32;
      }
      while (v28);
    }
    *(void *)a4 = *v26;
    *(unsigned char *)(a4 + _Block_object_dispose(&STACK[0x220], 8) = *((unsigned char *)v26 + 8);
    double v36 = *v10;
    *(double *)(a4 + 24) = *v11;
    *(double *)(a4 + 32) = v36;
  }
  return result;
}

void sub_10035D5A4(void *a1)
{
  sub_10035FA94(a1);

  operator delete();
}

void sub_10035D5DC()
{
}

void sub_10035D73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10035D94C((void **)va);
  _Unwind_Resume(a1);
}

void sub_10035D780(uint64_t a1)
{
}

uint64_t sub_10035D78C(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
}

uint64_t sub_10035D79C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10035D814((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10035D814(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10035D8AC((uint64_t)v13);
  return v11;
}

uint64_t sub_10035D8AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10035D8E4((void *)a1);
  }
  return a1;
}

void *sub_10035D8E4(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_10035D94C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_10035D984(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    double v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - _Block_object_dispose(&STACK[0x220], 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

char *sub_10035D9F8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_100134B34(v7, v12);
    char v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void sub_10035DB34(uint64_t *a1, unint64_t a2)
{
  double v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_10035DBE4(a1, v5);
  }
}

void sub_10035DBE4(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_100004E40();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10002B494(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[8 * v10];
    size_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    sub_10035D79C(a1, &v14);
    sub_10035D94C(&v14);
  }
}

void sub_10035DCD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10035D94C((void **)va);
  _Unwind_Resume(a1);
}

void *sub_10035DCE8(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001EBF4(a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10035DD50(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10035DD6C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v39 = v9;
    if (v18) {
      double v19 = (char *)sub_100134B88(v9, v18);
    }
    else {
      double v19 = 0;
    }
    double v29 = &v19[48 * v15];
    __p = v19;
    double v36 = v29;
    long long v38 = &v19[48 * v18];
    double v30 = &v29[48 * a5];
    uint64_t v31 = 48 * a5;
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v29 + 2) = v33;
      *(_OWORD *)double v29 = v32;
      v29 += 48;
      v7 += 48;
      v31 -= 48;
    }
    while (v31);
    uint64_t v37 = v30;
    uint64_t v5 = (char *)sub_10035E008((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      uint64_t v37 = &v36[(v37 - v36 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    id v21 = &__src[48 * a5];
    int64x2_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int64x2_t v24 = &v5[48 * a5];
    int64x2_t v25 = &v23[-48 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)long long v26 = v27;
        v26 += 48;
        v25 += 48;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v26;
    if (v23 != v24) {
      memmove(&v5[48 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  id v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  }
  int64x2_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_10035DFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10035E008(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 3);
      long long v11 = *((_OWORD *)v8 - 1);
      uint64_t v7 = (void *)(v9 - 48);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v11;
      *(_OWORD *)(v9 - 4_Block_object_dispose(&STACK[0x220], 8) = v10;
      v8 -= 48;
      v9 -= 48;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v7;
  unint64_t v12 = a1[1];
  uint64_t v13 = *(void *)(a2 + 16);
  int64_t v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v13 + v14;
  unint64_t v15 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = v15;
  unint64_t v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v16;
  uint64_t v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v17;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_10035E0E8(uint64_t **a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t **)v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v150 = *(uint64_t **)(a2 - 16);
                unint64_t v149 = a2 - 16;
                double v151 = *(uint64_t **)v10;
                uint64_t v152 = *v150;
                int v153 = *(_DWORD *)(*v150 + 16);
                int v154 = *(_DWORD *)(*v150 + 32);
                if (v153 >= v154) {
                  int v155 = v154;
                }
                else {
                  int v155 = v153;
                }
                uint64_t v156 = *v151;
                int v157 = *(_DWORD *)(*v151 + 16);
                int v158 = *(_DWORD *)(*v151 + 32);
                if (v157 >= v158) {
                  int v159 = *(_DWORD *)(*v151 + 32);
                }
                else {
                  int v159 = *(_DWORD *)(*v151 + 16);
                }
                if (v155 < v159) {
                  goto LABEL_215;
                }
                id v160 = (double *)(v156 + 24);
                uint64_t v161 = v152 + 40;
                uint64_t v162 = v152 + 24;
                CGFloat v163 = (double *)(v156 + 40);
                if (v157 < v158) {
                  CGFloat v163 = v160;
                }
                CGFloat v164 = (double *)(v153 >= v154 ? v161 : v162);
                if (v155 == v159 && *v164 < *v163)
                {
LABEL_215:
                  long long v379 = *(_OWORD *)v10;
                  uint64_t v166 = *(void *)v149;
                  *(_WORD *)(v10 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v149 + 8);
                  *(void *)unint64_t v10 = v166;
                  *(_WORD *)(v149 + _Block_object_dispose(&STACK[0x220], 8) = WORD4(v379);
                  *(void *)unint64_t v149 = v379;
                }
                break;
              case 3uLL:
                sub_10035F2F4((uint64_t **)v10, (uint64_t **)(v10 + 16), (uint64_t **)(a2 - 16));
                break;
              case 4uLL:
                sub_10035F894((uint64_t **)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (uint64_t **)(a2 - 16));
                break;
              case 5uLL:
                sub_10035F050((uint64_t **)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (uint64_t **)(v10 + 48), (uint64_t **)(a2 - 16));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            unint64_t v167 = v10 + 16;
            BOOL v169 = v10 == a2 || v167 == a2;
            if (a4)
            {
              if (!v169)
              {
                uint64_t v170 = 0;
                unint64_t v171 = v10;
                do
                {
                  unint64_t v172 = v167;
                  id v173 = *(uint64_t **)(v171 + 16);
                  uint64_t v174 = *(uint64_t **)v171;
                  uint64_t v175 = *v173;
                  int v176 = *(_DWORD *)(*v173 + 16);
                  int v177 = *(_DWORD *)(*v173 + 32);
                  if (v176 >= v177) {
                    int v178 = *(_DWORD *)(*v173 + 32);
                  }
                  else {
                    int v178 = *(_DWORD *)(*v173 + 16);
                  }
                  uint64_t v179 = *v174;
                  int v180 = *(_DWORD *)(*v174 + 16);
                  int v181 = *(_DWORD *)(*v174 + 32);
                  if (v180 >= v181) {
                    int v182 = *(_DWORD *)(*v174 + 32);
                  }
                  else {
                    int v182 = *(_DWORD *)(*v174 + 16);
                  }
                  if (v178 < v182) {
                    goto LABEL_251;
                  }
                  uint64_t v183 = (double *)(v179 + 24);
                  uint64_t v184 = v175 + 40;
                  uint64_t v185 = v175 + 24;
                  uint64_t v186 = (double *)(v179 + 40);
                  if (v180 < v181) {
                    uint64_t v186 = v183;
                  }
                  uint64_t v187 = (double *)(v176 >= v177 ? v184 : v185);
                  if (v178 == v182 && *v187 < *v186)
                  {
LABEL_251:
                    __int16 v189 = *(_WORD *)(v171 + 24);
                    *(void *)unint64_t v172 = *(void *)v171;
                    *(_WORD *)(v172 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v171 + 8);
                    unint64_t v190 = v10;
                    if (v171 != v10)
                    {
                      uint64_t v191 = v170;
                      do
                      {
                        uint64_t v192 = v10 + v191;
                        double v193 = *(uint64_t **)(v10 + v191 - 16);
                        uint64_t v194 = *v173;
                        int v195 = *(_DWORD *)(*v173 + 16);
                        int v196 = *(_DWORD *)(*v173 + 32);
                        if (v195 >= v196) {
                          int v197 = *(_DWORD *)(*v173 + 32);
                        }
                        else {
                          int v197 = *(_DWORD *)(*v173 + 16);
                        }
                        uint64_t v198 = *v193;
                        int v199 = *(_DWORD *)(*v193 + 16);
                        int v200 = *(_DWORD *)(*v193 + 32);
                        if (v199 >= v200) {
                          int v201 = *(_DWORD *)(*v193 + 32);
                        }
                        else {
                          int v201 = *(_DWORD *)(*v193 + 16);
                        }
                        if (v197 >= v201)
                        {
                          uint64_t v202 = (double *)(v198 + 24);
                          uint64_t v203 = v194 + 40;
                          uint64_t v204 = v194 + 24;
                          v205 = (double *)(v198 + 40);
                          if (v199 < v200) {
                            v205 = v202;
                          }
                          uint64_t v206 = (double *)(v195 >= v196 ? v203 : v204);
                          if (v197 != v201 || *v206 >= *v205)
                          {
                            unint64_t v190 = v10 + v191;
                            goto LABEL_272;
                          }
                        }
                        *(void *)uint64_t v192 = *(void *)(v10 + v191 - 16);
                        *(_WORD *)(v192 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v10 + v191 - 8);
                        v191 -= 16;
                      }
                      while (v191);
                      unint64_t v190 = v10;
                    }
LABEL_272:
                    *(void *)unint64_t v190 = v173;
                    *(_WORD *)(v190 + _Block_object_dispose(&STACK[0x220], 8) = v189;
                  }
                  unint64_t v167 = v172 + 16;
                  v170 += 16;
                  unint64_t v171 = v172;
                }
                while (v172 + 16 != a2);
              }
            }
            else if (!v169)
            {
              do
              {
                v340 = (uint64_t **)v167;
                v341 = a1[2];
                v342 = *a1;
                uint64_t v343 = *v341;
                int v344 = *(_DWORD *)(*v341 + 16);
                int v345 = *(_DWORD *)(*v341 + 32);
                if (v344 >= v345) {
                  int v346 = *(_DWORD *)(*v341 + 32);
                }
                else {
                  int v346 = *(_DWORD *)(*v341 + 16);
                }
                uint64_t v347 = *v342;
                int v348 = *(_DWORD *)(*v342 + 16);
                int v349 = *(_DWORD *)(*v342 + 32);
                if (v348 >= v349) {
                  int v350 = *(_DWORD *)(*v342 + 32);
                }
                else {
                  int v350 = *(_DWORD *)(*v342 + 16);
                }
                if (v346 < v350) {
                  goto LABEL_437;
                }
                v351 = (double *)(v347 + 24);
                uint64_t v352 = v343 + 40;
                uint64_t v353 = v343 + 24;
                v354 = (double *)(v347 + 40);
                if (v348 < v349) {
                  v354 = v351;
                }
                v355 = (double *)(v344 >= v345 ? v352 : v353);
                if (v346 == v350 && *v355 < *v354)
                {
LABEL_437:
                  v357 = a1[3];
                  do
                  {
                    do
                    {
                      v358 = a1;
                      a1[2] = *a1;
                      __int16 v359 = *((_WORD *)a1 + 4);
                      v361 = *(a1 - 2);
                      a1 -= 2;
                      v360 = v361;
                      *((_WORD *)v358 + 12) = v359;
                      uint64_t v362 = *v341;
                      int v363 = *(_DWORD *)(*v341 + 16);
                      int v364 = *(_DWORD *)(*v341 + 32);
                      if (v363 >= v364) {
                        int v365 = *(_DWORD *)(*v341 + 32);
                      }
                      else {
                        int v365 = *(_DWORD *)(*v341 + 16);
                      }
                      uint64_t v366 = *v360;
                      int v367 = *(_DWORD *)(*v360 + 16);
                      int v368 = *(_DWORD *)(*v360 + 32);
                      if (v367 >= v368) {
                        int v369 = *(_DWORD *)(*v360 + 32);
                      }
                      else {
                        int v369 = *(_DWORD *)(*v360 + 16);
                      }
                    }
                    while (v365 < v369);
                    v370 = (double *)(v366 + 24);
                    v371 = (double *)(v362 + 40);
                    v372 = (double *)(v362 + 24);
                    v373 = (double *)(v366 + 40);
                    if (v367 < v368) {
                      v373 = v370;
                    }
                    if (v363 >= v364) {
                      v374 = v371;
                    }
                    else {
                      v374 = v372;
                    }
                  }
                  while (v365 == v369 && *v374 < *v373);
                  *v358 = v341;
                  *((_WORD *)v358 + 4) = (_WORD)v357;
                }
                unint64_t v167 = (unint64_t)(v340 + 2);
                a1 = v340;
              }
              while (v340 + 2 != (uint64_t **)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v208 = (v12 - 2) >> 1;
              int64_t v209 = v208;
              do
              {
                int64_t v210 = v209;
                if (v208 >= v209)
                {
                  uint64_t v211 = (2 * v209) | 1;
                  float v212 = (uint64_t **)(v10 + 16 * v211);
                  if (2 * v210 + 2 < (uint64_t)v12)
                  {
                    unint64_t v213 = v212[2];
                    uint64_t v214 = **v212;
                    int v215 = *(_DWORD *)(v214 + 16);
                    int v216 = *(_DWORD *)(v214 + 32);
                    int v217 = v215 >= v216 ? *(_DWORD *)(v214 + 32) : *(_DWORD *)(v214 + 16);
                    uint64_t v218 = *v213;
                    int v219 = *(_DWORD *)(*v213 + 16);
                    int v220 = *(_DWORD *)(*v213 + 32);
                    int v221 = v219 >= v220 ? *(_DWORD *)(*v213 + 32) : *(_DWORD *)(*v213 + 16);
                    if (v217 < v221) {
                      goto LABEL_296;
                    }
                    CFAttributedStringRef v222 = (double *)(v218 + 24);
                    uint64_t v223 = v214 + 40;
                    uint64_t v224 = v214 + 24;
                    double v225 = (double *)(v218 + 40);
                    if (v219 < v220) {
                      double v225 = v222;
                    }
                    v226 = (double *)(v215 >= v216 ? v223 : v224);
                    if (v217 == v221 && *v226 < *v225)
                    {
LABEL_296:
                      v212 += 2;
                      uint64_t v211 = 2 * v210 + 2;
                    }
                  }
                  v228 = (uint64_t **)(v10 + 16 * v210);
                  unsigned int v229 = *v228;
                  uint64_t v230 = **v212;
                  int v231 = *(_DWORD *)(v230 + 16);
                  int v232 = *(_DWORD *)(v230 + 32);
                  if (v231 >= v232) {
                    int v233 = *(_DWORD *)(v230 + 32);
                  }
                  else {
                    int v233 = *(_DWORD *)(v230 + 16);
                  }
                  uint64_t v234 = *v229;
                  int v235 = *(_DWORD *)(*v229 + 16);
                  int v236 = *(_DWORD *)(*v229 + 32);
                  if (v235 >= v236) {
                    int v237 = *(_DWORD *)(*v229 + 32);
                  }
                  else {
                    int v237 = *(_DWORD *)(*v229 + 16);
                  }
                  if (v233 >= v237)
                  {
                    v238 = (double *)(v234 + 24);
                    v239 = (double *)(v230 + 40);
                    v240 = (double *)(v230 + 24);
                    unsigned int v241 = (double *)(v234 + 40);
                    if (v235 < v236) {
                      unsigned int v241 = v238;
                    }
                    if (v231 >= v232) {
                      int v242 = v239;
                    }
                    else {
                      int v242 = v240;
                    }
                    if (v233 != v237 || *v242 >= *v241)
                    {
                      __int16 v244 = *((_WORD *)v228 + 4);
                      do
                      {
                        v245 = v228;
                        v228 = v212;
                        uint64_t v246 = *v212;
                        *((_WORD *)v245 + 4) = *((_WORD *)v228 + 4);
                        long long *v245 = v246;
                        if (v208 < v211) {
                          break;
                        }
                        uint64_t v247 = 2 * v211;
                        uint64_t v211 = (2 * v211) | 1;
                        float v212 = (uint64_t **)(v10 + 16 * v211);
                        uint64_t v248 = v247 + 2;
                        if (v248 < (uint64_t)v12)
                        {
                          uint64_t v249 = v212[2];
                          uint64_t v250 = **v212;
                          int v251 = *(_DWORD *)(v250 + 16);
                          int v252 = *(_DWORD *)(v250 + 32);
                          int v253 = v251 >= v252 ? *(_DWORD *)(v250 + 32) : *(_DWORD *)(v250 + 16);
                          uint64_t v254 = *v249;
                          int v255 = *(_DWORD *)(*v249 + 16);
                          int v256 = *(_DWORD *)(*v249 + 32);
                          int v257 = v255 >= v256 ? *(_DWORD *)(*v249 + 32) : *(_DWORD *)(*v249 + 16);
                          if (v253 < v257) {
                            goto LABEL_333;
                          }
                          v258 = (double *)(v254 + 24);
                          uint64_t v259 = v250 + 40;
                          uint64_t v260 = v250 + 24;
                          v261 = (double *)(v254 + 40);
                          if (v255 < v256) {
                            v261 = v258;
                          }
                          int v262 = (double *)(v251 >= v252 ? v259 : v260);
                          if (v253 == v257 && *v262 < *v261)
                          {
LABEL_333:
                            v212 += 2;
                            uint64_t v211 = v248;
                          }
                        }
                        uint64_t v264 = **v212;
                        int v265 = *(_DWORD *)(v264 + 16);
                        int v266 = *(_DWORD *)(v264 + 32);
                        int v267 = v265 >= v266 ? *(_DWORD *)(v264 + 32) : *(_DWORD *)(v264 + 16);
                        uint64_t v268 = *v229;
                        int v269 = *(_DWORD *)(*v229 + 16);
                        int v270 = *(_DWORD *)(*v229 + 32);
                        int v271 = v269 >= v270 ? *(_DWORD *)(*v229 + 32) : *(_DWORD *)(*v229 + 16);
                        if (v267 < v271) {
                          break;
                        }
                        BOOL v272 = (double *)(v268 + 24);
                        uint64_t v273 = v264 + 40;
                        uint64_t v274 = v264 + 24;
                        uint64_t v275 = (double *)(v268 + 40);
                        if (v269 < v270) {
                          uint64_t v275 = v272;
                        }
                        CGAffineTransform v276 = (double *)(v265 >= v266 ? v273 : v274);
                      }
                      while (v267 != v271 || *v276 >= *v275);
                      __CFString *v228 = v229;
                      *((_WORD *)v228 + 4) = v244;
                    }
                  }
                }
                int64_t v209 = v210 - 1;
              }
              while (v210);
              uint64_t v278 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v279 = 0;
                long long v380 = *(_OWORD *)v10;
                unint64_t v280 = v10;
                do
                {
                  unint64_t v281 = v280;
                  v280 += 16 * v279 + 16;
                  uint64_t v282 = 2 * v279;
                  uint64_t v279 = (2 * v279) | 1;
                  uint64_t v283 = v282 + 2;
                  if (v283 < v278)
                  {
                    v284 = *(uint64_t **)(v280 + 16);
                    uint64_t v285 = **(void **)v280;
                    int v286 = *(_DWORD *)(v285 + 16);
                    int v287 = *(_DWORD *)(v285 + 32);
                    int v288 = v286 >= v287 ? *(_DWORD *)(v285 + 32) : *(_DWORD *)(v285 + 16);
                    uint64_t v289 = *v284;
                    int v290 = *(_DWORD *)(*v284 + 16);
                    int v291 = *(_DWORD *)(*v284 + 32);
                    int v292 = v290 >= v291 ? *(_DWORD *)(*v284 + 32) : *(_DWORD *)(*v284 + 16);
                    if (v288 < v292) {
                      goto LABEL_373;
                    }
                    CGRect v293 = (double *)(v289 + 24);
                    uint64_t v294 = v285 + 40;
                    uint64_t v295 = v285 + 24;
                    v296 = (double *)(v289 + 40);
                    if (v290 < v291) {
                      v296 = v293;
                    }
                    __int16 v297 = (double *)(v286 >= v287 ? v294 : v295);
                    if (v288 == v292 && *v297 < *v296)
                    {
LABEL_373:
                      v280 += 16;
                      uint64_t v279 = v283;
                    }
                  }
                  __int16 v299 = *(uint64_t **)v280;
                  *(_WORD *)(v281 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v280 + 8);
                  *(void *)unint64_t v281 = v299;
                }
                while (v279 <= (uint64_t)((unint64_t)(v278 - 2) >> 1));
                a2 -= 16;
                if (v280 == a2)
                {
                  *(_WORD *)(v280 + _Block_object_dispose(&STACK[0x220], 8) = WORD4(v380);
                  *(void *)unint64_t v280 = v380;
                }
                else
                {
                  uint64_t v300 = *(void *)a2;
                  *(_WORD *)(v280 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(a2 + 8);
                  *(void *)unint64_t v280 = v300;
                  *(_WORD *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = WORD4(v380);
                  *(void *)a2 = v380;
                  uint64_t v301 = v280 - v10 + 16;
                  if (v301 >= 17)
                  {
                    unint64_t v302 = ((unint64_t)v301 >> 4) - 2;
                    unint64_t v303 = v302 >> 1;
                    unint64_t v304 = v10 + 16 * (v302 >> 1);
                    v305 = *(uint64_t **)v280;
                    uint64_t v306 = **(void **)v304;
                    int v307 = *(_DWORD *)(v306 + 16);
                    int v308 = *(_DWORD *)(v306 + 32);
                    int v309 = v307 >= v308 ? *(_DWORD *)(v306 + 32) : *(_DWORD *)(v306 + 16);
                    uint64_t v310 = *v305;
                    int v311 = *(_DWORD *)(*v305 + 16);
                    int v312 = *(_DWORD *)(*v305 + 32);
                    int v313 = v311 >= v312 ? *(_DWORD *)(*v305 + 32) : *(_DWORD *)(*v305 + 16);
                    if (v309 < v313) {
                      goto LABEL_395;
                    }
                    unint64_t v314 = (double *)(v310 + 24);
                    uint64_t v315 = v306 + 40;
                    uint64_t v316 = v306 + 24;
                    __int16 v317 = (double *)(v310 + 40);
                    if (v311 < v312) {
                      __int16 v317 = v314;
                    }
                    int v318 = (double *)(v307 >= v308 ? v315 : v316);
                    if (v309 == v313 && *v318 < *v317)
                    {
LABEL_395:
                      __int16 v320 = *(_WORD *)(v280 + 8);
                      __int16 v321 = *(_WORD *)(v304 + 8);
                      *(void *)unint64_t v280 = *(void *)v304;
                      *(_WORD *)(v280 + _Block_object_dispose(&STACK[0x220], 8) = v321;
                      if (v302 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v323 = v303 - 1;
                          unint64_t v303 = (v303 - 1) >> 1;
                          unint64_t v322 = v10 + 16 * v303;
                          uint64_t v324 = **(void **)v322;
                          int v325 = *(_DWORD *)(v324 + 16);
                          int v326 = *(_DWORD *)(v324 + 32);
                          int v327 = v325 >= v326 ? *(_DWORD *)(v324 + 32) : *(_DWORD *)(v324 + 16);
                          uint64_t v328 = *v305;
                          int v329 = *(_DWORD *)(*v305 + 16);
                          int v330 = *(_DWORD *)(*v305 + 32);
                          int v331 = v329 >= v330 ? *(_DWORD *)(*v305 + 32) : *(_DWORD *)(*v305 + 16);
                          if (v327 >= v331)
                          {
                            v332 = (double *)(v328 + 24);
                            uint64_t v333 = v324 + 40;
                            uint64_t v334 = v324 + 24;
                            v335 = (double *)(v328 + 40);
                            if (v329 < v330) {
                              v335 = v332;
                            }
                            v336 = (double *)(v325 >= v326 ? v333 : v334);
                            if (v327 != v331 || *v336 >= *v335) {
                              break;
                            }
                          }
                          v338 = *(uint64_t **)v322;
                          *(_WORD *)(v304 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v322 + 8);
                          *(void *)unint64_t v304 = v338;
                          unint64_t v304 = v10 + 16 * v303;
                          if (v323 <= 1) {
                            goto LABEL_415;
                          }
                        }
                      }
                      unint64_t v322 = v304;
LABEL_415:
                      *(void *)unint64_t v322 = v305;
                      *(_WORD *)(v322 + _Block_object_dispose(&STACK[0x220], 8) = v320;
                    }
                  }
                }
              }
              while (v278-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 16 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            sub_10035F2F4(a1, &a1[2 * (v12 >> 1)], (uint64_t **)(a2 - 16));
            sub_10035F2F4(a1 + 2, (uint64_t **)(v14 - 16), (uint64_t **)(a2 - 32));
            sub_10035F2F4(a1 + 4, &a1[2 * v13 + 2], (uint64_t **)(a2 - 48));
            sub_10035F2F4((uint64_t **)(v14 - 16), (uint64_t **)v14, &a1[2 * v13 + 2]);
            long long v376 = *(_OWORD *)a1;
            unint64_t v15 = *(uint64_t **)v14;
            *((_WORD *)a1 + 4) = *(_WORD *)(v14 + 8);
            *a1 = v15;
            *(_WORD *)(v14 + _Block_object_dispose(&STACK[0x220], 8) = WORD4(v376);
            *(void *)unint64_t v14 = v376;
          }
          else
          {
            sub_10035F2F4(&a1[2 * (v12 >> 1)], a1, (uint64_t **)(a2 - 16));
          }
          --a3;
          unint64_t v16 = *a1;
          uint64_t v17 = **a1;
          if (a4)
          {
            int v18 = *(_DWORD *)(v17 + 16);
            int v19 = *(_DWORD *)(v17 + 32);
            if (v18 >= v19) {
              int v20 = *(_DWORD *)(v17 + 32);
            }
            else {
              int v20 = *(_DWORD *)(v17 + 16);
            }
            break;
          }
          id v21 = *(a1 - 2);
          uint64_t v22 = *v21;
          int v23 = *(_DWORD *)(*v21 + 16);
          int v24 = *(_DWORD *)(*v21 + 32);
          int v25 = v23 >= v24 ? *(_DWORD *)(*v21 + 32) : *(_DWORD *)(*v21 + 16);
          int v18 = *(_DWORD *)(v17 + 16);
          int v19 = *(_DWORD *)(v17 + 32);
          int v20 = v18 >= v19 ? *(_DWORD *)(v17 + 32) : *(_DWORD *)(v17 + 16);
          if (v25 < v20) {
            break;
          }
          long long v26 = (double *)(v17 + 24);
          uint64_t v27 = v22 + 40;
          uint64_t v28 = v22 + 24;
          if (v18 >= v19) {
            long long v26 = (double *)(v17 + 40);
          }
          double v29 = *v26;
          double v30 = (double *)(v23 >= v24 ? v27 : v28);
          if (v25 == v20 && *v30 < v29) {
            break;
          }
          uint64_t v92 = **(void **)(a2 - 16);
          int v93 = *(_DWORD *)(v92 + 16);
          int v94 = *(_DWORD *)(v92 + 32);
          if (v93 >= v94) {
            int v95 = *(_DWORD *)(v92 + 32);
          }
          else {
            int v95 = *(_DWORD *)(v92 + 16);
          }
          if (v20 < v95) {
            goto LABEL_135;
          }
          float64x2_t v96 = (double *)(v92 + 24);
          if (v93 >= v94) {
            float64x2_t v96 = (double *)(v92 + 40);
          }
          if (v20 == v95 && v29 < *v96)
          {
LABEL_135:
            int v107 = a1 + 2;
            do
            {
              unint64_t v10 = (unint64_t)v107;
              uint64_t v108 = **v107;
              int v109 = *(_DWORD *)(v108 + 16);
              int v110 = *(_DWORD *)(v108 + 32);
              if (v109 >= v110) {
                int v111 = *(_DWORD *)(v108 + 32);
              }
              else {
                int v111 = *(_DWORD *)(v108 + 16);
              }
              if (v20 < v111) {
                break;
              }
              uint64_t v112 = (double *)(v108 + 24);
              float64x2_t v113 = (double *)(v108 + 40);
              if (v109 < v110) {
                float64x2_t v113 = v112;
              }
              double v114 = *v113;
              int v107 = (uint64_t **)(v10 + 16);
            }
            while (v20 != v111 || v29 >= v114);
          }
          else
          {
            unint64_t v98 = a1 + 2;
            do
            {
              unint64_t v10 = (unint64_t)v98;
              if ((unint64_t)v98 >= a2) {
                break;
              }
              uint64_t v99 = **v98;
              int v100 = *(_DWORD *)(v99 + 16);
              int v101 = *(_DWORD *)(v99 + 32);
              int v102 = v100 >= v101 ? *(_DWORD *)(v99 + 32) : *(_DWORD *)(v99 + 16);
              if (v20 < v102) {
                break;
              }
              id v103 = (double *)(v99 + 24);
              CGRect v104 = (double *)(v99 + 40);
              if (v100 < v101) {
                CGRect v104 = v103;
              }
              double v105 = *v104;
              unint64_t v98 = (uint64_t **)(v10 + 16);
            }
            while (v20 != v102 || v29 >= v105);
          }
          unint64_t v116 = a2;
          if (v10 < a2)
          {
            unint64_t v116 = a2 - 16;
            while (1)
            {
              int v117 = v93 >= v94 ? v94 : v93;
              if (v20 >= v117)
              {
                unint64_t v118 = (double *)(v92 + 24);
                double v119 = (double *)(v92 + 40);
                if (v93 < v94) {
                  double v119 = v118;
                }
                if (v20 != v117 || v29 >= *v119) {
                  break;
                }
              }
              double v120 = *(uint64_t **)(v116 - 16);
              v116 -= 16;
              uint64_t v92 = *v120;
              int v93 = *(_DWORD *)(*v120 + 16);
              int v94 = *(_DWORD *)(*v120 + 32);
            }
          }
          id v121 = a1[1];
          while (v10 < v116)
          {
            long long v378 = *(_OWORD *)v10;
            uint64_t v122 = *(void *)v116;
            *(_WORD *)(v10 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v116 + 8);
            *(void *)unint64_t v10 = v122;
            *(_WORD *)(v116 + _Block_object_dispose(&STACK[0x220], 8) = WORD4(v378);
            *(void *)unint64_t v116 = v378;
            uint64_t v123 = *v16;
            int v124 = *(_DWORD *)(*v16 + 16);
            int v125 = *(_DWORD *)(*v16 + 32);
            if (v124 >= v125) {
              int v126 = *(_DWORD *)(*v16 + 32);
            }
            else {
              int v126 = *(_DWORD *)(*v16 + 16);
            }
            v127 = (uint64_t **)(v10 + 16);
            do
            {
              unint64_t v10 = (unint64_t)v127;
              uint64_t v128 = **v127;
              int v129 = *(_DWORD *)(v128 + 16);
              int v130 = *(_DWORD *)(v128 + 32);
              if (v129 >= v130) {
                int v131 = *(_DWORD *)(v128 + 32);
              }
              else {
                int v131 = *(_DWORD *)(v128 + 16);
              }
              if (v126 < v131) {
                break;
              }
              double v132 = (double *)(v128 + 24);
              double v133 = (double *)(v128 + 40);
              if (v129 < v130) {
                double v133 = v132;
              }
              double v134 = *v133;
              double v135 = (double *)(v124 >= v125 ? v123 + 40 : v123 + 24);
              double v136 = *v135;
              v127 = (uint64_t **)(v10 + 16);
            }
            while (v126 != v131 || v136 >= v134);
            do
            {
              do
              {
                v138 = *(uint64_t **)(v116 - 16);
                v116 -= 16;
                uint64_t v139 = *v138;
                int v140 = *(_DWORD *)(*v138 + 16);
                int v141 = *(_DWORD *)(*v138 + 32);
                if (v140 >= v141) {
                  int v142 = v141;
                }
                else {
                  int v142 = v140;
                }
              }
              while (v126 < v142);
              v143 = (double *)(v139 + 24);
              double v144 = (double *)(v139 + 40);
              if (v140 < v141) {
                double v144 = v143;
              }
              double v145 = *v144;
              if (v124 >= v125) {
                id v146 = (double *)(v123 + 40);
              }
              else {
                id v146 = (double *)(v123 + 24);
              }
            }
            while (v126 == v142 && *v146 < v145);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((uint64_t **)(v10 - 16) != a1)
          {
            double v148 = *(uint64_t **)(v10 - 16);
            *((_WORD *)a1 + 4) = *(_WORD *)(v10 - 8);
            *a1 = v148;
          }
          a4 = 0;
          *(void *)(v10 - 16) = v16;
          *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x220], 8) = (_WORD)v121;
        }
        long long v32 = a1[1];
        for (uint64_t i = 2; ; i += 2)
        {
          uint64_t v34 = *a1[i];
          int v35 = *(_DWORD *)(v34 + 16);
          int v36 = *(_DWORD *)(v34 + 32);
          int v37 = v35 >= v36 ? *(_DWORD *)(v34 + 32) : *(_DWORD *)(v34 + 16);
          if (v37 >= v20)
          {
            long long v38 = (double *)(v17 + 24);
            uint64_t v39 = v34 + 40;
            uint64_t v40 = v34 + 24;
            if (v18 >= v19) {
              long long v38 = (double *)(v17 + 40);
            }
            double v41 = *v38;
            long long v42 = (double *)(v35 >= v36 ? v39 : v40);
            if (v37 != v20 || *v42 >= v41) {
              break;
            }
          }
        }
        unint64_t v44 = (unint64_t)&a1[i];
        long long v45 = (uint64_t **)(a2 - 16);
        if (i == 2)
        {
          long long v55 = (uint64_t **)(a2 - 16);
          while (v44 < (unint64_t)(v55 + 2))
          {
            uint64_t v46 = v55;
            uint64_t v56 = **v55;
            int v57 = *(_DWORD *)(v56 + 16);
            int v58 = *(_DWORD *)(v56 + 32);
            if (v57 >= v58) {
              int v59 = *(_DWORD *)(v56 + 32);
            }
            else {
              int v59 = *(_DWORD *)(v56 + 16);
            }
            if (v59 >= v20)
            {
              uint64_t v60 = (double *)(v56 + 40);
              uint64_t v61 = (double *)(v56 + 24);
              if (v57 >= v58) {
                uint64_t v61 = v60;
              }
              double v62 = *v61;
              long long v55 = v46 - 2;
              if (v59 != v20 || v62 >= v41) {
                continue;
              }
            }
            goto LABEL_74;
          }
          uint64_t v46 = v55 + 2;
        }
        else
        {
          do
          {
            uint64_t v46 = v45;
            uint64_t v47 = **v45;
            int v48 = *(_DWORD *)(v47 + 16);
            int v49 = *(_DWORD *)(v47 + 32);
            if (v48 >= v49) {
              int v50 = *(_DWORD *)(v47 + 32);
            }
            else {
              int v50 = *(_DWORD *)(v47 + 16);
            }
            if (v50 < v20) {
              break;
            }
            char v51 = (double *)(v47 + 40);
            char v52 = (double *)(v47 + 24);
            if (v48 >= v49) {
              char v52 = v51;
            }
            double v53 = *v52;
            long long v45 = v46 - 2;
          }
          while (v50 != v20 || v53 >= v41);
        }
LABEL_74:
        unint64_t v10 = v44;
        if (v44 < (unint64_t)v46)
        {
          long long v64 = v46;
          do
          {
            long long v377 = *(_OWORD *)v10;
            double v65 = *v64;
            *(_WORD *)(v10 + _Block_object_dispose(&STACK[0x220], 8) = *((_WORD *)v64 + 4);
            *(void *)unint64_t v10 = v65;
            *((_WORD *)v64 + 4) = WORD4(v377);
            *long long v64 = (uint64_t *)v377;
            uint64_t v66 = *v16;
            int v67 = *(_DWORD *)(*v16 + 16);
            int v68 = *(_DWORD *)(*v16 + 32);
            if (v67 >= v68) {
              int v69 = *(_DWORD *)(*v16 + 32);
            }
            else {
              int v69 = *(_DWORD *)(*v16 + 16);
            }
            do
            {
              do
              {
                float64x2_t v70 = *(uint64_t **)(v10 + 16);
                v10 += 16;
                uint64_t v71 = *v70;
                int v72 = *(_DWORD *)(*v70 + 16);
                int v73 = *(_DWORD *)(*v70 + 32);
                if (v72 >= v73) {
                  int v74 = v73;
                }
                else {
                  int v74 = v72;
                }
              }
              while (v74 < v69);
              __int32 v75 = (double *)(v66 + 24);
              int v76 = (double *)(v71 + 40);
              uint64_t v77 = (double *)(v71 + 24);
              if (v67 >= v68) {
                __int32 v75 = (double *)(v66 + 40);
              }
              double v78 = *v75;
              if (v72 >= v73) {
                int v79 = v76;
              }
              else {
                int v79 = v77;
              }
            }
            while (v74 == v69 && *v79 < v78);
            float64x2_t v81 = v64 - 2;
            do
            {
              long long v64 = v81;
              uint64_t v82 = **v81;
              int v83 = *(_DWORD *)(v82 + 16);
              int v84 = *(_DWORD *)(v82 + 32);
              if (v83 >= v84) {
                int v85 = *(_DWORD *)(v82 + 32);
              }
              else {
                int v85 = *(_DWORD *)(v82 + 16);
              }
              if (v85 < v69) {
                break;
              }
              uint64_t v86 = (double *)(v82 + 40);
              uint64_t v87 = (double *)(v82 + 24);
              if (v83 >= v84) {
                uint64_t v87 = v86;
              }
              double v88 = *v87;
              float64x2_t v81 = v64 - 2;
            }
            while (v85 != v69 || v88 >= v78);
          }
          while (v10 < (unint64_t)v64);
        }
        if ((uint64_t **)(v10 - 16) != a1)
        {
          unint64_t v90 = *(uint64_t **)(v10 - 16);
          *((_WORD *)a1 + 4) = *(_WORD *)(v10 - 8);
          *a1 = v90;
        }
        *(void *)(v10 - 16) = v16;
        *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x220], 8) = (_WORD)v32;
        if (v44 >= (unint64_t)v46) {
          break;
        }
LABEL_110:
        sub_10035E0E8(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v91 = sub_10035F5A0((uint64_t)a1, v10 - 16);
      if (sub_10035F5A0(v10, a2)) {
        break;
      }
      if (!v91) {
        goto LABEL_110;
      }
    }
    a2 = v10 - 16;
    if (!v91) {
      continue;
    }
    break;
  }
}

__n128 sub_10035F050(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  sub_10035F894(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  uint64_t v12 = **a5;
  int v13 = *(_DWORD *)(v12 + 16);
  int v14 = *(_DWORD *)(v12 + 32);
  if (v13 >= v14) {
    int v15 = *(_DWORD *)(v12 + 32);
  }
  else {
    int v15 = *(_DWORD *)(v12 + 16);
  }
  uint64_t v16 = *v11;
  int v17 = *(_DWORD *)(*v11 + 16);
  int v18 = *(_DWORD *)(*v11 + 32);
  if (v17 >= v18) {
    int v19 = *(_DWORD *)(*v11 + 32);
  }
  else {
    int v19 = *(_DWORD *)(*v11 + 16);
  }
  if (v15 < v19) {
    goto LABEL_18;
  }
  int v20 = (unint64_t *)(v16 + 24);
  uint64_t v21 = v12 + 40;
  uint64_t v22 = v12 + 24;
  int v23 = (unint64_t *)(v16 + 40);
  if (v17 < v18) {
    int v23 = v20;
  }
  result.n128_u64[0] = *v23;
  int v24 = (double *)(v13 >= v14 ? v21 : v22);
  if (v15 == v19 && *v24 < result.n128_f64[0])
  {
LABEL_18:
    long long v71 = *(_OWORD *)a4;
    __int16 v26 = *((_WORD *)a5 + 4);
    *a4 = *a5;
    *((_WORD *)a4 + 4) = v26;
    *a5 = (uint64_t *)v71;
    *((_WORD *)a5 + 4) = WORD4(v71);
    uint64_t v27 = *a3;
    uint64_t v28 = **a4;
    int v29 = *(_DWORD *)(v28 + 16);
    int v30 = *(_DWORD *)(v28 + 32);
    if (v29 >= v30) {
      int v31 = *(_DWORD *)(v28 + 32);
    }
    else {
      int v31 = *(_DWORD *)(v28 + 16);
    }
    uint64_t v32 = *v27;
    int v33 = *(_DWORD *)(*v27 + 16);
    int v34 = *(_DWORD *)(*v27 + 32);
    if (v33 >= v34) {
      int v35 = *(_DWORD *)(*v27 + 32);
    }
    else {
      int v35 = *(_DWORD *)(*v27 + 16);
    }
    if (v31 < v35) {
      goto LABEL_35;
    }
    int v36 = (unint64_t *)(v32 + 24);
    uint64_t v37 = v28 + 40;
    uint64_t v38 = v28 + 24;
    uint64_t v39 = (unint64_t *)(v32 + 40);
    if (v33 < v34) {
      uint64_t v39 = v36;
    }
    result.n128_u64[0] = *v39;
    uint64_t v40 = (double *)(v29 >= v30 ? v37 : v38);
    if (v31 == v35 && *v40 < result.n128_f64[0])
    {
LABEL_35:
      __n128 result = *(__n128 *)a3;
      __n128 v72 = *(__n128 *)a3;
      __int16 v42 = *((_WORD *)a4 + 4);
      *a3 = *a4;
      *((_WORD *)a3 + 4) = v42;
      *a4 = (uint64_t *)v72.n128_u64[0];
      *((_WORD *)a4 + 4) = v72.n128_u16[4];
      uint64_t v43 = *a2;
      uint64_t v44 = **a3;
      int v45 = *(_DWORD *)(v44 + 16);
      int v46 = *(_DWORD *)(v44 + 32);
      if (v45 >= v46) {
        int v47 = *(_DWORD *)(v44 + 32);
      }
      else {
        int v47 = *(_DWORD *)(v44 + 16);
      }
      uint64_t v48 = *v43;
      int v49 = *(_DWORD *)(*v43 + 16);
      int v50 = *(_DWORD *)(*v43 + 32);
      if (v49 >= v50) {
        int v51 = *(_DWORD *)(*v43 + 32);
      }
      else {
        int v51 = *(_DWORD *)(*v43 + 16);
      }
      if (v47 < v51) {
        goto LABEL_49;
      }
      uint64_t v52 = v44 + 40;
      uint64_t v53 = v44 + 24;
      double v54 = (unint64_t *)(v48 + 40);
      if (v49 < v50) {
        double v54 = (unint64_t *)(v48 + 24);
      }
      long long v55 = (double *)(v45 >= v46 ? v52 : v53);
      if (v47 == v51)
      {
        result.n128_u64[0] = *v54;
        if (*v55 < *(double *)v54)
        {
LABEL_49:
          __n128 result = *(__n128 *)a2;
          __n128 v73 = *(__n128 *)a2;
          __int16 v56 = *((_WORD *)a3 + 4);
          *a2 = *a3;
          *((_WORD *)a2 + 4) = v56;
          *a3 = (uint64_t *)v73.n128_u64[0];
          *((_WORD *)a3 + 4) = v73.n128_u16[4];
          int v57 = *a1;
          uint64_t v58 = **a2;
          int v59 = *(_DWORD *)(v58 + 16);
          int v60 = *(_DWORD *)(v58 + 32);
          if (v59 >= v60) {
            int v61 = *(_DWORD *)(v58 + 32);
          }
          else {
            int v61 = *(_DWORD *)(v58 + 16);
          }
          uint64_t v62 = *v57;
          int v63 = *(_DWORD *)(*v57 + 16);
          int v64 = *(_DWORD *)(*v57 + 32);
          if (v63 >= v64) {
            int v65 = *(_DWORD *)(*v57 + 32);
          }
          else {
            int v65 = *(_DWORD *)(*v57 + 16);
          }
          if (v61 < v65) {
            goto LABEL_63;
          }
          uint64_t v66 = v58 + 40;
          uint64_t v67 = v58 + 24;
          int v68 = (unint64_t *)(v62 + 40);
          if (v63 < v64) {
            int v68 = (unint64_t *)(v62 + 24);
          }
          int v69 = (double *)(v59 >= v60 ? v66 : v67);
          if (v61 == v65)
          {
            result.n128_u64[0] = *v68;
            if (*v69 < *(double *)v68)
            {
LABEL_63:
              __n128 result = *(__n128 *)a1;
              __n128 v74 = *(__n128 *)a1;
              __int16 v70 = *((_WORD *)a2 + 4);
              *a1 = *a2;
              *((_WORD *)a1 + 4) = v70;
              *a2 = (uint64_t *)v74.n128_u64[0];
              *((_WORD *)a2 + 4) = v74.n128_u16[4];
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t **sub_10035F2F4(uint64_t **result, uint64_t **a2, uint64_t **a3)
{
  double v3 = *result;
  uint64_t v4 = **a2;
  int v5 = *(_DWORD *)(v4 + 16);
  int v6 = *(_DWORD *)(v4 + 32);
  if (v5 >= v6) {
    int v7 = *(_DWORD *)(v4 + 32);
  }
  else {
    int v7 = *(_DWORD *)(v4 + 16);
  }
  uint64_t v8 = *v3;
  int v9 = *(_DWORD *)(*v3 + 16);
  int v10 = *(_DWORD *)(*v3 + 32);
  if (v9 >= v10) {
    int v11 = *(_DWORD *)(*v3 + 32);
  }
  else {
    int v11 = *(_DWORD *)(*v3 + 16);
  }
  if (v7 >= v11)
  {
    uint64_t v12 = (double *)(v8 + 24);
    int v13 = (double *)(v8 + 40);
    if (v9 < v10) {
      int v13 = v12;
    }
    double v14 = *v13;
    int v15 = (double *)(v5 >= v6 ? v4 + 40 : v4 + 24);
    double v16 = *v15;
    if (v7 != v11 || v16 >= v14)
    {
      uint64_t v18 = **a3;
      int v19 = *(_DWORD *)(v18 + 16);
      int v20 = *(_DWORD *)(v18 + 32);
      if (v19 >= v20) {
        int v21 = *(_DWORD *)(v18 + 32);
      }
      else {
        int v21 = *(_DWORD *)(v18 + 16);
      }
      if (v21 < v7) {
        goto LABEL_28;
      }
      uint64_t v22 = (double *)(v18 + 40);
      int v23 = (double *)(v18 + 24);
      if (v19 >= v20) {
        int v23 = v22;
      }
      if (v21 == v7 && *v23 < v16)
      {
LABEL_28:
        long long v66 = *(_OWORD *)a2;
        __int16 v25 = *((_WORD *)a3 + 4);
        *a2 = *a3;
        *((_WORD *)a2 + 4) = v25;
        *a3 = (uint64_t *)v66;
        *((_WORD *)a3 + 4) = WORD4(v66);
        __int16 v26 = *result;
        uint64_t v27 = **a2;
        int v28 = *(_DWORD *)(v27 + 16);
        int v29 = *(_DWORD *)(v27 + 32);
        if (v28 >= v29) {
          int v30 = *(_DWORD *)(v27 + 32);
        }
        else {
          int v30 = *(_DWORD *)(v27 + 16);
        }
        uint64_t v31 = *v26;
        int v32 = *(_DWORD *)(*v26 + 16);
        int v33 = *(_DWORD *)(*v26 + 32);
        if (v32 >= v33) {
          int v34 = *(_DWORD *)(*v26 + 32);
        }
        else {
          int v34 = *(_DWORD *)(*v26 + 16);
        }
        if (v30 < v34) {
          goto LABEL_42;
        }
        uint64_t v35 = v27 + 40;
        uint64_t v36 = v27 + 24;
        uint64_t v37 = (double *)(v31 + 40);
        if (v32 < v33) {
          uint64_t v37 = (double *)(v31 + 24);
        }
        uint64_t v38 = (double *)(v28 >= v29 ? v35 : v36);
        if (v30 == v34 && *v38 < *v37)
        {
LABEL_42:
          long long v67 = *(_OWORD *)result;
          __int16 v39 = *((_WORD *)a2 + 4);
          *__n128 result = *a2;
          *((_WORD *)result + 4) = v39;
          *a2 = (uint64_t *)v67;
          *((_WORD *)a2 + 4) = WORD4(v67);
        }
      }
      return result;
    }
  }
  uint64_t v40 = **a3;
  int v41 = *(_DWORD *)(v40 + 16);
  int v42 = *(_DWORD *)(v40 + 32);
  if (v41 >= v42) {
    int v43 = *(_DWORD *)(v40 + 32);
  }
  else {
    int v43 = *(_DWORD *)(v40 + 16);
  }
  if (v43 < v7) {
    goto LABEL_71;
  }
  uint64_t v44 = (double *)(v4 + 24);
  uint64_t v45 = v40 + 40;
  uint64_t v46 = v40 + 24;
  int v47 = (double *)(v4 + 40);
  if (v5 < v6) {
    int v47 = v44;
  }
  double v48 = *v47;
  int v49 = (double *)(v41 >= v42 ? v45 : v46);
  if (v43 == v7 && *v49 < v48)
  {
LABEL_71:
    long long v69 = *(_OWORD *)result;
    __int16 v65 = *((_WORD *)a3 + 4);
    *__n128 result = *a3;
    *((_WORD *)result + 4) = v65;
    goto LABEL_72;
  }
  long long v68 = *(_OWORD *)result;
  __int16 v51 = *((_WORD *)a2 + 4);
  *__n128 result = *a2;
  *((_WORD *)result + 4) = v51;
  *a2 = (uint64_t *)v68;
  *((_WORD *)a2 + 4) = WORD4(v68);
  uint64_t v52 = *a2;
  uint64_t v53 = **a3;
  int v54 = *(_DWORD *)(v53 + 16);
  int v55 = *(_DWORD *)(v53 + 32);
  if (v54 >= v55) {
    int v56 = *(_DWORD *)(v53 + 32);
  }
  else {
    int v56 = *(_DWORD *)(v53 + 16);
  }
  uint64_t v57 = *v52;
  int v58 = *(_DWORD *)(*v52 + 16);
  int v59 = *(_DWORD *)(*v52 + 32);
  if (v58 >= v59) {
    int v60 = *(_DWORD *)(*v52 + 32);
  }
  else {
    int v60 = *(_DWORD *)(*v52 + 16);
  }
  if (v56 < v60) {
    goto LABEL_70;
  }
  int v61 = (uint64_t **)(v53 + 40);
  __n128 result = (uint64_t **)(v53 + 24);
  uint64_t v62 = (double *)(v57 + 40);
  if (v58 < v59) {
    uint64_t v62 = (double *)(v57 + 24);
  }
  int v63 = (double *)(v54 >= v55 ? v61 : result);
  if (v56 == v60 && *v63 < *v62)
  {
LABEL_70:
    long long v69 = *(_OWORD *)a2;
    __int16 v64 = *((_WORD *)a3 + 4);
    *a2 = *a3;
    *((_WORD *)a2 + 4) = v64;
LABEL_72:
    *a3 = (uint64_t *)v69;
    *((_WORD *)a3 + 4) = WORD4(v69);
  }
  return result;
}

BOOL sub_10035F5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v7 = *(uint64_t **)(a2 - 16);
      int v6 = (void *)(a2 - 16);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = *v7;
      int v10 = *(_DWORD *)(*v7 + 16);
      int v11 = *(_DWORD *)(*v7 + 32);
      if (v10 >= v11) {
        int v12 = v11;
      }
      else {
        int v12 = v10;
      }
      uint64_t v13 = *v8;
      int v14 = *(_DWORD *)(*v8 + 16);
      int v15 = *(_DWORD *)(*v8 + 32);
      if (v14 >= v15) {
        int v16 = *(_DWORD *)(*v8 + 32);
      }
      else {
        int v16 = *(_DWORD *)(*v8 + 16);
      }
      if (v12 < v16) {
        goto LABEL_19;
      }
      int v17 = (double *)(v13 + 24);
      uint64_t v18 = v9 + 40;
      uint64_t v19 = v9 + 24;
      int v20 = (double *)(v13 + 40);
      if (v14 < v15) {
        int v20 = v17;
      }
      int v21 = (double *)(v10 >= v11 ? v18 : v19);
      if (v12 == v16 && *v21 < *v20)
      {
LABEL_19:
        long long v62 = *(_OWORD *)a1;
        __int16 v23 = *(_WORD *)(a2 - 8);
        *(void *)a1 = *v6;
        *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v23;
        *int v6 = v62;
        *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x220], 8) = WORD4(v62);
      }
      return result;
    case 3:
      sub_10035F2F4((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      sub_10035F894((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (uint64_t **)(a2 - 16));
      return 1;
    case 5:
      sub_10035F050((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (uint64_t **)(a1 + 48), (uint64_t **)(a2 - 16));
      return 1;
    default:
      uint64_t v24 = a1 + 32;
      sub_10035F2F4((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v25 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v26 = 0;
      int v27 = 0;
      break;
  }
  while (1)
  {
    int v28 = *(uint64_t **)v25;
    int v29 = *(uint64_t **)v24;
    uint64_t v30 = **(void **)v25;
    int v31 = *(_DWORD *)(v30 + 16);
    int v32 = *(_DWORD *)(v30 + 32);
    int v33 = v31 >= v32 ? *(_DWORD *)(v30 + 32) : *(_DWORD *)(v30 + 16);
    uint64_t v34 = *v29;
    int v35 = *(_DWORD *)(*v29 + 16);
    int v36 = *(_DWORD *)(*v29 + 32);
    int v37 = v35 >= v36 ? *(_DWORD *)(*v29 + 32) : *(_DWORD *)(*v29 + 16);
    if (v33 < v37) {
      goto LABEL_70;
    }
    uint64_t v38 = (double *)(v34 + 24);
    uint64_t v39 = v30 + 40;
    uint64_t v40 = v30 + 24;
    int v41 = (double *)(v34 + 40);
    if (v35 < v36) {
      int v41 = v38;
    }
    int v42 = (double *)(v31 >= v32 ? v39 : v40);
    if (v33 == v37 && *v42 < *v41)
    {
LABEL_70:
      __int16 v44 = *(_WORD *)(v25 + 8);
      *(void *)uint64_t v25 = *(void *)v24;
      *(_WORD *)(v25 + _Block_object_dispose(&STACK[0x220], 8) = *(_WORD *)(v24 + 8);
      uint64_t v45 = a1;
      if (v24 != a1)
      {
        uint64_t v46 = v26;
        do
        {
          int v47 = *(uint64_t **)(a1 + v46 + 16);
          uint64_t v48 = *v28;
          int v49 = *(_DWORD *)(*v28 + 16);
          int v50 = *(_DWORD *)(*v28 + 32);
          if (v49 >= v50) {
            int v51 = *(_DWORD *)(*v28 + 32);
          }
          else {
            int v51 = *(_DWORD *)(*v28 + 16);
          }
          uint64_t v52 = *v47;
          int v53 = *(_DWORD *)(*v47 + 16);
          int v54 = *(_DWORD *)(*v47 + 32);
          if (v53 >= v54) {
            int v55 = *(_DWORD *)(*v47 + 32);
          }
          else {
            int v55 = *(_DWORD *)(*v47 + 16);
          }
          if (v51 >= v55)
          {
            int v56 = (double *)(v52 + 24);
            uint64_t v57 = v48 + 40;
            uint64_t v58 = v48 + 24;
            int v59 = (double *)(v52 + 40);
            if (v53 < v54) {
              int v59 = v56;
            }
            int v60 = (double *)(v49 >= v50 ? v57 : v58);
            if (v51 != v55 || *v60 >= *v59)
            {
              uint64_t v45 = a1 + v46 + 32;
              goto LABEL_60;
            }
          }
          *(void *)(a1 + v46 + 32) = *(void *)(a1 + v46 + 16);
          *(_WORD *)(a1 + v46 + 40) = *(_WORD *)(a1 + v46 + 24);
          v46 -= 16;
        }
        while (v46 != -32);
        uint64_t v45 = a1;
      }
LABEL_60:
      *(void *)uint64_t v45 = v28;
      *(_WORD *)(v45 + _Block_object_dispose(&STACK[0x220], 8) = v44;
      if (++v27 == 8) {
        return v25 + 16 == a2;
      }
    }
    uint64_t v24 = v25;
    v26 += 16;
    v25 += 16;
    if (v25 == a2) {
      return 1;
    }
  }
}

__n128 sub_10035F894(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  sub_10035F2F4(a1, a2, a3);
  uint64_t v9 = *a3;
  uint64_t v10 = **a4;
  int v11 = *(_DWORD *)(v10 + 16);
  int v12 = *(_DWORD *)(v10 + 32);
  if (v11 >= v12) {
    int v13 = *(_DWORD *)(v10 + 32);
  }
  else {
    int v13 = *(_DWORD *)(v10 + 16);
  }
  uint64_t v14 = *v9;
  int v15 = *(_DWORD *)(*v9 + 16);
  int v16 = *(_DWORD *)(*v9 + 32);
  if (v15 >= v16) {
    int v17 = *(_DWORD *)(*v9 + 32);
  }
  else {
    int v17 = *(_DWORD *)(*v9 + 16);
  }
  if (v13 < v17) {
    goto LABEL_18;
  }
  uint64_t v18 = (unint64_t *)(v14 + 24);
  uint64_t v19 = v10 + 40;
  uint64_t v20 = v10 + 24;
  int v21 = (unint64_t *)(v14 + 40);
  if (v15 < v16) {
    int v21 = v18;
  }
  result.n128_u64[0] = *v21;
  uint64_t v22 = (double *)(v11 >= v12 ? v19 : v20);
  if (v13 == v17 && *v22 < result.n128_f64[0])
  {
LABEL_18:
    long long v55 = *(_OWORD *)a3;
    __int16 v24 = *((_WORD *)a4 + 4);
    *a3 = *a4;
    *((_WORD *)a3 + 4) = v24;
    *a4 = (uint64_t *)v55;
    *((_WORD *)a4 + 4) = WORD4(v55);
    uint64_t v25 = *a2;
    uint64_t v26 = **a3;
    int v27 = *(_DWORD *)(v26 + 16);
    int v28 = *(_DWORD *)(v26 + 32);
    if (v27 >= v28) {
      int v29 = *(_DWORD *)(v26 + 32);
    }
    else {
      int v29 = *(_DWORD *)(v26 + 16);
    }
    uint64_t v30 = *v25;
    int v31 = *(_DWORD *)(*v25 + 16);
    int v32 = *(_DWORD *)(*v25 + 32);
    if (v31 >= v32) {
      int v33 = *(_DWORD *)(*v25 + 32);
    }
    else {
      int v33 = *(_DWORD *)(*v25 + 16);
    }
    if (v29 < v33) {
      goto LABEL_35;
    }
    uint64_t v34 = (unint64_t *)(v30 + 24);
    uint64_t v35 = v26 + 40;
    uint64_t v36 = v26 + 24;
    int v37 = (unint64_t *)(v30 + 40);
    if (v31 < v32) {
      int v37 = v34;
    }
    result.n128_u64[0] = *v37;
    uint64_t v38 = (double *)(v27 >= v28 ? v35 : v36);
    if (v29 == v33 && *v38 < result.n128_f64[0])
    {
LABEL_35:
      __n128 result = *(__n128 *)a2;
      __n128 v56 = *(__n128 *)a2;
      __int16 v40 = *((_WORD *)a3 + 4);
      *a2 = *a3;
      *((_WORD *)a2 + 4) = v40;
      *a3 = (uint64_t *)v56.n128_u64[0];
      *((_WORD *)a3 + 4) = v56.n128_u16[4];
      int v41 = *a1;
      uint64_t v42 = **a2;
      int v43 = *(_DWORD *)(v42 + 16);
      int v44 = *(_DWORD *)(v42 + 32);
      if (v43 >= v44) {
        int v45 = *(_DWORD *)(v42 + 32);
      }
      else {
        int v45 = *(_DWORD *)(v42 + 16);
      }
      uint64_t v46 = *v41;
      int v47 = *(_DWORD *)(*v41 + 16);
      int v48 = *(_DWORD *)(*v41 + 32);
      if (v47 >= v48) {
        int v49 = *(_DWORD *)(*v41 + 32);
      }
      else {
        int v49 = *(_DWORD *)(*v41 + 16);
      }
      if (v45 < v49) {
        goto LABEL_49;
      }
      uint64_t v50 = v42 + 40;
      uint64_t v51 = v42 + 24;
      uint64_t v52 = (unint64_t *)(v46 + 40);
      if (v47 < v48) {
        uint64_t v52 = (unint64_t *)(v46 + 24);
      }
      int v53 = (double *)(v43 >= v44 ? v50 : v51);
      if (v45 == v49)
      {
        result.n128_u64[0] = *v52;
        if (*v53 < *(double *)v52)
        {
LABEL_49:
          __n128 result = *(__n128 *)a1;
          __n128 v57 = *(__n128 *)a1;
          __int16 v54 = *((_WORD *)a2 + 4);
          *a1 = *a2;
          *((_WORD *)a1 + 4) = v54;
          *a2 = (uint64_t *)v57.n128_u64[0];
          *((_WORD *)a2 + 4) = v57.n128_u16[4];
        }
      }
    }
  }
  return result;
}

void *sub_10035FA94(void *a1)
{
  *a1 = off_1014F0E60;
  uint64_t v2 = (void **)(a1 + 2);
  sub_10035DB34(a1 + 2, 0);
  double v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  int v5 = v2;
  sub_10035FB0C(&v5);
  return a1;
}

void sub_10035FB0C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10035FB60(v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10035FB60(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  double v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    void *v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_10035FBCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FC54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FC98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FCDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FD20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FD64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10035FDA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10035FDEC(uint64_t a1, uint64_t a2)
{
  return sub_10001D51C(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_10035FDF8(uint64_t a1)
{
  return sub_100360864(a1 + 48);
}

uint64_t sub_10035FE00(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x220], 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_10035FE10(void *a1, unint64_t a2)
{
  uint64_t v11 = 0;
  unint64_t v12 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = a1[6] + 24 * a2;
  LODWORD(v14) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  uint64_t v23 = 1;
  long long v24 = xmmword_101177E80;
  __int16 v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_1004E026C((uint64_t *)&v14, v3, 0, 3);
  sub_1004E39B8((uint64_t)&v14, &v9, 1, 2.0);
  if (v10 == v9)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0FB0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A3B18();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F0FD0);
    }
    int v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    int v7 = +[NSString stringWithUTF8String:"BOOL _hasAnyIntersectionBetweenPaths(CRLBezierPath *const  _Nonnull __strong, CRLBezierPath *const  _Nonnull __strong)_block_invoke"];
    uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:1490 isFatal:0 description:"Unable to stroke path for intersection test."];
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[4] + 8) + 48));
    uint64_t v4 = *(void *)(a1[5] + 8) + 48;
    int v13 = &v12;
    int v5 = sub_1003608F4(v4, &v12, (uint64_t)&unk_101174E70, (uint64_t **)&v13) + 3;
    if (v5 != &v9) {
      sub_100360B90((uint64_t)v5, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[4] + 8) + 48));
  }
  sub_100360D58((uint64_t)&v14);
  uint64_t v14 = (void **)&v9;
  sub_100134888(&v14);
}

void sub_1003600B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  long long v19 = v18;

  sub_100360D58((uint64_t)&a18);
  a18 = (void **)&a10;
  sub_100134888(&a18);
  _Unwind_Resume(a1);
}

void sub_10036010C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100360150(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_100360194(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return sub_100360F94(v2, *(void *)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void sub_1003601BC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_100134888(&v1);
}

__n128 *sub_1003601E8(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)sub_10036055C(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1003603B0((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      sub_100360758((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_100004E40();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        long long v19 = (char *)sub_100046F5C(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      uint64_t v23 = v19;
      long long v24 = &v19[24 * v15];
      __int16 v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      sub_100360414(&v23, a3, a5);
      int v5 = (__n128 *)sub_1003604A8(a1, &v23, v5);
      sub_100134D6C((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_100360390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + _Block_object_dispose(&STACK[0x220], 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *sub_1003603B0(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (__n128 *)((char *)a2 + v6 - a4);
  uint64_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *uint64_t v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      uint64_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v8;
  return sub_1003606A4(a2, v7, v6);
}

void *sub_100360414(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      __n128 result = sub_100134AB8(v4, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1003604A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003604A8(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100134C48((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1003607D4(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_10036055C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      sub_100134AB8(v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10036061C((uint64_t)v8);
  return v4;
}

void sub_100360608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036061C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100360654(a1);
  }
  return a1;
}

void sub_100360654(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      int v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

__n128 *sub_1003606A4(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      sub_100360704(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

__n128 sub_100360704(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100360758(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_10035D9F8(a4, *(char **)v5, *(void *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4));
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1003607D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  char v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  id v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      void v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x220], 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    char v9 = v4;
  }
  char v7 = 1;
  sub_10036061C((uint64_t)v6);
  return v4;
}

uint64_t sub_100360864(uint64_t a1)
{
  sub_1003608A0(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1003608A0(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      sub_100134888(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_1003608F4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100360B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_100360B44(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100360B44(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    sub_100134888(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_100360B90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100360D1C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000841A0((void *)a1, v11);
    unint64_t v12 = sub_10036055C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_100360758((int)&v20, a2, v13, v9);
    unint64_t v12 = sub_10036055C(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v12;
    return;
  }
  sub_100360758((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      unint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v15;
}

void sub_100360D0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100360D14(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100360D1C(uint64_t *a1)
{
  if (*a1)
  {
    sub_1001348DC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100360D58(uint64_t a1)
{
  sub_100360DC8((void *)a1);
  sub_100360E78((void *)(a1 + 192));
  sub_10036371C((void *)(a1 + 160));
  unint64_t v4 = (void **)(a1 + 104);
  sub_100360EFC(&v4);
  unint64_t v4 = (void **)(a1 + 80);
  sub_100134888(&v4);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100360DC8(void *a1)
{
  uint64_t v3 = a1[13];
  for (uint64_t i = a1[14]; i != v3; sub_100360E24((uint64_t)(a1 + 15), i))
    i -= 88;
  a1[14] = v3;
  a1[8] = a1[7];
}

void sub_100360E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(void *)(a2 + 56) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a2 + 24);
  sub_100134888(&v4);
  unint64_t v4 = (void **)a2;
  sub_100134888(&v4);
}

void *sub_100360E78(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100360EFC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_100360E24((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100360F94(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000841A0(result, a4);
    __n128 result = sub_10036055C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100360FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x220], 8) = v10;
  sub_100134888(&a9);
  _Unwind_Resume(a1);
}

void sub_10036101C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100361060(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1003610A4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_10035D290(a1, a2, a3, a4, v6);
  unint64_t v7 = (void **)v6;
  sub_100134888(&v7);
  return v4;
}

void sub_1003610F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100134888((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100361108(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 16);
  if (v1 != *(uint64_t **)(result + 24))
  {
    uint64_t v2 = *v1;
    int v3 = -1;
    do
    {
      uint64_t v2 = *(void *)(v2 + 8);
      ++v3;
    }
    while (v2);
    if (v3 && (v3 & 1) == 0)
    {
      unsigned int v4 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1068);
      }
      uint64_t v5 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v4;
        __int16 v11 = 2082;
        unint64_t v12 = "void _clipperPathsForVisuallyDistinctSubregions(const Clipper2Lib::PolyTree64 &, const BOOL, std::vector<C"
              "lipper2Lib::Paths64 *> &)";
        __int16 v13 = 2082;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm";
        __int16 v15 = 1024;
        int v16 = 1618;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d currentPositiveNode should not be a hole.", buf, 0x22u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1088);
      }
      uint64_t v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v4;
        __int16 v11 = 2114;
        unint64_t v12 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      unint64_t v7 = +[NSString stringWithUTF8String:"void _clipperPathsForVisuallyDistinctSubregions(const Clipper2Lib::PolyTree64 &, const BOOL, std::vector<Clipper2Lib::Paths64 *> &)"];
      uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:1618 isFatal:0 description:"currentPositiveNode should not be a hole."];
    }
    operator new();
  }
  return result;
}

void sub_100361548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100361570(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003615B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1003615F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100004E40();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100046F5C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __int16 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  __int16 v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)__int16 v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_100134AB8(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  v15 += 24;
  sub_100134BD0(a1, v14);
  uint64_t v12 = a1[1];
  sub_100134D6C((uint64_t)v14);
  return v12;
}

void sub_100361708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036171C(void *a1, unint64_t a2)
{
  uint64_t v11 = 0;
  unint64_t v12 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = a1[6] + 24 * a2;
  LODWORD(v14) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  uint64_t v23 = 1;
  long long v24 = xmmword_101177E80;
  __int16 v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_1004E026C((uint64_t *)&v14, v3, 0, 3);
  sub_1004E39B8((uint64_t)&v14, &v9, 1, 2.0);
  if (v10 == v9)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F10A8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A3BA0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F10C8);
    }
    uint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v7 = +[NSString stringWithUTF8String:"NSArray<CRLBezierPath *> * _Nonnull _pathsByFloodFillingPathsAtFillPoint(NSArray<CRLBezierPath *> *const  _Nonnull __strong, const CGPoint)_block_invoke"];
    unint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:1720 isFatal:0 description:"Unable to stroke path for flood fill."];
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[4] + 8) + 48));
    uint64_t v4 = *(void *)(a1[5] + 8) + 48;
    __int16 v13 = &v12;
    unint64_t v5 = sub_1003608F4(v4, &v12, (uint64_t)&unk_101174E70, (uint64_t **)&v13) + 3;
    if (v5 != &v9) {
      sub_100360B90((uint64_t)v5, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[4] + 8) + 48));
  }
  sub_100360D58((uint64_t)&v14);
  uint64_t v14 = (void **)&v9;
  sub_100134888(&v14);
}

void sub_1003619C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  long long v19 = v18;

  sub_100360D58((uint64_t)&a18);
  a18 = (void **)&a10;
  sub_100134888(&a18);
  _Unwind_Resume(a1);
}

void sub_100361A18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100361A5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100361AA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  for (uint64_t i = *(uint64_t **)(a1 + 24); v4 != i; ++v4)
  {
    uint64_t v7 = *v4;
    int v8 = -1;
    uint64_t v9 = *v4;
    do
    {
      uint64_t v9 = *(void *)(v9 + 8);
      ++v8;
    }
    while (v9);
    if (v8 && (v8 & 1) == 0)
    {
      unsigned int v10 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F10E8);
      }
      uint64_t v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        unsigned int v24 = v10;
        __int16 v25 = 2082;
        uint64_t v26 = "Clipper2Lib::Paths64 * _Nullable _visuallyDistinctSubregionContainingPoint(const Clipper2Lib::PolyTree64 &"
              ", const Clipper2Lib::Point64, const BOOL)";
        __int16 v27 = 2082;
        int v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm";
        __int16 v29 = 1024;
        int v30 = 1778;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d currentPositiveNode should not be a hole.", buf, 0x22u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1108);
      }
      unint64_t v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        long long v17 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        unsigned int v24 = v10;
        __int16 v25 = 2114;
        uint64_t v26 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v12, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      __int16 v13 = +[NSString stringWithUTF8String:"Clipper2Lib::Paths64 * _Nullable _visuallyDistinctSubregionContainingPoint(const Clipper2Lib::PolyTree64 &, const Clipper2Lib::Point64, const BOOL)"];
      uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathBooleanOperationHelper.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:1778 isFatal:0 description:"currentPositiveNode should not be a hole."];

      uint64_t v7 = *v4;
    }
    if (sub_10013462C((uint64_t *)a2, (void *)(v7 + 40)) == 1)
    {
      long long v15 = *(uint64_t **)(*v4 + 16);
      long long v16 = *(uint64_t **)(*v4 + 24);
      while (v15 != v16)
      {
        if (sub_10013462C((uint64_t *)a2, (void *)(*v15 + 40)) == 1)
        {
          uint64_t v18 = *v15;
          long long v19 = *(_OWORD *)(a2 + 16);
          v22[0] = *(_OWORD *)a2;
          v22[1] = v19;
          v22[2] = *(_OWORD *)(a2 + 32);
          return sub_100361AA0(v18, v22, 0);
        }
        ++v15;
      }
      if ((a3 & 1) == 0) {
        operator new();
      }
    }
  }
  return 0;
}

void sub_100361F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100361F88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100361FCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100362010(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100362054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100362098(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  sub_10035D070(a1);
  id v10 = [*(id *)a1 elementCount];
  [*(id *)a1 moveToPoint:a3, a4];
  id v11 = [*(id *)a1 elementCount];
  unint64_t v12 = *(void **)(a1 + 8);
  if (v11 == v10) {
    sub_100354830(v12, a2, a5);
  }
  else {
    sub_1003544F8(v12, a2, a5);
  }
  *(void *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a5;
}

void sub_100362134(uint64_t a1, _OWORD *a2, uint64_t a3, double a4, double a5, double a6)
{
  if (!sub_100065BF8(*(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    [*(id *)a1 currentPoint];
    double v12 = *(double *)(a1 + 32);
    double v13 = *(double *)(a1 + 40);
    long long v14 = a2[1];
    v17[0] = *a2;
    v17[1] = v14;
    _OWORD v17[2] = a2[2];
    if (!sub_10035BAF8((double *)v17, v15, v16, v12, v13, a4, a5)) {
      sub_10035D070(a1);
    }
  }
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x220], 8) = a3;
  *(double *)(a1 + 56) = a6;
}

void sub_1003621D8(uint64_t a1)
{
  sub_10035D070(a1);
  [*(id *)a1 closePath];
  sub_1003544F8(*(void **)(a1 + 8), *(void *)(a1 + 16), *(double *)(a1 + 24));
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);

  sub_1003544F8(v2, v3, v4);
}

double sub_100362228(uint64_t *a1, double a2)
{
  uint64_t v2 = *a1;
  double v3 = (double)(0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  if (v3 > a2) {
    double v3 = 0.0;
  }
  double v4 = a2 - v3;
  uint64_t v5 = (uint64_t)v4;
  double v6 = v4 - (double)(uint64_t)v4;
  if (v6 == 0.0) {
    return *(double *)(a1[3] + 16 * *(void *)(v2 + 24 * v5));
  }
  int v8 = (uint64_t *)(v2 + 24 * v5);
  int v9 = *((unsigned __int8 *)v8 + 8);
  uint64_t v10 = *v8;
  unint64_t v11 = *v8 + 1;
  if (v9)
  {
    uint64_t v12 = a1[3];
    double v13 = (float64x2_t *)(v12 + 16 * v10);
    v16[0] = *v13;
    v16[1] = *(float64x2_t *)(v12 + 16 * v11);
    _OWORD v16[2] = v13[2];
    _OWORD v16[3] = v13[3];
    return sub_100064570(v16, v6);
  }
  else
  {
    uint64_t v14 = a1[3];
    double v15 = (double *)(v14 + 16 * (v11 % ((a1[4] - v14) >> 4)));
    return sub_100065E00(*(double *)(v14 + 16 * v10), *(double *)(v14 + 16 * v10 + 8), *v15, v15[1], v6);
  }
}

void sub_100362344(uint64_t *a1, uint64_t a2, int a3, int a4, long long *a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  if (a3)
  {
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    long long v13 = a5[1];
    long long v63 = *a5;
    v62[2] = sub_100362C98;
    _OWORD v62[3] = &unk_1014F1168;
    long long v64 = v13;
    long long v65 = a5[2];
    v62[4] = a6;
    uint64_t v66 = a2;
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = sub_100362CDC;
    v61[3] = &unk_1014F1188;
    void v61[4] = a6;
    v61[5] = a2;
    sub_100362794(a1, a4, 0, v62, v61, a7, a8, a9, a10);
  }
  else
  {
    uint64_t v52 = 0;
    int v53 = &v52;
    uint64_t v54 = 0x4812000000;
    long long v55 = sub_100362D70;
    __n128 v56 = sub_100362D8C;
    __n128 v57 = "";
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    uint64_t v43 = 0;
    int v44 = &v43;
    uint64_t v45 = 0x4812000000;
    uint64_t v46 = sub_100362D9C;
    int v47 = sub_100362DC0;
    int v48 = "";
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int v49 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x4812000000;
    int v37 = sub_100362DD8;
    uint64_t v38 = sub_100362DFC;
    uint64_t v39 = "";
    int v41 = 0;
    uint64_t v42 = 0;
    __p = 0;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100362E14;
    _OWORD v33[3] = &unk_1014F11B0;
    v33[4] = &v52;
    v33[5] = &v43;
    v33[6] = &v34;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10036300C;
    v32[3] = &unk_1014F11D8;
    v32[4] = &v52;
    v32[5] = &v43;
    v32[6] = &v34;
    sub_100362794(a1, a4, 1, v33, v32, a8, a7, a9, a10);
    uint64_t v14 = v53[7];
    if (v14 - 1 >= 0)
    {
      uint64_t v15 = ((v44[7] - v44[6]) >> 4) - 1;
      do
      {
        --v14;
        if ((*(void *)(v53[6] + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14))
        {
          uint64_t v16 = v44[6];
          long long v17 = (double *)(v16 + 16 * (v15 - 3));
          double v18 = *v17;
          double v19 = v17[1];
          uint64_t v20 = v16 + 16 * v15;
          double v21 = *(double *)(v20 - 16);
          double v22 = *(double *)(v20 - 8);
          double v23 = *(double *)(v20 - 32);
          double v24 = *(double *)(v20 - 24);
          double v25 = *(double *)(v35[6] + 8 * (v15 - 3));
          sub_10035D070(a6);
          [*(id *)a6 curveToPoint:v18 controlPoint1:v19 controlPoint2:v21 v22];
          sub_1003544F8(*(void **)(a6 + 8), a2, v25);
          uint64_t v26 = -4;
        }
        else
        {
          __int16 v27 = (double *)(v44[6] + 16 * v15);
          double v28 = *v27;
          double v29 = v27[1];
          long long v30 = a5[1];
          v31[0] = *a5;
          v31[1] = v30;
          v31[2] = a5[2];
          sub_100362134(a6, v31, a2, v28, v29, *(double *)(v35[6] + 8 * v15));
          uint64_t v26 = -1;
        }
        v15 += v26;
      }
      while (v14 > 0);
    }
    _Block_object_dispose(&v34, 8);
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v43, 8);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    _Block_object_dispose(&v52, 8);
    if (v58) {
      operator delete(v58);
    }
  }
}

void sub_100362734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a39, 8);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Block_object_dispose(&a48, 8);
  if (a54) {
    operator delete(a54);
  }
  _Unwind_Resume(a1);
}

void sub_100362794(uint64_t *a1, int a2, int a3, void *a4, void *a5, double a6, double a7, double a8, double a9)
{
  long long v17 = a4;
  id v18 = a5;
  uint64_t v21 = *a1;
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v23.n128_f64[0] = (double)v22;
  if ((double)v22 <= a7) {
    double v24 = (double)v22;
  }
  else {
    double v24 = 0.0;
  }
  double v25 = a7 - v24;
  if (v23.n128_f64[0] > a6) {
    v23.n128_f64[0] = 0.0;
  }
  double v26 = a6 - v23.n128_f64[0];
  uint64_t v27 = (uint64_t)(a6 - v23.n128_f64[0]);
  double v28 = (double)v27;
  uint64_t v29 = (uint64_t)v25;
  if (v25 == v26 && v26 == v28)
  {
    sub_100363384(a1, v27, (uint64_t)v25, a2, a3, v17, v18);
    goto LABEL_44;
  }
  uint64_t v31 = v21 + 24 * v27;
  if (v26 >= v25 || v27 != v29)
  {
    if (*(unsigned char *)(v31 + 8))
    {
      double v33 = v26 - v28;
      uint64_t v34 = a1[3] + 16 * *(void *)v31;
      float64x2_t v54 = *(float64x2_t *)v34;
      long long v55 = *(_OWORD *)(v34 + 16);
      long long v56 = *(_OWORD *)(v34 + 32);
      long long v57 = *(_OWORD *)(v34 + 48);
      long long v50 = xmmword_101175160;
      long long v51 = xmmword_101175160;
      long long v52 = xmmword_101175160;
      long long v53 = xmmword_101175160;
      sub_100347D40(&v54, (uint64_t)&v50, v26 - v28, 1.0);
      if (a3)
      {
        *(double *)&long long v50 = a8;
        *((double *)&v50 + 1) = a9;
      }
      (*((void (**)(id, long long *, double, double))v18 + 2))(v18, &v50, v33 + (double)*(uint64_t *)(v21 + 24 * v27 + 16), (double)(*(void *)(v21 + 24 * v27 + 16) + 1));
      goto LABEL_30;
    }
    if (a3)
    {
      if (a2)
      {
LABEL_30:
        if ((v27 + 1) % (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3)) != v29)
        {
          BOOL v42 = 0;
          if (a2 && (a3 & 1) == 0) {
            BOOL v42 = v25 == (double)v29;
          }
          sub_100363384(a1, v27 + 1, (uint64_t)v25, v42, a3, v17, v18);
        }
        double v43 = (double)v29;
        if (v25 != (double)v29)
        {
          uint64_t v44 = *a1;
          uint64_t v45 = *a1 + 24 * v29;
          if (*(unsigned char *)(v45 + 8))
          {
            double v46 = v25 - v43;
            uint64_t v47 = a1[3] + 16 * *(void *)v45;
            float64x2_t v54 = *(float64x2_t *)v47;
            long long v55 = *(_OWORD *)(v47 + 16);
            long long v56 = *(_OWORD *)(v47 + 32);
            long long v57 = *(_OWORD *)(v47 + 48);
            long long v50 = xmmword_101175160;
            long long v51 = xmmword_101175160;
            long long v52 = xmmword_101175160;
            long long v53 = xmmword_101175160;
            sub_100347D40(&v54, (uint64_t)&v50, 0.0, v25 - v43);
            if ((a3 & 1) == 0)
            {
              *(double *)&long long v53 = a8;
              *((double *)&v53 + 1) = a9;
            }
            double v48 = (double)*(uint64_t *)(v44 + 24 * v29 + 16);
            (*((void (**)(id, long long *, double, double))v18 + 2))(v18, &v50, v48, v46 + v48);
          }
          else if (a3)
          {
            int v49 = (double *)(a1[3] + 16 * *(void *)v45);
            v17[2](v17, *v49, v49[1], (double)*(uint64_t *)(v44 + 24 * v29 + 16));
          }
          else if ((a2 & 1) == 0)
          {
            v17[2](v17, a8, a9, v25 - v43 + (double)*(uint64_t *)(v44 + 24 * v29 + 16));
          }
        }
        goto LABEL_44;
      }
      v20.n128_f64[0] = v26 - v28 + (double)*(uint64_t *)(v21 + 24 * v27 + 16);
      v23.n128_f64[0] = a8;
      v19.n128_f64[0] = a9;
    }
    else
    {
      int v41 = (unint64_t *)(a1[3] + 16 * ((*(void *)v31 + 1) % (unint64_t)((a1[4] - a1[3]) >> 4)));
      v23.n128_u64[0] = *v41;
      v19.n128_u64[0] = v41[1];
      v20.n128_f64[0] = (double)(*(void *)(v21 + 24 * v27 + 16) + 1);
    }
    ((void (*)(void (**)(void, double, double, double), __n128, __n128, __n128))v17[2])(v17, v23, v19, v20);
    goto LABEL_30;
  }
  if (*(unsigned char *)(v31 + 8))
  {
    double v35 = v26 - v28;
    double v36 = v25 - v28;
    uint64_t v37 = a1[3] + 16 * *(void *)(v21 + 24 * v27);
    float64x2_t v54 = *(float64x2_t *)v37;
    long long v55 = *(_OWORD *)(v37 + 16);
    long long v56 = *(_OWORD *)(v37 + 32);
    long long v57 = *(_OWORD *)(v37 + 48);
    long long v50 = xmmword_101175160;
    long long v51 = xmmword_101175160;
    long long v52 = xmmword_101175160;
    long long v53 = xmmword_101175160;
    sub_100347D40(&v54, (uint64_t)&v50, v26 - v28, v25 - v28);
    uint64_t v38 = 48;
    if (a3) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (double *)((char *)&v50 + v38);
    *uint64_t v39 = a8;
    v39[1] = a9;
    double v40 = (double)*(uint64_t *)(v21 + 24 * v27 + 16);
    (*((void (**)(id, long long *, double, double))v18 + 2))(v18, &v50, v35 + v40, v36 + v40);
  }
  else if ((a2 & 1) == 0)
  {
    v17[2](v17, a8, a9, v25 - v28 + (double)*(uint64_t *)(v21 + 24 * v27 + 16));
  }
LABEL_44:
}

void sub_100362C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100362C98(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v5;
  id v6[2] = *(_OWORD *)(a1 + 72);
  sub_100362134(v4, v6, *(void *)(a1 + 88), a2, a3, a4);
}

void sub_100362CDC(uint64_t a1, double *a2, double a3, double a4)
{
  double v5 = a2[6];
  double v6 = a2[7];
  double v7 = a2[2];
  double v8 = a2[3];
  double v9 = a2[4];
  double v10 = a2[5];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  sub_10035D070(v11);
  [*(id *)v11 curveToPoint:v5 controlPoint1:v6 controlPoint2:v7 v8, v9, v10];
  long long v13 = *(void **)(v11 + 8);

  sub_1003544F8(v13, v12, a4);
}

void *sub_100362D70(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  result[8] = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return result;
}

void sub_100362D8C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    operator delete(v1);
  }
}

__n128 sub_100362D9C(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100362DC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_100362DD8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100362DFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100362E14(void *a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a1[4] + 8) + 48;
  char v34 = 0;
  sub_100213134(v8, &v34);
  double v9 = *(void **)(a1[5] + 8);
  double v10 = (double *)v9[7];
  unint64_t v11 = v9[8];
  if ((unint64_t)v10 >= v11)
  {
    long long v13 = (double *)v9[6];
    uint64_t v14 = ((char *)v10 - (char *)v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_100004E40();
    }
    uint64_t v16 = v11 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      id v18 = (char *)sub_10001EAB0((uint64_t)(v9 + 8), v17);
      long long v13 = (double *)v9[6];
      double v10 = (double *)v9[7];
    }
    else
    {
      id v18 = 0;
    }
    __n128 v19 = (double *)&v18[16 * v14];
    __n128 v20 = &v18[16 * v17];
    *__n128 v19 = a2;
    v19[1] = a3;
    uint64_t v12 = v19 + 2;
    if (v10 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
        v19 -= 2;
        v10 -= 2;
      }
      while (v10 != v13);
      long long v13 = (double *)v9[6];
    }
    _OWORD v9[6] = v19;
    v9[7] = v12;
    v9[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *double v10 = a2;
    v10[1] = a3;
    uint64_t v12 = v10 + 2;
  }
  v9[7] = v12;
  uint64_t v21 = *(void **)(a1[6] + 8);
  unint64_t v22 = (double *)v21[7];
  unint64_t v23 = v21[8];
  if ((unint64_t)v22 >= v23)
  {
    double v25 = (double *)v21[6];
    uint64_t v26 = v22 - v25;
    if ((unint64_t)(v26 + 1) >> 61) {
      sub_100004E40();
    }
    unint64_t v27 = v23 - (void)v25;
    unint64_t v28 = (uint64_t)(v23 - (void)v25) >> 2;
    if (v28 <= v26 + 1) {
      unint64_t v28 = v26 + 1;
    }
    if (v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29)
    {
      long long v30 = (char *)sub_10002B494((uint64_t)(v21 + 8), v29);
      double v25 = (double *)v21[6];
      unint64_t v22 = (double *)v21[7];
    }
    else
    {
      long long v30 = 0;
    }
    uint64_t v31 = (double *)&v30[8 * v26];
    int v32 = &v30[8 * v29];
    *uint64_t v31 = a4;
    double v24 = v31 + 1;
    while (v22 != v25)
    {
      uint64_t v33 = *((void *)v22-- - 1);
      *((void *)v31-- - 1) = v33;
    }
    v21[6] = v31;
    v21[7] = v24;
    v21[8] = v32;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *unint64_t v22 = a4;
    double v24 = v22 + 1;
  }
  v21[7] = v24;
}

void sub_10036300C(void *a1, char *a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a1[4] + 8) + 48;
  char v61 = 1;
  sub_100213134(v8, &v61);
  sub_10036350C(*(void *)(a1[5] + 8) + 48, *(void *)(*(void *)(a1[5] + 8) + 56), a2, a2 + 64, 4);
  double v9 = *(void **)(a1[6] + 8);
  double v10 = (double *)v9[7];
  unint64_t v11 = v9[8];
  if ((unint64_t)v10 >= v11)
  {
    long long v13 = (double *)v9[6];
    uint64_t v14 = v10 - v13;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_66;
    }
    unint64_t v15 = v11 - (void)v13;
    unint64_t v16 = (uint64_t)(v11 - (void)v13) >> 2;
    if (v16 <= v14 + 1) {
      unint64_t v16 = v14 + 1;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      id v18 = (char *)sub_10002B494((uint64_t)(v9 + 8), v17);
      long long v13 = (double *)v9[6];
      double v10 = (double *)v9[7];
    }
    else
    {
      id v18 = 0;
    }
    __n128 v19 = (double *)&v18[8 * v14];
    __n128 v20 = &v18[8 * v17];
    *__n128 v19 = a3;
    uint64_t v12 = v19 + 1;
    while (v10 != v13)
    {
      uint64_t v21 = *((void *)v10-- - 1);
      *((void *)v19-- - 1) = v21;
    }
    _OWORD v9[6] = v19;
    v9[7] = v12;
    v9[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *double v10 = a3;
    uint64_t v12 = v10 + 1;
  }
  v9[7] = v12;
  unint64_t v22 = *(void **)(a1[6] + 8);
  unint64_t v23 = (char *)v22[7];
  unint64_t v24 = v22[8];
  if ((unint64_t)v23 >= v24)
  {
    uint64_t v26 = (char *)v22[6];
    uint64_t v27 = (v23 - v26) >> 3;
    if ((unint64_t)(v27 + 1) >> 61) {
      goto LABEL_66;
    }
    unint64_t v28 = v24 - (void)v26;
    unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 2;
    if (v29 <= v27 + 1) {
      unint64_t v29 = v27 + 1;
    }
    if (v28 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30)
    {
      uint64_t v31 = (char *)sub_10002B494((uint64_t)(v22 + 8), v30);
      uint64_t v26 = (char *)v22[6];
      unint64_t v23 = (char *)v22[7];
    }
    else
    {
      uint64_t v31 = 0;
    }
    int v32 = &v31[8 * v27];
    uint64_t v33 = &v31[8 * v30];
    *(void *)int v32 = 0xBFF0000000000000;
    double v25 = v32 + 8;
    while (v23 != v26)
    {
      uint64_t v34 = *((void *)v23 - 1);
      v23 -= 8;
      *((void *)v32 - 1) = v34;
      v32 -= 8;
    }
    v22[6] = v32;
    v22[7] = v25;
    v22[8] = v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)unint64_t v23 = 0xBFF0000000000000;
    double v25 = v23 + 8;
  }
  v22[7] = v25;
  double v35 = *(void **)(a1[6] + 8);
  double v36 = (char *)v35[7];
  unint64_t v37 = v35[8];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = (char *)v35[6];
    uint64_t v40 = (v36 - v39) >> 3;
    if ((unint64_t)(v40 + 1) >> 61) {
      goto LABEL_66;
    }
    unint64_t v41 = v37 - (void)v39;
    unint64_t v42 = (uint64_t)(v37 - (void)v39) >> 2;
    if (v42 <= v40 + 1) {
      unint64_t v42 = v40 + 1;
    }
    if (v41 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v43)
    {
      uint64_t v44 = (char *)sub_10002B494((uint64_t)(v35 + 8), v43);
      uint64_t v39 = (char *)v35[6];
      double v36 = (char *)v35[7];
    }
    else
    {
      uint64_t v44 = 0;
    }
    uint64_t v45 = &v44[8 * v40];
    double v46 = &v44[8 * v43];
    *(void *)uint64_t v45 = 0xBFF0000000000000;
    uint64_t v38 = v45 + 8;
    while (v36 != v39)
    {
      uint64_t v47 = *((void *)v36 - 1);
      v36 -= 8;
      *((void *)v45 - 1) = v47;
      v45 -= 8;
    }
    v35[6] = v45;
    v35[7] = v38;
    v35[8] = v46;
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    *(void *)double v36 = 0xBFF0000000000000;
    uint64_t v38 = v36 + 8;
  }
  v35[7] = v38;
  double v48 = *(void **)(a1[6] + 8);
  int v49 = (double *)v48[7];
  unint64_t v50 = v48[8];
  if ((unint64_t)v49 < v50)
  {
    *int v49 = a4;
    long long v51 = v49 + 1;
    goto LABEL_65;
  }
  long long v52 = (double *)v48[6];
  uint64_t v53 = v49 - v52;
  if ((unint64_t)(v53 + 1) >> 61) {
LABEL_66:
  }
    sub_100004E40();
  unint64_t v54 = v50 - (void)v52;
  unint64_t v55 = (uint64_t)(v50 - (void)v52) >> 2;
  if (v55 <= v53 + 1) {
    unint64_t v55 = v53 + 1;
  }
  if (v54 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56)
  {
    long long v57 = (char *)sub_10002B494((uint64_t)(v48 + 8), v56);
    long long v52 = (double *)v48[6];
    int v49 = (double *)v48[7];
  }
  else
  {
    long long v57 = 0;
  }
  uint64_t v58 = (double *)&v57[8 * v53];
  uint64_t v59 = &v57[8 * v56];
  *uint64_t v58 = a4;
  long long v51 = v58 + 1;
  while (v49 != v52)
  {
    uint64_t v60 = *((void *)v49-- - 1);
    *((void *)v58-- - 1) = v60;
  }
  v48[6] = v58;
  v48[7] = v51;
  v48[8] = v59;
  if (v52) {
    operator delete(v52);
  }
LABEL_65:
  v48[7] = v51;
}

void sub_100363384(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, void *a6, void *a7)
{
  unint64_t v22 = a6;
  long long v13 = a7;
  int64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  uint64_t v15 = a2 % v14;
  uint64_t v21 = (uint64_t)(a1[4] - a1[3]) >> 4;
  do
  {
    uint64_t v16 = *a1 + 24 * v15;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = (v15 + 1) % v14;
    if (*(unsigned char *)(v16 + 8))
    {
      v13[2](v13, a1[3] + 16 * v17, (double)v18, (double)(v18 + 1));
      goto LABEL_12;
    }
    if (a5)
    {
      if (v15 != a2 || (a4 & 1) == 0)
      {
        __n128 v20 = (double *)(a1[3] + 16 * v17);
LABEL_11:
        v22[2](*v20, v20[1], (double)v18);
      }
    }
    else if (!a4 || v19 != a3)
    {
      __n128 v20 = (double *)(a1[3] + 16 * ((v17 + 1) % v21));
      ++v18;
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v15 = v19;
  }
  while (v19 != a3);
}

void sub_1003634F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

char *sub_10036350C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  double v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  double v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      sub_100004E40();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_10001EAB0(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v28 = &v18[16 * v15];
    __p = v18;
    uint64_t v34 = v28;
    double v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    unint64_t v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)unint64_t v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    double v35 = v30;
    double v5 = (char *)sub_10001EC38((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[16 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[16 * a5];
    double v25 = &v23[-16 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)uint64_t v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1003636E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036371C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003637A0(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      void v8[3] = a2[3];
      uint64_t v10 = (void *)*v8;
      v8[1] = v9;
      uint64_t v11 = sub_1003638B4((uint64_t)a1, v9, v8 + 2);
      sub_100363A0C(a1, v8, v11);
      a2 = (void *)*a2;
      uint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100363D58(a1, (_OWORD *)a2 + 1);
      a2 = (void *)*a2;
    }
  }
}

void sub_100363880(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1003638A0(_Unwind_Exception *a1)
{
}

void *sub_1003638B4(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_100363AF4(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    __n128 result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *sub_100363A0C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_100363AF4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100363BE4(a1, prime);
    }
  }
}

void sub_100363BE4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100004F34();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(&STACK[0x220], 8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = 0;
  }
}

void *sub_100363D58(void *a1, _OWORD *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  void *v4 = 0;
  v4[1] = v5;
  uint64_t v6 = sub_1003638B4((uint64_t)a1, v5, v4 + 2);
  sub_100363A0C(a1, v4, v6);
  return v4;
}

void sub_100363DC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_100363DD4(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_10001EBF4(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100363E2C(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x220], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100363E48(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  id v6[2] = *a2;
  _OWORD v6[3] = v8;
  *uint64_t v6 = 0;
  v6[1] = v7;
  uint8x8_t v9 = sub_100363ED0(a1, v6);
  if ((v10 & 1) == 0) {
    operator delete(v6);
  }
  return v9;
}

void sub_100363EBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100363ED0(void *a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  uint64_t v6 = sub_100363F28((uint64_t)a1, v4, v5);
  if (v6) {
    return v6;
  }
  sub_100364040(a1, v2);
  return v2;
}

void *sub_100363F28(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    uint64_t v6 = *(void **)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = (void *)*v6; i; uint64_t i = (void *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    uint64_t v11 = 2 * v3;
    BOOL v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v13 = v12 | v11;
    unint64_t v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    sub_10001B9D4(a1, v15);
  }
  return 0;
}

void *sub_100364040(void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *uint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void sub_1003640FC()
{
}

void *sub_100364110(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1014F1208;
  result[1] = v3;
  return result;
}

uint64_t sub_100364158(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1014F1208;
  a2[1] = v2;
  return result;
}

uint64_t sub_100364184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6);
}

uint64_t sub_1003641A0(uint64_t a1, uint64_t a2)
{
  if (sub_1001479F0(a2, (uint64_t)&off_1014F1288)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003641E0()
{
  return &off_1014F1288;
}

void sub_100364200()
{
  xmmword_1016A9740 = (__int128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)algn_1016A9750 = vdupq_n_s64(0x8000000000000000);
  xmmword_1016A9760 = (__int128)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)algn_1016A9770 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
}

void sub_1003643FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100364418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100364428(uint64_t a1)
{
}

void sub_100364430(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 40)) initWithRange:*(void *)(a1 + 48) *(void *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint8x8_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100364914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100364930(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  float v9 = (void *)a1[4];
  float v10 = [a2 substringToIndex:1];
  [v9 appendString:v10];

  ++*(void *)(*(void *)(a1[5] + 8) + 24);
  unint64_t v11 = a1[6];
  if (v11) {
    LOBYTE(v11) = *(void *)(*(void *)(a1[5] + 8) + 24) >= v11;
  }
  *a7 = v11;
}

void sub_100364AB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v14 = a2;
  if ((unint64_t)[v14 length] >= 2)
  {
    float v9 = +[NSBundle mainBundle];
    float v10 = [v9 localizedStringForKey:@"%@.%@" value:0 table:0];

    unint64_t v11 = *(void **)(a1 + 32);
    BOOL v12 = [v14 substringToIndex:1];
    size_t v13 = [*(id *)(a1 + 40) substringFromIndex:[v14 length]];
    [v11 appendFormat:v10, v12, v13];
  }
  *a7 = 1;
}

void sub_10036571C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100365760(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100365CA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100365CE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003661B0(id a1)
{
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", @"*?+[(){}^$|\\./");
  objc_storeStrong((id *)&qword_1016A9780, v1);
  if (!qword_1016A9780)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F13C0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010A3DE0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F13E0);
    }
    id v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v2);
    }
    uint64_t v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[NSString(CRLAdditions) crl_escapeForIcuRegex]_block_invoke");
    uint8x8_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSString_CRLAdditions.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 440, 0, "invalid nil value for '%{public}s'", "icuRegexCharSet");
  }
}

void sub_10036633C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100366380(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CFStringTokenizerTokenType sub_100367BA0(uint64_t a1, CFStringTokenizerRef tokenizer)
{
  do
  {
    while (1)
    {
      CFStringTokenizerTokenType Token = CFStringTokenizerAdvanceToNextToken(tokenizer);
      CFStringTokenizerTokenType v5 = Token;
      if (Token) {
        break;
      }
      if (CFStringTokenizerGetCurrentTokenRange(tokenizer).location == -1) {
        return v5;
      }
    }
    if (*(unsigned char *)(a1 + 32)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = (Token & 0x10) == 0;
    }
  }
  while (!v6);
  return v5;
}

void sub_100367C74(id a1)
{
  __int16 v3 = -4;
  id v1 = [objc_alloc((Class)NSString) initWithCharacters:&v3 length:1];
  id v2 = (void *)qword_1016A9790;
  qword_1016A9790 = (uint64_t)v1;
}

void sub_100367E28(id a1)
{
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:@"ـ‑-‐–—"];
  id v2 = (void *)qword_1016A97A8;
  qword_1016A97A8 = v1;
}

void sub_100367EDC(id a1)
{
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:@"'\"’‘‚“”„«»‹›」「』『"];
  id v2 = (void *)qword_1016A97B8;
  qword_1016A97B8 = v1;
}

void sub_100368648(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036868C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100368B10(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v5 = [*(id *)(a1 + 32) rangeOfString:a2];
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    unint64_t v8 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v5, v6);
    [v7 setObject:v9 forKeyedSubscript:v8];
  }
}

int64_t sub_100368BA4(id a1, NSValue *a2, NSValue *a3)
{
  uint8x8_t v4 = a3;
  id v5 = [(NSValue *)a2 rangeValue];
  id v6 = [(NSValue *)v4 rangeValue];

  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

void sub_100368EF4(id a1)
{
  uint64_t v1 = +[NSMutableCharacterSet characterSetWithRange:](NSMutableCharacterSet, "characterSetWithRange:", 0, 32);
  id v2 = (void *)qword_1016A97C0;
  qword_1016A97C0 = v1;

  [(id)qword_1016A97C0 addCharactersInString:@"\"\\""];
  int v4 = 539566120;
  id v3 = [objc_alloc((Class)NSString) initWithCharacters:&v4 length:2];
  [(id)qword_1016A97C0 addCharactersInString:v3];
}

void sub_100369124(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100369168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100369798(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100369C98(id a1)
{
  id v4 = 0;
  id v1 = [objc_alloc((Class)NSRegularExpression) initWithPattern:@"<REDACT .*? REDACT>" options:8 error:&v4];
  id v2 = v4;
  id v3 = (void *)qword_1016A97D0;
  qword_1016A97D0 = (uint64_t)v1;
}

void sub_10036A84C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036A890(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AE14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AE58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AE9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AEE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AF24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036AF68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036B178(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036B1BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10036B2D8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (char *)[v1 currentSearchResultsCount] + 1;

  return [v1 setCurrentSearchResultsCount:v2];
}

void sub_10036B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_10036B7C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10036B7D8(uint64_t a1)
{
}

void sub_10036B7E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_class();
  id v5 = [*(id *)(a1 + 32) searchString];
  id v6 = [*(id *)(a1 + 32) searchOptions];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10036B938;
  v12[3] = &unk_1014F1738;
  uint64_t v7 = *(void *)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v9;
  long long v13 = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10036BA24;
  _OWORD v10[3] = &unk_1014CBBB0;
  id v11 = *(id *)(a1 + 40);
  [v4 _recursiveSearchWithSearchTarget:v3 forString:v5 options:v6 dispatchGroup:v7 hitBlock:v12 completionBlock:v10];
}

void sub_10036B938(void *a1, void *a2)
{
  id v8 = a2;
  if ([*(id *)(*(void *)(a1[6] + 8) + 40) isEqual:*(void *)(a1[4] + 128)])
  {
    id v3 = (void *)a1[5];
    id v4 = [v8 model];
    id v5 = [v3 objectForKey:v4];

    if (!v5)
    {
      id v5 = +[NSMutableArray array];
      id v6 = (void *)a1[5];
      uint64_t v7 = [v8 model];
      [v6 setObject:v5 forKey:v7];
    }
    [v5 addObject:v8];
  }
}

void sub_10036BA24(uint64_t a1)
{
}

uint64_t sub_10036BA2C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_10036BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10036BBCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) isEqual:*(void *)(*(void *)(a1 + 32) + 128)])
  {
    [v3 searchReferencePoint];
    if ((sub_100065BC8(v4, v5) & 1) == 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1780);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A4240();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F17A0);
      }
      id v6 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v6);
      }
      uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFindReplaceController performSearchWithSearchTarget:resultsArray:]_block_invoke");
      id v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLFindReplaceController.m"];
      +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:286 isFatal:0 description:"the hit reference should have a valid point"];
    }
    long long v9 = [*(id *)(a1 + 32) layoutSearchResults];
    [v9 addObject:v3];

    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_10036BD7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036BDC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036C0C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10036C0EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) isEqual:*(void *)(*(void *)(a1 + 32) + 128)])
  {
    double v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    double v5 = [v3 model];
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      id v7 = [v6 mutableCopy];
      [v7 addObject:v3];
      id v8 = [v7 copy];
    }
    else
    {
      id v17 = v3;
      id v8 = +[NSArray arrayWithObjects:&v17 count:1];
    }
    long long v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    float v10 = [v3 model];
    [v9 setObject:v8 forKey:v10];

    [v3 searchReferencePoint];
    if ((sub_100065BC8(v11, v12) & 1) == 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F17C0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A42C8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F17E0);
      }
      long long v13 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v13);
      }
      id v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFindReplaceController asyncPerformSearchWithSearchTarget:resultsArray:completionBlock:]_block_invoke");
      size_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLFindReplaceController.m"];
      +[CRLAssertionHandler handleFailureInFunction:v14 file:v15 lineNumber:317 isFatal:0 description:"the hit reference should have a valid point"];
    }
    uint64_t v16 = [*(id *)(a1 + 32) layoutSearchResults];
    [v16 addObject:v3];

    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_10036C388(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036C3CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036C410(uint64_t a1)
{
}

uint64_t sub_10036C418(uint64_t a1)
{
  if ([*(id *)(a1 + 32) searchHighlightsEnabled])
  {
    id v2 = [*(id *)(a1 + 32) findReplaceDelegate];
    id v3 = [v2 visibleRootIndexRange];
    uint64_t v5 = v4;

    if (v3 != [*(id *)(a1 + 32) highlightsRange] || v5 != v6)
    {
      [*(id *)(a1 + 32) setHighlightsRange:v3, v5];
      [*(id *)(a1 + 32) p_handleVisibleResults:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    }
  }
  id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v8();
}

void sub_10036C6B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036C6FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036CAAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 isEqual:*(void *)(*(void *)(a1 + 32) + 128)]) {
    [*(id *)(a1 + 32) p_handleVisibleResults:v5];
  }
}

void sub_10036CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10036CFBC(uint64_t a1, void *a2)
{
  id v23 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 32) pulseSearchResult:0 autohiding:0];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    [*(id *)(a1 + 32) setStartingPointSearchReference:];
    [*(id *)(a1 + 32) willScrollToReference:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    uint64_t v4 = [*(id *)(a1 + 32) findReplaceDelegate];
    id v5 = [v4 interactiveCanvasControllerForFindController:*(void *)(a1 + 32)];

    uint64_t v6 = [*(id *)(a1 + 32) findReplaceDelegate];
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = [*(id *)(a1 + 32) findReplaceDelegate];
      uint64_t v9 = (uint64_t)[v8 scrollOptionsForFindReplace];
    }
    else
    {
      uint64_t v9 = 8;
    }
    [v5 scrollSearchReferenceToVisible:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) scrollOptions:v9];
    if (*(unsigned char *)(a1 + 64)) {
      [*(id *)(a1 + 32) pulseSearchResult:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) autohiding:[*(id *)(a1 + 32) searchHighlightsEnabled] ^ 1];
    }
    if ([*(id *)(a1 + 32) searchHighlightsEnabled])
    {
      [*(id *)(a1 + 32) updateHighlights];
      double v11 = [*(id *)(a1 + 32) findReplaceDelegate];
      id v12 = [v11 visibleRootIndexRange];
      uint64_t v14 = v13;

      if (v12 != *(id *)(a1 + 48) || v14 != *(void *)(a1 + 56)) {
        [v5 layoutInvalidated];
      }
    }

    float v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }
  else
  {
    float v10 = 0;
  }
  size_t v15 = (objc_class *)objc_opt_class();
  BOOL v21 = sub_100246E2C(v10, v15, 1, v16, v17, v18, v19, v20, (uint64_t)&OBJC_PROTOCOL___CRLSearchReference);
  [*(id *)(a1 + 32) setPrimaryFindResultSearchReference:v21];

  int v22 = [*(id *)(a1 + 32) findReplaceDelegate];
  [v22 updateCountInSearchBarUI];
}

void sub_10036D6F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036D734(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036D778(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036D7BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10036D9B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v3 calculatePointFromSearchReference:*(void *)(a1 + 32)];
    [*(id *)(a1 + 32) setSearchReferencePoint:];
  }
}

void sub_10036DB58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v3 calculatePointFromSearchReference:*(void *)(a1 + 32)];
    [*(id *)(a1 + 32) setSearchReferencePoint:];
  }
}

void sub_10036F5B4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      void block[2] = sub_10036F674;
      block[3] = &unk_1014CC280;
      uint64_t v6 = v2;
      dispatch_async(v3, block);
    }
    else
    {
      uint64_t v4 = (void (*)(void))v2[2];
      v4();
    }
  }
}

uint64_t sub_10036F674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_10036FEA4(BOOL result)
{
  if (result != 2)
  {
    if (result == 1)
    {
      int v1 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1960);
      }
      id v2 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A4500(v1, v2);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F1980);
      }
      id v3 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_101066770(v3, v1);
      }
      uint64_t v4 = +[NSString stringWithUTF8String:"CRLInputType CRLInputTypeForUITouchType(UITouchType)"];
      id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInputType.m"];
      +[CRLAssertionHandler handleFailureInFunction:v4 file:v5 lineNumber:20 isFatal:0 description:"Unexpected touch type UITouchTypeIndirect"];

      return 0;
    }
    else
    {
      return result == 0;
    }
  }
  return result;
}

void sub_100370008(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037004C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037064C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100370690(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003706D4(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100370718(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037075C(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_1003709F8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100370A3C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100370D58(id a1)
{
  int v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100370E38(uint64_t a1)
{
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 64) error];
  uint64_t v4 = (void *)v3;
  unsigned int v5 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 152));
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v3 == 0;
  }
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = [*(id *)(v6 + 8) AVAssetAndReturnError:0];
      float v10 = [v9 tracks];

      if (v10) {
        LODWORD(v10) = +[CRLMovieCompatibilityChecker assetContainsHEVCVideoTracks:v9];
      }
      double v11 = *(void **)(a1 + 32);
      if (v8 <= 2 && v10 == 0)
      {
        [*(id *)(a1 + 32) p_finishConvertingWithConvertedMovieData:0 error:0 completionHandler:*(void *)(a1 + 40)];
      }
      else
      {
        uint64_t v13 = v11[5];
        if (v13 <= 2)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F1AA0);
          }
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_1010A4754();
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F1AC0);
          }
          uint64_t v14 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
            sub_10106590C(v14);
          }
          size_t v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityConverter convertMediaWithCompletionHandler:]_block_invoke");
          uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityConverter.m"];
          +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:186 isFatal:0 description:"Optimizing movie past what is requested!"];

          double v11 = *(void **)(a1 + 32);
          uint64_t v13 = v11[5];
        }
        if (v13 == 3) {
          int v17 = (int)v10;
        }
        else {
          int v17 = 0;
        }
        uint64_t v18 = v11[1];
        if (v17 == 1)
        {
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_10037125C;
          _OWORD v22[3] = &unk_1014D0B58;
          v22[4] = v11;
          id v23 = *(id *)(a1 + 40);
          [v11 p_convertMovieData:v18 fromPlayableByAVFoundationToThisDeviceWithCompletionHandler:v22];
          uint64_t v19 = v23;
        }
        else
        {
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          _OWORD v20[2] = sub_100371270;
          v20[3] = &unk_1014D0B58;
          v20[4] = v11;
          id v21 = *(id *)(a1 + 40);
          [v11 p_convertMovieData:v18 fromPlayableByAVFoundationToAllDevicesWithCompletionHandler:v20];
          uint64_t v19 = v21;
        }
      }
    }
    else
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_1003711C8;
      _OWORD v24[3] = &unk_1014D0AB0;
      float64x2_t v24[4] = v6;
      id v25 = *(id *)(a1 + 40);
      [v6 p_checkInitialCompatibilityLevelWithCompletionHandler:v24];
    }
  }
  else
  {
    [*(id *)(a1 + 32) p_finishConvertingWithConvertedMovieData:0 v3:*(void *)(a1 + 40)];
  }
}

id sub_1003711C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) convertMediaWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_1003711D4(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100371218(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10037125C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) p_finishConvertingWithConvertedMovieData:a2 error:a3 completionHandler:*(void *)(a1 + 40)];
}

id sub_100371270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) p_finishConvertingWithConvertedMovieData:a2 error:a3 completionHandler:*(void *)(a1 + 40)];
}

void sub_1003715B8(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003715FC(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100371AE8(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100371B28(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100371B6C(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100371BB0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) progress];
  double v3 = v2;
  [*(id *)(*(void *)(a1 + 32) + 96) maxValue];
  double v5 = v4 * v3;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 96);

  return [v6 setValue:v5];
}

void sub_100371C10(uint64_t a1)
{
  float v2 = qword_1016A9810;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100371CE8;
  v3[3] = &unk_1014F1CE0;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  dispatch_async(v2, v3);
}

void sub_100371CE8(uint64_t a1)
{
  float v2 = (void *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 104));
  [*(id *)(*v2 + 96) maxValue];
  [*(id *)(*v2 + 96) setValue:];
  id v3 = [*(id *)(*v2 + 56) status];
  if (v3 == (id)3)
  {
    if (atomic_load((unsigned int *)(*v2 + 152)))
    {
      id v5 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
      v5();
    }
    else
    {
      float v10 = [[_TtC8Freeform27CRLPreinsertionAssetWrapper alloc] initWithUrl:*(void *)(a1 + 40) owner:*(void *)(*(void *)(a1 + 32) + 48)];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_100371EF8;
      void v11[3] = &unk_1014F1C98;
      int8x16_t v12 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      id v13 = *(id *)(a1 + 48);
      id v14 = *(id *)(a1 + 56);
      id v15 = *(id *)(a1 + 64);
      id v16 = *(id *)(a1 + 72);
      [(CRLPreinsertionAssetWrapper *)v10 createAssetWithCompletionHandler:v11];
    }
  }
  else
  {
    uint64_t v6 = (uint64_t)v3;
    if (qword_101719CF8 != -1) {
      dispatch_once(&qword_101719CF8, &stru_1014F1CB8);
    }
    id v7 = off_10166DC90;
    if (os_log_type_enabled((os_log_t)off_10166DC90, OS_LOG_TYPE_DEBUG)) {
      sub_1010A4984(v2, v6, v7);
    }
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 56) error];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
}

void sub_100371EF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_1016A9810;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100372018;
  _OWORD v10[3] = &unk_1014F1C70;
  id v11 = v6;
  long long v12 = *(_OWORD *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void sub_100372018(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    unsigned int v2 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F1B80);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 67110402;
      unsigned int v24 = v2;
      __int16 v25 = 2082;
      uint64_t v26 = "-[CRLMovieCompatibilityConverter p_convertMovieData:withPresetName:completionHandler:]_block_invoke_5";
      __int16 v27 = 2082;
      unint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityConverter.m";
      __int16 v29 = 1024;
      int v30 = 296;
      __int16 v31 = 2112;
      uint64_t v32 = v16;
      __int16 v33 = 2112;
      uint64_t v34 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Received error %@ creating data from %@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F1BA0);
    }
    long long v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLMovieCompatibilityConverter p_convertMovieData:withPresetName:completionHandler:]_block_invoke");
    id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityConverter.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5, v6, 296, 0, "Received error %@ creating data from %@", *(void *)(a1 + 32), *(void *)(a1 + 40) file lineNumber isFatal description];
  }
  id v7 = [*(id *)(*(void *)(a1 + 48) + 56) error];
  id v8 = [*(id *)(a1 + 56) length];
  if ([*(id *)(a1 + 64) length] <= v8) {
    goto LABEL_24;
  }
  if (qword_101719CF8 != -1) {
    dispatch_once(&qword_101719CF8, &stru_1014F1BC0);
  }
  if (os_log_type_enabled((os_log_t)off_10166DC90, OS_LOG_TYPE_DEBUG)) {
    sub_1010A4AE8();
  }
  unint64_t v9 = sub_10026ABC8(*(void **)(a1 + 72));
  if (!sub_10026AE4C(v9)
    || !+[CRLMovieCompatibilityChecker assetContainsH264VideoTracks:*(void *)(a1 + 80)])
  {
    if (!+[CRLMovieCompatibilityChecker isPreset:v9 moreCompatibleThanAsset:*(void *)(a1 + 80)])
    {
      if (qword_101719CF8 != -1) {
        dispatch_once(&qword_101719CF8, &stru_1014F1C48);
      }
      id v15 = off_10166DC90;
      if (os_log_type_enabled((os_log_t)off_10166DC90, OS_LOG_TYPE_DEBUG)) {
        sub_1010A4AA4(v15);
      }
      uint64_t v13 = *(void *)(a1 + 88);
      uint64_t v14 = *(void *)(a1 + 56);
      goto LABEL_30;
    }
    if (qword_101719CF8 != -1) {
      dispatch_once(&qword_101719CF8, &stru_1014F1C28);
    }
    long long v12 = off_10166DC90;
    if (os_log_type_enabled((os_log_t)off_10166DC90, OS_LOG_TYPE_DEBUG)) {
      sub_1010A4A00((id *)(a1 + 72), v12);
    }
LABEL_24:
    uint64_t v13 = *(void *)(a1 + 88);
    uint64_t v14 = *(void *)(a1 + 64);
LABEL_30:
    (*(void (**)(uint64_t, uint64_t, void *))(v13 + 16))(v13, v14, v7);
    goto LABEL_31;
  }
  float v10 = [[CRLMovieCompatibilityChecker alloc] initWithData:*(void *)(a1 + 64)];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _OWORD v18[2] = sub_100372508;
  v18[3] = &unk_1014F1C08;
  uint64_t v11 = *(void *)(a1 + 48);
  v18[4] = v10;
  void v18[5] = v11;
  id v22 = *(id *)(a1 + 88);
  id v19 = *(id *)(a1 + 64);
  id v20 = *(id *)(a1 + 56);
  id v21 = v7;
  [(CRLMovieCompatibilityChecker *)v10 checkCompatibilityUpToLevel:4 completionHandler:v18];

LABEL_31:
}

void sub_100372440(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100372484(id a1)
{
  int v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003724C8(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  unsigned int v2 = off_10166DC90;
  off_10166DC90 = v1;
}

uint64_t sub_100372508(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) compatibilityLevel];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 32);
  if (qword_101719CF8 != -1) {
    dispatch_once(&qword_101719CF8, &stru_1014F1BE0);
  }
  long long v4 = off_10166DC90;
  if (os_log_type_enabled((os_log_t)off_10166DC90, OS_LOG_TYPE_DEBUG)) {
    sub_1010A4B5C((uint64_t)v2 > v3, v4);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1003725BC(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_1003725FC(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_10037263C(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_10037267C(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100372A04(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100372A44(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100372A84(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100372C0C(id a1)
{
  int v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100372C4C(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 120);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * (void)v5) cancel:(void)v6];
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100372D3C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) cancelExport];
  [*(id *)(*(void *)(a1 + 32) + 64) cancel];
}

void sub_1003730F8(id a1)
{
  id v1 = sub_100401ECC("CRLMovieCompatibilityConverterLogCat");
  id v2 = off_10166DC90;
  off_10166DC90 = v1;
}

void sub_100373138(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037317C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003731C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373204(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100373248(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 32) = [*(id *)(*(void *)(a1 + 32) + 64) compatibilityLevel];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1003733A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1003738F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373934(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373F28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373F6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373FB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100373FF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100374038(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037407C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003740C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) p_provideImageDataForAssetOwner:*(void *)(a1 + 40) data:a2 modalOperationPresenter:*(void *)(a1 + 48) compatibilityAlertPresenter:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

void sub_1003743DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100374420(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100374464(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10037454C;
  v12[3] = &unk_1014F1F90;
  id v13 = v5;
  id v14 = v6;
  id v9 = *(id *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v6;
  id v11 = v5;
  [v7 p_continueWorkOnMainThreadWithModalOperationPresenter:v8 usingBlock:v12];
}

void sub_10037454C(uint64_t a1)
{
  id v5 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (*(unsigned char *)(*(void *)(a1 + 48) + 40))
    {

      id v4 = 0;
      id v2 = 0;
      uint64_t v3 = *(void *)(a1 + 56);
    }
    else
    {
      id v4 = v5;
    }
    id v5 = v4;
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1003745EC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  id v6[2] = sub_1003746E0;
  _OWORD v6[3] = &unk_1014F1C08;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 32);
  id v12 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  [v2 p_continueWorkOnMainThreadWithModalOperationPresenter:v3 usingBlock:v6];
}

void sub_1003746E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];
  if (v2)
  {

LABEL_4:
    uint64_t v3 = *(void *)(a1 + 72);
    id v26 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);

    return;
  }
  if ([*(id *)(a1 + 32) isCancelled]) {
    goto LABEL_4;
  }
  uint64_t v4 = (uint64_t)[*(id *)(a1 + 32) compatibilityLevel];
  if (v4 > 1)
  {
    if (v4 == 2)
    {
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v17 = *(void **)(a1 + 48);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(a1 + 72);
      [v17 p_convertImageData:v18 toCompatibilityLevel:4 assetOwner:v19 completionHandler:v20];
    }
    else if ((unint64_t)v4 > 3)
    {
      __int16 v25 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
      v25();
    }
    else
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100374B38;
      v27[3] = &unk_1014F1FE0;
      id v21 = *(void **)(a1 + 64);
      id v31 = *(id *)(a1 + 72);
      uint64_t v32 = 3;
      id v22 = *(id *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 48);
      unsigned int v24 = *(void **)(a1 + 56);
      id v28 = v22;
      uint64_t v29 = v23;
      id v30 = v24;
      [v21 presentMediaCompatibilityAlertWithReasons:2 forMediaType:2 forSingleMediaObject:1 completionHandler:v27];
    }
  }
  else
  {
    id v5 = objc_alloc((Class)NSError);
    v35[0] = NSLocalizedDescriptionKey;
    id v6 = +[NSBundle mainBundle];
    id v7 = [v6 localizedStringForKey:@"Couldn’t Add Image" value:0 table:0];
    v36[0] = v7;
    v35[1] = NSLocalizedRecoverySuggestionErrorKey;
    id v8 = +[NSBundle mainBundle];
    uint64_t v9 = [v8 localizedStringForKey:@"Your image wasn’t added because it’s in an unsupported format." value:0 table:0];
    v35[2] = @"CRLBoardItemImporterErrorMediaTypeKey";
    v36[1] = v9;
    v36[2] = &off_10155DE20;
    id v10 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:3];
    id v11 = [v5 initWithDomain:@"com.apple.freeform.CRLErrorDomainInfoImporter" code:103 userInfo:v10];

    if ((sub_100454C50(*(void **)(a1 + 40)) & 1) == 0)
    {
      id v12 = objc_alloc((Class)NSError);
      v33[0] = NSLocalizedFailureReasonErrorKey;
      id v13 = +[NSBundle mainBundle];
      id v14 = [v13 localizedStringForKey:@"This image is too large to insert." value:0 table:0];
      v33[1] = @"CRLBoardItemImporterErrorMediaTypeKey";
      v34[0] = v14;
      v34[1] = &off_10155DE20;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];
      id v16 = [v12 initWithDomain:@"com.apple.freeform.CRLErrorDomainInfoImporter" code:102 userInfo:v15];

      id v11 = v16;
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

id sub_100374B38(uint64_t a1, int a2, int a3)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, 0);
  }
  if (a3) {
    uint64_t v4 = 4;
  }
  else {
    uint64_t v4 = 3;
  }
  if (*(void *)(a1 + 64) >= v4) {
    return (id)(*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), *(void *)(a1 + 32), 0);
  }
  else {
    return [*(id *)(a1 + 40) p_convertImageData:*(void *)(a1 + 32)];
  }
}

void sub_100374C98(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) convertedMediaData];
  uint64_t v3 = [*(id *)(a1 + 32) error];
  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_5:
    v4();
    goto LABEL_6;
  }
  if (v2)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014F2028);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010A5198();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014F2048);
  }
  id v5 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010690A0(v5);
  }
  id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageFillProvider p_convertImageData:toCompatibilityLevel:assetOwner:completionHandler:]_block_invoke");
  id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageFillProvider.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 246, 0, "If no conversion error was provided, the converted image data should not be nil!");

  id v8 = *(id *)(*(void *)(a1 + 40) + 16);
  uint64_t v9 = v8;
  if (v8)
  {
    id v18 = 0;
    [v8 getResourceValue:&v18 forKey:NSURLLocalizedNameKey error:0];
    id v10 = v18;
    if (!v10)
    {
      id v10 = [v9 lastPathComponent];
    }
    id v11 = +[NSBundle mainBundle];
    id v12 = [v11 localizedStringForKey:@"The image “%@” couldn’t be inserted." value:0 table:0];
    id v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v12, v10);
  }
  else
  {
    id v10 = +[NSBundle mainBundle];
    id v13 = [v10 localizedStringForKey:@"The image couldn’t be inserted." value:0 table:0];
  }

  v19[0] = NSLocalizedDescriptionKey;
  v19[1] = @"CRLBoardItemImporterErrorMediaTypeKey";
  v20[0] = v13;
  v20[1] = &off_10155DE20;
  id v14 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
  uint64_t v15 = v14;
  if (v9)
  {
    id v16 = [v14 mutableCopy];
    [v16 setObject:v9 forKeyedSubscript:NSURLErrorKey];

    uint64_t v15 = v16;
  }
  id v17 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.freeform.CRLErrorDomainInfoImporter" code:100 userInfo:v15];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

LABEL_6:
}

void sub_10037501C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375060(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_100375A74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375AB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375AFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375B40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375B84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375BC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375C0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375C50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375C94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100375CD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100375D1C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return [*(id *)(a1 + 32) cancel];
}

void sub_100375D34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  uint64_t v15 = sub_100375E50;
  id v16 = &unk_1014F21D8;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(a1 + 48);
  id v17 = v7;
  uint64_t v18 = v8;
  id v10 = v9;
  id v19 = v5;
  id v20 = v6;
  uint64_t v11 = *(void *)(a1 + 56);
  id v21 = v10;
  uint64_t v22 = v11;
  id v12 = v6;
  id v13 = v5;
  if (+[NSThread isMainThread]) {
    v15((uint64_t)v14);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);
  }
}

void sub_100375E50(uint64_t a1)
{
  [*(id *)(a1 + 32) endModalOperationWithToken:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 64))
  {
    id v4 = *(id *)(a1 + 48);
    id v2 = *(id *)(a1 + 56);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
    {

      id v3 = 0;
      id v2 = 0;
    }
    else
    {
      id v3 = v4;
    }
    id v5 = v3;
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1003771BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100377200(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100377244(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100377288(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100377FE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378024(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378068(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003780AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003780F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378134(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378178(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003781BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378200(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378244(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378288(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003782CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378648(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037868C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100378870(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003788B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003790F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037913C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379E08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379E4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379E90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379ED4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379F18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379F5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379FA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100379FE4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A028(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A06C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A0B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A0F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A540(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A584(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A820(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037A864(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

char *sub_10037A8A8(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 substringToIndex:1];
  id v4 = [@"0123456789ABCDEF" rangeOfString:v3];
  id v5 = [v2 substringFromIndex:1];

  id v6 = (char *)[@"0123456789ABCDEF" rangeOfString:v5] + 16 * (void)v4;
  return v6;
}

void sub_10037AB9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037ABE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037AEB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037AEFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B320(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B364(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B55C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B5A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B7FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037B840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037BADC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037BB20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037C034(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037C078(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10037CAEC(uint64_t a1, CGColorRef color, CGColorRef color2)
{
  if (*(double *)(a1 + 32) == 0.0)
  {
    return CGColorEqualToColor(color, color2);
  }
  else
  {
    Components = (double *)CGColorGetComponents(color);
    uint64_t v8 = (double *)CGColorGetComponents(color2);
    size_t NumberOfComponents = CGColorGetNumberOfComponents(color);
    if (NumberOfComponents != CGColorGetNumberOfComponents(color2))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F28A0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A68AC();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F28C0);
      }
      id v10 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v10);
      }
      uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLColor p_isEqualToColor:withTolerance:]_block_invoke");
      id v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m"];
      +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:941 isFatal:0 description:"Color space dimension mismatch"];
    }
    for (BOOL result = 1; NumberOfComponents; --NumberOfComponents)
    {
      if (result) {
        BOOL result = vabdd_f64(*Components, *v8) < *(double *)(a1 + 32) || *Components == *v8;
      }
      else {
        BOOL result = 0;
      }
      ++v8;
      ++Components;
    }
  }
  return result;
}

void sub_10037CCFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037CD40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037CD84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037CDC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10037D088(uint64_t a1)
{
  if (a1 == 2) {
    return sub_10000FC28();
  }
  if (a1 == 1) {
    return sub_10000FDD8();
  }
  if (a1) {
    return 0;
  }
  return sub_10000FD54();
}

void sub_10037DAF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037DB3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037E968(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037E9AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037ECD4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037ED18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037EEAC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037EEF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037F08C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037F0D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037F470(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10037F4B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038071C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100380760(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003809C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100380A08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__CFString *sub_100380B10(unint64_t a1)
{
  if (a1 < 5) {
    return *(&off_1014F2B40 + a1);
  }
  if (a1 == 5) {
    return @"UIGestureRecognizerStateFailed";
  }
  return @"#Unknown UIGestureRecognizerState#";
}

void sub_100380B78(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableOrderedSet);
  id v2 = (void *)qword_1016A9818;
  qword_1016A9818 = (uint64_t)v1;

  [(id)qword_1016A9818 addObject:objc_opt_class()];
  [(id)qword_1016A9818 addObject:objc_opt_class()];
  [(id)qword_1016A9818 addObject:objc_opt_class()];
  [(id)qword_1016A9818 addObject:objc_opt_class()];
  id v3 = (void *)qword_1016A9818;
  uint64_t v4 = objc_opt_class();

  [v3 addObject:v4];
}

void sub_100380DF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100380E34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100380F24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100380FFC(uint64_t a1, void *a2)
{
  id v3 = [a2 protected_supportedFileTypes];
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObjectsFromArray:v3];
    id v3 = v4;
  }
}

void sub_100381120(uint64_t a1, void *a2)
{
  id v3 = [a2 protected_supportedFileUTTypes];
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObjectsFromArray:v3];
    id v3 = v4;
  }
}

void sub_100381278(uint64_t a1, void *a2)
{
  id v3 = [a2 protected_supportedAnimatedImageFileTypes];
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObjectsFromArray:v3];
    id v3 = v4;
  }
}

void sub_10038139C(uint64_t a1, void *a2)
{
  id v3 = [a2 protected_supportedRemoteURLSchemes];
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObjectsFromArray:v3];
    id v3 = v4;
  }
}

void sub_100381598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003815B4(uint64_t a1, void *a2, unsigned char *a3)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_21;
    }
    [a2 protected_supportedFileUTTypes];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          if (objc_msgSend(*(id *)(a1 + 32), "conformsToType:", *(void *)(*((void *)&v16 + 1) + 8 * i), (void)v16))
          {
            uint64_t v11 = *(void *)(a1 + 40);
            id v12 = [*(id *)(a1 + 32) identifier];
            LODWORD(v11) = [a2 protected_canImportFileAtURL:v11 type:v12];

            if (v11)
            {
              *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
              goto LABEL_18;
            }
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_18:
  }
  else
  {
    id v13 = [*(id *)(a1 + 40) scheme];
    id v6 = [v13 lowercaseString];

    if (v6)
    {
      id v14 = [a2 protected_supportedRemoteURLSchemes];
      if ([v14 containsObject:v6])
      {
        unsigned int v15 = [a2 protected_canImportFromRemoteURL:*(void *)(a1 + 40)];

        if (v15) {
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
        }
      }
      else
      {
      }
    }
  }

LABEL_21:
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_1003818A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003818B8(uint64_t a1, void *a2, unsigned char *a3)
{
  [a2 protected_supportedFileUTTypes];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        if (objc_msgSend(*(id *)(a1 + 32), "conformsToType:", *(void *)(*((void *)&v13 + 1) + 8 * i), (void)v13))
        {
          uint64_t v11 = *(void *)(a1 + 40);
          id v12 = [*(id *)(a1 + 32) identifier];
          LODWORD(v11) = [a2 protected_canImportFileWithPreinsertionAsset:v11 type:v12];

          if (v11)
          {
            *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
            goto LABEL_12;
          }
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_100381C80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100381CC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100381ED0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100381F14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382134(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382178(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382474(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003824B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003827B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003827F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382AF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382B38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382E30(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100382E74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038316C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003831B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003834A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003834EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003837E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100383828(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100383A9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)&OBJC_METACLASS___CRLBoardItemImporterPlaceholder;
  id v2 = objc_msgSend(objc_msgSendSuper2(&v4, "allocWithZone:", v1), "p_placeholderInit");
  id v3 = (void *)qword_1016A9828;
  qword_1016A9828 = (uint64_t)v2;
}

void sub_100383D14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100383D58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100384DB0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) firstElementForUpcomingScreenChangeResetCount]) {
    [*(id *)(a1 + 32) setFirstElementForUpcomingScreenChangeResetCount:[*(id *)(a1 + 32) firstElementForUpcomingScreenChangeResetCount] - 1];
  }
  id result = [*(id *)(a1 + 32) firstElementForUpcomingScreenChangeResetCount];
  if (!result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 setCachedFirstElementForUpcomingScreenChange:0];
  }
  return result;
}

id sub_100384ED0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) firstElementForUpcomingPageTurnResetCount]) {
    [*(id *)(a1 + 32) setFirstElementForUpcomingPageTurnResetCount:[*(id *)(a1 + 32) firstElementForUpcomingPageTurnResetCount] - 1];
  }
  id result = [*(id *)(a1 + 32) firstElementForUpcomingPageTurnResetCount];
  if (!result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 setCachedFirstElementForUpcomingPageTurn:0];
  }
  return result;
}

id sub_10038500C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldPreventFocusingCanvasResponderElementOnScreenChange:0];
}

NSString *CRLAccessibilityGetUIKitLocalizedString(uint64_t a1)
{
  id v2 = (NSBundle *)qword_1016A9850;
  if (!qword_1016A9850)
  {
    id v2 = +[NSBundle bundleWithIdentifier:@"com.apple.UIKit.axbundle"];
    qword_1016A9850 = (uint64_t)v2;
    if (!v2) {
      return (NSString *)a1;
    }
  }

  return [(NSBundle *)v2 localizedStringForKey:a1 value:&stru_101538650 table:@"Accessibility"];
}

id CRLAccessibilityPostLayoutChangedNotification(void *a1)
{
  if (qword_1016A9858)
  {
    if (!a1) {
      goto LABEL_11;
    }
  }
  else
  {
    qword_1016A9858 = [[CRLAccessibilityTimer alloc] initWithTargetSerialQueue:&_dispatch_main_q];
    [(id)qword_1016A9858 setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:1];
    if (!a1) {
      goto LABEL_11;
    }
  }
  if (qword_1016A9860)
  {
    if ((void *)qword_1016A9860 != a1)
    {
      if (CRLAccessibilityShouldPerformValidationChecks())
      {
        int ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
        if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, @"Multiple targets for multiple layout changed notifications. This is likely a bug.", v3, v4, v5, v6, v7, v10))abort(); {
      }
        }
    }
  }
  else
  {
    qword_1016A9860 = a1;
  }
LABEL_11:
  id v8 = (void *)qword_1016A9858;

  return [v8 afterDelay:&stru_1014F2F80 processBlock:0.25];
}

void sub_100385158(id a1)
{
  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, (id)qword_1016A9860);
  id v1 = (id)qword_1016A9860;
  qword_1016A9860 = 0;
}

void sub_1003858A0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigationBar];
  [v1 setNeedsLayout];
}

void sub_1003867E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100386828(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038686C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003868B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003868F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100386938(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100386CE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100386D24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387100(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387144(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387604(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387648(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003878F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100387998(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100387B90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100387BB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387BF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387E50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100387E94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038826C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003882B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100388734(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100388778(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100388940(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100388984(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100388EF8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) canvas];
  [v1 i_setLayersInvalidWithoutInvalidatingAnySpecificLayers];
}

void sub_10038961C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389660(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038982C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389870(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389B20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389B64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389BA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100389BEC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038A540(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  id v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_10038A584(id *a1)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        id v8 = [*((id *)a1[5] + 52) objectForKeyedSubscript:v7];
        uint64_t v9 = v8;
        if (!v8 || [v8 hudSize] == (id)1) {
          [a1[5] p_showCollaboratorHUDForCollaborator:v7 withSelectionPath:0 allowScroll:0 hudSize:1];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v4);
  }

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v10 = a1[6];
  id v11 = [v10 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v18;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v18 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v17 + 1) + 8 * (void)j);
        long long v16 = [*((id *)a1[5] + 52) objectForKeyedSubscript:v15];
        if (v16 && ([a1[7] containsObject:v15] & 1) == 0) {
          [v16 teardown];
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v12);
  }
}

id sub_10038A780(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 32) updateLayers];
}

void sub_10038B054(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038B098(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038B0DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038B120(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038B164(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038B1A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038BC3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038BC80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038C2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10038C2D4(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    CGPoint origin = CGRectZero.origin;
    CGSize size = CGRectZero.size;
    *((_OWORD *)WeakRetained + 12) = CGRectZero.origin;
    *((CGSize *)WeakRetained + 13) = size;
    if (*(unsigned char *)(a1 + 48))
    {
      *(CGPoint *)(WeakRetained + 24_Block_object_dispose(&STACK[0x220], 8) = origin;
      *(CGSize *)(WeakRetained + 264) = size;
      WeakRetained[240] = 0;
    }
  }
  id v5 = WeakRetained;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10038C714(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038C758(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038C79C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038C7E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038CA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10038CA38(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && [v5 currentSelectionContainsInfo:*(void *)(a1 + 32)])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_10038D0E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038D12C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038D3CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10038D428(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v25 = v3;
  if (*(unsigned char *)(v5 + 24))
  {
    unsigned __int8 v6 = 1;
  }
  else
  {
    unsigned __int8 v6 = [v3 canvasShouldScrollForSelectionPath:*(void *)(a1 + 32)];
    id v4 = v25;
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  *(unsigned char *)(v5 + 24) = v6;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    [*(id *)(a1 + 40) rectInRootForScrollingToSelectionPath:*(void *)(a1 + 32) onLayout:v4 allowingZooming:*(unsigned __int8 *)(a1 + 96)];
    uint64_t v7 = *(void **)(*(void *)(a1 + 64) + 8);
    void v7[4] = v8;
    v7[5] = v9;
    void v7[6] = v10;
    v7[7] = v11;
    [v25 rectInRootOfAutoZoomContextOfSelectionPath:*(void *)(a1 + 32)];
    id v12 = *(void **)(*(void *)(a1 + 72) + 8);
    void v12[4] = v13;
    void v12[5] = v14;
    v12[6] = v15;
    v12[7] = v16;
    [v25 viewScaleForZoomingToSelectionPath:*(void *)(a1 + 32) targetPointSize:*(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v17;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  else
  {
    long long v18 = *(CGRect **)(*(void *)(a1 + 64) + 8);
    [*(id *)(a1 + 40) rectInRootForScrollingToSelectionPath:*(void *)(a1 + 32) onLayout:v4 allowingZooming:*(unsigned __int8 *)(a1 + 96)];
    v27.origin.double x = v19;
    v27.origin.CGFloat y = v20;
    v27.size.CGFloat width = v21;
    v27.size.CGFloat height = v22;
    *(CGRect *)(*(void *)(*(void *)(a1 + 64) + 8) + 32) = CGRectUnion(v18[1], v27);
    uint64_t v23 = *(void *)(*(void *)(a1 + 72) + 8);
    CGSize size = CGRectZero.size;
    *(CGPoint *)(v23 + 32) = CGRectZero.origin;
    *(CGSize *)(v23 + 4_Block_object_dispose(&STACK[0x220], 8) = size;
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
}

void sub_10038DD80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038DDC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038DE08(uint64_t a1)
{
  if (+[NSThread isMainThread])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(v2 + 696);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 704);
      if ((v4 & 0x100) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
        char v6 = objc_opt_respondsToSelector();

        uint64_t v2 = *(void *)(a1 + 32);
        if (v6)
        {
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3221225472;
          void v10[2] = sub_10038DF30;
          _OWORD v10[3] = &unk_1014CBBB0;
          void v10[4] = v2;
          uint64_t v7 = objc_retainBlock(v10);
          id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
          [v8 interactiveCanvasController:*(void *)(a1 + 32) needsScrollWhenViewDidLayoutUsingBlock:v7];

          return;
        }
        uint64_t v3 = *(void *)(v2 + 696);
        uint64_t v4 = *(void *)(v2 + 704);
      }
      [v2 p_scrollToSelectionPath:v3 scrollOptions:v4];
      uint64_t v9 = *(void **)(a1 + 32);
      [v9 p_clearSelectionScrollingState];
    }
  }
}

void sub_10038DF30(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (void *)v1[87];
  if (v2)
  {
    uint64_t v4 = v1[88];
    id v5 = v2;
    [v1 p_clearSelectionScrollingState];
    [*(id *)(a1 + 32) scrollToSelectionPath:v5 scrollOptions:v4 & 0xFFFFFFFFFFFFFEFFLL];
  }
}

void sub_10038E8AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038E8F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038ED98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038EDDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038F314(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10038F358(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10038FB28(id a1, _TtC8Freeform12CRLBoardItem *a2, BOOL *a3)
{
  return ![(CRLBoardItem *)a2 excludedFromMultiselectResizeInfo];
}

void sub_100390D24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100390D68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100391DE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100391E2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003921B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003921F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039223C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100392280(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100392470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003924B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}