void sub_100392994(id a1)
{
  void *v1;
  void *v2;
  uint64_t vars8;

  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003929D8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039431C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394360(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394A04(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394A48(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394DDC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394E20(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394E64(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100394EA8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_100396780(id a1, CRLCanvasRep *a2)
{
  v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned __int8 v3 = [(CRLCanvasRep *)v2 isSelected];
  }
  else {
    unsigned __int8 v3 = 1;
  }

  return v3;
}

void sub_1003969EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100396A04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100396A14(uint64_t a1)
{
}

void sub_100396A1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) hitRep:*(double *)(a1 + 48) *(double *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_100397568(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  v5 = sub_1002469D0(v4, v3);

  if (v5)
  {
    [v5 rectInRootForSelectionPath:*(void *)(a1 + 32)];
    BOOL v6 = !CGRectIsNull(v8);
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_100397D30(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[730] || v2[731])
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    id v4 = [v2 canvas];
    [v4 performBlockAfterLayoutIfNecessary:*(void *)(a1 + 40)];
  }
}

void sub_1003980EC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100398130(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100398320(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100398364(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100399044(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100399088(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003990CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 416) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if ([*(id *)(*(void *)(a1 + 32) + 408) containsObject:*(void *)(a1 + 40)])
  {
    id v3 = [*(id *)(a1 + 32) collaboratorCursorDelegate];
    uint64_t v4 = [v3 collaboratorCursorSelectionPathForRenderer:*(void *)(a1 + 32) collaboratorPresence:*(void *)(a1 + 40)];
    v5 = (void *)v4;
    if (v4 == *(void *)(a1 + 48))
    {
      if (v4)
      {
        if (v2)
        {
          long long v30 = 0u;
          long long v29 = 0u;
          v7 = *(void **)(a1 + 32);
          uint64_t v6 = *(void *)(a1 + 40);
          id v8 = [v2 hudSize];
          if (v7)
          {
            [v7 p_collaboratorHUDPositionForSelectionPath:v5 collaboratorPresence:v6 allowScroll:0 hudSize:v8];
          }
          else
          {
            long long v30 = 0u;
            long long v29 = 0u;
          }
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v20 = sub_10039939C;
          v21 = &unk_1014F3B28;
          v9 = *(void **)(a1 + 40);
          uint64_t v22 = *(void *)(a1 + 32);
          id v23 = v9;
          id v24 = v2;
          long long v27 = v29;
          long long v28 = v30;
          id v25 = v5;
          id v26 = *(id *)(a1 + 56);
          if (+[NSThread isMainThread]) {
            v20((uint64_t)v19);
          }
          else {
            dispatch_async((dispatch_queue_t)&_dispatch_main_q, v19);
          }

          v10 = v23;
LABEL_22:
        }
      }
      else if (v2)
      {
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v16 = sub_100399650;
        v17 = &unk_1014CBBB0;
        id v18 = v2;
        if (+[NSThread isMainThread]) {
          v16((uint64_t)v15);
        }
        else {
          dispatch_async((dispatch_queue_t)&_dispatch_main_q, v15);
        }
        v10 = v18;
        goto LABEL_22;
      }
    }

LABEL_24:
    goto LABEL_25;
  }
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    v12 = sub_100399658;
    v13 = &unk_1014CBBB0;
    id v14 = v2;
    if (+[NSThread isMainThread]) {
      v12((uint64_t)block);
    }
    else {
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    id v3 = v14;
    goto LABEL_24;
  }
LABEL_25:
}

void sub_10039939C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 416) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);

  if (v2 == v3)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      uint64_t v4 = *(void **)(a1 + 48);
      v5 = [*(id *)(a1 + 56) orderedSelections];
      uint64_t v6 = [v5 lastObject];
      objc_opt_class();
      [v4 setShouldFadeOutUnconditionally:objc_opt_isKindOfClass() & 1];

      [*(id *)(a1 + 48) moveHUDToPoint:*(void *)(a1 + 88) withDirection:*(double *)(a1 + 72) *(double *)(a1 + 80)];
      if ([*(id *)(a1 + 48) hudSize] == (id)1
        && ([*(id *)(a1 + 56) isEqual:*(void *)(a1 + 64)] & 1) == 0)
      {
        v7 = *(void **)(a1 + 48);
        [v7 resetFadeOutTimer];
      }
    }
    else
    {
      int v8 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F3AE0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010A8600(a1, v8);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F3B00);
      }
      v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v9);
      }
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLInteractiveCanvasController collaboratorCursorSelectionPathChangedFromSelectionPath:toSelectionPath:collaboratorPresence:]_block_invoke");
      v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasController.m"];
      +[CRLAssertionHandler handleFailureInFunction:v10, v11, 5011, 0, "Could not determine HUD position for selection path %@", *(void *)(a1 + 56) file lineNumber isFatal description];

      [*(id *)(a1 + 48) hideHUD];
    }
  }
}

void sub_1003995C8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039960C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100399650(uint64_t a1)
{
  return [*(id *)(a1 + 32) hideHUD];
}

id sub_100399658(uint64_t a1)
{
  return [*(id *)(a1 + 32) hideHUD];
}

void sub_100399AAC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100399AF0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100399B34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) editingCoordinator];
  id v3 = [v2 followCoordinator];
  uint64_t v4 = [v3 expectingViewportFromUUID];
  v5 = [*(id *)(a1 + 40) presenceUUID];
  unsigned int v6 = [v4 isEqual:v5];

  if (v6)
  {
    v7 = [*(id *)(a1 + 32) editingCoordinator];
    int v8 = [v7 followCoordinator];
    [v8 setExpectingViewportForOneTimeScrollFrom:0];

    [*(id *)(a1 + 32) scrollToSelectionPath:*(void *)(a1 + 48) scrollOptions:9];
    v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    [v9 showCollaboratorHUDForCollaborator:v10 withSelectionPath:v11 allowScroll:1];
  }
}

void sub_100399FC4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039A008(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039A1F0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039A234(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039A9DC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039AA20(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039AA64(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039AAA8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039AC78(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039ACBC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BA5C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BAA0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BAE4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BB28(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BB6C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039BBB0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C298(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C2DC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C320(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C364(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C540(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C584(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C7FC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C840(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039C9F4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039CA38(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D1FC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D240(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D284(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D2C8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D460(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D4A4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D8CC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D910(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D954(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039D998(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039DC88(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039DCCC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10039DFF4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && ([v6 canRemainDuringSharedReadOnlyMode] & 1) == 0)
  {
    v5 = [*(id *)(a1 + 32) editorController];
    [v5 setSelectionPathToPopEditor:v6];

    *a3 = 1;
  }
}

id sub_10039E07C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isTearingDown];
  if ((result & 1) == 0)
  {
    id result = [*(id *)(a1 + 32) hasBeenTornDown];
    if ((result & 1) == 0)
    {
      id v3 = *(void **)(a1 + 32);
      return _[v3 endEditingDiscardingEdits];
    }
  }
  return result;
}

void sub_10039E220(id a1, CRLEditor *a2, BOOL *a3)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [(CRLEditor *)v3 documentEditabilityDidChange];
  }
}

void sub_1003A028C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A02D0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A0314(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A0358(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A039C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A03E0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A0974(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A09B8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A09FC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A0A40(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1750(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1794(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1948(id a1)
{
  v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003A1BD8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1C1C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1EEC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A1F30(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1003A1F74(id a1, _TtC8Freeform15CRLChangeRecord *a2)
{
  uint64_t v2 = a2;
  if ([(CRLChangeRecord *)v2 kind] == 1)
  {
    id v3 = [(CRLChangeRecord *)v2 details];
    unsigned __int8 v4 = [v3 containsProperty:13];
  }
  else
  {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

BOOL sub_1003A1FDC(id a1, _TtC8Freeform15CRLChangeRecord *a2)
{
  uint64_t v2 = a2;
  if ([(CRLChangeRecord *)v2 kind] == 1)
  {
    id v3 = [(CRLChangeRecord *)v2 details];
    unsigned __int8 v4 = [v3 containsProperty:12];
  }
  else
  {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

void sub_1003A2280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A22A8(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  objc_sync_exit(obj);
}

void sub_1003A231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1003A2330(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2374(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A26E4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2728(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A28D4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2918(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2AEC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2B30(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2CD4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A2D18(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A322C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A3270(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A4D84(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A4DC8(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A51D4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A5218(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A525C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A52A0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1003A52E4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

void sub_1003A6980(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A69C4(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A6A08(uint64_t a1)
{
  [*(id *)(a1 + 32) viewScale];
  double v3 = v2;
  double v4 = *(double *)(a1 + 72) / v2;
  v5 = [*(id *)(a1 + 32) canvas];
  unsigned __int8 v6 = [v5 isAnchoredAtRight];

  if (v6)
  {
    long long v7 = *(_OWORD *)&CGAffineTransformIdentity.c;
    *(_OWORD *)&v41.a = *(_OWORD *)&CGAffineTransformIdentity.a;
    *(_OWORD *)&v41.c = v7;
    *(_OWORD *)&v41.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
    *(_OWORD *)&v40.m11 = *(_OWORD *)&v41.a;
    *(_OWORD *)&v40.m13 = v7;
    *(_OWORD *)&v40.m21 = *(_OWORD *)&v41.tx;
    CGAffineTransformScale(&v41, (CGAffineTransform *)&v40, v4, v4);
    CGAffineTransform v37 = v41;
    [*(id *)(a1 + 48) setTransform:&v37];
    [*(id *)(a1 + 32) setContentOffset:0 scrollOptions:*(double *)(a1 + 96), *(double *)(a1 + 104)];
  }
  else
  {
    [*(id *)(a1 + 40) adjustedContentInset];
    double v9 = v8;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    memset(&v41, 0, sizeof(v41));
    uint64_t v10 = *(void **)(a1 + 48);
    if (v10) {
      [v10 transform3D];
    }
    CGFloat v11 = *(double *)(a1 + 80);
    CGFloat v12 = v9 + *(double *)(a1 + 88);
    *(_OWORD *)&v39.m31 = v43;
    *(_OWORD *)&v39.m33 = v44;
    *(_OWORD *)&v39.m41 = v45;
    *(_OWORD *)&v39.m43 = v46;
    *(_OWORD *)&v39.m11 = *(_OWORD *)&v41.a;
    *(_OWORD *)&v39.m13 = *(_OWORD *)&v41.c;
    *(_OWORD *)&v39.m21 = *(_OWORD *)&v41.tx;
    *(_OWORD *)&v39.m23 = v42;
    CATransform3DTranslate(&v40, &v39, v11, v12, 0.0);
    long long v43 = *(_OWORD *)&v40.m31;
    long long v44 = *(_OWORD *)&v40.m33;
    long long v45 = *(_OWORD *)&v40.m41;
    long long v46 = *(_OWORD *)&v40.m43;
    *(_OWORD *)&v41.a = *(_OWORD *)&v40.m11;
    *(_OWORD *)&v41.c = *(_OWORD *)&v40.m13;
    *(_OWORD *)&v41.tx = *(_OWORD *)&v40.m21;
    long long v42 = *(_OWORD *)&v40.m23;
    CATransform3D v39 = v40;
    CATransform3DScale(&v40, &v39, v4, v4, v4);
    long long v43 = *(_OWORD *)&v40.m31;
    long long v44 = *(_OWORD *)&v40.m33;
    long long v45 = *(_OWORD *)&v40.m41;
    long long v46 = *(_OWORD *)&v40.m43;
    *(_OWORD *)&v41.a = *(_OWORD *)&v40.m11;
    *(_OWORD *)&v41.c = *(_OWORD *)&v40.m13;
    *(_OWORD *)&v41.tx = *(_OWORD *)&v40.m21;
    long long v42 = *(_OWORD *)&v40.m23;
    CATransform3D v38 = v40;
    [*(id *)(a1 + 48) setTransform3D:&v38];
    [*(id *)(a1 + 56) position];
    double v14 = v13;
    double v16 = v15;
    [*(id *)(a1 + 40) contentOffset];
    double v18 = v17;
    double v20 = v19;
    double v21 = sub_100064680(v17, v19, v14);
    double v23 = sub_1000646A4(v21, v22, v4);
    double v25 = sub_100064680(v23, v24, v21);
    double v26 = sub_100064680(v14, v16, v25);
    [*(id *)(a1 + 56) setPosition:v26 - (*(double *)(a1 + 120) - *(double *)(a1 + 120) * v4 + -(v18 - *(double *)(a1 + 96) * v3) * v4) v27 - (*(double *)(a1 + 112) - *(double *)(a1 + 112) * v4 + -(v20 - *(double *)(a1 + 104) * v3) * v4)];
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  char v29 = objc_opt_respondsToSelector();

  if (v29)
  {
    id v30 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    [v30 interactiveCanvasController:*(void *)(a1 + 32) willAnimateViewScaleWithDuration:*(double *)(a1 + 144)];
  }
  v31 = +[NSNotificationCenter defaultCenter];
  uint64_t v32 = *(void *)(a1 + 32);
  v48[0] = *(void *)(a1 + 64);
  v47[0] = @"CRLInteractiveCanvasControllerInteractionSourceKey";
  v47[1] = @"CRLInteractiveCanvasControllerDurationKey";
  double v33 = *(double *)(a1 + 144);
  *(float *)&double v33 = v33;
  v34 = +[NSNumber numberWithFloat:v33];
  v48[1] = v34;
  v47[2] = @"CRLInteractiveCanvasControllerViewScaleKey";
  v35 = +[NSNumber numberWithDouble:v3];
  v48[2] = v35;
  v36 = +[NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:3];
  [v31 postNotificationName:@"CRLCanvasUpdateZoomNotification" object:v32 userInfo:v36];
}

uint64_t sub_1003A6DC4(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(a1 + 32) enclosingScrollView];
  uint64_t v5 = [v4 layer];
  [(id)v5 removeAllAnimations];

  unsigned __int8 v6 = *(void **)(a1 + 40);
  long long v7 = *(_OWORD *)&CATransform3DIdentity.m33;
  v17[4] = *(_OWORD *)&CATransform3DIdentity.m31;
  v17[5] = v7;
  long long v8 = *(_OWORD *)&CATransform3DIdentity.m43;
  v17[6] = *(_OWORD *)&CATransform3DIdentity.m41;
  v17[7] = v8;
  long long v9 = *(_OWORD *)&CATransform3DIdentity.m13;
  v17[0] = *(_OWORD *)&CATransform3DIdentity.m11;
  v17[1] = v9;
  long long v10 = *(_OWORD *)&CATransform3DIdentity.m23;
  v17[2] = *(_OWORD *)&CATransform3DIdentity.m21;
  v17[3] = v10;
  [v6 setTransform:v17];
  [*(id *)(a1 + 48) setViewScale:*(double *)(a1 + 64)];
  [*(id *)(a1 + 40) fixFrameAndScrollView];
  [*(id *)(a1 + 40) bounds];
  [*(id *)(a1 + 40) setFrame:sub_100064070()];
  [*(id *)(a1 + 48) setP_visibleBoundsRectForTiling:CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height];
  [*(id *)(a1 + 48) setContentOffset:0 scrollOptions:*(double *)(a1 + 72) *(double *)(a1 + 80)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
  LOBYTE(v5) = objc_opt_respondsToSelector();

  if (v5)
  {
    id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
    [v12 interactiveCanvasControllerDidAnimateViewScale:*(void *)(a1 + 48)];
  }
  *(unsigned char *)(*(void *)(a1 + 48) + 651) = 0;
  double v13 = *(void **)(a1 + 48);
  CFStringRef v18 = @"CRLInteractiveCanvasControllerInteractionSourceKey";
  double v14 = [v13 p_sourceInteractionSourceForNotficiationUserInfo];
  double v19 = v14;
  double v15 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  [v13 i_viewDidEndZoomingWithUserInfo:v15];

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_1003A7910(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A7954(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A7998(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A79DC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A80A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A80BC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8100(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8144(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8188(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1003A81CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003A81DC(uint64_t a1)
{
}

void sub_1003A81E4(uint64_t a1, int a2, void *a3, void *a4)
{
  data2 = a3;
  id v7 = a4;
  long long v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v8)
  {
    if (v7)
    {
      long long v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_8:
      v9();
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
      double v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = 0;

      goto LABEL_9;
    }
    if (data2)
    {
      dispatch_data_t concat = dispatch_data_create_concat(v8, data2);
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = concat;
    }
    if (a2)
    {
      long long v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_8;
    }
  }
LABEL_9:
}

void sub_1003A862C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A8644(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8688(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A86CC(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8710(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8754(uint64_t a1, int a2, void *a3, void *a4)
{
  data2 = a3;
  id v7 = a4;
  long long v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v8)
  {
    if (v7)
    {
      long long v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_8:
      v9();
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
      double v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = 0;

      goto LABEL_9;
    }
    if (data2)
    {
      dispatch_data_t concat = dispatch_data_create_concat(v8, data2);
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = concat;
    }
    if (a2)
    {
      long long v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_8;
    }
  }
LABEL_9:
}

void sub_1003A8A7C(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003A8AC0(id a1)
{
  v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_1003A8BD8(uint64_t a1, int a2)
{
  intptr_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (a2)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    return dispatch_semaphore_signal(v5);
  }
  return result;
}

intptr_t sub_1003A8D1C(uint64_t a1, int a2)
{
  intptr_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (a2)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    return dispatch_semaphore_signal(v5);
  }
  return result;
}

id sub_1003A8D74(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = [v5 readToBuffer:a2 size:a3];

  return v6;
}

char *sub_1003A8F50(void *a1, uint64_t a2)
{
  id v3 = a1;
  double v4 = [v3 offset];
  [v3 seekToOffset:&v4[a2]];
  id v5 = (char *)((unsigned char *)[v3 offset] - v4);

  return v5;
}

void sub_1003A9138(void *a1)
{
  id v1 = a1;
  [v1 seekToOffset:0];
}

void sub_1003A931C(_Unwind_Exception *a1)
{
}

void sub_1003A9338(void *a1)
{
  id v1 = a1;
  [v1 close];
  CFRelease(v1);
}

void sub_1003A9520(_Unwind_Exception *a1)
{
}

void sub_1003A953C(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003A9580(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003A95C4(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003A9608(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003A9900(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[CRLSwappableAxesGeometry standardAxesGeometry];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(*(void *)(a1 + 32) + 8));
}

void sub_1003A9970(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[CRLSwappableAxesGeometry swappedAxesGeometry];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(*(void *)(a1 + 32) + 16));
}

double sub_1003A9F9C(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  double Width = CGRectGetWidth(v23);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  double Height = CGRectGetHeight(v24);
  double v16 = Width * 0.5;
  double v17 = Height * 0.5;
  if (Width * 0.5 < Width - a6) {
    double v16 = Width - a6;
  }
  double v18 = Height - a7;
  if (v17 >= v18) {
    double v19 = v17;
  }
  else {
    double v19 = v18;
  }
  double v20 = sub_100407E48(a1, 0.0, v16);

  return sub_100407E48(v20, 0.0, v19);
}

double sub_1003AA060(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  switch(a1)
  {
    case 0:
      double MaxX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_7;
    case 1:
      double MinX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_5;
    case 2:
      double MinX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_5:
      double v5 = MinX;
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      CGRectGetMaxY(v13);
      break;
    case 3:
      double MaxX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_7:
      double v5 = MaxX;
      v14.origin.x = a2;
      v14.origin.y = a3;
      v14.size.width = a4;
      v14.size.height = a5;
      CGRectGetMinY(v14);
      break;
    default:
      return v5;
  }
  return v5;
}

void sub_1003AA170(void *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10)
{
  id v81 = a1;
  v83.origin.x = a4;
  v83.origin.y = a5;
  v83.size.width = a6;
  v83.size.height = a7;
  double Width = CGRectGetWidth(v83);
  v84.origin.x = a4;
  v84.origin.y = a5;
  v84.size.width = a6;
  CGFloat rect = a7;
  v84.size.height = a7;
  double Height = CGRectGetHeight(v84);
  double v21 = Width * 0.5;
  double v22 = Height * 0.5;
  if (Width * 0.5 < Width - a9 * 1.528665) {
    double v21 = Width - a9 * 1.528665;
  }
  double v23 = Height - a10 * 1.528665;
  if (v22 < v23) {
    double v22 = v23;
  }
  double v24 = a8 * 1.528665;
  if (v21 >= a8 * 1.528665) {
    double v25 = a8 * 1.528665;
  }
  else {
    double v25 = v21;
  }
  if (v22 >= v24) {
    double v26 = a8 * 1.528665;
  }
  else {
    double v26 = v22;
  }
  double v71 = a8;
  double v27 = v24 - a8;
  double v28 = 0.0;
  double v29 = 0.0;
  if (v27 != 0.0)
  {
    double v29 = 1.0 - (v24 - v25) / v27;
    double v28 = 1.0 - (v24 - v26) / v27;
  }
  double v77 = v29;
  double v30 = sub_1003AA060(a2, a4, a5, a6, rect);
  double v32 = v31;
  double v33 = sub_1003AA540(a2, v30, v31, v25);
  unint64_t v35 = a2 & 0xFFFFFFFFFFFFFFFDLL;
  double v79 = v32;
  double v74 = v34;
  double v75 = v33;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v36 = v34;
  }
  else {
    double v36 = v32;
  }
  double v76 = v30;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v37 = v30;
  }
  else {
    double v37 = v33;
  }
  if (a3)
  {
    [v81 lineToPoint:v37, v36];
    double v38 = v77;
LABEL_29:
    if (v38 >= v28) {
      double v46 = v28;
    }
    else {
      double v46 = v38;
    }
    double v47 = 1.0 - v46;
    id v48 = v81;
    double v49 = sub_100407E68(0.95, 1.0, v47);
    double v50 = sub_100407E68(0.93124985, 1.0, v47);
    double v70 = v28;
    if ((unint64_t)(a2 - 1) > 2) {
      double v51 = 290.0;
    }
    else {
      double v51 = dbl_101178168[a2 - 1];
    }
    double v52 = sub_1003AA540(a2, v76, v79, v49 * v71);
    double v54 = v53;
    double v55 = v51 * 0.0174532925;
    double v56 = (v51 + 50.0) * 0.0174532925;
    double v57 = v50 * v71;
    __double2 v58 = __sincos_stret(v55);
    double v59 = v52 + v50 * v71 * v58.__cosval;
    double v69 = v54 + v57 * v58.__sinval;
    __double2 v60 = __sincos_stret(v56);
    double v61 = v52 + v57 * v60.__cosval;
    double v62 = v54 + v57 * v60.__sinval;
    if (v35) {
      double v63 = v77;
    }
    else {
      double v63 = v70;
    }
    double recta = v63;
    if (v35) {
      double v64 = v70;
    }
    else {
      double v64 = v77;
    }
    if (v35) {
      double v65 = v75;
    }
    else {
      double v65 = v76;
    }
    double v66 = v74;
    if (v35) {
      double v66 = v79;
    }
    double v78 = v65;
    double v80 = v66;
    sub_1003AA5A8(v48, a2, 1, v59, v69, v71, v64);
    __double2 v67 = __sincos_stret((v56 - v55) * 0.5);
    double v68 = v57 * ((1.0 - v67.__cosval) * 4.0 / (v67.__sinval * 3.0));
    [v48 curveToPoint:v61 controlPoint1:v62 controlPoint2:v61 - v68 * v58.__sinval, v69 + v68 * v58.__cosval, v61 + v68 * v60.__sinval, v62 - v68 * v60.__cosval];
    sub_1003AA5A8(v48, a2, 0, v78, v80, v71, recta);

    goto LABEL_47;
  }
  [v81 currentPoint];
  double v38 = v77;
  if (!sub_1000640F4(v39, v40, v37, v36)
    || ((CGFloat v41 = a4, v42 = a5, v43 = a6, v44 = rect, !v35)
      ? (double v45 = CGRectGetWidth(*(CGRect *)&v41))
      : (double v45 = CGRectGetHeight(*(CGRect *)&v41)),
        v45 == 0.0 || fabs(v45) < 0.00999999978))
  {
    [v81 lineToPoint:v37, v36];
  }
  if (!sub_1000640F4(v76, v32, v75, v74)) {
    goto LABEL_29;
  }
LABEL_47:
}

double sub_1003AA540(uint64_t a1, double result, double a3, double a4)
{
  switch(a1)
  {
    case 0:
      intptr_t result = result - a4;
      break;
    case 1:
      intptr_t result = result - a4;
      break;
    case 2:
      intptr_t result = result + a4;
      break;
    case 3:
      intptr_t result = result + a4;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1003AA5A8(void *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  id v48 = a1;
  [v48 currentPoint];
  int v13 = ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) ^ a3;
  if (a3) {
    double v14 = v12;
  }
  else {
    double v14 = a5;
  }
  if (a3) {
    double v15 = v11;
  }
  else {
    double v15 = a4;
  }
  double v46 = a4;
  double v47 = a5;
  double v42 = v12;
  double v43 = v11;
  if (!a3)
  {
    a5 = v12;
    a4 = v11;
  }
  if (v13) {
    double v16 = 0.5;
  }
  else {
    double v16 = 0.0;
  }
  if (v13) {
    double v17 = 0.0;
  }
  else {
    double v17 = 0.5;
  }
  if (v13) {
    double v18 = 0.8;
  }
  else {
    double v18 = 0.0;
  }
  if (v13) {
    double v19 = 0.0;
  }
  else {
    double v19 = 0.8;
  }
  double v20 = sub_100407E68(v15, a4, v16);
  double v21 = sub_100407E68(v14, a5, v17);
  double v22 = sub_100407E68(v15, a4, v18);
  double v23 = sub_100407E68(v14, a5, v19);
  if ((unint64_t)(a2 - 1) > 2) {
    double v24 = 270.0;
  }
  else {
    double v24 = dbl_101178180[a2 - 1];
  }
  if (a3) {
    double v25 = v23;
  }
  else {
    double v25 = v21;
  }
  if (a3) {
    double v26 = v22;
  }
  else {
    double v26 = v20;
  }
  double v40 = v26;
  double v41 = v25;
  if (a3) {
    double v27 = v21;
  }
  else {
    double v27 = v23;
  }
  if (a3) {
    double v22 = v20;
  }
  double v28 = v24 + 50.0 + 20.0;
  if (a3) {
    double v28 = v24;
  }
  double v29 = v28 * 0.0174532925;
  double v30 = (v28 + 20.0) * 0.0174532925;
  __double2 v31 = __sincos_stret((v30 - v28 * 0.0174532925) * 0.5);
  double v32 = (1.0 - v31.__cosval) * 4.0 / (v31.__sinval * 3.0) * a6;
  __double2 v33 = __sincos_stret(v29);
  __double2 v34 = __sincos_stret(v30);
  double v35 = sub_100065E00(v43 - v32 * v33.__sinval, v42 + v32 * v33.__cosval, v22, v27, a7);
  double v37 = v36;
  double v38 = sub_100065E00(v46 + v32 * v34.__sinval, v47 - v32 * v34.__cosval, v40, v41, a7);
  [v48 curveToPoint:v46 controlPoint1:v47 controlPoint2:v35, v37, v38, v39];
}

void sub_1003AA7D4(void *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  id v45 = a1;
  double v15 = sub_1003AA060(a2, a4, a5, a6, a7);
  double v17 = v16;
  double v44 = a8;
  double v18 = sub_1003AA540(a2, v15, v16, a8);
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v20 = v15;
  }
  else {
    double v20 = v18;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v21 = v19;
  }
  else {
    double v21 = v17;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0) {
    double v15 = v18;
  }
  else {
    double v17 = v19;
  }
  if (a3)
  {
    [v45 lineToPoint:v20, v21];
    double v22 = v45;
LABEL_20:
    id v31 = v22;
    [v31 currentPoint];
    double v33 = v32;
    double v35 = v34;
    double v36 = v17;
    if ((unint64_t)(a2 - 1) > 2) {
      double v37 = 270.0;
    }
    else {
      double v37 = dbl_101178180[a2 - 1];
    }
    double v38 = v37 * 0.0174532925;
    double v39 = (v37 + 90.0) * 0.0174532925;
    __double2 v40 = __sincos_stret((v39 - v37 * 0.0174532925) * 0.5);
    double v41 = (1.0 - v40.__cosval) * 4.0 / (v40.__sinval * 3.0) * v44;
    __double2 v42 = __sincos_stret(v38);
    __double2 v43 = __sincos_stret(v39);
    [v31 curveToPoint:v15 controlPoint1:v36 controlPoint2:v33 - v41 * v42.__sinval, v35 + v41 * v42.__cosval, v15 + v41 * v43.__sinval, v36 - v41 * v43.__cosval];

    double v22 = v45;
    goto LABEL_24;
  }
  [v45 currentPoint];
  if (!sub_1000640F4(v23, v24, v20, v21)
    || ((CGFloat v25 = a4, v26 = a5, v27 = a6, v28 = a7, (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      ? (double Width = CGRectGetWidth(*(CGRect *)&v25))
      : (double Width = CGRectGetHeight(*(CGRect *)&v25)),
        Width == 0.0 || fabs(Width) < 0.00999999978))
  {
    [v45 lineToPoint:v20, v21, *(void *)&v44];
  }
  BOOL v30 = sub_1000640F4(v20, v21, v15, v17);
  double v22 = v45;
  if (!v30) {
    goto LABEL_20;
  }
LABEL_24:
}

void sub_1003AAC20(id a1)
{
  v9[0] = UTTypeSymbolicLink;
  v9[1] = UTTypeDirectory;
  v9[2] = UTTypeLinkPresentationMetadata;
  id v1 = +[NSArray arrayWithObjects:v9 count:3];
  uint64_t v2 = +[NSMutableArray arrayWithArray:v1];

  id v3 = sub_100030728();
  [v2 crl_addNonNilObject:v3];

  double v4 = sub_100030984();
  [v2 crl_addNonNilObject:v4];

  double v5 = sub_100030E3C();
  [v2 crl_addNonNilObject:v5];

  id v6 = sub_100030BE0();
  [v2 crl_addNonNilObject:v6];

  id v7 = [v2 copy];
  long long v8 = (void *)qword_1016A9870;
  qword_1016A9870 = (uint64_t)v7;
}

void sub_1003AB030(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003AB2B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AB2FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABC60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABCA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABCE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABD2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABD70(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABDB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABDF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ABE3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AC240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AC38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003AC6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AC760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPRep;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1003AC8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ADAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003ADBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ADCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ADE1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ADECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003AE04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AE0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AE27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AE6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AE758(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AE79C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AE9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AECC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AED04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AED48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AEE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AF570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1003AF660(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AF6A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AF7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003AF8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003AFAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AFB18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AFB5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003AFC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AFCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AFDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B0024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B01D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B0208(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1 + 32) interactiveCanvasController];
  [v3 setNeedsDisplayOnLayer:v4];
}

void sub_1003B0268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B02F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B0438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B0468(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1 + 32) interactiveCanvasController];
  [v3 setNeedsDisplayInRect:v4 onLayer:*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64)];
}

void sub_1003B04D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B059C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1003B074C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B0774(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B07B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B0894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B0978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B0F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  double v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1003B13B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B16B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1003B1748(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  id v3 = sub_1003B1804;
  id v4 = &unk_1014D0800;
  uint64_t v5 = *(void *)(a1 + 32);
  id v1 = v2;
  if (+[NSThread isMainThread]) {
    v3((uint64_t)v1);
  }
  else {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
  }
}

void sub_1003B17F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1804(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) textEditor];
  [v1 showEditMenu];
}

void sub_1003B1850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B1B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003B2034(uint64_t a1, void *a2)
{
  id v5 = a2;
  [v5 bounds];
  if (!CGRectEqualToRect(v7, *(CGRect *)(a1 + 40)))
  {
    [v5 setBounds:*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64)];
    [*(id *)(a1 + 32) bounds];
    [v5 setPosition:*(double *)(a1 + 40) - v3, *(double *)(a1 + 48) - v4];
    [v5 setNeedsDisplay];
  }
}

void sub_1003B20C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B21D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B22F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003B2314(uint64_t a1, void *a2)
{
  return [a2 setContentsScale:*(double *)(a1 + 32)];
}

void sub_1003B244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B2588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B26B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B27EC(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1003B28EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B2B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B2BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B303C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B31F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B34F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B3630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B38CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B3968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B3A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B3D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B3E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B422C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003B4294(CRLWPRep *self, SEL a2, CGPoint a3)
{
  return &__NSArray0__struct;
}

void sub_1003B43F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B44B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B47E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1003B4C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B4F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B512C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B52C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B5414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B55A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B5880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B5A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B5EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B5F74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B5FB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B5FFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B6040(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B65F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B6694(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B66D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B671C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B6760(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B67A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B67E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B6AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1003B6B14(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1003B6B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double **)(*(void *)(a1 + 40) + 8);
  CGFloat v5 = v4[6];
  CGFloat v6 = v4[7];
  CGFloat v7 = v4[8];
  CGFloat v8 = v4[9];
  [*(id *)(a1 + 32) glyphRectForRange:a2 includingLabel:a3];
  v14.origin.x = v9;
  v14.origin.y = v10;
  v14.size.width = v11;
  v14.size.height = v12;
  v13.origin.x = v5;
  v13.origin.y = v6;
  v13.size.width = v7;
  v13.size.height = v8;
  *(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = CGRectUnion(v13, v14);
}

void sub_1003B6C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B6D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B6E64(_Unwind_Exception *exception_object)
{
}

void sub_1003B6E80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = (void *)v2[37];
  double v4 = [v2 primaryFindResultSearchReference];
  CGFloat v8 = v4;
  CGFloat v5 = +[NSArray arrayWithObjects:&v8 count:1];
  CGFloat v6 = [*(id *)(a1 + 32) canvas];
  [v6 contentsScale];
  id v7 = [v3 buildHighlightsForSearchReferences:v5 contentsScaleForLayers:1 shouldCreateBackground:*(void *)(a1 + 40)];
}

void sub_1003B6F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B6FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B7500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B78F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B807C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B8318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B8348(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) storage];
  id v3 = [v2 copyWithMarkedText];

  double v4 = [*(id *)(a1 + 32) layout];
  if (v4)
  {
    CGFloat v5 = [*(id *)(a1 + 32) canvas];

    if (v5)
    {
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v6 = 0;
      CGFloat v8 = (char *)[*(id *)(a1 + 40) range];
      CGFloat v10 = v9;
      CGFloat v12 = (char *)[*(id *)(a1 + 32) range];
      CGRect v13 = *(void **)(a1 + 32);
      if (!v13[41]) {
        goto LABEL_20;
      }
      NSUInteger v14 = v11;
      unsigned int v15 = [v13 p_spellCheckingEnabled];
      unsigned int v16 = v12 == (char *)0x7FFFFFFFFFFFFFFFLL ? 0 : v15;
      if (v16 != 1 || !v14) {
        goto LABEL_20;
      }
      double v17 = (char *)[v3 range];
      v39.length = v18;
      if (v17 > v12 || (double v19 = &v12[v14], &v17[v18] < &v12[v14]))
      {
        v39.location = (NSUInteger)v17;
        unsigned int v38 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014F4DA8);
        }
        double v20 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
        {
          v54.location = (NSUInteger)v12;
          v54.length = v14;
          double v37 = NSStringFromRange(v54);
          NSStringFromRange(v39);
          *(_DWORD *)buf = 67110402;
          unsigned int v42 = v38;
          __int16 v43 = 2082;
          double v44 = "-[CRLWPRep p_updateSuppressedSpellingRange]_block_invoke";
          __int16 v45 = 2082;
          double v46 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRep.mm";
          __int16 v47 = 1024;
          int v48 = 3002;
          __int16 v49 = 2114;
          double v50 = v37;
          v52 = __int16 v51 = 2114;
          double v36 = (void *)v52;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep's layout range should have been updated or removed (rep range: %{public}@, storage range: %{public}@)", buf, 0x36u);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014F4DC8);
        }
        double v21 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        double v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLWPRep p_updateSuppressedSpellingRange]_block_invoke");
        double v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRep.mm"];
        v53.location = (NSUInteger)v12;
        v53.length = v14;
        double v24 = NSStringFromRange(v53);
        CGFloat v25 = NSStringFromRange(v39);
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v22, v23, 3002, 0, "Rep's layout range should have been updated or removed (rep range: %{public}@, storage range: %{public}@)", v24, v25);

        goto LABEL_20;
      }
      __double2 v40 = (char *)[v3 wordAtCharIndex:v8 includePreviousWord:1];
      uint64_t v27 = v26;
      id v28 = *(id *)(*(void *)(a1 + 32) + 544);
      if (v28 != [v3 changeCount])
      {
        if (v27 && ([*(id *)(a1 + 40) isInsertionPoint] & 1) != 0)
        {
          uint64_t v6 = v27;
          uint64_t v7 = (uint64_t)v40;
        }
        else if (v40 <= v8 && &v40[v27] >= &v10[(void)v8])
        {
          uint64_t v6 = v27;
          uint64_t v7 = (uint64_t)v40;
        }
        goto LABEL_20;
      }
      if ((double v29 = *(char **)(*(void *)(a1 + 32) + 352), v30 = *(char **)(*(void *)(a1 + 32) + 360), v8 == v29)
        && v30 == v10
        || ((v31 = &v29[(void)v30], v29 == v40) ? (BOOL v32 = v31 == v19) : (BOOL v32 = 0),
            !v32 ? (char v33 = 0) : (char v33 = 1),
            v31 < &v10[(void)v8] ? (BOOL v34 = v8 - v29 >= (unint64_t)v30) : (BOOL v34 = 0),
            !v34 ? (BOOL v35 = v8 >= v29) : (BOOL v35 = 0),
            !v35 && v8 != v31 && (v33 & 1) == 0))
      {
LABEL_20:
        [*(id *)(a1 + 32) p_setSuppressedMisspellingRange:v7, v6];
      }
    }
  }
  *(void *)(*(void *)(a1 + 32) + 544) = [v3 changeCount];
}

void sub_1003B87A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B8844(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B8888(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B8D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B8DE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B8E2C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B9348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1003B9418(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) storage];
  unsigned int v7 = [v6 characterAtIndex:a2];

  if (v7 <= 0xD && ((1 << v7) & 0x3C30) != 0 || v7 - 8232 < 2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
    *a3 = 1;
  }
}

void sub_1003B94A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B94B8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) storage];
  unsigned int v7 = [v6 characterAtIndex:a2];

  if (v7 <= 0xD && ((1 << v7) & 0x3C30) != 0 || v7 - 8232 < 2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
    *a3 = 1;
  }
}

void sub_1003B9548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B9558(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B959C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003B963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B9730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B981C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B99AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B9A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B9D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1003BA368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,void *a49)
{
  _Unwind_Resume(a1);
}

void sub_1003BA7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BA7F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BA838(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BA9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BABC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BAD74(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1003BB20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BB308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BB380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BB684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BB6AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BB6F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BBA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BBB18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BBB5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BBD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BBDC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BBE08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BC0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BC100(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BC144(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BC29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BC3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BC504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BC984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BCAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BCCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BCDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BCE14(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  uint64_t v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_1003BCEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BD0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BD16C(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 floatForKey:@"CRLWPCollaborativeCaretCursorOpacity"];
  float v3 = v2;

  BOOL v4 = v3 > 1.0 || v3 <= 0.0;
  double v5 = v3;
  if (v4) {
    double v5 = 0.720000029;
  }
  qword_1016A98A8 = *(void *)&v5;
  uint64_t v6 = +[NSUserDefaults standardUserDefaults];
  [v6 floatForKey:@"CRLWPCollaborativeRangeCursorOpacity"];
  float v8 = v7;

  BOOL v9 = v8 > 1.0 || v8 <= 0.0;
  double v10 = v8;
  if (v9) {
    double v10 = 0.300000012;
  }
  qword_1016A98B0 = *(void *)&v10;
}

void sub_1003BD22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BD978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1003BDAC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BDB0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BDE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003BDEB4(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  float v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_1003BDEF8(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  float v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_1003BDF3C(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, uint64_t a5)
{
  id v9 = a4;
  double v10 = objc_alloc_init(CRLWPSelectionHighlightLayer);
  [(CRLWPSelectionHighlightLayer *)v10 setPath:a2];
  uint64_t v11 = [v9 owner];
  CGFloat v12 = v11;
  if (a5) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = 2;
  }
  uint64_t v14 = [v11 collaboratorColorForType:v13];

  [*(id *)(a1 + 32) collaborativeCursorOpacityForCaret:a5];
  uint64_t v15 = [v14 colorWithAlphaComponent:];
  -[CRLWPSelectionHighlightLayer setFillColor:](v10, "setFillColor:", [v15 CGColor]);

  [(CRLWPSelectionHighlightLayer *)v10 setStrokeColor:0];
  long long v16 = a3[1];
  v19[0] = *a3;
  v19[1] = v16;
  void v19[2] = a3[2];
  [(CRLWPSelectionHighlightLayer *)v10 setAffineTransform:v19];
  uint64_t v17 = *(void **)(a1 + 40);
  uint64_t v18 = +[CRLCanvasRenderable renderableFromLayer:v10];
  [v17 addSubrenderable:v18];
}

void sub_1003BE064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BE0B4(id a1)
{
  id v1 = sub_100401ECC("CRLCollaboratorCursorCat");
  float v2 = off_10166B618;
  off_10166B618 = v1;
}

void sub_1003BE1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BE26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BE310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BE3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BE47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BE6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BE74C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BE790(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BE8AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained spellChecker];

  if (v1)
  {
    [WeakRetained p_updateSuppressedSpellingRange];
    [WeakRetained setNeedsDisplay];
  }
}

void sub_1003BE914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BEB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BEC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BECC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BED98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BEEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BF1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BF290(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BF2D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BF3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BF4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003BF644(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) interactiveCanvasController];
  float v2 = [v4 primaryFindResultSearchReference];
  unsigned int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) interactiveCanvasController];
    [v5 setPrimaryFindResultSearchReference:0];
  }
}

void sub_1003BF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BF9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BFA4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BFA90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003BFB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003BFBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BFCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BFE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003BFED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C0014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C012C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C054C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C0604(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C0648(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C068C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C06D0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C08C8(_Unwind_Exception *exception_object)
{
}

void sub_1003C08F0(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  float v2 = [*(id *)(a1 + 32) searchReferences];
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (objc_msgSend(*(id *)(a1 + 32), "p_doesRepIntersectSearchReference:", v6))
        {
          float v7 = *(void **)(*(void *)(a1 + 32) + 304);
          uint64_t v15 = v6;
          float v8 = +[NSArray arrayWithObjects:&v15 count:1];
          id v9 = [*(id *)(a1 + 32) canvas];
          [v9 contentsScale];
          double v10 = [v7 buildHighlightsForSearchReferences:v8 contentsScaleForLayers:1 shouldCreateBackground:*(void *)(a1 + 40)];

          [v6 setFindHighlights:v10];
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v11 objects:v16 count:16];
    }
    while (v3);
  }
}

void sub_1003C0A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C0EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C0F44(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C0F88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C1098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C11A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C12DC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) textEditor];
}

void sub_1003C13AC(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) canvas];
  id v22 = [v6 canvasController];

  id v7 = *(id *)(a1 + 32);
  float v8 = [*(id *)(a1 + 32) parentRep];
  uint64_t v15 = sub_100246AC8(v8, 1, v9, v10, v11, v12, v13, v14, (uint64_t)&OBJC_PROTOCOL___CRLWPContainerTextEditingRep);

  [*(id *)(a1 + 32) beginEditing];
  if (v15)
  {
    long long v16 = [v15 containedRep];

    uint64_t v17 = [v16 layout];
    [v17 validate];
  }
  else
  {
    long long v16 = v7;
  }
  uint64_t v18 = [v22 editorController];
  uint64_t v19 = [v18 mostSpecificCurrentEditorOfClass:objc_opt_class()];

  uint64_t v20 = [v19 storage];
  uint64_t v21 = [v16 storage];

  if (v20 == v21) {
    [*(id *)(a1 + 32) scribbleSetSelectionForBeginEditingWithBoundsPoint:v16 tappedInRep:a2];
  }
}

void sub_1003C152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C1A80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C1AC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C1BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C1C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C1DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1003C1DEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) selection];
  id v5 = v4;
  if (!v4) {
    goto LABEL_27;
  }
  unint64_t v6 = (unint64_t)[v4 start];
  if ([v5 isRange])
  {
    id v7 = [*(id *)(a1 + 32) selection];
    float v8 = (char *)[v7 range];
    uint64_t v10 = v9;

    if (v3 && [v3 isValid])
    {
      uint64_t v11 = (uint64_t)[v3 range];
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v14 = &v8[v10];
    if (v6 != v11) {
      uint64_t v14 = (char *)v6;
    }
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v6 = (unint64_t)v14;
    }
    BOOL v13 = (char *)v11 == v8 && v12 == v10;
  }
  else
  {
    BOOL v13 = 0;
  }
  long long v16 = (char *)[*(id *)(a1 + 32) range];
  if (v6 >= (unint64_t)v16 && v6 - (unint64_t)v16 < v17)
  {
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (&v16[v17] != (char *)v6 || v13) {
LABEL_27:
  }
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_28:

  return v6;
}

void sub_1003C1F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C1F44(uint64_t a1)
{
  double x = CGRectNull.origin.x;
  double y = CGRectNull.origin.y;
  double width = CGRectNull.size.width;
  double height = CGRectNull.size.height;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  id v22 = [*(id *)(a1 + 40) selection];
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v7 = [*(id *)(a1 + 40) interactiveCanvasController];
    [v7 layoutIfNeeded];

    if ([v22 isInsertionPoint]) {
      [*(id *)(a1 + 40) caretRectForSelection:v22];
    }
    else {
      [*(id *)(a1 + 40) caretRectForCharIndex:v6 caretAffinity:[v22 caretAffinity]];
    }
    double x = v8;
    double y = v9;
    if (v10 == 0.0) {
      double width = 1.0;
    }
    else {
      double width = v10;
    }
    if (v11 == 0.0) {
      double height = 1.0;
    }
    else {
      double height = v11;
    }
  }
  v24.origin.double x = x;
  v24.origin.double y = y;
  v24.size.double width = width;
  v24.size.double height = height;
  if (!CGRectIsNull(v24))
  {
    [*(id *)(a1 + 40) p_convertRectIntoZoomCoordinates:x, y, width, height];
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    uint64_t v20 = [*(id *)(a1 + 40) interactiveCanvasController];
    uint64_t v21 = [v20 canvasView];
    v25.origin.double x = v13;
    v25.origin.double y = v15;
    v25.size.double width = v17;
    v25.size.double height = v19;
    UIAccessibilityZoomFocusChanged(UIAccessibilityZoomTypeInsertionPoint, v25, v21);
  }
}

void sub_1003C20C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C21A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C22F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C233C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003C234C(uint64_t a1)
{
}

void sub_1003C2354(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v6 storage];
    id v5 = *(void **)(a1 + 32);

    if (v4 == v5) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    }
  }
}

void sub_1003C23F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C2B48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C2B8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C2E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2E6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003C2E7C(uint64_t a1)
{
}

void sub_1003C2E84(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  int v10 = *(unsigned __int8 *)(v9 + 24);
  if (v8 && *(unsigned char *)(v9 + 24))
  {
    *(unsigned char *)(v9 + 24) = 0;
    [*(id *)(a1 + 32) handleFailureWithHandler:*(void *)(a1 + 40) error:v8];
    int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  if (v10 && (double v11 = *(NSObject **)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) != 0)
  {
    if (v7)
    {
      dispatch_data_t concat = dispatch_data_create_concat(v11, v7);
      uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
      double v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = concat;

      double v11 = *(NSObject **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    }
    CGFloat v15 = v11;

    size_t size = dispatch_data_get_size(v15);
    if ((a2 & 1) != 0 || size >= 0x1E)
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
      CGFloat v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = 0;

      id v34 = v8;
      size_t v35 = 0;
      unsigned __int8 v20 = [*(id *)(a1 + 32) readFileHeaderFromData:v15 headerLength:&v35 error:&v34];
      id v17 = v34;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v20;
      size_t v21 = v35;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v35 != *(void *)(a1 + 80);
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
        {
          [*(id *)(a1 + 32) readWithFileHeaderLength:v21 handler:*(void *)(a1 + 40)];
        }
        else
        {
          size_t v22 = dispatch_data_get_size(v15);
          if (v22 >= v21)
          {
            dispatch_data_t subrange = dispatch_data_create_subrange(v15, v21, v22 - v21);

            CGFloat v15 = subrange;
          }
          else
          {
            size_t v23 = v22;
            if (qword_101719A68 != -1) {
              dispatch_once(&qword_101719A68, &stru_1014F53C8);
            }
            CGRect v24 = off_10166B498;
            if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR))
            {
              id v31 = *(void **)(*(void *)(a1 + 32) + 8);
              BOOL v32 = v24;
              char v33 = [v31 name];
              *(_DWORD *)buf = 138412802;
              NSRange v39 = v33;
              __int16 v40 = 2048;
              size_t v41 = v23;
              __int16 v42 = 2048;
              size_t v43 = v35;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Read was less than file header size for entry %@. dataSize=%zu, headerLength=%zu", buf, 0x20u);
            }
            v36[0] = @"CRLZipArchiveErrorDescription";
            v36[1] = @"CRLZipArchiveErrorEntryName";
            v37[0] = @"Entry is too small";
            uint64_t v25 = [*(id *)(*(void *)(a1 + 32) + 8) name];
            uint64_t v26 = (void *)v25;
            CFStringRef v27 = &stru_101538650;
            if (v25) {
              CFStringRef v27 = (const __CFString *)v25;
            }
            v37[1] = v27;
            id v28 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];
            uint64_t v29 = +[NSError crl_fileReadCorruptedFileErrorWithUserInfo:v28];

            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
            id v17 = (id)v29;
          }
        }
      }
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        [*(id *)(a1 + 32) handleFailureWithHandler:*(void *)(a1 + 40) error:v17];
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      id v17 = v8;
    }
  }
  else
  {
    id v17 = v8;
    CGFloat v15 = v7;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) processData:v15 CRC:*(void *)(*(void *)(a1 + 72)+ 8)+ 24 isDone:a2 handler:*(void *)(a1 + 40)];
  }
}

void sub_1003C3258(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C34F8(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C353C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v13 = 0;
  if (v6
    || (id v7 = *(void **)(a1 + 32),
        id v12 = 0,
        unsigned int v8 = [v7 readFileHeaderFromData:v5 headerLength:&v13 error:&v12],
        id v6 = v12,
        !v8))
  {
    [*(id *)(a1 + 32) handleFailureWithHandler:*(void *)(a1 + 40) error:v6];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = *(void **)(v9 + 32);
    double v11 = (char *)[*(id *)(v9 + 8) offset];
    [v10 readFromOffset:&v11[v13 + *(void *)(a1 + 48)] length:*(void *)(a1 + 56) handler:*(void *)(a1 + 40)];
  }
}

void sub_1003C3A40(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C3A84(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C3AC8(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C3C4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1003C3C78(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v10 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  int v9 = *(unsigned __int8 *)(v8 + 24);
  if (v7 && *(unsigned char *)(v8 + 24))
  {
    *(unsigned char *)(v8 + 24) = 0;
    [*(id *)(a1 + 32) handleFailureWithHandler:*(void *)(a1 + 40) error:v7];
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  if (v9) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) processData:v10 CRC:*(void *)(*(void *)(a1 + 56)+ 8)+ 24 isDone:a2 handler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1003C3F60(uint64_t a1, int a2, int a3, Bytef *buf, unint64_t len)
{
  uLong v7 = **(unsigned int **)(a1 + 32);
  if (HIDWORD(len))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F54E0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010AB390();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F5500);
    }
    id v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    double v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipReadChannel processData:CRC:isDone:handler:]_block_invoke");
    id v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipReadChannel.m"];
    +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:259 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

    uInt v8 = -1;
  }
  else
  {
    uInt v8 = len;
  }
  **(_DWORD **)(a1 + 32) = crc32(v7, buf, v8);
  return 1;
}

void sub_1003C40E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4124(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  float v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003C4678(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C46BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4744(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C48F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4934(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  float v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C4A88(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if ([v1 conformsToProtocol:&OBJC_PROTOCOL___CRLAccessibilitySpecializer]
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(objc_msgSend(v1, "specializedClass"), "isSubclassOfClass:", v1);
  }
  uint64_t v2 = objc_opt_new();
  id v3 = (void *)qword_1016A98C0;
  qword_1016A98C0 = v2;
}

void sub_1003C57F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C5834(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6804(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6848(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C688C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C68D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C699C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C69E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6A24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6A68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C6D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C6D94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003C6DA4(uint64_t a1)
{
}

void sub_1003C6DAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uInt v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1003C7688(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C76CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7A0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7A50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7E4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7E90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7ED4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C7F18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C848C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C84D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C8514(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C8558(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C859C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C85E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C909C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C90E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9124(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C91AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C91F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C93BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9400(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C98AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C98F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9E38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9E7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9EC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003C9F04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA100(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA144(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA4D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA518(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA55C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CA5A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CC1B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CC1F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CC238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CC27C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003CC3E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) p_crl_uncachedScreenClass];
  qword_1016A98D8 = (uint64_t)result;
  return result;
}

void sub_1003CCC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCC54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCC98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCCDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCD20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCD64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCDA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCDEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCE30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCE74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CCEFC(id a1)
{
  BOOL v1 = (id)+[UIScreen crl_screenClass] == (id)3
    || (id)+[UIScreen crl_screenClass] == (id)5;
  byte_1016A98E8 = v1;
}

void sub_1003CCF90(id a1)
{
  BOOL v1 = (id)+[UIScreen crl_screenClass] == (id)1
    || (id)+[UIScreen crl_screenClass] == (id)2;
  byte_1016A98F8 = v1;
}

void sub_1003CD024(id a1)
{
  id v5 = +[UIScreen mainScreen];
  [v5 nativeScale];
  double v2 = v1;
  id v3 = +[UIScreen mainScreen];
  [v3 scale];
  *(double *)&qword_10166E180 = v2 / v4;
}

void sub_1003CD0E8(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 1080.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9910 = v8;
}

void sub_1003CD1A0(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 1112.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9920 = v8;
}

void sub_1003CD258(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 1180.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9930 = v8;
}

void sub_1003CD310(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 1194.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9940 = v8;
}

void sub_1003CD3C8(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 1366.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9950 = v8;
}

void sub_1003CD480(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_padUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 >= 1366.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9960 = v8;
}

void sub_1003CD538(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 568.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9970 = v8;
}

void sub_1003CD5F0(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 <= 568.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9980 = v8;
}

void sub_1003CD6A8(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 667.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9990 = v8;
}

void sub_1003CD760(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 <= 667.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99A0 = v8;
}

void sub_1003CD818(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 693.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99B0 = v8;
}

void sub_1003CD8D0(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 736.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99C0 = v8;
}

void sub_1003CD988(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 812.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99D0 = v8;
}

void sub_1003CDA40(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 >= 812.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99E0 = v8;
}

void sub_1003CDAF8(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 844.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A99F0 = v8;
}

void sub_1003CDBB0(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 896.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9A00 = v8;
}

void sub_1003CDC68(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 bounds];
  double v3 = v2;
  double v5 = v4;

  unsigned __int8 v6 = +[UIDevice crl_phoneUI];
  if (v3 >= v5) {
    double v7 = v3;
  }
  else {
    double v7 = v5;
  }
  if (v7 == 926.0) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  byte_1016A9A10 = v8;
}

void sub_1003CDF2C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CDF70(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CE188(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003CE1CC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

int64_t sub_1003CEBFC(id a1, id a2, id a3)
{
  id v4 = a3;
  [a2 crlaxFrameInScreenSpace];
  double v6 = v5;
  [v4 crlaxFrameInScreenSpace];
  double v8 = v7;

  int64_t v9 = -1;
  if (v6 >= v8) {
    int64_t v9 = 1;
  }
  if (v6 == v8) {
    return 0;
  }
  else {
    return v9;
  }
}

void sub_1003CEFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1003CF024(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003CF034(uint64_t a1)
{
}

void sub_1003CF03C(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v14 = a2;
  double v6 = NSClassFromString(@"Freeform.CRLWPEditor");
  double v7 = __CRLAccessibilityCastAsClass(v6, (uint64_t)v14, 0, 0);
  uint64_t v8 = [v7 crlaxValueForKey:@"crlaxEditingRepWithCaret"];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
    && [v14 conformsToProtocol:*(void *)(a1 + 32)])
  {
    uint64_t v11 = [*(id *)(a1 + 40) _crlaxFirstSelectedRepInCanvasEditor:v14 preferExplicitlyFocusedReps:1];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  *a4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
}

void sub_1003CF298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003CF2B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertBoundsToUnscaledPoint:*(double *)(a1 + 48) *(double *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  return result;
}

void sub_1003CF3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003CF3E8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertBoundsToUnscaledRect:*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1003CF4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003CF50C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertUnscaledToBoundsPoint:*(double *)(a1 + 48) *(double *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  return result;
}

void sub_1003CF62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003CF644(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertUnscaledToBoundsRect:*(double *)(a1 + 48) *(double *)(a1 + 56) *(double *)(a1 + 64) *(double *)(a1 + 72)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1003CF7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CF814(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) repForInfo:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003CF9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CF9F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) repsForInfo:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003CFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003CFBC0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) repForLayout:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003D0510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D0528(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) crlaxCanvasEditor];
  uint64_t v2 = [v5 selectionPathWithInfos:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003D0880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D0898(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) infosForSelectionPath:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003D0A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D0A38(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) infosForCurrentSelectionPath];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003D0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D0C00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) layoutsForSelectionPath:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003D0CC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) scrollCurrentSelectionToVisibleWithOptions:8];
}

id sub_1003D0F78(uint64_t a1)
{
  return [*(id *)(a1 + 32) scrollToSelectionPath:*(void *)(a1 + 40) scrollOptions:0];
}

id sub_1003D0FFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

void sub_1003D1358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003D1370(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertPointsToRulerUnits:*(double *)(a1 + 48)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_1003D16B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _crlaxCollaborationModifiers];
  id v3 = [v2 count];

  if ((unint64_t)v3 <= 3)
  {
    id v5 = [*(id *)(a1 + 32) _crlaxCollaborationModifiers];
    id v6 = [v5 count];

    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v4 = @"collaborator.modified.context.names";
  }
  else
  {
    uint64_t v4 = @"collaborator.modified.context.count";
  }
  uint64_t v7 = CRLAccessibilitySpecializedLocalizedString(v4);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = [*(id *)(a1 + 32) _crlaxCollaborationModifiers];
    id v10 = [v9 allObjects];
    uint64_t v11 = [v10 componentsJoinedByString:@", "];

    uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v11);
    CRLAccessibilityPostAnnouncementNotification(*(void **)(a1 + 40), v12);
  }
LABEL_7:
  id v13 = [*(id *)(a1 + 32) _crlaxCollaborationModifiers];
  [v13 removeAllObjects];
}

id sub_1003D18BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _crlaxPostCollaborationOccurredSound];
}

void sub_1003D2344(uint64_t a1)
{
  uint64_t v2 = +[NSBundle mainBundle];
  id v7 = [v2 localizedStringForKey:@"Current selection: %@" value:0 table:0];

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) crlaxInfos];
  id v5 = [v4 mutableCopy];
  id v6 = [v3 p_sentenceUsingFormat:v7 toDescribeRepSelectionOrDeltaWith:v5];

  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, v6);
}

void sub_1003D269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D26BC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v5 = [*(id *)(a1 + 32) crlaxRepForInfo:a2];
  id v7 = [v5 crlaxTarget];

  id v6 = [v7 accessibilityLabel];
  if (v6) {
    [*(id *)(a1 + 40) addObject:v6];
  }
  else {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_1003D29EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D2A30(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D2EA0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D2EE4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D31B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D31FC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D36A8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D36EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D3F54(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D3F98(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D3FDC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D4020(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D4064(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D40A8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003D4454(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1[4] shapeFromSearchResult:v3];
  id v5 = [v4 name];
  id v6 = [v3 score];
  id v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 priority]);
  if ([v3 priority] && objc_msgSend(v3, "priority") != (id)1)
  {
    uint64_t v8 = [v3 matchingKeyword];
    uint64_t v9 = [a1[5] p_locale];
    uint64_t v10 = +[CRLShapeLibraryHelper keywordByCapitalizingLowercasedKeyword:v8 locale:v9];

    id v5 = (void *)v10;
  }
  [a1[6] setObject:v5 forKey:v4];
  v13[0] = @"CRLShapeSearchResultsCollectionShapeKey";
  v13[1] = @"CRLShapeSearchResultsCollectionScoreKey";
  v14[0] = v4;
  v14[1] = v6;
  v13[2] = @"CRLShapeSearchResultsCollectionPriorityKey";
  v13[3] = @"CRLShapeSearchResultsCollectionDisplayNameKey";
  v14[2] = v7;
  v14[3] = v5;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:4];

  return v11;
}

id sub_1003D4694(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) displayNameForShape:v5];
  uint64_t v8 = [*(id *)(a1 + 32) displayNameForShape:v6];
  id v9 = [v7 localizedStandardCompare:v8];

  if (!v9) {
    id v9 = [*(id *)(a1 + 32) p_comparePositionOfShape:v5 withOtherShape:v6];
  }

  return v9;
}

void sub_1003D4B1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D4B60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D4EAC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D4EF0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D595C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D59A0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D59E4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D5A28(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D5D1C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D5D60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D5DA4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D5DE8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D600C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D6050(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D641C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D6460(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003D7654(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 repForSelecting];
  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [v3 repForSelecting];
    id v7 = [v6 layout];
    id v8 = [v5 p_isValidConnectionDestination:v7];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_1003D8890(uint64_t a1, void *a2)
{
  id v3 = [a2 repForSelecting];
  uint64_t v4 = [v3 layout];
  id v5 = *(void **)(a1 + 32);

  if (v4 == v5)
  {
    id v7 = 0;
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) rep];
    id v7 = [v6 canConnectToRep:v3];
  }
  return v7;
}

void sub_1003D9E74(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003D9EB8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DAA60(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DAAA4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DAD78(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DADBC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DAFA0(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DAFE4(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DBA10(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DBA54(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DBA98(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DBADC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_1003DC3EC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC430(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC474(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC4B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC4FC(uint64_t a1)
{
  id v14 = [*(id *)(a1 + 32) editablePathSource];
  uint64_t v2 = [v14 subpaths];
  id v3 = [v2 objectAtIndex:[*(id *)(a1 + 40) subpathIndex]];

  id v4 = [*(id *)(a1 + 40) nodeIndex];
  [*(id *)(a1 + 40) tValue];
  id v5 = [v3 splitEdgeAtIndex:v4];
  if ([*(id *)(a1 + 40) hoveringSharp])
  {
    [v5 setType:1];
    id v6 = [v3 nodes];
    id v7 = [v6 objectAtIndexedSubscript:[*(id *)(a1 + 40) nodeIndex]];

    id v8 = [v3 nodes];
    id v9 = [*(id *)(a1 + 40) nodeIndex];
    uint64_t v10 = [v3 nodes];
    uint64_t v11 = objc_msgSend(v8, "objectAtIndexedSubscript:", ((unint64_t)v9 + 2) % (unint64_t)objc_msgSend(v10, "count"));

    if ([v7 type] == (id)1)
    {
      [v7 nodePoint];
      [v7 setOutControlPoint:];
      [v5 nodePoint];
      [v5 setInControlPoint:];
    }
    if ([v11 type] == (id)1)
    {
      [v5 nodePoint];
      [v5 setOutControlPoint:];
      [v11 nodePoint];
      [v11 setInControlPoint:];
    }
  }
  else
  {
    uint64_t v12 = +[NSUserDefaults standardUserDefaults];
    unsigned int v13 = [v12 BOOLForKey:@"TSDCreateBezierNodesByDefault"];

    if (v13) {
      [v5 setType:2];
    }
  }
}

void sub_1003DC6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003DC774(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DC7B8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DCC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1003DCCF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) editablePathSource];
  id v11 = v2;
  if (*(unsigned char *)(a1 + 56))
  {
    id v3 = [v2 lastNode];
    [v3 setReflectedState:2];
    [v3 setType:1];
    double v4 = *(double *)(a1 + 40);
    double v5 = *(double *)(a1 + 48);
    [v3 setInControlPoint:v4, v5];
    [v3 setOutControlPoint:v4, v5];
    [v3 setNodePoint:v4, v5];
  }
  else
  {
    id v3 = +[CRLBezierNode bezierNodeWithPoint:](CRLBezierNode, "bezierNodeWithPoint:", *(double *)(a1 + 40), *(double *)(a1 + 48));
    [v3 setReflectedState:2];
    [v3 setType:1];
    id v6 = [[CRLEditableBezierPathSourceMorphInfo alloc] initWithEditableBezierPathSource:v11];
    if (*(unsigned char *)(a1 + 57))
    {
      id v7 = [v11 subpaths];
      id v8 = [v7 lastObject];

      id v9 = [v8 nodes];
      id v10 = [v9 mutableCopy];

      [v10 insertObject:v3 atIndex:0];
      [v8 setNodes:v10];
    }
    else
    {
      [v11 addNode:v3];
    }
    [v11 morphWithMorphInfo:v6];
  }
}

void sub_1003DCE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003DCEF8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DCF3C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DD0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003DD190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DD5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1003DE808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  size_t v23 = v22;

  _Unwind_Resume(a1);
}

void sub_1003DEFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DF33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DF57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DF5C8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DF60C(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DFBDC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DFC20(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003DFC64(void *a1, void *a2, int a3, int a4, _DWORD *a5, void *a6)
{
  size_t v21 = a1;
  id v11 = a2;
  id v12 = a6;
  *a5 = a4;
  LODWORD(v13) = a3;
  if (a3 >= 1)
  {
    unsigned __int8 v20 = a5;
    uint64_t v13 = a3;
    while (1)
    {
      uint64_t v14 = v13 - 1;
      if (!sub_1003E0288(v12, (v13 - 1), a4))
      {
        if (sub_1003E0288(v11, (v13 - 1), a4) == 1) {
          break;
        }
        CGFloat v15 = (int *)qword_1016A9A28;
        unsigned int v16 = sub_1003E05BC(v21, (v13 - 1), a4);
        if (!sub_1003E0540(v15, v16)) {
          break;
        }
      }
      --v13;
      if ((unint64_t)(v14 + 1) <= 1)
      {
        LODWORD(v13) = 0;
        break;
      }
    }
    a5 = v20;
  }
  a5[1] = v13;
  if (v21[1] > a3 + 1)
  {
    int64_t v17 = a3 + 1;
    do
    {
      if (!sub_1003E0288(v12, v17, a4))
      {
        if (sub_1003E0288(v11, v17, a4) == 1) {
          break;
        }
        uint64_t v18 = (int *)qword_1016A9A28;
        unsigned int v19 = sub_1003E05BC(v21, v17, a4);
        if (!sub_1003E0540(v18, v19)) {
          break;
        }
      }
      ++v17;
      ++a3;
    }
    while (v21[1] > v17);
  }
  a5[2] = a3;
}

void sub_1003DFE1C(void *a1, int *a2)
{
  id v3 = a1;
  int64_t v4 = a2[1];
  if ((int)v4 <= a2[2])
  {
    double v5 = (os_log_t *)&off_10166B4A0;
    do
    {
      uint64_t v6 = *a2;
      id v7 = v3;
      id v8 = v7;
      if (v4 < 0 || (v6 & 0x80000000) != 0 || v7[1] <= v4 || v7[2] <= v6)
      {
        unsigned int v10 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014F68C0);
        }
        id v11 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = v8[1];
          uint64_t v18 = v8[2];
          *(_DWORD *)buf = 67110914;
          unsigned int v22 = v10;
          __int16 v23 = 2082;
          CGRect v24 = "void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)";
          __int16 v25 = 2082;
          uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
          __int16 v27 = 1024;
          int v28 = 67;
          __int16 v29 = 2048;
          uint64_t v30 = v4;
          __int16 v31 = 2048;
          uint64_t v32 = v6;
          __int16 v33 = 2048;
          uint64_t v34 = v17;
          __int16 v35 = 2048;
          uint64_t v36 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F68E0);
          }
        }
        id v12 = v5;
        os_log_t v13 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          unsigned int v19 = v13;
          unsigned __int8 v20 = +[CRLAssertionHandler packedBacktraceString];
          *(_DWORD *)buf = 67109378;
          unsigned int v22 = v10;
          __int16 v23 = 2114;
          CGRect v24 = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
        }
        uint64_t v14 = +[NSString stringWithUTF8String:"void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)"];
        CGFloat v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 67, 0, "bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", v4, v6, v8[1], v8[2]);

        double v5 = v12;
      }
      else
      {
        uint64_t v9 = v7[4] + v7[3] * v6;
        *(unsigned char *)(v9 + ((unint64_t)v4 >> 3)) |= 0x80u >> (v4 & 7);
      }
    }
    while (v4++ < a2[2]);
  }
}

uint64_t sub_1003E01A4(uint64_t a1, uint64_t *a2)
{
  double v5 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 - (uint64_t)v5 - 16 >= 589)
  {
    uint64_t v6 = *v5;
    if (!v6)
    {
      uint64_t result = (uint64_t)malloc_type_malloc(0x268uLL, 0x1020040F89E1A17uLL);
      id v8 = *(uint64_t **)(a1 + 8);
      *id v8 = result;
      if (!result) {
        return result;
      }
      *(void *)uint64_t result = 0;
      uint64_t v6 = *v8;
      *(void *)(*v8 + 8) = v8;
    }
    uint64_t v4 = v6 + 16;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v6 + 16;
  }
  uint64_t v9 = *a2;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v4 = v9;
  *(void *)(a1 + 16) += 12;
  return 1;
}

void sub_1003E023C(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      free(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }

  free(a1);
}

unint64_t sub_1003E0288(void *a1, unint64_t a2, uint64_t a3)
{
  double v5 = a1;
  uint64_t v6 = v5;
  if ((a2 & 0x8000000000000000) != 0 || a3 < 0 || v5[1] <= (int64_t)a2 || v5[2] <= a3)
  {
    unsigned int v8 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6900);
    }
    uint64_t v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = v6[1];
      uint64_t v15 = v6[2];
      *(_DWORD *)buf = 67110914;
      unsigned int v17 = v8;
      __int16 v18 = 2082;
      unsigned int v19 = "NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)";
      __int16 v20 = 2082;
      size_t v21 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
      __int16 v22 = 1024;
      int v23 = 52;
      __int16 v24 = 2048;
      unint64_t v25 = a2;
      __int16 v26 = 2048;
      uint64_t v27 = a3;
      __int16 v28 = 2048;
      uint64_t v29 = v14;
      __int16 v30 = 2048;
      uint64_t v31 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6920);
    }
    unsigned int v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v10);
    }
    id v11 = +[NSString stringWithUTF8String:"NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)"];
    id v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 52, 0, "bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v6[1], v6[2]);

    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = ((unint64_t)*(unsigned __int8 *)(v5[4] + v5[3] * a3 + (a2 >> 3)) << (a2 & 7)) & 0x80;
  }

  return v7;
}

BOOL sub_1003E0540(int *a1, unsigned int a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  LODWORD(v4) = HIBYTE(a2) - HIBYTE(*a1);
  if ((int)v4 >= 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = HIBYTE(*a1) - HIBYTE(a2);
  }
  if (v3 < v4) {
    return 0;
  }
  LODWORD(v5) = BYTE1(a2) - BYTE1(v2);
  uint64_t v5 = (int)v5 >= 0 ? v5 : BYTE1(v2) - BYTE1(a2);
  if (v3 < v5) {
    return 0;
  }
  LODWORD(v6) = BYTE2(a2) - BYTE2(v2);
  uint64_t v6 = (int)v6 >= 0 ? v6 : BYTE2(v2) - BYTE2(a2);
  if (v3 < v6) {
    return 0;
  }
  LODWORD(v8) = a2 - v2;
  if ((int)v8 >= 0) {
    uint64_t v8 = v8;
  }
  else {
    uint64_t v8 = -(int)v8;
  }
  return v3 >= v8;
}

uint64_t sub_1003E05BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (a2 < 0 || a3 < 0 || (uint64_t v7 = v5[1], v7 <= a2) || v5[2] <= a3)
  {
    unsigned int v9 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6940);
    }
    unsigned int v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = v6[1];
      uint64_t v16 = v6[2];
      *(_DWORD *)buf = 67110914;
      unsigned int v18 = v9;
      __int16 v19 = 2082;
      __int16 v20 = "CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)";
      __int16 v21 = 2082;
      __int16 v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h";
      __int16 v23 = 1024;
      int v24 = 36;
      __int16 v25 = 2048;
      uint64_t v26 = a2;
      __int16 v27 = 2048;
      uint64_t v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6960);
    }
    id v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010668E0(v11);
    }
    id v12 = +[NSString stringWithUTF8String:"CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)"];
    os_log_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 36, 0, "bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v6[1], v6[2]);

    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v5[3] + 4 * (a2 + v7 * a3));
  }

  return v8;
}

void sub_1003E0854(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E0898(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E08DC(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E0920(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E0964(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E09A8(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1003E0D58(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v7 = 0;
  if (([v2 isHidden] & 1) == 0)
  {
    [v2 accessibilityFrame];
    double v4 = v3;
    [v2 accessibilityFrame];
    if (v4 * v5 != 0.0)
    {
      [v2 alpha:v4 * v5];
      if (v6 != 0.0)
      {
        NSClassFromString(@"_UIRemoteView");
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          BOOL v7 = 1;
        }
      }
    }
  }

  return v7;
}

id sub_1003E12CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) crlaxInvalidateChildren];
}

void sub_1003E1C44(uint64_t a1)
{
  UIAccessibilityNotifications v1 = UIAccessibilityLayoutChangedNotification;
  [*(id *)(a1 + 32) p_visibleCells];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [v3 firstObject];
  UIAccessibilityPostNotification(v1, v2);
}

void sub_1003E3514(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E3558(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E3930(uint64_t a1, double a2)
{
  if (a2 <= 0.0)
  {
    int v3 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F69E8);
    }
    double v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010AD7F4(v3, v4, a2);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6A08);
    }
    double v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      double v6 = +[CRLAssertionHandler packedBacktraceString];
      sub_10106CDAC(v6, buf, v3, (os_log_t)v5);
    }

    BOOL v7 = +[NSString stringWithUTF8String:"void CRLPKInputSmoother::setSmoothingThresholdMultiplier(CGFloat)"];
    uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKInputSmoother.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 27, 0, "Unexpected multiplier value < 0 (%f).", *(void *)&a2);
  }
  else
  {
    *(double *)(a1 + 112) = a2;
  }
}

void sub_1003E3AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E3AFC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E3B40(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_1003E3B84(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v6 + 16))(v6, a2, a3);
  }
  *(void *)(a1 + 24) = v3;
  double v7 = 8.0;
  if (a2 == 1) {
    double v7 = 6.0;
  }
  double result = *(double *)(a1 + 112) * v7;
  *(double *)(a1 + 104) = result;
  return result;
}

void sub_1003E3C08(uint64_t a1)
{
  UIAccessibilityNotifications v1 = (void *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) > *(void *)(a1 + 40))
  {
    unint64_t v3 = (void **)(a1 + 120);
    sub_1003E448C(a1 + 120, 0);
    v116 = (uint64_t *)v3;
    sub_1003E44C8(v3, 8 * (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) - *(void *)(a1 + 40)));
    unint64_t v5 = *(void *)(a1 + 40);
    if (v5 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) - 1)
    {
      uint64_t v6 = (void *)(a1 + 136);
      double v7 = 1.0 / *(double *)(a1 + 24);
      do
      {
        uint64_t v8 = 0;
        unint64_t v9 = v5 + 1;
        do
        {
          double v10 = sub_10031C030(v1, v5, (double (*)(void, double))sub_10031BD2C, (double)v8 * 0.125);
          double v12 = v11;
          double v13 = sub_10031C030(v1, v5, (double (*)(void, double))sub_10031BDCC, (double)v8 * 0.125);
          double v15 = v14;
          double v16 = sub_10031C030(v1, v5, (double (*)(void, double))sub_10031BEAC, (double)v8 * 0.125);
          double v18 = v17;
          double v19 = pow(v15 * v15 + v13 * v13, 1.5);
          if (v19 <= 0.001) {
            double v20 = 100.0;
          }
          else {
            double v20 = fabs((v13 * v18 - v15 * v16) / v19);
          }
          double v21 = v20 * *(double *)(a1 + 24);
          double v22 = 0.0;
          if (v21 >= 0.0) {
            double v23 = v21;
          }
          else {
            double v23 = 0.0;
          }
          int v24 = *(double **)(a1 + 120);
          __int16 v25 = *(double **)(a1 + 128);
          if (v25 != v24) {
            double v22 = sub_1000653B4(v10, v12, *(v25 - 6), *(v25 - 5));
          }
          double v26 = sub_100065C88(*(double *)(*v1 + 80 * v5), *(double *)(*v1 + 80 * v9), (double)v8 * 0.125);
          double v27 = v26;
          double v28 = v7 * v22;
          if ((unint64_t)v25 >= *v6)
          {
            uint64_t v30 = ((char *)v25 - (char *)v24) / 48;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) > 0x555555555555555) {
              sub_100004E40();
            }
            if (0x5555555555555556 * ((uint64_t)(*v6 - (void)v24) >> 4) > v31) {
              unint64_t v31 = 0x5555555555555556 * ((uint64_t)(*v6 - (void)v24) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v6 - (void)v24) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v32 = 0x555555555555555;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32)
            {
              double v4 = (char *)sub_100134B88(a1 + 136, v32);
              int v24 = *(double **)(a1 + 120);
              __int16 v25 = *(double **)(a1 + 128);
            }
            else
            {
              double v4 = 0;
            }
            __int16 v33 = (double *)&v4[48 * v30];
            *__int16 v33 = v10;
            v33[1] = v12;
            v33[2] = v23;
            v33[3] = 0.0;
            v33[4] = v28;
            v33[5] = v27;
            uint64_t v34 = v33;
            if (v25 != v24)
            {
              do
              {
                long long v35 = *((_OWORD *)v25 - 3);
                long long v36 = *((_OWORD *)v25 - 1);
                *((_OWORD *)v34 - 2) = *((_OWORD *)v25 - 2);
                *((_OWORD *)v34 - 1) = v36;
                *((_OWORD *)v34 - 3) = v35;
                v34 -= 6;
                v25 -= 6;
              }
              while (v25 != v24);
              int v24 = (double *)*v116;
            }
            __int16 v29 = v33 + 6;
            *(void *)(a1 + 120) = v34;
            *(void *)(a1 + 128) = v33 + 6;
            *(void *)(a1 + 136) = &v4[48 * v32];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *__int16 v25 = v10;
            v25[1] = v12;
            v25[2] = v23;
            v25[3] = 0.0;
            __int16 v29 = v25 + 6;
            v25[4] = v28;
            v25[5] = v26;
          }
          *(void *)(a1 + 128) = v29;
          ++v8;
        }
        while (v8 != 8);
        ++v5;
      }
      while (v9 < -1 - 0x3333333333333333 * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4));
    }
    sub_1003E45B8((uint64_t)v4, v116);
    unint64_t v37 = *(void *)(a1 + 40);
    v118 = (void **)(a1 + 80);
    sub_10016BE28(a1 + 80, *(void *)(a1 + 72));
    unsigned int v38 = *(char **)(a1 + 80);
    NSRange v39 = *(char **)(a1 + 88);
    if (v39 == v38)
    {
      unint64_t v40 = *(void *)(a1 + 96);
      size_t v41 = *(_OWORD **)(a1 + 48);
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v45 = (v39 - v38) / 80;
        unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (void)v38) >> 4);
        uint64_t v47 = 2 * v46;
        if (2 * v46 <= v45 + 1) {
          uint64_t v47 = v45 + 1;
        }
        if (v46 >= 0x199999999999999) {
          unint64_t v48 = 0x333333333333333;
        }
        else {
          unint64_t v48 = v47;
        }
        __int16 v49 = (char *)sub_1001725F0(a1 + 96, v48);
        double v50 = &v49[80 * v45];
        uint64_t v52 = &v49[80 * v51];
        *(_OWORD *)double v50 = *v41;
        long long v53 = v41[1];
        long long v54 = v41[2];
        long long v55 = v41[4];
        *((_OWORD *)v50 + 3) = v41[3];
        *((_OWORD *)v50 + 4) = v55;
        *((_OWORD *)v50 + 1) = v53;
        *((_OWORD *)v50 + 2) = v54;
        NSRange v39 = v50 + 80;
        double v57 = *(char **)(a1 + 80);
        double v56 = *(char **)(a1 + 88);
        if (v56 != v57)
        {
          do
          {
            *((_OWORD *)v50 - 5) = *((_OWORD *)v56 - 5);
            long long v58 = *((_OWORD *)v56 - 4);
            long long v59 = *((_OWORD *)v56 - 3);
            long long v60 = *((_OWORD *)v56 - 1);
            *((_OWORD *)v50 - 2) = *((_OWORD *)v56 - 2);
            *((_OWORD *)v50 - 1) = v60;
            *((_OWORD *)v50 - 4) = v58;
            *((_OWORD *)v50 - 3) = v59;
            v50 -= 80;
            v56 -= 80;
          }
          while (v56 != v57);
          double v56 = (char *)*v118;
        }
        *(void *)(a1 + 80) = v50;
        *(void *)(a1 + 88) = v39;
        *(void *)(a1 + 96) = v52;
        if (v56) {
          operator delete(v56);
        }
      }
      else
      {
        *(_OWORD *)NSRange v39 = *v41;
        long long v42 = v41[1];
        long long v43 = v41[2];
        long long v44 = v41[4];
        *((_OWORD *)v39 + 3) = v41[3];
        *((_OWORD *)v39 + 4) = v44;
        *((_OWORD *)v39 + 1) = v42;
        *((_OWORD *)v39 + 2) = v43;
        v39 += 80;
      }
      *(void *)(a1 + 88) = v39;
    }
    uint64_t v61 = *(void *)(a1 + 120);
    uint64_t v62 = *(void *)(a1 + 128) - v61;
    unint64_t v117 = v37;
    if (!v62 || v62 == 48)
    {
      unint64_t v69 = v37;
    }
    else
    {
      unint64_t v63 = 0;
      double v64 = (void *)(a1 + 96);
      double v65 = 0.0;
      do
      {
        double v66 = (double *)(v61 + 48 * v63);
        double v67 = v66[10];
        double v68 = (v66[11] - v66[5]) * 1000.0;
        if (v68 > 2.0) {
          double v68 = 2.0;
        }
        if (v67 > v68) {
          double v68 = v66[10];
        }
        double v65 = v65 + v67 * 0.4 + (v66[3] + v66[9]) * 0.5 * v68;
        unint64_t v69 = *(void *)(a1 + 40) + (v63 >> 3);
        if (v65 <= *(double *)(a1 + 104) || v37 >= v69)
        {
          unint64_t v69 = v37;
        }
        else
        {
          double v71 = (_OWORD *)(*v1 + 80 * v69);
          if ((unint64_t)v39 >= *v64)
          {
            unint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (unsigned char *)*v118) >> 4);
            unint64_t v76 = v75 + 1;
            if (v75 + 1 > 0x333333333333333) {
              goto LABEL_109;
            }
            if (0x999999999999999ALL * ((uint64_t)(*v64 - (void)*v118) >> 4) > v76) {
              unint64_t v76 = 0x999999999999999ALL * ((uint64_t)(*v64 - (void)*v118) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v64 - (void)*v118) >> 4) >= 0x199999999999999) {
              unint64_t v77 = 0x333333333333333;
            }
            else {
              unint64_t v77 = v76;
            }
            if (v77) {
              double v78 = (char *)sub_1001725F0(a1 + 96, v77);
            }
            else {
              double v78 = 0;
            }
            double v79 = &v78[80 * v75];
            *(_OWORD *)double v79 = *v71;
            long long v80 = v71[1];
            long long v81 = v71[2];
            long long v82 = v71[4];
            *((_OWORD *)v79 + 3) = v71[3];
            *((_OWORD *)v79 + 4) = v82;
            *((_OWORD *)v79 + 1) = v80;
            *((_OWORD *)v79 + 2) = v81;
            CGRect v84 = *(char **)(a1 + 80);
            CGRect v83 = *(char **)(a1 + 88);
            v85 = v79;
            if (v83 != v84)
            {
              do
              {
                *((_OWORD *)v85 - 5) = *((_OWORD *)v83 - 5);
                long long v86 = *((_OWORD *)v83 - 4);
                long long v87 = *((_OWORD *)v83 - 3);
                long long v88 = *((_OWORD *)v83 - 1);
                *((_OWORD *)v85 - 2) = *((_OWORD *)v83 - 2);
                *((_OWORD *)v85 - 1) = v88;
                *((_OWORD *)v85 - 4) = v86;
                *((_OWORD *)v85 - 3) = v87;
                v85 -= 80;
                v83 -= 80;
              }
              while (v83 != v84);
              CGRect v83 = (char *)*v118;
            }
            NSRange v39 = v79 + 80;
            *(void *)(a1 + 80) = v85;
            *(void *)(a1 + 88) = v79 + 80;
            *(void *)(a1 + 96) = &v78[80 * v77];
            if (v83) {
              operator delete(v83);
            }
          }
          else
          {
            *(_OWORD *)NSRange v39 = *v71;
            long long v72 = v71[1];
            long long v73 = v71[2];
            long long v74 = v71[4];
            *((_OWORD *)v39 + 3) = v71[3];
            *((_OWORD *)v39 + 4) = v74;
            *((_OWORD *)v39 + 1) = v72;
            *((_OWORD *)v39 + 2) = v73;
            v39 += 80;
          }
          *(void *)(a1 + 88) = v39;
          double v89 = *((double *)v39 - 1);
          double v91 = *((double *)v39 - 6);
          double v90 = *((double *)v39 - 5);
          double v92 = *((double *)v39 - 7);
          v93 = (double *)(*(void *)(a1 + 48) + 80 * v37 + 40);
          do
          {
            if (v92 <= *(v93 - 2)) {
              double v92 = *(v93 - 2);
            }
            *((double *)v39 - 7) = v92;
            if (v89 <= v93[4]) {
              double v89 = v93[4];
            }
            *((double *)v39 - 1) = v89;
            if (v90 <= *v93) {
              double v90 = *v93;
            }
            *((double *)v39 - 5) = v90;
            if (v91 <= *(v93 - 1)) {
              double v91 = *(v93 - 1);
            }
            *((double *)v39 - 6) = v91;
            ++v37;
            v93 += 10;
          }
          while (v37 < v69);
          double v65 = 0.0;
          if (v69 < *(void *)(a1 + 32))
          {
            *(void *)(a1 + 72) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v39[-*(void *)(a1 + 80)] >> 4);
            unint64_t v117 = v69;
          }
        }
        ++v63;
        uint64_t v61 = *(void *)(a1 + 120);
        unint64_t v37 = v69;
      }
      while (v63 < -1 - 0x5555555555555555 * ((*(void *)(a1 + 128) - v61) >> 4));
    }
    *(void *)(a1 + 40) = v117;
    uint64_t v94 = *(void *)(a1 + 56);
    if (v69 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((v94 - *(void *)(a1 + 48)) >> 4))
    {
      v95 = (_OWORD *)(v94 - 80);
      unint64_t v96 = *(void *)(a1 + 96);
      if ((unint64_t)v39 >= v96)
      {
        unint64_t v101 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (unsigned char *)*v118) >> 4);
        if (v101 + 1 > 0x333333333333333) {
LABEL_109:
        }
          sub_100004E40();
        unint64_t v102 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v96 - (void)*v118) >> 4);
        uint64_t v103 = 2 * v102;
        if (2 * v102 <= v101 + 1) {
          uint64_t v103 = v101 + 1;
        }
        if (v102 >= 0x199999999999999) {
          unint64_t v104 = 0x333333333333333;
        }
        else {
          unint64_t v104 = v103;
        }
        if (v104) {
          v105 = (char *)sub_1001725F0(a1 + 96, v104);
        }
        else {
          v105 = 0;
        }
        v106 = &v105[80 * v101];
        v107 = &v105[80 * v104];
        *(_OWORD *)v106 = *v95;
        long long v108 = v95[1];
        long long v109 = v95[2];
        long long v110 = v95[4];
        *((_OWORD *)v106 + 3) = v95[3];
        *((_OWORD *)v106 + 4) = v110;
        *((_OWORD *)v106 + 1) = v108;
        *((_OWORD *)v106 + 2) = v109;
        v100 = v106 + 80;
        v112 = *(char **)(a1 + 80);
        v111 = *(char **)(a1 + 88);
        if (v111 != v112)
        {
          do
          {
            *((_OWORD *)v106 - 5) = *((_OWORD *)v111 - 5);
            long long v113 = *((_OWORD *)v111 - 4);
            long long v114 = *((_OWORD *)v111 - 3);
            long long v115 = *((_OWORD *)v111 - 1);
            *((_OWORD *)v106 - 2) = *((_OWORD *)v111 - 2);
            *((_OWORD *)v106 - 1) = v115;
            *((_OWORD *)v106 - 4) = v113;
            *((_OWORD *)v106 - 3) = v114;
            v106 -= 80;
            v111 -= 80;
          }
          while (v111 != v112);
          v111 = (char *)*v118;
        }
        *(void *)(a1 + 80) = v106;
        *(void *)(a1 + 88) = v100;
        *(void *)(a1 + 96) = v107;
        if (v111) {
          operator delete(v111);
        }
      }
      else
      {
        *(_OWORD *)NSRange v39 = *v95;
        long long v97 = *(_OWORD *)(v94 - 64);
        long long v98 = *(_OWORD *)(v94 - 48);
        long long v99 = *(_OWORD *)(v94 - 16);
        *((_OWORD *)v39 + 3) = *(_OWORD *)(v94 - 32);
        *((_OWORD *)v39 + 4) = v99;
        *((_OWORD *)v39 + 1) = v97;
        *((_OWORD *)v39 + 2) = v98;
        v100 = v39 + 80;
      }
      *(void *)(a1 + 88) = v100;
    }
  }
}

void sub_1003E448C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1003E4904((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

void sub_1003E44C8(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_100004E40();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    uint64_t v6 = (char *)sub_100134B88(v3, a2);
    double v7 = &v6[48 * v5];
    unint64_t v9 = &v6[48 * v8];
    double v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1003E45B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3 / 48;
    BOOL v6 = v3 / 48 != 0;
    unint64_t v7 = v3 / 48 - 1;
    if (v7 == 0 || !v6) {
      uint64_t v5 = 1;
    }
    uint64_t v8 = v2 + 80;
    do
    {
      uint64_t v9 = v4 - 1;
      if (!v4) {
        uint64_t v9 = 0;
      }
      if (v9 >= 1)
      {
        double v10 = (double *)(v8 - 48 * (v4 != 0));
        double v11 = 0.0;
        do
        {
          unint64_t v12 = v9--;
          if (v12 < 2) {
            break;
          }
          double v13 = *v10;
          v10 -= 6;
          double v11 = v11 + v13;
        }
        while (v11 < 0.85);
      }
      if (v4 < v7) {
        unint64_t v14 = v4 + 1;
      }
      else {
        unint64_t v14 = v7;
      }
      if (v14 < v7)
      {
        double v15 = (double *)(v2 + 32 + 48 * v14);
        double v16 = 0.0;
        do
        {
          if (++v14 >= v7) {
            break;
          }
          double v17 = *v15;
          v15 += 6;
          double v16 = v16 + v17;
        }
        while (v16 < 0.85);
      }
      double v18 = 0.0;
      if (v9 <= v14)
      {
        double v19 = (double *)(v2 + 16 + 48 * v9);
        do
        {
          double v20 = *v19;
          v19 += 6;
          double v21 = v20;
          if (v18 <= v20) {
            double v18 = v21;
          }
          ++v9;
        }
        while (v9 <= v14);
      }
      *(double *)(v2 + 48 * v4 + 24) = v18;
      v8 += 48;
      ++v4;
    }
    while (v4 != v5);
  }
}

uint64_t sub_1003E46BC(uint64_t a1)
{
  *(void *)a1 = off_1014F6A38;
  objc_destroyWeak((id *)(a1 + 144));
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014EAC90;
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  *(void *)a1 = off_1014EACF8;
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1003E4768(uint64_t a1)
{
  *(void *)a1 = off_1014F6A38;
  objc_destroyWeak((id *)(a1 + 144));
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1014EAC90;
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  *(void *)a1 = off_1014EACF8;
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }

  operator delete();
}

uint64_t sub_1003E4834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 144));
  unsigned int v7 = [WeakRetained isSnappedToRuler];

  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 40);
    return v8();
  }
  else
  {
    return sub_1002D7294((void *)a1, a2, a3);
  }
}

void sub_1003E48F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E4904(void **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_100134B88(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[48 * v8];
    double v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    double v17 = &v14[v16];
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_1003E4DAC(id a1)
{
  UIAccessibilityNotifications v1 = objc_alloc_init(CRLPKImageRendererPool);
  uint64_t v2 = (void *)qword_1016A9A38;
  qword_1016A9A38 = (uint64_t)v1;
}

id sub_1003E4E5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_flushUnlockedRenderersLeavingMaxCount:0];
}

void sub_1003E5120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E5180(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003E5190(uint64_t a1)
{
}

void sub_1003E5198(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E51DC(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003E5220(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v25;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(v2);
        }
        unsigned int v7 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (objc_msgSend(v7, "isCandidateForSize:sixChannelBlending:", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56))&& objc_msgSend(v7, "tryLockingRenderer"))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v7);
          goto LABEL_12;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    unint64_t v8 = -[CRLPKImageRendererContainer initWithSize:sixChannelBlending:]([CRLPKImageRendererContainer alloc], "initWithSize:sixChannelBlending:", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    unint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) tryLockingRenderer] & 1) == 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F6B08);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010AD934();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014F6B28);
      }
      unint64_t v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v12);
      }
      sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Should be able to lock new renderer.", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"-[CRLPKImageRendererPool provideImageRendererOfMinimumSize:sixChannelBlending:inBlock:]_block_invoke");
      long long v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLPKImageRendererPool provideImageRendererOfMinimumSize:sixChannelBlending:inBlock:]_block_invoke");
      long long v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitRenderer.m"];
      +[CRLAssertionHandler handleFailureInFunction:v20 file:v21 lineNumber:211 isFatal:1 description:"Should be able to lock new renderer."];

      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v22, v23);
      abort();
    }
    [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }
  return [*(id *)(a1 + 32) p_flushUnlockedRenderersLeavingMaxCount:10];
}

void sub_1003E54F0(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E5534(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E5AF4(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E5B38(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E5B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CGContextSaveGState(*(CGContextRef *)(a1 + 40));
  id v4 = *(CGContext **)(a1 + 40);
  sub_10007FA0C(0, 1, (uint64_t)&transform, *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 64), *(CGFloat *)(a1 + 72));
  CGContextConcatCTM(v4, &transform);
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v37 = 0;
    unsigned int v38 = &v37;
    uint64_t v39 = 0x2020000000;
    uint64_t v40 = 0;
    dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
    BOOL v6 = [*(id *)(a1 + 32) strokes];
    double v7 = *(double *)(a1 + 80);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1003E5F60;
    v34[3] = &unk_1014F6BF8;
    long long v36 = &v37;
    unint64_t v8 = v5;
    long long v35 = v8;
    [v3 renderCGStrokes:v6 clippedToStrokeSpaceRect:v34 scale:*(double *)(a1 + 48) completion:*(double *)(a1 + 56) scale:*(double *)(a1 + 64) completion:*(double *)(a1 + 72) scale:v7];

    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    CGContextDrawImage(*(CGContextRef *)(a1 + 40), *(CGRect *)(a1 + 48), (CGImageRef)v38[3]);
    CGImageRelease((CGImageRef)v38[3]);
  }
  else
  {
    if (*(unsigned char *)(a1 + 89))
    {
      dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      double v13 = *(double *)(a1 + 72);
      double v12 = *(double *)(a1 + 80);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1003E614C;
      v32[3] = &unk_1014CBBB0;
      dispatch_semaphore_t v33 = v9;
      double v14 = *(double *)(a1 + 48);
      double v15 = *(double *)(a1 + 56);
      double v16 = *(double *)(a1 + 64);
      uint64_t v17 = v9;
      [v3 sixChannelPDFRenderDrawing:v10 context:v11 clippedToStrokeSpaceRect:v32 scale:v14 completion:v13 v12];
      dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);

      goto LABEL_6;
    }
    uint64_t v37 = 0;
    unsigned int v38 = &v37;
    uint64_t v39 = 0x2020000000;
    uint64_t v40 = 0;
    uint64_t v28 = 0;
    __int16 v29 = &v28;
    uint64_t v30 = 0x2020000000;
    uint64_t v31 = 0;
    dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
    uint64_t v19 = [*(id *)(a1 + 32) strokes];
    double v20 = *(double *)(a1 + 80);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1003E6154;
    v24[3] = &unk_1014F6CA0;
    long long v26 = &v37;
    long long v27 = &v28;
    long long v21 = v18;
    long long v25 = v21;
    [v3 sixChannelCGRenderStrokes:v19 clippedToStrokeSpaceRect:v24 scale:*(double *)(a1 + 48) completion:*(double *)(a1 + 56)];

    dispatch_semaphore_wait(v21, 0xFFFFFFFFFFFFFFFFLL);
    if (*(unsigned char *)(a1 + 90))
    {
      CGContextSetBlendMode(*(CGContextRef *)(a1 + 40), kCGBlendModeMultiply);
      CKRecordID v22 = *(CGContext **)(a1 + 40);
      Swift::String v23 = v38;
    }
    else
    {
      CKRecordID v22 = *(CGContext **)(a1 + 40);
      if (!*(unsigned char *)(a1 + 91))
      {
        CGContextSetBlendMode(v22, kCGBlendModeMultiply);
        CGContextDrawImage(*(CGContextRef *)(a1 + 40), *(CGRect *)(a1 + 48), (CGImageRef)v38[3]);
        CGContextSetBlendMode(*(CGContextRef *)(a1 + 40), kCGBlendModePlusLighter);
        CKRecordID v22 = *(CGContext **)(a1 + 40);
      }
      Swift::String v23 = v29;
    }
    CGContextDrawImage(v22, *(CGRect *)(a1 + 48), (CGImageRef)v23[3]);
    CGImageRelease((CGImageRef)v38[3]);
    CGImageRelease((CGImageRef)v29[3]);

    _Block_object_dispose(&v28, 8);
  }
  _Block_object_dispose(&v37, 8);
LABEL_6:
  CGContextRestoreGState(*(CGContextRef *)(a1 + 40));
}

void sub_1003E5F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

intptr_t sub_1003E5F60(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6BB0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010ADA44();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6BD0);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    dispatch_semaphore_t v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLPencilKitRenderer drawStrokes:inContext:overTransparentCanvas:]_block_invoke");
    BOOL v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitRenderer.m"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:382 isFatal:0 description:"renderedCGImage shouldn't be NULL"];
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1003E60C4(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E6108(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

intptr_t sub_1003E614C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_1003E6154(uint64_t a1, CGImage *a2, CGImageRef image)
{
  if (image)
  {
    if (a2) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014F6C18);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010ADB54();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014F6C38);
  }
  BOOL v6 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v6);
  }
  double v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLPencilKitRenderer drawStrokes:inContext:overTransparentCanvas:]_block_invoke");
  unint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitRenderer.m"];
  +[CRLAssertionHandler handleFailureInFunction:v7 file:v8 lineNumber:412 isFatal:0 description:"completionMultiplyImage shouldn't be NULL"];

  if (!a2)
  {
LABEL_13:
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6C58);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010ADACC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F6C78);
    }
    dispatch_semaphore_t v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    uint64_t v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLPencilKitRenderer drawStrokes:inContext:overTransparentCanvas:]_block_invoke");
    uint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitRenderer.m"];
    +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:413 isFatal:0 description:"completionAddImage shouldn't be NULL"];
  }
LABEL_22:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CGImageRetain(image);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = CGImageRetain(a2);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1003E63F4(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E6438(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E647C(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003E64C0(id a1)
{
  UIAccessibilityNotifications v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1003E6610(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  int v2 = uuid_compare(a1, a2);
  if (v2 < 0) {
    return -1;
  }
  else {
    return v2 != 0;
  }
}

void sub_1003E6B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E6BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003E6CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E6CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E6EF0()
{
  qword_1016A9A68 = 3;
}

id sub_1003E6F00()
{
  qword_1016A9A68 = 3;
  v0 = [(id)qword_1016A9A58 objectAtIndex:qword_1016A9A60];
  id v1 = [v0 copyWithZone:0];

  return v1;
}

id sub_1003E6F68()
{
  if (qword_1016A9A68 == 3)
  {
    uint64_t v0 = qword_1016A9A60--;
    if (v0 <= 0) {
      qword_1016A9A60 = qword_10166E390 - 1;
    }
    qword_1016A9A68 = 3;
  }
  return sub_1003E6F00();
}

uint64_t sub_1003E82C0(uint64_t a1)
{
  id v1 = +[NSLocale localeWithLocaleIdentifier:a1];
  int v2 = [v1 objectForKey:NSLocaleExemplarCharacterSet];
  id v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 characterIsMember:97] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

id sub_1003E833C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([(__CFString *)v3 isEqualToString:@"es-419"])
  {

    id v3 = @"es";
  }
  if (v4)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1003E84D0;
    v14[3] = &unk_1014F6D00;
    dispatch_semaphore_t v5 = v3;
    double v15 = v5;
    if ([v4 indexOfObjectPassingTest:v14] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      dispatch_semaphore_t v9 = _NSConcreteStackBlock;
      uint64_t v10 = 3221225472;
      uint64_t v11 = sub_1003E84DC;
      double v12 = &unk_1014F6D00;
      BOOL v6 = v5;
      double v13 = v6;
      id v7 = [v4 indexOfObjectPassingTest:&v9];
      if (v7 == (id)0x7FFFFFFFFFFFFFFFLL) {
        [v4 addObject:v6, v9, v10, v11, v12];
      }
      else {
        [v4 replaceObjectAtIndex:v7 withObject:v6, v9, v10, v11, v12];
      }
    }
  }
  else
  {
    id v4 = +[NSMutableArray arrayWithObject:v3];
  }

  return v4;
}

id sub_1003E84D0(uint64_t a1, void *a2)
{
  return [a2 hasPrefix:*(void *)(a1 + 32)];
}

id sub_1003E84DC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) hasPrefix:a2];
}

id sub_1003E84E8(void *a1)
{
  id v1 = a1;
  int v2 = +[NSLocale preferredLanguages];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    dispatch_semaphore_t v5 = 0;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v2);
        }
        unint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (v1[2](v1, v8))
        {
          uint64_t v9 = sub_1003E833C(v8, v5);

          dispatch_semaphore_t v5 = (void *)v9;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }
  else
  {
    dispatch_semaphore_t v5 = 0;
  }

  return v5;
}

BOOL sub_1003E8648(void *a1)
{
  id v1 = sub_1003E84E8(a1);
  int v2 = v1;
  if (v1) {
    BOOL v3 = [v1 count] != 0;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

BOOL sub_1003E8694()
{
  return sub_1003E8648(&stru_1014F6D20);
}

BOOL sub_1003E86A0(id a1, NSString *a2)
{
  return sub_1003E82C0((uint64_t)a2);
}

BOOL sub_1003E86A8()
{
  uint64_t v0 = +[UIApplication sharedApplication];
  BOOL v1 = [v0 userInterfaceLayoutDirection] == (id)1;

  return v1;
}

uint64_t sub_1003E86EC()
{
  if (qword_1016A9A78 != -1) {
    dispatch_once(&qword_1016A9A78, &stru_1014F6D40);
  }
  return byte_1016A9A70;
}

void sub_1003E8730(id a1)
{
  byte_1016A9A70 = sub_1003E86A8();
}

BOOL sub_1003E8750()
{
  if (qword_1016A9A78 != -1) {
    dispatch_once(&qword_1016A9A78, &stru_1014F6D40);
  }
  return byte_1016A9A70 == 0;
}

id sub_1003E8B2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setAlpha:1.0];
}

id sub_1003E8C04(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setAlpha:0.0];
}

void sub_1003E92F8(uint64_t a1)
{
  [*(id *)(a1 + 32) updateMessageLabelWithProgress:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 40) isCancelled])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v2 + 17))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1003E9400;
      v6[3] = &unk_1014CBBB0;
      v6[4] = v2;
      BOOL v3 = objc_retainBlock(v6);
      *(unsigned char *)(*(void *)(a1 + 32) + 17) = 1;
      [*(id *)(a1 + 32) setCancelButtonEnabled:0];
      id v4 = [*(id *)(a1 + 32) delegate];
      dispatch_semaphore_t v5 = v4;
      if (v4) {
        [v4 determinateProgressViewControllerDidRequestToCancel:*(void *)(a1 + 32) completionHandler:v3];
      }
      else {
        ((void (*)(void *))v3[2])(v3);
      }
    }
  }
}

id sub_1003E9400(uint64_t a1)
{
  return [*(id *)(a1 + 32) runCancellationHandlers];
}

id sub_1003E9408(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateProgressViewDisplayWithProgress:*(void *)(a1 + 40)];
}

void sub_1003E9CD8(uint64_t a1)
{
  BOOL v1 = [*(id *)(a1 + 32) second];
  v1[2]();
}

void sub_1003E9E20(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003E9F18;
  v5[3] = &unk_1014F6D68;
  v5[4] = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  uint64_t v2 = objc_retainBlock(v5);
  BOOL v3 = [*(id *)(a1 + 32) delegate];
  id v4 = v3;
  if (v3) {
    [v3 showCancelConfirmationAlertIfNeededForDeterminateProgressViewController:*(void *)(a1 + 32) animated:*(unsigned __int8 *)(a1 + 56) completionHandler:v2];
  }
  else {
    ((void (*)(void *, uint64_t))v2[2])(v2, 1);
  }
}

void sub_1003E9F18(void *a1, int a2)
{
  if (!a2)
  {
    id v4 = (void *)a1[6];
    if (!v4) {
      return;
    }
    id v7 = a1[5];
    if (v7)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_1003EA15C;
      _OWORD v19[3] = &unk_1014CC280;
      double v20 = v4;
      dispatch_async(v7, v19);
      id v6 = v20;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  BOOL v3 = (id *)a1[4];
  if (!v3[7])
  {
LABEL_5:
    [v3 runCancellationHandlers];
    id v4 = (void *)a1[6];
    if (!v4) {
      return;
    }
    dispatch_semaphore_t v5 = a1[5];
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      void block[2] = sub_1003EA14C;
      block[3] = &unk_1014CC280;
      CKRecordID v22 = v4;
      dispatch_async(v5, block);
      id v6 = v22;
LABEL_11:

      return;
    }
LABEL_13:
    unint64_t v8 = (void (*)(void))v4[2];
    v8();
    return;
  }
  if ([v3[7] isCancelled])
  {
    BOOL v3 = (id *)a1[4];
    goto LABEL_5;
  }
  uint64_t v9 = (void *)a1[6];
  if (v9)
  {
    id v10 = [v9 copy];
    uint64_t v11 = a1[5];
    id v12 = objc_retainBlock(v10);
    long long v13 = +[CRLPair pairWithFirst:v11 second:v12];

    long long v14 = *(void **)(a1[4] + 8);
    if (v14)
    {
      [v14 addObject:v13];
    }
    else
    {
      id v15 = [objc_alloc((Class)NSMutableArray) initWithObjects:v13, 0];
      uint64_t v16 = a1[4];
      uint64_t v17 = *(void **)(v16 + 8);
      *(void *)(v16 + 8) = v15;
    }
  }
  dispatch_semaphore_t v18 = *(void **)(a1[4] + 56);

  [v18 cancel];
}

uint64_t sub_1003EA14C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003EA15C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1003EA5D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v5[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v5[1] = v3;
  v5[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  [v2 setTransform:v5];
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

id sub_1003EA630(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) completeTransition:a2];
}

id sub_1003EA63C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

id sub_1003EA648(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) completeTransition:a2];
}

void sub_1003EA654(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EA698(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EA7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003EA814(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained cancelAnimated:1 completionQueue:0 completionHandler:0];
}

void sub_1003EB05C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EB0A0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EB0E4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EB128(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EBA60(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EBAA4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EBC98(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EBCDC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EC8A0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003EC8E4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ECC48(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003ECC8C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F257C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F25C0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F2604(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F2648(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F3C98(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F3CDC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F3FA4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003F4080(id a1)
{
  BOOL v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1003F45B0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F45F4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4774(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F47B8(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F49C4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4A08(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4BA4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4BE8(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4D68(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4DAC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4F2C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F4F70(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5178(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F51BC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F53D8(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F541C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F55A0(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F55E4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5768(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F57AC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F592C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5970(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5B50(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5B94(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5DBC(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F5E00(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F6A0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 9))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    if (!WeakRetained)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "p_shouldSuppressSelectionHighlight")) {
        return;
      }
      [*(id *)(*(void *)(a1 + 32) + 40) animationCycleForHide:1];
      +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(void *)(a1 + 32), "p_caretTimerFired:", 0, [*(id *)(*(void *)(a1 + 32) + 40) caretShouldFade] ^ 1, v4);
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_storeWeak((id *)(*(void *)(a1 + 32) + 24), v5);
      id WeakRetained = v5;
    }
  }
}

void sub_1003F6BF0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 0;
  id v2 = *(id *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
    objc_storeWeak((id *)(*(void *)(a1 + 32) + 24), 0);
    id v2 = WeakRetained;
  }
  id v5 = v2;
  [v2 invalidate];
  [*(id *)(a1 + 32) p_setCaretOn:forLayer:*(unsigned char *)(a1 + 56) == 0, *(void *)(a1 + 48)];
}

void sub_1003F72A4(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) _isCancelled];
  BOOL v3 = [*(id *)(a1 + 32) _dispatchTimer];

  if (v3)
  {
    unsigned int v4 = [*(id *)(a1 + 32) automaticallyCancelPendingBlockUponSchedulingNewBlock];
    id v5 = *(void **)(a1 + 32);
    if (!v4)
    {
      NSLog(@"[warning]: %@: Ignoring block scheduled for execution %.2f seconds from now.", v5, *(void *)(a1 + 48));
      return;
    }
    [v5 _reallyCancel];
  }
  if ((v2 & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 32) _dispatchQueue];
    id v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v6);

    dispatch_time_t v8 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1003F7410;
    handler[3] = &unk_1014CAE00;
    id v9 = *(id *)(a1 + 40);
    handler[4] = *(void *)(a1 + 32);
    id v11 = v9;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_resume(v7);
    [*(id *)(a1 + 32) _setDispatchTimer:v7];
  }
}

id sub_1003F7410(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  unsigned __int8 v2 = *(void **)(a1 + 32);

  return [v2 _reallyCancel];
}

id sub_1003F7544(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reallyCancel];
}

void sub_1003F77D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F7814(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F79C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F7A08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F7E00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F7E44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F84D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F8514(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F890C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F8950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1003F8E70(id a1, CRLCanvasLayout *a2)
{
  unsigned __int8 v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1003F9084(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F90C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F93C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F9404(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F964C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F9690(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F9B5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003F9BA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned __int8 v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003F9D70(_OWORD *a1, void *a2)
{
  long long v2 = a1[3];
  v5[0] = a1[2];
  v5[1] = v2;
  v5[2] = a1[4];
  BOOL v3 = [a2 crl_strokeByAppendingTransform:v5];

  return v3;
}

void sub_1003FB0BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FB100(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FB144(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FB188(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC810(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC854(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC898(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC8DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC920(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC964(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC9A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FC9EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCA30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCA74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCAB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCAFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCB40(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCB84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCBC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCC0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCC50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCC94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCCD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCD1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCD60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCDA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FCFD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD01C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD614(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD658(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD69C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD6E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD724(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD768(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD7AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FD7F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE88C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE8D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE99C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FE9E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FEA24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FEA68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1003FEED8(uint64_t a1)
{
  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)CRLShapeLayout;
  return [super offsetGeometryBy:*(double *)(a1 + 40) offsetGeometryBy:*(double *)(a1 + 48)];
}

id sub_1003FEFAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLShapeLayout;
  return [super setDynamicGeometry:v1];
}

void sub_1003FF4A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FF4E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FF52C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FF570(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FF748(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FF78C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1003FFFE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100400028(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004003A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004003E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  objc_super v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004009D0(uint64_t a1)
{
  uint64_t v2 = objc_opt_class();
  objc_super v3 = sub_1002469D0(v2, *(void **)(a1 + 32));
  unsigned int v4 = v3;
  if (v3) {
    [v3 updateConnectedPath];
  }
  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)CRLShapeLayout;
  [super validate];
}

os_log_t sub_100401ECC(char *category)
{
  os_log_t v1 = os_log_create("com.apple.freeform", category);

  return v1;
}

id sub_1004020D0(void *a1)
{
  id result = [*(id *)(a1[4] + 8) containsObject:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_1004021B4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1004022DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1004022EC(uint64_t a1)
{
}

void sub_1004022F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) allObjects];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100402434(uint64_t a1)
{
  uint64_t v2 = +[NSSet setWithSet:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100402524(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
}

id sub_1004025C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
}

void sub_1004026C4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) description];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100402758()
{
  if (qword_1016A9A88 != -1) {
    dispatch_once(&qword_1016A9A88, &stru_1014F7CF0);
  }
  uint64_t v0 = (void *)qword_1016A9A80;

  return v0;
}

void sub_1004027AC(id a1)
{
  uint64_t v1 = +[NSMapTable strongToStrongObjectsMapTable];
  uint64_t v2 = (void *)qword_1016A9A80;
  qword_1016A9A80 = v1;
}

id sub_1004027EC(void *a1, id *a2, dispatch_once_t *a3)
{
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_1004028BC;
  long long v13 = &unk_1014CC768;
  long long v14 = a1;
  id v15 = a2;
  dispatch_once_t v5 = *a3;
  id v6 = a1;
  if (v5 != -1) {
    dispatch_once(a3, &v10);
  }
  id v7 = sub_100402758();
  [v7 setObject:v6 forKey:*a2];

  id v8 = *a2;
  return v8;
}

void sub_1004028BC(uint64_t a1)
{
  os_log_t v2 = os_log_create("com.apple.freeform", (const char *)[*(id *)(a1 + 32) UTF8String]);

  **(void **)(a1 + 40) = v2;
}

void sub_100402E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10040346C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100403494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004034D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100403A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100403A30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100403A74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100403D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100403D50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100403D94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100404138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100405004(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100405048(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040508C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004050D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100405114(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100405158(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10040601C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) objectForKey:v3];
  if (!v4)
  {
    id v4 = [v3 tsd_newLayerForRepContentPileClone];
    dispatch_once_t v5 = [v3 name];
    [v4 setName:v5];

    id v6 = [v3 delegate];
    [v4 setDelegate:v6];

    [v3 bounds];
    [v4 setBounds:];
    [v3 position];
    [v4 setPosition:];
    [v3 anchorPoint];
    [v4 setAnchorPoint:];
    if (v3)
    {
      [v3 transform];
      long long v21 = v29;
      long long v22 = v30;
      long long v23 = v31;
      long long v24 = v32;
      long long v17 = v25;
      long long v18 = v26;
      long long v19 = v27;
      long long v20 = v28;
      [v4 setTransform:&v17];
      [v3 sublayerTransform];
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      [v4 setTransform:&v17];
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
    }
    v8[4] = v13;
    v8[5] = v14;
    v8[6] = v15;
    v8[7] = v16;
    v8[0] = v9;
    v8[1] = v10;
    v8[2] = v11;
    v8[3] = v12;
    [v4 setSublayerTransform:v8];
    [v4 setHidden:[v3 isHidden]];
    [v3 opacity];
    [v4 setOpacity:];
    [v4 setMasksToBounds:[v3 masksToBounds]];
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
    [*(id *)(a1 + 40) addObject:v4];
  }

  return v4;
}

void sub_100406218(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040625C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004062A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004062E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406328(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040636C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004063B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004063F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040647C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004064C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406504(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406738(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040677C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406B48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100406B8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  os_log_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100407DFC(double a1)
{
  return floor(a1 + 0.5);
}

double sub_100407E0C(double a1, double a2)
{
  return floor(a1 / a2 + 0.5) * a2;
}

double sub_100407E24(double a1)
{
  BOOL v1 = a1 <= 0.0;
  double v2 = -(-a1 - floor(-a1));
  double result = a1 - floor(a1);
  if (v1) {
    return v2;
  }
  return result;
}

double sub_100407E48(double a1, double a2, double a3)
{
  if (a1 >= a2)
  {
    a2 = a1;
    if (a1 > a3) {
      return a3;
    }
  }
  return a2;
}

double sub_100407E68(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

double sub_100407E74()
{
  return (double)random() / 2147483650.0;
}

double sub_100407E9C(double a1, double a2)
{
  return a1 + (a2 - a1) * ((double)arc4random() / 4294967300.0);
}

double sub_100407EDC(double a1, double a2, double a3)
{
  if (a2 >= a3)
  {
    int v6 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F80D0);
    }
    id v7 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B02DC(v6, v7);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F80F0);
    }
    id v8 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066770(v8, v6);
    }
    long long v9 = +[NSString stringWithUTF8String:"CGFloat CRLNormalize(CGFloat, CGFloat, CGFloat)"];
    long long v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLMath.m"];
    +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:88 isFatal:0 description:"max >= min!"];
  }
  return (a1 - a2) / (a3 - a2);
}

void sub_100408048(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040808C(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100408C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100408C24(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) getRGBAComponents:v4];
  double v3 = fmax(v4[1] * 0.715200007 + v4[0] * 0.212599993 + v4[2] * 0.0722000003 * v4[3], 0.0);
  if (v3 > 1.0) {
    double v3 = 1.0;
  }
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_100409AC8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) setRecognitionEnabled:1];
  uint64_t v2 = (*(void *)(a1 + 64) >> 3) & 1;
  BOOL v3 = (*(void *)(a1 + 64) & 1) == 0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(void **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100409BB0;
  v7[3] = &unk_1014F8158;
  v7[4] = v4;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  [v6 performSearchQuery:v5 fullWordsOnly:v2 caseMatchingOnly:v3 withBlock:v7];
}

void sub_100409BB0(void *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  uint64_t v5 = [WeakRetained layerHost];
  int v6 = [v5 asiOSCVC];

  long long v26 = v6;
  long long v25 = [v6 smartSelectionManager];
  long long v27 = v3;
  id v7 = [v25 freehandDrawingItemsFromCacheForPKQueryItems:v3];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v28 objects:v40 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v29;
    do
    {
      long long v11 = 0;
      do
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v11);
        if (![v12 count])
        {
          unsigned int v13 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F8110);
          }
          long long v14 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            unsigned int v33 = v13;
            __int16 v34 = 2082;
            long long v35 = "-[CRLiOSFreehandDrawingItemsSearchTarget layoutSearchForString:options:hitBlock:completionBlock:]_block_invoke_2";
            __int16 v36 = 2082;
            uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingItemsSearchTarget.m";
            __int16 v38 = 1024;
            int v39 = 50;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d DrawingItems should not be empty here.", buf, 0x22u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_1014F8130);
          }
          long long v15 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            long long v22 = v15;
            long long v23 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = 67109378;
            unsigned int v33 = v13;
            __int16 v34 = 2114;
            long long v35 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          long long v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLiOSFreehandDrawingItemsSearchTarget layoutSearchForString:options:hitBlock:completionBlock:]_block_invoke");
          long long v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingItemsSearchTarget.m"];
          +[CRLAssertionHandler handleFailureInFunction:v16 file:v17 lineNumber:50 isFatal:0 description:"DrawingItems should not be empty here."];
        }
        if ([v12 count])
        {
          long long v18 = [v12 anyObject];
          long long v19 = [WeakRetained canvasEditor];
          long long v20 = [v19 selectionPathWithInfos:v12];

          long long v21 = [[CRLCanvasSearchReference alloc] initWithBoardItem:v18 selectionPath:v20];
          (*(void (**)(void))(a1[5] + 16))();
        }
        long long v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v28 objects:v40 count:16];
    }
    while (v9);
  }
  uint64_t v24 = a1[6];
  if (v24) {
    (*(void (**)(void))(v24 + 16))();
  }
}

void sub_100409FA4(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100409FE8(id a1)
{
  BOOL v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10040A5EC(void *a1)
{
  BOOL v1 = a1;
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.freeform.CRLImageItemImporter", 0);
  id v3 = (void *)v1[6];
  v1[6] = v2;

  uint64_t v4 = [[CRLBasicProgress alloc] initWithMaxValue:1.0];
  id v5 = (id)v1[7];
  v1[7] = v4;
}

id sub_10040A778(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_createAssetDataAndThenContinueImportWithCompletionHandler:", *(void *)(a1 + 40));
}

void sub_10040A944(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014F81A0);
    }
    id v8 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010B0388(v8, v7);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(NSObject **)(v9 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    void block[2] = sub_10040AB84;
    block[3] = &unk_1014D0AB0;
    void block[4] = v9;
    id v19 = *(id *)(a1 + 40);
    dispatch_async(v10, block);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), a2);
    long long v11 = [CRLImageDataHelper alloc];
    long long v12 = [*(id *)(a1 + 32) boardItemFactory];
    unsigned int v13 = [v12 assetOwner];
    long long v14 = [(CRLImageDataHelper *)v11 initWithImageData:v6 assetOwner:v13];

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10040AB90;
    v16[3] = &unk_1014F81C8;
    long long v15 = *(void **)(a1 + 40);
    v16[4] = *(void *)(a1 + 32);
    id v17 = v15;
    [(CRLImageDataHelper *)v14 generateThumbnailImageDataWithCompletionHandler:v16];
  }
}

void sub_10040AB40(id a1)
{
  BOOL v1 = sub_100401ECC("CRLDefaultCat");
  dispatch_queue_t v2 = off_10166B498;
  off_10166B498 = v1;
}

id sub_10040AB84(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_doAsyncImportWorkWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_10040AB90(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), a2);
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10040AC5C;
  v7[3] = &unk_1014D0AB0;
  v7[4] = v5;
  id v8 = *(id *)(a1 + 40);
  dispatch_async(v6, v7);
}

id sub_10040AC5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_doAsyncImportWorkWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_10040AE58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10040AF10;
  v7[3] = &unk_1014ECB88;
  v7[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v8 = v4;
  uint64_t v10 = v5;
  id v9 = v6;
  dispatch_async(v3, v7);
}

void sub_10040AF10(void *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(a1[4] + 88));
  id v3 = (id *)a1[4];
  if (v2)
  {
    uint64_t v4 = a1[6];
    [v3 p_finishImportingWithInfo:0 error:0 completionHandler:v4];
  }
  else
  {
    uint64_t v5 = [v3[12] error];
    id v6 = (id *)a1[4];
    if (v5)
    {
      id v17 = (id)v5;
      [v6 p_finishImportingWithInfo:0 error:v5 completionHandler:a1[6]];
    }
    else
    {
      uint64_t v7 = (uint64_t)[v6[12] compatibilityLevel];
      id v8 = (unsigned char *)a1[4];
      if (a1[5] && !v8[92] && (uint64_t v11 = a1[7], v11 >= 4) && (v7 >= 3 ? (v12 = v7 < v11) : (v12 = 0), v12))
      {
        v8[92] = 1;
        uint64_t v14 = a1[4];
        unsigned int v13 = (void *)a1[5];
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10040B0D0;
        v18[3] = &unk_1014F8218;
        long long v16 = (void *)a1[6];
        uint64_t v15 = a1[7];
        v18[4] = v14;
        uint64_t v20 = v15;
        uint64_t v21 = v7;
        id v19 = v16;
        [v13 boardItemImporter:v14 needsMediaCompatibilityFeedbackWithReasons:2 forMediaType:2 usingBlock:v18];
      }
      else
      {
        uint64_t v10 = a1[6];
        uint64_t v9 = a1[7];
        [v8 p_importImageFromDataConvertingIfNeededToRequiredCompatibilityLevel:v9 fromCompatibilityLevel:v7 completionHandler:v10];
      }
    }
  }
}

void sub_10040B0D0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_10040B178;
  block[3] = &unk_1014F81F0;
  void block[4] = v2;
  char v7 = a2;
  long long v6 = *(_OWORD *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

id sub_10040B178(uint64_t a1)
{
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 88))) {
    return [*(id *)(a1 + 32) p_finishImportingWithInfo:0 error:0 completionHandler:*(void *)(a1 + 40)];
  }
  if (*(unsigned char *)(a1 + 64)) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 3;
  }
  return [*(id *)(a1 + 32) p_importImageFromDataConvertingIfNeededToRequiredCompatibilityLevel:v3 fromCompatibilityLevel:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 40)];
}

void sub_10040B548(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10040B5E4;
  v3[3] = &unk_1014D0AB0;
  v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_10040B5E4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) setValue:1.0];
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 88)))
  {
    uint64_t v3 = 0;
LABEL_3:
    [*(id *)(a1 + 32) p_finishImportingWithInfo:0 v3 *(void *)(a1 + 40)];
    id obj = 0;
    goto LABEL_6;
  }
  id obj = [*(id *)(*(void *)(a1 + 32) + 104) convertedMediaData];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 104) error];
  if (!obj) {
    goto LABEL_3;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), obj);
  [*(id *)(a1 + 32) p_importInfoFromDataWithCompletionHandler:*(void *)(a1 + 40)];
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 104);
  *(void *)(v4 + 104) = 0;
}

id sub_10040BF20(uint64_t a1)
{
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 32) + 88), 1u);
  [*(id *)(*(void *)(a1 + 32) + 96) cancel];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 104);

  return [v2 cancel];
}

void sub_10040C250(void *a1, double *a2, void *a3)
{
  long long v6 = (objc_class *)objc_opt_class();
  id v7 = sub_10024715C(v6, a1);
  id v8 = [v7 p_newColorAtFraction:*a2];
  id v13 = [v7 p_newColorInShadingColorSpaceFromColor:v8];

  [v13 redComponent];
  *a3 = v9;
  [v13 greenComponent];
  a3[1] = v10;
  [v13 blueComponent];
  a3[2] = v11;
  [v13 alphaComponent];
  a3[3] = v12;
}

void sub_10040C304(void *a1)
{
  uint64_t v2 = (objc_class *)objc_opt_class();
  id v3 = sub_10024715C(v2, a1);
}

uint64_t sub_10040C794(void *a1, void *a2)
{
  if (!a1 || !a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F84A0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B047C();
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101076AC0();
    }
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSComparisonResult gradientStopCompare(id _Nonnull, id _Nonnull, void * _Nonnull)"), +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGradientFill.m"], 1453, 0, "Passing in nil is invalid.");
  }
  uint64_t v4 = (objc_class *)objc_opt_class();
  id v5 = sub_10024715C(v4, a1);
  long long v6 = (objc_class *)objc_opt_class();
  id v7 = sub_10024715C(v6, a2);
  [v5 fraction];
  double v9 = v8;
  [v7 fraction];
  if (v9 >= v10) {
    return v10 < v9;
  }
  else {
    return -1;
  }
}

void sub_10040CD5C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040CD88(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D2BC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D2E8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D314(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D340(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D36C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040D398(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040DB3C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040DB68(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040DDCC(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040DDF8(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E05C(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E088(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E5C4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E5F0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E728(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040E754(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_10040EBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10040EBF0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  [a2 fraction];
  double v8 = v7;
  id result = [*(id *)(a1 + 32) fraction];
  if (v8 > v10)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1004118C4(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

void sub_1004118F0(id a1)
{
  off_10166B4A0 = sub_100401ECC("CRLAssertCat");
}

BOOL sub_10041191C(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return *a1 < *a2;
  }
  else {
    return v5;
  }
}

int8x16_t sub_10041193C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x16_t **)(a1 + 128);
  uint64_t v3 = *(int8x16_t **)(a2 + 128);
  if (v2 == v3)
  {
    int8x16_t result = vextq_s8(v2[1], v2[1], 8uLL);
    v2[1] = result;
  }
  else
  {
    if (v2)
    {
      uint64_t v4 = 3;
      if (v2[1].i64[0] == a1) {
        uint64_t v4 = 2;
      }
      v2->i64[v4] = a2;
    }
    if (v3)
    {
      uint64_t v5 = 3;
      if (v3[1].i64[0] == a2) {
        uint64_t v5 = 2;
      }
      v3->i64[v5] = a1;
    }
    *(void *)(a1 + 128) = v3;
    *(void *)(a2 + 128) = v2;
  }
  return result;
}

void sub_1004119A0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
    *(_DWORD *)(a2 + 64) = v2 | 8;
    operator new();
  }
}

void sub_100411AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100418980((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_100411AFC(uint64_t **result)
{
  uint64_t v1 = *result;
  int v2 = result[1];
  if (*result != v2)
  {
    int v3 = 0;
    do
    {
      uint64_t v5 = *v1;
      uint64_t v4 = v1[1];
      v1 += 3;
      v3 -= 1431655765 * ((unint64_t)(v4 - v5) >> 4);
    }
    while (v1 != v2);
    if (v3) {
      operator new[]();
    }
  }
  return result;
}

uint64_t sub_100411F00(uint64_t a1)
{
  *(void *)a1 = off_1014F84F0;
  sub_10041201C((void *)a1);
  sub_100412154(a1);
  *(void *)(a1 + 80) = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  sub_10036371C((void *)(a1 + 248));
  int v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(void *)(a1 + 152) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 112);
  if (v6)
  {
    *(void *)(a1 + 120) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)(a1 + 88);
  if (v7)
  {
    *(void *)(a1 + 96) = v7;
    operator delete(v7);
  }
  double v9 = (void **)(a1 + 56);
  sub_100418728(&v9);
  return a1;
}

void sub_100411FE4(uint64_t a1)
{
  sub_100411F00(a1);

  operator delete();
}

void sub_10041201C(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    a1[5] = *(void *)(v2 + 144);
    operator delete();
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[19] = a1[18];
  sub_1004120A4((uint64_t)a1);
  a1[22] = a1[21];
  a1[25] = a1[24];
}

void sub_1004120A4(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 224);
  if (v1 != *(void ***)(a1 + 232))
  {
    uint64_t v2 = (*v1)[4];
    if (v2)
    {
      *(void *)(*(void *)(v2 + 56) + 48) = 0;
      operator delete();
    }
    sub_1004183A8(*v1);
    operator delete();
  }
  uint64_t v3 = a1 + 224;

  sub_100256134(v3, 0);
}

uint64_t sub_100412154(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t result = sub_10041877C(a1 + 56, *(void **)(a1 + 56));
  uint64_t v5 = *(uint64_t **)(v2 + 32);
  uint64_t v4 = *(uint64_t **)(v2 + 40);
  if (v5 != v4)
  {
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        operator delete[]();
      }
      ++v5;
    }
    while (v5 != v4);
    uint64_t v5 = *(uint64_t **)(a1 + 88);
  }
  *(void *)(a1 + 96) = v5;
  return result;
}

void sub_1004121C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 56);
    uint64_t v3 = *(uint64_t **)(a1 + 64);
    if ((char *)v3 - (char *)v2 < 1)
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v4 = (uint64_t *)sub_100418A1C(v3 - v2);
      uint64_t v6 = v5;
    }
    sub_100418A80(v2, v3, (uint64_t)&v9, v3 - v2, v4, v6);
    if (v4) {
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  for (uint64_t i = *(void *)(a1 + 64); i != *(void *)(a1 + 56); i -= 8)
  {
    uint64_t v8 = *(void *)(i - 8);
    uint64_t v10 = *(void *)(*(void *)v8 + 8);
    sub_100418268(a1 + 112, &v10);
  }
  *(void *)(a1 + 80) = i;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 221) = 1;
}

void sub_1004122AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1004122C4(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  if (a4) {
    *(unsigned char *)(a1 + 220) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  return sub_100411AFC(a2);
}

uint64_t sub_1004122F0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  switch(v2)
  {
    case 3:
      if (*(_DWORD *)(a2 + 116) == -1) {
        goto LABEL_11;
      }
      return 0;
    case 2:
      int v3 = *(_DWORD *)(a2 + 116);
      break;
    case 1:
      int v3 = *(_DWORD *)(a2 + 116);
      if (v3 < 0) {
        int v3 = -v3;
      }
      break;
    default:
      goto LABEL_11;
  }
  if (v3 != 1) {
    return 0;
  }
LABEL_11:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      if (v2 == 3)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 120);
        goto LABEL_26;
      }
      if (v2 == 2) {
        uint64_t result = *(_DWORD *)(a2 + 120) > 0;
      }
      else {
        uint64_t result = *(_DWORD *)(a2 + 120) != 0;
      }
      break;
    case 2:
      if (v2 == 3)
      {
        unsigned int v6 = ~*(_DWORD *)(a2 + 120);
LABEL_26:
        uint64_t result = v6 >> 31;
      }
      else if (v2 == 2)
      {
        uint64_t result = *(_DWORD *)(a2 + 120) < 1;
      }
      else
      {
        uint64_t result = *(_DWORD *)(a2 + 120) == 0;
      }
      break;
    case 3:
      if (v2 == 3)
      {
        BOOL v5 = *(_DWORD *)(a2 + 120) >= 0;
      }
      else if (v2 == 2)
      {
        BOOL v5 = *(_DWORD *)(a2 + 120) < 1;
      }
      else
      {
        BOOL v5 = *(_DWORD *)(a2 + 120) == 0;
      }
      return v5 ^ (*(_DWORD *)(*(void *)(a2 + 184) + 8) != 0);
    case 4:
      return 1;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_100412454(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 184);
  int v3 = *(_DWORD *)(v2 + 8);
  uint64_t v4 = *(void *)(a2 + 136);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 184);
      if (*(_DWORD *)(v5 + 8) == v3 && !*(unsigned char *)(v5 + 12)) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 136);
      if (!v4) {
        goto LABEL_5;
      }
    }
    if (*(_DWORD *)(result + 12))
    {
      int v8 = *(_DWORD *)(v4 + 112);
      int v7 = *(_DWORD *)(v4 + 116);
      if (v8 * v7 < 0 && (v7 >= 0 ? (unsigned int v9 = *(_DWORD *)(v4 + 116)) : (unsigned int v9 = -v7), v9 < 2))
      {
        if (*(unsigned char *)(v2 + 12)) {
          int v11 = 1;
        }
        else {
          int v11 = *(_DWORD *)(a2 + 112);
        }
      }
      else
      {
        int v10 = *(_DWORD *)(a2 + 112);
        if (v10 * v8 < 0) {
          int v10 = 0;
        }
        int v11 = v7 + v10;
      }
      int v15 = *(_DWORD *)(v4 + 120);
      *(_DWORD *)(a2 + 116) = v11;
      *(_DWORD *)(a2 + 120) = v15;
      uint64_t v6 = *(void *)(v4 + 144);
      goto LABEL_28;
    }
    int v12 = *(_DWORD *)(v4 + 120);
    *(_DWORD *)(a2 + 116) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 120) = v12;
    uint64_t v6 = *(void *)(v4 + 144);
LABEL_17:
    if (v6 != a2)
    {
      int v13 = *(_DWORD *)(a2 + 120);
      do
      {
        uint64_t v14 = *(void *)(v6 + 184);
        if (*(_DWORD *)(v14 + 8) != v3 && !*(unsigned char *)(v14 + 12))
        {
          int v13 = v13 == 0;
          *(_DWORD *)(a2 + 120) = v13;
        }
        uint64_t v6 = *(void *)(v6 + 144);
      }
      while (v6 != a2);
    }
    return result;
  }
LABEL_5:
  *(_DWORD *)(a2 + 116) = *(_DWORD *)(a2 + 112);
  uint64_t v6 = *(void *)(result + 40);
  if (!*(_DWORD *)(result + 12)) {
    goto LABEL_17;
  }
LABEL_28:
  if (v6 != a2)
  {
    int v16 = *(_DWORD *)(a2 + 120);
    do
    {
      uint64_t v17 = *(void *)(v6 + 184);
      if (*(_DWORD *)(v17 + 8) != v3 && !*(unsigned char *)(v17 + 12))
      {
        v16 += *(_DWORD *)(v6 + 112);
        *(_DWORD *)(a2 + 120) = v16;
      }
      uint64_t v6 = *(void *)(v6 + 144);
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_100412584(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (*(_DWORD *)(result + 12))
  {
    if (v2 != a2)
    {
      int v3 = *(_DWORD *)(a2 + 116);
      int v4 = *(_DWORD *)(a2 + 120);
      do
      {
        uint64_t v5 = *(void *)(v2 + 184);
        if (*(_DWORD *)(v5 + 8) == 1)
        {
          v4 += *(_DWORD *)(v2 + 112);
          *(_DWORD *)(a2 + 120) = v4;
        }
        else if (!*(unsigned char *)(v5 + 12))
        {
          v3 += *(_DWORD *)(v2 + 112);
          *(_DWORD *)(a2 + 116) = v3;
        }
        uint64_t v2 = *(void *)(v2 + 144);
      }
      while (v2 != a2);
    }
  }
  else
  {
    if (v2 == a2)
    {
      char v7 = 0;
      char v6 = 0;
    }
    else
    {
      char v6 = 0;
      char v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(v2 + 184);
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          ++v6;
        }
        else if (!*(unsigned char *)(v8 + 12))
        {
          ++v7;
        }
        uint64_t v2 = *(void *)(v2 + 144);
      }
      while (v2 != a2);
    }
    *(_DWORD *)(a2 + 116) = v7 & 1;
    *(_DWORD *)(a2 + 120) = v6 & 1;
  }
  return result;
}

uint64_t sub_10041263C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[12];
  uint64_t v3 = *(void *)(a1 + 96);
  if (v2 != v3) {
    return v2 > v3;
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = a2[6];
  uint64_t v8 = a2[7];
  double v10 = (double)(v8 - v4);
  double v11 = (double)(v9 - *a2);
  double v12 = (double)(*a2 - v6) * v10 - (double)(v4 - v7) * v11;
  if (v12 != 0.0) {
    return v12 < 0.0;
  }
  uint64_t v15 = *(void *)(a1 + 176);
  if ((*(unsigned char *)(v15 + 64) & 4) != 0 || v7 <= v8)
  {
    uint64_t v17 = a2[22];
    if ((*(unsigned char *)(v17 + 64) & 4) != 0 || v8 <= v7)
    {
      int v19 = *((unsigned __int8 *)a2 + 192);
      BOOL v13 = *((unsigned char *)a2 + 192) != 0;
      if (*(void *)(a1 + 8) == v4
        && *(void *)(**(void **)(a1 + 184) + 8) == v4
        && *(unsigned __int8 *)(a1 + 192) == v19)
      {
        int v21 = *(_DWORD *)(a1 + 112);
        if (v21 < 1) {
          uint64_t v22 = *(void *)(v15 + 48) + 48;
        }
        else {
          uint64_t v22 = *(void *)(v15 + 56) + 56;
        }
        if ((double)(uint64_t)(*(void *)a1 - **(void **)v22) * (double)(v7 - v4)
           - (double)(v4 - *(void *)(*(void *)v22 + 8)) * (double)(v6 - *(void *)a1) == 0.0)
        {
          return 1;
        }
        else
        {
          if (v21 < 1) {
            long long v23 = (void **)(*(void *)(v15 + 48) + 48);
          }
          else {
            long long v23 = (void **)(*(void *)(v15 + 56) + 56);
          }
          uint64_t v24 = *v23;
          if (*((int *)a2 + 28) < 1) {
            uint64_t v25 = *(void *)(v17 + 48) + 48;
          }
          else {
            uint64_t v25 = *(void *)(v17 + 56) + 56;
          }
          return v19 == (double)(v5 - *v24) * (double)(*(void *)(*(void *)v25 + 8) - v4)
                      - (double)(v4 - v24[1]) * (double)(**(void **)v25 - v5) > 0.0;
        }
      }
    }
    else
    {
      uint64_t v18 = 56;
      if (*((int *)a2 + 28) > 0) {
        uint64_t v18 = 48;
      }
      return v11 * (double)(*(void *)(*(void *)(v17 + v18) + 8) - v8)
           - v10 * (double)(**(void **)(v17 + v18) - v9) >= 0.0;
    }
  }
  else
  {
    uint64_t v16 = 56;
    if (*(int *)(a1 + 112) > 0) {
      uint64_t v16 = 48;
    }
    return (double)(v6 - v5) * (double)(*(void *)(*(void *)(v15 + v16) + 8) - v7)
         - (double)(v7 - v4) * (double)(**(void **)(v15 + v16) - v6) <= 0.0;
  }
  return v13;
}

uint64_t sub_100412874(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t **)(result + 40);
  uint64_t v4 = *(void *)(result + 40);
  if (v4)
  {
    uint64_t result = sub_10041263C(*(void *)(result + 40), a2);
    if (result)
    {
      while (1)
      {
        uint64_t v5 = v4;
        uint64_t v4 = *(void *)(v4 + 144);
        if (!v4) {
          break;
        }
        uint64_t result = sub_10041263C(v4, a2);
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v5 + 196) == 2) {
            uint64_t v5 = v4;
          }
          uint64_t v6 = *(void *)(v5 + 144);
          goto LABEL_12;
        }
      }
      if (*(_DWORD *)(v5 + 196) == 2) {
        return result;
      }
      uint64_t v6 = 0;
LABEL_12:
      a2[18] = v6;
      uint64_t v3 = (uint64_t **)(v5 + 144);
      uint64_t v7 = *(void *)(v5 + 144);
      if (v7) {
        *(void *)(v7 + 136) = a2;
      }
      a2[17] = v5;
    }
    else
    {
      a2[17] = 0;
      a2[18] = v4;
      *(void *)(v4 + 136) = a2;
    }
  }
  else
  {
    a2[17] = 0;
    a2[18] = 0;
  }
  *uint64_t v3 = a2;
  return result;
}

void sub_100412928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 != *(void *)(a1 + 64))
  {
    uint64_t v5 = a1 + 112;
    do
    {
      if (*(void *)(**(void **)v2 + 8) != a2) {
        break;
      }
      *(void *)(a1 + 80) = v2 + 8;
      int v6 = *(_DWORD *)(**(void **)v2 + 64);
      if ((v6 & 1) == 0) {
        operator new();
      }
      if ((v6 & 2) == 0) {
        operator new();
      }
      MEMORY[0xC0] = 1;
      sub_100412874(a1, 0);
      if (*(unsigned char *)(MEMORY[0xB8] + 12))
      {
        sub_100412584(a1, 0);
        int v7 = *(_DWORD *)(a1 + 12);
        if (v7 == 3)
        {
          int32x2_t v8 = vcltz_s32(MEMORY[0x74]);
        }
        else if (v7 == 2)
        {
          int32x2_t v8 = vcgtz_s32(MEMORY[0x74]);
        }
        else
        {
          int32x2_t v8 = vtst_s32(MEMORY[0x74], MEMORY[0x74]);
        }
        int v10 = *(_DWORD *)(a1 + 8);
        __int8 v9 = v8.i8[4];
        if (v10 != 1)
        {
          if (v10 == 2) {
            __int8 v9 = (v8.i8[0] | v8.i8[4]) ^ 1;
          }
          else {
            __int8 v9 = v8.i8[4] ^ 1;
          }
        }
      }
      else
      {
        sub_100412454(a1, 0);
        __int8 v9 = sub_1004122F0(a1, 0);
      }
      if (v9) {
        sub_1004139BC();
      }
      if (MEMORY[0x38] == MEMORY[8])
      {
        MEMORY[0xA0] = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = 0;
      }
      else
      {
        uint64_t v11 = MEMORY[0x38];
        sub_100418268(v5, &v11);
      }
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v2 != *(void *)(a1 + 64));
  }
}

void sub_100412E74()
{
}

void sub_100412FBC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (!*(unsigned char *)(*(void *)(a2 + 184) + 12))
  {
    uint64_t v5 = *(void *)(a2 + 136);
    BOOL v6 = !*(void *)(a2 + 128) || v5 == 0;
    if (!v6 && !*(unsigned char *)(*(void *)(v5 + 184) + 12) && *(void *)(v5 + 128))
    {
      if ((v9 = a3[1], uint64_t v10 = *(void *)(a2 + 56), v9 >= v10 + 2) && v9 >= *(void *)(v5 + 56) + 2
        || *(void *)(a2 + 8) <= v9 && *(void *)(v5 + 8) <= v9)
      {
        if (a4)
        {
          if (sub_1004186D4(a3, *(uint64_t **)(a2 + 136), (void *)(v5 + 48)) > 0.25) {
            return;
          }
          uint64_t v9 = a3[1];
          uint64_t v10 = *(void *)(a2 + 56);
        }
        else if (*(void *)(a2 + 96) != *(void *)(v5 + 96))
        {
          return;
        }
        if ((double)(*a3 - *(void *)(a2 + 48)) * (double)(*(void *)(v5 + 56) - v9)
           - (double)(v9 - v10) * (double)(*(void *)(v5 + 48) - *a3) == 0.0)
        {
          unint64_t v11 = **(void **)(a2 + 128);
          unint64_t v12 = **(void **)(v5 + 128);
          if (v11 == v12)
          {
            sub_100413AF8(a1, v5, a2, a3);
          }
          else
          {
            if (v11 >= v12)
            {
              uint64_t v13 = v5;
              uint64_t v14 = a2;
            }
            else
            {
              uint64_t v13 = a2;
              uint64_t v14 = v5;
            }
            sub_100413E6C(a1, v13, v14);
          }
          *(_DWORD *)(v5 + 196) = 2;
          *(_DWORD *)(a2 + 196) = 1;
        }
      }
    }
  }
}

uint64_t sub_100413130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a1 + 220))
  {
    if (*(unsigned char *)(*(void *)(a2 + 184) + 12))
    {
      uint64_t v8 = a3;
      if (*(unsigned char *)(*(void *)(a3 + 184) + 12)) {
        return 0;
      }
      goto LABEL_7;
    }
    if (*(unsigned char *)(*(void *)(a3 + 184) + 12))
    {
      uint64_t v8 = a2;
      uint64_t v6 = a3;
LABEL_7:
      if (*(_DWORD *)(v8 + 196)) {
        sub_100413CFC(a1, v8);
      }
      int v9 = *(_DWORD *)(v8 + 116);
      if (v9 >= 0) {
        int v10 = *(_DWORD *)(v8 + 116);
      }
      else {
        int v10 = -v9;
      }
      if (v10 != 1) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 8) == 2)
      {
        if (!*(void *)(v8 + 128)) {
          return 0;
        }
      }
      else if (!*(_DWORD *)(*(void *)(v8 + 184) + 8))
      {
        return 0;
      }
      int v18 = *(_DWORD *)(a1 + 12);
      if (v18 != 3)
      {
        if (v18 == 2 && v9 != 1) {
          return 0;
        }
LABEL_67:
        if (*(void *)(v6 + 128))
        {
          uint64_t v24 = sub_100413D3C(a1, v6, a4);
          uint64_t v29 = *(void *)(v6 + 128);
          uint64_t v30 = 24;
          if (*(void *)(v29 + 16) == v6) {
            uint64_t v30 = 16;
          }
          *(void *)(v29 + v30) = 0;
          *(void *)(v6 + 128) = 0;
          uint64_t v35 = *(void *)(a1 + 272);
          if (v35)
          {
            __int16 v36 = *(void (**)(void))(*(void *)v35 + 48);
LABEL_125:
            v36();
            return v24;
          }
        }
        else
        {
          uint64_t v33 = **(void **)(v6 + 184);
          BOOL v34 = *a4 == *(void *)v33 && a4[1] == *(void *)(v33 + 8);
          if (!v34
            || (*(unsigned char *)(v33 + 64) & 3) != 0
            || (uint64_t v40 = sub_100414BE8((void *)v6)) == 0
            || (uint64_t v41 = v40[16]) == 0)
          {
            sub_100413934();
          }
          *(void *)(v6 + 128) = v41;
          int v42 = *(_DWORD *)(v6 + 112);
          long long v43 = (void *)v40[16];
          BOOL v44 = v42 <= 0;
          if (v42 <= 0) {
            uint64_t v45 = v40;
          }
          else {
            uint64_t v45 = (void *)v6;
          }
          if (v44) {
            unint64_t v46 = (void *)v6;
          }
          else {
            unint64_t v46 = v40;
          }
          v43[2] = v45;
          v43[3] = v46;
          return v43[4];
        }
        return v24;
      }
      if (v9 == -1) {
        goto LABEL_67;
      }
      return 0;
    }
  }
  if (*(_DWORD *)(a2 + 196)) {
    sub_100413CFC(a1, a2);
  }
  if (*(_DWORD *)(a3 + 196)) {
    sub_100413CFC(a1, a3);
  }
  int v11 = *(_DWORD *)(*(void *)(a2 + 184) + 8);
  int v12 = *(_DWORD *)(*(void *)(a3 + 184) + 8);
  unsigned int v13 = *(_DWORD *)(a1 + 12);
  if (v11 == v12)
  {
    int v14 = *(_DWORD *)(a2 + 116);
    if (!v13)
    {
      *(_DWORD *)(a2 + 116) = *(_DWORD *)(a3 + 116);
      *(_DWORD *)(a3 + 116) = v14;
      goto LABEL_39;
    }
    if (*(_DWORD *)(a3 + 112) + v14) {
      int v15 = *(_DWORD *)(a3 + 112) + v14;
    }
    else {
      int v15 = -v14;
    }
    *(_DWORD *)(a2 + 116) = v15;
    int v16 = *(_DWORD *)(a3 + 116);
    int v17 = v16 - *(_DWORD *)(a2 + 112);
    if (v17) {
      *(_DWORD *)(a3 + 116) = v17;
    }
    else {
      *(_DWORD *)(a3 + 116) = -v16;
    }
  }
  else
  {
    if (!v13)
    {
      *(_DWORD *)(a2 + 120) = *(_DWORD *)(a2 + 120) == 0;
      *(_DWORD *)(a3 + 120) = *(_DWORD *)(a3 + 120) == 0;
      goto LABEL_39;
    }
    *(_DWORD *)(a2 + 120) += *(_DWORD *)(a3 + 112);
    *(_DWORD *)(a3 + 120) -= *(_DWORD *)(a2 + 112);
  }
  if (v13 > 1)
  {
    int v19 = *(_DWORD *)(a2 + 116);
    int v21 = 0;
    if (v13 == *(_DWORD *)(a1 + 16))
    {
      int v20 = *(_DWORD *)(a3 + 116);
    }
    else
    {
      int v19 = -v19;
      int v20 = -*(_DWORD *)(a3 + 116);
    }
    goto LABEL_44;
  }
  unsigned int v13 = 1;
LABEL_39:
  int v19 = *(_DWORD *)(a2 + 116);
  if (v19 < 0) {
    int v19 = -v19;
  }
  int v20 = *(_DWORD *)(a3 + 116);
  if (v20 < 0) {
    int v20 = -v20;
  }
  int v21 = 1;
LABEL_44:
  uint64_t v22 = *(void *)(a2 + 128);
  if (!v22 && v19 > 1) {
    return 0;
  }
  uint64_t v23 = *(void *)(a3 + 128);
  if (!v23 && v20 > 1) {
    return 0;
  }
  if (!v22)
  {
    if (v23)
    {
      a2 = a3;
      goto LABEL_74;
    }
    if (v21)
    {
      int v37 = *(_DWORD *)(a2 + 120);
      if (v37 >= 0) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = -v37;
      }
      LODWORD(v39) = *(_DWORD *)(a3 + 120);
      if ((int)v39 >= 0) {
        uint64_t v39 = v39;
      }
      else {
        uint64_t v39 = -(int)v39;
      }
    }
    else
    {
      uint64_t v38 = *(int *)(a2 + 120);
      if (v13 == *(_DWORD *)(a1 + 16))
      {
        uint64_t v39 = *(int *)(a3 + 120);
      }
      else
      {
        uint64_t v38 = -(int)v38;
        uint64_t v39 = -(uint64_t)*(int *)(a3 + 120);
      }
    }
    if (v11 == v12)
    {
      uint64_t v24 = 0;
      if (v19 != 1 || v20 != 1) {
        return v24;
      }
      int v47 = *(_DWORD *)(a1 + 8);
      if (v47 != 4)
      {
        if (v47 == 3)
        {
          if (v11 == 1 && v38 >= 1 && v39 > 0) {
            goto LABEL_123;
          }
          uint64_t v24 = 0;
          if (v11) {
            return v24;
          }
          goto LABEL_118;
        }
        if (v47 == 2)
        {
          uint64_t v24 = 0;
LABEL_118:
          if (v38 > 0 || v39 >= 1) {
            return v24;
          }
          goto LABEL_123;
        }
        uint64_t v24 = 0;
        if (v38 < 1 || v39 < 1) {
          return v24;
        }
      }
    }
LABEL_123:
    sub_100412E74();
  }
  if (!v23)
  {
LABEL_74:
    uint64_t v24 = sub_100413D3C(a1, a2, a4);
    uint64_t v32 = *(void *)(a1 + 272);
    if (!v32)
    {
LABEL_77:
      sub_10041193C(v6, a3);
      return v24;
    }
    long long v28 = *(void (**)(void))(*(void *)v32 + 48);
LABEL_76:
    v28();
    goto LABEL_77;
  }
  if (v19 <= 1 && v20 <= 1 && (v11 == v12 || *(_DWORD *)(a1 + 8) == 4))
  {
    if (v22 == v23 || *(void *)(v22 + 16) == a2)
    {
      sub_100413AF8(a1, a2, a3, a4);
      sub_100412E74();
    }
    uint64_t v24 = sub_100413D3C(a1, a2, a4);
    sub_100413D3C(v24, a3, a4);
    uint64_t v26 = *(void *)(a1 + 272);
    if (!v26) {
      goto LABEL_77;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v6, v6 + 48, a3, a3 + 48, v24);
    uint64_t v27 = *(void *)(a1 + 272);
    if (!v27) {
      goto LABEL_77;
    }
    long long v28 = *(void (**)(void))(*(void *)v27 + 48);
    goto LABEL_76;
  }
  uint64_t v24 = sub_100413AF8(a1, a2, a3, a4);
  uint64_t v31 = *(void *)(a1 + 272);
  if (v31 && v24)
  {
    __int16 v36 = *(void (**)(void))(*(void *)v31 + 48);
    goto LABEL_125;
  }
  return v24;
}

void sub_1004137B8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (!*(unsigned char *)(*(void *)(a2 + 184) + 12))
  {
    uint64_t v5 = *(void *)(a2 + 144);
    BOOL v6 = !*(void *)(a2 + 128) || v5 == 0;
    if (!v6 && !*(unsigned char *)(*(void *)(v5 + 184) + 12) && *(void *)(v5 + 128))
    {
      if ((v9 = a3[1], uint64_t v10 = *(void *)(a2 + 56), v9 >= v10 + 2) && v9 >= *(void *)(v5 + 56) + 2
        || *(void *)(a2 + 8) <= v9 && *(void *)(v5 + 8) <= v9)
      {
        if (a4)
        {
          if (sub_1004186D4(a3, *(uint64_t **)(a2 + 144), (void *)(v5 + 48)) > 0.35) {
            return;
          }
          uint64_t v9 = a3[1];
          uint64_t v10 = *(void *)(a2 + 56);
        }
        else if (*(void *)(a2 + 96) != *(void *)(v5 + 96))
        {
          return;
        }
        if ((double)(*a3 - *(void *)(a2 + 48)) * (double)(*(void *)(v5 + 56) - v9)
           - (double)(v9 - v10) * (double)(*(void *)(v5 + 48) - *a3) == 0.0)
        {
          unint64_t v11 = **(void **)(a2 + 128);
          unint64_t v12 = **(void **)(v5 + 128);
          if (v11 == v12)
          {
            sub_100413AF8(a1, a2, v5, a3);
          }
          else
          {
            if (v11 >= v12)
            {
              uint64_t v13 = v5;
              uint64_t v14 = a2;
            }
            else
            {
              uint64_t v13 = a2;
              uint64_t v14 = v5;
            }
            sub_100413E6C(a1, v13, v14);
          }
          *(_DWORD *)(a2 + 196) = 2;
          *(_DWORD *)(v5 + 196) = 1;
        }
      }
    }
  }
}

void sub_100413934()
{
}

void sub_1004139BC()
{
}

uint64_t sub_100413AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(_DWORD *)(a2 + 196)) {
    sub_100413CFC(a1, a2);
  }
  if (*(_DWORD *)(a3 + 196)) {
    sub_100413CFC(a1, a3);
  }
  int v7 = *(void **)(a2 + 128);
  uint64_t v8 = v7[2];
  uint64_t v9 = *(void **)(a3 + 128);
  uint64_t v10 = v9[2];
  if ((v8 == a2) == (v10 == a3))
  {
    if ((*(unsigned char *)(*(void *)(a2 + 176) + 64) & 3) != 0)
    {
      v7[2] = v7[3];
      v7[3] = v8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)(a3 + 176) + 64) & 3) == 0)
      {
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 221) = 0;
        return v12;
      }
      v9[2] = v9[3];
      void v9[3] = v10;
      int v7 = v9;
    }
    v7[4] = *(void *)(v7[4] + 48);
  }
  uint64_t v11 = sub_100413D3C(a1, a2, a4);
  uint64_t v12 = v11;
  uint64_t v13 = *(void **)(a2 + 128);
  uint64_t v14 = *(void **)(a3 + 128);
  if (v13 != v14)
  {
    if (*(unsigned char *)(*(void *)(a2 + 184) + 12))
    {
      if ((*(_DWORD *)(a2 + 112) & 0x80000000) == 0)
      {
LABEL_14:
        uint64_t v15 = a3;
        uint64_t v16 = a2;
LABEL_32:
        sub_100413E6C(v11, v15, v16);
        return v12;
      }
    }
    else if (*v13 >= *v14)
    {
      goto LABEL_14;
    }
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    goto LABEL_32;
  }
  void v13[4] = v11;
  if (*(unsigned char *)(a1 + 33))
  {
    int v17 = *(void **)(a2 + 136);
    if (v17)
    {
      while (1)
      {
        if (!*(unsigned char *)(v17[23] + 12))
        {
          int v18 = (void *)v17[16];
          if (v18) {
            break;
          }
        }
        int v17 = (void *)v17[17];
        if (!v17) {
          goto LABEL_20;
        }
      }
      for (uint64_t i = v18[1]; i; v18[1] = i)
      {
        if (*(void *)(i + 32)) {
          break;
        }
        uint64_t i = *(void *)(i + 8);
      }
      if (v18 == v13) {
        goto LABEL_46;
      }
      uint64_t v24 = v18;
      do
      {
        uint64_t v24 = (void *)v24[1];
        if (v24) {
          BOOL v25 = v24 == v13;
        }
        else {
          BOOL v25 = 1;
        }
      }
      while (!v25);
      if (v24) {
LABEL_46:
      }
        v18[1] = v13[1];
    }
    else
    {
LABEL_20:
      int v18 = 0;
    }
    v13[1] = v18;
  }
  uint64_t v19 = *(void *)(a2 + 128);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 24);
    *(void *)(*(void *)(v19 + 16) + 128) = 0;
    *(void *)(v20 + 128) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    uint64_t v12 = v13[4];
  }
  int v21 = (void *)v13[1];
  if (v21 && !v21[2])
  {
    do
    {
      if (v21[4]) {
        break;
      }
      int v21 = (void *)v21[1];
    }
    while (v21);
    v13[1] = v21;
  }
  return v12;
}

void sub_100413CFC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a2 + 196) = 0;
  if (v2 == 2) {
    *(_DWORD *)(*(void *)(a2 + 144) + 196) = 0;
  }
  else {
    *(_DWORD *)(*(void *)(a2 + 136) + 196) = 0;
  }
  sub_100412E74();
}

uint64_t sub_100413D3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (*(void *)(v3 + 16) == a2)
  {
    if (v7 != *(void *)v4 || v6 != *(void *)(v4 + 8)) {
LABEL_16:
    }
      operator new();
    int v14 = *((_DWORD *)a3 + 8);
    if ((v14 & 0x80000000) == 0 && (*((_DWORD *)a3 + 4) != v14 || *((double *)a3 + 3) != *((double *)a3 + 5)))
    {
      long long v15 = *(_OWORD *)a3;
      long long v16 = *((_OWORD *)a3 + 2);
      *(_OWORD *)(v4 + 16) = *((_OWORD *)a3 + 1);
      *(_OWORD *)(v4 + 32) = v16;
      *(_OWORD *)uint64_t v4 = v15;
    }
  }
  else
  {
    if (v7 != *(void *)v5 || v6 != *(void *)(v5 + 8)) {
      goto LABEL_16;
    }
    int v9 = *((_DWORD *)a3 + 8);
    if ((v9 & 0x80000000) == 0 && (*((_DWORD *)a3 + 4) != v9 || *((double *)a3 + 3) != *((double *)a3 + 5)))
    {
      long long v10 = *(_OWORD *)a3;
      long long v11 = *((_OWORD *)a3 + 2);
      *(_OWORD *)(v5 + 16) = *((_OWORD *)a3 + 1);
      *(_OWORD *)(v5 + 32) = v11;
      *(_OWORD *)uint64_t v5 = v10;
    }
    return v5;
  }
  return v4;
}

void sub_100413E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a2 + 128);
  uint64_t v4 = v3[4];
  uint64_t v5 = *(void **)(a3 + 128);
  uint64_t v6 = v5[4];
  uint64_t v7 = *(void *)(v4 + 48);
  uint64_t v8 = *(void *)(v6 + 48);
  if (v3[2] != a2)
  {
    *(void *)(v7 + 56) = v6;
    *(void *)(v6 + 48) = v7;
    *(void *)(v4 + 48) = v8;
    *(void *)(v8 + 56) = v4;
    uint64_t v9 = v5[3];
    v3[3] = v9;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(void *)(v8 + 56) = v4;
  *(void *)(v4 + 48) = v8;
  *(void *)(v6 + 48) = v7;
  *(void *)(v7 + 56) = v6;
  v3[4] = v6;
  uint64_t v9 = v5[2];
  v3[2] = v9;
  if (v9) {
LABEL_3:
  }
    *(void *)(v9 + 128) = v3;
LABEL_4:
  long long v10 = *(void **)(a3 + 128);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = 0;
  long long v11 = *(void **)(a2 + 128);
  for (uint64_t i = v11[1]; i; v11[1] = i)
  {
    if (*(void *)(i + 32)) {
      break;
    }
    uint64_t i = *(void *)(i + 8);
  }
  if (v11 == v10) {
    goto LABEL_15;
  }
  uint64_t v13 = v11;
  do
  {
    uint64_t v13 = (void *)v13[1];
    if (v13) {
      BOOL v14 = v13 == v10;
    }
    else {
      BOOL v14 = 1;
    }
  }
  while (!v14);
  if (v13) {
LABEL_15:
  }
    v11[1] = v10[1];
  v10[1] = v11;
  if ((*(unsigned char *)(*(void *)(a2 + 176) + 64) & 3) != 0)
  {
    v10[4] = v11[4];
    v11[4] = 0;
  }
  *(void *)(a2 + 128) = 0;
  *(void *)(a3 + 128) = 0;
}

uint64_t sub_100413F54(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = *(uint64_t **)(v2 + 32);
      if (v4) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return result;
      }
    }
    if (!*(unsigned char *)(v2 + 120))
    {
      uint64_t v5 = (uint64_t *)v4[6];
      if (v5 == v4) {
        goto LABEL_59;
      }
      uint64_t v6 = (uint64_t *)v4[7];
      if (v5 == v6) {
        goto LABEL_59;
      }
      if ((uint64_t *)v5[6] == v6)
      {
        uint64_t v29 = *v6;
        uint64_t v30 = *v6 - *v5;
        if (v30 < 0) {
          uint64_t v30 = *v5 - *v6;
        }
        if ((unint64_t)v30 <= 1)
        {
          uint64_t v31 = v6[1] - v5[1];
          if (v31 < 0) {
            uint64_t v31 = v5[1] - v6[1];
          }
          if ((unint64_t)v31 < 2) {
            goto LABEL_59;
          }
        }
        uint64_t v32 = *v4;
        uint64_t v33 = *v4 - *v5;
        if (v33 < 0) {
          uint64_t v33 = *v5 - *v4;
        }
        if ((unint64_t)v33 <= 1)
        {
          uint64_t v34 = v4[1] - v5[1];
          if (v34 < 0) {
            uint64_t v34 = -v34;
          }
          if ((unint64_t)v34 < 2) {
            goto LABEL_59;
          }
        }
        unint64_t v35 = v32 - v29;
        if (v32 - v29 < 0) {
          unint64_t v35 = v29 - v32;
        }
        if (v35 <= 1)
        {
          uint64_t v36 = v4[1] - v6[1];
          if (v36 < 0) {
            uint64_t v36 = -v36;
          }
          if ((unint64_t)v36 <= 1)
          {
LABEL_59:
            *(void *)(v4[7] + 48) = 0;
            operator delete();
          }
        }
      }
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v9 = *(long long **)(v2 + 32);
      do
      {
        long long v10 = (uint64_t *)*((void *)v9 + 6);
        long long v11 = (uint64_t *)*((void *)v9 + 7);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        double v14 = (double)(v8 - *v11);
        uint64_t v16 = *v10;
        uint64_t v15 = v10[1];
        double v17 = (double)(v15 - v7);
        double v18 = (double)(v7 - v13);
        double v19 = (double)(*v10 - v8);
        if (v14 * v17 - v18 * v19 == 0.0)
        {
          BOOL v20 = v7 == v13;
          BOOL v22 = v8 == v12;
          BOOL v21 = v8 == v12;
          BOOL v22 = v22 && v7 == v13;
          if (v22)
          {
            BOOL v21 = 1;
            BOOL v20 = 1;
            goto LABEL_26;
          }
          if (v16 == v8 && v15 == v7)
          {
            uint64_t v16 = v8;
LABEL_26:
            int v24 = *((_DWORD *)v9 + 8);
            if ((v24 & 0x80000000) == 0 && (*((_DWORD *)v9 + 4) != v24 || *((double *)v9 + 3) != *((double *)v9 + 5)))
            {
              BOOL v25 = v8 == v16 && v15 == v7;
              if (v25 || (long long v10 = (uint64_t *)*((void *)v9 + 7), v21 && v20))
              {
                long long v26 = *v9;
                long long v27 = v9[2];
                *((_OWORD *)v10 + 1) = v9[1];
                *((_OWORD *)v10 + 2) = v27;
                *(_OWORD *)long long v10 = v26;
              }
            }
            uint64_t v28 = *((void *)v9 + 7);
            if (v9 == *(long long **)(v2 + 32)) {
              *(void *)(v2 + 32) = v28;
            }
            *(void *)(v28 + 48) = *((void *)v9 + 6);
            *(void *)(*((void *)v9 + 6) + 56) = v28;
            operator delete();
          }
          if (!*(unsigned char *)(v3 + 280) || v17 * v18 + v14 * v19 < 0.0) {
            goto LABEL_26;
          }
        }
        uint64_t v7 = v10[1];
        uint64_t v8 = *v10;
        uint64_t v9 = (long long *)*((void *)v9 + 6);
      }
      while (v10 != v4);
      return sub_1004142AC(v3, v2);
    }
  }
  return result;
}

uint64_t sub_1004142AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int64x2_t **)(a2 + 32);
  uint64_t v3 = (int64x2_t *)v2[3].i64[0];
  uint64_t v4 = (uint64_t *)v2[3].i64[1];
  uint64_t v5 = (uint64_t *)v3[3].i64[0];
  if (v4 != v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(int64x2_t **)(a2 + 32);
    do
    {
      uint64_t v8 = v3->i64[1];
      uint64_t v10 = *v4;
      uint64_t v9 = v4[1];
      uint64_t v13 = v5;
      uint64_t v11 = *v5;
      uint64_t v12 = v13[1];
      uint64_t v14 = v7->i64[1];
      uint64_t result = v8 - v14;
      if (((double)(v3->i64[0] - v10) * (double)(v12 - v8) - (double)(v8 - v9) * (double)(v11 - v3->i64[0]))
         * ((double)(v3->i64[0] - v7->i64[0]) * (double)(v12 - v8) - (double)(v8 - v14) * (double)(v11 - v3->i64[0])) < 0.0
        && ((double)(v10 - v3->i64[0]) * (double)(v14 - v9) - (double)(v9 - v8) * (double)(v7->i64[0] - v10))
         * ((double)(v10 - v11) * (double)(v14 - v9) - (double)(v9 - v12) * (double)(v7->i64[0] - v10)) < 0.0)
      {
        if (v7 == v2 || v3 == v2) {
          *(void *)(a2 + 32) = v2[3].i64[1];
        }
        sub_1004143E0(v6, a2, v7);
      }
      if (v3 == v2) {
        break;
      }
      uint64_t v7 = v3;
      uint64_t v15 = v3 + 3;
      uint64_t v3 = (int64x2_t *)v3[3].i64[0];
      uint64_t v4 = (uint64_t *)v15->i64[1];
      uint64_t v5 = (uint64_t *)v3[3].i64[0];
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1004143E0(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  uint64_t v6 = (void *)a3[3].i64[0];
  uint64_t v7 = (int64x2_t *)a3[3].i64[1];
  uint64_t v8 = (void *)v6[6];
  *(void *)(a2 + 32) = v7;
  int64x2_t v29 = 0uLL;
  _D2 = (double)(uint64_t)(*v8 - *v6);
  int64x2_t v10 = *v7;
  _Q0 = vcvtq_f64_s64(vsubq_s64(*a3, *v7));
  __asm { FMLA            D4, D2, V0.D[1] }
  if (_D4 != 0.0)
  {
    double v17 = ((double)(v10.i64[0] - *v6) * (double)(uint64_t)(v8[1] - v6[1]) - (double)(v10.i64[1] - v6[1]) * _D2) / _D4;
    if (v17 <= 0.0)
    {
      int64x2_t v18 = *v7;
      goto LABEL_6;
    }
    if (v17 < 1.0)
    {
      int64x2_t v18 = vcvtq_s64_f64(vmlaq_n_f64(vcvtq_f64_s64(v10), _Q0, v17));
LABEL_6:
      int64x2_t v29 = v18;
      goto LABEL_8;
    }
    int64x2_t v29 = *a3;
  }
LABEL_8:
  uint64_t v19 = *(void *)(a1 + 272);
  BOOL v20 = v7;
  if (v19)
  {
    (*(void (**)(void, int64x2_t *, int64x2_t *))(*(void *)v19 + 48))(*(void *)(a1 + 272), v7, a3);
    BOOL v20 = *(int64x2_t **)(a2 + 32);
  }
  double v21 = 0.0;
  BOOL v22 = v20;
  do
  {
    double v21 = v21
        + (double)(v22->i64[1] + *(void *)(v22[3].i64[1] + 8)) * (double)(*(void *)v22[3].i64[1] - v22->i64[0]);
    BOOL v22 = (int64x2_t *)v22[3].i64[0];
  }
  while (v22 != v20);
  double v23 = fabs(v21 * 0.5);
  if (v23 < 2.0)
  {
    *(void *)(v20[3].i64[1] + 48) = 0;
    operator delete();
  }
  int v24 = (void *)a3[3].i64[0];
  double v25 = (double)(a3->i64[1] + v29.i64[1]) * (double)(v29.i64[0] - a3->i64[0])
      + (double)(v29.i64[1] + v24[1]) * (double)(*v24 - v29.i64[0])
      + (double)(a3->i64[1] + v24[1]) * (double)(a3->i64[0] - *v24);
  double v26 = fabs(v25);
  if (v29.i64[0] != v7->i64[0] || (long long v27 = v7, v28 = v8, v29.i64[1] != v7->i64[1]))
  {
    if (v29.i64[0] != *v8 || (long long v27 = v7, v28 = v8, v29.i64[1] != v8[1])) {
      operator new();
    }
  }
  v8[7] = v27;
  v7[3].i64[0] = (uint64_t)v28;
  if (v26 >= 1.0 && (v26 > v23 || v21 * 0.5 > 0.0 != v25 <= 0.0)) {
    sub_1004139BC();
  }
  if (a3[3].i64[0]) {
    operator delete();
  }
  operator delete();
}

BOOL sub_1004148C0(uint64_t *a1, uint64_t *a2)
{
  int v3 = 0;
  uint64_t v4 = (uint64_t *)a2[6];
  uint64_t v5 = a1;
  do
  {
    if (v4 == a2 || (uint64_t *)a2[7] == v4) {
      goto LABEL_47;
    }
    uint64_t v6 = v5[1];
    uint64_t v7 = a2;
    while (1)
    {
      uint64_t v8 = v7[1];
      if (v8 != v6) {
        break;
      }
      uint64_t v7 = (uint64_t *)v7[6];
      if (v7 == a2)
      {
        uint64_t v8 = a2[1];
        uint64_t v7 = a2;
        break;
      }
    }
    if (v6 == v8)
    {
LABEL_47:
      ++v3;
    }
    else
    {
      int v9 = 0;
      char v10 = v6 > v8;
      uint64_t v11 = *v5;
      uint64_t v12 = v7;
LABEL_10:
      uint64_t v12 = (uint64_t *)v12[6];
      do
      {
        if (v12 == v7) {
          break;
        }
        if (v10)
        {
          while (1)
          {
            uint64_t v13 = v12[1];
            if (v13 >= v6) {
              break;
            }
            uint64_t v12 = (uint64_t *)v12[6];
            if (v12 == v7)
            {
              if (v6 > v8) {
                goto LABEL_45;
              }
              char v10 = 1;
              goto LABEL_42;
            }
          }
        }
        else
        {
          while (1)
          {
            uint64_t v13 = v12[1];
            if (v13 <= v6) {
              break;
            }
            uint64_t v12 = (uint64_t *)v12[6];
            if (v12 == v7)
            {
              if (v6 <= v8) {
                goto LABEL_45;
              }
              char v10 = 0;
              goto LABEL_42;
            }
          }
        }
        if (v12 == v7) {
          break;
        }
        uint64_t v14 = *v12;
        if (v6 != v13)
        {
          uint64_t v16 = (uint64_t *)v12[7];
          uint64_t v17 = *v16;
          if (v11 < v14 && v11 < v17) {
            goto LABEL_36;
          }
          if (v11 > v14 && v11 > v17)
          {
            int v9 = 1 - v9;
LABEL_36:
            v10 ^= 1u;
            goto LABEL_10;
          }
          double v19 = (double)(v14 - v17) * (double)(v6 - v13) - (double)(v13 - v16[1]) * (double)(v11 - v14);
          if ((v10 ^ (v19 >= 0.0))) {
            int v9 = 1 - v9;
          }
          if (v19 != 0.0) {
            goto LABEL_36;
          }
          goto LABEL_48;
        }
        if (v11 == v14) {
          goto LABEL_48;
        }
        uint64_t v15 = (void *)v12[7];
        if (v6 == v15[1] && v11 < v14 == v11 >= *v15) {
          goto LABEL_48;
        }
        uint64_t v12 = (uint64_t *)v12[6];
      }
      while (v12 != v7);
      if (v6 > v8 != (v10 & 1))
      {
LABEL_42:
        double v20 = (double)(*v7 - *(void *)v7[7]) * (double)(v6 - v8)
            - (double)(v8 - *(void *)(v7[7] + 8)) * (double)(v11 - *v7);
        if ((v10 ^ (v20 >= 0.0))) {
          int v9 = 1 - v9;
        }
        if (v20 == 0.0) {
          goto LABEL_48;
        }
      }
LABEL_45:
      if (!v9) {
        goto LABEL_47;
      }
      --v3;
    }
LABEL_48:
    uint64_t v5 = (uint64_t *)v5[6];
    if (v3 >= 0) {
      unsigned int v21 = v3;
    }
    else {
      unsigned int v21 = -v3;
    }
  }
  while (v5 != a1 && v21 < 2);
  if (v21 >= 2) {
    return v3 >> 31;
  }
  sub_10041840C(a1, (char **)&__p);
  if (__p == v32)
  {
    int64x2_t v29 = 0uLL;
  }
  else
  {
    int64x2_t v24 = vdupq_n_s64(0x8000000000000000);
    int64x2_t v25 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    double v26 = (int64x2_t *)__p;
    do
    {
      int64x2_t v27 = *v26;
      v26 += 3;
      int64x2_t v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v25, v27), (int8x16_t)v27, (int8x16_t)v25);
      int64x2_t v24 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v27, v24), (int8x16_t)v27, (int8x16_t)v24);
    }
    while (v26 != (int64x2_t *)v32);
    uint64x2_t v28 = (uint64x2_t)vaddq_s64(v25, v24);
    int64x2_t v29 = vshrq_n_s64((int64x2_t)vsraq_n_u64(v28, v28, 0x3FuLL), 1uLL);
  }
  v33[0] = v29;
  v33[1] = xmmword_101178668;
  v33[2] = unk_101178678;
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  sub_10041840C(a2, (char **)&__p);
  BOOL v23 = sub_10013462C((uint64_t *)v33, &__p) != 2;
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  return v23;
}

void sub_100414BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100414BE8(void *a1)
{
  uint64_t result = (void *)a1[18];
  if (result)
  {
    while (result[23] != a1[23])
    {
      uint64_t v3 = result[1];
      if (result[7] == v3 || (*a1 == *result ? (BOOL v4 = a1[1] == v3) : (BOOL v4 = 0), v4))
      {
        uint64_t result = (void *)result[18];
        if (result) {
          continue;
        }
      }
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    uint64_t result = (void *)a1[17];
    if (result)
    {
      while (result[23] != a1[23])
      {
        uint64_t v5 = result[1];
        if (result[7] != v5 && (*a1 != *result || a1[1] != v5)) {
          return 0;
        }
        uint64_t result = (void *)result[17];
        if (!result) {
          return result;
        }
      }
    }
  }
  return result;
}

BOOL sub_100414C80(uint64_t a1, int a2, int a3, char a4)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  sub_1004121C8(a1);
  if (!a2) {
    return 1;
  }
  uint64_t v9 = 0;
  if (!sub_100414D94(a1, &v9)) {
    return 1;
  }
  while (*(unsigned char *)(a1 + 221))
  {
    sub_100412928(a1, v9);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (!v6) {
        break;
      }
      *(void *)(a1 + 48) = *(void *)(v6 + 160);
      sub_100414FD4(a1, v6);
    }
    if (*(void *)(a1 + 176) != *(void *)(a1 + 168))
    {
      sub_100415F74(a1);
      *(void *)(a1 + 176) = *(void *)(a1 + 168);
    }
    *(void *)(a1 + 24) = v9;
    if (!sub_100414D94(a1, &v9))
    {
      if (*(unsigned char *)(a1 + 221))
      {
        sub_10041671C(a1);
        return *(unsigned char *)(a1 + 221) != 0;
      }
      return 0;
    }
    sub_1004164F0((void *)a1, v9);
    sub_100416528(a1, v9);
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      if (!v7) {
        break;
      }
      *(void *)(a1 + 48) = *(void *)(v7 + 160);
      sub_100414FD4(a1, v7);
    }
  }
  return 0;
}

BOOL sub_100414D94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(char **)(a1 + 112);
  uint64_t v3 = *(char **)(a1 + 120);
  if (v2 != v3)
  {
    *a2 = *(void *)v2;
    uint64_t v4 = v3 - v2;
    if (v3 - v2 >= 9)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)v2;
      int64_t v8 = (unint64_t)((v4 >> 3) - 2) >> 1;
      uint64_t v9 = v2;
      do
      {
        char v10 = &v9[8 * v5 + 8];
        uint64_t v11 = (2 * v5) | 1;
        uint64_t v5 = 2 * v5 + 2;
        if (v5 >= v6)
        {
          uint64_t v12 = *(void *)v10;
          uint64_t v5 = v11;
        }
        else
        {
          uint64_t v12 = *(void *)v10;
          uint64_t v13 = *((void *)v10 + 1);
          if (*(void *)v10 <= v13) {
            uint64_t v12 = *((void *)v10 + 1);
          }
          if (*(void *)v10 >= v13) {
            uint64_t v5 = v11;
          }
          else {
            v10 += 8;
          }
        }
        *(void *)uint64_t v9 = v12;
        uint64_t v9 = v10;
      }
      while (v5 <= v8);
      uint64_t v14 = v3 - 8;
      if (v10 == v3 - 8)
      {
        *(void *)char v10 = v7;
      }
      else
      {
        *(void *)char v10 = *(void *)v14;
        *(void *)uint64_t v14 = v7;
        uint64_t v15 = v10 - v2 + 8;
        if (v15 >= 9)
        {
          unint64_t v16 = (((unint64_t)v15 >> 3) - 2) >> 1;
          uint64_t v17 = &v2[8 * v16];
          uint64_t v18 = *(void *)v17;
          uint64_t v19 = *(void *)v10;
          if (*(void *)v17 < *(void *)v10)
          {
            do
            {
              *(void *)char v10 = v18;
              char v10 = v17;
              if (!v16) {
                break;
              }
              unint64_t v16 = (v16 - 1) >> 1;
              uint64_t v17 = &v2[8 * v16];
              uint64_t v18 = *(void *)v17;
            }
            while (*(void *)v17 < v19);
            *(void *)char v10 = v19;
          }
        }
      }
    }
    double v20 = v3 - 8;
    if (v2 == v3 - 8)
    {
LABEL_40:
      unsigned int v21 = v2;
    }
    else
    {
      unsigned int v21 = v3;
      while (1)
      {
        BOOL v22 = v21;
        unsigned int v21 = v20;
        uint64_t v23 = *a2;
        if (*a2 != *(void *)v2) {
          break;
        }
        uint64_t v24 = v20 - v2;
        if (v21 - v2 >= 9)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v24 >> 3;
          int64_t v27 = (unint64_t)((v24 >> 3) - 2) >> 1;
          uint64x2_t v28 = v2;
          do
          {
            int64x2_t v29 = &v28[8 * v25 + 8];
            uint64_t v30 = (2 * v25) | 1;
            uint64_t v25 = 2 * v25 + 2;
            if (v25 >= v26)
            {
              uint64_t v31 = *(void *)v29;
              uint64_t v25 = v30;
            }
            else
            {
              uint64_t v31 = *(void *)v29;
              uint64_t v32 = *((void *)v29 + 1);
              if (*(void *)v29 <= v32) {
                uint64_t v31 = *((void *)v29 + 1);
              }
              if (*(void *)v29 >= v32) {
                uint64_t v25 = v30;
              }
              else {
                v29 += 8;
              }
            }
            *(void *)uint64x2_t v28 = v31;
            uint64x2_t v28 = v29;
          }
          while (v25 <= v27);
          uint64_t v33 = v22 - 16;
          if (v29 == v33)
          {
            *(void *)int64x2_t v29 = v23;
          }
          else
          {
            *(void *)int64x2_t v29 = *(void *)v33;
            *(void *)uint64_t v33 = v23;
            uint64_t v34 = v29 - v2 + 8;
            if (v34 >= 9)
            {
              unint64_t v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
              uint64_t v36 = &v2[8 * v35];
              uint64_t v37 = *(void *)v36;
              uint64_t v38 = *(void *)v29;
              if (*(void *)v36 < *(void *)v29)
              {
                do
                {
                  *(void *)int64x2_t v29 = v37;
                  int64x2_t v29 = v36;
                  if (!v35) {
                    break;
                  }
                  unint64_t v35 = (v35 - 1) >> 1;
                  uint64_t v36 = &v2[8 * v35];
                  uint64_t v37 = *(void *)v36;
                }
                while (*(void *)v36 < v38);
                *(void *)int64x2_t v29 = v38;
              }
            }
          }
        }
        double v20 = v21 - 8;
        if (v2 == v21 - 8) {
          goto LABEL_40;
        }
      }
    }
    *(void *)(a1 + 120) = v21;
  }
  return v2 != v3;
}

void sub_100414FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  long long v178 = 0uLL;
  long long v179 = xmmword_101178668;
  long long v180 = unk_101178678;
  uint64_t v4 = *(void *)(a2 + 176);
  int v5 = *(_DWORD *)(a2 + 112);
  uint64_t v6 = *(void *)(v4 + 8);
  int v173 = *(unsigned __int8 *)(*(void *)(a2 + 184) + 12);
  uint64_t v7 = (void *)v4;
  if (*(unsigned char *)(*(void *)(a2 + 184) + 12))
  {
    if (v5 <= 0)
    {
      do
      {
        int64_t v8 = v7;
        uint64_t v7 = (void *)v7[7];
      }
      while (v7[1] == v6 && (v8[8] & 6) == 0);
    }
    else
    {
      do
      {
        int64_t v8 = v7;
        uint64_t v7 = (void *)v7[6];
      }
      while (v7[1] == v6 && (v8[8] & 6) == 0);
    }
  }
  else if (v5 <= 0)
  {
    do
    {
      int64_t v8 = v7;
      uint64_t v7 = (void *)v7[7];
    }
    while (v7[1] == v6);
  }
  else
  {
    do
    {
      int64_t v8 = v7;
      uint64_t v7 = (void *)v7[6];
    }
    while (v7[1] == v6);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if ((v8[8] & 4) != 0) {
    char v10 = v8;
  }
  else {
    char v10 = 0;
  }
  if (v10) {
    BOOL v11 = v10 == (void *)v4;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v173 == 0)
  {
    int v13 = *(unsigned __int8 *)(a1 + 280);
    uint64_t v14 = 56;
    if (v5 > 0) {
      uint64_t v14 = 48;
    }
    uint64_t v15 = *(void *)(v4 + v14);
    a1 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    long long v17 = *(_OWORD *)(v15 + 32);
    long long v181 = *(_OWORD *)(v15 + 16);
    long long v182 = v17;
    if (v16 == *(void *)(a2 + 56))
    {
      char v18 = 0;
      uint64_t v19 = *(void *)(a2 + 48);
      uint64_t v20 = *(void *)a2;
      while (1)
      {
        uint64_t v21 = a1;
        if (v13)
        {
          a1 = a1 >= v19;
          if (a1 == v20 < v19) {
            break;
          }
        }
        if (v5 <= 0) {
          uint64_t v22 = 56;
        }
        else {
          uint64_t v22 = 48;
        }
        uint64_t v4 = *(void *)(v4 + v22);
        *(void *)(a2 + 176) = v4;
        *(void *)(a2 + 48) = v21;
        *(void *)(a2 + 56) = v16;
        long long v23 = v182;
        *(_OWORD *)(a2 + 64) = v181;
        *(_OWORD *)(a2 + 80) = v23;
        a1 = *(unsigned __int8 *)(v4 + 64);
        if ((a1 & 4) == 0)
        {
          uint64_t v24 = v5 <= 0 ? 56 : 48;
          uint64_t v25 = *(void *)(v4 + v24);
          a1 = *(void *)v25;
          uint64_t v26 = *(void *)(v25 + 8);
          long long v27 = *(_OWORD *)(v25 + 32);
          long long v181 = *(_OWORD *)(v25 + 16);
          long long v182 = v27;
          char v18 = 1;
          uint64_t v19 = v21;
          if (v26 == v16) {
            continue;
          }
        }
        goto LABEL_40;
      }
      uint64_t v21 = v19;
      if ((v18 & 1) == 0) {
        goto LABEL_45;
      }
LABEL_40:
      double v28 = 1.79769313e308;
      if (v21 > v20) {
        double v28 = -1.79769313e308;
      }
      if (v16 != v9) {
        double v28 = (double)(v21 - v20) / (double)(v16 - v9);
      }
      *(double *)(a2 + 104) = v28;
    }
  }
LABEL_45:
  uint64_t v30 = (long long *)(a2 + 48);
  uint64_t v29 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 96);
  if (*(void *)a2 == v29)
  {
    uint64_t v32 = a2;
    do
    {
      uint64_t v32 = *(void *)(v32 + 144);
      BOOL v33 = v32 != 0;
    }
    while (v32 && *(void **)(v32 + 176) != v10);
    uint64_t v34 = *(void *)(a2 + 96);
    uint64_t v175 = v34;
  }
  else
  {
    BOOL v33 = v31 < v29;
    if (v31 >= v29) {
      uint64_t v35 = *(void *)(a2 + 48);
    }
    else {
      uint64_t v35 = *(void *)(a2 + 96);
    }
    uint64_t v175 = v35;
    if (v31 <= v29) {
      uint64_t v34 = *(void *)(a2 + 48);
    }
    else {
      uint64_t v34 = *(void *)(a2 + 96);
    }
  }
  if (*(void *)(a2 + 128))
  {
    *(void *)&long long v181 = *(void *)(a2 + 96);
    *((void *)&v181 + 1) = v9;
    long long v36 = *(_OWORD *)(a2 + 32);
    long long v182 = *(_OWORD *)(a2 + 16);
    long long v183 = v36;
    a1 = sub_100413D3C(a1, a2, (uint64_t *)&v181);
    uint64_t v37 = a1;
    if (!*(unsigned char *)(*(void *)(a1 + 64) + 120))
    {
      a1 = v3 + 184;
      unint64_t v38 = *(void *)(v3 + 184);
      unint64_t v39 = *(void *)(v3 + 176);
      if (v39 >= v38)
      {
        uint64_t v41 = *(void *)(v3 + 168);
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v41) >> 3);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004E40();
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v41) >> 3);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0x555555555555555) {
          unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45) {
          unint64_t v46 = (char *)sub_100046F5C(a1, v45);
        }
        else {
          unint64_t v46 = 0;
        }
        int v47 = &v46[24 * v42];
        unint64_t v48 = &v46[24 * v45];
        *(void *)int v47 = v37;
        *((void *)v47 + 1) = 0;
        v47[16] = 1;
        uint64_t v40 = v47 + 24;
        uint64_t v49 = *(void *)(v3 + 168);
        a1 = *(void *)(v3 + 176);
        if (a1 != v49)
        {
          do
          {
            long long v50 = *(_OWORD *)(a1 - 24);
            *(v47 - 8) = *(unsigned char *)(a1 - 8);
            *(_OWORD *)(v47 - 24) = v50;
            v47 -= 24;
            a1 -= 24;
          }
          while (a1 != v49);
          a1 = *(void *)(v3 + 168);
        }
        *(void *)(v3 + 168) = v47;
        *(void *)(v3 + 176) = v40;
        *(void *)(v3 + 184) = v48;
        if (a1) {
          operator delete((void *)a1);
        }
      }
      else
      {
        *(void *)unint64_t v39 = v37;
        *(void *)(v39 + 8) = 0;
        *(unsigned char *)(v39 + 16) = 1;
        uint64_t v40 = (char *)(v39 + 24);
      }
      *(void *)(v3 + 176) = v40;
    }
  }
  v176 = (uint64_t *)(a2 + 144);
  v177 = (uint64_t *)(a2 + 136);
  v174 = (void *)(v3 + 40);
  v171 = (char **)(v3 + 168);
  uint64_t v172 = v3 + 112;
  uint64_t v170 = v3 + 184;
  while (1)
  {
    uint64_t v51 = (uint64_t *)(a2 + 144);
    if (!v33) {
      uint64_t v51 = (uint64_t *)(a2 + 136);
    }
    uint64_t v52 = *v51;
    if (*v51)
    {
      while (1)
      {
        long long v53 = (void *)v52;
        if (*(void **)(v52 + 176) == v10)
        {
          if (*(void *)(a2 + 128))
          {
            if (*(_DWORD *)(v52 + 196)) {
              sub_100413CFC(v3, v52);
            }
            while (*(void **)(a2 + 176) != v10)
            {
              a1 = sub_100413D3C(a1, a2, (uint64_t *)(a2 + 48));
              long long v123 = *(_OWORD *)(a2 + 80);
              long long v124 = *v30;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)(a2 + 64);
              *(_OWORD *)(a2 + 32) = v123;
              *(_OWORD *)a2 = v124;
              if (*(int *)(a2 + 112) <= 0) {
                uint64_t v125 = 56;
              }
              else {
                uint64_t v125 = 48;
              }
              v126 = *(long long **)(*(void *)(a2 + 176) + v125);
              *(void *)(a2 + 176) = v126;
              long long v127 = *v126;
              long long v128 = v126[2];
              *(_OWORD *)(a2 + 64) = v126[1];
              *(_OWORD *)(a2 + 80) = v128;
              *uint64_t v30 = v127;
              uint64_t v130 = *(void *)a2;
              uint64_t v129 = *(void *)(a2 + 8);
              *(void *)(a2 + 96) = *(void *)a2;
              uint64_t v131 = *(void *)(a2 + 56);
              if (v131 == v129)
              {
                double v132 = 1.79769313e308;
                if (*(void *)v30 > v130) {
                  double v132 = -1.79769313e308;
                }
              }
              else
              {
                double v132 = (double)(*(void *)v30 - v130) / (double)(v131 - v129);
              }
              *(double *)(a2 + 104) = v132;
              if (*(_DWORD *)(a2 + 196)) {
                sub_100413CFC(v3, a2);
              }
              if (v131 != v129)
              {
                *(void *)&long long v181 = v131;
                sub_100418268(v172, &v181);
                sub_100412FBC(v3, a2, (uint64_t *)a2, 0);
                sub_1004137B8(v3, a2, (uint64_t *)a2, 1);
              }
            }
            if (v33) {
              sub_100413AF8(v3, a2, v52, (uint64_t *)(a2 + 48));
            }
            else {
              sub_100413AF8(v3, v52, a2, (uint64_t *)(a2 + 48));
            }
          }
          uint64_t v134 = *(void *)(v52 + 136);
          uint64_t v133 = *(void *)(v52 + 144);
          if (*(_OWORD *)(v52 + 136) == 0)
          {
            v136 = (void *)(v3 + 40);
            if (*v174 == v52) {
              void *v174 = v133;
            }
          }
          else
          {
            v135 = (void *)(v134 + 144);
            v136 = (void *)(v3 + 40);
            if (!v134) {
              v135 = (void *)(v3 + 40);
            }
            void *v135 = v133;
            if (v133) {
              *(void *)(v133 + 136) = v134;
            }
          }
          uint64_t v137 = *v177;
          uint64_t v138 = *v176;
          if (*v177 | *v176)
          {
            v139 = (void *)(v137 + 144);
            if (!v137) {
              v139 = v136;
            }
            void *v139 = v138;
            if (v138) {
              *(void *)(v138 + 136) = v137;
            }
          }
          else if (*v136 == a2)
          {
            void *v136 = v138;
          }
          operator delete();
        }
        long long v54 = *(void **)(a2 + 176);
        if (v10 == v54 && (v10[8] & 3) == 0)
        {
          uint64_t v55 = *(void *)(v52 + 96);
        }
        else
        {
          uint64_t v55 = *(void *)(v52 + 96);
          if (v33)
          {
            if (v55 > v34) {
              break;
            }
          }
          else if (v55 < v175)
          {
            break;
          }
          if (v55 == *(void *)v30)
          {
            uint64_t v56 = *(void *)(v52 + 56);
            if (v56 != *(void *)(v52 + 8))
            {
              uint64_t v57 = 7;
              if (*(int *)(a2 + 112) > 0) {
                uint64_t v57 = 6;
              }
              long long v58 = (long long *)v54[v57];
              long long v60 = v58[1];
              long long v59 = v58[2];
              long long v178 = *v58;
              long long v179 = v60;
              long long v180 = v59;
              uint64_t v61 = *(void *)(v52 + 184);
              if (v33)
              {
                if (!*(unsigned char *)(v61 + 12)
                  || *(_DWORD *)(v61 + 8) == *(_DWORD *)(*(void *)(a2 + 184) + 8)
                  || *(void *)(v52 + 128))
                {
                  uint64_t v62 = *(void *)(v52 + 48);
                  if (v56 != *((void *)&v178 + 1) && v62 != *(void *)v52)
                  {
                    uint64_t v63 = *(void *)(v52 + 8);
                    uint64_t v62 = *(void *)v52;
                    if (*((void *)&v178 + 1) != v63) {
                      uint64_t v62 = *(void *)v52
                    }
                          + (uint64_t)nearbyint(*(double *)(v52 + 104) * (double)(*((void *)&v178 + 1) - v63));
                  }
                  if (v62 >= (uint64_t)v178) {
                    break;
                  }
                }
                else
                {
                  uint64_t v86 = *(void *)(v52 + 48);
                  if (v56 != *((void *)&v178 + 1) && v86 != *(void *)v52)
                  {
                    uint64_t v87 = *(void *)(v52 + 8);
                    uint64_t v86 = *(void *)v52;
                    if (*((void *)&v178 + 1) != v87) {
                      uint64_t v86 = *(void *)v52
                    }
                          + (uint64_t)nearbyint(*(double *)(v52 + 104) * (double)(*((void *)&v178 + 1) - v87));
                  }
                  if (v86 > (uint64_t)v178) {
                    break;
                  }
                }
              }
              else if (!*(unsigned char *)(v61 + 12) {
                     || *(_DWORD *)(v61 + 8) == *(_DWORD *)(*(void *)(a2 + 184) + 8)
              }
                     || *(void *)(v52 + 128))
              {
                uint64_t v64 = *(void *)(v52 + 48);
                if (v56 != *((void *)&v178 + 1) && v64 != *(void *)v52)
                {
                  uint64_t v65 = *(void *)(v52 + 8);
                  uint64_t v64 = *(void *)v52;
                  if (*((void *)&v178 + 1) != v65) {
                    uint64_t v64 = *(void *)v52
                  }
                        + (uint64_t)nearbyint(*(double *)(v52 + 104) * (double)(*((void *)&v178 + 1) - v65));
                }
                if (v64 <= (uint64_t)v178) {
                  break;
                }
              }
              else
              {
                uint64_t v88 = *(void *)(v52 + 48);
                if (v56 != *((void *)&v178 + 1) && v88 != *(void *)v52)
                {
                  uint64_t v89 = *(void *)(v52 + 8);
                  uint64_t v88 = *(void *)v52;
                  if (*((void *)&v178 + 1) != v89) {
                    uint64_t v88 = *(void *)v52
                  }
                        + (uint64_t)nearbyint(*(double *)(v52 + 104) * (double)(*((void *)&v178 + 1) - v89));
                }
                if (v88 < (uint64_t)v178) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v66 = *(void *)(a2 + 8);
        *(void *)&long long v178 = v55;
        *((void *)&v178 + 1) = v66;
        long long v179 = xmmword_101178668;
        long long v180 = unk_101178678;
        if (v33)
        {
          a1 = sub_100413130(v3, a2, v52, (uint64_t *)&v178);
          uint64_t v52 = *(void *)(v52 + 144);
          if (v52) {
            *(void *)(v52 + 136) = a2;
          }
          uint64_t v67 = *v177;
          if (*v177) {
            *(void *)(v67 + 144) = v53;
          }
          v53[17] = v67;
          v53[18] = a2;
          *(void *)(a2 + 136) = v53;
          *(void *)(a2 + 144) = v52;
          double v68 = v53;
          unint64_t v69 = (uint64_t *)(a2 + 144);
          if (v53[17]) {
            goto LABEL_122;
          }
        }
        else
        {
          a1 = sub_100413130(v3, v52, a2, (uint64_t *)&v178);
          uint64_t v70 = *(void *)(a2 + 144);
          if (v70) {
            *(void *)(v70 + 136) = v52;
          }
          uint64_t v71 = *(void *)(v52 + 136);
          if (v71) {
            *(void *)(v71 + 144) = a2;
          }
          *(void *)(a2 + 136) = v71;
          *(void *)(a2 + 144) = v52;
          *(void *)(v52 + 136) = a2;
          *(void *)(v52 + 144) = v70;
          double v68 = (void *)a2;
          unint64_t v69 = (uint64_t *)(a2 + 136);
          uint64_t v52 = *(void *)(a2 + 136);
          if (v52) {
            goto LABEL_122;
          }
        }
        void *v174 = v68;
        uint64_t v52 = *v69;
LABEL_122:
        *(void *)(a2 + 96) = v53[12];
        uint64_t v72 = *(void *)(a2 + 128);
        if (!v72) {
          goto LABEL_126;
        }
        uint64_t v73 = *(void *)(v72 + 32);
        if (*(void *)(v72 + 16) != a2) {
          uint64_t v73 = *(void *)(v73 + 48);
        }
        if (!*(unsigned char *)(*(void *)(v73 + 64) + 120))
        {
          unint64_t v75 = *(void *)(v3 + 176);
          unint64_t v74 = *(void *)(v3 + 184);
          if (v75 >= v74)
          {
            unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (void)*v171) >> 3);
            unint64_t v78 = v77 + 1;
            if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_100004E40();
            }
            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (void)*v171) >> 3);
            if (2 * v79 > v78) {
              unint64_t v78 = 2 * v79;
            }
            if (v79 >= 0x555555555555555) {
              unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v80 = v78;
            }
            if (v80) {
              a1 = (uint64_t)sub_100046F5C(v170, v80);
            }
            else {
              a1 = 0;
            }
            unint64_t v81 = a1 + 24 * v77;
            *(void *)unint64_t v81 = v73;
            *(void *)(v81 + 8) = 0;
            *(unsigned char *)(v81 + 16) = 1;
            CGRect v83 = *(char **)(v3 + 168);
            long long v82 = *(char **)(v3 + 176);
            unint64_t v84 = v81;
            if (v82 != v83)
            {
              do
              {
                long long v85 = *(_OWORD *)(v82 - 24);
                *(unsigned char *)(v84 - 8) = *(v82 - 8);
                *(_OWORD *)(v84 - 24) = v85;
                v84 -= 24;
                v82 -= 24;
              }
              while (v82 != v83);
              long long v82 = *v171;
            }
            unint64_t v76 = v81 + 24;
            *(void *)(v3 + 168) = v84;
            *(void *)(v3 + 176) = v81 + 24;
            *(void *)(v3 + 184) = a1 + 24 * v80;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            *(void *)unint64_t v75 = v73;
            *(void *)(v75 + 8) = 0;
            unint64_t v76 = v75 + 24;
            *(unsigned char *)(v75 + 16) = 1;
          }
          *(void *)(v3 + 176) = v76;
          if (!v52) {
            break;
          }
        }
        else
        {
LABEL_126:
          if (!v52) {
            break;
          }
        }
      }
    }
    uint64_t v90 = *(void *)(a2 + 176);
    if (v173 && (*(unsigned char *)(v90 + 64) & 3) != 0)
    {
      if (*(void *)(a2 + 128))
      {
        sub_100413D3C(a1, a2, (uint64_t *)(a2 + 48));
        uint64_t v145 = *(void *)(a2 + 128);
        uint64_t v146 = 24;
        if (*(void *)(v145 + 16) == a2) {
          uint64_t v146 = 16;
        }
        *(void *)(v145 + v146) = 0;
        *(void *)(a2 + 128) = 0;
      }
      uint64_t v147 = *v177;
      uint64_t v148 = *v176;
      if (*v177 | *v176)
      {
        v149 = (void *)(v147 + 144);
        if (!v147) {
          v149 = (void *)(v3 + 40);
        }
        void *v149 = v148;
        if (v148) {
          *(void *)(v148 + 136) = v147;
        }
      }
      else if (*v174 == a2)
      {
        void *v174 = v148;
      }
      operator delete();
    }
    int v91 = *(_DWORD *)(a2 + 112);
    uint64_t v92 = 56;
    if (v91 > 0) {
      uint64_t v92 = 48;
    }
    uint64_t v93 = *(void *)(*(void *)(v90 + v92) + 8);
    uint64_t v94 = *(void *)(a2 + 128);
    if (v93 != *(void *)(a2 + 56)) {
      break;
    }
    if (v94)
    {
      a1 = sub_100413D3C(a1, a2, (uint64_t *)(a2 + 48));
      int v91 = *(_DWORD *)(a2 + 112);
      uint64_t v90 = *(void *)(a2 + 176);
    }
    long long v95 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)a2 = *v30;
    *(_OWORD *)(a2 + 16) = v95;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a2 + 80);
    BOOL v96 = v91 <= 0;
    uint64_t v97 = 56;
    if (!v96) {
      uint64_t v97 = 48;
    }
    long long v98 = *(long long **)(v90 + v97);
    *(void *)(a2 + 176) = v98;
    long long v99 = *v98;
    long long v100 = v98[2];
    *(_OWORD *)(a2 + 64) = v98[1];
    *(_OWORD *)(a2 + 80) = v100;
    *uint64_t v30 = v99;
    uint64_t v102 = *(void *)a2;
    uint64_t v101 = *(void *)(a2 + 8);
    *(void *)(a2 + 96) = *(void *)a2;
    uint64_t v103 = *(void *)(a2 + 56);
    if (v103 == v101)
    {
      double v104 = 1.79769313e308;
      if (*(void *)v30 > v102) {
        double v104 = -1.79769313e308;
      }
    }
    else
    {
      double v104 = (double)(*(void *)v30 - v102) / (double)(v103 - v101);
    }
    *(double *)(a2 + 104) = v104;
    if (*(_DWORD *)(a2 + 196)) {
      sub_100413CFC(v3, a2);
    }
    if (v103 != v101)
    {
      *(void *)&long long v181 = v103;
      sub_100418268(v172, &v181);
      sub_100412FBC(v3, a2, (uint64_t *)a2, 0);
      sub_1004137B8(v3, a2, (uint64_t *)a2, 1);
    }
    if (v173 || !*(unsigned char *)(v3 + 280))
    {
      uint64_t v110 = *(void *)a2;
      uint64_t v111 = *(void *)(a2 + 48);
    }
    else
    {
      int v105 = *(_DWORD *)(a2 + 112);
      uint64_t v106 = *(void *)(a2 + 176);
      uint64_t v107 = 56;
      if (v105 > 0) {
        uint64_t v107 = 48;
      }
      uint64_t v108 = *(void *)(v106 + v107);
      uint64_t v109 = *(void *)(v108 + 8);
      uint64_t v110 = *(void *)a2;
      uint64_t v111 = *(void *)(a2 + 48);
      if (v109 == *(void *)(a2 + 8))
      {
        uint64_t v112 = *(void *)v108;
        if (v110 < v111 != v111 < *(void *)v108)
        {
          long long v113 = *(_OWORD *)(v108 + 32);
          long long v181 = *(_OWORD *)(v108 + 16);
          long long v182 = v113;
          if (v109 == *(void *)(a2 + 56) && v112 >= v111 != v110 < v111)
          {
            do
            {
              uint64_t v111 = v112;
              uint64_t v114 = 56;
              if (v105 > 0) {
                uint64_t v114 = 48;
              }
              uint64_t v106 = *(void *)(v106 + v114);
              *(void *)(a2 + 176) = v106;
              *(void *)(a2 + 48) = v111;
              *(void *)(a2 + 56) = v109;
              long long v115 = v182;
              *(_OWORD *)(a2 + 64) = v181;
              *(_OWORD *)(a2 + 80) = v115;
              if ((*(unsigned char *)(v106 + 64) & 4) != 0) {
                break;
              }
              uint64_t v116 = 56;
              if (v105 > 0) {
                uint64_t v116 = 48;
              }
              uint64_t v117 = *(void *)(v106 + v116);
              uint64_t v112 = *(void *)v117;
              uint64_t v118 = *(void *)(v117 + 8);
              long long v119 = *(_OWORD *)(v117 + 32);
              long long v181 = *(_OWORD *)(v117 + 16);
              long long v182 = v119;
              if (v118 != v109) {
                break;
              }
            }
            while (v112 >= v111 != v110 < v111);
            double v120 = 1.79769313e308;
            if (v111 > v110) {
              double v120 = -1.79769313e308;
            }
            *(double *)(a2 + 104) = v120;
          }
        }
      }
    }
    uint64_t v34 = *(void *)(a2 + 96);
    if (v110 == v111)
    {
      uint64_t v121 = a2;
      do
      {
        uint64_t v121 = *(void *)(v121 + 144);
        BOOL v33 = v121 != 0;
      }
      while (v121 && *(void **)(v121 + 176) != v10);
      uint64_t v175 = *(void *)(a2 + 96);
    }
    else
    {
      BOOL v33 = v34 < v111;
      if (v34 >= v111) {
        uint64_t v122 = v111;
      }
      else {
        uint64_t v122 = *(void *)(a2 + 96);
      }
      uint64_t v175 = v122;
      if (v34 <= v111) {
        uint64_t v34 = v111;
      }
    }
  }
  if (v94)
  {
    uint64_t v140 = sub_100413D3C(a1, a2, (uint64_t *)(a2 + 48));
    uint64_t v141 = v140;
    if (!*(unsigned char *)(*(void *)(v140 + 64) + 120))
    {
      unint64_t v143 = *(void *)(v3 + 176);
      unint64_t v142 = *(void *)(v3 + 184);
      if (v143 >= v142)
      {
        unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - (void)*v171) >> 3);
        unint64_t v151 = v150 + 1;
        if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100004E40();
        }
        unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - (void)*v171) >> 3);
        if (2 * v152 > v151) {
          unint64_t v151 = 2 * v152;
        }
        if (v152 >= 0x555555555555555) {
          unint64_t v153 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v153 = v151;
        }
        if (v153) {
          v154 = (char *)sub_100046F5C(v170, v153);
        }
        else {
          v154 = 0;
        }
        v155 = &v154[24 * v150];
        v156 = &v154[24 * v153];
        *(void *)v155 = v141;
        *((void *)v155 + 1) = 0;
        v155[16] = 1;
        v144 = v155 + 24;
        v158 = *(char **)(v3 + 168);
        v157 = *(char **)(v3 + 176);
        if (v157 != v158)
        {
          do
          {
            long long v159 = *(_OWORD *)(v157 - 24);
            *(v155 - 8) = *(v157 - 8);
            *(_OWORD *)(v155 - 24) = v159;
            v155 -= 24;
            v157 -= 24;
          }
          while (v157 != v158);
          v157 = *v171;
        }
        *(void *)(v3 + 168) = v155;
        *(void *)(v3 + 176) = v144;
        *(void *)(v3 + 184) = v156;
        if (v157) {
          operator delete(v157);
        }
      }
      else
      {
        *(void *)unint64_t v143 = v140;
        *(void *)(v143 + 8) = 0;
        *(unsigned char *)(v143 + 16) = 1;
        v144 = (char *)(v143 + 24);
      }
      *(void *)(v3 + 176) = v144;
    }
  }
  long long v160 = *(_OWORD *)(a2 + 80);
  long long v161 = *v30;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a2 + 32) = v160;
  *(_OWORD *)a2 = v161;
  uint64_t v162 = 56;
  if (*(int *)(a2 + 112) > 0) {
    uint64_t v162 = 48;
  }
  v163 = *(long long **)(*(void *)(a2 + 176) + v162);
  *(void *)(a2 + 176) = v163;
  long long v164 = *v163;
  long long v165 = v163[2];
  *(_OWORD *)(a2 + 64) = v163[1];
  *(_OWORD *)(a2 + 80) = v165;
  *uint64_t v30 = v164;
  uint64_t v167 = *(void *)a2;
  uint64_t v166 = *(void *)(a2 + 8);
  *(void *)(a2 + 96) = *(void *)a2;
  uint64_t v168 = *(void *)(a2 + 56);
  if (v168 == v166)
  {
    double v169 = 1.79769313e308;
    if (*(void *)v30 > v167) {
      double v169 = -1.79769313e308;
    }
  }
  else
  {
    double v169 = (double)(*(void *)v30 - v167) / (double)(v168 - v166);
  }
  *(double *)(a2 + 104) = v169;
  if (*(_DWORD *)(a2 + 196)) {
    sub_100413CFC(v3, a2);
  }
  if (v168 != v166)
  {
    *(void *)&long long v181 = v168;
    sub_100418268(v172, &v181);
    sub_100412FBC(v3, a2, (uint64_t *)a2, 0);
    sub_1004137B8(v3, a2, (uint64_t *)a2, 1);
  }
}

void sub_100415F74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(long long **)(a1 + 176);
  if ((long long *)v2 != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2;
    do
    {
      uint64_t v6 = *(void **)v5;
      uint64_t v7 = *(void *)v5 + 64;
      do
      {
        uint64_t v8 = *(void *)v7;
        uint64_t v9 = *(void **)(*(void *)v7 + 32);
        uint64_t v7 = *(void *)v7 + 8;
      }
      while (!v9);
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v11 = v6[1];
      uint64_t v12 = *(void **)v5;
      if (v10)
      {
        int v13 = *(void **)v5;
        do
        {
          if (v13 == (void *)v9[6])
          {
            uint64_t v14 = (void *)v9[6];
            break;
          }
          uint64_t v14 = v13;
          int v13 = (void *)v13[7];
        }
        while (v13[1] == v11);
        while (v6 != v9)
        {
          uint64_t v15 = v6;
          uint64_t v6 = (void *)v6[6];
          if (v6[1] != v11)
          {
            uint64_t v9 = v15;
            break;
          }
        }
      }
      else
      {
        do
        {
          uint64_t v14 = v12;
          uint64_t v12 = (void *)v12[7];
        }
        while (v12 != v6 && v12[1] == v11);
        do
        {
          uint64_t v9 = v6;
          uint64_t v6 = (void *)v6[6];
        }
        while (v6 != v14 && v6[1] == v11);
      }
      if (*v14 == *v9) {
        goto LABEL_26;
      }
      BOOL v16 = *v14 < *v9;
      if (*v14 >= *v9) {
        long long v17 = v9;
      }
      else {
        long long v17 = v14;
      }
      if (*v14 >= *v9) {
        uint64_t v9 = v14;
      }
      *(void *)uint64_t v5 = v17;
      *(void *)(v5 + 8) = v9;
      *(unsigned char *)(v5 + 16) = v16;
      if (v17[9])
      {
LABEL_26:
        *(void *)(v5 + 8) = 0;
      }
      else
      {
        v17[9] = v5;
        ++v4;
      }
      v5 += 24;
    }
    while ((long long *)v5 != v3);
    if (v4 >= 2)
    {
      sub_100419AD8(v2, v3, (uint64_t)&v29, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v2) >> 3)), 1);
      uint64_t v18 = *(void *)(a1 + 168);
      uint64_t v19 = v18 + 24 * v4;
      while (v18 != v19 - 24)
      {
        uint64_t v20 = v18;
        v18 += 24;
        if (v18 != v19)
        {
          uint64_t v21 = v18;
          do
          {
            uint64_t v22 = *(void **)v21;
            if (**(void **)v21 < **(void **)(v20 + 8)
              && *(unsigned __int8 *)(v21 + 16) != *(unsigned __int8 *)(v20 + 16))
            {
              long long v23 = *(void **)v20;
              if (**(void **)(v21 + 8) > **(void **)v20)
              {
                uint64_t v24 = v23[1];
                if (*(unsigned char *)(v20 + 16))
                {
                  uint64_t v25 = (void *)v23[6];
                  if (v25[1] == v24)
                  {
                    do
                    {
                      uint64_t v22 = *(void **)v21;
                      if (*v25 > **(void **)v21) {
                        goto LABEL_42;
                      }
                      *(void *)uint64_t v20 = v25;
                      uint64_t v25 = (void *)v25[6];
                    }
                    while (v25[1] == v24);
                    uint64_t v22 = *(void **)v21;
                  }
LABEL_42:
                  for (uint64_t i = (void *)v22[7]; i[1] == v24; uint64_t i = (void *)i[7])
                  {
                    if (*i > **(void **)v20) {
                      break;
                    }
                    *(void *)uint64_t v21 = i;
                  }
                  operator new();
                }
                long long v27 = (void *)v23[7];
                if (v27[1] == v24)
                {
                  do
                  {
                    uint64_t v22 = *(void **)v21;
                    if (*v27 > **(void **)v21) {
                      goto LABEL_50;
                    }
                    *(void *)uint64_t v20 = v27;
                    long long v27 = (void *)v27[7];
                  }
                  while (v27[1] == v24);
                  uint64_t v22 = *(void **)v21;
                }
LABEL_50:
                for (j = (void *)v22[6]; j[1] == v24 && *j <= **(void **)v20; j = (void *)j[6])
                  *(void *)uint64_t v21 = j;
                operator new();
              }
            }
            v21 += 24;
          }
          while (v21 != v19);
        }
      }
    }
  }
}

void sub_1004164F0(void *a1, uint64_t a2)
{
  if (sub_100416B20(a1, a2))
  {
    sub_100416CF8(a1, v3);
    a1[19] = a1[18];
  }
}

void sub_100416528(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 112;
    while (1)
    {
      uint64_t v6 = *(void *)(v2 + 48);
      uint64_t v7 = (_OWORD *)(v2 + 48);
      if (*(void *)(v2 + 56) != a2) {
        break;
      }
      *(void *)(v2 + 96) = v6;
      uint64_t v8 = *(void *)(v2 + 176);
      if ((*(unsigned char *)(v8 + 64) & 4) != 0)
      {
        a1 = sub_1004172C4(v4, v2);
        uint64_t v2 = a1;
        if (!a1) {
          return;
        }
      }
      else
      {
        if (*(void *)(v2 + 128))
        {
          a1 = sub_100413D3C(a1, v2, (uint64_t *)(v2 + 48));
          uint64_t v8 = *(void *)(v2 + 176);
        }
        long long v9 = *(_OWORD *)(v2 + 64);
        *(_OWORD *)uint64_t v2 = *v7;
        *(_OWORD *)(v2 + 16) = v9;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(v2 + 80);
        if (*(int *)(v2 + 112) <= 0) {
          uint64_t v10 = 56;
        }
        else {
          uint64_t v10 = 48;
        }
        uint64_t v11 = *(long long **)(v8 + v10);
        *(void *)(v2 + 176) = v11;
        long long v12 = *v11;
        long long v13 = v11[2];
        *(_OWORD *)(v2 + 64) = v11[1];
        *(_OWORD *)(v2 + 80) = v13;
        _OWORD *v7 = v12;
        uint64_t v15 = *(void *)v2;
        uint64_t v14 = *(void *)(v2 + 8);
        *(void *)(v2 + 96) = *(void *)v2;
        uint64_t v16 = *(void *)(v2 + 56);
        if (v16 == v14)
        {
          double v17 = 1.79769313e308;
          if (*(void *)v7 > v15) {
            double v17 = -1.79769313e308;
          }
        }
        else
        {
          double v17 = (double)(*(void *)v7 - v15) / (double)(v16 - v14);
        }
        *(double *)(v2 + 104) = v17;
        if (*(_DWORD *)(v2 + 196)) {
          sub_100413CFC(v4, v2);
        }
        if (v16 == v14
          || (uint64_t v19 = v16,
              sub_100418268(v5, &v19),
              sub_100412FBC(v4, v2, (uint64_t *)v2, 0),
              sub_1004137B8(v4, v2, (uint64_t *)v2, 1),
              *(void *)(v2 + 56) == *(void *)(v2 + 8)))
        {
          *(void *)(v2 + 160) = *(void *)(v4 + 48);
          *(void *)(v4 + 48) = v2;
        }
LABEL_26:
        uint64_t v2 = *(void *)(v2 + 144);
        if (!v2) {
          return;
        }
      }
    }
    if (v6 != *(void *)v2)
    {
      uint64_t v6 = *(void *)v2;
      uint64_t v18 = a2 - *(void *)(v2 + 8);
      if (v18) {
        uint64_t v6 = *(void *)v2 + (uint64_t)nearbyint(*(double *)(v2 + 104) * (double)v18);
      }
    }
    *(void *)(v2 + 96) = v6;
    goto LABEL_26;
  }
}

void sub_10041671C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 192);
  for (uint64_t i = *(void **)(a1 + 200); v1 != i; v1 += 2)
  {
    uint64_t v4 = *v1;
    for (uint64_t j = *(void *)(*v1 + 64); j; uint64_t j = *(void *)(j + 8))
    {
      if (*(void *)(j + 32)) {
        break;
      }
    }
    uint64_t v6 = v1[1];
    for (uint64_t k = *(void *)(v6 + 64); k; uint64_t k = *(void *)(k + 8))
    {
      if (*(void *)(k + 32)) {
        break;
      }
    }
    uint64_t v8 = *(void *)(v4 + 48);
    uint64_t v9 = *(void *)(v6 + 56);
    *(void *)(v4 + 48) = v6;
    *(void *)(v6 + 56) = v4;
    *(void *)(v8 + 56) = v9;
    *(void *)(v9 + 48) = v8;
    if (j == k) {
      sub_1004139BC();
    }
    *(void *)(k + 32) = 0;
    if (*(unsigned char *)(a1 + 33))
    {
      for (uint64_t m = *(void *)(j + 8); m; *(void *)(j + 8) = m)
      {
        if (*(void *)(m + 32)) {
          break;
        }
        uint64_t m = *(void *)(m + 8);
      }
      uint64_t v11 = j;
      do
      {
        uint64_t v11 = *(void *)(v11 + 8);
        if (v11) {
          BOOL v12 = v11 == k;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (!v12);
      if (v11) {
        *(void *)(j + 8) = *(void *)(k + 8);
      }
      *(void *)(k + 8) = j;
      sub_1004169C4(k, j);
    }
    else
    {
      *(void *)(k + 8) = j;
    }
  }
}

void sub_1004169C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a1 + 48);
  if (v2)
  {
    if (!*(void *)(a2 + 48)) {
      operator new();
    }
    uint64_t v5 = *v2;
    if (*v2 != v2[1])
    {
      do
      {
        uint64_t v6 = *(void ***)(a2 + 48);
        uint64_t v7 = v6[1];
        unint64_t v8 = (unint64_t)v6[2];
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = ((char *)v7 - (unsigned char *)*v6) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            sub_100004E40();
          }
          uint64_t v11 = v8 - (void)*v6;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)sub_10002B494((uint64_t)(v6 + 2), v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[8 * v10];
          *(void *)uint64_t v15 = *v5;
          uint64_t v9 = v15 + 8;
          double v17 = (char *)*v6;
          uint64_t v16 = (char *)v6[1];
          if (v16 != *v6)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = (char *)*v6;
          }
          *uint64_t v6 = v15;
          v6[1] = v9;
          v6[2] = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          void *v7 = *v5;
          uint64_t v9 = v7 + 1;
        }
        v6[1] = v9;
        ++v5;
        uint64_t v2 = *(void ***)(a1 + 48);
      }
      while (v5 != v2[1]);
      uint64_t v5 = *v2;
    }
    v2[1] = v5;
  }
}

BOOL sub_100416B20(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a1[5];
  if (v2 && v2[18])
  {
    a1[6] = v2;
    uint64_t v5 = v2;
    do
    {
      uint64_t v7 = v5[17];
      uint64_t v6 = (uint64_t *)v5[18];
      v5[19] = v7;
      v5[20] = (uint64_t)v6;
      v5[21] = (uint64_t)v6;
      if (*((_DWORD *)v5 + 49) == 1)
      {
        uint64_t v8 = *(void *)(v7 + 96);
      }
      else
      {
        uint64_t v8 = v5[6];
        if (v5[7] != a2 && v8 != *v5)
        {
          uint64_t v8 = *v5;
          uint64_t v9 = a2 - v5[1];
          if (v9) {
            uint64_t v8 = *v5 + (uint64_t)nearbyint(*((double *)v5 + 13) * (double)v9);
          }
        }
      }
      v5[12] = v8;
      uint64_t v5 = v6;
    }
    while (v6);
    while (1)
    {
      if (!v2[21]) {
        return a1[19] != a1[18];
      }
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (uint64_t *)v2[21];
        if (!v11) {
          break;
        }
        uint64_t v12 = v2;
        uint64_t v2 = (uint64_t *)v11[21];
        v12[21] = (uint64_t)v2;
        if (v12 != v11 && v11 != v2)
        {
          uint64_t v14 = v11;
          uint64_t v15 = v12;
          do
          {
            if (v14[12] >= v15[12])
            {
              uint64_t v15 = (uint64_t *)v15[20];
              double v17 = v14;
            }
            else
            {
              uint64_t v16 = (uint64_t)v14;
              do
              {
                uint64_t v16 = *(void *)(v16 + 152);
                sub_100416E6C(a1, v16, (uint64_t)v14, a2);
              }
              while ((uint64_t *)v16 != v15);
              double v17 = (uint64_t *)v14[20];
              if (v17) {
                v17[19] = v14[19];
              }
              *(void *)(v14[19] + 160) = v17;
              uint64_t v18 = v15[19];
              v14[19] = v18;
              if (v18) {
                *(void *)(v18 + 160) = v14;
              }
              v14[20] = (uint64_t)v15;
              v15[19] = (uint64_t)v14;
              if (v15 == v12)
              {
                v14[21] = (uint64_t)v2;
                if (v10) {
                  v10[21] = (uint64_t)v14;
                }
                else {
                  a1[6] = v14;
                }
                uint64_t v15 = v12;
                uint64_t v11 = v17;
                goto LABEL_32;
              }
              uint64_t v11 = v17;
            }
            uint64_t v14 = v12;
LABEL_32:
            BOOL v19 = v15 == v11 || v17 == v2;
            uint64_t v12 = v14;
            uint64_t v14 = v17;
          }
          while (!v19);
        }
        uint64_t v10 = v12;
      }
      while (v2);
      uint64_t v2 = (uint64_t *)a1[6];
      if (!v2) {
        return a1[19] != a1[18];
      }
    }
  }
  return 0;
}

void sub_100416CF8(void *a1, __n128 a2)
{
  __n128 v3 = (long long *)a1[18];
  uint64_t v4 = (__n128 *)a1[19];
  unint64_t v5 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 6);
  char v29 = (uint64_t (*)(long long *, long long *))sub_10041191C;
  if (v4 == (__n128 *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_10041AFDC(v3, v4, &v29, v6, 1, a2);
  uint64_t v7 = (long long *)a1[18];
  if (v7 != (long long *)a1[19])
  {
    uint64_t v8 = v7 + 4;
    do
    {
      uint64_t v9 = *((void *)v7 + 6);
      uint64_t v10 = *((void *)v7 + 7);
      uint64_t v11 = *(void *)(v9 + 144);
      if (v11 != v10)
      {
        if (*(void *)(v9 + 136) == v10)
        {
          uint64_t v11 = *((void *)v7 + 7);
        }
        else
        {
          uint64_t v12 = v8;
          do
          {
            unint64_t v13 = v12;
            uint64_t v14 = *((void *)v12 + 6);
            uint64_t v15 = *((void *)v13 + 7);
            if (*(void *)(v14 + 144) == v15) {
              break;
            }
            uint64_t v16 = *(void *)(v14 + 136);
            uint64_t v12 = v13 + 4;
          }
          while (v16 != v15);
          long long v18 = v7[2];
          long long v17 = v7[3];
          long long v20 = *v7;
          long long v19 = v7[1];
          long long v21 = v13[3];
          long long v23 = *v13;
          long long v22 = v13[1];
          v7[2] = v13[2];
          v7[3] = v21;
          long long *v7 = v23;
          v7[1] = v22;
          long long *v13 = v20;
          v13[1] = v19;
          v13[2] = v18;
          v13[3] = v17;
          uint64_t v9 = *((void *)v7 + 6);
          uint64_t v11 = *((void *)v7 + 7);
        }
      }
      sub_100413130((uint64_t)a1, v9, v11, (uint64_t *)v7);
      uint64_t v25 = (void *)*((void *)v7 + 6);
      uint64_t v24 = (void *)*((void *)v7 + 7);
      uint64_t v26 = v24[18];
      if (v26) {
        *(void *)(v26 + 136) = v25;
      }
      uint64_t v27 = v25[17];
      if (v27) {
        *(void *)(v27 + 144) = v24;
      }
      v24[17] = v27;
      v24[18] = v25;
      v25[17] = v24;
      v25[18] = v26;
      if (!v24[17]) {
        a1[5] = v24;
      }
      uint64_t v28 = *(void *)v7;
      v25[12] = *(void *)v7;
      v24[12] = v28;
      sub_100412FBC((uint64_t)a1, (uint64_t)v24, (uint64_t *)v7, 1);
      sub_1004137B8((uint64_t)a1, *((void *)v7 + 6), (uint64_t *)v7, 1);
      v7 += 4;
      v8 += 4;
    }
    while (v7 != (long long *)a1[19]);
  }
}

void sub_100416E6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  double v11 = (double)(v7 - *(void *)a2);
  double v12 = (double)(v8 - v9);
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v16 = *(void *)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  double v17 = (double)(v13 - *(void *)a3);
  double v18 = (double)(v14 - v15);
  long long v51 = xmmword_101178668;
  long long v52 = unk_101178678;
  double v19 = v12 * v17 - v18 * v11;
  if (v19 == 0.0)
  {
    uint64_t v21 = *(void *)(a2 + 96);
    uint64_t v22 = a4;
    long long v51 = xmmword_101178668;
    long long v52 = unk_101178678;
  }
  else
  {
    double v20 = ((double)(v10 - v16) * v18 - (double)(v9 - v15) * v17) / v19;
    if (v20 <= 0.0)
    {
      long long v51 = *(_OWORD *)(a2 + 16);
      long long v52 = *(_OWORD *)(a2 + 32);
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v21 = *(void *)a2;
    }
    else if (v20 >= 1.0)
    {
      long long v51 = *(_OWORD *)(a2 + 64);
      long long v52 = *(_OWORD *)(a2 + 80);
      uint64_t v22 = *(void *)(a2 + 56);
      uint64_t v21 = *(void *)(a2 + 48);
    }
    else
    {
      uint64_t v21 = (uint64_t)((double)v10 + v20 * v11);
      uint64_t v22 = (uint64_t)((double)v9 + v20 * v12);
    }
  }
  if (v22 >= a4 && v22 <= a1[3])
  {
    uint64_t v9 = v22;
    uint64_t v10 = v21;
    goto LABEL_35;
  }
  double v23 = *(double *)(a2 + 104);
  double v24 = fabs(v23);
  double v25 = *(double *)(a3 + 104);
  double v26 = fabs(v25);
  if (v24 > 100.0 && v26 > 100.0)
  {
    if (v24 <= v26)
    {
LABEL_20:
      if (v13 == v16 && v14 == v15)
      {
        uint64_t v28 = (long long *)(a3 + 16);
      }
      else
      {
        double v31 = (v18 * (double)(v22 - v15) + (double)(v21 - v16) * v17) / (v17 * v17 + v18 * v18);
        double v32 = 0.0;
        if (v31 >= 0.0)
        {
          double v32 = (v18 * (double)(v22 - v15) + (double)(v21 - v16) * v17) / (v17 * v17 + v18 * v18);
          if (v31 > 1.0) {
            double v32 = 1.0;
          }
        }
        uint64_t v13 = v16 + (uint64_t)nearbyint(v32 * v17);
        uint64_t v14 = v15 + (uint64_t)nearbyint(v32 * v18);
        uint64_t v28 = &xmmword_101178668;
      }
      long long v51 = *v28;
      long long v52 = v28[1];
      uint64_t v9 = v14;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  if (v24 > 100.0)
  {
LABEL_16:
    if (v7 == v10 && v8 == v9)
    {
      uint64_t v27 = (long long *)(a2 + 16);
    }
    else
    {
      double v29 = (v12 * (double)(v22 - v9) + (double)(v21 - v10) * v11) / (v11 * v11 + v12 * v12);
      double v30 = 0.0;
      if (v29 >= 0.0)
      {
        double v30 = (v12 * (double)(v22 - v9) + (double)(v21 - v10) * v11) / (v11 * v11 + v12 * v12);
        if (v29 > 1.0) {
          double v30 = 1.0;
        }
      }
      uint64_t v7 = v10 + (uint64_t)nearbyint(v30 * v11);
      uint64_t v8 = v9 + (uint64_t)nearbyint(v30 * v12);
      uint64_t v27 = &xmmword_101178668;
    }
    long long v51 = *v27;
    long long v52 = v27[1];
    uint64_t v9 = v8;
    goto LABEL_28;
  }
  if (v26 > 100.0) {
    goto LABEL_20;
  }
  if (v22 >= a4) {
    uint64_t v50 = a1[3];
  }
  else {
    uint64_t v50 = a4;
  }
  if (v24 >= v26)
  {
    if (v14 == v50 || v13 == v16)
    {
      uint64_t v9 = v50;
LABEL_34:
      uint64_t v10 = v13;
      goto LABEL_35;
    }
    if (v50 == v15)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = *(void *)a3;
      goto LABEL_35;
    }
    uint64_t v10 = v16 + (uint64_t)nearbyint(v25 * (double)(v50 - v15));
    goto LABEL_67;
  }
  if (v8 == v50 || v7 == v10)
  {
    uint64_t v9 = v50;
LABEL_28:
    uint64_t v10 = v7;
    goto LABEL_35;
  }
  if (v50 != v9)
  {
    v10 += (uint64_t)nearbyint(v23 * (double)(v50 - v9));
LABEL_67:
    uint64_t v9 = v50;
  }
LABEL_35:
  uint64_t v33 = (uint64_t)(a1 + 20);
  unint64_t v34 = a1[20];
  unint64_t v35 = a1[19];
  if (v35 >= v34)
  {
    uint64_t v37 = a1[18];
    uint64_t v38 = (uint64_t)(v35 - v37) >> 6;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 58) {
      sub_100004E40();
    }
    uint64_t v40 = v34 - v37;
    if (v40 >> 5 > v39) {
      unint64_t v39 = v40 >> 5;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v41 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41) {
      unint64_t v42 = (char *)sub_10015F6D4(v33, v41);
    }
    else {
      unint64_t v42 = 0;
    }
    unint64_t v43 = &v42[64 * v38];
    unint64_t v44 = &v42[64 * v41];
    *(void *)unint64_t v43 = v10;
    *((void *)v43 + 1) = v9;
    *((_OWORD *)v43 + 1) = v51;
    *((_OWORD *)v43 + 2) = v52;
    *((void *)v43 + 6) = a2;
    *((void *)v43 + 7) = a3;
    long long v36 = v43 + 64;
    unint64_t v46 = (char *)a1[18];
    unint64_t v45 = (char *)a1[19];
    if (v45 != v46)
    {
      do
      {
        long long v47 = *((_OWORD *)v45 - 4);
        long long v48 = *((_OWORD *)v45 - 3);
        long long v49 = *((_OWORD *)v45 - 1);
        *((_OWORD *)v43 - 2) = *((_OWORD *)v45 - 2);
        *((_OWORD *)v43 - 1) = v49;
        *((_OWORD *)v43 - 4) = v47;
        *((_OWORD *)v43 - 3) = v48;
        v43 -= 64;
        v45 -= 64;
      }
      while (v45 != v46);
      unint64_t v45 = (char *)a1[18];
    }
    a1[18] = v43;
    a1[19] = v36;
    a1[20] = v44;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *(void *)unint64_t v35 = v10;
    *(void *)(v35 + 8) = v9;
    *(_OWORD *)(v35 + 16) = v51;
    *(_OWORD *)(v35 + 32) = v52;
    *(void *)(v35 + 48) = a2;
    *(void *)(v35 + 56) = a3;
    long long v36 = (char *)(v35 + 64);
  }
  a1[19] = v36;
}

uint64_t sub_1004172C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 144);
  uint64_t v5 = *(void *)(a2 + 176);
  if ((*(unsigned char *)(v5 + 64) & 3) == 0)
  {
    uint64_t v11 = a2;
    do
    {
      uint64_t v11 = *(void *)(v11 + 144);
      if (!v11) {
        return v4;
      }
    }
    while (*(void *)(v11 + 176) != v5);
    if (*(_DWORD *)(a2 + 196)) {
      sub_100413CFC(a1, a2);
    }
    if (*(_DWORD *)(v11 + 196)) {
      sub_100413CFC(a1, v11);
    }
    if (v4 != v11)
    {
      do
      {
        sub_100413130(a1, a2, v4, (uint64_t *)(a2 + 48));
        uint64_t v12 = *(void *)(v4 + 144);
        if (v12) {
          *(void *)(v12 + 136) = a2;
        }
        uint64_t v13 = *(void *)(a2 + 136);
        if (v13) {
          *(void *)(v13 + 144) = v4;
        }
        *(void *)(v4 + 136) = v13;
        *(void *)(v4 + 144) = a2;
        *(void *)(a2 + 136) = v4;
        *(void *)(a2 + 144) = v12;
        if (!*(void *)(v4 + 136)) {
          *(void *)(a1 + 40) = v4;
        }
        uint64_t v4 = v12;
      }
      while (v12 != v11);
    }
    uint64_t v14 = *(void *)(a2 + 128);
    if (*(unsigned char *)(*(void *)(a2 + 184) + 12))
    {
      if (v14) {
        sub_100413AF8(a1, a2, v11, (uint64_t *)(a2 + 48));
      }
      uint64_t v15 = *(void *)(v11 + 136);
      uint64_t v16 = *(void *)(v11 + 144);
      if (*(_OWORD *)(v11 + 136) == 0)
      {
        if (*(void *)(a1 + 40) != v11) {
          goto LABEL_47;
        }
      }
      else if (v15)
      {
        double v17 = (void *)(v15 + 144);
        goto LABEL_45;
      }
      double v17 = (void *)(a1 + 40);
LABEL_45:
      void *v17 = v16;
      if (v16) {
        *(void *)(v16 + 136) = v15;
      }
LABEL_47:
      uint64_t v21 = *(void *)(a2 + 136);
      uint64_t v22 = *(void *)(a2 + 144);
      if (*(_OWORD *)(a2 + 136) == 0)
      {
        if (*(void *)(a1 + 40) != a2) {
          goto LABEL_54;
        }
      }
      else if (v21)
      {
        double v23 = (void *)(v21 + 144);
        goto LABEL_52;
      }
      double v23 = (void *)(a1 + 40);
LABEL_52:
      *double v23 = v22;
      if (v22) {
        *(void *)(v22 + 136) = v21;
      }
LABEL_54:
      operator delete();
    }
    if (v14) {
      sub_100413AF8(a1, a2, v11, (uint64_t *)(a2 + 48));
    }
    uint64_t v18 = *(void *)(a2 + 136);
    uint64_t v19 = *(void *)(a2 + 144);
    if (*(_OWORD *)(a2 + 136) == 0)
    {
      if (*(void *)(a1 + 40) != a2) {
        goto LABEL_59;
      }
    }
    else if (v18)
    {
      double v20 = (void *)(v18 + 144);
      goto LABEL_57;
    }
    double v20 = (void *)(a1 + 40);
LABEL_57:
    *double v20 = v19;
    if (v19) {
      *(void *)(v19 + 136) = v18;
    }
LABEL_59:
    uint64_t v24 = *(void *)(v11 + 136);
    uint64_t v25 = *(void *)(v11 + 144);
    if (*(_OWORD *)(v11 + 136) == 0)
    {
      if (*(void *)(a1 + 40) != v11) {
        goto LABEL_66;
      }
    }
    else if (v24)
    {
      double v26 = (void *)(v24 + 144);
      goto LABEL_64;
    }
    double v26 = (void *)(a1 + 40);
LABEL_64:
    *double v26 = v25;
    if (v25) {
      *(void *)(v25 + 136) = v24;
    }
LABEL_66:
    operator delete();
  }
  if (*(void *)(a2 + 128)) {
    sub_100413D3C(a1, a2, (uint64_t *)(a2 + 48));
  }
  if (*(void *)(a2 + 56) != *(void *)(a2 + 8))
  {
    uint64_t v6 = *(void *)(a2 + 128);
    if (v6)
    {
      uint64_t v7 = 24;
      if (*(void *)(v6 + 16) == a2) {
        uint64_t v7 = 16;
      }
      *(void *)(v6 + v7) = 0;
      *(void *)(a2 + 128) = 0;
    }
    uint64_t v8 = *(void *)(a2 + 136);
    uint64_t v9 = *(void *)(a2 + 144);
    if (*(_OWORD *)(a2 + 136) == 0)
    {
      if (*(void *)(a1 + 40) != a2) {
        goto LABEL_37;
      }
    }
    else if (v8)
    {
      uint64_t v10 = (void *)(v8 + 144);
      goto LABEL_35;
    }
    uint64_t v10 = (void *)(a1 + 40);
LABEL_35:
    void *v10 = v9;
    if (v9) {
      *(void *)(v9 + 136) = v8;
    }
LABEL_37:
    operator delete();
  }
  return v4;
}

uint64_t sub_1004175C0(uint64_t result, int a2, char a3, void *a4)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 48);
    if (v5 == result || (a3 & 1) == 0 && v5 == *(void *)(result + 56)) {
      return 0;
    }
    sub_100417990((uint64_t)a4, 0);
    if (a2)
    {
      uint64_t v9 = *(void *)v4;
      uint64_t v8 = *(void *)(v4 + 8);
      long long v51 = *(_OWORD *)(v4 + 16);
      long long v53 = *(_OWORD *)(v4 + 32);
      uint64_t v10 = (uint64_t **)(v4 + 56);
    }
    else
    {
      uint64_t v4 = *(void *)(v4 + 48);
      uint64_t v9 = *(void *)v4;
      uint64_t v8 = *(void *)(v4 + 8);
      long long v51 = *(_OWORD *)(v4 + 16);
      long long v53 = *(_OWORD *)(v4 + 32);
      uint64_t v10 = (uint64_t **)(v4 + 48);
    }
    uint64_t v11 = *v10;
    uint64_t v12 = a4 + 2;
    unint64_t v13 = a4[2];
    unint64_t v14 = a4[1];
    if (v14 >= v13)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a4) >> 4);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x555555555555555) {
LABEL_75:
      }
        sub_100004E40();
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a4) >> 4);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v19 = 0x555555555555555;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        double v20 = (char *)sub_100134B88((uint64_t)v12, v19);
      }
      else {
        double v20 = 0;
      }
      uint64_t v21 = &v20[48 * v16];
      uint64_t v22 = &v20[48 * v19];
      *(void *)uint64_t v21 = v9;
      *((void *)v21 + 1) = v8;
      *((_OWORD *)v21 + 1) = v51;
      *((_OWORD *)v21 + 2) = v53;
      uint64_t v15 = v21 + 48;
      uint64_t v24 = (char *)*a4;
      double v23 = (char *)a4[1];
      if (v23 != (char *)*a4)
      {
        do
        {
          long long v25 = *((_OWORD *)v23 - 3);
          long long v26 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v21 - 1) = v26;
          *((_OWORD *)v21 - 3) = v25;
          v21 -= 48;
          v23 -= 48;
        }
        while (v23 != v24);
        double v23 = (char *)*a4;
      }
      *a4 = v21;
      a4[1] = v15;
      a4[2] = v22;
      if (v23) {
        operator delete(v23);
      }
      uint64_t v12 = a4 + 2;
    }
    else
    {
      *(void *)unint64_t v14 = v9;
      *(void *)(v14 + 8) = v8;
      *(_OWORD *)(v14 + 16) = v51;
      *(_OWORD *)(v14 + 32) = v53;
      uint64_t v15 = (char *)(v14 + 48);
    }
    for (a4[1] = v15; v11 != (uint64_t *)v4; uint64_t v11 = (uint64_t *)v11[v40])
    {
      uint64_t v27 = *v11;
      uint64_t v28 = v11[1];
      if (*v11 != v9 || v28 != v8)
      {
        long long v52 = *((_OWORD *)v11 + 1);
        long long v54 = *((_OWORD *)v11 + 2);
        if ((unint64_t)v15 >= *v12)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-*a4] >> 4);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0x555555555555555) {
            goto LABEL_75;
          }
          if (0x5555555555555556 * ((uint64_t)(*v12 - *a4) >> 4) > v31) {
            unint64_t v31 = 0x5555555555555556 * ((uint64_t)(*v12 - *a4) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v12 - *a4) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v32 = 0x555555555555555;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            uint64_t v33 = (char *)sub_100134B88((uint64_t)v12, v32);
          }
          else {
            uint64_t v33 = 0;
          }
          unint64_t v34 = &v33[48 * v30];
          *(void *)unint64_t v34 = v27;
          *((void *)v34 + 1) = v28;
          *((_OWORD *)v34 + 1) = v52;
          *((_OWORD *)v34 + 2) = v54;
          long long v36 = (char *)*a4;
          unint64_t v35 = (char *)a4[1];
          uint64_t v37 = v34;
          if (v35 != (char *)*a4)
          {
            do
            {
              long long v38 = *((_OWORD *)v35 - 3);
              long long v39 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v37 - 2) = *((_OWORD *)v35 - 2);
              *((_OWORD *)v37 - 1) = v39;
              *((_OWORD *)v37 - 3) = v38;
              v37 -= 48;
              v35 -= 48;
            }
            while (v35 != v36);
            unint64_t v35 = (char *)*a4;
          }
          uint64_t v15 = v34 + 48;
          *a4 = v37;
          a4[1] = v34 + 48;
          a4[2] = &v33[48 * v32];
          if (v35) {
            operator delete(v35);
          }
          uint64_t v12 = a4 + 2;
        }
        else
        {
          *(void *)uint64_t v15 = v27;
          *((void *)v15 + 1) = v28;
          *((_OWORD *)v15 + 1) = v52;
          *((_OWORD *)v15 + 2) = v54;
          v15 += 48;
        }
        a4[1] = v15;
        uint64_t v8 = v28;
        uint64_t v9 = v27;
      }
      if (a2) {
        uint64_t v40 = 7;
      }
      else {
        uint64_t v40 = 6;
      }
    }
    if (&v15[-*a4] != (char *)144) {
      return 1;
    }
    unint64_t v41 = *(void **)(v4 + 48);
    unint64_t v42 = (uint64_t *)v41[6];
    if (v42 != *(uint64_t **)(v4 + 56)) {
      return 1;
    }
    uint64_t v43 = *v42;
    uint64_t v44 = *v42 - *v41;
    if (v44 < 0) {
      uint64_t v44 = *v41 - *v42;
    }
    if ((unint64_t)v44 <= 1)
    {
      uint64_t v45 = v42[1] - v41[1];
      if (v45 < 0) {
        uint64_t v45 = v41[1] - v42[1];
      }
      if ((unint64_t)v45 < 2) {
        return 0;
      }
    }
    uint64_t v46 = *(void *)v4;
    uint64_t v47 = *(void *)v4 - *v41;
    if (v47 < 0) {
      uint64_t v47 = *v41 - *(void *)v4;
    }
    if ((unint64_t)v47 <= 1)
    {
      uint64_t v48 = *(void *)(v4 + 8) - v41[1];
      if (v48 < 0) {
        uint64_t v48 = -v48;
      }
      if ((unint64_t)v48 < 2) {
        return 0;
      }
    }
    unint64_t v49 = v46 - v43;
    if (v46 - v43 < 0) {
      unint64_t v49 = v43 - v46;
    }
    if (v49 > 1) {
      return 1;
    }
    uint64_t v50 = *(void *)(v4 + 8) - v42[1];
    if (v50 < 0) {
      uint64_t v50 = -v50;
    }
    return (unint64_t)v50 >= 2;
  }
  return result;
}

void sub_100417990(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10041B5EC((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

uint64_t sub_1004179CC(uint64_t a1, int64x2_t *a2)
{
  if (!a2[2].i64[0]) {
    return 0;
  }
  if (a2[5].i64[1] > a2[4].i64[1] && a2[5].i64[0] > a2[4].i64[0]) {
    return 1;
  }
  sub_100413F54(a1, (uint64_t)a2);
  uint64_t result = a2[2].i64[0];
  if (result)
  {
    int v5 = sub_1004175C0(result, *(unsigned __int8 *)(a1 + 281), 0, (int64x2_t *)a2[6].i64);
    uint64_t result = 0;
    if (v5)
    {
      uint64_t v6 = (int64x2_t *)a2[6].i64[0];
      int64x2_t v7 = vdupq_n_s64(0x8000000000000000);
      int64x2_t v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      while (v6 != (int64x2_t *)a2[6].i64[1])
      {
        int64x2_t v9 = *v6;
        v6 += 3;
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, v9), (int8x16_t)v9, (int8x16_t)v8);
        int64x2_t v7 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9, v7), (int8x16_t)v9, (int8x16_t)v7);
      }
      a2[4] = v8;
      a2[5] = v7;
      return 1;
    }
  }
  return result;
}

uint64_t sub_100417A8C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  BOOL v3 = *a3;
  unint64_t v4 = a3[1];
  if (*a3 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *v3;
    if (*v3)
    {
      while (!*(void *)(v7 + 32))
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (!v7) {
          goto LABEL_23;
        }
      }
      if (v7 != a2 && *(void *)(v7 + 56) != a2)
      {
        *(void *)(v7 + 56) = a2;
        if (*(void *)(v7 + 48) && (sub_100417A8C(a1, a2) & 1) != 0) {
          return 1;
        }
        if (sub_1004179CC(a1, (int64x2_t *)v7))
        {
          uint64_t v8 = v7;
          do
          {
            uint64_t v8 = *(void *)(v8 + 8);
            if (v8) {
              BOOL v9 = v8 == a2;
            }
            else {
              BOOL v9 = 1;
            }
          }
          while (!v9);
          if (!v8
            && *(void *)(a2 + 64) >= *(void *)(v7 + 64)
            && *(void *)(a2 + 80) <= *(void *)(v7 + 80)
            && *(void *)(a2 + 72) >= *(void *)(v7 + 72)
            && *(void *)(a2 + 88) <= *(void *)(v7 + 88)
            && sub_1004148C0(*(uint64_t **)(a2 + 32), *(uint64_t **)(v7 + 32)))
          {
            break;
          }
        }
      }
    }
LABEL_23:
    if (++v3 == v4) {
      return 0;
    }
  }
  *(void *)(a2 + 8) = v7;
  return 1;
}

uint64_t sub_100417BAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 40)
    || *(void *)(a2 + 88) <= *(void *)(a2 + 72)
    || *(void *)(a2 + 80) <= *(void *)(a2 + 64))
  {
    return result;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = result;
  while (1)
  {
    uint64_t v7 = *(uint64_t ***)(v5 + 48);
    if (v7)
    {
      if (sub_100417A8C(v6, a2, v7)) {
        goto LABEL_21;
      }
      uint64_t v5 = *(void *)(a2 + 8);
    }
    if (*(void *)(v5 + 32))
    {
      int v8 = sub_1004179CC(v6, (int64x2_t *)v5);
      uint64_t v5 = *(void *)(a2 + 8);
      if (v8)
      {
        if (*(void *)(a2 + 64) >= *(void *)(v5 + 64)
          && *(void *)(a2 + 80) <= *(void *)(v5 + 80)
          && *(void *)(a2 + 72) >= *(void *)(v5 + 72)
          && *(void *)(a2 + 88) <= *(void *)(v5 + 88))
        {
          break;
        }
      }
    }
LABEL_17:
    uint64_t v5 = *(void *)(v5 + 8);
    *(void *)(a2 + 8) = v5;
    if (!v5) {
      goto LABEL_18;
    }
  }
  if (!sub_1004148C0(*(uint64_t **)(a2 + 32), *(uint64_t **)(v5 + 32)))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9)
  {
LABEL_18:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, a2 + 96);
    goto LABEL_19;
  }
  uint64_t result = *(void *)(v9 + 40);
  if (result || (sub_100417BAC(v6), (uint64_t result = *(void *)(*(void *)(a2 + 8) + 40)) != 0))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, a2 + 96);
LABEL_19:
    *(void *)(a2 + 40) = result;
  }
  return result;
}

void sub_100417D18(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_100417E60(a2, 0);
  sub_100417F08(a2, (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 3);
  if (a3)
  {
    sub_100417E60(a3, 0);
    sub_100417F08(a3, (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 3);
  }
  uint64_t v7 = *(void *)(a1 + 224);
  uint64_t v6 = *(void *)(a1 + 232);
  if (v6 != v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      uint64_t v10 = *(void *)(v9 + 32);
      if (v10) {
        break;
      }
LABEL_15:
      if (++v8 >= (unint64_t)((v6 - v7) >> 3)) {
        return;
      }
    }
    __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (a3 && *(unsigned char *)(v9 + 120))
    {
      char v11 = sub_1004175C0(v10, *(unsigned __int8 *)(a1 + 281), 1, &__p);
      uint64_t v12 = a3;
      if ((v11 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_100413F54(a1, v9);
      int v13 = sub_1004175C0(*(void *)(v9 + 32), *(unsigned __int8 *)(a1 + 281), 0, &__p);
      uint64_t v12 = a2;
      if (!v13)
      {
LABEL_12:
        if (__p)
        {
          uint64_t v15 = __p;
          operator delete(__p);
        }
        uint64_t v7 = *(void *)(a1 + 224);
        uint64_t v6 = *(void *)(a1 + 232);
        goto LABEL_15;
      }
    }
    sub_100417FBC(v12, (uint64_t)&__p);
    goto LABEL_12;
  }
}

void sub_100417E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100417E60(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_10041B770(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_100417F08(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100004E40();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100046F5C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_100134BD0(a1, v7);
    return sub_100134D6C((uint64_t)v7);
  }
  return result;
}

void sub_100417FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100417FBC(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    int v13 = (char *)sub_100046F5C(v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_100134BD0(a1, v17);
    uint64_t v8 = (void *)a1[1];
    sub_100134D6C((uint64_t)v17);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1004180EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100418100(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  sub_100417E60(a3, 0);
  if (*(unsigned char *)(a1 + 220)) {
    sub_100417F08(a3, (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 224);
  if (*(void *)(a1 + 232) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(int64x2_t **)(v6 + 8 * v7);
      if (v8)
      {
        uint64_t v9 = v8[2].i64[0];
        if (v9)
        {
          if (v8[7].i8[8])
          {
            __p = 0;
            int v13 = 0;
            uint64_t v14 = 0;
            if (sub_1004175C0(v9, *(unsigned __int8 *)(a1 + 281), 1, &__p))
            {
              unint64_t v10 = a3[1];
              if (v10 >= a3[2])
              {
                uint64_t v11 = sub_100134994(a3, (uint64_t)&__p);
              }
              else
              {
                sub_100134934((uint64_t)a3, (uint64_t)&__p);
                uint64_t v11 = v10 + 24;
              }
              a3[1] = v11;
            }
            if (__p)
            {
              int v13 = __p;
              operator delete(__p);
            }
          }
          else if (sub_1004179CC(a1, v8))
          {
            sub_100417BAC(a1, (uint64_t)v8, a2);
          }
        }
      }
      ++v7;
      uint64_t v6 = *(void *)(a1 + 224);
    }
    while (v7 < (*(void *)(a1 + 232) - v6) >> 3);
  }
}

void sub_10041824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100418268(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_100004E40();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)sub_10002B494(v4, v12);
      uint64_t v8 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
  unint64_t v17 = *(void **)a1;
  uint64_t v18 = (uint64_t)v7 - *(void *)a1;
  if (v18 >= 9)
  {
    unint64_t v19 = (((unint64_t)v18 >> 3) - 2) >> 1;
    double v20 = &v17[v19];
    uint64_t v23 = *(v7 - 1);
    uint64_t v22 = v7 - 1;
    uint64_t v21 = v23;
    uint64_t v24 = *v20;
    if (*v20 < v23)
    {
      do
      {
        *uint64_t v22 = v24;
        uint64_t v22 = v20;
        if (!v19) {
          break;
        }
        unint64_t v19 = (v19 - 1) >> 1;
        double v20 = &v17[v19];
        uint64_t v24 = *v20;
      }
      while (*v20 < v21);
      *uint64_t v22 = v21;
    }
  }
}

void *sub_1004183A8(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    operator delete();
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_10041840C(void *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (void *)a1[6];
  unint64_t v5 = a1;
  if (v4 != a1)
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1;
    do
    {
      unint64_t v7 = v4;
      uint64_t v8 = *v4;
      if (v6 != *v4 || v6 != *(void *)v5[7])
      {
        uint64_t v9 = v5[1];
        if (v9 != v7[1] || v9 != *(void *)(v5[7] + 8)) {
          break;
        }
      }
      uint64_t v4 = (void *)v7[6];
      uint64_t v6 = v8;
      unint64_t v5 = v7;
    }
    while (v4 != a1);
  }
  unint64_t v10 = a2 + 2;
  uint64_t v11 = sub_100134B88((uint64_t)(a2 + 2), 1uLL);
  unint64_t v12 = *a2;
  int v13 = a2[1];
  uint64_t v15 = (char *)&v11[3 * v14];
  long long v16 = *((_OWORD *)v5 + 2);
  long long v17 = *(_OWORD *)v5;
  v11[1] = *((_OWORD *)v5 + 1);
  v11[2] = v16;
  _OWORD *v11 = v17;
  uint64_t v18 = (char *)(v11 + 3);
  if (v13 != v12)
  {
    unint64_t v19 = v11;
    do
    {
      long long v20 = *((_OWORD *)v13 - 3);
      long long v21 = *((_OWORD *)v13 - 1);
      uint64_t v11 = v19 - 3;
      *(v19 - 2) = *((_OWORD *)v13 - 2);
      *(v19 - 1) = v21;
      *(v19 - 3) = v20;
      v13 -= 48;
      v19 -= 3;
    }
    while (v13 != v12);
  }
  *a2 = (char *)v11;
  a2[1] = v18;
  a2[2] = v15;
  if (v12) {
    operator delete(v12);
  }
  a2[1] = v18;
  uint64_t v22 = (void *)v5[6];
  if (v22 != a1)
  {
    do
    {
      uint64_t v23 = (void *)v22[6];
      if (*v22 == *v23 && *v22 == *v5 || (uint64_t v24 = v22[1], v24 == v23[1]) && v24 == v5[1])
      {
        uint64_t v22 = v5;
      }
      else
      {
        if ((unint64_t)v18 >= *v10)
        {
          uint64_t v27 = *a2;
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a2) >> 4);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x555555555555555) {
            sub_100004E40();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - (void)v27) >> 4) > v29) {
            unint64_t v29 = 0x5555555555555556 * ((uint64_t)(*v10 - (void)v27) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - (void)v27) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v30 = 0x555555555555555;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)sub_100134B88((uint64_t)(a2 + 2), v30);
            uint64_t v27 = *a2;
            uint64_t v18 = a2[1];
          }
          else
          {
            unint64_t v31 = 0;
          }
          unint64_t v32 = &v31[48 * v28];
          long long v33 = *(_OWORD *)v22;
          long long v34 = *((_OWORD *)v22 + 2);
          *((_OWORD *)v32 + 1) = *((_OWORD *)v22 + 1);
          *((_OWORD *)v32 + 2) = v34;
          *(_OWORD *)unint64_t v32 = v33;
          if (v18 == v27)
          {
            long long v38 = &v31[48 * v28];
          }
          else
          {
            unint64_t v35 = &v31[48 * v28];
            do
            {
              long long v36 = *((_OWORD *)v18 - 3);
              long long v37 = *((_OWORD *)v18 - 1);
              long long v38 = v35 - 48;
              *((_OWORD *)v35 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v35 - 1) = v37;
              *((_OWORD *)v35 - 3) = v36;
              v18 -= 48;
              v35 -= 48;
            }
            while (v18 != v27);
          }
          uint64_t v18 = v32 + 48;
          *a2 = v38;
          a2[1] = v32 + 48;
          a2[2] = &v31[48 * v30];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          long long v25 = *(_OWORD *)v22;
          long long v26 = *((_OWORD *)v22 + 2);
          *((_OWORD *)v18 + 1) = *((_OWORD *)v22 + 1);
          *((_OWORD *)v18 + 2) = v26;
          *(_OWORD *)uint64_t v18 = v25;
          v18 += 48;
        }
        a2[1] = v18;
        uint64_t v23 = (void *)v22[6];
      }
      unint64_t v5 = v22;
      uint64_t v22 = v23;
    }
    while (v23 != a1);
  }
}

void sub_1004186B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1004186D4(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  double v4 = (double)(v3 - a3[1]);
  uint64_t v5 = *a3 - *a2;
  double v6 = (double)v5 * (double)a1[1] + v4 * (double)*a1 - ((double)v3 * (double)v5 + v4 * (double)*a2);
  return v6 * v6 / ((double)v5 * (double)v5 + v4 * v4);
}

void sub_100418728(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10041877C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10041877C(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1004187E0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100418858((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100418858(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1004188F0((uint64_t)v13);
  return v11;
}

uint64_t sub_1004188F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100418928(a1);
  }
  return a1;
}

uint64_t sub_100418928(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      operator delete();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_100418980(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1004189B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_100418A1C(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  while (1)
  {
    uint64_t result = operator new(8 * v1, &std::nothrow);
    if (result) {
      break;
    }
    BOOL v3 = v1 > 1;
    v1 >>= 1;
    if (!v3) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100418A80(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      uint64_t v8 = (void **)*result;
      uint64_t v9 = *(void **)*result;
      uint64_t v10 = v9[1];
      uint64_t v11 = *(a2 - 1);
      uint64_t v12 = *(void *)(*(void *)v11 + 8);
      if (v10 == v12)
      {
        if (*v9 <= **(void **)v11) {
          return result;
        }
      }
      else if (v10 >= v12)
      {
        return result;
      }
      *uint64_t result = v11;
      *(a2 - 1) = (uint64_t)v8;
      return result;
    }
    if ((uint64_t)a4 <= 0)
    {
      return sub_100418C84(result, a2);
    }
    else
    {
      uint64_t v17 = a4 >> 1;
      uint64_t v18 = &result[a4 >> 1];
      if ((uint64_t)a4 <= a6)
      {
        sub_100418DCC((void **)result, (void **)&result[a4 >> 1], a3, a4 >> 1, a5);
        sub_100418DCC((void **)&v7[a4 >> 1], (void **)a2, a3, a4 - v17, &a5[v17]);
        unint64_t v20 = a4;
        uint64_t result = (uint64_t *)sub_100418F54((void **)a5, (void **)&a5[v17], (void **)&a5[v17], (void **)&a5[a4], v7);
        if (a5) {
          return (uint64_t *)sub_10041954C(&v20, (uint64_t)a5);
        }
      }
      else
      {
        sub_100418A80(result, &result[a4 >> 1], a3, a4 >> 1, a5, a6);
        uint64_t v19 = a4 - v17;
        sub_100418A80(v18, a2, a3, v19, a5, a6);
        return (uint64_t *)sub_1004190BC((unint64_t *)v7, v18, a2, a3, v17, v19, a5, a6);
      }
    }
  }
  return result;
}

void sub_100418C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_10041954C(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100418C84(uint64_t *result, uint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result;
  BOOL v3 = result + 1;
  if (result + 1 == a2) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result;
  do
  {
    uint64_t v6 = *v5;
    uint64_t v5 = v3;
    uint64_t v7 = *(void *)(*(void *)v6 + 8);
    uint64_t v8 = (void *)*v3;
    uint64_t v9 = *(void **)*v3;
    uint64_t v10 = v9[1];
    if (v7 == v10)
    {
      if (**(void **)v6 <= *v9) {
        goto LABEL_21;
      }
    }
    else if (v7 >= v10)
    {
      goto LABEL_21;
    }
    uint64_t v11 = 0;
    *BOOL v3 = 0;
    for (uint64_t i = v4; ; i -= 8)
    {
      int v13 = (uint64_t *)((char *)v2 + i);
      uint64_t *v13 = 0;
      v13[1] = v6;
      if (v11) {
        operator delete();
      }
      if (!i)
      {
        long long v16 = v2;
        goto LABEL_19;
      }
      uint64_t v6 = *(uint64_t *)((char *)v2 + i - 8);
      uint64_t v14 = *(void *)(*(void *)v6 + 8);
      uint64_t v15 = *(void *)(*v8 + 8);
      if (v14 != v15) {
        break;
      }
      if (**(void **)v6 <= *(void *)*v8) {
        goto LABEL_18;
      }
LABEL_16:
      uint64_t v11 = *v13;
    }
    if (v14 < v15) {
      goto LABEL_16;
    }
LABEL_18:
    long long v16 = (uint64_t *)((char *)v2 + i);
LABEL_19:
    uint64_t result = (uint64_t *)*v16;
    *long long v16 = (uint64_t)v8;
    if (result) {
      operator delete();
    }
LABEL_21:
    ++v3;
    v4 += 8;
  }
  while (v5 + 1 != a2);
  return result;
}

void **sub_100418DCC(void **result, void **a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v8 = result;
  if (a4 == 2)
  {
    uint64_t v10 = (void **)*result;
    uint64_t v11 = (void *)**result;
    uint64_t v12 = v11[1];
    uint64_t v13 = (uint64_t)*(a2 - 1);
    uint64_t v14 = *(void *)(*(void *)v13 + 8);
    if (v12 == v14)
    {
      if (*v11 <= **(void **)v13)
      {
LABEL_7:
        *uint64_t result = 0;
        *a5 = (uint64_t)v10;
        uint64_t v15 = (void **)*(a2 - 1);
        *(a2 - 1) = 0;
LABEL_14:
        a5[1] = (uint64_t)v15;
        return result;
      }
    }
    else if (v12 >= v14)
    {
      goto LABEL_7;
    }
    *(a2 - 1) = 0;
    *a5 = v13;
    uint64_t v15 = (void **)*result;
    *uint64_t result = 0;
    goto LABEL_14;
  }
  if (a4 == 1)
  {
    uint64_t v9 = (void **)*result;
    *uint64_t result = 0;
    *a5 = (uint64_t)v9;
  }
  else if ((uint64_t)a4 > 8)
  {
    sub_100418A80(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
    sub_100418A80(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
    return sub_1004194A8(v8, &v8[a4 >> 1], &v8[a4 >> 1], a2, a5);
  }
  else
  {
    return (void **)sub_100419334(result, a2, a5);
  }
  return result;
}

void **sub_100418F54(void **result, void **a2, void **a3, void **a4, void *a5)
{
  if (result == a2)
  {
LABEL_18:
    while (a3 != a4)
    {
      uint64_t v14 = (void **)*a3;
      *a3 = 0;
      uint64_t result = (void **)*a5;
      *a5 = v14;
      if (result) {
        operator delete();
      }
      ++a3;
      ++a5;
    }
    return result;
  }
  uint64_t v7 = result;
  while (a3 != a4)
  {
    uint64_t v8 = (void **)*v7;
    uint64_t v9 = (void *)**v7;
    uint64_t v10 = v9[1];
    uint64_t v11 = (void **)*a3;
    uint64_t v12 = (void *)**a3;
    uint64_t v13 = v12[1];
    if (v10 == v13)
    {
      if (*v9 > *v12) {
        goto LABEL_10;
      }
    }
    else if (v10 < v13)
    {
LABEL_10:
      *a3 = 0;
      uint64_t result = (void **)*a5;
      *a5 = v11;
      if (result) {
        operator delete();
      }
      ++a3;
      goto LABEL_13;
    }
    uint64_t *v7 = 0;
    uint64_t result = (void **)*a5;
    *a5 = v8;
    if (result) {
      operator delete();
    }
    ++v7;
LABEL_13:
    ++a5;
    if (v7 == a2) {
      goto LABEL_18;
    }
  }
  if (v7 != a2)
  {
    uint64_t v15 = 0;
    do
    {
      long long v16 = v7[v15];
      v7[v15] = 0;
      uint64_t result = (void **)a5[v15];
      a5[v15] = v16;
      if (result) {
        operator delete();
      }
      ++v15;
    }
    while (&v7[v15] != a2);
  }
  return result;
}

unint64_t *sub_1004190BC(unint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  uint64_t v13 = (uint64_t *)result;
  do
  {
    if (v9 <= a8 || a5 <= a8) {
      return sub_1004195B4(v13, a2, a3, a4, a5, v9, a7);
    }
    if (!a5) {
      return result;
    }
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    long long v16 = *(void **)*a2;
    uint64_t v17 = v16[1];
    while (1)
    {
      uint64_t v18 = v13[v15];
      uint64_t v19 = *(void *)(*(void *)v18 + 8);
      if (v19 != v17) {
        break;
      }
      if (**(void **)v18 > *v16) {
        goto LABEL_13;
      }
LABEL_11:
      ++v15;
      v14 -= 8;
      if (a5 == v15) {
        return result;
      }
    }
    if (v19 >= v17) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v20 = a5 - v15;
    uint64_t result = (unint64_t *)&v13[v14 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v39 = a8;
    uint64_t v40 = a4;
    long long v37 = &v13[v14 / 0xFFFFFFFFFFFFFFF8];
    long long v38 = a3;
    if (a5 - v15 < v9)
    {
      if (v9 >= 0) {
        uint64_t v21 = v9;
      }
      else {
        uint64_t v21 = v9 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[v21 >> 1];
      uint64_t v24 = (uint64_t *)sub_1004196E0((void **)result, (void **)a2, (void **)v23);
      uint64_t v25 = (uint64_t)((char *)v24 - (char *)v13 + v14) >> 3;
      goto LABEL_23;
    }
    if (a5 - 1 == v15)
    {
      v13[v15] = *a2;
      *a2 = v18;
      return result;
    }
    if (v20 >= 0) {
      uint64_t v26 = a5 - v15;
    }
    else {
      uint64_t v26 = v20 + 1;
    }
    uint64_t v27 = v26 >> 1;
    uint64_t v24 = &v13[(v26 >> 1) + v14 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v28 = (uint64_t *)sub_1004199EC((void **)a2, (void **)a3, (void **)v24);
    uint64_t v25 = v27;
    uint64_t v23 = v28;
    uint64_t v22 = v28 - a2;
LABEL_23:
    if (v24 == a2)
    {
      uint64_t v13 = v23;
    }
    else if (v23 == a2)
    {
      uint64_t v13 = v24;
    }
    else
    {
      uint64_t v29 = v25;
      unint64_t v30 = sub_100419A50(v24, a2, v23);
      uint64_t v25 = v29;
      uint64_t v13 = v30;
    }
    uint64_t v31 = a5 - v25 - v15;
    uint64_t v32 = v9 - v22;
    if (v25 + v22 >= v9 + a5 - (v25 + v22) - v15)
    {
      unint64_t v35 = v13;
      uint64_t v36 = v25;
      uint64_t result = (unint64_t *)sub_1004190BC(v13, v23, v38, v40, v31, v32, a7, v39);
      uint64_t v13 = v37;
      a2 = v24;
      a4 = v40;
      uint64_t v32 = v22;
      a8 = v39;
      uint64_t v31 = v36;
      a3 = v35;
    }
    else
    {
      long long v33 = v24;
      a4 = v40;
      uint64_t v34 = v22;
      a8 = v39;
      uint64_t result = (unint64_t *)sub_1004190BC(v37, v33, v13, v40, v25, v34, a7, v39);
      a2 = v23;
      a3 = v38;
    }
    a5 = v31;
    uint64_t v9 = v32;
  }
  while (v32);
  return result;
}

void *sub_100419334(void *result, void **a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = *result;
    *uint64_t result = 0;
    uint64_t v4 = (void **)(result + 1);
    *a3 = v3;
    if (result + 1 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a3;
      do
      {
        uint64_t v7 = v6;
        uint64_t v9 = *v6++;
        uint64_t v8 = v9;
        uint64_t v10 = *(void **)v9;
        uint64_t v11 = *(void *)(*(void *)v9 + 8);
        uint64_t v12 = (void **)*v4;
        uint64_t v13 = (void *)**v4;
        uint64_t v14 = v13[1];
        if (v11 == v14)
        {
          if (*v10 > *v13) {
            goto LABEL_8;
          }
        }
        else if (v11 < v14)
        {
LABEL_8:
          uint64_t *v7 = 0;
          v7[1] = v8;
          uint64_t v15 = a3;
          if (v7 != a3)
          {
            uint64_t v16 = v5;
            do
            {
              uint64_t v17 = (uint64_t *)((char *)a3 + v16);
              uint64_t v18 = *(uint64_t *)((char *)a3 + v16 - 8);
              uint64_t v19 = *(void *)(*(void *)v18 + 8);
              uint64_t v20 = (void *)**v4;
              uint64_t v21 = v20[1];
              if (v19 == v21)
              {
                if (**(void **)v18 <= *v20)
                {
                  uint64_t v15 = v7;
                  goto LABEL_19;
                }
              }
              else if (v19 >= v21)
              {
                uint64_t v15 = (uint64_t *)((char *)a3 + v16);
                goto LABEL_19;
              }
              uint64_t v22 = *v17;
              *(v17 - 1) = 0;
              uint64_t *v17 = v18;
              if (v22) {
                operator delete();
              }
              --v7;
              v16 -= 8;
            }
            while (v16);
            uint64_t v15 = a3;
          }
LABEL_19:
          uint64_t v23 = (void **)*v4;
          void *v4 = 0;
          uint64_t result = (void *)*v15;
          *uint64_t v15 = (uint64_t)v23;
          if (result) {
            operator delete();
          }
          goto LABEL_21;
        }
        void *v4 = 0;
        *uint64_t v6 = (uint64_t)v12;
LABEL_21:
        ++v4;
        v5 += 8;
      }
      while (v4 != a2);
    }
  }
  return result;
}

void **sub_1004194A8(void **result, void **a2, void **a3, void **a4, void *a5)
{
  while (1)
  {
    if (result == a2)
    {
      while (a3 != a4)
      {
        uint64_t v11 = (void **)*a3;
        *a3++ = 0;
        *a5++ = v11;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v5 = (void **)*result;
    uint64_t v6 = (void *)**result;
    uint64_t v7 = v6[1];
    uint64_t v8 = (void **)*a3;
    uint64_t v9 = (void *)**a3;
    uint64_t v10 = v9[1];
    if (v7 == v10)
    {
      if (*v6 <= *v9) {
        goto LABEL_5;
      }
    }
    else if (v7 >= v10)
    {
LABEL_5:
      *result++ = 0;
      *a5 = v5;
      goto LABEL_8;
    }
    *a3++ = 0;
    *a5 = v8;
LABEL_8:
    ++a5;
  }
  if (result != a2)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = result[v12];
      result[v12] = 0;
      a5[v12++] = v13;
    }
    while (&result[v12] != a2);
  }
  return result;
}

unint64_t *sub_10041954C(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if (*result)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t result = *(unint64_t **)(a2 + 8 * v3);
      *(void *)(a2 + 8 * v3) = 0;
      if (result) {
        operator delete();
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

unint64_t *sub_1004195B4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
      uint64_t v16 = a1;
      do
      {
        uint64_t v17 = *v16;
        *v16++ = 0;
        *v15++ = v17;
        ++v14;
      }
      while (v16 != a2);
    }
    unint64_t v19 = v14;
    uint64_t result = (unint64_t *)sub_100419744(a7, v15, (void **)a2, (void **)a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      unint64_t v10 = 0;
      uint64_t v11 = a7;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = a7;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *v12;
        *v12++ = 0;
        *v11++ = v13;
        ++v10;
      }
      while (v12 != a3);
    }
    unint64_t v19 = v10;
    uint64_t result = (unint64_t *)sub_10041984C((uint64_t)v11, (uint64_t)v11, (uint64_t)a7, (uint64_t)a7, (uint64_t)a2, a2, (uint64_t)a1, a1, (uint64_t)a3, (uint64_t)a3);
  }
  if (a7) {
    return sub_10041954C(&v19, (uint64_t)a7);
  }
  return result;
}

void sub_1004196C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10041954C((unint64_t *)(v2 - 24), v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1004196E0(void **result, void **a2, void **a3)
{
  if (a2 != result)
  {
    unint64_t v3 = a2 - result;
    uint64_t v4 = (void *)**a3;
    uint64_t v5 = v4[1];
    while (1)
    {
      unint64_t v6 = v3 >> 1;
      uint64_t v7 = &result[v3 >> 1];
      uint64_t v8 = (void *)**v7;
      uint64_t v9 = v8[1];
      if (v9 == v5) {
        break;
      }
      if (v9 >= v5) {
        goto LABEL_7;
      }
LABEL_8:
      unint64_t v3 = v6;
      if (!v6) {
        return result;
      }
    }
    if (*v8 > *v4) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t result = v7 + 1;
    unint64_t v6 = v3 + ~v6;
    goto LABEL_8;
  }
  return result;
}

uint64_t *sub_100419744(uint64_t *result, uint64_t *a2, void **a3, void **a4, uint64_t *a5)
{
  if (result != a2)
  {
    uint64_t v17 = v5;
    uint64_t v18 = v6;
    uint64_t v9 = result;
    do
    {
      if (a3 == a4) {
        return sub_100419970((uint64_t)&v16, v9, a2, a5);
      }
      uint64_t v10 = *v9;
      uint64_t v11 = *(void **)*v9;
      uint64_t v12 = v11[1];
      uint64_t v13 = (void **)*a3;
      unint64_t v14 = (void *)**a3;
      uint64_t v15 = v14[1];
      if (v12 == v15)
      {
        if (*v11 > *v14) {
          goto LABEL_10;
        }
      }
      else if (v12 < v15)
      {
LABEL_10:
        *a3 = 0;
        uint64_t result = (uint64_t *)*a5;
        *a5 = (uint64_t)v13;
        if (result) {
          operator delete();
        }
        ++a3;
        goto LABEL_13;
      }
      uint64_t *v9 = 0;
      uint64_t result = (uint64_t *)*a5;
      *a5 = v10;
      if (result) {
        operator delete();
      }
      ++v9;
LABEL_13:
      ++a5;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t sub_10041984C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  if (a2 == a4) {
    return result;
  }
  uint64_t v10 = a2;
  uint64_t v11 = (uint64_t *)(a10 - 8);
  while (a6 != a8)
  {
    uint64_t v13 = a6 - 1;
    uint64_t v12 = *(a6 - 1);
    uint64_t v14 = *(void *)(v10 - 8);
    uint64_t v15 = *(void *)(*(void *)v12 + 8);
    uint64_t v16 = *(void *)(*(void *)v14 + 8);
    if (v15 == v16)
    {
      if (**(void **)v12 > **(void **)v14) {
        goto LABEL_11;
      }
    }
    else if (v15 < v16)
    {
LABEL_11:
      void *v13 = 0;
      uint64_t result = *v11;
      uint64_t *v11 = v12;
      if (result) {
LABEL_7:
      }
        operator delete();
      goto LABEL_8;
    }
    *(void *)(v10 - 8) = 0;
    uint64_t result = *v11;
    uint64_t *v11 = v14;
    uint64_t v13 = a6;
    v10 -= 8;
    if (result) {
      goto LABEL_7;
    }
LABEL_8:
    --v11;
    a6 = v13;
    if (v10 == a4) {
      return result;
    }
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = *(void *)(v10 + v18 * 8 - 8);
    *(void *)(v10 + v18 * 8 - 8) = 0;
    uint64_t result = v11[v18];
    v11[v18] = v19;
    if (result) {
      operator delete();
    }
    --v18;
  }
  while (v10 + v18 * 8 != a4);
  return result;
}

uint64_t *sub_100419970(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      uint64_t v7 = *a4;
      *a4 = v6;
      if (v7) {
        operator delete();
      }
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void **sub_1004199EC(void **result, void **a2, void **a3)
{
  if (a2 != result)
  {
    unint64_t v3 = a2 - result;
    uint64_t v4 = (void *)**a3;
    uint64_t v5 = v4[1];
    while (1)
    {
      unint64_t v6 = v3 >> 1;
      uint64_t v7 = &result[v3 >> 1];
      uint64_t v8 = (void *)**v7;
      uint64_t v9 = v8[1];
      if (v5 == v9) {
        break;
      }
      if (v5 < v9) {
        goto LABEL_7;
      }
LABEL_8:
      unint64_t v3 = v6;
      if (!v6) {
        return result;
      }
    }
    if (*v4 <= *v8) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t result = v7 + 1;
    unint64_t v6 = v3 + ~v6;
    goto LABEL_8;
  }
  return result;
}

uint64_t *sub_100419A50(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  uint64_t result = a1 + 1;
  for (uint64_t i = a2; ; *result++ = *i)
  {
    *i++ = v3;
    if (i == a3) {
      break;
    }
    if (result == a2) {
      a2 = i;
    }
    uint64_t v3 = *result;
  }
  if (result != a2)
  {
    unint64_t v6 = result;
    uint64_t v7 = a2;
    while (1)
    {
      uint64_t v8 = v6;
      while (1)
      {
        uint64_t v9 = *v6;
        *v8++ = *v7;
        *v7++ = v9;
        if (v7 != a3) {
          break;
        }
        unint64_t v6 = v8;
        uint64_t v7 = a2;
        if (v8 == a2) {
          return result;
        }
      }
      if (v8 == a2) {
        a2 = v7;
      }
      ++v6;
    }
  }
  return result;
}

void sub_100419AD8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_100419F38(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = v2;
        uint64_t v6 = *(void *)(v5 + 32);
        if (v6) {
          BOOL v7 = *(void *)(v5 + 8) == 0;
        }
        else {
          BOOL v7 = 1;
        }
        if (v7)
        {
          if (v6)
          {
            uint64_t v8 = *(void **)v4;
LABEL_12:
            char v9 = *(unsigned char *)(v5 + 40);
            *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
            *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
            uint64_t v10 = result;
            if (v5 != result)
            {
              uint64_t v11 = v3;
              while (1)
              {
                uint64_t v12 = result + v11;
                uint64_t v13 = (void **)(result + v11 - 24);
                if (v6)
                {
                  if (*(void *)(v12 - 16) && **v13 <= *v8) {
                    break;
                  }
                }
                *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
                *(unsigned char *)(v12 + 16) = *(unsigned char *)(result + v11 - 8);
                v11 -= 24;
                if (!v11)
                {
                  uint64_t v10 = result;
                  goto LABEL_20;
                }
              }
              uint64_t v10 = result + v11;
            }
LABEL_20:
            *(void *)uint64_t v10 = v8;
            *(void *)(v10 + 8) = v6;
            *(unsigned char *)(v10 + 16) = v9;
          }
        }
        else
        {
          uint64_t v8 = *(void **)v4;
          if (**(void **)v5 > **(void **)v4) {
            goto LABEL_12;
          }
        }
        uint64_t v2 = v4 + 24;
        v3 += 24;
      }
      while (v4 + 24 != a2);
    }
  }
  return result;
}

void **sub_10041A020(void **result, void **a2)
{
  if (result != a2)
  {
    while (1)
    {
      while (1)
      {
        if (result + 3 == a2) {
          return result;
        }
        uint64_t v2 = result;
        result += 3;
        uint64_t v3 = v2[4];
        if (!v3 || v2[1] == 0) {
          break;
        }
        uint64_t v5 = *result;
        if (**v2 > **result) {
          goto LABEL_11;
        }
      }
      if (v3)
      {
        uint64_t v5 = *result;
LABEL_11:
        char v6 = *((unsigned char *)v2 + 40);
        do
        {
          do
          {
            BOOL v7 = v2;
            *(_OWORD *)(v2 + 3) = *(_OWORD *)v2;
            *((unsigned char *)v2 + 40) = *((unsigned char *)v2 + 16);
            v2 -= 3;
          }
          while (!v3);
        }
        while (!*(v7 - 2) || **(v7 - 3) > *v5);
        uint64_t *v7 = v5;
        v7[1] = v3;
        *((unsigned char *)v7 + 16) = v6;
      }
    }
  }
  return result;
}

uint64_t sub_10041A0C0(long long *a1, uint64_t **a2, long long *a3)
{
  uint64_t v3 = a2[1];
  if (v3) {
    BOOL v4 = *((void *)a1 + 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (v3) {
      goto LABEL_10;
    }
    if (*((void *)a3 + 1))
    {
LABEL_25:
      long long v16 = *(_OWORD *)a2;
      unint64_t v17 = a2[2];
      char v18 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *a3;
      *((unsigned char *)a2 + 16) = v18;
      *((unsigned char *)a3 + 16) = (_BYTE)v17;
      *a3 = v16;
      uint64_t v19 = a2[1];
      if (v19 && *((void *)a1 + 1))
      {
        if (**(void **)a1 <= **a2) {
          return 1;
        }
      }
      else if (!v19)
      {
        return 1;
      }
      long long v23 = *a1;
      uint64_t v24 = *((void *)a1 + 2);
      char v25 = *((unsigned char *)a2 + 16);
      *a1 = *(_OWORD *)a2;
      *((unsigned char *)a1 + 16) = v25;
      *((unsigned char *)a2 + 16) = v24;
      *(_OWORD *)a2 = v23;
      return 2;
    }
    return 0;
  }
  uint64_t v5 = **a2;
  if (**(void **)a1 <= v5)
  {
    if (*((void *)a3 + 1) && v5 > **(void **)a3) {
      goto LABEL_25;
    }
    return 0;
  }
LABEL_10:
  uint64_t v6 = *((void *)a3 + 1);
  if (v3) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (**a2 <= **(void **)a3) {
      goto LABEL_19;
    }
LABEL_16:
    long long v8 = *a1;
    uint64_t v9 = *((void *)a1 + 2);
    char v10 = *((unsigned char *)a3 + 16);
    *a1 = *a3;
    *((unsigned char *)a1 + 16) = v10;
    *((unsigned char *)a3 + 16) = v9;
    *a3 = v8;
    return 1;
  }
  if (v6) {
    goto LABEL_16;
  }
LABEL_19:
  long long v12 = *a1;
  uint64_t v13 = *((void *)a1 + 2);
  char v14 = *((unsigned char *)a2 + 16);
  *a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v14;
  *((unsigned char *)a2 + 16) = v13;
  *(_OWORD *)a2 = v12;
  uint64_t v15 = *((void *)a3 + 1);
  if (v15 && a2[1])
  {
    if (**a2 > **(void **)a3) {
      goto LABEL_31;
    }
    return 1;
  }
  if (!v15) {
    return 1;
  }
LABEL_31:
  long long v20 = *(_OWORD *)a2;
  uint64_t v21 = a2[2];
  char v22 = *((unsigned char *)a3 + 16);
  *(_OWORD *)a2 = *a3;
  *((unsigned char *)a2 + 16) = v22;
  *((unsigned char *)a3 + 16) = (_BYTE)v21;
  *a3 = v20;
  return 2;
}

long long *sub_10041A264(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *((void *)a2 - 2);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (!v3) {
      goto LABEL_15;
    }
  }
  else if (**((void **)a2 - 3) <= *v2)
  {
LABEL_15:
    for (uint64_t i = (long long *)(a1 + 24); i < a2; uint64_t i = (long long *)((char *)i + 24))
    {
      if (v3 && *((void *)i + 1))
      {
        if (**(void **)i > *v2) {
          goto LABEL_23;
        }
      }
      else if (v3)
      {
        goto LABEL_23;
      }
    }
    goto LABEL_23;
  }
  uint64_t i = (long long *)(a1 + 24);
  if (!v3) {
    goto LABEL_11;
  }
LABEL_8:
  if (*((void *)i + 1))
  {
    if (**(void **)i <= *v2) {
      goto LABEL_12;
    }
  }
  else
  {
LABEL_11:
    while (!v3)
    {
LABEL_12:
      uint64_t i = (long long *)((char *)i + 24);
      if (v3) {
        goto LABEL_8;
      }
    }
  }
LABEL_23:
  if (i < a2)
  {
    BOOL v7 = (uint64_t *)a2 - 5;
    if (!v3) {
      goto LABEL_28;
    }
    while (1)
    {
      if (v4)
      {
        if (*(void *)v7[2] <= *v2) {
          goto LABEL_30;
        }
      }
      else
      {
LABEL_28:
        if (!v3)
        {
LABEL_30:
          a2 = (long long *)(v7 + 2);
          break;
        }
      }
      uint64_t v8 = *v7;
      v7 -= 3;
      uint64_t v4 = v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (i < a2)
  {
    uint64_t v14 = *((void *)i + 2);
    long long v13 = *i;
    long long v10 = *a2;
    *((unsigned char *)i + 16) = *((unsigned char *)a2 + 16);
    long long *i = v10;
    *((unsigned char *)a2 + 16) = v14;
    *a2 = v13;
    do
    {
      while (1)
      {
        uint64_t i = (long long *)((char *)i + 24);
        if (!v3 || !*((void *)i + 1)) {
          break;
        }
        if (**(void **)i > *v2) {
          goto LABEL_39;
        }
      }
    }
    while (!v3);
    do
    {
      do
LABEL_39:
        a2 = (long long *)((char *)a2 - 24);
      while (!*((void *)a2 + 1));
    }
    while (**(void **)a2 > *v2);
  }
  if ((long long *)((char *)i - 24) != (long long *)a1)
  {
    long long v11 = *(long long *)((char *)i - 24);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)i - 8);
    *(_OWORD *)a1 = v11;
  }
  *((void *)i - 3) = v2;
  *((void *)i - 2) = v3;
  *((unsigned char *)i - 8) = v9;
  return i;
}

unint64_t sub_10041A408(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + v2 + 32);
    if (v6 && v4 != 0) {
      break;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    v2 += 24;
  }
  if (*v3 > **(void **)(a1 + v2 + 24)) {
    goto LABEL_10;
  }
LABEL_11:
  unint64_t v8 = a1 + v2 + 24;
  if (v2)
  {
    do
    {
      while (1)
      {
        a2 -= 24;
        uint64_t v9 = *(void *)(a2 + 8);
        if (v9 && v4 != 0) {
          break;
        }
        if (v9) {
          goto LABEL_38;
        }
      }
    }
    while (*v3 <= **(void **)a2);
  }
  else if (v8 < a2)
  {
    do
    {
      while (1)
      {
        a2 -= 24;
        uint64_t v11 = *(void *)(a2 + 8);
        if (!v11 || v4 == 0) {
          break;
        }
        if (*v3 > **(void **)a2 || v8 >= a2) {
          goto LABEL_38;
        }
      }
      if (v11) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v8 >= a2;
      }
    }
    while (!v13);
  }
LABEL_38:
  unint64_t v15 = v8;
  if (v8 < a2)
  {
    unint64_t v16 = a2;
    do
    {
      uint64_t v25 = *(void *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v17 = *(_OWORD *)v16;
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v17;
      *(unsigned char *)(v16 + 16) = v25;
      *(_OWORD *)unint64_t v16 = v24;
      do
      {
        while (1)
        {
          v15 += 24;
          uint64_t v18 = *(void *)(v15 + 8);
          if (v18 && v4 != 0) {
            break;
          }
          if (!v18) {
            goto LABEL_51;
          }
        }
      }
      while (*v3 > **(void **)v15);
      do
      {
LABEL_51:
        while (1)
        {
          v16 -= 24;
          uint64_t v20 = *(void *)(v16 + 8);
          if (!v20 || v4 == 0) {
            break;
          }
          if (*v3 > **(void **)v16) {
            goto LABEL_57;
          }
        }
      }
      while (!v20);
LABEL_57:
      ;
    }
    while (v15 < v16);
  }
  if (v15 - 24 != a1)
  {
    long long v22 = *(_OWORD *)(v15 - 24);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(v15 - 8);
    *(_OWORD *)a1 = v22;
  }
  *(void *)(v15 - 24) = v3;
  *(void *)(v15 - 16) = v4;
  *(unsigned char *)(v15 - 8) = v5;
  return v15 - 24;
}

BOOL sub_10041A5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (void **)(a2 - 24);
      uint64_t v7 = *(void *)(a2 - 16);
      if (v7) {
        BOOL v8 = *(void *)(a1 + 8) == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        if (!v7) {
          return result;
        }
      }
      else if (**(void **)a1 <= **v6)
      {
        return result;
      }
      long long v21 = *(_OWORD *)a1;
      uint64_t v22 = *(void *)(a1 + 16);
      char v23 = *(unsigned char *)(a2 - 8);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(unsigned char *)(a1 + 16) = v23;
      *(unsigned char *)(a2 - 8) = v22;
      *(_OWORD *)uint64_t v6 = v21;
      return result;
    case 3uLL:
      sub_10041A0C0((long long *)a1, (uint64_t **)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10041A80C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_10041A944((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_10041A0C0((long long *)a1, (uint64_t **)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *(void *)(v10 + 8);
    if (!v13 || *(void *)(v9 + 8) == 0) {
      break;
    }
    unint64_t v15 = *(void **)v10;
    if (**(void **)v9 > **(void **)v10) {
      goto LABEL_19;
    }
LABEL_28:
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
  if (!v13) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void **)v10;
LABEL_19:
  char v16 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v17 = a1;
  if (v9 != a1)
  {
    uint64_t v18 = v11;
    while (1)
    {
      uint64_t v19 = a1 + v18;
      uint64_t v20 = (void **)(a1 + v18 + 24);
      if (v13)
      {
        if (*(void *)(v19 + 32) && **v20 <= *v15) {
          break;
        }
      }
      *(_OWORD *)(v19 + 48) = *(_OWORD *)v20;
      *(unsigned char *)(v19 + 64) = *(unsigned char *)(a1 + v18 + 40);
      v18 -= 24;
      if (v18 == -48)
      {
        uint64_t v17 = a1;
        goto LABEL_27;
      }
    }
    uint64_t v17 = a1 + v18 + 48;
  }
LABEL_27:
  *(void *)uint64_t v17 = v15;
  *(void *)(v17 + 8) = v13;
  *(unsigned char *)(v17 + 16) = v16;
  if (++v12 != 8) {
    goto LABEL_28;
  }
  return v10 + 24 == a2;
}

__n128 sub_10041A80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10041A0C0((long long *)a1, (uint64_t **)a2, (long long *)a3);
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9) {
    BOOL v10 = *(void *)(a3 + 8) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!v9) {
      return result;
    }
  }
  else if (**(void **)a3 <= **(void **)a4)
  {
    return result;
  }
  __n128 result = *(__n128 *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  char v12 = *(unsigned char *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(unsigned char *)(a3 + 16) = v12;
  *(unsigned char *)(a4 + 16) = v11;
  *(__n128 *)a4 = result;
  uint64_t v13 = *(void *)(a3 + 8);
  if (v13 && *(void *)(a2 + 8))
  {
    if (**(void **)a2 <= **(void **)a3) {
      return result;
    }
  }
  else if (!v13)
  {
    return result;
  }
  __n128 result = *(__n128 *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  char v15 = *(unsigned char *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(unsigned char *)(a2 + 16) = v15;
  *(unsigned char *)(a3 + 16) = v14;
  *(__n128 *)a3 = result;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16 || !*(void *)(a1 + 8))
  {
    if (!v16) {
      return result;
    }
    goto LABEL_19;
  }
  if (**(void **)a1 > **(void **)a2)
  {
LABEL_19:
    __n128 result = *(__n128 *)a1;
    uint64_t v17 = *(void *)(a1 + 16);
    char v18 = *(unsigned char *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = v18;
    *(unsigned char *)(a2 + 16) = v17;
    *(__n128 *)a2 = result;
  }
  return result;
}

__n128 sub_10041A944(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_10041A80C((uint64_t)a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)(a5 + 8);
  if (v11) {
    BOOL v12 = *(void *)(a4 + 8) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (!v11) {
      return result;
    }
  }
  else if (**(void **)a4 <= **(void **)a5)
  {
    return result;
  }
  __n128 result = *(__n128 *)a4;
  uint64_t v13 = *(void *)(a4 + 16);
  char v14 = *(unsigned char *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(unsigned char *)(a4 + 16) = v14;
  *(unsigned char *)(a5 + 16) = v13;
  *(__n128 *)a5 = result;
  uint64_t v15 = *(void *)(a4 + 8);
  if (v15 && *(void *)(a3 + 8))
  {
    if (**(void **)a3 <= **(void **)a4) {
      return result;
    }
  }
  else if (!v15)
  {
    return result;
  }
  __n128 result = *(__n128 *)a3;
  uint64_t v16 = *(void *)(a3 + 16);
  char v17 = *(unsigned char *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(unsigned char *)(a3 + 16) = v17;
  *(unsigned char *)(a4 + 16) = v16;
  *(__n128 *)a4 = result;
  uint64_t v18 = *(void *)(a3 + 8);
  if (v18 && *(void *)(a2 + 8))
  {
    if (**(void **)a2 <= **(void **)a3) {
      return result;
    }
  }
  else if (!v18)
  {
    return result;
  }
  __n128 result = *(__n128 *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  char v20 = *(unsigned char *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(unsigned char *)(a2 + 16) = v20;
  *(unsigned char *)(a3 + 16) = v19;
  *(__n128 *)a3 = result;
  uint64_t v21 = *(void *)(a2 + 8);
  if (!v21 || !a1->n128_u64[1])
  {
    if (!v21) {
      return result;
    }
    goto LABEL_24;
  }
  if (*(void *)a1->n128_u64[0] > **(void **)a2)
  {
LABEL_24:
    __n128 result = *a1;
    unint64_t v22 = a1[1].n128_u64[0];
    unsigned __int8 v23 = *(unsigned char *)(a2 + 16);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u8[0] = v23;
    *(unsigned char *)(a2 + 16) = v22;
    *(__n128 *)a2 = result;
  }
  return result;
}

long long *sub_10041AAD8(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        sub_10041ACC0(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      char v14 = a2;
      while (1)
      {
        uint64_t v15 = *((void *)v14 + 1);
        if (v15 && *(void *)(a1 + 8) != 0) {
          break;
        }
        if (v15) {
          goto LABEL_13;
        }
LABEL_14:
        char v14 = (long long *)((char *)v14 + 24);
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          goto LABEL_18;
        }
      }
      if (**(void **)a1 <= **(void **)v14) {
        goto LABEL_14;
      }
LABEL_13:
      long long v17 = *v14;
      uint64_t v18 = *((void *)v14 + 2);
      char v19 = *(unsigned char *)(a1 + 16);
      *char v14 = *(_OWORD *)a1;
      *((unsigned char *)v14 + 16) = v19;
      *(unsigned char *)(a1 + 16) = v18;
      *(_OWORD *)a1 = v17;
      sub_10041ACC0(a1, a4, v9, a1);
      goto LABEL_14;
    }
LABEL_18:
    if (v8 >= 25)
    {
      int64_t v20 = v8 / 0x18uLL;
      uint64_t v21 = (long long *)((char *)a2 - 24);
      do
      {
        long long v26 = *(_OWORD *)a1;
        uint64_t v27 = *(void *)(a1 + 16);
        sub_10041AE64(a1, a4, v20);
        if (v21 == (long long *)v22)
        {
          *(_OWORD *)uint64_t v22 = v26;
          *(unsigned char *)(v22 + 16) = v27;
        }
        else
        {
          long long v23 = *v21;
          *(unsigned char *)(v22 + 16) = *((unsigned char *)v21 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          long long *v21 = v26;
          *((unsigned char *)v21 + 16) = v27;
          sub_10041AF04(a1, v22 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - a1) >> 3));
        }
        uint64_t v21 = (long long *)((char *)v21 - 24);
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10041ACC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - result) >> 3))) {
    return result;
  }
  uint64_t v5 = (0x5555555555555556 * ((a4 - result) >> 3)) | 1;
  uint64_t v6 = (long long *)(result + 24 * v5);
  if (0x5555555555555556 * ((a4 - result) >> 3) + 2 < a3)
  {
    uint64_t v7 = *(void *)(result + 24 * v5 + 8);
    if (v7) {
      BOOL v8 = *((void *)v6 + 4) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (!v7) {
        goto LABEL_11;
      }
    }
    else if (**((void **)v6 + 3) <= **(void **)v6)
    {
      goto LABEL_11;
    }
    uint64_t v6 = (long long *)((char *)v6 + 24);
    uint64_t v5 = 0x5555555555555556 * ((a4 - result) >> 3) + 2;
  }
LABEL_11:
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v10 = *(void *)(a4 + 8);
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (v9) {
      return result;
    }
    uint64_t v12 = *(void **)a4;
  }
  else
  {
    uint64_t v12 = *(void **)a4;
    if (**(void **)a4 > **(void **)v6) {
      return result;
    }
  }
  char v13 = *(unsigned char *)(a4 + 16);
  char v14 = *((unsigned char *)v6 + 16);
  *(_OWORD *)a4 = *v6;
  *(unsigned char *)(a4 + 16) = v14;
  if (v4 >= v5)
  {
    while (1)
    {
      uint64_t v16 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v15 = (long long *)(result + 24 * v5);
      uint64_t v17 = v16 + 2;
      if (v17 < a3)
      {
        uint64_t v18 = *(void *)(result + 24 * v5 + 8);
        if (v18) {
          BOOL v19 = *((void *)v15 + 4) == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          if (**((void **)v15 + 3) <= **(void **)v15) {
            goto LABEL_34;
          }
LABEL_33:
          uint64_t v15 = (long long *)((char *)v15 + 24);
          uint64_t v5 = v17;
          goto LABEL_34;
        }
        if (v18) {
          goto LABEL_33;
        }
      }
LABEL_34:
      uint64_t v20 = *((void *)v15 + 1);
      if (v20) {
        BOOL v21 = v10 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        if (v20) {
          break;
        }
      }
      else if (*v12 > **(void **)v15)
      {
        break;
      }
      long long v22 = *v15;
      *((unsigned char *)v6 + 16) = *((unsigned char *)v15 + 16);
      *uint64_t v6 = v22;
      uint64_t v6 = v15;
      if (v4 < v5) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v15 = v6;
LABEL_25:
  *(void *)uint64_t v15 = v12;
  *((void *)v15 + 1) = v10;
  *((unsigned char *)v15 + 16) = v13;
  return result;
}

__n128 sub_10041AE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = (__n128 *)a1;
    uint64_t v7 = v3 + 1;
    a1 += 24 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 >= a3) {
      goto LABEL_12;
    }
    unint64_t v10 = v6->n128_u64[3 * v7 + 1];
    if (v10) {
      BOOL v11 = *(void *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (!v10) {
        goto LABEL_12;
      }
LABEL_11:
      a1 += 24;
      uint64_t v3 = v9;
      goto LABEL_12;
    }
    if (**(void **)(a1 + 24) > **(void **)a1) {
      goto LABEL_11;
    }
LABEL_12:
    __n128 result = *(__n128 *)a1;
    v6[1].n128_u8[0] = *(unsigned char *)(a1 + 16);
    *uint64_t v6 = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10041AF04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (long long *)(result + 24 * (v4 >> 1));
    uint64_t v7 = (void **)(a2 - 24);
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v9 = *(void *)(a2 - 16);
    if (v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if (!v8) {
        return result;
      }
      BOOL v11 = *v7;
    }
    else
    {
      BOOL v11 = *v7;
      if (**v7 <= **(void **)v6) {
        return result;
      }
    }
    char v12 = *(unsigned char *)(a2 - 8);
    char v13 = *((unsigned char *)v6 + 16);
    *(_OWORD *)uint64_t v7 = *v6;
    *(unsigned char *)(a2 - 8) = v13;
    if (v4 >= 2)
    {
      do
      {
        unint64_t v15 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        char v14 = (long long *)(result + 24 * v5);
        uint64_t v16 = *((void *)v14 + 1);
        if (v16) {
          BOOL v17 = v9 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          if (!v16) {
            goto LABEL_11;
          }
        }
        else if (*v11 <= **(void **)v14)
        {
          goto LABEL_11;
        }
        long long v18 = *v14;
        *((unsigned char *)v6 + 16) = *((unsigned char *)v14 + 16);
        *uint64_t v6 = v18;
        uint64_t v6 = (long long *)(result + 24 * v5);
      }
      while (v15 > 1);
    }
    else
    {
LABEL_11:
      char v14 = v6;
    }
    *(void *)char v14 = v11;
    *((void *)v14 + 1) = v9;
    *((unsigned char *)v14 + 16) = v12;
  }
  return result;
}

void sub_10041AFDC(long long *a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
BOOL sub_10041B3E4(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 4;
      if (!(*a3)(a2 - 4, a1)) {
        return 1;
      }
      long long v10 = a1[2];
      long long v9 = a1[3];
      long long v12 = *a1;
      long long v11 = a1[1];
      long long v13 = *(a2 - 1);
      long long v15 = *v8;
      long long v14 = *(a2 - 3);
      a1[2] = *(a2 - 2);
      a1[3] = v13;
      *a1 = v15;
      a1[1] = v14;
      *uint64_t v8 = v12;
      *(a2 - 3) = v11;
      BOOL result = 1;
      *(a2 - 2) = v10;
      *(a2 - 1) = v9;
      return result;
    case 3:
      sub_10015FCD0(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_1001602EC((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      sub_1001603D8((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      uint64_t v16 = a1 + 8;
      sub_10015FCD0(a1, a1 + 4, a1 + 8, a3);
      unint64_t v17 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v17, v16))
    {
      long long v20 = v17[1];
      long long v29 = *v17;
      long long v30 = v20;
      long long v21 = v17[3];
      long long v31 = v17[2];
      long long v32 = v21;
      uint64_t v22 = v18;
      while (1)
      {
        long long v23 = (long long *)((char *)a1 + v22);
        long long v24 = *(long long *)((char *)a1 + v22 + 144);
        v23[12] = *(long long *)((char *)a1 + v22 + 128);
        v23[13] = v24;
        long long v25 = *(long long *)((char *)a1 + v22 + 176);
        v23[14] = *(long long *)((char *)a1 + v22 + 160);
        v23[15] = v25;
        if (v22 == -128) {
          break;
        }
        v22 -= 64;
        if (((*a3)(&v29, v23 + 4) & 1) == 0)
        {
          long long v26 = (long long *)((char *)a1 + v22 + 192);
          goto LABEL_12;
        }
      }
      long long v26 = a1;
LABEL_12:
      long long v27 = v30;
      *long long v26 = v29;
      v26[1] = v27;
      long long v28 = v32;
      v26[2] = v31;
      v26[3] = v28;
      if (++v19 == 8) {
        return v17 + 4 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 64;
    v17 += 4;
    if (v17 == a2) {
      return 1;
    }
  }
}

void sub_10041B5EC(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 4) >= a2)
  {
    if (a2)
    {
      long long v13 = &v7[6 * a2];
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        *((_OWORD *)v7 + 1) = xmmword_101178668;
        *((_OWORD *)v7 + 2) = unk_101178678;
        v7 += 6;
      }
      while (v7 != v13);
      char v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)sub_100134B88(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    long long v14 = &v12[48 * v8];
    long long v15 = &v14[48 * a2];
    uint64_t v16 = v14;
    do
    {
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_OWORD *)v16 + 1) = xmmword_101178668;
      *((_OWORD *)v16 + 2) = unk_101178678;
      v16 += 48;
    }
    while (v16 != v15);
    unint64_t v17 = &v12[48 * v11];
    int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_10041B770(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100004E40();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)sub_100046F5C(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    sub_100134BD0(a1, &v15);
    sub_100134D6C((uint64_t)&v15);
  }
}

void sub_10041B8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100134D6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10041BB1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041BB60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10041BE5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addToken:*(void *)(a1 + 40) isForTemporaryRelinquish:0];
}

void sub_10041C054()
{
  id v0 = +[CRLTraceableResourceManager sharedManager];
  [v0 logSerializationAsError];
}

void sub_10041C09C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041C0E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10041C124(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didAcquire];
}

void sub_10041C34C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041C390(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10041C3D4(uint64_t a1)
{
  [*(id *)(a1 + 32) setRelinquishCallStackIfNeeded:*(void *)(a1 + 40) relinquishTime:*(double *)(a1 + 56)];
  if (([*(id *)(*(void *)(a1 + 48) + 8) containsObject:*(void *)(a1 + 32)] & 1) == 0)
  {
    sub_10041C054();
    unsigned int v4 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F85D0);
    }
    uint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      unint64_t v8 = v5;
      unint64_t v9 = +[CRLTraceableResourceToken callStackDescriptionWithAction:@"Relinquish" callStackSymbols:v6 index:0];
      *(_DWORD *)buf = 67110402;
      unsigned int v29 = v4;
      __int16 v30 = 2082;
      long long v31 = "-[CRLTraceableResource didRelinquishResourceWithToken:]_block_invoke";
      __int16 v32 = 2082;
      long long v33 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTraceableResource.m";
      __int16 v34 = 1024;
      int v35 = 173;
      __int16 v36 = 2114;
      uint64_t v37 = v7;
      __int16 v38 = 2114;
      uint64_t v39 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token has already been relinquished: %{public}@\nSecond attempt to relinquish:\n%{public}@", buf, 0x36u);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F85F0);
    }
    unint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    +[CRLTraceableResourceToken callStackDescriptionWithAction:@"Relinquish" callStackSymbols:*(void *)(a1 + 40) index:0];
    v27 = uint64_t v26 = v11;
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Token has already been relinquished: %{public}@\nSecond attempt to relinquish:\n%{public}@", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"-[CRLTraceableResource didRelinquishResourceWithToken:]_block_invoke");

    uint64_t v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLTraceableResource didRelinquishResourceWithToken:]_block_invoke");
    long long v20 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTraceableResource.m"];
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = +[CRLTraceableResourceToken callStackDescriptionWithAction:@"Relinquish" callStackSymbols:*(void *)(a1 + 40) index:0];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v19, v20, 173, 1, "Token has already been relinquished: %{public}@\nSecond attempt to relinquish:\n%{public}@", v21, v22, 173, v26, v27);

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v23, v24);
    abort();
  }
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);

  return _[v2 removeToken:v3 isForTemporaryRelinquish:0];
}

void sub_10041C6B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041C6F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10041CB98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041CBDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041CC20(uint64_t a1)
{
}

void sub_10041CC2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041CC70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10041CCB4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) removeToken:a2 isForTemporaryRelinquish:1];
}

void sub_10041CCC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 56) + 8);
  if (*(unsigned char *)(v1 + 24))
  {
    sub_10041C054();
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F86B8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B0C9C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014F86D8);
    }
    unint64_t v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Completion handler was already called.", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"-[CRLTraceableResource temporarilyRelinquishForToken:usingBlock:]_block_invoke");
    uint64_t v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLTraceableResource temporarilyRelinquishForToken:usingBlock:]_block_invoke");
    uint64_t v19 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTraceableResource.m"];
    +[CRLAssertionHandler handleFailureInFunction:v18 file:v19 lineNumber:201 isFatal:1 description:"Completion handler was already called."];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v20, v21);
    abort();
  }
  *(unsigned char *)(v1 + 24) = 1;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 40) addToken:*(void *)(*((void *)&v22 + 1) + 8 * i) isForTemporaryRelinquish:1];
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }

  unint64_t v8 = [*(id *)(*(void *)(a1 + 40) + 8) firstObject];
  unint64_t v9 = v8;
  if (v8) {
    [*(id *)(a1 + 40) scheduleRelinquishTimeoutForToken:v8 timeout:[v8 timeout] isForTemporaryRelinquish:1];
  }
  [*(id *)(a1 + 48) didCallCompletionHandler];
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 40) + 24));
}

void sub_10041CF58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041CF9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041D24C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041D290(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041D3F8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = (id *)(a1 + 40);
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
  id v4 = *v3;
  id v5 = [*((id *)*v2 + 1) firstObject];

  if (v4 == v5)
  {
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = (char *)[*(id *)(a1 + 40) timeout] - *(void *)(a1 + 48);
    if (([v6 isTimeoutPaused] & 1) != 0 || v7)
    {
      if ([v6 isTimeoutPaused]) {
        uint64_t v7 = (char *)[v6 timeout];
      }
      [*(id *)(a1 + 32) scheduleRelinquishTimeoutForToken:*(void *)(a1 + 40) timeout:v7 isForTemporaryRelinquish:*(unsigned __int8 *)(a1 + 56)];
    }
    else if ([*v2 printTimeoutAsError])
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014F8760);
      }
      unint64_t v8 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_1010B0DAC(v2, v8, v2 + 1);
      }
      [*v2 p_logErrorTokenSerializationDescriptionFromQueueWithPrefix:&stru_101538650];
    }
    else
    {
      if (qword_101719AA8 != -1) {
        dispatch_once(&qword_101719AA8, &stru_1014F8780);
      }
      unint64_t v9 = off_10166B4D8;
      if (os_log_type_enabled((os_log_t)off_10166B4D8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = *v2;
        uint64_t v11 = v9;
        uint64_t v12 = [v10 logContext];
        uint64_t v13 = [v12 publicString];
        uint64_t v14 = [*v2 logContext];
        uint64_t v15 = [v14 privateString];
        uint64_t v16 = [*v2 name];
        id v17 = [*v3 timeout];
        uint64_t v18 = [*v3 intent];
        int v19 = 138544386;
        CKRecordID v20 = v13;
        __int16 v21 = 2112;
        long long v22 = v15;
        __int16 v23 = 2114;
        long long v24 = v16;
        __int16 v25 = 2048;
        id v26 = v17;
        __int16 v27 = 2114;
        long long v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ %{public}@ is taking more than %lu seconds to relinquish resource with '%{public}@' intent.", (uint8_t *)&v19, 0x34u);
      }
      [*v2 p_logDebugTokenSerializationDescriptionFromQueue];
    }
  }
}

void sub_10041D6BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041D700(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLTraceableResourceCat");
  uint64_t v2 = off_10166B4D8;
  off_10166B4D8 = v1;
}

uint64_t sub_10041D834(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10041D844(uint64_t a1)
{
}

void sub_10041D84C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) p_tokenSerializationDescriptionFromQueue];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10041D93C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_logErrorTokenSerializationDescriptionFromQueueWithPrefix:*(void *)(a1 + 40)];
}

void sub_10041E124(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E168(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E1AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E1F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E234(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E278(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E904(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E948(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E98C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041E9D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041EA14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041EA58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041EEDC(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLTraceableResourceManager);
  uint64_t v2 = (void *)qword_1016A9AA0;
  qword_1016A9AA0 = (uint64_t)v1;
}

void sub_10041F070(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [*(id *)(*(void *)(a1 + 32) + 16) addObject:WeakRetained];
    id WeakRetained = v3;
  }
}

void sub_10041F1C0(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 16) allObjects];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10041F3E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041F428(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10041F8E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041F92C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041FD44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041FD88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041FDCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10041FE10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100420010(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100420054(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100420238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLTraceableResourceCat");
  id v2 = off_10166B4D8;
  off_10166B4D8 = v1;
}

void sub_100420474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004204B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100420694(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004206D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100420CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [*(id *)(a1 + 32) appendString:a2];
  if (a3)
  {
    id v6 = *(void **)(a1 + 32);
    return [v6 appendString:@", "];
  }
  return result;
}

void sub_1004212DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100421320(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100421474(uint64_t a1)
{
  return CRLAccessibilityPostLayoutChangedNotification(*(void **)(a1 + 32));
}

void sub_100421FC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042200C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100422050(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100422094(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004220D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042211C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004222CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100422310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100422ACC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100422B10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042328C(id a1)
{
  v6[0] = @"CRLSnapToGrid";
  v6[1] = @"CRLDisplayEdgeGuides";
  v7[0] = &__kCFBooleanFalse;
  v7[1] = &__kCFBooleanFalse;
  v6[2] = @"CRLDisplayCenterGuides";
  v6[3] = @"CRLDisplaySpacingGuides";
  v7[2] = &__kCFBooleanTrue;
  v7[3] = &__kCFBooleanTrue;
  v6[4] = @"CRLDisplaySizingGuides";
  void v6[5] = @"CRLUseHapticFeedbackWhenSnapping";
  v6[6] = @"CRLEncryptSharePlayData";
  v6[7] = @"CRLDeleteBoardCleanupTolerance";
  v7[6] = &__kCFBooleanTrue;
  v7[7] = &off_10155DE50;
  v7[4] = &__kCFBooleanTrue;
  void v7[5] = &__kCFBooleanTrue;
  v6[8] = @"CRLDeletedBoardTTL";
  v6[9] = @"CRLSelectAndScrollWithApplePencil";
  v7[8] = &off_10155DE68;
  v7[9] = &__kCFBooleanFalse;
  v6[10] = @"CRLMathRecognitionMode";
  v6[11] = @"CRLAppAnalyticsResetIdentifier";
  v7[10] = &off_10155DE80;
  v7[11] = &__kCFBooleanFalse;
  v6[12] = @"enableOSSignpost";
  v6[13] = @"CRLMultiSelectionShouldDisplaySingleBoundsUserDefault";
  v7[12] = &__kCFBooleanFalse;
  v7[13] = &__kCFBooleanTrue;
  v6[14] = @"CRLRulerUnitTypeUserDefault";
  uint64_t v1 = +[NSLocale currentLocale];
  if ([v1 usesMetricSystem]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:v2];
  v7[14] = v3;
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:15];
  id v5 = (void *)qword_1016A9AB8;
  qword_1016A9AB8 = v4;
}

id sub_1004236C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 size];
  double v2 = sub_100064070();

  return [v1 drawInRect:1 blendMode:v2];
}

void sub_10042395C(uint64_t a1, void *a2)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 setFill];
  [v3 fillRect:sub_100064070()];
}

void sub_100423C74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100423CB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004244DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100424520(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004250EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100425130(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100425FA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100425FEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100426810(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100426854(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004273F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042743C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100427480(uint64_t a1, double a2, double a3, double a4, double a5, long double a6)
{
  id result = [*(id *)(a1 + 32) width];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v12 = *(void **)(a1 + 40);
    if (v12)
    {
      [v12 hitInfo];
      double v13 = *(double *)&v21;
    }
    else
    {
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      double v13 = 0.0;
    }
    long double v14 = sub_100064680(a3, a4, v13);
    long double v16 = v15;
    if (a5 < 0.0)
    {
      a5 = sub_100064680(CGPointZero.x, CGPointZero.y, a5);
      a6 = v17;
    }
    if (v14 < 0.0)
    {
      long double v14 = sub_100064680(CGPointZero.x, CGPointZero.y, v14);
      long double v16 = v18;
    }
    double v19 = sub_100065C1C(a5, a6);
    double v20 = sub_100065C1C(v14, v16);
    sub_10006651C(v19, v20);
    return [*(id *)(a1 + 32) width:v21, v22, v23, v24];
  }
  return result;
}

void sub_10042761C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100427660(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004276A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004276E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428D68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428DAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428DF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428E34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428E78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428EBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428F00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100428F44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100429640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100429684(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004296C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042970C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042A3E8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 9))
  {
    +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", 0.1);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 32) setTimer:v2];
  }
}

void sub_10042A684(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 10))
  {
    +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", 0.1);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 32) setTimer:v2];
  }
}

void sub_10042A8E8(double a1, double a2, double a3, long double a4)
{
}

uint64_t sub_10042B298()
{
  return objc_opt_isKindOfClass() & 1;
}

int64_t sub_10042B3E0(id a1, _TtC8Freeform12CRLBoardItem *a2, _TtC8Freeform12CRLBoardItem *a3)
{
  return [(CRLBoardItem *)a2 compareUsingUUIDTo:a3];
}

void sub_10042BAA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042BAEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042BD7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042BDC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042BF74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042BFB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042C4F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042C53C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042C580(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042C5C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10042C65C(id a1, CRLCanvasLayout *a2, BOOL *a3)
{
  id v3 = a2;
  if ([(CRLCanvasAbstractLayout *)v3 supportsRotation]) {
    unsigned __int8 v4 = [(CRLCanvasLayout *)v3 canInspectGeometry];
  }
  else {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

id sub_10042CE30(uint64_t a1)
{
  return [*(id *)(a1 + 32) launchEditAccessibilityDescriptionWithBoardItem:*(void *)(a1 + 40)];
}

void sub_10042EBC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10042EBDC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) elementAtIndex:*(void *)(a1 + 48)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10042ECC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10042ECE0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) elementAtIndex:*(void *)(a1 + 48) associatedPoints:*(void *)(a1 + 56)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10042F018(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042F05C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042F20C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042F250(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042F4A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042F4E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042FBAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10042FBF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004308E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043092C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100430EBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100430F00(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004311C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100431204(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100431870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100431898(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1004318A8(uint64_t a1)
{
}

void sub_1004318B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100432680(id a1)
{
  off_1016A9AD8 = sub_1000A4D14(0, @"CoreAnalytics", "AnalyticsSendEvent", &qword_1016A9AD0);
  off_1016A9AE0 = sub_1000A4D14(0, @"CoreAnalytics", "AnalyticsSendEventLazy", &qword_1016A9AD0);
}

void sub_100432B68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100432BAC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100432D08(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100433980(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004339C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004342C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043430C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100434350(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100434394(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100435520(uint64_t a1, int a2)
{
  if (a2 < 4)
  {
    unsigned int v2 = 0;
    int v5 = a2;
  }
  else
  {
    unsigned int v2 = 0;
    unint64_t v3 = a2 + 4;
    unsigned __int8 v4 = (unsigned __int8 *)(a1 + 3);
    int v5 = a2;
    do
    {
      unsigned int v6 = *(v4 - 3) + 16 * v2;
      unsigned int v7 = *(v4 - 2) + 16 * (v6 ^ (16 * (v6 >> 28)));
      unsigned int v8 = *(v4 - 1) + 16 * (v7 ^ (16 * (v7 >> 28)));
      int v9 = *v4;
      v4 += 4;
      int v10 = v9 + 16 * (v8 ^ (16 * (v8 >> 28)));
      unsigned int v2 = (v10 ^ ((v10 & 0xF0000000) >> 24)) & ~(v10 & 0xF0000000);
      v3 -= 4;
      v5 -= 4;
    }
    while (v3 > 7);
  }
  uint64_t v11 = a1 + a2;
  switch(v5)
  {
    case 1:
      goto LABEL_11;
    case 2:
LABEL_10:
      int v13 = *(unsigned __int8 *)(v11 - 2) + 16 * v2;
      unsigned int v2 = (v13 ^ ((v13 & 0xF0000000) >> 24)) & ~(v13 & 0xF0000000);
LABEL_11:
      int v14 = *(unsigned __int8 *)(v11 - 1) + 16 * v2;
      return (v14 ^ ((v14 & 0xF0000000) >> 24)) & ~(v14 & 0xF0000000);
    case 3:
      int v12 = *(unsigned __int8 *)(v11 - 3) + 16 * v2;
      unsigned int v2 = (v12 ^ ((v12 & 0xF0000000) >> 24)) & ~(v12 & 0xF0000000);
      goto LABEL_10;
  }
  return v2;
}

uint64_t sub_1004355FC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return -1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 1;
  }
  uint64_t result = sub_1003E6610((const unsigned __int8 *)(a1 + 4), (const unsigned __int8 *)(a2 + 4));
  if (result != -1 && result != 1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 20);
    unsigned int v6 = *(_DWORD *)(a2 + 20);
    BOOL v7 = v5 >= v6;
    BOOL v8 = v5 > v6;
    if (v7) {
      return v8;
    }
    else {
      return -1;
    }
  }
  return result;
}

void sub_100435718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100435828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100435A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100435AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100435DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100435E14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100435E58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100436114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043615C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004361A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100436400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100436448(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043648C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100436708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100436AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100436D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_100436DDC()
{
}

void sub_100436DE4()
{
}

void sub_100436E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100437314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100437350(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437394(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004373D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043741C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004376AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004376F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100437958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043799C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100437C34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437C78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100437E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100437EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004381CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100438238(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043827C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004384A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004384F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100438538(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004385D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004387C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100438814(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100438858(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004388EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100438AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100438B34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100438B78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  unsigned int v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100438C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100438CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100438E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100438F3C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 30) = v2;
  *(_WORD *)(a2 + 34) = 2112;
  *(void *)(a2 + 36) = result;
  return result;
}

void sub_100438F50(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 20) = v2;
  *(_WORD *)(a2 + 28) = 1024;
}

void sub_100438F60(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x2Cu);
}

uint64_t sub_1004391F0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSCharacterSet decimalDigitCharacterSet];
  unint64_t v3 = [v1 componentsSeparatedByCharactersInSet:v2];

  uint64_t v4 = [v3 firstObject];

  if ([v4 length])
  {
    if ([v4 isEqualToString:@"iPad"])
    {
      uint64_t v5 = 1;
    }
    else if ([v4 isEqualToString:@"iPhone"])
    {
      uint64_t v5 = 2;
    }
    else if ([v4 isEqualToString:@"iPod"])
    {
      uint64_t v5 = 3;
    }
    else if ([v4 isEqualToString:@"iMac"])
    {
      uint64_t v5 = 4;
    }
    else if ([v4 isEqualToString:@"MacBook"])
    {
      uint64_t v5 = 5;
    }
    else if ([v4 isEqualToString:@"MacBookAir"])
    {
      uint64_t v5 = 6;
    }
    else if ([v4 isEqualToString:@"MacBookPro"])
    {
      uint64_t v5 = 7;
    }
    else if ([v4 isEqualToString:@"Macmini"])
    {
      uint64_t v5 = 8;
    }
    else if ([v4 isEqualToString:@"MacPro"])
    {
      uint64_t v5 = 9;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_100439AC0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) p_isMetalCapable];
  byte_1016A9AF0 = (char)result;
  return result;
}

void sub_100439B38(id a1)
{
  id v1 = objc_alloc_init(CRLCapabilities);
  uint64_t v2 = (void *)qword_1016A9B00;
  qword_1016A9B00 = (uint64_t)v1;
}

void sub_100439D78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100439DBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100439FAC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100439FF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043A194(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043A1D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043A3FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043A440(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043A484(id a1)
{
  id v1 = objc_alloc_init((Class)NSCache);
  uint64_t v2 = (void *)qword_1016A9B08;
  qword_1016A9B08 = (uint64_t)v1;
}

uint64_t sub_10043A5CC(uint64_t result)
{
  byte_1016A9B18 = (*(void *)(*(void *)(result + 32) + 24) > 0x1AuLL) | (0xFFF9FFu >> *(void *)(*(void *)(result + 32) + 24)) & 1;
  return result;
}

uint64_t sub_10043A61C(CGImageSource *a1)
{
  CFDictionaryRef v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  uint64_t v2 = [(__CFDictionary *)v1 objectForKey:kCGImagePropertyOrientation];
  unsigned int v3 = [v2 intValue];

  uint64_t v4 = 0;
  if (v3 - 1 <= 7) {
    uint64_t v4 = qword_101178890[v3 - 1];
  }

  return v4;
}

uint64_t sub_10043A698(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return 1;
  }
  else {
    return dword_1011788F0[a1 - 1];
  }
}

CGAffineTransform *sub_10043A6BC@<X0>(CGAffineTransform *result@<X0>, int a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  if (!result)
  {
    long long v20 = *(_OWORD *)&CGAffineTransformIdentity.c;
    *(_OWORD *)a3 = *(_OWORD *)&CGAffineTransformIdentity.a;
    *(_OWORD *)(a3 + 16) = v20;
    long long v21 = *(_OWORD *)&CGAffineTransformIdentity.tx;
LABEL_20:
    *(_OWORD *)(a3 + 32) = v21;
    return result;
  }
  int v13 = dword_1011788D0[(void)result];
  long long v14 = *(_OWORD *)&CGAffineTransformIdentity.a;
  long long v15 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)a3 = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)(a3 + 16) = v15;
  long long v16 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)(a3 + 32) = v16;
  unint64_t v17 = 0xCCuLL >> (char)result;
  if ((0xCCuLL >> (char)result))
  {
    *(_OWORD *)&v40.a = v14;
    *(_OWORD *)&v40.c = v15;
    *(_OWORD *)&v40.tdouble x = v16;
    id result = CGAffineTransformScale((CGAffineTransform *)a3, &v40, a6 / a7, a7 / a6);
  }
  switch(v13)
  {
    case 2:
      goto LABEL_8;
    case 3:
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v18;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGFloat v19 = 3.14159265;
      goto LABEL_14;
    case 4:
      goto LABEL_11;
    case 5:
      long long v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v22;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGAffineTransformRotate(&v40, &v39, -1.57079633);
      long long v23 = *(_OWORD *)&v40.c;
      *(_OWORD *)a3 = *(_OWORD *)&v40.a;
      *(_OWORD *)(a3 + 16) = v23;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v40.tx;
LABEL_8:
      long long v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v24;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGFloat v25 = -1.0;
      CGFloat v26 = 1.0;
      goto LABEL_12;
    case 6:
      long long v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v27;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGFloat v19 = 1.57079633;
      goto LABEL_14;
    case 7:
      long long v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v28;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGAffineTransformRotate(&v40, &v39, -1.57079633);
      long long v29 = *(_OWORD *)&v40.c;
      *(_OWORD *)a3 = *(_OWORD *)&v40.a;
      *(_OWORD *)(a3 + 16) = v29;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v40.tx;
LABEL_11:
      long long v30 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v30;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGFloat v25 = 1.0;
      CGFloat v26 = -1.0;
LABEL_12:
      id result = CGAffineTransformScale(&v40, &v39, v25, v26);
      goto LABEL_15;
    case 8:
      long long v31 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v39.a = *(_OWORD *)a3;
      *(_OWORD *)&v39.c = v31;
      *(_OWORD *)&v39.tdouble x = *(_OWORD *)(a3 + 32);
      CGFloat v19 = -1.57079633;
LABEL_14:
      id result = CGAffineTransformRotate(&v40, &v39, v19);
LABEL_15:
      long long v32 = *(_OWORD *)&v40.c;
      *(_OWORD *)a3 = *(_OWORD *)&v40.a;
      *(_OWORD *)(a3 + 16) = v32;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v40.tx;
      break;
    default:
      break;
  }
  if (a2)
  {
    v41.origin.double x = a4;
    v41.origin.double y = a5;
    v41.size.double width = a6;
    v41.size.double height = a7;
    double MidX = CGRectGetMidX(v41);
    v42.origin.double x = a4;
    v42.origin.double y = a5;
    v42.size.double width = a6;
    v42.size.double height = a7;
    double MidY = CGRectGetMidY(v42);
    memset(&v40, 0, sizeof(v40));
    CGAffineTransformMakeTranslation(&v40, MidX, MidY);
    if (v17)
    {
      CGAffineTransform t1 = v40;
      CGAffineTransformRotate(&v39, &t1, 3.14159265);
      CGAffineTransform v40 = v39;
    }
    long long v35 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a3;
    *(_OWORD *)&t1.c = v35;
    *(_OWORD *)&t1.tdouble x = *(_OWORD *)(a3 + 32);
    CGAffineTransform v37 = v40;
    CGAffineTransformConcat(&v39, &t1, &v37);
    CGAffineTransform v40 = v39;
    CGAffineTransform t1 = v39;
    id result = CGAffineTransformTranslate(&v39, &t1, -MidX, -MidY);
    long long v36 = *(_OWORD *)&v39.c;
    long long v21 = *(_OWORD *)&v39.tx;
    CGAffineTransform v40 = v39;
    *(_OWORD *)a3 = *(_OWORD *)&v39.a;
    *(_OWORD *)(a3 + 16) = v36;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10043A9EC(unint64_t a1)
{
  return (a1 >> 1) & 1;
}

void sub_10043B7F0(id a1)
{
  CFDictionaryRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043B834(id a1)
{
  CFDictionaryRef v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043B878(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = (void *)qword_1016A9B28;
  qword_1016A9B28 = v1;
}

void sub_10043BBE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043BC28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043BF24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043BF68(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C264(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C2A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C5A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C5E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C8DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043C920(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043CC18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043CC5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043CF58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043CF9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D298(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D2DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D5D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D61C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D918(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043D95C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043DC54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043DC98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043DF90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043DFD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043E348(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043E38C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043E684(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043E6C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043E9C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043EA04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_10043EA70(CGImage *a1)
{
  if (!a1) {
    return 1;
  }
  memset(data, 0, sizeof(data));
  uint64_t v2 = CGBitmapContextCreateWithData(data, 1uLL, 1uLL, 8uLL, 1uLL, 0, 7u, 0, 0);
  v5.origin.double x = 0.0;
  v5.origin.double y = 0.0;
  v5.size.double width = 1.0;
  v5.size.double height = 1.0;
  CGContextDrawImage(v2, v5, a1);
  CFRelease(v2);
  return LOBYTE(data[0]) == 0;
}

CGImageRef sub_10043ECEC(uint64_t a1, CGImageRef image, double a3)
{
  double Width = (double)CGImageGetWidth(image);
  double Height = (double)CGImageGetHeight(image);
  double v8 = fabs(*(double *)(a1 + 40));
  [*(id *)(a1 + 32) scale];
  double v10 = ceil(v8 * v9 * a3);
  double v11 = fabs(*(double *)(a1 + 48));
  [*(id *)(a1 + 32) scale];
  double v13 = ceil(v11 * v12 * a3);
  double v14 = *(double *)(a1 + 64);
  if (*(double *)(a1 + 56) * a3 >= Height) {
    double v15 = Height;
  }
  else {
    double v15 = *(double *)(a1 + 56) * a3;
  }
  if (v14 * a3 >= Height - v15) {
    double v16 = Height - v15;
  }
  else {
    double v16 = v14 * a3;
  }
  double v17 = *(double *)(a1 + 80);
  if (*(double *)(a1 + 72) * a3 >= Width) {
    double v18 = Width;
  }
  else {
    double v18 = *(double *)(a1 + 72) * a3;
  }
  if (v17 * a3 >= Width - v18) {
    double v19 = Width - v18;
  }
  else {
    double v19 = v17 * a3;
  }
  sub_10043EFEC((uint64_t)v38, 0.0, 0.0, Width, Height, v18, v19, v15, v16);
  sub_10043EFEC((uint64_t)v37, 0.0, 0.0, v10, v13, v18, v19, v15, v16);
  long long v20 = sub_100010A74(1, v10, v13, 1.0);
  if (!v20) {
    return 0;
  }
  long long v21 = v20;
  for (uint64_t i = 0; i != 288; i += 32)
  {
    CGFloat v23 = *(double *)&v38[i];
    CGFloat v24 = *(double *)&v38[i + 8];
    CGFloat v25 = *(double *)&v38[i + 16];
    CGFloat v26 = *(double *)&v38[i + 24];
    CGFloat v27 = *(double *)&v37[i];
    CGFloat v28 = *(double *)&v37[i + 8];
    CGFloat v29 = *(double *)&v37[i + 16];
    CGFloat v30 = *(double *)&v37[i + 24];
    v39.origin.double x = v23;
    v39.origin.double y = v24;
    v39.size.double width = v25;
    v39.size.double height = v26;
    if (!CGRectIsEmpty(v39))
    {
      v40.origin.double x = v23;
      v40.origin.double y = v24;
      v40.size.double width = v25;
      v40.size.double height = v26;
      if (!CGRectIsNull(v40))
      {
        v41.origin.double x = v27;
        v41.origin.double y = v28;
        v41.size.double width = v29;
        v41.size.double height = v30;
        if (!CGRectIsEmpty(v41))
        {
          v42.origin.double x = v27;
          v42.origin.double y = v28;
          v42.size.double width = v29;
          v42.size.double height = v30;
          if (!CGRectIsNull(v42))
          {
            v43.origin.double x = v23;
            v43.origin.double y = v24;
            v43.size.double width = v25;
            v43.size.double height = v26;
            CGImageRef v31 = CGImageCreateWithImageInRect(image, v43);
            if (v31)
            {
              long long v32 = v31;
              CGContextSaveGState(v21);
              v44.origin.double x = v27;
              v44.origin.double y = v28;
              v44.size.double width = v29;
              v44.size.double height = v30;
              double MaxY = CGRectGetMaxY(v44);
              v45.origin.double x = v27;
              v45.origin.double y = v28;
              v45.size.double width = v29;
              v45.size.double height = v30;
              CGFloat MinY = CGRectGetMinY(v45);
              CGContextTranslateCTM(v21, 0.0, MaxY + MinY);
              CGContextScaleCTM(v21, 1.0, -1.0);
              v46.origin.double x = v27;
              v46.origin.double y = v28;
              v46.size.double width = v29;
              v46.size.double height = v30;
              CGContextDrawImage(v21, v46, v32);
              CGImageRelease(v32);
              CGContextRestoreGState(v21);
            }
          }
        }
      }
    }
  }
  CGImageRef v35 = CGBitmapContextCreateImage(v21);
  CGContextRelease(v21);
  return v35;
}

void sub_10043EFEC(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGSize size = CGRectNull.size;
  CGPoint origin = CGRectNull.origin;
  remainder.CGPoint origin = origin;
  remainder.CGSize size = size;
  slice.CGPoint origin = origin;
  slice.CGSize size = size;
  v28.CGPoint origin = origin;
  v28.CGSize size = size;
  v29.CGPoint origin = origin;
  v29.CGSize size = size;
  v24.CGPoint origin = origin;
  v24.CGSize size = size;
  v25.CGPoint origin = origin;
  v25.CGSize size = size;
  v26.CGPoint origin = origin;
  v26.CGSize size = size;
  CGRectDivide(*(CGRect *)&a2, &slice, &remainder, a8, CGRectMinYEdge);
  CGRectDivide(remainder, &v29, &v28, a9, CGRectMaxYEdge);
  remainder.CGPoint origin = origin;
  remainder.CGSize size = size;
  v30.origin.double x = a2;
  v30.origin.double y = a3;
  v30.size.double width = a4;
  v30.size.double height = a5;
  CGRectDivide(v30, &v24, &remainder, a6, CGRectMinXEdge);
  CGRectDivide(remainder, &v26, &v25, a7, CGRectMaxXEdge);
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 16;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = v18;
    do
    {
      *(CGRect *)(v20 - 16) = CGRectIntersection(*(CGRect *)((char *)&slice + v19), *(&v24 + v17));
      v20 += 96;
      v19 += 32;
    }
    while (v19 != 96);
    ++v17;
    v18 += 32;
  }
  while (v17 != 3);
}

void sub_10043F530(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043F574(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043F63C(uint64_t a1)
{
  id v2 = objc_alloc((Class)UIImage);
  id v3 = [*(id *)(a1 + 32) CGImage];
  [*(id *)(a1 + 32) scale];
  id v5 = objc_msgSend(v2, "initWithCGImage:scale:orientation:", v3, objc_msgSend(*(id *)(a1 + 32), "imageOrientation"), v4);
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL v7 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = v5;
}

void sub_10043F914(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043F958(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043FE1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10043FE60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004400E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044012C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044048C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004404D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100441360(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004413A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100441BCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100441C10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100442A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100442A34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100442A44(uint64_t a1)
{
}

void sub_100442A4C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) mostSpecificSelectionOfClass:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100442C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100442C18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) selectionPathWithAppendedSelection:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100442D04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) enumerateSelectionsMostToLeastSpecificInPathUsingBlock:*(void *)(a1 + 40)];
}

id sub_100442DAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) enumerateSelectionsLeastToMostSpecificInPathUsingBlock:*(void *)(a1 + 40)];
}

void sub_100443070(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004430B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100444C80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100444CC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100445600(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v10 = a4;
  double v11 = a3;
  double v12 = a2;
  double v13 = a1;
  BOOL v14 = a1 < a5;
  if (a1 != a5)
  {
    if (a1 >= a5) {
      a1 = a5;
    }
    if (!v14)
    {
      a2 = a6;
      a3 = a7;
    }
    double v20 = a7;
    if (!v14) {
      a4 = a8;
    }
    double v15 = a8;
    CGRectGetMaxX(*(CGRect *)&a1);
    a8 = v15;
    a7 = v20;
  }
  if (v12 != a6)
  {
    if (v12 >= a6) {
      double v16 = a8;
    }
    else {
      double v16 = v10;
    }
    if (v12 >= a6) {
      double v17 = a7;
    }
    else {
      double v17 = v11;
    }
    if (v12 >= a6) {
      double v18 = a6;
    }
    else {
      double v18 = v12;
    }
    if (v12 >= a6) {
      double v19 = a5;
    }
    else {
      double v19 = v13;
    }
    CGRectGetMaxY(*(CGRect *)(&v16 - 3));
  }
}

BOOL sub_100445AC0(id *a1, void *a2)
{
  id v3 = a2;
  if ([a1[4] distanceToSelectedSearchReference:v3] == a1[6])
  {
    double v4 = [a1[5] infoForSelectionPath];
    id v5 = [v3 infoForSelectionPath];
    BOOL v6 = v4 == v5;
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

uint64_t sub_100445C48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v14 = 0;
  BOOL v7 = [*(id *)(a1 + 32) interactiveCanvasController];
  double v8 = objc_opt_class();
  uint64_t v9 = __CRLAccessibilityCastAsSafeCategory(v8, (uint64_t)v7, 1, &v14);
  if (v14) {
    abort();
  }
  double v10 = (void *)v9;

  double v11 = [v10 crlaxRepForSearchReference:v5];
  uint64_t v12 = [v11 isSelected] ^ 1;

  return v12;
}

uint64_t sub_100445D0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 distanceToSelectedSearchReference:a2];
  id v8 = [*(id *)(a1 + 32) distanceToSelectedSearchReference:v6];

  if (v7 < v8) {
    return -1;
  }
  else {
    return v7 > v8;
  }
}

void sub_100446134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10044614C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10044615C(uint64_t a1)
{
}

void sub_100446164(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 56), "crlaxTargetClass")), "initWithRep:knob:", *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1004467F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044683C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100446880(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004468C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004469A0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  ++*(_DWORD *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == *(_DWORD *)(v2 + 12))
  {
    dispatch_suspend(*(dispatch_object_t *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100446A78;
  _OWORD v5[3] = &unk_1014CAE00;
  id v4 = *(id *)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  dispatch_async(v3, v5);
}

void sub_100446A78(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  --*(_DWORD *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == *(_DWORD *)(v2 + 12) - 1)
  {
    dispatch_resume(*(dispatch_object_t *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
}

void sub_100446B90(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  ++*(_DWORD *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == *(_DWORD *)(v2 + 12))
  {
    dispatch_suspend(*(dispatch_object_t *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100446C68;
  _OWORD v5[3] = &unk_1014CAE00;
  id v4 = *(id *)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  dispatch_barrier_sync(v3, v5);
}

void sub_100446C68(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  --*(_DWORD *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == *(_DWORD *)(v2 + 12) - 1)
  {
    dispatch_resume(*(dispatch_object_t *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
}

void sub_1004472E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100447328(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100447720(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100447764(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004477A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004477EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100447830(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 73) = 1;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 49);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100447FE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100448024(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100448068(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004480AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004480F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100448134(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100448178(uint64_t a1)
{
  id v2 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(*(void *)(a1 + 32) + 65) count]);
  id v6 = +[NSNumberFormatter localizedStringFromNumber:v2 numberStyle:1];

  id v3 = +[NSBundle mainBundle];
  uint64_t v4 = [v3 localizedStringForKey:@"%@ movies couldn’t be updated." value:0 table:0];
  id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v4, v6);

  [*(id *)(a1 + 40) presentErrors:*(void *)(*(void *)(a1 + 32) + 65) withLocalizedDescription:v5 completionHandler:0];
}

void sub_100448530(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100448574(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double sub_100449F38(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1] - *a1;
  if (v4 >= 0x3FFFFFFF9)
  {
    int v8 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA550);
    }
    long long v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B35E0(v8, v9);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA570);
    }
    double v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = +[CRLAssertionHandler packedBacktraceString];
      sub_10106CDAC(v11, v14, v8, (os_log_t)v10);
    }

    uint64_t v12 = +[NSString stringWithUTF8String:"CGFloat _CRLPKVectorSafeGet(std::vector<CGFloat>, int)"];
    double v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCalculusUtility.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v12 file:v13 lineNumber:16 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

    uint64_t v3 = *a1;
    int v5 = 2147483646;
  }
  else
  {
    int v5 = (v4 >> 3) - 1;
  }
  if (v5 >= a2) {
    int v5 = a2;
  }
  return *(double *)(v3 + 8 * (v5 & ~(v5 >> 31)));
}

void sub_10044A104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10044A12C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044A170(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044A1B4(int a1, int a2, uint64_t a3)
{
  unsigned int v3 = a1 - 1;
  if (a1 >= 1)
  {
    if ((a2 & ~(a2 >> 31)) < v3) {
      unsigned int v3 = a2 & ~(a2 >> 31);
    }
    signed int v5 = (((_BYTE)a1 - (_BYTE)v3) & 1) + v3;
    int v7 = a1 - v5;
    if (a1 >= v5) {
      int v8 = a1 - v5;
    }
    else {
      int v8 = v7 + 1;
    }
    int v9 = v8 >> 1;
    float v6 = 2.0 / (double)(v5 + a1);
    double v10 = v6;
    if (v7 >= 2)
    {
      int v11 = 0;
      uint64_t v12 = (void *)(a3 + 16);
      double v13 = *(double **)(a3 + 8);
      do
      {
        double v14 = (double)v11 / (double)v9 * v10;
        if ((unint64_t)v13 >= *v12)
        {
          double v16 = *(double **)a3;
          uint64_t v17 = ((uint64_t)v13 - *(void *)a3) >> 3;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
LABEL_65:
          }
            sub_100004E40();
          uint64_t v19 = *v12 - (void)v16;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            long long v21 = (char *)sub_10002B494(a3 + 16, v20);
            double v16 = *(double **)a3;
            double v13 = *(double **)(a3 + 8);
          }
          else
          {
            long long v21 = 0;
          }
          long long v22 = (double *)&v21[8 * v17];
          *long long v22 = v14;
          double v15 = v22 + 1;
          while (v13 != v16)
          {
            uint64_t v23 = *((void *)v13-- - 1);
            *((void *)v22-- - 1) = v23;
          }
          *(void *)a3 = v22;
          *(void *)(a3 + 8) = v15;
          *(void *)(a3 + 16) = &v21[8 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          double *v13 = v14;
          double v15 = v13 + 1;
        }
        *(void *)(a3 + 8) = v15;
        ++v11;
        double v13 = v15;
      }
      while (v11 != v9);
    }
    if (v5)
    {
      int v24 = 0;
      CGRect v25 = (void *)(a3 + 16);
      CGRect v26 = *(double **)(a3 + 8);
      do
      {
        if ((unint64_t)v26 >= *v25)
        {
          CGRect v28 = *(double **)a3;
          uint64_t v29 = ((uint64_t)v26 - *(void *)a3) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_65;
          }
          uint64_t v31 = *v25 - (void)v28;
          if (v31 >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            long long v33 = (char *)sub_10002B494(a3 + 16, v32);
            CGRect v28 = *(double **)a3;
            CGRect v26 = *(double **)(a3 + 8);
          }
          else
          {
            long long v33 = 0;
          }
          __int16 v34 = (double *)&v33[8 * v29];
          double *v34 = v10;
          CGFloat v27 = v34 + 1;
          while (v26 != v28)
          {
            uint64_t v35 = *((void *)v26-- - 1);
            *((void *)v34-- - 1) = v35;
          }
          *(void *)a3 = v34;
          *(void *)(a3 + 8) = v27;
          *(void *)(a3 + 16) = &v33[8 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *CGRect v26 = v10;
          CGFloat v27 = v26 + 1;
        }
        *(void *)(a3 + 8) = v27;
        ++v24;
        CGRect v26 = v27;
      }
      while (v24 != v5);
    }
    if (v7 >= 2)
    {
      int v36 = 0;
      CGAffineTransform v37 = (void *)(a3 + 16);
      __int16 v38 = *(double **)(a3 + 8);
      do
      {
        double v39 = (1.0 - (double)v36 / (double)v9) * v10;
        if ((unint64_t)v38 >= *v37)
        {
          CGRect v41 = *(double **)a3;
          uint64_t v42 = ((uint64_t)v38 - *(void *)a3) >> 3;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            goto LABEL_65;
          }
          uint64_t v44 = *v37 - (void)v41;
          if (v44 >> 2 > v43) {
            unint64_t v43 = v44 >> 2;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            CGRect v46 = (char *)sub_10002B494(a3 + 16, v45);
            CGRect v41 = *(double **)a3;
            __int16 v38 = *(double **)(a3 + 8);
          }
          else
          {
            CGRect v46 = 0;
          }
          uint64_t v47 = (double *)&v46[8 * v42];
          *uint64_t v47 = v39;
          CGRect v40 = v47 + 1;
          while (v38 != v41)
          {
            uint64_t v48 = *((void *)v38-- - 1);
            *((void *)v47-- - 1) = v48;
          }
          *(void *)a3 = v47;
          *(void *)(a3 + 8) = v40;
          *(void *)(a3 + 16) = &v46[8 * v45];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *__int16 v38 = v39;
          CGRect v40 = v38 + 1;
        }
        *(void *)(a3 + 8) = v40;
        ++v36;
        __int16 v38 = v40;
      }
      while (v36 != v9);
    }
  }
}

void sub_10044A4CC(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a3 + 16;
    do
    {
      uint64_t v8 = a2[1] - *a2;
      if (v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v8 >> 3;
        double v11 = 0.0;
        do
        {
          int v12 = (int)v10 / -2;
          if ((v6 + v9 + v12 + 1) >> 31)
          {
            unsigned int v17 = +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014FA590);
            }
            unint64_t v18 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109890;
              unsigned int v40 = v17;
              __int16 v41 = 2082;
              uint64_t v42 = "void _CRLPKConvolve(std::vector<CGFloat>, std::vector<CGFloat>, std::vector<CGFloat> &)";
              __int16 v43 = 2082;
              uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCalculusUtility.mm";
              __int16 v45 = 1024;
              int v46 = 64;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
            }
            unsigned int v19 = v17;
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014FA5B0);
            }
            unint64_t v20 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
            {
              uint64_t v22 = +[CRLAssertionHandler packedBacktraceString];
              *(_DWORD *)buf = 67109378;
              unsigned int v40 = v19;
              __int16 v41 = 2114;
              uint64_t v42 = (const char *)v22;
              uint64_t v23 = (void *)v22;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
            }
            uint64_t v35 = +[NSString stringWithUTF8String:"void _CRLPKConvolve(std::vector<CGFloat>, std::vector<CGFloat>, std::vector<CGFloat> &)"];
            long long v21 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCalculusUtility.mm"];
            +[CRLAssertionHandler handleFailureInFunction:v35 file:v21 lineNumber:64 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

            int v13 = 0x7FFFFFFF;
          }
          else
          {
            int v13 = v6 + v9 + v12 + 1;
          }
          __p = 0;
          CGAffineTransform v37 = 0;
          uint64_t v38 = 0;
          sub_1002572E8(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
          double v14 = sub_100449F38((uint64_t *)&__p, v13);
          unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 3;
          if (v10 <= v9) {
            sub_1001AF1A0();
          }
          double v15 = v14;
          double v16 = *(double *)(*a2 + 8 * v9);
          if (__p)
          {
            CGAffineTransform v37 = __p;
            operator delete(__p);
            unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 3;
          }
          double v11 = v11 + v15 * v16;
          ++v9;
        }
        while (v9 < v10);
      }
      else
      {
        double v11 = 0.0;
      }
      CGRect v25 = *(double **)(a3 + 8);
      unint64_t v24 = *(void *)(a3 + 16);
      if ((unint64_t)v25 >= v24)
      {
        CGFloat v27 = *(double **)a3;
        uint64_t v28 = ((uint64_t)v25 - *(void *)a3) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          sub_100004E40();
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v32 = (char *)sub_10002B494(v7, v31);
          CGFloat v27 = *(double **)a3;
          CGRect v25 = *(double **)(a3 + 8);
        }
        else
        {
          unint64_t v32 = 0;
        }
        long long v33 = (double *)&v32[8 * v28];
        *long long v33 = v11;
        CGRect v26 = v33 + 1;
        while (v25 != v27)
        {
          uint64_t v34 = *((void *)v25-- - 1);
          *((void *)v33-- - 1) = v34;
        }
        *(void *)a3 = v33;
        *(void *)(a3 + 8) = v26;
        *(void *)(a3 + 16) = &v32[8 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *CGRect v25 = v11;
        CGRect v26 = v25 + 1;
      }
      *(void *)(a3 + 8) = v26;
      ++v6;
    }
    while (v6 < (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  }
}

void sub_10044A8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_10044A940(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044A984(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044A9C8(uint64_t *a1, uint64_t a2)
{
  __p = 0;
  __int16 v41 = 0;
  uint64_t v42 = 0;
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    signed int v5 = 0;
    unint64_t v6 = 0;
    do
    {
      *(void *)double v39 = 0;
      *(void *)&v39[24] = unk_101175CF0;
      *(_OWORD *)&v39[8] = *(_OWORD *)(v2 + 16 * v6);
      if (v5 >= v42)
      {
        uint64_t v7 = (char *)__p;
        unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 4);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0x333333333333333) {
          sub_100004E40();
        }
        if (0x999999999999999ALL * ((v42 - (unsigned char *)__p) >> 4) > v9) {
          unint64_t v9 = 0x999999999999999ALL * ((v42 - (unsigned char *)__p) >> 4);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v42 - (unsigned char *)__p) >> 4) >= 0x199999999999999) {
          unint64_t v10 = 0x333333333333333;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10)
        {
          double v11 = (char *)sub_1001725F0((uint64_t)&v42, v10);
          uint64_t v7 = (char *)__p;
          signed int v5 = v41;
        }
        else
        {
          double v11 = 0;
        }
        int v12 = &v11[80 * v8];
        *((_OWORD *)v12 + 2) = xmmword_101175CF8;
        *((_OWORD *)v12 + 3) = unk_101175D08;
        *((_OWORD *)v12 + 4) = xmmword_101175D18;
        *(_OWORD *)int v12 = *(_OWORD *)v39;
        *((_OWORD *)v12 + 1) = *(_OWORD *)&v39[16];
        if (v5 == v7)
        {
          unsigned int v17 = &v11[80 * v8];
        }
        else
        {
          int v13 = &v11[80 * v8];
          do
          {
            *((_OWORD *)v13 - 5) = *((_OWORD *)v5 - 5);
            long long v14 = *((_OWORD *)v5 - 4);
            long long v15 = *((_OWORD *)v5 - 3);
            long long v16 = *((_OWORD *)v5 - 1);
            unsigned int v17 = v13 - 80;
            *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
            *((_OWORD *)v13 - 1) = v16;
            *((_OWORD *)v13 - 4) = v14;
            *((_OWORD *)v13 - 3) = v15;
            v5 -= 80;
            v13 -= 80;
          }
          while (v5 != v7);
        }
        signed int v5 = v12 + 80;
        __p = v17;
        __int16 v41 = v12 + 80;
        uint64_t v42 = &v11[80 * v10];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_OWORD *)signed int v5 = *(_OWORD *)v39;
        *((_OWORD *)v5 + 3) = unk_101175D08;
        *((_OWORD *)v5 + 4) = xmmword_101175D18;
        *((_OWORD *)v5 + 1) = *(_OWORD *)&v39[16];
        *((_OWORD *)v5 + 2) = xmmword_101175CF8;
        v5 += 80;
      }
      __int16 v41 = v5;
      ++v6;
      uint64_t v2 = *a1;
      uint64_t v18 = a1[1];
    }
    while (v6 < (v18 - *a1) >> 4);
    if (v18 != v2)
    {
      unint64_t v19 = 0;
      do
      {
        double v20 = sub_10031C030(&__p, v19, (double (*)(void, double))sub_10031BDCC, 0.0);
        double v22 = v21;
        double v23 = sub_10031C030(&__p, v19, (double (*)(void, double))sub_10031BEAC, 0.0);
        double v25 = v24;
        double v26 = pow(v22 * v22 + v20 * v20, 1.5);
        if (v26 <= 0.001) {
          double v27 = 100.0;
        }
        else {
          double v27 = fabs((v20 * v25 - v22 * v23) / v26);
        }
        unint64_t v29 = *(double **)(a2 + 8);
        unint64_t v28 = *(void *)(a2 + 16);
        if ((unint64_t)v29 >= v28)
        {
          unint64_t v31 = *(double **)a2;
          uint64_t v32 = ((uint64_t)v29 - *(void *)a2) >> 3;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_100004E40();
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            int v36 = (char *)sub_10002B494(a2 + 16, v35);
            unint64_t v31 = *(double **)a2;
            unint64_t v29 = *(double **)(a2 + 8);
          }
          else
          {
            int v36 = 0;
          }
          CGAffineTransform v37 = (double *)&v36[8 * v32];
          *CGAffineTransform v37 = v27;
          uint64_t v30 = v37 + 1;
          while (v29 != v31)
          {
            uint64_t v38 = *((void *)v29-- - 1);
            *((void *)v37-- - 1) = v38;
          }
          *(void *)a2 = v37;
          *(void *)(a2 + 8) = v30;
          *(void *)(a2 + 16) = &v36[8 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *unint64_t v29 = v27;
          uint64_t v30 = v29 + 1;
        }
        *(void *)(a2 + 8) = v30;
        ++v19;
      }
      while (v19 < (a1[1] - *a1) >> 4);
    }
    if (__p)
    {
      __int16 v41 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_10044AD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044AD6C(uint64_t a1, uint64_t a2)
{
  long long v15 = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  int v12 = 0;
  sub_100174154(&v12, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  sub_10044A9C8((uint64_t *)&v12, (uint64_t)&v15);
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_10044A1B4(15, 5, (uint64_t)&v9);
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1002572E8(&v6, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 3);
  __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_1002572E8(&__p, v9, (uint64_t)v10, (v10 - (unsigned char *)v9) >> 3);
  sub_10044A4CC((uint64_t)&v6, &__p, a2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
  if (v15)
  {
    long long v16 = v15;
    operator delete(v15);
  }
}

void sub_10044AE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  unint64_t v19 = *(void **)(v17 - 40);
  if (v19)
  {
    *(void *)(v17 - 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

id sub_10044B568(uint64_t a1)
{
  return [*(id *)(a1 + 32) setNeedsDisplayInRect:*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64)];
}

void sub_10044BE4C(uint64_t a1, unint64_t a2, double a3, double a4)
{
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = a2 / v6;
  unint64_t v8 = a2 % v6;
  unint64_t v9 = v6 - 1;
  unint64_t v10 = (double *)(*(void *)(a1 + 32) + 16);
  if (v8 == v9)
  {
    double v12 = *v10;
    double v11 = *(double *)(*(void *)(a1 + 32) + 24);
  }
  else
  {
    double v12 = *v10;
    double v11 = *(double *)(*(void *)(a1 + 32) + 24);
    if (v7 != *(void *)(a1 + 56) - 1) {
      goto LABEL_5;
    }
  }
  CGRect v30 = *(CGRect *)(a1 + 64);
  v29.origin.double x = v30.origin.x + v12 * (double)v8;
  v29.origin.double y = v30.origin.y + v11 * (double)v7;
  v29.size.double width = v12;
  v29.size.double height = v11;
  *(CGRect *)&a3 = CGRectIntersection(v29, v30);
  double v12 = v13;
  double v11 = v14;
LABEL_5:
  long long v15 = +[NSThread currentThread];
  unsigned int v16 = [v15 isMainThread];

  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v17 = (char *)[*(id *)(a1 + 40) count];
  if (!v17) {
    goto LABEL_16;
  }
  uint64_t v18 = v17 - 1;
  while (1)
  {
    double v25 = [*(id *)(a1 + 40) objectAtIndex:v18];
    [(CRLTilingTileLayer *)v25 bounds];
    if (v20 == v12 && v19 == v11) {
      break;
    }

    if (--v18 == (char *)-1) {
      goto LABEL_16;
    }
  }
  [*(id *)(a1 + 40) removeObjectAtIndex:v18];
  double v22 = v25;
  if (v25)
  {
    char v23 = 0;
  }
  else
  {
LABEL_16:
    double v26 = objc_alloc_init(CRLTilingTileLayer);
    double v24 = [*(id *)(a1 + 32) contentsFormat];
    [(CRLTilingTileLayer *)v26 setContentsFormat:v24];

    [(CRLTilingTileLayer *)v26 setZPosition:-10000.0];
    -[CRLTilingTileLayer setOpaque:](v26, "setOpaque:", [*(id *)(a1 + 32) isOpaque]);
    -[CRLTilingTileLayer setAnchorPoint:](v26, "setAnchorPoint:", CGPointZero.x, CGPointZero.y);
    [*(id *)(a1 + 32) contentsScale];
    -[CRLTilingTileLayer setContentsScale:](v26, "setContentsScale:");
    -[CRLTilingTileLayer setDrawsAsynchronously:](v26, "setDrawsAsynchronously:", [*(id *)(a1 + 32) drawsAsynchronously]);
    [*(id *)(a1 + 32) insertSublayer:v26 atIndex:0];
    double v22 = v26;
    char v23 = 1;
  }
  double v27 = v22;
  [(CRLTilingTileLayer *)v22 setIndex:a2];
  -[CRLTilingTileLayer updateFrameWithTileSize:tilesWide:tilesHigh:](v27, "updateFrameWithTileSize:tilesWide:tilesHigh:", *(void *)(a1 + 48), *(void *)(a1 + 56), *(double *)(*(void *)(a1 + 32) + 16), *(double *)(*(void *)(a1 + 32) + 24));
  if ((v23 & 1) == 0) {
    [(CRLTilingTileLayer *)v27 setNeedsDisplay];
  }
}

void sub_10044C370(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044C3B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044C3F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044C43C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044C8E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044C928(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044E76C(uint64_t a1, uint64_t a2, double a3, double a4, long double a5, long double a6, long double a7, long double a8)
{
  double y = CGPointZero.y;
  if (sub_100064084(CGPointZero.x, y, a5, a6) || sub_100064084(CGPointZero.x, y, a7, a8))
  {
    *(void *)(*(void *)(a1 + 32) + 8 * a2) = 0;
    return;
  }
  double v15 = sub_100065C1C(a5, a6);
  double v16 = sub_100065C1C(a7, a8);
  sub_10006651C(v15, v16);
  double v18 = fabs(v17);
  double v19 = v18 / 0.785398163;
  BOOL v20 = v18 < INFINITY;
  BOOL v21 = v18 <= INFINITY;
  double v22 = 0.0;
  if (v20) {
    double v22 = v19;
  }
  if (v21) {
    double v23 = v22;
  }
  else {
    double v23 = v19;
  }
  uint64_t v24 = *(void *)(a1 + 32);
  *(double *)(v24 + 8 * a2) = v23;
  double v25 = sub_100065398(a5, a6);
  double v26 = fmin(v25 / sub_100065398(a7, a8), 3.0);
  if (v26 <= 1.0)
  {
    if (v26 >= 1.0) {
      return;
    }
    double v27 = v23 + (v26 + -1.0) * (v26 + -1.0) * 2.0;
  }
  else
  {
    double v27 = v23 + (v26 + -1.0) * (v26 + -1.0);
  }
  *(double *)(v24 + 8 * a2) = v27;
}

double sub_10044E8B0(double a1, double a2)
{
  double v3 = sub_100407E48(a1, -1.57079633, 1.57079633);
  double v4 = sub_100407E48(a2, -1.57079633, 1.57079633);
  float v5 = v3;
  __float2 v6 = __sincosf_stret(v5);
  float v7 = v4;
  __float2 v8 = __sincosf_stret(v7);
  return ((v8.__sinval + v6.__sinval * -0.0625)
        * ((v6.__sinval + v8.__sinval * -0.0625)
         * 1.41421354)
        * (v6.__cosval - v8.__cosval)
        + 2.0)
       / (v6.__cosval * 1.85410202 + 3.0 + v8.__cosval * 1.14589798);
}

uint64_t sub_10044E978(uint64_t a1, uint64_t a2, __CLPK_doublereal *a3, __CLPK_doublereal *a4, __CLPK_doublereal *a5, __CLPK_doublereal *a6, uint64_t a7)
{
  LODWORD(__nrhs) = 0;
  *(void *)__ldb = 0;
  if (a1 != (int)a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA6E0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B37B4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA700);
    }
    __float2 v8 = off_10166B4A0;
    if (!os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  HIDWORD(__nrhs) = a1;
  if (a2 != (int)a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA720);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B37B4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FA740);
    }
    __float2 v8 = off_10166B4A0;
    if (!os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  LODWORD(__nrhs) = a2;
  if (a7 == (int)a7)
  {
    __ldb[1] = a7;
    dgtsv_((__CLPK_integer *)&__nrhs + 1, (__CLPK_integer *)&__nrhs, a3, a4, a5, a6, &__ldb[1], __ldb);
    return __ldb[0];
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FA760);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010B37B4();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FA780);
  }
  __float2 v8 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
LABEL_28:
  }
    sub_1010668E0(v8);
LABEL_29:
  unint64_t v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "__CLPK_integer dgtsv(long, long, __CLPK_doublereal *, __CLPK_doublereal *, __CLPK_doublereal *, __CLPK_doublereal *, long)", *(void *)__ldb, __nrhs);
  unint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLEditableBezierPathSmoothing.m"];
  +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:356 isFatal:0 description:"Out-of-bounds type assignment failed"];

  return 0;
}

void sub_10044EC68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044ECAC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044ECF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044ED34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044ED78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10044EDBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_10044EE00(void *a1, void *a2)
{
  id v3 = a2;
  double v4 = [a1 objectForKey:@"index"];
  signed int v5 = [v4 intValue];

  __float2 v6 = [v3 objectForKey:@"index"];

  signed int v7 = [v6 intValue];
  if (v5 > v7) {
    return -1;
  }
  else {
    return v5 < v7;
  }
}

void sub_1004500E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100450124(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100450168(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004501AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100450DF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100450E34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004511DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100451220(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100451264(uint64_t a1)
{
}

void sub_10045126C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v2];
  id v35 = v2;
  id v41 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v2];
  uint64_t v38 = +[NSMutableArray array];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v36 = a1;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v45 objects:v49 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v43 = 0;
    char v42 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)v46;
    id v39 = v4;
    id v40 = v3;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v46 != v9) {
          objc_enumerationMutation(v4);
        }
        double v11 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        double v12 = [v11 boardItem];
        if (v12)
        {
          double v13 = +[CRLIngestibleBoardItemAndDescription ingestibleBoardItemAndDescriptionWithBoardItem:v12 description:&__NSDictionary0__struct];
          [v3 addObject:v13];

          id v14 = [v11 embeddedDataLength];
          v8 += (uint64_t)v14;
          v7 += (uint64_t)[v11 uploadDataLength] + (void)v14;
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            char v42 = 1;
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              unsigned __int8 v18 = [v12 isAudioOnly];
              BYTE4(v43) |= v18;
              LOBYTE(v43) = v18 ^ 1 | v43;
            }
          }
        }
        else
        {
          double v15 = [v11 error];
          double v16 = v15;
          if (v15)
          {
            double v17 = [v15 domain];
            if (v17 == @"com.apple.freeform.CRLErrorDomainInfoImporter")
            {
              id v19 = [v16 code];

              if (v19 == (id)102) {
                [v38 addObject:v16];
              }
            }
            else
            {
            }
            uint64_t v20 = objc_opt_class();
            BOOL v21 = [v16 userInfo];
            double v22 = [v21 objectForKeyedSubscript:@"CRLBoardItemImporterErrorMediaTypeKey"];
            double v23 = sub_1002469D0(v20, v22);

            if (v23)
            {
              id v24 = [v23 integerValue];
              id v4 = v39;
              if (v24 == (id)102)
              {
                BYTE4(v43) = 1;
                id v3 = v40;
              }
              else
              {
                id v3 = v40;
                if (v24 == (id)101)
                {
                  LOBYTE(v43) = 1;
                }
                else if (v24 == (id)100)
                {
                  char v42 = 1;
                }
              }
            }
            else
            {
              id v4 = v39;
              id v3 = v40;
            }
            [v41 addObject:v16];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v45 objects:v49 count:16];
    }
    while (v6);
  }
  else
  {
    uint64_t v43 = 0;
    char v42 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }

  double v25 = *(void **)(v36 + 40);
  id v44 = 0;
  unsigned int v26 = [v25 p_validateSizeOfImportWithTotalSize:v7 totalEmbeddedDataSize:v8 insertedImage:(v42 & 1) insertedMovie:(v43 & 1) insertedAudio:(BYTE4(v43) & 1) preexistingTooLargeErrors:v38 error:&v44];
  id v27 = v44;
  if (!v26 || [v38 count])
  {
    if (!v27 || [v38 count] == (id)1 && v35 == (id)1)
    {
      id v28 = v38;

      id v41 = v28;
    }
    else
    {
      [v41 removeAllObjects];
      [v41 addObject:v27];
    }

    id v3 = 0;
  }
  uint64_t v29 = *(void *)(v36 + 40);
  CGRect v30 = *(void **)(v29 + 48);
  *(void *)(v29 + 48) = v3;
  id v31 = v3;

  uint64_t v32 = *(void *)(v36 + 40);
  unint64_t v33 = *(void **)(v32 + 56);
  *(void *)(v32 + 56) = v41;
  id v34 = v41;

  (*(void (**)(void))(*(void *)(v36 + 48) + 16))();
}

void sub_100451774(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  id v3 = [*(id *)(*(void *)(a1 + 32) + 24) importers];
  [v3 makeObjectsPerformSelector:"cancel"];
}

void sub_100451978(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) importer:*(void *)(a1 + 40) needsMediaCompatibilityFeedbackWithReasons:*(void *)(a1 + 56) forMediaType:*(void *)(a1 + 64) usingBlock:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) p_boardItemProviderDidRequestMediaCompatibilityRequirement:*(void *)(a1 + 40)];
}

void sub_100451A68(uint64_t a1)
{
  [*(id *)(a1 + 32) p_boardItemProviderDidRequestMediaCompatibilityRequirement:*(void *)(a1 + 40)];
}

void sub_100451CD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100451D1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100451D60(uint64_t a1, int a2, char a3, char a4)
{
  if (a2) {
    [*(id *)(a1 + 32) cancel];
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100451E04;
  void v9[3] = &unk_1014FA910;
  v9[4] = v7;
  char v10 = a3;
  char v11 = a4;
  dispatch_async(v8, v9);
}

void sub_100451E04(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) completeImportWithCompatibilityOnAllDevices:*(unsigned __int8 *)(a1 + 40) allowHEVCContent:*(unsigned __int8 *)(a1 + 41)];
}

void sub_100452418(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045245C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004524A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004524E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004528E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452928(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045296C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004529B0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452C74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452CB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452CFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452D40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452EF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100452F3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004534D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045351C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100453560(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004535A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100453764(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004537A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100453978(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004539BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100454998()
{
  return 0x4000000;
}

uint64_t CRLWPShapeLayout.columnsAreLeftToRight.getter()
{
  return 1;
}

unint64_t sub_1004549A8()
{
  if (qword_1016A9B40 != -1) {
    dispatch_once(&qword_1016A9B40, &stru_1014FAC18);
  }
  return atomic_load(&qword_10166E768);
}

void sub_1004549F0(id a1)
{
  id v1 = +[CRLCapabilities currentCapabilities];
  id v2 = [v1 physicalMemory];

  if ((unint64_t)v2 >= 0x40000001)
  {
    if ((unint64_t)v2 > 0x80000000) {
      return;
    }
    unint64_t v3 = 0x1000000;
  }
  else
  {
    unint64_t v3 = 0x400000;
  }
  atomic_store(v3, &qword_10166E768);
}

double sub_100454A60()
{
  return 4096.0;
}

double sub_100454A70()
{
  return 3000.0;
}

uint64_t sub_100454A80(uint64_t a1)
{
  return qword_101178A50[a1];
}

double sub_100454A90(uint64_t a1)
{
  return dbl_101178A70[2 * a1];
}

uint64_t sub_100454AA4(uint64_t a1)
{
  return qword_101178AB0[a1];
}

id sub_100454AB4(void *a1, void *a2, uint64_t a3, void *a4, double a5, double a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a4;
  [v11 naturalSize];
  double v15 = v14;
  double v17 = v16;
  uint64_t v18 = objc_opt_class();
  id v19 = sub_1002469D0(v18, v11);
  uint64_t v20 = v19;
  if (v19) {
    BOOL v21 = v15 <= a5;
  }
  else {
    BOOL v21 = 0;
  }
  BOOL v22 = v21 && v17 <= a6;
  if (!v22
    || (a3 & 4) != 0 && ([v19 isOpaque] & 1) != 0
    || ([v20 imageData],
        double v23 = objc_claimAutoreleasedReturnValue(),
        char v24 = sub_100454C50(v23),
        v23,
        (v24 & 1) == 0))
  {
    unsigned int v26 = [v12 stringByDeletingPathExtension];
    id v27 = v26;
    if (!v26 || ![(__CFString *)v26 length])
    {

      id v27 = @"image";
    }
    id v28 = [(__CFString *)v27 stringByAppendingString:@"-small"];
    uint64_t v29 = -[CRLImageResamplingOperation initWithImageProvider:desiredSize:assetOwner:]([CRLImageResamplingOperation alloc], "initWithImageProvider:desiredSize:assetOwner:", v11, v13, a5, a6);
    [(CRLImageResamplingOperation *)v29 setDisplayName:v28];
    double v25 = [(CRLImageResamplingOperation *)v29 performResampleOperationWithResampleOptions:a3 bitmapContextOptions:9];
  }
  else
  {
    double v25 = 0;
  }

  return v25;
}

uint64_t sub_100454C50(void *a1)
{
  id v1 = a1;
  if (sub_1004565A4(v1))
  {
    if ((unint64_t)[v1 length] < 0x4000001)
    {
      uint64_t v10 = 1;
    }
    else
    {
      id v2 = +[CRLImageProviderPool sharedPool];
      unint64_t v3 = [v2 temporaryProviderForAsset:v1 shouldValidate:0];

      uint64_t v4 = objc_opt_class();
      id v5 = sub_1002469D0(v4, v3);
      id v6 = (CGImageSource *)[v5 CGImageSource];
      if (v6)
      {
        uint64_t v7 = CGImageSourceGetType(v6);
        if (v7)
        {
          uint64_t v8 = sub_1000304B8();
          unsigned int v9 = [v7 crl_conformsToUTI:v8];

          uint64_t v10 = v9 ^ 1;
        }
        else
        {
          uint64_t v10 = 1;
        }
      }
      else
      {
        uint64_t v10 = 1;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

_TtC8Freeform27CRLPreinsertionAssetWrapper *sub_100454D5C(void *a1, uint64_t a2, void *a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = a3;
  if (!v9)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAC38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B40BC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAC58);
    }
    id v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v11);
    }
    id v12 = +[NSString stringWithUTF8String:"CRLPreinsertionAssetWrapper *CRLResampleImageData(CRLAsset *__strong, CGSize, CRLImageResampleOptions, __strong id<CRLAssetOwning>)"];
    id v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 200, 0, "invalid nil value for '%{public}s'", "sourceImageData");
  }
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAC78);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B4034();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAC98);
    }
    double v14 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v14);
    }
    double v15 = +[NSString stringWithUTF8String:"CRLPreinsertionAssetWrapper *CRLResampleImageData(CRLAsset *__strong, CGSize, CRLImageResampleOptions, __strong id<CRLAssetOwning>)"];
    double v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    +[CRLAssertionHandler handleFailureInFunction:v15 file:v16 lineNumber:201 isFatal:0 description:"bogus size to resample"];
  }
  double v17 = 0;
  if (v9 && a4 > 0.0 && a5 > 0.0)
  {
    id v19 = +[CRLImageProviderPool sharedPool];
    uint64_t v20 = [v19 temporaryProviderForAsset:v9 shouldValidate:1];

    unsigned __int8 v21 = [v20 isError];
    if ((a2 & 2) != 0)
    {
      if (v21)
      {
LABEL_28:
        double v17 = [[_TtC8Freeform27CRLPreinsertionAssetWrapper alloc] initWithAlreadyInsertedAsset:v9 owner:v10];
LABEL_31:

        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v22 = objc_opt_class();
      double v23 = sub_1002469D0(v22, v20);
      if (!v23) {
        goto LABEL_28;
      }
      char v24 = v23;
      unsigned __int8 v25 = [v23 isValid];

      if ((v25 & 1) == 0) {
        goto LABEL_28;
      }
    }
    unsigned int v26 = [v9 filename];
    sub_100454AB4(v20, v26, a2, v10, a4, a5);
    double v17 = (_TtC8Freeform27CRLPreinsertionAssetWrapper *)objc_claimAutoreleasedReturnValue();

    goto LABEL_31;
  }
LABEL_32:

  return v17;
}

void sub_10045510C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455150(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455194(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004551D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045521C(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    if ([a1 count])
    {
      unint64_t v3 = [a1 objectAtIndex:0];
      id v4 = [v3 pointerValue];

      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10045780C;
      _OWORD v5[3] = &unk_1014FAEE0;
      v5[4] = v4;
      sub_10045949C(1, 0, v5);
    }
  }
}

void sub_1004552DC(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10045780C;
  v1[3] = &unk_1014FAEE0;
  v1[4] = a1;
  sub_10045949C(1, 0, v1);
}

CGContext *sub_100455350(CGImageRef image, char a2, double a3, double a4)
{
  if (a3 == CGSizeZero.width && a4 == CGSizeZero.height)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FACB8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B4150();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FACD8);
    }
    unsigned __int8 v21 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v21);
    }
    uint64_t v22 = +[NSString stringWithUTF8String:"CGContextRef _CRLBitmapContextCreateMatchingImageIfPossible(CGSize, CGImageRef, CRLBitmapContextOptions)"];
    double v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    char v24 = "CRLBitmapContextCreate: Input context size of CGSizeZero illegal.";
    unsigned __int8 v25 = v22;
    unsigned int v26 = v23;
    uint64_t v27 = 241;
    goto LABEL_33;
  }
  if (!image)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FACF8);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B41D8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAD18);
    }
    id v28 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v28);
    }
    uint64_t v22 = +[NSString stringWithUTF8String:"CGContextRef _CRLBitmapContextCreateMatchingImageIfPossible(CGSize, CGImageRef, CRLBitmapContextOptions)"];
    double v23 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    char v24 = "Cannot create a context matching a nil image.";
    unsigned __int8 v25 = v22;
    unsigned int v26 = v23;
    uint64_t v27 = 246;
LABEL_33:
    +[CRLAssertionHandler handleFailureInFunction:v25 file:v26 lineNumber:v27 isFatal:0 description:v24];

    return 0;
  }
  ColorSpace = CGImageGetColorSpace(image);
  if (!CGColorSpaceSupportsOutput(ColorSpace)) {
    return 0;
  }
  double v9 = sub_1000674B8(a3);
  double v11 = v10;
  size_t BitsPerComponent = CGImageGetBitsPerComponent(image);
  size_t BitsPerPixel = CGImageGetBitsPerPixel(image);
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(image);
  switch(CGColorSpaceGetModel(ColorSpace))
  {
    case kCGColorSpaceModelUnknown:
    case kCGColorSpaceModelLab:
    case kCGColorSpaceModelDeviceN:
    case kCGColorSpaceModelIndexed:
    case kCGColorSpaceModelPattern:
    case kCGColorSpaceModelXYZ:
      uint32_t v15 = 0;
      goto LABEL_9;
    case kCGColorSpaceModelMonochrome:
      if (BitsPerPixel <= 0xF)
      {
        if ((BitmapInfo & 0x1F) != 0) {
          uint32_t v15 = 7;
        }
        else {
          uint32_t v15 = 0;
        }
LABEL_9:
        uint64_t v16 = 1;
        goto LABEL_10;
      }
      if (BitsPerPixel > 0x17)
      {
        if (BitsPerPixel >= 0x28) {
          return 0;
        }
        uint32_t v15 = 256;
        uint64_t v16 = 4;
        size_t BitsPerComponent = 32;
      }
      else
      {
        uint64_t v16 = 2;
        if ((BitmapInfo & 0x1F) != 0) {
          int v30 = 1;
        }
        else {
          int v30 = 5;
        }
        BOOL v31 = BitsPerComponent > 8;
        if (BitsPerComponent <= 8) {
          size_t BitsPerComponent = 8;
        }
        else {
          size_t BitsPerComponent = 16;
        }
        if (v31) {
          uint32_t v15 = 0;
        }
        else {
          uint32_t v15 = v30;
        }
        if (!v31) {
          uint64_t v16 = 2;
        }
      }
      goto LABEL_11;
    case kCGColorSpaceModelRGB:
      if (BitsPerPixel < 0x18)
      {
        uint32_t v15 = 6;
        uint64_t v16 = 2;
        size_t BitsPerComponent = 5;
        goto LABEL_11;
      }
      if (BitsPerPixel >= 0x28)
      {
        if (BitsPerPixel > 0x47)
        {
          if (BitsPerPixel > 0x87) {
            return 0;
          }
          int v32 = 256;
          uint64_t v16 = 16;
          size_t BitsPerComponent = 32;
        }
        else
        {
          int v32 = ((int)(BitmapInfo << 23) >> 31) & 0x2100;
          uint64_t v16 = 8;
          size_t BitsPerComponent = 16;
        }
      }
      else
      {
        int v32 = 0;
        uint64_t v16 = 4;
        size_t BitsPerComponent = 8;
      }
      int v33 = v32 | 1;
      int v34 = v32 | 5;
      if ((BitmapInfo & 0x1F) != 0) {
        uint32_t v15 = v33;
      }
      else {
        uint32_t v15 = v34;
      }
      goto LABEL_11;
    case kCGColorSpaceModelCMYK:
      if (BitsPerPixel >= 0x28)
      {
        if (BitsPerPixel >= 0x40)
        {
          if (BitsPerPixel >= 0x80) {
            return 0;
          }
          uint32_t v15 = 256;
          size_t BitsPerComponent = 32;
          uint64_t v16 = 32;
        }
        else
        {
          uint32_t v15 = 0;
          uint64_t v16 = 8;
          size_t BitsPerComponent = 16;
        }
      }
      else
      {
        uint32_t v15 = 0;
        uint64_t v16 = 4;
LABEL_10:
        size_t BitsPerComponent = 8;
      }
LABEL_11:
      size_t v17 = sub_100010D48(v16 * (unint64_t)v9);
      id releaseInfo = objc_alloc_init((Class)NSMutableArray);
      id v19 = CGBitmapContextCreateWithData(0, (unint64_t)v9, (unint64_t)v11, BitsPerComponent, v17, ColorSpace, v15, (CGBitmapContextReleaseDataCallback)sub_10045521C, releaseInfo);
      if (v19)
      {
        uint64_t v20 = +[NSValue valueWithPointer:v19];
        [releaseInfo addObject:v20];

        sub_1004559A4((uint64_t)v19, 0, 0, 0, 0, 1.0);
        if ((a2 & 8) != 0)
        {
          CGContextTranslateCTM(v19, 0.0, (double)(unint64_t)v11);
          CGContextScaleCTM(v19, 1.0, -1.0);
        }
      }

      break;
    default:
      uint32_t v15 = 0;
      uint64_t v16 = 0;
      goto LABEL_11;
  }
  return v19;
}

void sub_100455894(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004558D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045591C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455960(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004559A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  id v12 = +[NSThread currentThread];
  id v13 = [v12 threadDictionary];
  id v19 = [v13 objectForKey:@"CRLTilingTileLayerPositionTLSKey"];

  id v14 = v19;
  if (v19)
  {
    [v19 CGPointValue];
    id v14 = v19;
    double x = v15;
    double y = v17;
  }
  else
  {
    double x = CGPointZero.x;
    double y = CGPointZero.y;
  }
  sub_10045758C(a1, a2, a3, a4, v14 != 0, a5, a6, x, y);
}

CGContext *sub_100455AA8(char a1, double a2, double a3)
{
  if (a2 == CGSizeZero.width && a3 == CGSizeZero.height)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAD38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B4260();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAD58);
    }
    double v15 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v15);
    }
    id releaseInfo = +[NSString stringWithUTF8String:"CGContextRef CRLBitmapContextCreate(CGSize, CRLBitmapContextOptions)"];
    double v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    +[CRLAssertionHandler handleFailureInFunction:releaseInfo file:v17 lineNumber:413 isFatal:0 description:"CRLBitmapContextCreate: Input context size of CGSizeZero illegal."];

    uint64_t v18 = 0;
  }
  else
  {
    size_t v5 = (unint64_t)sub_1000674B8(a2);
    size_t v7 = (unint64_t)v6;
    if (a1)
    {
      if ((a1 & 0x20) != 0) {
        uint64_t v19 = sub_10000FDD8();
      }
      else {
        uint64_t v19 = sub_10000FC28();
      }
      double v11 = (CGColorSpace *)v19;
      uint64_t v14 = 2;
      if ((a1 & 4) == 0) {
        uint64_t v14 = 4;
      }
      uint64_t v20 = 5;
      if ((a1 & 4) != 0)
      {
        int v21 = 4102;
      }
      else
      {
        uint64_t v20 = 8;
        int v21 = 8198;
      }
      if ((a1 & 0x10) != 0) {
        int v22 = 8193;
      }
      else {
        int v22 = 8194;
      }
      if ((a1 & 2) != 0)
      {
        uint64_t v14 = 4;
        size_t v13 = 8;
      }
      else
      {
        size_t v13 = v20;
      }
      if ((a1 & 2) != 0) {
        uint32_t v12 = v22;
      }
      else {
        uint32_t v12 = v21;
      }
    }
    else if ((a1 & 2) != 0)
    {
      double v11 = 0;
      uint32_t v12 = 7;
      size_t v13 = 8;
      uint64_t v14 = 1;
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FAD78);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010B42E8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FAD98);
      }
      uint64_t v8 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v8);
      }
      double v9 = +[NSString stringWithUTF8String:"CGContextRef CRLBitmapContextCreate(CGSize, CRLBitmapContextOptions)"];
      double v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
      +[CRLAssertionHandler handleFailureInFunction:v9 file:v10 lineNumber:464 isFatal:0 description:"Must include a color or alpha channel."];

      double v11 = 0;
      uint32_t v12 = 8194;
      size_t v13 = 8;
      uint64_t v14 = 4;
    }
    size_t v23 = sub_100010D48(v14 * v5);
    id releaseInfo = objc_alloc_init((Class)NSMutableArray);
    uint64_t v18 = CGBitmapContextCreateWithData(0, v5, v7, v13, v23, v11, v12, (CGBitmapContextReleaseDataCallback)sub_10045521C, releaseInfo);
    if (v18)
    {
      char v24 = +[NSValue valueWithPointer:v18];
      [releaseInfo addObject:v24];

      sub_1004559A4((uint64_t)v18, 0, 0, 0, 0, 1.0);
      if ((a1 & 8) != 0)
      {
        CGContextTranslateCTM(v18, 0.0, (double)v7);
        CGContextScaleCTM(v18, 1.0, -1.0);
      }
    }
  }

  return v18;
}

void sub_100455E8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455ED0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455F14(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100455F58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGContext *sub_100455F9C(CGImage *a1, char a2, double a3, double a4)
{
  id result = sub_100455350(a1, a2, a3, a4);
  if (!result)
  {
    ColorSpace = CGImageGetColorSpace(a1);
    if (CGColorSpaceIsWideGamutRGB(ColorSpace)) {
      char v10 = a2 | 0x20;
    }
    else {
      char v10 = a2;
    }
    return sub_100455AA8(v10, a3, a4);
  }
  return result;
}

_TtC8Freeform27CRLPreinsertionAssetWrapper *sub_100456018(void *a1, void *a2, uint64_t a3, char a4)
{
  id v6 = a1;
  id v7 = a2;
  if ((a4 & 1) != 0 || !sub_100456410(v6))
  {
    uint64_t v8 = [[_TtC8Freeform27CRLPreinsertionAssetWrapper alloc] initWithAlreadyInsertedAsset:v6 owner:v7];
    char v10 = +[CRLImageProviderPool sharedPool];
    double v11 = [v10 temporaryProviderForAsset:v6 shouldValidate:1];

    uint64_t v12 = objc_opt_class();
    size_t v13 = sub_1002469D0(v12, v11);
    [v11 naturalSize];
    if (v13)
    {
      double v16 = v14;
      double v17 = v15;
      if (qword_1016A9B40 != -1) {
        dispatch_once(&qword_1016A9B40, &stru_1014FAC18);
      }
      unint64_t v18 = atomic_load(&qword_10166E768);
      double v19 = sub_10006727C(v16, v17, (double)v18);
      double v20 = sub_10006538C(v19);
      double v22 = v21;
      size_t v23 = -[CRLImageResamplingOperation initWithImageProvider:desiredSize:assetOwner:]([CRLImageResamplingOperation alloc], "initWithImageProvider:desiredSize:assetOwner:", v11, v7, v20, v21);
      char v24 = [v6 filename];
      [(CRLImageResamplingOperation *)v23 setDisplayName:v24];

      if ((sub_100454C50(v6) & 1) == 0)
      {
        if (qword_1016A9B40 != -1) {
          dispatch_once(&qword_1016A9B40, &stru_1014FAC18);
        }
        unint64_t v25 = atomic_load(&qword_10166E768);
        double v26 = sub_10006727C(v20, v22, (double)v25);
        double v28 = sub_10006538C(v26);
        double v29 = v27;
        if (v28 == v20 && v27 == v22)
        {
          double v31 = 66108864.0 / (double)(unint64_t)[v6 length];
          if (v31 < 1.0)
          {
            double v32 = sub_10006727C(v20, v22, v22 * v20 * v31 * 0.98);
            double v28 = sub_10006538C(v32);
            double v29 = v33;
          }
        }
        -[CRLImageResamplingOperation setDesiredAlternateSizeIfConvertedToPNG:](v23, "setDesiredAlternateSizeIfConvertedToPNG:", v28, v29);
      }
      int v34 = [(CRLImageResamplingOperation *)v23 performResampleOperationWithResampleOptions:18 bitmapContextOptions:9];
      id v35 = v34;
      if (v34)
      {
        uint64_t v36 = v34;

        uint64_t v8 = v36;
      }
      else
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        id v41 = v9;
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FADB8);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010B4370();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FADD8);
        }
        CGAffineTransform v37 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106590C(v37);
        }
        uint64_t v38 = +[NSString stringWithUTF8String:"CRLPreinsertionAssetWrapper *_CRLConvertImageCRLAssetMakeSafeForiOS(CRLAsset *__strong, __strong id<CRLAssetOwning>, BOOL, BOOL)"];
        id v39 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v38, v39, 554, 0, "invalid nil value for '%{public}s'", "convertedData");

        double v9 = v41;
      }
    }
  }
  else
  {
    uint64_t v8 = [[_TtC8Freeform27CRLPreinsertionAssetWrapper alloc] initWithAlreadyInsertedAsset:v6 owner:v7];
  }

  return v8;
}

uint64_t sub_100456410(void *a1)
{
  id v1 = a1;
  id v2 = [v1 type];
  unint64_t v3 = [v2 identifier];
  v8[0] = @"com.sgi.sgi-image";
  v8[1] = @"com.apple.macpaint-image";
  id v4 = +[NSArray arrayWithObjects:v8 count:2];
  unsigned __int8 v5 = [v3 crl_conformsToAnyUTI:v4];

  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = sub_100454C50(v1);
  }

  return v6;
}

void sub_100456504(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100456548(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

_TtC8Freeform27CRLPreinsertionAssetWrapper *sub_10045658C(void *a1, void *a2)
{
  return sub_100456018(a1, a2, 0, 0);
}

_TtC8Freeform27CRLPreinsertionAssetWrapper *sub_100456598(void *a1, void *a2)
{
  return sub_100456018(a1, a2, 0, 1);
}

uint64_t sub_1004565A4(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] < 0x4000001)
  {
    uint64_t v10 = 1;
  }
  else
  {
    id v2 = [v1 type];
    unint64_t v3 = [v2 identifier];
    id v4 = sub_1000304B8();
    v12[0] = v4;
    unsigned __int8 v5 = [UTTypePNG identifier];
    v12[1] = v5;
    uint64_t v6 = [UTTypeTIFF identifier];
    v12[2] = v6;
    id v7 = [UTTypeGIF identifier];
    v12[3] = v7;
    uint64_t v8 = +[NSArray arrayWithObjects:v12 count:4];
    unsigned int v9 = [v3 crl_conformsToAnyUTI:v8];

    uint64_t v10 = v9 ^ 1;
  }

  return v10;
}

uint64_t sub_10045670C(void *a1, CGImageSource *a2)
{
  if ((unint64_t)[a1 length] < 0x4000001) {
    return 1;
  }
  unint64_t v3 = CGImageSourceGetType(a2);
  if (v3)
  {
    id v4 = sub_1000304B8();
    unsigned int v5 = [v3 crl_conformsToUTI:v4];

    uint64_t v6 = v5 ^ 1;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

double sub_100456798(CGPDFPage *a1, uint64_t a2, CGFloat *a3)
{
  return sub_1004567A0(a1, a2, a3, 0);
}

double sub_1004567A0(CGPDFPage *a1, uint64_t a2, CGFloat *a3, int a4)
{
  if (a1)
  {
    CGRect BoxRect = CGPDFPageGetBoxRect(a1, kCGPDFMediaBox);
    CGFloat x = BoxRect.origin.x;
    CGFloat y = BoxRect.origin.y;
    CGFloat width = BoxRect.size.width;
    CGFloat height = BoxRect.size.height;
    CGRect v37 = CGPDFPageGetBoxRect(a1, kCGPDFCropBox);
    CGFloat v12 = v37.origin.x;
    CGFloat v13 = v37.origin.y;
    CGFloat v14 = v37.size.width;
    CGFloat v15 = v37.size.height;
    CGRect v46 = CGPDFPageGetBoxRect(a1, kCGPDFArtBox);
    v38.origin.CGFloat x = x;
    v38.origin.CGFloat y = y;
    v38.size.CGFloat width = width;
    v38.size.CGFloat height = height;
    CGRect v47 = CGRectIntersection(v38, v46);
    v39.origin.CGFloat x = v12;
    v39.origin.CGFloat y = v13;
    v39.size.CGFloat width = v14;
    v39.size.CGFloat height = v15;
    CGRect v40 = CGRectIntersection(v39, v47);
    double v16 = v40.origin.x;
    CGFloat v17 = v40.origin.y;
    CGFloat v18 = v40.size.width;
    CGFloat v19 = v40.size.height;
    double MinX = CGRectGetMinX(v40);
    v41.origin.CGFloat x = v16;
    v41.origin.CGFloat y = v17;
    v41.size.CGFloat width = v18;
    v41.size.CGFloat height = v19;
    double MinY = CGRectGetMinY(v41);
    v42.origin.CGFloat x = v16;
    v42.origin.CGFloat y = v17;
    v42.size.CGFloat width = v18;
    v42.size.CGFloat height = v19;
    double MaxX = CGRectGetMaxX(v42);
    v43.origin.CGFloat x = v16;
    v43.origin.CGFloat y = v17;
    v43.size.CGFloat width = v18;
    v43.size.CGFloat height = v19;
    CGFloat MaxY = CGRectGetMaxY(v43);
    v44.origin.CGFloat x = v16;
    v44.origin.CGFloat y = v17;
    v44.size.CGFloat width = v18;
    v44.size.CGFloat height = v19;
    CGFloat v22 = CGRectGetWidth(v44);
    v45.origin.CGFloat x = v16;
    v45.origin.CGFloat y = v17;
    v45.size.CGFloat width = v18;
    v45.size.CGFloat height = v19;
    CGFloat v23 = CGRectGetHeight(v45);
    int RotationAngle = CGPDFPageGetRotationAngle(a1);
    if (a4) {
      int v25 = 0;
    }
    else {
      int v25 = RotationAngle;
    }
    if (v25 != 90)
    {
      double v26 = 0.0;
      if (v25 == 180)
      {
        long long v27 = xmmword_101177250;
        double v28 = MaxY;
      }
      else
      {
        if (v25 == 270)
        {
          long long v27 = xmmword_1011762C0;
          double v28 = -MinX;
          double v26 = -1.0;
          double MaxX = MaxY;
          goto LABEL_19;
        }
        double MaxX = -MinX;
        long long v27 = xmmword_101178A30;
        double v28 = -MinY;
      }
      CGFloat v32 = v22;
      if (!a2)
      {
LABEL_21:
        if (a3)
        {
          *a3 = v32;
          a3[1] = v23;
        }
        return v16;
      }
LABEL_20:
      *(_OWORD *)a2 = v27;
      *(double *)(a2 + 16) = v26;
      *(void *)(a2 + 24) = v27;
      *(double *)(a2 + 32) = MaxX;
      *(double *)(a2 + 40) = v28;
      goto LABEL_21;
    }
    long long v27 = xmmword_101178A20;
    double v28 = MaxX;
    double MaxX = -MinY;
    double v26 = 1.0;
LABEL_19:
    CGFloat v32 = v23;
    CGFloat v23 = v22;
    if (!a2) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FADF8);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010B4404();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FAE18);
  }
  double v29 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v29);
  }
  int v30 = +[NSString stringWithUTF8String:"CGRect CRLComputeBoxTransformAndSizeForPDFPageIgnoringAngle(CGPDFPageRef, CGAffineTransform *, CGSize *, BOOL)"];
  double v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v30, v31, 657, 0, "invalid nil value for '%{public}s'", "page");

  return CGRectZero.origin.x;
}

void sub_100456B10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100456B54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__n128 sub_100456B98@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>)
{
  memset(&v36, 0, sizeof(v36));
  CGAffineTransformMakeTranslation(&v36, a3 * -0.5, a4 * -0.5);
  __n128 v16 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v16;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v36;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v17 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v17;
  a1[2] = *(__n128 *)&v35.tx;
  CGFloat v18 = a5;
  v17.n128_f64[0] = a6;
  CGFloat v19 = a7;
  CGFloat v20 = a8;
  tCGFloat x = CGRectGetMinX(*(CGRect *)((char *)&v17 - 8));
  v37.origin.CGFloat x = a5;
  v37.origin.CGFloat y = a6;
  v37.size.CGFloat width = a7;
  v37.size.CGFloat height = a8;
  CGFloat MinY = CGRectGetMinY(v37);
  v38.origin.CGFloat x = a5;
  v38.origin.CGFloat y = a6;
  v38.size.CGFloat width = a7;
  v38.size.CGFloat height = a8;
  double Width = CGRectGetWidth(v38);
  v39.origin.CGFloat x = a5;
  v39.origin.CGFloat y = a6;
  v39.size.CGFloat width = a7;
  v39.size.CGFloat height = a8;
  double Height = CGRectGetHeight(v39);
  CGAffineTransformMakeScale(&v35, Width / a3, Height / a4);
  CGAffineTransform v36 = v35;
  __n128 v24 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v24;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v25 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v25;
  a1[2] = *(__n128 *)&v35.tx;
  CGAffineTransformMakeTranslation(&v35, Width * 0.5, Height * 0.5);
  CGAffineTransform v36 = v35;
  __n128 v26 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v26;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v27 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v27;
  a1[2] = *(__n128 *)&v35.tx;
  CGAffineTransformMakeTranslation(&v35, tx, MinY);
  CGAffineTransform v36 = v35;
  __n128 v28 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v28;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v29 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v29;
  a1[2] = *(__n128 *)&v35.tx;
  __n128 v30 = a1[1];
  *a2 = *a1;
  a2[1] = v30;
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

void sub_100456DE0(uint64_t a1, double a2)
{
  sub_1004559A4(a1, 0, 0, 0, 0, 1.0);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100456E88;
  v4[3] = &unk_1014FAE78;
  double v4[4] = a1;
  *(double *)&v4[5] = a2;
  sub_10045949C(1, 1, v4);
}

void sub_100456E88(uint64_t a1, void *a2)
{
  unint64_t v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAE38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B4498();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAE58);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    unsigned int v5 = +[NSString stringWithUTF8String:"void CRLSetCGContextInfoForShadowContext(CGContextRef, CGFloat)_block_invoke"];
    uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 795, 0, "invalid nil value for '%{public}s'", "dict");
  }
  double v7 = *(double *)(a1 + 40);
  *(float *)&double v7 = v7;
  uint64_t v8 = +[NSNumber numberWithFloat:v7];
  [v3 setValue:v8 forKey:@"CRLCGContextInfoDictionaryKeyShadowedLayoutAngle"];
}

void sub_100457034(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100457078(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004570BC(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100457154;
  v4[3] = &unk_1014FAEC0;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  sub_10045949C(1, 1, v4);
}

void sub_100457154(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:v3];
  if (!v5)
  {
    id v5 = +[NSMutableDictionary dictionaryWithCapacity:1];
  }
  id v6 = v5;
  [v5 setValue:*(void *)(a1 + 32) forKey:@"CRLCGContextInfoDictionaryKeyPdfTagger"];
  [v4 setObject:v6 forKey:*(void *)(a1 + 40)];
}

void sub_1004571F0(uint64_t a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  void v2[2] = sub_100457268;
  v2[3] = &unk_1014FAE98;
  v2[4] = a1;
  char v3 = a2;
  sub_10045949C(1, 1, v2);
}

void sub_100457268(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v4 objectForKeyedSubscript:v3];
  if (!v5)
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithCapacity:1];
  }
  id v7 = (id)v5;
  id v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v7 setValue:v6 forKey:@"CRLCGContextInfoDictionaryKeyIsSixChannelMultiplyContext"];

  [v4 setObject:v7 forKey:*(void *)(a1 + 32)];
}

void sub_100457324(uint64_t a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  void v2[2] = sub_10045739C;
  v2[3] = &unk_1014FAE98;
  v2[4] = a1;
  char v3 = a2;
  sub_10045949C(1, 1, v2);
}

void sub_10045739C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v4 objectForKeyedSubscript:v3];
  if (!v5)
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithCapacity:1];
  }
  id v7 = (id)v5;
  id v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v7 setValue:v6 forKey:@"CRLCGContextInfoDictionaryKeyIsSixChannelLinearDodgeContext"];

  [v4 setObject:v7 forKey:*(void *)(a1 + 32)];
}

void sub_100457458(uint64_t a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  void v2[2] = sub_1004574D0;
  v2[3] = &unk_1014FAE98;
  v2[4] = a1;
  char v3 = a2;
  sub_10045949C(1, 1, v2);
}

void sub_1004574D0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v4 objectForKeyedSubscript:v3];
  if (!v5)
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithCapacity:1];
  }
  id v7 = (id)v5;
  id v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v7 setValue:v6 forKey:@"CRLCGContextInfoDictionaryKeyIsSixChannelBlendingSuppressed"];

  [v4 setObject:v7 forKey:*(void *)(a1 + 32)];
}

void sub_10045758C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7, double a8, double a9)
{
  id v18 = objc_alloc((Class)NSMutableDictionary);
  CGFloat v19 = +[NSNumber numberWithBool:a2];
  CGFloat v20 = +[NSNumber numberWithBool:a3];
  double v21 = +[NSNumber numberWithBool:a4];
  *(float *)&double v22 = a7;
  CGFloat v23 = +[NSNumber numberWithFloat:v22];
  if (a5) {
    +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", a8, a9);
  }
  else {
  __n128 v24 = +[NSNull null];
  }
  __n128 v25 = +[NSNumber numberWithBool:a6];
  id v26 = [v18 initWithObjectsAndKeys:v19, @"CRLCGContextInfoDictionaryKeyIsPrintContext", v20, @"CRLCGContextInfoDictionaryKeyIsPDFContext", v21, @"CRLCGContextInfoDictionaryKeyIsCALayerContext", v23, @"CRLCGContextInfoDictionaryKeyAssociatedScreenScale", v24, @"CRLCGContextInfoDictionaryKeyTileOffset", v25, @"CRLCGContextInfoDictionaryKeyHasBackgroundsSuppressed", 0];

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10045778C;
  v28[3] = &unk_1014FAEC0;
  id v29 = v26;
  uint64_t v30 = a1;
  id v27 = v26;
  sub_10045949C(1, 1, v28);
}

void sub_10045778C(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    id v5 = v3;
    [v3 addEntriesFromDictionary:v4];
  }
  else
  {
    id v5 = v4;
  }
  [v6 setObject:v5 forKey:*(void *)(a1 + 40)];
}

id sub_10045780C(uint64_t a1, void *a2)
{
  return [a2 removeObjectForKey:*(void *)(a1 + 32)];
}

CFStringRef sub_100457818(unint64_t a1)
{
  if (a1 > 2) {
    return @"invalid CRLLineCapStyle";
  }
  else {
    return *(&off_1014FB040 + a1);
  }
}

CFStringRef sub_10045783C(unint64_t a1)
{
  if (a1 > 2) {
    return @"invalid CRLLineJoinStyle";
  }
  else {
    return *(&off_1014FB058 + a1);
  }
}

double sub_100457860(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10045792C;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  double v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100457914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10045792C(uint64_t a1, void *a2)
{
  id v5 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v5 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyShadowedLayoutAngle"];
  [v3 floatValue];
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

uint64_t sub_1004579A8(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100457A6C;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100457A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100457A6C(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsReflection"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

id sub_100457AE4(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000;
  char v7 = sub_100457BEC;
  uint64_t v8 = sub_100457BFC;
  id v9 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100457C04;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100457BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100457BEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100457BFC(uint64_t a1)
{
}

void sub_100457C04(uint64_t a1, void *a2)
{
  id v6 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v6 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyPdfTagger"];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100457C78(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100457D3C;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100457D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100457D3C(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsSixChannelMultiplyContext"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

uint64_t sub_100457DB4(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100457E78;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100457E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100457E78(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsSixChannelLinearDodgeContext"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

uint64_t sub_100457EF0(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100457FB4;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100457F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100457FB4(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsSixChannelBlendingSuppressed"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

double sub_10045802C(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004580F8;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  double v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1004580E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004580F8(uint64_t a1, void *a2)
{
  id v5 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v5 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyLayoutAngle"];
  [v3 floatValue];
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

uint64_t sub_100458174(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100458238;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100458220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100458238(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsPrintContext"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

uint64_t sub_1004582B0(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100458374;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10045835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100458374(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyHasBackgroundsSuppressed"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

uint64_t sub_1004583EC(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004584B0;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100458498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004584B0(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsPDFContext"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

uint64_t sub_100458528(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004585EC;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1004585D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004585EC(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyIsCALayerContext"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

double sub_100458664(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = (double *)&v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100458748;
  v4[3] = &unk_1014FAF08;
  void v4[4] = &v5;
  v4[5] = a1;
  sub_10045949C(0, 0, v4);
  double v1 = v6[3];
  if (v1 == 0.0)
  {
    +[UIScreen crl_screenScale];
    double v1 = v2;
  }
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_100458730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100458748(uint64_t a1, void *a2)
{
  id v5 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = [v5 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyAssociatedScreenScale"];
  [v3 floatValue];
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

void sub_1004587C4(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100458878;
  _OWORD v5[3] = &unk_1014FAF30;
  id v6 = a1;
  id v7 = a2;
  id v3 = v7;
  id v4 = v6;
  sub_10045949C(1, 0, v5);
}

void sub_100458878(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (!v3)
  {
    id v3 = +[NSMutableDictionary dictionary];
    [v6 setObject:v3 forKey:*(void *)(a1 + 32)];
  }
  id v4 = [v3 valueForKey:*(void *)(a1 + 40)];
  if (!v4)
  {
    id v4 = +[NSMutableArray array];
    [v3 setValue:v4 forKey:*(void *)(a1 + 40)];
  }
  id v5 = +[NSMutableSet set];
  [v4 crl_push:v5];
}

void sub_100458964(void *a1)
{
}

void sub_100458970(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100458A50;
    v8[3] = &unk_1014FAF58;
    id v9 = v5;
    id v10 = v6;
    id v11 = v7;
    sub_10045949C(1, 0, v8);
  }
}

void sub_100458A50(void *a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:a1[4]];
  id v4 = [v3 valueForKey:a1[5]];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) addObject:a1[6]];
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_100458B68(void *a1, void *a2)
{
  id v3 = a2;
  sub_100458970(a1, @"CRLCGContextInfoDictionaryKeyRenderedWithMissingData", v3);
  id v4 = +[NSThread currentThread];
  sub_100458970(v4, @"CRLCGContextInfoDictionaryKeyThreadRenderedWithMissingData", v3);
}

id sub_100458BE8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v13 = 0;
  CGFloat v14 = &v13;
  uint64_t v15 = 0x3032000000;
  __n128 v16 = sub_100457BEC;
  __n128 v17 = sub_100457BFC;
  id v18 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100458D38;
  void v9[3] = &unk_1014FAFC0;
  id v5 = v3;
  id v10 = v5;
  id v6 = v4;
  id v11 = v6;
  long long v12 = &v13;
  sub_10045949C(1, 0, v9);
  id v7 = (id)v14[5];

  _Block_object_dispose(&v13, 8);

  return v7;
}

void sub_100458D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100458D38(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = [v3 objectForKey:a1[4]];

  id v6 = sub_1002469D0(v4, v5);

  id v7 = [v6 objectForKey:a1[5]];
  uint64_t v8 = [v7 crl_pop];
  uint64_t v9 = *(void *)(a1[6] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAF78);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B452C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FAF98);
    }
    id v11 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v11);
    }
    long long v12 = +[NSString stringWithUTF8String:"NSSet<CRLAsset *> *CRLCGContextStopWatchingDatasNeedDownloadWithObservationContext(__strong id, NSString *__strong)_block_invoke"];
    uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLRenderingUtility.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 1175, 0, "invalid nil value for '%{public}s'", "datas");
  }
  if (![v7 count]) {
    [v6 removeObjectForKey:a1[5]];
  }
}

void sub_100458F40(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100458F84(id a1)
{
  double v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100458FC8(void *a1)
{
  return sub_100458BE8(a1, @"CRLCGContextInfoDictionaryKeyRenderedWithMissingData");
}

void sub_100458FD4(uint64_t a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  void v2[2] = sub_10045904C;
  v2[3] = &unk_1014FAE98;
  v2[4] = a1;
  char v3 = a2;
  sub_10045949C(1, 1, v2);
}

void sub_10045904C(uint64_t a1, void *a2)
{
  id v5 = a2;
  char v3 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (!v3)
  {
    char v3 = +[NSMutableDictionary dictionary];
    [v5 setObject:v3 forKey:*(void *)(a1 + 32)];
  }
  uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v3 setValue:v4 forKey:@"CRLCGContextInfoDictionaryKeyPrefersRasterRendering"];
}

uint64_t sub_1004590FC(uint64_t a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004591C0;
  v3[3] = &unk_1014FAF08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10045949C(0, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1004591A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004591C0(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  char v3 = [v4 objectForKeyedSubscript:@"CRLCGContextInfoDictionaryKeyPrefersRasterRendering"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 BOOLValue];
}

id sub_100459238(CGImage *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 pathExtension];
  id v5 = UTTypePNG;
  if (v4 && [v4 length])
  {
    uint64_t v6 = +[UTType typeWithFilenameExtension:v4];

    id v5 = (UTType *)v6;
  }
  char v7 = [(UTType *)v5 identifier];
  CFURLRef v8 = (const __CFURL *)[objc_alloc((Class)NSURL) initFileURLWithPath:v3];
  uint64_t v9 = CGImageDestinationCreateWithURL(v8, v7, 1uLL, 0);

  if (v9)
  {
    CGImageDestinationAddImage(v9, a1, 0);
    if (!CGImageDestinationFinalize(v9))
    {
      if (qword_101719A68 != -1) {
        dispatch_once(&qword_101719A68, &stru_1014FAFE0);
      }
      id v10 = off_10166B498;
      if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
        sub_1010B45C0((uint64_t)v3, v10);
      }

      id v3 = 0;
    }
    CFRelease(v9);
  }
  else
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_1014FB000);
    }
    id v11 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010B45C0((uint64_t)v3, v11);
    }

    id v3 = 0;
  }

  return v3;
}

void sub_100459414(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_100459458(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  double v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_10045949C(int a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v9 = v5;
    if (qword_1016A9C18 != -1) {
      dispatch_once(&qword_1016A9C18, &stru_1014FB020);
    }
    if (a1)
    {
      pthread_rwlock_wrlock(&stru_1016A9B50);
      uint64_t v6 = qword_1016A9B48;
      if (!qword_1016A9B48 && a2)
      {
        uint64_t v7 = +[NSMapTable weakToStrongObjectsMapTable];
        CFURLRef v8 = (void *)qword_1016A9B48;
        qword_1016A9B48 = v7;

        uint64_t v6 = qword_1016A9B48;
      }
    }
    else
    {
      pthread_rwlock_rdlock(&stru_1016A9B50);
      uint64_t v6 = qword_1016A9B48;
    }
    if (v6) {
      v9[2]();
    }
    pthread_rwlock_unlock(&stru_1016A9B50);
    id v5 = v9;
  }
}

void sub_100459580(id a1)
{
}

id sub_100459910(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) setStatus:2];
}

void sub_100459B78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100459BBC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  _Block_object_dispose((const void *)(v14 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10045A278(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045A2BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CGImage *sub_10045A300(void *a1)
{
  __n128 result = *(CGImage **)(a1[4] + 32);
  if (result)
  {
    __n128 result = CGImageRetain(result);
    *(void *)(*(void *)(a1[5] + 8) + 24) = result;
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(a1[4] + 48);
  }
  return result;
}

uint64_t sub_10045A350(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 16) != 0;
  return result;
}

void sub_10045A62C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045A670(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045A89C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045A8E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045AC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10045AC7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045ACC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045AD04(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[4];
  if (v3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 48);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 40) hasBakedMask];
  }
  else
  {
    [v2 p_desiredSizedImageSize];
    double v5 = v4;
    double v7 = v6;
    CFURLRef v8 = [*(id *)(a1 + 32) p_validatedBitmapImageProvider];
    long long v12 = v8;
    if (v8)
    {
      unsigned __int8 v9 = [*(id *)(a1 + 32) p_canDrawThumbnailAsSizedImage];
      CFURLRef v8 = v12;
      if ((v9 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 80)) {
          id v10 = [v12 CGImageForSize:0 inContext:*(void *)(a1 + 40) orContentsScaleProvider:v5, v7];
        }
        else {
          id v10 = [v12 CGImageOfAnySize];
        }
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v12 orientation];
        CFURLRef v8 = v12;
      }
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      id v11 = [*(id *)(a1 + 32) p_validatedThumbnailImageProvider];
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v11 CGImageOfLargestSafeSize];
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v11 orientation];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;

      CFURLRef v8 = v12;
    }
  }
}

void sub_10045B064(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045B0A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045B228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10045B240(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 32) != 0;
  return result;
}

void sub_10045B474(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045B4B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045B710(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045B754(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045BAEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045BB30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

double *sub_10045BC28(double *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 4);
  if (!*(void *)(v2 + 32)
    || (__n128 result = *(double **)(v2 + 40)) == 0
    || (double v3 = v1[6], v3 > 100.0) && (result = (double *)[result size], v3 > v4 + v4)
    || (double v5 = v1[7], v5 > 100.0)
    && (__n128 result = (double *)[*(id *)(*((void *)v1 + 4) + 40) size], v5 > v6 + v6))
  {
    *(unsigned char *)(*(void *)(*((void *)v1 + 5) + 8) + 24) = 1;
  }
  return result;
}

void sub_10045BDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10045BDFC(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (*((void *)result + 4))
  {
    if (!*((void *)result + 5)) {
      goto LABEL_5;
    }
    id result = [*(id *)(a1 + 40) isEqualToSizedImageDescription];
    if (result) {
      return result;
    }
    id result = *(id *)(a1 + 32);
    if (*((void *)result + 4))
    {
LABEL_5:
      unsigned int v3 = [*((id *)result + 5) hasBakedMask];
      unsigned int v4 = [*(id *)(a1 + 40) hasBakedMask];
      id result = *(id *)(a1 + 32);
      if (v3 != v4)
      {
        [result p_invalidateSizedImageOnAccessQueue];
        id result = *(id *)(a1 + 32);
      }
    }
  }
  if (!*((void *)result + 2)) {
    goto LABEL_9;
  }
  id v5 = [*((id *)result + 2) status];
  id result = *(id *)(a1 + 32);
  if (v5) {
    goto LABEL_9;
  }
  [*((id *)result + 2) desiredSize];
  double v7 = v6;
  double v9 = v8;
  [*(id *)(a1 + 40) size];
  if (v7 == v11 && v9 == v10)
  {
    uint64_t v13 = *(void **)(a1 + 48);
    uint64_t v14 = [*(id *)(*(void *)(a1 + 32) + 16) provider];

    if (v13 == v14)
    {
      id result = *(id *)(a1 + 32);
LABEL_9:
      if (!*((void *)result + 2))
      {
        id result = [result p_prepareToGenerateSizedImageWithDescription:*(void *)(a1 + 40)];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      }
      return result;
    }
  }
  uint64_t v15 = *(void **)(*(void *)(a1 + 32) + 16);

  return _[v15 setStatus:1];
}

void sub_10045C12C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C170(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C464(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C4A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C890(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C8D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C918(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045C95C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045CBE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045CC2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045CC70(uint64_t a1)
{
  if ([*(id *)(a1 + 32) imageDrawingHelperShouldRetryGeneratingSizedImageLater:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void **)(a1 + 48);
    _[v2 setStatus:1];
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "p_generateSizedImage:", *(void *)(a1 + 48)))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10045CD48;
    _OWORD v5[3] = &unk_1014CBE78;
    id v3 = *(id *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v6 = v3;
    uint64_t v7 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
  }
}

id sub_10045CD48(uint64_t a1)
{
  return [*(id *)(a1 + 32) imageDrawingHelper:*(void *)(a1 + 40) didGenerateSizedImageSynchronously:0];
}

void sub_10045CE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10045CE58(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 16))
  {
    *(unsigned char *)(v1 + 24) = 1;
    *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 1;
  }
  return result;
}

void sub_10045CF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10045CF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  if (v3 && *(unsigned char *)(v2 + 24))
  {
    id v4 = [v3 status];
    if (v4 != (id)1)
    {
      if (v4) {
        goto LABEL_13;
      }
      id v5 = (CGImage *)[*(id *)(*(void *)(a1 + 32) + 16) sizedImage];
      if (!v5) {
        goto LABEL_13;
      }
      id v6 = v5;
      [*(id *)(a1 + 32) p_desiredSizedImageSize];
      double v8 = v7;
      double v10 = v9;
      [*(id *)(*(void *)(a1 + 32) + 16) desiredSize];
      if (v8 == v12 && v10 == v11)
      {
        uint64_t v14 = [*(id *)(a1 + 32) p_imageProvider];
        uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 16) provider];

        if (v14 == v15)
        {
          CGImageRelease(*(CGImageRef *)(*(void *)(a1 + 32) + 32));
          *(void *)(*(void *)(a1 + 32) + 32) = CGImageRetain(v6);
          uint64_t v18 = [TSDSizedImageDescription alloc];
          [*(id *)(*(void *)(a1 + 32) + 16) desiredSize];
          double v21 = -[TSDSizedImageDescription initWithSize:isWideGamut:hasBakedMask:](v18, "initWithSize:isWideGamut:hasBakedMask:", [*(id *)(*(void *)(a1 + 32) + 16) wideGamut], objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "sizedImageHasMask"), v19, v20);
          uint64_t v22 = *(void *)(a1 + 32);
          CGFloat v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v21;

          *(void *)(*(void *)(a1 + 32) + 48) = [*(id *)(*(void *)(a1 + 32) + 16) sizedImageOrientation];
          if ([*(id *)(*(void *)(a1 + 32) + 40) hasBakedMask]
            && !*(void *)(*(void *)(a1 + 32) + 56))
          {
            +[CRLAssertionHandler _atomicIncrementAssertCount];
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014FB440);
            }
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
              sub_1010B4FA0();
            }
            if (qword_101719A70 != -1) {
              dispatch_once(&qword_101719A70, &stru_1014FB460);
            }
            __n128 v24 = off_10166B4A0;
            if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
              sub_10106590C(v24);
            }
            __n128 v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRepDrawingHelper p_takeSizedImageFromStateIfReady]_block_invoke");
            id v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepDrawingHelper.m"];
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 619, 0, "invalid nil value for '%{public}s'", "_sizedImageMaskPath");
          }
          goto LABEL_13;
        }
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_13:
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void **)(v16 + 16);
    *(void *)(v16 + 16) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  }
}

void sub_10045D228(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045D26C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045D34C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 p_desiredSizedImageDescription];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v1 p_prepareToGenerateSizedImageWithDescription:v2];
}

void sub_10045D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef sub_10045D484(uint64_t a1)
{
  CGImageRef result = CGImageRetain(*(CGImageRef *)(*(void *)(a1 + 32) + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id sub_10045D530(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_invalidateSizedImageOnAccessQueue];
}

id sub_10045D5AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  if (!v3)
  {
LABEL_4:
    id result = *(id *)(v2 + 40);
    if (!result) {
      return result;
    }
    id result = [result hasBakedMask];
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (([v3 sizedImageHasMask] & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    goto LABEL_4;
  }
LABEL_6:
  id v5 = *(void **)(a1 + 32);

  return [v5 p_invalidateSizedImageOnAccessQueue];
}

void sub_10045D800(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045D844(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045D888(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(void *)(v2 + 32) || *(void *)(v2 + 16))
    && (([*(id *)(v2 + 40) hasBakedMask] & 1) != 0
     || (id v3 = *(void **)(*(void *)(a1 + 32) + 16)) != 0 && [v3 maskPath]))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(void *)(v4 + 32)
      || (objc_msgSend((id)v4, "p_validatedBitmapImageProvider"),
          id v5 = objc_claimAutoreleasedReturnValue(),
          [v5 orientation],
          v5,
          uint64_t v4 = *(void *)(a1 + 32),
          *(void *)(v4 + 32)))
    {
      [*(id *)(v4 + 40) size];
    }
    else
    {
      [*(id *)(v4 + 16) desiredSize];
    }
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    if (!v6) {
      goto LABEL_24;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a1 + 32);
    if (!*(void *)(v8 + 56) && ![*(id *)(v8 + 16) maskPath])
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FB4C0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010B50C8();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FB4E0);
      }
      double v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v9);
      }
      double v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageRepDrawingHelper invalidateSizedImageIfNeededForBakedMaskPathFromBlock:]_block_invoke");
      double v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepDrawingHelper.m"];
      +[CRLAssertionHandler handleFailureInFunction:v10 file:v11 lineNumber:717 isFatal:0 description:"Need some mask path if comparing masks"];
    }
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(id *)(v12 + 56);
    if (!v13) {
      id v13 = [*(id *)(v12 + 16) maskPath];
    }
    uint64_t v14 = +[CRLBezierPath bezierPathWithCGPath:v13];
    uint64_t v15 = +[CRLBezierPath bezierPathWithCGPath:v7];
    unsigned __int8 v16 = [v14 isEqual:v15];

    if ((v16 & 1) == 0) {
LABEL_24:
    }
      [*(id *)(a1 + 32) p_invalidateSizedImageOnAccessQueue];
  }
}

void sub_10045DAEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045DB30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10045DCA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    id result = 0;
  }
  else
  {
    id result = *(id *)(v2 + 16);
    if (result) {
      id result = [result sizedImageHasMask];
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10045DDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10045DDBC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) status] == (id)1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = 0;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_10045E5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10045E604(uint64_t a1, void *a2)
{
  id v8 = [a2 pureGeometry];
  [v8 frame];
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  void v3[6] = v6;
  v3[7] = v7;
}

void sub_10045EB44(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045EB88(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045EBCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045EC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045F220(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045F264(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045F2A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045F2EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_10045FB20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FB64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FBA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FBEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FC30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10045FC74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10045FCB8(uint64_t a1, void *a2)
{
  id result = [a2 minimumSize];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v6;
  return result;
}

void sub_100460A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100460A90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100460AD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100460C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100460CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  double v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLBrushStrokeDirectMetalRenderingContext;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100460EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100460FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046105C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004610E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046128C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004612B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004612F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004613FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100461748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004617D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046181C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461860(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004618A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100461D4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461D90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461DD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461E18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100461FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004621DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100462430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100462494(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004624D8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1004638F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463938(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046397C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004639C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463A04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463A48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463A8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463AD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463B14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463B58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463B9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100463BE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004646EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1004648E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046492C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100464970(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004649B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004649F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100464A3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100465000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1004650F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046513C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100465180(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004651C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100465208(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046524C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004653FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004670EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10046733C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100467380(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004673C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100467408(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046744C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100467490(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004674D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100467518(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100468F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,void *a48,void *a49,void *a50,uint64_t a51,uint64_t a52,void *a53,void *a54,uint64_t a55,uint64_t a56,void *a57,void *a58)
{
  _Unwind_Resume(a1);
}

void sub_100469358(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046939C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004693E0(uint64_t a1, long long *a2)
{
  long long v2 = a2[3];
  long long v49 = a2[2];
  long long v50 = v2;
  long long v51 = a2[4];
  uint64_t v52 = *((void *)a2 + 10);
  long long v3 = a2[1];
  long long v47 = *a2;
  long long v48 = v3;
  long long v4 = *(long long *)((char *)a2 + 136);
  long long v43 = *(long long *)((char *)a2 + 120);
  long long v44 = v4;
  long long v45 = *(long long *)((char *)a2 + 152);
  uint64_t v46 = *((void *)a2 + 21);
  long long v5 = *(long long *)((char *)a2 + 104);
  long long v41 = *(long long *)((char *)a2 + 88);
  long long v42 = v5;
  long long v6 = a2[14];
  long long v37 = a2[13];
  long long v38 = v6;
  long long v39 = a2[15];
  uint64_t v40 = *((void *)a2 + 32);
  long long v7 = a2[12];
  long long v35 = a2[11];
  long long v36 = v7;
  long long v8 = *(long long *)((char *)a2 + 312);
  long long v31 = *(long long *)((char *)a2 + 296);
  long long v32 = v8;
  long long v33 = *(long long *)((char *)a2 + 328);
  uint64_t v34 = *((void *)a2 + 43);
  long long v9 = *(long long *)((char *)a2 + 280);
  long long v29 = *(long long *)((char *)a2 + 264);
  long long v30 = v9;
  if (*(void *)(a1 + 32))
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = *(void *)(a1 + 40) + v11;
      if (!*(unsigned char *)(a1 + 80)) {
        unint64_t v12 = *(void *)(a1 + 48) + ~v12;
      }
      id v13 = (float *)(*(void *)(a1 + 56) + 32 * v12);
      float v14 = v13[1];
      float v15 = v13[2];
      float v16 = v13[3];
      float v17 = v13[4];
      float v18 = v13[5];
      float v19 = v13[6];
      float v20 = v13[7];
      v27[2] = v49;
      v27[3] = v50;
      v27[4] = v51;
      uint64_t v28 = v52;
      v27[0] = v47;
      v27[1] = v48;
      sub_1000C05BC((uint64_t)v27, v11, v14, v15);
      v25[2] = v43;
      v25[3] = v44;
      v25[4] = v45;
      uint64_t v26 = v46;
      v25[0] = v41;
      v25[1] = v42;
      sub_1000C05BC((uint64_t)v25, v11, v16, v17);
      v23[2] = v37;
      v23[3] = v38;
      v23[4] = v39;
      uint64_t v24 = v40;
      v23[0] = v35;
      v23[1] = v36;
      sub_1000C05BC((uint64_t)v23, v11, v18, v19);
      v21[2] = v31;
      v21[3] = v32;
      v21[4] = v33;
      uint64_t v22 = v34;
      v21[0] = v29;
      v21[1] = v30;
      sub_1000C059C((uint64_t)v21, v11++, v20);
    }
    while (v11 < *(void *)(a1 + 32));
  }
}

void *sub_1004695C8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v2 = (void *)(a1 + 56);
  void v2[2] = 0;
  return sub_10046BAD8(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 5);
}

void sub_1004695E4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1004695FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100469640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004696DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004697CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100469AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100469CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100469CE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100469D2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100469F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100469FB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100469FFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046A1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046A224(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046A268(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046A32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046A430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046A49C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.freeform.CRLBrushStrokeMetalTextureQueue", 0);
  long long v2 = (void *)qword_1016A9C40;
  qword_1016A9C40 = (uint64_t)v1;
}

void sub_10046A530(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.freeform.CRLBrushStrokeMetalShaderQueue", 0);
  long long v2 = (void *)qword_1016A9C50;
  qword_1016A9C50 = (uint64_t)v1;
}

void sub_10046A6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10046A6F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_rwlock_init(&stru_1016A9B50, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = 0;
  return result;
}

void sub_10046A700(uint64_t a1)
{
}

void sub_10046A708(id a1)
{
  id v1 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:512 valueOptions:0 capacity:16];
  long long v2 = (void *)qword_1016A9C60;
  qword_1016A9C60 = (uint64_t)v1;
}

void sub_10046A754(uint64_t a1)
{
  long long v2 = [(id)qword_1016A9C60 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (!v2)
  {
    long long v2 = +[NSMutableDictionary dictionary];
    [qword_1016A9C60 setObject:forKeyedSubscript:];
  }
  long long v3 = [*(id *)(a1 + 40) strokeName];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    long long v7 = [*(id *)(a1 + 40) strokeName];
    long long v8 = +[CRLBrushStrokeLoader storageForBrushStrokeNamed:v7];

    if (!v8)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FBE50);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010B6448();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FBE70);
      }
      long long v9 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      double v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBrushStroke p_metalTextureForCurrentStrokeAndDevice:]_block_invoke");
      unint64_t v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStroke.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1752, 0, "invalid nil value for '%{public}s'", "storage");
    }
    unint64_t v12 = [v8 image];
    if (v12)
    {
      id v13 = [objc_alloc((Class)MTKTextureLoader) initWithDevice:*(void *)(a1 + 32)];
      id v14 = [v12 CGImage];
      v51[0] = MTKTextureLoaderOptionOrigin;
      v51[1] = MTKTextureLoaderOptionSRGB;
      v52[0] = MTKTextureLoaderOriginFlippedVertically;
      v52[1] = &__kCFBooleanFalse;
      float v15 = +[NSDictionary dictionaryWithObjects:v52 forKeys:v51 count:2];
      id v34 = 0;
      id v16 = [v13 newTextureWithCGImage:v14 options:v15 error:&v34];
      id v17 = v34;
      uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
      float v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v16;

      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      if (v20)
      {
        double v21 = [*(id *)(a1 + 40) strokeName];
        [v2 setObject:v20 forKeyedSubscript:v21];
      }
      else
      {
        unsigned int v23 = +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FBED0);
        }
        uint64_t v24 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
        {
          long long v30 = (objc_class *)objc_opt_class();
          NSStringFromClass(v30);
          id v33 = (id)objc_claimAutoreleasedReturnValue();
          long long v32 = [v17 domain];
          id v31 = [v17 code];
          *(_DWORD *)buf = 67110914;
          unsigned int v36 = v23;
          __int16 v37 = 2082;
          long long v38 = "-[CRLBrushStroke p_metalTextureForCurrentStrokeAndDevice:]_block_invoke";
          __int16 v39 = 2082;
          uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStroke.mm";
          __int16 v41 = 1024;
          int v42 = 1767;
          __int16 v43 = 2114;
          id v44 = v33;
          __int16 v45 = 2114;
          uint64_t v46 = v32;
          __int16 v47 = 2048;
          id v48 = v31;
          __int16 v49 = 2112;
          id v50 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v24, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to load brush texture with error errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", buf, 0x4Au);
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FBEF0);
        }
        __n128 v25 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
        {
          +[CRLAssertionHandler packedBacktraceString];
          objc_claimAutoreleasedReturnValue();
          sub_1010663B0();
        }

        double v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBrushStroke p_metalTextureForCurrentStrokeAndDevice:]_block_invoke");
        uint64_t v26 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStroke.mm"];
        id v27 = (objc_class *)objc_opt_class();
        uint64_t v28 = NSStringFromClass(v27);
        long long v29 = [v17 domain];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v26, 1767, 0, "Unable to load brush texture with error errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v28, v29, [v17 code], v17);
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FBE90);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010B63B4();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FBEB0);
      }
      uint64_t v22 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
      {
        +[CRLAssertionHandler packedBacktraceString];
        objc_claimAutoreleasedReturnValue();
        sub_1010663B0();
      }

      +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBrushStroke p_metalTextureForCurrentStrokeAndDevice:]_block_invoke");
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      id v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStroke.mm"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v17, 1754, 0, "invalid nil value for '%{public}s'", "strokePatternTextureImage");
    }
  }
}

void sub_10046AE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10046AF78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046AFBC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046B000(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046B044(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046B088(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046B0CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_10046B290(id a1)
{
  id v1 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:512 valueOptions:0 capacity:16];
  long long v2 = (void *)qword_1016A9C70;
  qword_1016A9C70 = (uint64_t)v1;
}

void sub_10046B2DC(void *a1)
{
  id v12 = [(id)qword_1016A9C70 objectForKeyedSubscript:a1[4]];
  if (!v12)
  {
    id v12 = +[NSMutableDictionary dictionary];
    [qword_1016A9C70 setObject:forKeyedSubscript:];
  }
  long long v2 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  uint64_t v3 = [v12 objectForKeyedSubscript:v2];
  uint64_t v4 = *(void *)(a1[5] + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v3;

  if (!*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    id v6 = objc_alloc_init((Class)MTLRenderPipelineColorAttachmentDescriptor);
    [v6 setPixelFormat:a1[6]];
    [v6 setBlendingEnabled:1];
    [v6 setDestinationAlphaBlendFactor:5];
    [v6 setDestinationRGBBlendFactor:5];
    id v7 = [[CRLMetalShader alloc] initDefaultShaderWithVertexShader:@"brushStrokeVertexShader" fragmentShader:@"brushStrokeFragmentShader" device:a1[4] colorAttachment:v6];
    uint64_t v8 = *(void *)(a1[5] + 8);
    long long v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v7;

    uint64_t v10 = *(void *)(*(void *)(a1[5] + 8) + 40);
    unint64_t v11 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    [v12 setObject:v10 forKeyedSubscript:v11];
  }
}

void sub_10046B460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v10;

  _Unwind_Resume(a1);
}

void sub_10046B5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_10046B618(id a1)
{
  id v1 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:512 valueOptions:0 capacity:16];
  long long v2 = (void *)qword_1016A9C80;
  qword_1016A9C80 = (uint64_t)v1;
}

void sub_10046B664(void *a1)
{
  id v12 = [(id)qword_1016A9C80 objectForKeyedSubscript:a1[4]];
  if (!v12)
  {
    id v12 = +[NSMutableDictionary dictionary];
    [qword_1016A9C80 setObject:forKeyedSubscript:];
  }
  long long v2 = +[NSNumber numberWithUnsignedInteger:a1[6]];
  uint64_t v3 = [v12 objectForKeyedSubscript:v2];
  uint64_t v4 = *(void *)(a1[5] + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v3;

  if (!*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    id v6 = objc_alloc_init((Class)MTLRenderPipelineColorAttachmentDescriptor);
    [v6 setPixelFormat:a1[6]];
    [v6 setBlendingEnabled:1];
    [v6 setDestinationAlphaBlendFactor:5];
    [v6 setDestinationRGBBlendFactor:5];
    id v7 = [[CRLMetalShader alloc] initDefaultTextureAndColorShaderWithDevice:a1[4] colorAttachment:v6];
    uint64_t v8 = *(void *)(a1[5] + 8);
    long long v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v7;

    uint64_t v10 = *(void *)(*(void *)(a1[5] + 8) + 40);
    unint64_t v11 = +[NSNumber numberWithUnsignedInteger:a1[6]];
    [v12 setObject:v10 forKeyedSubscript:v11];
  }
}

void sub_10046B7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v10;

  _Unwind_Resume(a1);
}

void sub_10046B978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10046B9A0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10046BA18(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_10046B9FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10046BA18(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100004E40();
  }
  id result = (char *)sub_100125DF8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_10046BA5C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    id result = sub_100148CC4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10046BABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10046BAD8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    id result = sub_100148CC4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10046BB38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10046C1CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046C210(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046C748(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046C78C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046DBF0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046DC34(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046EC34(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLiOSVisualEffectHelper);
  long long v2 = (void *)qword_1016A9CF8;
  qword_1016A9CF8 = (uint64_t)v1;
}

id sub_10046F05C(uint64_t a1, void *a2)
{
  long long v2 = *(void **)(a1 + 32);
  id v3 = [a2 CGContext];

  return [v2 renderInContext:v3];
}

id sub_10046F938(uint64_t a1)
{
  return [*(id *)(a1 + 32) startAnimation];
}

id sub_10046FA54(uint64_t a1)
{
  return [*(id *)(a1 + 32) startAnimation];
}

void sub_10046FC80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046FCC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046FF18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10046FF5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100470294(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        size_t v8 = [*(id *)(a1 + 40) p_scrimOwnerForView:v7];
        long long v9 = [v8 viewForScrimOpacityAnimation];
        [v8 willBeginScrimOpacityAnimation];
        uint64_t v10 = *(void **)(a1 + 40);
        if (v10)
        {
          [v10 p_touchDownAffineTransformForView:v7];
        }
        else
        {
          long long v13 = 0u;
          long long v14 = 0u;
          long long v12 = 0u;
        }
        v11[0] = v12;
        v11[1] = v13;
        v11[2] = v14;
        [v7 setTransform:v11];
        [v9 setAlpha:1.0];
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
}

void sub_10047040C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) p_activeTouchDownAnimatorForView:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);

  if (v2 == v3) {
    [*(id *)(a1 + 32) p_setActiveTouchDownAnimator:0 forView:*(void *)(a1 + 40)];
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = *(id *)(a1 + 56);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      size_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = [*(id *)(a1 + 32) p_scrimOwnerForView:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8) v10];
        [v9 didEndScrimOpacityAnimation];

        size_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_100470734(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    long long v11 = *(_OWORD *)&CGAffineTransformIdentity.c;
    long long v12 = *(_OWORD *)&CGAffineTransformIdentity.a;
    long long v10 = *(_OWORD *)&CGAffineTransformIdentity.tx;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        size_t v8 = [*(id *)(a1 + 40) p_scrimOwnerForView:v7, v10, v11, v12];
        long long v9 = [v8 viewForScrimOpacityAnimation];
        [v8 willBeginScrimOpacityAnimation];
        v13[0] = v12;
        v13[1] = v11;
        v13[2] = v10;
        [v7 setTransform:v13];
        [v9 setAlpha:0.0];
      }
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1004708A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) p_activeTouchUpAnimatorForView:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);

  if (v2 == v3) {
    [*(id *)(a1 + 32) p_setActiveTouchUpAnimator:0 forView:*(void *)(a1 + 40)];
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = *(id *)(a1 + 56);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      size_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = [*(id *)(a1 + 32) p_scrimOwnerForView:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8) view:v10];
        [v9 didEndScrimOpacityAnimation];

        size_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_100470A38(id a1)
{
  id v1 = [objc_alloc((Class)UICubicTimingParameters) initWithControlPoint1:0.25 controlPoint2:0.0];
  id v2 = (void *)qword_1016A9D08;
  qword_1016A9D08 = (uint64_t)v1;
}

void sub_100470ADC(id a1)
{
  id v1 = [objc_alloc((Class)UISpringTimingParameters) initWithMass:1.0 stiffness:400.0 damping:25.0 initialVelocity:0.0];
  id v2 = (void *)qword_1016A9D18;
  qword_1016A9D18 = (uint64_t)v1;
}

void sub_100470B78(id a1)
{
  id v2 = +[CASpringAnimation animationWithKeyPath:@"transform"];
  [v2 setMass:1.0];
  [v2 setStiffness:400.0];
  [v2 setDamping:25.0];
  [v2 setInitialVelocity:0.0];
  [v2 settlingDuration];
  qword_1016A9D28 = v1;
}

void sub_10047113C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471180(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004711C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471208(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047143C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471480(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004716B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004716F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047194C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471990(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471B90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471BD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100471C8C(id a1)
{
  v4[0] = kCAContextDisplayName;
  v4[1] = kCAContextIgnoresHitTest;
  v5[0] = @"SnapshotContext";
  v5[1] = kCFBooleanTrue;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
  uint64_t v2 = +[CAContext remoteContextWithOptions:v1];
  id v3 = (void *)qword_1016A9D38;
  qword_1016A9D38 = v2;
}

void sub_100472674(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004726B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004726FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAnimationImplCat");
  uint64_t v2 = off_10166B678;
  off_10166B678 = v1;
}

void sub_100472740(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAnimationImplCat");
  uint64_t v2 = off_10166B678;
  off_10166B678 = v1;
}

void sub_100472784(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAnimationImplCat");
  uint64_t v2 = off_10166B678;
  off_10166B678 = v1;
}

void sub_100472904(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100472948(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004738BC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100473900(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100473944(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100473988(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100474574(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained[22];
    id v5 = v2;
    if (v3)
    {
      (*(void (**)(void))(v3 + 16))();
      uint64_t v2 = v5;
      id v4 = (void *)v5[22];
    }
    else
    {
      id v4 = 0;
    }
    v2[22] = 0;

    uint64_t v2 = v5;
  }
}

void sub_100474A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100474AC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_rwlock_init(&stru_1016A9B50, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = 0;
  return result;
}

void sub_100474AD0(uint64_t a1)
{
}

id sub_100474AD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) addExistingEntry:];
}

void sub_100474AE0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100474B24(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100474B68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained[22];
    id v5 = v2;
    if (v3)
    {
      (*(void (**)(void))(v3 + 16))();
      uint64_t v2 = v5;
      id v4 = (void *)v5[22];
    }
    else
    {
      id v4 = 0;
    }
    v2[22] = 0;

    uint64_t v2 = v5;
  }
}

void sub_100474BE8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100474F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100474FB8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100474FFC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100475040(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  [v4 addObject:v5];
  id v6 = [v5 size];

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v6;
}

int64_t sub_1004750A4(id a1, CRLZipEntry *a2, CRLZipEntry *a3)
{
  id v4 = a3;
  unint64_t v5 = [(CRLZipEntry *)a2 offset];
  unint64_t v6 = [(CRLZipEntry *)v4 offset];

  if (v5 < v6) {
    return -1;
  }
  else {
    return v5 > v6;
  }
}

void sub_10047542C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100475470(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004754B4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = v5;
  if (a2)
  {
    id v9 = v5;
    [*(id *)(a1 + 32) setCompletedUnitCount:[*(id *)(a1 + 40) size] + [*(id *)(a1 + 32) completedUnitCount]];
    [*(id *)(a1 + 48) copyRemainingEntries:*(void *)(a1 + 56) fromArchive:*(void *)(a1 + 64) progress:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 72)];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 72);
    if (!v7) {
      goto LABEL_8;
    }
    id v9 = v5;
    if (v5)
    {
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v5);
    }
    else
    {
      size_t v8 = +[NSError crl_fileWriteUnknownErrorWithUserInfo:0];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
    }
  }
  unint64_t v6 = v9;
LABEL_8:
}

void sub_10047584C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100475890(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004758D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100475918(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100475A2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a5;
  size_t v8 = v7;
  if (a2)
  {
    uint64_t v7 = *(uint64_t (***)(id, BOOL))(a1 + 32);
    if (v7) {
      uint64_t v7 = (uint64_t (**)(id, BOOL))v7[2](v7, v8 == 0);
    }
  }

  return _objc_release_x2(v7);
}

void sub_100476830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

void sub_1004768A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004768E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100476928(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047696C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004769B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004769F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100476A38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100476A7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_100476AC0(uint64_t a1)
{
  char v2 = 0;
  return (*(uint64_t (**)(void, uint64_t, void, void, void, char *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 1, 0, 0, *(void *)(a1 + 32), &v2);
}

void sub_100476B04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100476B48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  char v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100476B8C(void *a1, uint64_t a2, NSObject *a3, void *a4, unsigned char *a5)
{
  id v12 = a4;
  if (a3) {
    *(void *)(*(void *)(a1[5] + 8) + 24) += dispatch_data_get_size(a3);
  }
  (*(void (**)(void))(a1[4] + 16))();
  size_t v8 = v12;
  if (!v12 && *a5)
  {
    size_t v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:3072 userInfo:0];
  }
  if (v8)
  {
    uint64_t v9 = *(void *)(a1[6] + 8);
    uint64_t v11 = *(void *)(v9 + 40);
    long long v10 = (id *)(v9 + 40);
    if (!v11)
    {
      long long v13 = v8;
      objc_storeStrong(v10, v8);
      size_t v8 = v13;
    }
  }
}

void sub_100476C7C(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  char v7 = 0;
  uint64_t v4 = a1[4];
  if (!a2) {
    uint64_t v2 = *(void *)(*(void *)(a1[5] + 8) + 40);
  }
  (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, char *))(v4 + 16))(v4, 1, a1[6], a1[6], v2, &v7);
  uint64_t v5 = *(void *)(a1[5] + 8);
  unint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = 0;
}

void sub_100476E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004772D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004777FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_100477860(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v9 = sub_10047C5C4(@"PDF assertion failure: ", a2, (uint64_t)&a9);
    if ([v9 length])
    {
      if (qword_101719D10 != -1) {
        dispatch_once(&qword_101719D10, &stru_1014FCB38);
      }
      long long v10 = off_10166E7E8;
      if (os_log_type_enabled((os_log_t)off_10166E7E8, OS_LOG_TYPE_ERROR)) {
        sub_1010B7734((uint64_t)v9, v10);
      }
    }
    +[NSException raise:NSInternalInconsistencyException, @"%@", v9, &a9 format];
  }
}

void sub_100477928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100477F38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100477F7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047826C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004782CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100478310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100478618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047868C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004786D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100478814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004788D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004789B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100478A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100478B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100478C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100478CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v13 = 32;
  sub_10047C714(&__p, 4 * a1, &v13);
  long long v10 = +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:");
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  uint64_t v11 = sub_10047C5C4(v10, a2, (uint64_t)&a9);

  if ([v11 length])
  {
    if (qword_101719D10 != -1) {
      dispatch_once(&qword_101719D10, &stru_1014FCB58);
    }
    id v12 = off_10166E7E8;
    if (os_log_type_enabled((os_log_t)off_10166E7E8, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p) = 138412290;
      *(void *)((char *)&__p + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_100478DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_100478F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100478FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004790D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100479298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047931C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004793C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004794F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004795C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047967C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100479840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047989C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004798F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004799EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100479A10(uint64_t a1)
{
  id v24 = [*(id *)(a1 + 32) topOfContextStack];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = sub_1002469D0(v2, v24);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 taggerStateOutsideCore];

    if (v5)
    {
      uint64_t v6 = objc_opt_class();
      char v7 = [*(id *)(a1 + 40) parentRep];
      size_t v8 = sub_1002469D0(v6, v7);

      if (v8)
      {
        uint64_t v9 = [v8 info];
        long long v10 = [v9 accessibilityDescription];
        id v11 = [v10 length];

        if (v11)
        {
          id v12 = [v9 fill];
          if (v12)
          {
          }
          else
          {
            __int16 v13 = [v9 stroke];
            if (!v13
              || ([v9 stroke],
                  long long v14 = objc_claimAutoreleasedReturnValue(),
                  unsigned int v15 = [v14 isNullStroke],
                  v14,
                  v13,
                  v15))
            {
              CGContextSaveGState((CGContextRef)[*(id *)(a1 + 32) cgContext]);
              long long v16 = (CGContext *)[*(id *)(a1 + 32) cgContext];
              long long v17 = +[CRLColor clearColor];
              CGContextSetFillColorWithColor(v16, (CGColorRef)[v17 CGColor]);

              long long v18 = (CGContext *)[*(id *)(a1 + 32) cgContext];
              float v19 = [v8 layout];
              uint64_t v20 = [v19 geometry];
              [v20 size];
              v26.origin.CGFloat x = sub_100064070();
              CGContextFillRect(v18, v26);

              CGContextRestoreGState((CGContextRef)[*(id *)(a1 + 32) cgContext]);
            }
          }
        }
      }
      double v21 = *(void **)(a1 + 32);
      uint64_t v22 = [v4 taggerStateOutsideCore];
      [v21 setState:v22];

      [v4 setTaggerStateOutsideCore:0];
    }
  }

  unsigned int v23 = [[CRLPdfTaggerTextStorageChunkContext alloc] initWithStateOfTagger:*(void *)(a1 + 32) textStorageChunk:*(void *)(a1 + 40) limitSelection:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) pushContext:v23];
}

void sub_100479C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100479D50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

void sub_100479E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100479E78(uint64_t a1)
{
  uint64_t v2 = [[CRLPdfTaggerTextColumnContext alloc] initWithStateOfTagger:*(void *)(a1 + 32) column:*(void *)(a1 + 40) limitSelection:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) pushContext:];
}

void sub_100479EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100479F60(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

void sub_100479FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10047A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10047A63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_10047A688(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a5 = 1;
  }
}

void sub_10047A70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047A7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047A974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047AB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_10047AC9C(id *result)
{
  if (result[6])
  {
    uint64_t v1 = result;
    [result[4] advanceParagraphEnumeratorToCharIndex:result[5]];
    if ([v1[4] charIndexIsAtStartOfParagraph:v1[5]]) {
      [v1[4] beginParagraphWithLineFragmentRange:v1[5], v1[6]];
    }
    id v2 = v1[4];
    return (id *)[v2 assertTopOfContextStackIsParagraph:1];
  }
  return result;
}

id *sub_10047AD80(id *result)
{
  if (result[6])
  {
    uint64_t v1 = result;
    [result[4] assertTopOfContextStackIsParagraph:1];
    id result = (id *)[v1[4] charIndexIsAtEndOfParagraph:(char *)v1[5] + (void)v1[6]];
    if (result)
    {
      id v2 = v1[4];
      id v3 = v1[5];
      id v4 = v1[6];
      return (id *)[v2 endParagraphWithLineFragmentRange:v3, v4];
    }
  }
  return result;
}

void sub_10047AE5C(uint64_t a1)
{
  id v2 = [(CRLPdfTaggerContext *)[CRLPdfTaggerListLabelContext alloc] initWithStateOfTagger:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) pushContext:];
  if (![CRLPdfTagger isHeaderTag:[*(id *)(a1 + 32) topmostTagType]])[*(id *)(a1 + 32) beginTagWithType:302]; {
}
  }

void sub_10047AEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10047AF6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

void sub_10047B024(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    if ([*(id *)(a1 + 32) charIndexIsAtStartOfParagraph:*(void *)(a1 + 40)]) {
      [*(id *)(a1 + 32) beginParagraphBodyWithLineFragmentRange:*(void *)(a1 + 40), *(void *)(a1 + 48)];
    }
    uint64_t v2 = -[CRLPdfTaggerLineFragmentContext initWithStateOfTagger:lineFragmentCharRange:]([CRLPdfTaggerLineFragmentContext alloc], "initWithStateOfTagger:lineFragmentCharRange:", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
    [*(id *)(a1 + 32) pushContext:];
  }
}

void sub_10047B0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id *sub_10047B144(id *result)
{
  if (result[6])
  {
    uint64_t v1 = result;
    [result[4] restoreStateFromTopOfContextStackWithExpectedClass:objc_opt_class()];
    id result = (id *)[v1[4] charIndexIsAtEndOfParagraph:(char *)v1[5] + (void)v1[6]];
    if (result)
    {
      id v2 = v1[4];
      id v3 = v1[5];
      id v4 = v1[6];
      return (id *)[v2 endParagraphBodyWithLineFragmentRange:v3, v4];
    }
  }
  return result;
}

void sub_10047B274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047B308(uint64_t a1)
{
  id v2 = -[CRLPdfTaggerPrimaryTextRunContext initWithStateOfTagger:charRange:]([CRLPdfTaggerPrimaryTextRunContext alloc], "initWithStateOfTagger:charRange:", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
  [*(id *)(a1 + 32) pushContext:v2];
  if (*(unsigned char *)(a1 + 56))
  {
    id v3 = [*(id *)(a1 + 32) topmostParagraphContext];
    if ([v3 needsSpans])
    {
      id v4 = [*(id *)(a1 + 32) indexOfFirstVisibleCharInParagraphAtOrAfterCharIndex:*(void *)(a1 + 40)];
      int v6 = 0;
      id v5 = [*(id *)(a1 + 32) retrieveHighestInfoAtCharIndex:v4 returnTagType:&v6];
      if (!v6) {
        int v6 = 500;
      }
      [*(id *)(a1 + 32) beginTagWithType:];
    }
  }
}

void sub_10047B3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10047B45C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

void sub_10047B518(uint64_t a1)
{
  id v3 = -[CRLPdfTaggerSecondaryTextRunContext initWithStateOfTagger:charRange:baseTextRange:]([CRLPdfTaggerAncillaryTextRunContext alloc], "initWithStateOfTagger:charRange:baseTextRange:", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  [*(id *)(a1 + 32) pushContext:];
  uint64_t v2 = [*(id *)(a1 + 32) topmostParagraphContext];
  if ([v2 needsSpans]) {
    [*(id *)(a1 + 32) beginTagWithType:500];
  }
}

void sub_10047B5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10047B640(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

void sub_10047B744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_10047B85C(uint64_t a1)
{
  return [*(id *)(a1 + 32) dispatchObject:*(void *)(a1 + 40) drawableBlock:*(void *)(a1 + 48)];
}

void sub_10047B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10047B974(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_rwlock_init(&stru_1016A9B50, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = 0;
  return result;
}

void sub_10047B984(uint64_t a1)
{
}

void sub_10047B98C(uint64_t a1, void *a2)
{
}

void sub_10047BADC(_Unwind_Exception *a1)
{
  int v6 = v4;

  _Unwind_Resume(a1);
}

void sub_10047BBB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([(id)objc_opt_class() shouldMapDrawableRep:v3]) {
    [*(id *)(a1 + 32) beginDrawable:v3];
  }
}

void sub_10047BC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047BC98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([(id)objc_opt_class() shouldMapDrawableRep:v3]) {
    [*(id *)(a1 + 32) endDrawable:v3];
  }
}

void sub_10047BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10047C0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047C174(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047C1B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047C2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10047C2EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginDrawable:*(void *)(a1 + 40)];
}

void sub_10047C38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10047C3A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) endDrawable:*(void *)(a1 + 40)];
}

void sub_10047C420(uint64_t a1)
{
  uint64_t v2 = [(CRLPdfTaggerContext *)[CRLPdfTaggerCommentContext alloc] initWithStateOfTagger:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) pushContext:];
  [*(id *)(a1 + 32) beginTagWithType:507];
}

void sub_10047C48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10047C510(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = objc_opt_class();

  return [v1 restoreStateFromTopOfContextStackWithExpectedClass:v2];
}

id sub_10047C5C4(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  int v6 = +[NSString stringWithUTF8String:a2];
  id v7 = [objc_alloc((Class)NSString) initWithFormat:v6 arguments:a3];
  if ([v5 length])
  {
    uint64_t v8 = [v5 stringByAppendingString:v7];

    id v7 = (id)v8;
  }

  return v7;
}

void sub_10047C66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10047C694(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLPdfTaggingLogCat");
  uint64_t v2 = off_10166E7E8;
  off_10166E7E8 = v1;
}

void sub_10047C6D4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLPdfTaggingLogCat");
  uint64_t v2 = off_10166E7E8;
  off_10166E7E8 = v1;
}

void *sub_10047C714(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100147B0C(a1, a2);
    int v6 = (_WORD *)a1[1];
    id v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10047C77C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047D3B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D3F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D47C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D62C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D670(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047D898(id a1)
{
  uint64_t v1 = +[UITraitCollection traitCollectionWithUserInterfaceLevel:0];
  uint64_t v2 = (void *)qword_1016A9D48;
  qword_1016A9D48 = v1;
}

void sub_10047D930(id a1)
{
  uint64_t v1 = +[UITraitCollection traitCollectionWithUserInterfaceLevel:1];
  uint64_t v2 = (void *)qword_1016A9D50;
  qword_1016A9D50 = v1;
}

void sub_10047E6C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047E70C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

__CFData *sub_10047EBD0(CGImage *a1, void *a2)
{
  CFDictionaryRef v3 = a2;
  id v4 = +[NSMutableData data];
  id v5 = [UTTypePNG identifier];
  int v6 = CGImageDestinationCreateWithData(v4, v5, 1uLL, 0);

  CGImageDestinationAddImage(v6, a1, v3);
  if (!CGImageDestinationFinalize(v6))
  {

    id v4 = 0;
  }
  CFRelease(v6);

  return v4;
}

__CFData *sub_10047EC98(CGImage *a1)
{
  return sub_10047EBD0(a1, 0);
}

id sub_10047ECA0(uint64_t a1, CGFloat a2)
{
  CFDictionaryRef v3 = (UIImage *)[objc_alloc((Class)UIImage) initWithCGImage:a1];
  if (v3)
  {
    id v4 = v3;
    id v5 = UIImageJPEGRepresentation(v3, a2);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

__CFData *sub_10047ED18(CGImage *a1)
{
  uint64_t v2 = +[NSMutableData data];
  CFDictionaryRef v3 = [UTTypeTIFF identifier];
  id v4 = CGImageDestinationCreateWithData(v2, v3, 1uLL, 0);

  CGImageDestinationAddImage(v4, a1, 0);
  if (!CGImageDestinationFinalize(v4))
  {

    uint64_t v2 = 0;
  }
  if (v4) {
    CFRelease(v4);
  }

  return v2;
}

void sub_10047F41C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_10047F45C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047F4A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047F4E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_10047F524(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047F568(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047F748(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_10047F8B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_10047FA98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047FADC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10047FC78(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_10047FEF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_1004801B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_1004801F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_100480350(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_100480548(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_100481104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLScribbleInteractionDelegateCategory");
  uint64_t v2 = off_10166E7F0;
  off_10166E7F0 = v1;
}

void sub_100481210(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1004816DC(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  void v2[2] = sub_100481764;
  v2[3] = &unk_1014EDDA0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 crlaxEnumerateSmartFieldsUsingBlock:v2];
}

id sub_100481764(uint64_t a1, void *a2)
{
  return [a2 crlaxSetParentInteractiveCanvasController:*(void *)(a1 + 32)];
}

void sub_100482438(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048247C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004824C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100482504(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100482C08(id *a1, void *a2)
{
  objc_storeStrong(a1 + 6, a2);
  id v10 = a2;
  id v4 = a1;
  id v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v6 = dispatch_queue_create("CRLMultipleItemImporter", v5);
  id v7 = v4[1];
  v4[1] = v6;

  id v8 = v4[8];
  v4[8] = &__NSArray0__struct;

  id v9 = v4[9];
  v4[9] = &__NSArray0__struct;
}

void sub_100482CC0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v4 count]];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    char v9 = 0;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if (objc_msgSend(v12, "usesProgressDialog", (void)v16))
        {
          __int16 v13 = [v12 progress];
          if (v13)
          {
            [v5 addObject:v13];
            char v9 = 1;
          }
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }
  else
  {
    char v9 = 0;
  }

  v3[33] = v9 & 1;
  long long v14 = [[CRLProgressGroup alloc] initWithChildren:v5];
  unsigned int v15 = (void *)*((void *)v3 + 3);
  *((void *)v3 + 3) = v14;
}

void sub_1004832F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100483334(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100483570(uint64_t a1)
{
}

uint64_t sub_100483578(uint64_t a1)
{
  uint64_t v1 = a1;
  if ([*(id *)(a1 + 32) isCancelled]) {
    return (*(uint64_t (**)(void))(*(void *)(v1 + 40) + 16))();
  }
  uint64_t v20 = v1;
  uint64_t v2 = [*(id *)(*(void *)(v1 + 32) + 16) importers];
  id v3 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v2 count]];
  id v4 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v2 count]];
  double v21 = +[NSMutableArray array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (!v6) {
    goto LABEL_22;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)v23;
  do
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v23 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
      id v11 = [v10 boardItem];
      id v12 = [v10 error];
      [v10 embeddedDataLength];
      [v10 uploadDataLength];
      if (!v11)
      {
        if (!v12)
        {
          __int16 v13 = [v10 URL];

          if (v13)
          {
            NSErrorUserInfoKey v26 = NSURLErrorKey;
            long long v14 = [v10 URL];
            id v27 = v14;
            unsigned int v15 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
          }
          else
          {
            unsigned int v15 = 0;
          }
          id v12 = +[NSError errorWithDomain:NSURLErrorDomain code:-3001 userInfo:v15];
        }
        long long v16 = [v12 domain];
        if (v16 == @"com.apple.freeform.CRLErrorDomainInfoImporter")
        {
          id v17 = [v12 code];

          if (v17 == (id)102) {
            [v21 addObject:v12];
          }
        }
        else
        {
        }
LABEL_19:
        [v4 addObject:v12];
        goto LABEL_20;
      }
      [v3 addObject:v11];
      if (objc_msgSend(v12, "crl_errorShouldAlwaysBeReportedDuringImport")) {
        goto LABEL_19;
      }
LABEL_20:
    }
    id v7 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  }
  while (v7);
LABEL_22:

  if ([v21 count])
  {
    uint64_t v1 = v20;
    if ([v21 count] == (id)1 && objc_msgSend(v5, "count") == (id)1)
    {
      long long v18 = v4;
      id v4 = v21;
    }
    else
    {
      [v4 removeAllObjects];
      long long v18 = [v21 firstObject];
      [v4 addObject:v18];
    }

    [v3 removeAllObjects];
  }
  else
  {
    uint64_t v1 = v20;
  }
  [*(id *)(v1 + 32) setBoardItems:v3];
  [*(id *)(v1 + 32) setErrors:v4];

  return (*(uint64_t (**)(void))(*(void *)(v1 + 40) + 16))();
}

void sub_100483970(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  id v1 = [*(id *)(*(void *)(a1 + 32) + 16) importers];
  [v1 makeObjectsPerformSelector:"cancel"];
}

id sub_100483B98(void *a1)
{
  [*(id *)(a1[4] + 16) importer:a1[5] needsMediaCompatibilityFeedbackWithReasons:a1[7] forMediaType:a1[8] usingBlock:a1[6]];
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];

  return [v2 p_importerDidRequestMediaCompatibilityRequirement:v3];
}

id sub_100483C78(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_importerDidRequestMediaCompatibilityRequirement:*(void *)(a1 + 40)];
}

void sub_100483EB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100483EF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100483F38(uint64_t a1, int a2, char a3, char a4)
{
  if (a2) {
    [*(id *)(a1 + 32) cancel];
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100483FDC;
  void v9[3] = &unk_1014FA910;
  void v9[4] = v7;
  char v10 = a3;
  char v11 = a4;
  dispatch_async(v8, v9);
}

id sub_100483FDC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) completeImportWithCompatibilityOnAllDevices:*(unsigned __int8 *)(a1 + 40) allowHEVCContent:*(unsigned __int8 *)(a1 + 41)];
}

void sub_1004842D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100484340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004844F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100484684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048472C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSUInteger sub_100484830(NSRange *a1, NSRange range2, uint64_t a3, unsigned char *a4)
{
  NSRange v7 = NSIntersectionRange(a1[3], range2);
  NSUInteger result = v7.location;
  uint64_t v8 = *(void *)(a1[2].length + 8);
  if (v7.length)
  {
    *(unsigned char *)(v8 + 24) = 1;
    char v9 = *(uint64_t (**)(void))(a1[2].location + 16);
    return v9();
  }
  else
  {
    *a4 = *(unsigned char *)(v8 + 24);
  }
  return result;
}

void sub_100484C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100484CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100485404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048542C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100485470(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100485A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100485A64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100485AA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100485B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100485C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100485DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100485E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_100485EAC(unint64_t a1)
{
  if (a1 < 8) {
    return *(&off_1014FD328 + a1);
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FD080);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010B81C0();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_1014FD0A0);
  }
  uint64_t v3 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  id v4 = +[NSString stringWithUTF8String:"NSString *NSStringFromCRLWPSelectionType(CRLWPSelectionType)"];
  id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 92, 0, "Unknown selection type: %lu", a1);

  return @"<UNKNOWN SELECTION TYPE>";
}

void sub_100486058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100486080(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004860C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004866FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100486794(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004867D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048681C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100486860(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004868A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004868E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100486B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100486BB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100486BF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100486D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100486F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048720C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487250(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100487294(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100487448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048756C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100487ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100488154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004881A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004881E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100488360(id a1, _NSRange a2, unint64_t a3, BOOL *a4)
{
  if (a2.location + a2.length >= 0x7FFFFFFFFFFFFFFFLL)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FD280);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010B85C8();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FD2A0);
    }
    id v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLWPSelection i_setVisualRanges:]_block_invoke");
    id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm"];
    +[CRLAssertionHandler handleFailureInFunction:v5 file:v6 lineNumber:529 isFatal:0 description:"illegal visual range"];
  }
}

void sub_1004884F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100488518(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048855C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100488860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004888A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004888E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048892C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  +[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 addObject:];
}

void sub_100488990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100488B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100488D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100489718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004898A0(id a1, CRLBezierPath *a2)
{
  return [(CRLBezierPath *)a2 containsElementsOtherThanMoveAndClose];
}

void sub_1004898A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004898EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100489930(id a1)
{
  id v1 = sub_100401ECC("CRLFloodFillCat");
  uint64_t v2 = off_10166E8B8;
  off_10166E8B8 = v1;
}

NSString *__cdecl sub_100489970(id a1, CRLBezierPath *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = +[NSString stringWithUTF8String:[(CRLBezierPath *)v2 cString]];

  return (NSString *)v3;
}

void sub_1004899CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004899DC(id a1)
{
  id v1 = sub_100401ECC("CRLFloodFillCat");
  uint64_t v2 = off_10166E8B8;
  off_10166E8B8 = v1;
}

void sub_100489A1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100489A60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100489F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_10001D134(v48);
  _Block_object_dispose(&a35, 8);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_10001D134((uint64_t)&a45);
  _Unwind_Resume(a1);
}

id sub_10048A064(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) p_flattenedPathForPath:a2];

  return v2;
}

__n128 sub_10048A098(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10048A0BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_10048A0D4(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
  if ([v4 containsElementsOtherThanMoveAndClose])
  {
    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x5812000000;
    v24[3] = sub_10048A3A0;
    memset(&v24[5], 0, 40);
    void v24[4] = sub_10048A3AC;
    int v25 = 1065353216;
    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x5812000000;
    v22[3] = sub_10048A3B4;
    memset(&v22[5], 0, 40);
    v22[4] = sub_10048A3C0;
    int v23 = 1065353216;
    double v5 = *(double *)(a1 + 64);
    [v4 length];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_10048A3C8;
    v12[3] = &unk_1014FD528;
    uint64_t v18 = a2;
    double v19 = v5 * 2.5 / v6;
    unsigned int v15 = v24;
    long long v16 = v22;
    id v13 = *(id *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 64);
    sub_10048C3F8((uint64_t)v21, a1 + 72);
    _OWORD v21[5] = *(void *)(a1 + 112);
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v14 = v7;
    uint64_t v17 = v8;
    [v4 iterateOverPathWithPointDistancePerIteration:v12 usingBlock:1.0];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10048AAE4;
    _OWORD v11[3] = &unk_1014FD560;
    char v9 = *(NSObject **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    v11[4] = v24;
    v11[5] = v10;
    dispatch_sync(v9, v11);

    sub_10001D134((uint64_t)v21);
    _Block_object_dispose(v22, 8);
    sub_10001D134((uint64_t)&v22[6]);
    _Block_object_dispose(v24, 8);
    sub_10001D134((uint64_t)&v24[6]);
  }
}

void sub_10048A338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_10001D134(v36);
  _Block_object_dispose(&a33, 8);
  sub_10001D134(v35);
  _Block_object_dispose((const void *)(v37 - 184), 8);
  sub_10001D134(v34);

  _Unwind_Resume(a1);
}

uint64_t sub_10048A3A0(uint64_t a1, uint64_t a2)
{
  return sub_10001D51C(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_10048A3AC(uint64_t a1)
{
  return sub_10001D134(a1 + 48);
}

uint64_t sub_10048A3B4(uint64_t a1, uint64_t a2)
{
  return sub_10001D51C(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_10048A3C0(uint64_t a1)
{
  return sub_10001D134(a1 + 48);
}

uint64_t sub_10048A3C8(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v8 = (uint64_t *)(a1 + 72);
  char v9 = (double *)sub_10001CDB8((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (unint64_t *)(a1 + 72));
  if (v9 && vabdd_f64(v9[10], a4) < *(double *)(a1 + 80))
  {
    sub_10001D210((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (unint64_t *)(a1 + 72));
    sub_10001D210((void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (unint64_t *)(a1 + 72));
  }
  uint64_t v10 = *(void **)(a1 + 32);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3321888768;
  v47[2] = sub_10048A830;
  void v47[3] = &unk_1014FD4C8;
  v47[4] = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  double v12 = *(double *)(a1 + 88);
  *(double *)&v47[5] = a4;
  v47[6] = v11;
  sub_10048C3F8((uint64_t)v48, a1 + 96);
  v48[5] = *(void *)(a1 + 136);
  *(double *)&v48[6] = a2;
  *(double *)&v48[7] = a3;
  if (v10)
  {
    [v10 closestHitsTo:v47 withSearchThreshold:a2 passingTest:a3 v12];
  }
  else
  {
    __int16 v49 = 0;
    id v50 = 0;
    uint64_t v51 = 0;
  }
  v46[0] = 0;
  v46[1] = 0;
  __int16 v45 = (uint64_t *)v46;
  for (uint64_t i = *(uint64_t **)(*(void *)(*(void *)(a1 + 48) + 8) + 64); i; uint64_t i = (uint64_t *)*i)
  {
    long long v14 = *((_OWORD *)i + 3);
    long long v41 = *((_OWORD *)i + 2);
    long long v42 = v14;
    long long v15 = *((_OWORD *)i + 5);
    long long v43 = *((_OWORD *)i + 4);
    long long v44 = v15;
    long long v40 = *((_OWORD *)i + 1);
    sub_10048C68C(&v45, (unint64_t *)&v40, (uint64_t *)&v40);
  }
  long long v16 = v49;
  for (uint64_t j = v50; v16 != j; v16 += 56)
  {
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    long long v20 = *((_OWORD *)v16 + 2);
    double v39 = *((double *)v16 + 6);
    long long v37 = v19;
    long long v38 = v20;
    long long v36 = v18;
    sub_10001D210((void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (unint64_t *)&v38);
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8) + 48;
    LODWORD(v4pthread_rwlock_init(&stru_1016A9B50, 0) = 0;
    sub_10048C748(v21, (unint64_t *)&v38, &v38, (int *)&v40);
    long long v22 = (double *)sub_10001CDB8((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (unint64_t *)&v38);
    uint64_t v23 = *(void *)(a1 + 48);
    if (!v22 || v22[11] > v39)
    {
      uint64_t v24 = *v8;
      long long v41 = v36;
      long long v42 = v37;
      long long v43 = v38;
      *(double *)&long long v44 = v39;
      *(void *)&long long v40 = v24;
      *((double *)&v40 + 1) = a4;
      sub_10001D210((void *)(*(void *)(v23 + 8) + 48), (unint64_t *)&v38);
      sub_10048C974(*(void *)(*(void *)(a1 + 48) + 8) + 48, (unint64_t *)&v38, &v38, &v40);
      sub_10023D194((uint64_t)&v45, (unint64_t *)&v38);
    }
  }
  int v25 = v45;
  if (v45 != (uint64_t *)v46)
  {
    do
    {
      *(void *)&long long v40 = v25[4];
      NSErrorUserInfoKey v26 = sub_10001CDB8((void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (unint64_t *)&v40);
      if (!v26) {
        sub_10001D180("unordered_map::at: key not found");
      }
      unint64_t v27 = v26[3] + 1;
      if (v27 < 5)
      {
        sub_10001D210((void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (unint64_t *)&v40);
        uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8) + 48;
        *(void *)&long long v36 = v27;
        sub_10048CC08(v30, (unint64_t *)&v40, &v40, (uint64_t *)&v36);
      }
      else
      {
        uint64_t v28 = *(NSObject **)(a1 + 40);
        uint64_t v29 = *(void *)(a1 + 48);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        void block[2] = sub_10048A928;
        block[3] = &unk_1014FD500;
        void block[4] = *(void *)(a1 + 64);
        void block[5] = v29;
        block[6] = v40;
        dispatch_sync(v28, block);
        sub_10001D210((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (unint64_t *)&v40);
        sub_10001D210((void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (unint64_t *)&v40);
      }
      id v31 = (uint64_t *)v25[1];
      if (v31)
      {
        do
        {
          long long v32 = v31;
          id v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          long long v32 = (uint64_t *)v25[2];
          BOOL v33 = *v32 == (void)v25;
          int v25 = v32;
        }
        while (!v33);
      }
      int v25 = v32;
    }
    while (v32 != (uint64_t *)v46);
  }
  sub_10001BC78((uint64_t)&v45, v46[0]);
  if (v49)
  {
    id v50 = v49;
    operator delete(v49);
  }
  return sub_10001D134((uint64_t)v48);
}

void sub_10048A7DC(_Unwind_Exception *a1)
{
  sub_10001D134(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10048A830(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  unint64_t v15 = a2;
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 > a2) {
    return 0;
  }
  if (v5 == a2)
  {
    double v9 = *(double *)(a1 + 40);
    if (v9 > a5 || vabdd_f64(a5, v9) < *(double *)(a1 + 48)) {
      return 0;
    }
  }
  uint64_t v11 = (double *)sub_10001B6C8((void *)(a1 + 56), (unint64_t *)(a1 + 32));
  if (!v11 || (double v12 = v11[3], (v13 = (double *)sub_10001B6C8((void *)(a1 + 56), &v15)) == 0)) {
    sub_10001D180("unordered_map::at: key not found");
  }
  double v14 = *(double *)(a1 + 96) + v12 * 0.5 + v13[3] * 0.5;
  return sub_1000653B4(*(double *)(a1 + 104), *(double *)(a1 + 112), a3, a4) <= v14;
}

uint64_t sub_10048A914(uint64_t a1, uint64_t a2)
{
  return sub_10048C3F8(a1 + 56, a2 + 56);
}

uint64_t sub_10048A920(uint64_t a1)
{
  return sub_10001D134(a1 + 56);
}

void sub_10048A928(void *a1)
{
  uint64_t v1 = *(void **)(a1[4] + 8);
  uint64_t v2 = sub_10001CDB8((void *)(*(void *)(a1[5] + 8) + 48), a1 + 6);
  if (!v2) {
    sub_10001D180("unordered_map::at: key not found");
  }
  uint64_t v3 = v2 + 3;
  unint64_t v4 = v1[8];
  unint64_t v5 = v1[7];
  if (v5 >= v4)
  {
    uint64_t v10 = v1[6];
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL) {
      sub_100004E40();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_10048CBBC((uint64_t)(v1 + 8), v14);
    }
    else {
      unint64_t v15 = 0;
    }
    long long v16 = &v15[72 * v11];
    uint64_t v17 = &v15[72 * v14];
    *(_OWORD *)long long v16 = *(_OWORD *)v3;
    long long v18 = *((_OWORD *)v3 + 1);
    long long v19 = *((_OWORD *)v3 + 2);
    long long v20 = *((_OWORD *)v3 + 3);
    *((void *)v16 + 8) = v3[8];
    *((_OWORD *)v16 + 2) = v19;
    *((_OWORD *)v16 + 3) = v20;
    *((_OWORD *)v16 + 1) = v18;
    double v9 = v16 + 72;
    long long v22 = (char *)v1[6];
    uint64_t v21 = (char *)v1[7];
    if (v21 != v22)
    {
      do
      {
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v21 - 72);
        long long v23 = *(_OWORD *)(v21 - 56);
        long long v24 = *(_OWORD *)(v21 - 40);
        long long v25 = *(_OWORD *)(v21 - 24);
        *((void *)v16 - 1) = *((void *)v21 - 1);
        *(_OWORD *)(v16 - 24) = v25;
        *(_OWORD *)(v16 - 4pthread_rwlock_init(&stru_1016A9B50, 0) = v24;
        *(_OWORD *)(v16 - 56) = v23;
        v16 -= 72;
        v21 -= 72;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)v1[6];
    }
    v1[6] = v16;
    v1[7] = v9;
    v1[8] = v17;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v3;
    long long v6 = *(_OWORD *)(v2 + 5);
    long long v7 = *(_OWORD *)(v2 + 7);
    long long v8 = *(_OWORD *)(v2 + 9);
    *(void *)(v5 + 64) = v2[11];
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v8;
    *(_OWORD *)(v5 + 16) = v6;
    double v9 = (char *)(v5 + 72);
  }
  v1[7] = v9;
}

uint64_t sub_10048AAD0(uint64_t a1, uint64_t a2)
{
  return sub_10048C3F8(a1 + 96, a2 + 96);
}

uint64_t sub_10048AADC(uint64_t a1)
{
  return sub_10001D134(a1 + 96);
}

void sub_10048AAE4(uint64_t a1)
{
  for (uint64_t i = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 64); i; uint64_t i = (uint64_t *)*i)
  {
    *(_OWORD *)&v20[32] = *((_OWORD *)i + 3);
    *(_OWORD *)&v20[48] = *((_OWORD *)i + 4);
    *(_OWORD *)&v20[64] = *((_OWORD *)i + 5);
    *(_OWORD *)long long v20 = *((_OWORD *)i + 1);
    *(_OWORD *)&v20[16] = *((_OWORD *)i + 2);
    uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
    unint64_t v4 = v3[7];
    unint64_t v5 = v3[8];
    if (v4 >= v5)
    {
      uint64_t v7 = v3[6];
      unint64_t v8 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v7) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x38E38E38E38E38ELL) {
        sub_100004E40();
      }
      unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v7) >> 3);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x1C71C71C71C71C7) {
        unint64_t v11 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11) {
        unint64_t v12 = (char *)sub_10048CBBC((uint64_t)(v3 + 8), v11);
      }
      else {
        unint64_t v12 = 0;
      }
      unint64_t v13 = &v12[72 * v8];
      *((void *)v13 + 8) = *(void *)&v20[72];
      *((_OWORD *)v13 + 2) = *(_OWORD *)&v20[40];
      *((_OWORD *)v13 + 3) = *(_OWORD *)&v20[56];
      *(_OWORD *)unint64_t v13 = *(_OWORD *)&v20[8];
      *((_OWORD *)v13 + 1) = *(_OWORD *)&v20[24];
      unint64_t v15 = (char *)v3[6];
      unint64_t v14 = (char *)v3[7];
      long long v16 = v13;
      if (v14 != v15)
      {
        do
        {
          *(_OWORD *)(v16 - 72) = *(_OWORD *)(v14 - 72);
          long long v17 = *(_OWORD *)(v14 - 56);
          long long v18 = *(_OWORD *)(v14 - 40);
          long long v19 = *(_OWORD *)(v14 - 24);
          *((void *)v16 - 1) = *((void *)v14 - 1);
          *(_OWORD *)(v16 - 24) = v19;
          *(_OWORD *)(v16 - 4pthread_rwlock_init(&stru_1016A9B50, 0) = v18;
          *(_OWORD *)(v16 - 56) = v17;
          v16 -= 72;
          v14 -= 72;
        }
        while (v14 != v15);
        unint64_t v14 = (char *)v3[6];
      }
      long long v6 = v13 + 72;
      void v3[6] = v16;
      v3[7] = v13 + 72;
      v3[8] = &v12[72 * v11];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_OWORD *)(v4 + 32) = *(_OWORD *)&v20[40];
      *(_OWORD *)(v4 + 48) = *(_OWORD *)&v20[56];
      *(void *)(v4 + 64) = *(void *)&v20[72];
      *(_OWORD *)unint64_t v4 = *(_OWORD *)&v20[8];
      *(_OWORD *)(v4 + 16) = *(_OWORD *)&v20[24];
      long long v6 = (char *)(v4 + 72);
    }
    v3[7] = v6;
  }
}

uint64_t sub_10048ACB8(uint64_t a1, uint64_t a2)
{
  return sub_10048C3F8(a1 + 72, a2 + 72);
}

uint64_t sub_10048ACC4(uint64_t a1)
{
  return sub_10001D134(a1 + 72);
}

void sub_10048ACCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v2 = *(double **)(v1 + 48);
  for (uint64_t i = *(double **)(v1 + 56); v2 != i; v2 += 9)
  {
    double v6 = v2[1];
    double v5 = v2[2];
    double v7 = v2[3];
    double v8 = v2[4];
    double v9 = v2[5];
    uint64_t v10 = *((void *)v2 + 6);
    double v11 = v2[7];
    unint64_t v12 = [*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)v2];
    unint64_t v13 = [*(id *)(a1 + 56) p_bezierPathWithSectionOfBezierPath:v12 centeredAtPercentAlongPath:v6 withMaximumLength:5.0];
    unint64_t v14 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v10];
    unint64_t v15 = [*(id *)(a1 + 56) p_bezierPathWithSectionOfBezierPath:v14 centeredAtPercentAlongPath:v11 withMaximumLength:5.0];
    if (!+[CRLBezierPathBooleanOperationHelper hasAnyCrossingBetweenPath:v13 andPath:v15])
    {
      long long v16 = +[CRLBezierPath bezierPathWithStart:end:](CRLBezierPath, "bezierPathWithStart:end:", v5, v7, v8, v9);
      [*(id *)(a1 + 40) addObject:v16];
    }
  }
}

void sub_10048AE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048AE50()
{
}

void sub_10048B050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10048B094(uint64_t a1)
{
  return [*(id *)(a1 + 32) lineToPoint:];
}

void sub_10048B170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048BDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048BF20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048BF64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048BFA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048BFEC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C030(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C074(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C0B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C0FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C140(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048C184(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void *sub_10048C1C8(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10001B9D4(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10048C3E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10048C3F8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10001B9D4(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_10048C470(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_10048C458(_Unwind_Exception *a1)
{
  sub_10001D134(v1);
  _Unwind_Resume(a1);
}

void *sub_10048C470(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10001B9D4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  size_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *size_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    size_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10048C678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10048C68C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        double v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v8 = a1 + 1;
LABEL_10:
    uint8x8_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10001C4D8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *sub_10048C748(uint64_t a1, unint64_t *a2, void *a3, int *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10048C960(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_10048C974(uint64_t a1, unint64_t *a2, void *a3, long long *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      float v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          float v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  float v12 = (char *)operator new(0x60uLL);
  long long v14 = *a4;
  *(_OWORD *)(v12 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = a4[1];
  long long v15 = a4[3];
  *(_OWORD *)(v12 + 56) = a4[2];
  *(void *)float v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 72) = v15;
  *((void *)v12 + 11) = *((void *)a4 + 8);
  *(_OWORD *)(v12 + 24) = v14;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10001B9D4(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)float v12 = *v23;
LABEL_38:
    *unint64_t v23 = v12;
    goto LABEL_39;
  }
  *(void *)float v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v24 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10048CBA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10048CBBC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_100004F34();
  }
  return operator new(72 * a2);
}

void *sub_10048CC08(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10001B9D4(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10048CE20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10048D208(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048D24C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10048EE84(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) crlaxCompleteConnectionsCustomContent];
  [v1 addObjectsFromArray:v2];
}

void sub_10048FD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_10048FD94(uint64_t a1)
{
  [*(id *)(a1 + 32) transformToConvertNaturalFromLayerRelative];
  id v2 = *(_OWORD **)(*(void *)(a1 + 40) + 8);
  __n128 result = v6;
  void v2[2] = v4;
  v2[3] = v5;
  void v2[4] = v6;
  return result;
}

void sub_100490610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100490628(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertNaturalPointFromUnscaledCanvas:*(double *)(a1 + 48) *(double *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v5;
  return result;
}

void sub_100490748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100490760(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertNaturalRectFromUnscaledCanvas:*(double *)(a1 + 48) *(double *)(a1 + 56) *(double *)(a1 + 64) *(double *)(a1 + 72)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  void v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_10049086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100490884(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertNaturalPointToUnscaledCanvas:*(double *)(a1 + 48) *(double *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 4pthread_rwlock_init(&stru_1016A9B50, 0) = v5;
  return result;
}

void sub_1004909A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004909BC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertNaturalRectToUnscaledCanvas:*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  void v3[6] = v6;
  v3[7] = v7;
  return result;
}

id sub_100491B4C(uint64_t a1)
{
  [*(id *)(a1 + 32) crlaxPerformCleanupTasksPriorToRemovalFromCanvas];
  id result = [*(id *)(a1 + 32) crlaxRespondsToSelector:"crlaxPerformExtraCleanupTasksPriorToRemovalFromCanvas" fromExtrasProtocol:&OBJC_PROTOCOL___CRLCanvasRepAccessibilityExtras];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return _[v3 crlaxPerformExtraCleanupTasksPriorToRemovalFromCanvas];
  }
  return result;
}

void sub_100491C88(id a1)
{
}

uint64_t sub_1004924E4(CGFloat *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v36 = 0;
  id v7 = v5;
  unint64_t v8 = objc_opt_class();
  uint64_t v9 = __CRLAccessibilityCastAsSafeCategory(v8, (uint64_t)v7, 1, &v36);
  if (v36) {
    goto LABEL_7;
  }
  uint8x8_t v10 = (void *)v9;

  [v10 crlaxFrameInUnscaledCanvas];
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  CGFloat v19 = a1[4];
  CGFloat v20 = a1[5];
  CGFloat v21 = a1[6];
  CGFloat v22 = a1[7];

  char v35 = 0;
  id v23 = v6;
  unint64_t v24 = objc_opt_class();
  uint64_t v25 = __CRLAccessibilityCastAsSafeCategory(v24, (uint64_t)v23, 1, &v35);
  if (v35) {
LABEL_7:
  }
    abort();
  NSErrorUserInfoKey v26 = (void *)v25;
  double v27 = sub_1000655FC(v19, v20, v21, v22, v12, v14, v16, v18);

  [v26 crlaxFrameInUnscaledCanvas];
  double v32 = sub_1000655FC(a1[4], a1[5], a1[6], a1[7], v28, v29, v30, v31);

  if (v27 <= v32) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = -1;
  }

  return v33;
}

void sub_1004934C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049350C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004945FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100494640(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100494CB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100494CF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100495050(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100495094(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004968A0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004968E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496928(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049696C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004969B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004969F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496A38(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496A7C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496AC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496B04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496B48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496B8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496BD0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100496C14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100497960(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004979A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004979E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100497A2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100497D30(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100497D74(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498BB4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498BF8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498C3C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498C80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498CC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498D08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498D4C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100498D90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100499154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10049916C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_10049917C(uint64_t a1)
{
}

void sub_100499184(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _accessibilityParentTableView];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
}

void sub_1004994B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004994FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100499540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100499584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049B288(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049B2CC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049B310(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049B354(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049BA0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049BA50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049BA94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049BAD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049BF4C(id a1)
{
  uint64_t v1 = objc_alloc_init(CRLWPFontList);
  uint64_t v2 = (void *)qword_1016A9D70;
  qword_1016A9D70 = (uint64_t)v1;
}

void sub_10049BFDC(id a1)
{
  uint64_t v1 = +[NSBundle mainBundle];
  id v4 = [v1 pathForResource:@"FontExclusionList" ofType:@"plist"];

  if (v4) {
    id v2 = [objc_alloc((Class)NSArray) initWithContentsOfFile:v4];
  }
  else {
    id v2 = objc_alloc_init((Class)NSArray);
  }
  uint64_t v3 = (void *)qword_1016A9D80;
  qword_1016A9D80 = (uint64_t)v2;
}

id sub_10049C188(id a1, NSArray *a2, unint64_t a3)
{
  return sub_1001CD36C(a2, a3);
}

id sub_10049C2A0(id a1, NSString *a2)
{
  id v2 = [(NSString *)a2 componentsSeparatedByString:@"|"];
  if ([v2 count])
  {
    uint64_t v3 = [v2 objectAtIndexedSubscript:0];
    id v4 = 0;
    if ((unint64_t)[v2 count] >= 2)
    {
      id v5 = [v2 objectAtIndexedSubscript:1];
      unsigned __int8 v6 = [v5 isEqualToString:&stru_101538650];

      if (v6)
      {
        id v4 = 0;
      }
      else
      {
        id v4 = [v2 objectAtIndexedSubscript:1];
      }
    }
    id v7 = [[CRLWPOpaqueFontID alloc] initWithPostScriptName:v3 familyName:v4];
  }
  else
  {
    id v7 = +[NSNull null];
  }

  return v7;
}

BOOL sub_10049C3A8(id a1, id a2, NSDictionary *a3)
{
  id v3 = a2;
  id v4 = +[NSNull null];

  return v4 != v3;
}

void sub_10049CC58(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049CC9C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10049CCE0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

void sub_10049D110(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049D154(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_10049DB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    id v7 = 0;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(v3, "hasPrefix:", *(void *)(*((void *)&v12 + 1) + 8 * i), (void)v12))
        {
          id v10 = v3;

          id v7 = v10;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10049E374(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049E3B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049E3FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049E440(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049E6B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049E6FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

CRLWPFont *__cdecl sub_10049E944(id a1, CRLWPOpaqueFontID *a2)
{
  return +[CRLWPFont fontWithOpaqueIdentifier:a2];
}

BOOL sub_10049E954(id a1, id a2, NSDictionary *a3)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = sub_1002469D0(v4, v3);

  LOBYTE(v3) = [v5 isRequestedFont];
  return (char)v3;
}

id sub_10049EA28(id a1, CRLWPOpaqueFontID *a2)
{
  id v2 = a2;
  id v3 = [(CRLWPOpaqueFontID *)v2 desiredPostScriptName];
  uint64_t v4 = [(CRLWPOpaqueFontID *)v2 familyName];

  id v5 = +[NSString stringWithFormat:@"%@|%@", v3, v4];

  return v5;
}

void sub_10049F57C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049F5C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049FC94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10049FCD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A012C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A0170(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A01B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A01F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A0E58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004A0E68(uint64_t a1)
{
}

void sub_1004A0E70(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) crlaxSubstringInStorageWithRange:*(void *)(a1 + 48) *(void *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
}

void sub_1004A112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004A1144(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) glyphRectForRange:*(void *)(a1 + 48) includingLabel:*(void *)(a1 + 56)];
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  void v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1004A14B8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A14FC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1540(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1584(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1D90(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1DD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1E18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1E5C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1EA0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1EE4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1F28(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1F6C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1FB0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A1FF4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2984(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A29C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2A0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2A50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2A94(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2AD8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2B1C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2B60(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2BA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2BE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2C2C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A2C70(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A37A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A37E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A4C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A4C88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004A4C98(uint64_t a1)
{
}

void sub_1004A4CA0(uint64_t a1, const void *a2, uint64_t a3, size_t a4)
{
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x3032000000;
  v15[3] = sub_1004A4C88;
  v15[4] = sub_1004A4C98;
  id v16 = *(id *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(a1 + 40);
  destructor[0] = _NSConcreteStackBlock;
  destructor[1] = 3221225472;
  destructor[2] = sub_1004A4E08;
  destructor[3] = &unk_1014D3DB0;
  destructor[4] = v15;
  uint64_t v9 = dispatch_data_create(a2, a4, v8, destructor);
  dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  long long v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = concat;

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, NSObject *, uint64_t, const void *, size_t))(v13 + 16))(v13, v9, a3, a2, a4);
  }

  _Block_object_dispose(v15, 8);
}

void sub_1004A4DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004A4E08(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
}

id sub_1004A587C(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_prepareForHitTestingInBackgroundWithMarqueeSelectionEligibleInfos:*(void *)(a1 + 40) marqueeSelectionIneligibleInfos:*(void *)(a1 + 48) viewScale:*(double *)(a1 + 56) visibleUnscaledRect:*(double *)(a1 + 64) visibleUnscaledRect:*(double *)(a1 + 72) visibleUnscaledRect:*(double *)(a1 + 80) visibleUnscaledRect:*(double *)(a1 + 88)];
}

void sub_1004A5B4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 64);
  *(void *)(v4 + 64) = 0;

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 72);
  *(void *)(v6 + 72) = 0;
}

void sub_1004A6244(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A6288(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A6ACC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A6B10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A6EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1004A6EFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004A6F0C(uint64_t a1)
{
}

void sub_1004A6F14(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) pathsWithPercentage:*(void *)(a1 + 40) approximatelyInsidePath:1 requiringPercentForFilledEdges:0.5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*(void *)(a1 + 32) + 64) objectForKeyedSubscript:*(void *)(*((void *)&v11 + 1) + 8 * (void)v9) v11];
        if (v10) {
          [*(id *)(a1 + 48) addObject:v10];
        }

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
}

_TtC8Freeform12CRLBoardItem *__cdecl sub_1004A8480(id a1, CRLCanvasLayout *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = [(CRLCanvasLayout *)v2 info];

  id v5 = sub_1002469D0(v3, v4);

  return (_TtC8Freeform12CRLBoardItem *)v5;
}

void sub_1004A9200(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 copy];
  [*(id *)(a1 + 32) setObject:v5 atIndexedSubscript:a3];
}

void sub_1004A9940(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A9984(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A9C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A9F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A9F84(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004A9FC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA00C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA050(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AA3C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA404(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA448(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA48C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AA728(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AA76C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AAB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AABA4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AABE8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004AAC2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004AAC3C(uint64_t a1)
{
}

void sub_1004AAC44(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1004AAFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB020(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AB064(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AB0A8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AB0EC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AB16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB49C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLFreehandDrawingPathCreatorCodeCat");
  uint64_t v2 = off_10166E980;
  off_10166E980 = v1;
}

void sub_1004AB684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB6AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AB6F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ABAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004ABB0C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ABB50(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AC050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  _Unwind_Resume(a1);
}

void sub_1004AC0C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AC10C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AC238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1004AC2EC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    id result = sub_1004AC368(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1004AC34C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1004AC368(void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_100004E40();
  }
  id result = (char *)sub_1001725F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *sub_1004AC3BC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    id result = sub_1004AC368(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1004AC41C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AC7B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AC7F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AC9D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ACA14(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ACBCC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ACC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1004AD790(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 integerValue] == *(id *)(a1 + 32);
}

id sub_1004AD878(uint64_t a1)
{
  return [*(id *)(a1 + 32) containsObject:];
}

id sub_1004AD9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:a2];
  uint64_t v4 = (void *)v3;
  id v5 = &off_10155DEB0;
  if (v3) {
    id v5 = (_UNKNOWN **)v3;
  }
  id v6 = v5;

  id v7 = [*(id *)(a1 + 40) containsObject:v6];
  return v7;
}

id sub_1004ADD0C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) entriesCountImpl];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1004ADFAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1004ADFC8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AE00C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AE050(uint64_t a1)
{
  id WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    dispatch_semaphore_signal(WeakRetained[4]);
    id WeakRetained = v2;
  }
}

id sub_1004AE188(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginEntryWithNameImpl:*(void *)(a1 + 40) force32BitSize:*(unsigned __int8 *)(a1 + 68) lastModificationDate:*(void *)(a1 + 48) size:*(void *)(a1 + 56) CRC:*(unsigned int *)(a1 + 64) forceCalculatingSizeAndCRCForPreservingLastModificationDate:*(unsigned __int8 *)(a1 + 69)];
}

void sub_1004AE5E4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AE628(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AE66C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AE6B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004AE7E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) addDataImpl:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1004AEBC0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AEC04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004AEC48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1004AEC5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1004AEC70(uint64_t a1, uint64_t a2, uint64_t a3, const Bytef *a4, unint64_t a5)
{
  unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 64) CRC];
  if (HIDWORD(a5))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEC38);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BADEC();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEC58);
    }
    id v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    long long v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipWriter addDataImpl:queue:completion:]_block_invoke");
    long long v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:v11 file:v12 lineNumber:273 isFatal:0 description:"Out-of-bounds type assignment was clamped to max"];

    LODWORD(a5) = -1;
  }
  [*(id *)(*(void *)(a1 + 32) + 64) setCRC:crc32(v8, a4, a5)];
  return 1;
}

void sub_1004AEE04(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AEE48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AF054(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 72))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FECA0);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BAE74();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FECC0);
    }
    id v10 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v10);
    }
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Trying to flush while closed.", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"-[CRLZipWriter flushCurrentEntryWithQueue:completion:]_block_invoke");
    double v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipWriter flushCurrentEntryWithQueue:completion:]_block_invoke");
    CGFloat v19 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:v18 file:v19 lineNumber:291 isFatal:1 description:"Trying to flush while closed."];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v20, v21);
    abort();
  }
  uint64_t v3 = *(void **)(v2 + 160);
  if (v3)
  {
    id v4 = v3;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    void block[2] = sub_1004AF364;
    block[3] = &unk_1014CAE00;
    id v5 = *(NSObject **)(a1 + 40);
    id v6 = *(id *)(a1 + 48);
    id v26 = v4;
    id v27 = v6;
    id v7 = v4;
    dispatch_async(v5, block);
  }
  else
  {
    [(id)v2 finishEntry];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(NSObject **)(v8 + 16);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1004AF378;
    v22[3] = &unk_1014F2070;
    v22[4] = v8;
    id v24 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 40);
    dispatch_async(v9, v22);
  }
}

void sub_1004AF2DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AF320(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004AF364(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004AF378(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = [*(id *)(a1 + 32) p_writeChannel];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004AF43C;
  v6[3] = &unk_1014FECE8;
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v8 = v3;
  v6[4] = v4;
  id v7 = v5;
  [v2 flushWithCompletion:v6];
}

void sub_1004AF43C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1[6])
  {
    id v5 = v3;
    if (!v3) {
      id v5 = *(void **)(a1[4] + 160);
    }
    id v6 = v5;
    id v7 = (void (**)(void, void))a1[6];
    if (v7)
    {
      id v8 = a1[5];
      if (v8)
      {
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_1004AF53C;
        void v9[3] = &unk_1014CAE00;
        uint64_t v11 = v7;
        id v10 = v6;
        dispatch_async(v8, v9);
      }
      else
      {
        ((void (**)(void, id))v7)[2](v7, v6);
      }
    }
  }
  dispatch_resume(*(dispatch_object_t *)(a1[4] + 16));
}

uint64_t sub_1004AF53C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004AF734(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004AF860(uint64_t a1, int a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, BOOL, id))(v8 + 16))(v8, v7 == 0, v7);
    }
  }
}

void sub_1004AFB48(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AFB8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AFBD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 72))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FED90);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BAFE4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEDB0);
    }
    uint64_t v4 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v4);
    }
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Already closed.", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"-[CRLZipWriter writeEntryWithName:force32BitSize:lastModificationDate:size:CRC:fromReadChannel:writeHandler:]_block_invoke");
    uint64_t v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipWriter writeEntryWithName:force32BitSize:lastModificationDate:size:CRC:fromReadChannel:writeHandler:]_block_invoke");
    uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:v12 file:v13 lineNumber:367 isFatal:1 description:"Already closed."];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v14, v15);
    abort();
  }
  dispatch_suspend(*(dispatch_object_t *)(v1 + 144));
  [*(id *)(a1 + 32) beginEntryWithNameImpl:*(void *)(a1 + 40) force32BitSize:*(unsigned __int8 *)(a1 + 84) lastModificationDate:*(void *)(a1 + 48) size:*(void *)(a1 + 72) CRC:*(unsigned int *)(a1 + 80) forceCalculatingSizeAndCRCForPreservingLastModificationDate:0];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1004AFE5C;
  v16[3] = &unk_1014FEDD8;
  v16[4] = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  [v3 readWithHandler:v16];
}

void sub_1004AFDD4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AFE18(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004AFE5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  [*(id *)(a1 + 32) handleWriteError:a4];
  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    if (!v8[20]) {
      [v8 addDataImpl:v7 queue:0 completion:0];
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    char v12 = 0;
    (*(void (**)(uint64_t, uint64_t, id, void, char *))(v9 + 16))(v9, a2, v7, *(void *)(*(void *)(a1 + 32) + 160), &v12);
    if (v12)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = +[NSError errorWithDomain:NSCocoaErrorDomain code:3072 userInfo:0];
      [v10 handleWriteError:v11];
    }
  }
  if (a2) {
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 144));
  }
}

id sub_1004B0020(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addExistingEntryImpl:*(void *)(a1 + 40)];
}

id sub_1004B01D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setEntryInsertionOffsetImpl:*(void *)(a1 + 40)];
}

void sub_1004B0294(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 144));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004B0338;
  v4[3] = &unk_1014D0AB0;
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, v4);
}

void sub_1004B0338(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = [*(id *)(a1 + 32) p_writeChannel];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004B03E8;
  v4[3] = &unk_1014CAE00;
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 addBarrier:v4];
}

void sub_1004B03E8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);

  dispatch_resume(v2);
}

void sub_1004B0500(id *a1)
{
  uint64_t v2 = a1[4];
  if (v2[72])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEE20);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BB06C();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEE40);
    }
    uint64_t v9 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v9);
    }
    sub_1001D9720((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d Shouldn't have closed twice.", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"-[CRLZipWriter closeWithQueue:completion:]_block_invoke");
    id v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipWriter closeWithQueue:completion:]_block_invoke");
    double v18 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:v17 file:v18 lineNumber:460 isFatal:1 description:"Shouldn't have closed twice."];

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v19, v20);
    abort();
  }
  if (*((void *)v2 + 20))
  {
    v2[72] = 1;
    id v3 = *((id *)a1[4] + 20);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    void block[2] = sub_1004B0834;
    block[3] = &unk_1014CAE00;
    uint64_t v4 = a1[5];
    id v5 = a1[6];
    id v25 = v3;
    id v26 = v5;
    id v6 = v3;
    dispatch_async(v4, block);
  }
  else
  {
    [v2 finishEntry];
    [a1[4] writeCentralDirectory];
    *((unsigned char *)a1[4] + 72) = 1;
    id v7 = a1[4];
    uint64_t v8 = *((void *)v7 + 2);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1004B0848;
    v21[3] = &unk_1014F2070;
    v21[4] = v7;
    id v23 = a1[6];
    id v22 = a1[5];
    dispatch_async(v8, v21);
  }
}

void sub_1004B07AC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B07F0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004B0834(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004B0848(id *a1)
{
  dispatch_suspend(*((dispatch_object_t *)a1[4] + 2));
  uint64_t v2 = [a1[4] p_writeChannel];
  objc_initWeak(&location, v2);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004B0960;
  v3[3] = &unk_1014FEEA8;
  objc_copyWeak(&v6, &location);
  v3[4] = a1[4];
  id v5 = a1[6];
  id v4 = a1[5];
  [v2 addBarrier:v3];

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_1004B0944(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1004B0960(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEE60);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BB0F4();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FEE80);
    }
    id v3 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_10106590C(v3);
    }
    id v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipWriter closeWithQueue:completion:]_block_invoke");
    id v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 491, 0, "invalid nil value for '%{public}s'", "strongWriteChannel");
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1004B0BEC;
  block[3] = &unk_1014F1F90;
  id v10 = WeakRetained;
  uint64_t v11 = v6;
  id v13 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 40);
  id v8 = WeakRetained;
  dispatch_async(v7, block);
}

void sub_1004B0B64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B0BA8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B0BEC(uint64_t a1)
{
  [*(id *)(a1 + 32) close];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 56))
  {
    id v2 = *(id *)(*(void *)(a1 + 40) + 160);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1004B0CD0;
    v6[3] = &unk_1014CAE00;
    id v3 = *(NSObject **)(a1 + 48);
    id v4 = *(id *)(a1 + 56);
    id v7 = v2;
    id v8 = v4;
    id v5 = v2;
    dispatch_async(v3, v6);
  }
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 40) + 16));
}

uint64_t sub_1004B0CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004B1068(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004B1380(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004B1758(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void (***)(void, void))(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1004B1820;
      v6[3] = &unk_1014CAE00;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
    else
    {
      ((void (**)(void, id))v4)[2](v4, v3);
    }
  }
}

uint64_t sub_1004B1820(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004B1904(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3032000000;
  void v9[3] = sub_1004B1A3C;
  void v9[4] = sub_1004B1A4C;
  id v10 = 0;
  id v2 = [*(id *)(a1 + 32) p_writeChannel];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004B1A54;
  v6[3] = &unk_1014FEF38;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v9;
  void v6[4] = v3;
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  [v2 writeData:v4 offset:v5 handler:v6];

  _Block_object_dispose(v9, 8);
}

void sub_1004B1A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B1A3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004B1A4C(uint64_t a1)
{
}

void sub_1004B1A54(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7 && (uint64_t v8 = *(void *)(a1[6] + 8), v10 = *(void *)(v8 + 40), v9 = (id *)(v8 + 40), !v10))
  {
    objc_storeStrong(v9, a4);
    if (!a2) {
      goto LABEL_11;
    }
  }
  else if (!a2)
  {
    goto LABEL_11;
  }
  uint64_t v11 = a1[6];
  if (*(void *)(*(void *)(v11 + 8) + 40))
  {
    uint64_t v12 = a1[4];
    id v13 = *(NSObject **)(v12 + 144);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1004B1B54;
    v15[3] = &unk_1014CB140;
    v15[4] = v12;
    void v15[5] = v11;
    dispatch_async(v13, v15);
  }
  uint64_t v14 = a1[5];
  if (v14) {
    (*(void (**)(uint64_t, void))(v14 + 16))(v14, *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  dispatch_resume(*(dispatch_object_t *)(a1[4] + 16));
LABEL_11:
}

id sub_1004B1B54(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleWriteError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_1004B1E20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B1E64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004B1F54(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 112);
  return result;
}

void sub_1004B20B0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  id v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004B20F4(uint64_t a1)
{
  [*(id *)(a1 + 32) p_writeChannel];
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 close];
}

void sub_1004B21D0(uint64_t a1)
{
  unsigned __int8 v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 40);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v13 != v5) {
        objc_enumerationMutation(v2);
      }
      id v7 = *(void **)(*((void *)&v12 + 1) + 8 * v6);
      uint64_t v8 = objc_alloc_init(CRLZipEntry);
      uint64_t v9 = [v7 name];
      [(CRLZipEntry *)v8 setName:v9];

      id v10 = [(CRLZipEntry *)v8 name];
      -[CRLZipEntry setNameLength:](v8, "setNameLength:", (unsigned __int16)strlen((const char *)[v10 UTF8String]));

      uint64_t v11 = [v7 lastModificationDate];
      [(CRLZipEntry *)v8 setLastModificationDate:v11];

      -[CRLZipEntry setSize:](v8, "setSize:", [v7 size]);
      -[CRLZipEntry setCompressedSize:](v8, "setCompressedSize:", [v7 size]);
      -[CRLZipEntry setOffset:](v8, "setOffset:", [v7 offset]);
      -[CRLZipEntry setCRC:](v8, "setCRC:", [v7 CRC]);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      LODWORD(v7) = v16;

      if (v7) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v12 objects:v17 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

int64_t sub_1004B2420(id a1, CRLZipWriterEntry *a2, CRLZipWriterEntry *a3)
{
  id v4 = a3;
  unint64_t v5 = [(CRLZipWriterEntry *)a2 offset];
  unint64_t v6 = [(CRLZipWriterEntry *)v4 offset];

  if (v5 < v6) {
    return -1;
  }
  else {
    return v5 > v6;
  }
}

void sub_1004B2568(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) sortedEntriesImpl];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
}

uint64_t sub_1004B2660(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 72);
  return result;
}

void sub_1004B2784(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 56) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
}

id sub_1004B287C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) truncateToNumberOfEntriesImpl:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1004B2A80(uint64_t a1)
{
  return [*(id *)(a1 + 32) truncateToOffsetImpl:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

void sub_1004B2D48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B2D8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

char *sub_1004B3604(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) range];
  if (v2 >= [*(id *)(a1 + 40) range]
    || (uint64_t v3 = (char *)[*(id *)(a1 + 40) range],
        unint64_t v5 = &v3[v4],
        unint64_t v6 = (char *)[*(id *)(a1 + 32) range],
        v5 >= &v6[v7]))
  {
    id v13 = [*(id *)(a1 + 32) range];
    NSUInteger v15 = v14;
    v17.id location = (NSUInteger)[*(id *)(a1 + 40) range];
    v17.length = v16;
    v18.id location = (NSUInteger)v13;
    v18.length = v15;
    return (char *)NSUnionRange(v18, v17).location;
  }
  else
  {
    uint64_t v8 = (char *)[*(id *)(a1 + 40) range];
    uint64_t v9 = (char *)[*(id *)(a1 + 32) range];
    if (v8 <= &v9[v10 >> 1])
    {
      CKRecordID v19 = (char *)[*(id *)(a1 + 40) range];
      Swift::String v20 = (char *)[*(id *)(a1 + 32) range];
      if (v19 >= &v20[v21]) {
        return &v20[v21];
      }
      else {
        return v19;
      }
    }
    else
    {
      uint64_t v11 = (char *)[*(id *)(a1 + 32) range];
      id result = (char *)[*(id *)(a1 + 40) range];
      if (v11 < result) {
        return v11;
      }
    }
  }
  return result;
}

void sub_1004B44FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B4540(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B4D74(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B4DB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B4FF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B5034(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B5AC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B5B04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B67C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B6804(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B719C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B71E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B7508(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B754C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B7C40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B7C84(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B7CC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B7D0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B80BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B8100(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B863C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B8680(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B86C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B8708(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9154(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9198(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9B38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9B7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9BC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9C04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9FB8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004B9FFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BA9F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BAA34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004BAB44(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_1004BAC1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    int v4 = +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FF4C8);
    }
    unint64_t v5 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010BBC34(v4, v5);
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1014FF4E8);
    }
    unint64_t v6 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_101066770(v6, v4);
    }
    uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLRotorSearchController locateSearchReference:]_block_invoke");
    uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLAccessibility/Canvas/Accessibility/iOS/CRLRotorSearchController.m"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 82, 0, "invalid nil value for '%{public}s'", "layout");
  }
  if (objc_opt_respondsToSelector())
  {
    [v3 calculatePointFromSearchReference:*(void *)(a1 + 32)];
    [*(id *)(a1 + 32) setSearchReferencePoint:];
    [v3 alignmentFrameInRoot];
    [*(id *)(a1 + 32) setSearchReferenceLayoutFrame:];
  }
}

void sub_1004BADC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BAE04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1004BB3CC(int a1)
{
  return a1 == 0;
}

void sub_1004BC4C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BC504(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004BCAF8(_OWORD *a1, void *a2)
{
  long long v2 = a1[3];
  v5[0] = a1[2];
  v5[1] = v2;
  void v5[2] = a1[4];
  id v3 = [a2 crl_strokeByAppendingTransform:v5];

  return v3;
}

void sub_1004BCED4(uint64_t a1)
{
  char v7 = 0;
  long long v2 = [*(id *)(a1 + 32) crlaxValueForKey:@"_visualElement"];
  id v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = __CRLAccessibilityCastAsClass(v3, (uint64_t)v2, 1, &v7);
  if (v7) {
    abort();
  }
  unint64_t v5 = (void *)v4;

  LODWORD(v6) = *(_DWORD *)(a1 + 40);
  [v5 _setValue:*(unsigned __int8 *)(a1 + 44) andSendAction:v6];
}

void sub_1004BE8E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BE928(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BEBF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BEC38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF5C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF60C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF650(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF694(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF930(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BF974(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BFB28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BFB6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BFEF0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004BFF34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C0148(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C018C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C12AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C12F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C24B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C24FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C2F18(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C2F5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C56F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C5738(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C5C08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C5C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C61B0(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004C62D4(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  long long v2 = off_10166B498;
  off_10166B498 = v1;
}

double sub_1004C840C(uint64_t a1)
{
  if ((unint64_t)(a1 - 9) > 5) {
    return 150.0;
  }
  else {
    return dbl_101178CF8[a1 - 9];
  }
}

void sub_1004C88E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C8924(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C8C24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C8C68(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C8FC8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C900C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C9434(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C9478(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C9770(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C97B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C9F88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004C9FCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CA334(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CA378(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t (**sub_1004CA644(void *a1))(void)
{
  id result = (uint64_t (**)(void))a1[6];
  if (result) {
    id result = (uint64_t (**)(void))result[2]();
  }
  if (a1[4])
  {
    id v3 = (void *)a1[5];
    return (uint64_t (**)(void))[v3 endIgnoringUserInteractionWithToken:];
  }
  return result;
}

void sub_1004CA834(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CA878(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CAA34(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CAA78(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CADD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CAE1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CB15C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CB1A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  long long v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CB364(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained checkForUpdateWithCompletionHandler:0];
}

unsigned char *sub_1004CB4A0(uint64_t a1)
{
  id result = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!result[40]) {
    return [result checkForUpdateWithCompletionHandler:v3];
  }
  if (v3) {
    return (unsigned char *)(*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, 0);
  }
  return result;
}

uint64_t sub_1004CB5E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004CB5F4(uint64_t a1)
{
}

void sub_1004CB5FC(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
}

void sub_1004CB9C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = (objc_class *)objc_opt_class();
  unint64_t v10 = sub_10024715C(v9, v7);

  [*(id *)(a1 + 32) processResponse:v10 data:v8 error:v12];
  [*(id *)(a1 + 40) endBackgroundTask:*(void *)(a1 + 56)];
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 24));
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v12);
  }
}

void sub_1004CBFA0(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004CC114(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004CC158(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
}

void sub_1004CC2C0(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initInternal];
  id v2 = (void *)qword_1016A9D98;
  qword_1016A9D98 = (uint64_t)v1;
}

void sub_1004CC54C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CC590(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CC980(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CC9C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CCA08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CCA4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CCEA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CCEE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CDAA8(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) interactiveCanvasController];
    uint64_t v4 = [v3 selectionModelTranslator];
    unint64_t v5 = [*(id *)(a1 + 32) editorController];
    double v6 = [v5 selectionPath];
    id v7 = [v4 containerToInsertIntoForSelectionPath:v6];

    uint64_t v8 = objc_opt_class();
    uint64_t v9 = sub_1002469D0(v8, v7);
    if (v9)
    {
      unint64_t v10 = [*(id *)(a1 + 32) interactiveCanvasController];
      uint64_t v11 = [v10 canvasEditor];
      id v12 = [v11 pasteboardController];
      id v13 = [v12 asyncProvidersForBoardItemsFromPasteboard:*(void *)(a1 + 40)];
      if ([v13 count])
      {
        long long v40 = v7;
        NSUInteger v14 = [[CRLPasteboardMultipleImportableBoardItemProvider alloc] initWithImportableBoardItemProviders:v13];
        [(CRLPasteboardMultipleImportableBoardItemProvider *)v14 setAlertPresenter:v11];
        [*(id *)(a1 + 32) interactiveCanvasController];
        NSUInteger v15 = v38 = v13;
        NSUInteger v16 = [v15 editingCoordinator];
        [v16 suspendCollaborationWithReason:@"CRLGroupEditorPastingAsyncDrawables"];

        NSRange v17 = [v10 layerHost];
        NSRange v18 = +[NSBundle mainBundle];
        [v18 localizedStringForKey:@"Pasting…" value:0 table:0];
        double v39 = v10;
        CKRecordID v19 = v11;
        v21 = Swift::String v20 = v12;
        id v22 = [(CRLPasteboardMultipleImportableBoardItemProvider *)v14 progress];
        v53[0] = _NSConcreteStackBlock;
        v53[1] = 3221225472;
        v53[2] = sub_1004CE03C;
        v53[3] = &unk_1014CBBB0;
        id v23 = v14;
        long long v54 = v23;
        id v24 = [v17 beginModalOperationWithPresentedLocalizedMessage:v21 progress:v22 cancelHandler:v53];

        id v12 = v20;
        uint64_t v11 = v19;
        unint64_t v10 = v39;

        id v25 = [v39 editingCoordinator];
        id v26 = [v25 boardItemFactory];
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_1004CE044;
        v41[3] = &unk_1014FFDE8;
        id v42 = v39;
        long long v43 = v24;
        long long v44 = v23;
        __int16 v45 = v12;
        id v46 = *(id *)(a1 + 40);
        id v47 = v11;
        id v27 = v9;
        uint64_t v28 = *(void *)(a1 + 32);
        id v48 = v27;
        uint64_t v49 = v28;
        double v29 = *(void **)(a1 + 48);
        uint64_t v51 = *(void *)(a1 + 56);
        char v52 = *(unsigned char *)(a1 + 64);
        id v50 = v29;
        double v30 = v23;
        [(CRLPasteboardMultipleImportableBoardItemProvider *)v30 provideBoardItemsWithFactory:v26 completionHandler:v41];

        id v13 = v38;
        id v7 = v40;
      }
      else
      {
        uint64_t v37 = *(void *)(a1 + 48);
        if (v37) {
          (*(void (**)(uint64_t, void *))(v37 + 16))(v37, &__NSArray0__struct);
        }
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FFDA0);
      }
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_1010BCA18();
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1014FFDC0);
      }
      uint64_t v33 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
        sub_10106590C(v33);
      }
      uint64_t v34 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLGroupEditor pasteWithPasteboard:atIndex:forceMatchStyle:bakeFormulas:completionHandler:]_block_invoke");
      char v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m"];
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v34, v35, 229, 0, "invalid nil value for '%{public}s'", "groupToInsertInto");

      uint64_t v36 = *(void *)(a1 + 48);
      if (v36) {
        (*(void (**)(uint64_t, void *))(v36 + 16))(v36, &__NSArray0__struct);
      }
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 48);
    if (v31)
    {
      double v32 = *(void (**)(void))(v31 + 16);
      v32();
    }
  }
}

void sub_1004CDFB4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CDFF8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004CE03C(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

void sub_1004CE044(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) layerHost];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004CE158;
  v12[3] = &unk_1014FFDE8;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void **)(a1 + 48);
  id v13 = v3;
  uint64_t v14 = v4;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  id v15 = v6;
  uint64_t v16 = v7;
  id v17 = v8;
  id v18 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void **)(a1 + 96);
  id v19 = v9;
  uint64_t v20 = v10;
  uint64_t v22 = *(void *)(a1 + 104);
  char v23 = *(unsigned char *)(a1 + 112);
  id v21 = v11;
  [v2 continueAsynchronousWorkOnMainThreadUsingBlock:v12];
}

void sub_1004CE158(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) layerHost];
  [v2 endModalOperationWithToken:*(void *)(a1 + 40)];

  if ([*(id *)(a1 + 48) isCancelled])
  {
    id v14 = &__NSArray0__struct;
  }
  else
  {
    id v3 = [*(id *)(a1 + 48) boardItems];
    if ([v3 count])
    {
      unsigned int v4 = [*(id *)(a1 + 56) hasNativeBoardItemsOnPasteboard:*(void *)(a1 + 64)];
      unint64_t v5 = *(void **)(a1 + 72);
      if (v4)
      {
        id v6 = [*(id *)(a1 + 72) canvasEditorHelper];
        [v6 prepareGeometryForPastingBoardItems:v3 fromPasteboard:*(void *)(a1 + 64) intoContainer:*(void *)(a1 + 80) useOriginalPositions:0];
      }
      else
      {
        id v6 = +[CRLInsertionContext nonInteractiveInsertionContext];
        [v5 prepareGeometryForInsertingBoardItems:v3 withInsertionContext:v6];
      }

      id v14 = v3;
      [*(id *)(a1 + 88) p_pasteBoardItems:inGroup:atIndex:forceMatchStyle:isCrossDocument:];
    }
    else
    {
      id v14 = &__NSArray0__struct;
    }
    uint64_t v7 = [*(id *)(a1 + 48) errors];
    if ([v7 count])
    {
      uint64_t v8 = *(void **)(a1 + 32);
      id v9 = [*(id *)(a1 + 48) localizedErrorDescription];
      [v8 presentErrors:v7 withLocalizedDescription:v9 completionHandler:0];
    }
  }
  uint64_t v10 = [*(id *)(a1 + 88) interactiveCanvasController];
  uint64_t v11 = [v10 editingCoordinator];
  [v11 resumeCollaborationWithReason:@"CRLGroupEditorPastingAsyncDrawables"];

  uint64_t v12 = *(void *)(a1 + 96);
  id v13 = v14;
  if (v12)
  {
    (*(void (**)(void))(v12 + 16))();
    id v13 = v14;
  }
}

void sub_1004CEBB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CEBF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CEC38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CEC7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CED60(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    id v3 = [*(id *)(a1 + 32) interactiveCanvasController];
    unsigned int v4 = [v3 infosForCurrentSelectionPath];
    unint64_t v5 = [v3 freehandDrawingToolkit];
    unsigned int v6 = [v5 isLassoAbleToSelectMixedType];

    uint64_t v7 = [v3 freehandDrawingToolkit];
    unsigned int v8 = [v7 isInDrawingMode];

    if (v8) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    v139 = v3;
    uint64_t v134 = v2;
    uint64_t v122 = v4;
    if (v9)
    {
      BOOL v120 = 0;
    }
    else
    {
      uint64_t v10 = +[NSMutableSet set];
      long long v163 = 0u;
      long long v164 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      id obj = v4;
      id v11 = [obj countByEnumeratingWithState:&v163 objects:v184 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v164;
        do
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v164 != v13) {
              objc_enumerationMutation(obj);
            }
            id v15 = *(void **)(*((void *)&v163 + 1) + 8 * i);
            uint64_t v16 = objc_opt_class();
            id v17 = sub_1002469D0(v16, v15);
            id v18 = v17;
            if (v17
              && ([v17 parentInfo],
                  id v19 = objc_claimAutoreleasedReturnValue(),
                  objc_opt_class(),
                  char isKindOfClass = objc_opt_isKindOfClass(),
                  v19,
                  (isKindOfClass & 1) != 0))
            {
              id v21 = v10;
              uint64_t v22 = v18;
            }
            else
            {
              uint64_t v23 = objc_opt_class();
              id v24 = sub_1002469D0(v23, v15);

              if (!v24) {
                goto LABEL_19;
              }
              id v21 = v10;
              uint64_t v22 = v15;
            }
            [v21 addObject:v22];
LABEL_19:
          }
          id v12 = [obj countByEnumeratingWithState:&v163 objects:v184 count:16];
        }
        while (v12);
      }

      id v25 = [obj count];
      id v26 = [v10 count];
      BOOL v120 = v25 != v26;
      if (v25 != v26)
      {
        id v27 = [v3 canvasEditor];
        uint64_t v28 = [v27 selectionPathWithInfos:v10];

        [v3 setSelectionPath:v28 withSelectionFlags:0];
      }

      uint64_t v2 = v134;
    }
    long long v127 = [v3 canvasEditor];
    double v29 = [*(id *)(v2 + 32) editorController];
    uint64_t v121 = [v29 selectionPath];

    long long v123 = +[NSMutableSet set];
    id v132 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:0 capacity:0];
    double v30 = [v3 selectionModelTranslator];
    uint64_t v31 = [v3 editorController];
    double v32 = [v31 selectionPath];
    uint64_t v33 = [v30 unlockedBoardItemsForSelectionPath:v32];

    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    id v128 = v33;
    id v34 = [v128 countByEnumeratingWithState:&v159 objects:v183 count:16];
    if (v34)
    {
      id v35 = v34;
      uint64_t v36 = *(void *)v160;
      do
      {
        for (uint64_t j = 0; j != v35; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v160 != v36) {
            objc_enumerationMutation(v128);
          }
          long long v38 = *(void **)(*((void *)&v159 + 1) + 8 * (void)j);
          uint64_t v39 = objc_opt_class();
          long long v40 = [v38 parentInfo];
          long long v41 = sub_1002469D0(v39, v40);

          if (v41)
          {
            id v42 = [v132 objectForKeyedSubscript:v41];
            if (!v42)
            {
              id v42 = +[NSMutableSet set];
              [v132 setObject:v42 forKey:v41];
            }
            [v42 addObject:v38];
          }
          else
          {
            [v123 addObject:v38];
          }
        }
        id v35 = [v128 countByEnumeratingWithState:&v159 objects:v183 count:16];
      }
      while (v35);
    }

    long long v43 = v127;
    uint64_t v130 = [v127 pasteboardController];
    id v126 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0 valueOptions:0 capacity:0];
    uint64_t v125 = +[NSMutableArray array];
    long long v124 = +[NSMutableSet set];
    long long v44 = v132;
    if ([v132 count])
    {
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      id v133 = v132;
      id v131 = [v133 countByEnumeratingWithState:&v155 objects:v182 count:16];
      if (v131)
      {
        uint64_t v129 = *(void *)v156;
        do
        {
          uint64_t v45 = 0;
          do
          {
            if (*(void *)v156 != v129) {
              objc_enumerationMutation(v133);
            }
            uint64_t v135 = v45;
            id obja = *(id *)(*((void *)&v155 + 1) + 8 * v45);
            id v46 = [v133 objectForKeyedSubscript:];
            uint64_t v47 = +[CRLPasteboard pasteboardWithUniqueName];
            [v43 copyBoardItems:v46 toPasteboard:v47 asPDF:0 nativeOnly:1];
            v136 = (void *)v47;
            id v48 = [v130 providersForBoardItemsFromPasteboard:v47];
            id v49 = [v48 count];
            uint64_t v137 = v46;
            if (v49 != [v46 count])
            {
              unsigned int v50 = +[CRLAssertionHandler _atomicIncrementAssertCount];
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014FFEF0);
              }
              uint64_t v51 = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
              {
                uint64_t v89 = v51;
                uint64_t v90 = (const char *)[v48 count];
                id v91 = [v46 count];
                *(_DWORD *)buf = 67110402;
                unsigned int v171 = v50;
                __int16 v172 = 2082;
                int v173 = "-[CRLGroupEditor duplicate:]_block_invoke";
                __int16 v174 = 2082;
                uint64_t v175 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
                __int16 v176 = 1024;
                int v177 = 453;
                __int16 v178 = 2048;
                long long v179 = v90;
                __int16 v180 = 2048;
                id v181 = v91;
                _os_log_error_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Copied %zi children instead of %zi", buf, 0x36u);
              }
              if (qword_101719A70 != -1) {
                dispatch_once(&qword_101719A70, &stru_1014FFF10);
              }
              char v52 = off_10166B4A0;
              if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
              {
                uint64_t v92 = v52;
                uint64_t v93 = +[CRLAssertionHandler packedBacktraceString];
                *(_DWORD *)buf = 67109378;
                unsigned int v171 = v50;
                __int16 v172 = 2114;
                int v173 = v93;
                _os_log_error_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
              }
              long long v53 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLGroupEditor duplicate:]_block_invoke");
              long long v54 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m"];
              +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v53, v54, 453, 0, "Copied %zi children instead of %zi", [v48 count], [v46 count]);
            }
            uint64_t v55 = +[NSMutableArray array];
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            id v138 = v48;
            id v56 = [v138 countByEnumeratingWithState:&v151 objects:v169 count:16];
            if (v56)
            {
              id v57 = v56;
              uint64_t v58 = *(void *)v152;
              do
              {
                long long v59 = 0;
                do
                {
                  if (*(void *)v152 != v58) {
                    objc_enumerationMutation(v138);
                  }
                  long long v60 = *(void **)(*((void *)&v151 + 1) + 8 * (void)v59);
                  uint64_t v61 = [v3 editingCoordinator];
                  uint64_t v62 = [v61 boardItemFactory];
                  id v63 = [v60 newBoardItemWithFactory:v62 bakedSize:0];

                  if (v63)
                  {
                    [v55 addObject:v63];
                  }
                  else
                  {
                    unsigned int v64 = +[CRLAssertionHandler _atomicIncrementAssertCount];
                    if (qword_101719A70 != -1) {
                      dispatch_once(&qword_101719A70, &stru_1014FFF30);
                    }
                    uint64_t v65 = off_10166B4A0;
                    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67110146;
                      unsigned int v171 = v64;
                      __int16 v172 = 2082;
                      int v173 = "-[CRLGroupEditor duplicate:]_block_invoke";
                      __int16 v174 = 2082;
                      uint64_t v175 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
                      __int16 v176 = 1024;
                      int v177 = 457;
                      __int16 v178 = 2082;
                      long long v179 = "boardItem";
                      _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", buf, 0x2Cu);
                    }
                    if (qword_101719A70 != -1) {
                      dispatch_once(&qword_101719A70, &stru_1014FFF50);
                    }
                    uint64_t v66 = off_10166B4A0;
                    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
                    {
                      unint64_t v69 = v66;
                      uint64_t v70 = +[CRLAssertionHandler packedBacktraceString];
                      *(_DWORD *)buf = 67109378;
                      unsigned int v171 = v64;
                      __int16 v172 = 2114;
                      int v173 = v70;
                      _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
                    }
                    uint64_t v67 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLGroupEditor duplicate:]_block_invoke");
                    double v68 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m"];
                    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v67, v68, 457, 0, "invalid nil value for '%{public}s'", "boardItem");
                  }
                  long long v59 = (char *)v59 + 1;
                }
                while (v57 != v59);
                id v57 = [v138 countByEnumeratingWithState:&v151 objects:v169 count:16];
              }
              while (v57);
            }

            if ([v55 count])
            {
              [v126 setObject:v55 forKey:obja];
              [v125 addObjectsFromArray:v55];
              long long v149 = 0u;
              long long v150 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              id v71 = v55;
              id v72 = [v71 countByEnumeratingWithState:&v147 objects:v168 count:16];
              if (v72)
              {
                id v73 = v72;
                uint64_t v74 = *(void *)v148;
                do
                {
                  for (uint64_t k = 0; k != v73; uint64_t k = (char *)k + 1)
                  {
                    if (*(void *)v148 != v74) {
                      objc_enumerationMutation(v71);
                    }
                    unint64_t v76 = *(void **)(*((void *)&v147 + 1) + 8 * (void)k);
                    unint64_t v77 = [v139 layoutForInfo:obja];
                    unint64_t v78 = [v76 geometry];
                    unint64_t v79 = [v77 geometryInRoot];
                    unint64_t v80 = v79;
                    if (v79) {
                      [v79 transform];
                    }
                    else {
                      memset(v146, 0, sizeof(v146));
                    }
                    unint64_t v81 = [v78 geometryByAppendingTransform:v146];
                    [v76 setGeometry:v81];
                  }
                  id v73 = [v71 countByEnumeratingWithState:&v147 objects:v168 count:16];
                }
                while (v73);
              }

              long long v82 = [*(id *)(v134 + 32) editorController];
              CGRect v83 = [v82 selectionPath];

              long long v43 = v127;
              unint64_t v84 = [v127 selectionPathWithInfos:v137];
              long long v85 = [*(id *)(v134 + 32) editorController];
              [v85 setSelectionPath:v84];

              uint64_t v86 = [v127 canvasEditorHelper];
              [v86 prepareGeometryForPastingBoardItems:v71 fromPasteboard:v136 intoContainer:obja useOriginalPositions:0];

              uint64_t v87 = [*(id *)(v134 + 32) editorController];
              [v87 setSelectionPath:v83];

              uint64_t v88 = [v137 allObjects];
              [v124 addObjectsFromArray:v88];

              id v3 = v139;
            }

            uint64_t v2 = v134;
            uint64_t v45 = v135 + 1;
          }
          while ((id)(v135 + 1) != v131);
          id v131 = [v133 countByEnumeratingWithState:&v155 objects:v182 count:16];
        }
        while (v131);
      }

      if ([v123 count])
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount];
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FFF70);
        }
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_1010BCB78();
        }
        if (qword_101719A70 != -1) {
          dispatch_once(&qword_101719A70, &stru_1014FFF90);
        }
        uint64_t v94 = off_10166B4A0;
        if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
          sub_10106590C(v94);
        }
        long long v95 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLGroupEditor duplicate:]_block_invoke");
        BOOL v96 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m"];
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v95, v96, 488, 0, "We don't expect to see cross-container selections in Freeform that have objects that aren't in a container (aka freehand drawings!");
      }
      uint64_t v97 = [v3 commandController];
      [v97 openGroup];
      long long v98 = +[NSBundle mainBundle];
      long long v99 = [v98 localizedStringForKey:@"Duplicate" value:0 table:@"UndoStrings"];
      [v97 setCurrentGroupActionString:v99];

      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      id v100 = v126;
      id v101 = [v100 countByEnumeratingWithState:&v142 objects:v167 count:16];
      if (v101)
      {
        id v102 = v101;
        uint64_t v103 = *(void *)v143;
        do
        {
          for (uint64_t m = 0; m != v102; uint64_t m = (char *)m + 1)
          {
            if (*(void *)v143 != v103) {
              objc_enumerationMutation(v100);
            }
            uint64_t v105 = *(void *)(*((void *)&v142 + 1) + 8 * (void)m);
            uint64_t v106 = [v100 objectForKey:v105];
            [*(id *)(v2 + 32) p_pasteBoardItems:v106 inGroup:v105 atIndex:0x7FFFFFFFFFFFFFFFLL forceMatchStyle:0 isCrossDocument:0];
          }
          id v102 = [v100 countByEnumeratingWithState:&v142 objects:v167 count:16];
        }
        while (v102);
      }

      uint64_t v107 = +[NSSet setWithArray:v125];
      uint64_t v108 = [v121 mostSpecificSelectionOfClass:objc_opt_class()];
      id v109 = v121;
      uint64_t v110 = v109;
      if (v108)
      {
        objc_opt_class();
        uint64_t v110 = v109;
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v111 = [[_TtC8Freeform21CRLBoardItemSelection alloc] initWithBoardItems:v107];
          uint64_t v110 = [v109 selectionPathReplacingMostSpecificLocationOfSelection:v108 withSelection:v111];
        }
      }
      if (v120)
      {
        uint64_t v112 = [v3 selectionModelTranslator];
        uint64_t v113 = [v112 selectionPathForInfos:v122];

        id v109 = (id)v113;
      }
      if (+[CRLFeatureFlagsHelper isOSFeatureEnabled:1])
      {
        uint64_t v114 = [v3 layerHost];
        long long v115 = [v114 asiOSCVC];

        uint64_t v116 = [v115 smartSelectionManager];
        id v117 = [v124 copy];
        [v116 replacingCurrentlySmartSelectedItems:v117 withNewItemsToSmartSelect:v107];
      }
      uint64_t v118 = [[CRLCommandSelectionBehavior alloc] initWithForwardSelectionPath:v110 reverseSelectionPath:v109];
      [v97 closeGroupWithSelectionBehavior:v118];

      long long v119 = v122;
      long long v43 = v127;
      long long v44 = v132;
    }
    else
    {
      id v109 = v121;
      long long v119 = v122;
    }
    if (objc_opt_respondsToSelector()) {
      [v43 hideLassoSelectionEditMenuInDrawingModeIfLassoToolIsSelected];
    }
  }
}

void sub_1004CFEB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CFEF4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CFF38(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CFF7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004CFFC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D0004(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D0760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D0880()
{
}

void sub_1004D0A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)CRLWPTextKnobTracker;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1004D0ACC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D0B10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D0C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D0D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D0E48(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1004D0E80()
{
}

void sub_1004D0FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D10F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D11C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D1260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D1F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1004D2208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D2388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D29A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D2A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004D3284(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D32C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D330C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D3350(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D3394(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D33D8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D3970(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D39B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D39F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D3A3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4220(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4264(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004D4368(uint64_t a1)
{
  return [*(id *)(a1 + 32) i_setLayersInvalidWithoutInvalidatingAnySpecificLayers];
}

void sub_1004D47E4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4828(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4C4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4C90(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4EE0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D4F24(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D6654(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1004D6568);
  }
  _Unwind_Resume(exception_object);
}

int64_t sub_1004D6F78(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = sub_1002469D0(v6, v5);

  uint64_t v8 = objc_opt_class();
  BOOL v9 = sub_1002469D0(v8, v4);

  if ([v7 forcesPlacementOnTop]
    && ([v9 forcesPlacementOnTop] & 1) != 0)
  {
    int64_t v10 = 0;
  }
  else if ([v7 forcesPlacementOnTop])
  {
    int64_t v10 = 1;
  }
  else
  {
    int64_t v10 = (uint64_t)((void)[v9 forcesPlacementOnTop] << 63) >> 63;
  }

  return v10;
}

int64_t sub_1004D7044(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = sub_1002469D0(v6, v5);

  uint64_t v8 = objc_opt_class();
  BOOL v9 = sub_1002469D0(v8, v4);

  if ([v7 forcesPlacementOnTop])
  {
    int64_t v10 = [v7 repForSelecting];
    unsigned __int8 v11 = [v10 isSelected];

    if (v11) {
      goto LABEL_10;
    }
  }
  if (![v9 forcesPlacementOnTop]
    || ([v9 repForSelecting],
        id v12 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v13 = [v12 isSelected],
        v12,
        (v13 & 1) == 0))
  {
    if ([v7 forcesPlacementOnTop]
      && ([v9 forcesPlacementOnTop] & 1) != 0)
    {
      int64_t v14 = 0;
      goto LABEL_12;
    }
    if (([v7 forcesPlacementOnTop] & 1) == 0)
    {
      int64_t v14 = (uint64_t)((void)[v9 forcesPlacementOnTop] << 63) >> 63;
      goto LABEL_12;
    }
LABEL_10:
    int64_t v14 = 1;
    goto LABEL_12;
  }
  int64_t v14 = -1;
LABEL_12:

  return v14;
}

void sub_1004D7DD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D7E1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8268(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D82AC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D82F0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8334(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D853C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8580(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D879C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D87E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8C88(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8CCC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8D10(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8D54(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8D98(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D8DDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D9910(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D9954(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D9C28(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004D9C6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA410(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA454(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA498(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA4DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA77C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DA7C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DBFE0(_Unwind_Exception *a1)
{
}

id sub_1004DC0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = [v3 parentRep];
  uint64_t v6 = sub_1002469D0(v4, v5);

  if (v6) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  id v7 = [v3 wantsGuidesWhileDragging];

  return v7;
}

void sub_1004DC164(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DC1A8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DC1EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DC230(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DC274(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DC2B8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DCBB4(id a1)
{
  id v1 = sub_100401ECC("CRLCanvasRepDragTrackerCat");
  uint64_t v2 = off_10166EA00;
  off_10166EA00 = v1;
}

void sub_1004DCD3C(id a1)
{
  id v1 = sub_100401ECC("CRLCanvasRepDragTrackerCat");
  uint64_t v2 = off_10166EA00;
  off_10166EA00 = v1;
}

void sub_1004DDC80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DDCC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DDD08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DDD4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DDF08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DDF4C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE0FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE140(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE35C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE3A0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE5BC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE600(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE928(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DE96C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DEEC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DEF04(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DEF48(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DEF8C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DEFD0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DF014(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DF3CC(id a1)
{
  id v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004DF410(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DF454(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DF498(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DF4DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004DFC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004DFCA8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) convertUnscaledToBoundsRect:*(double *)(a1 + 48) *(double *)(a1 + 56) *(double *)(a1 + 64) *(double *)(a1 + 72)];
  id v3 = *(void **)(*(void *)(a1 + 40) + 8);
  v3[4] = v4;
  void v3[5] = v5;
  void v3[6] = v6;
  v3[7] = v7;
  return result;
}

uint64_t *sub_1004E00A8(uint64_t *result, int64_t *a2, _DWORD *a3)
{
  *a3 = -1;
  *(_OWORD *)a2 = xmmword_101178D38;
  *((_OWORD *)a2 + 1) = unk_101178D48;
  uint64_t v3 = *result;
  if ((int)(-1431655765 * ((result[1] - *result) >> 3)) >= 1)
  {
    uint64_t v4 = 0;
    int64_t v5 = 0;
    uint64_t v6 = -1431655765 * ((result[1] - *result) >> 3);
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    int64_t v8 = 0x8000000000000000;
    id result = (uint64_t *)0x8000000000000000;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      int64_t v10 = (int64_t **)(v3 + 24 * v4);
      unsigned __int8 v11 = *v10;
      id v12 = v10[1];
      if (v11 != v12) {
        break;
      }
LABEL_20:
      if (++v4 == v6) {
        return result;
      }
    }
    uint64_t v13 = v7;
    uint64_t v14 = v9;
    while (1)
    {
      id v15 = (uint64_t *)v11[1];
      if ((uint64_t)v15 >= (uint64_t)result)
      {
        int64_t v19 = *v11;
        if ((uint64_t)v15 > (uint64_t)result || v19 < v5)
        {
          uint64_t v16 = (uint64_t **)(a2 + 3);
          *a3 = v4;
          uint64_t v17 = v7;
          id result = v15;
          uint64_t v18 = v13;
          int64_t v5 = v19;
LABEL_14:
          *uint64_t v16 = v15;
          uint64_t v7 = v17;
          uint64_t v13 = v18;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t **)(a2 + 1);
        uint64_t v17 = v11[1];
        uint64_t v18 = v17;
        if ((uint64_t)v15 < v13) {
          goto LABEL_14;
        }
      }
      int64_t v21 = *v11;
      if (*v11 > v8)
      {
        uint64_t v22 = a2 + 2;
        int64_t v8 = *v11;
        int64_t v23 = v9;
        int64_t v24 = v14;
LABEL_18:
        *uint64_t v22 = v21;
        uint64_t v9 = v23;
        uint64_t v14 = v24;
        goto LABEL_19;
      }
      uint64_t v22 = a2;
      int64_t v23 = *v11;
      int64_t v24 = *v11;
      if (v21 < v14) {
        goto LABEL_18;
      }
LABEL_19:
      v11 += 6;
      if (v11 == v12) {
        goto LABEL_20;
      }
    }
  }
  return result;
}

void sub_1004E01EC(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  double v6 = 0.0;
  uint64_t v7 = *a2 - *a1;
  BOOL v8 = *a2 == *a1 && v5 == v4;
  double v9 = 0.0;
  if (!v8)
  {
    double v10 = (double)v7;
    long double v11 = (double)(v5 - v4);
    long double v12 = 1.0 / hypot((double)v7, v11);
    double v6 = v12 * v11;
    double v9 = -(v12 * v10);
  }
  *(_OWORD *)(a3 + 16) = xmmword_101178D58;
  *(_OWORD *)(a3 + 32) = unk_101178D68;
  *(double *)a3 = v6;
  *(double *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v9;
}

void sub_1004E026C(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = sub_100134994(&v7, a2);
  sub_1004E0300(a1, &v7, a3, a4);
  double v10 = (void **)&v7;
  sub_100134888(&v10);
}

void sub_1004E02E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100134888((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1004E0300(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != v5)
  {
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    sub_100360F94(&v14, v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
    LOBYTE(v17) = 0;
    memset(v16, 0, sizeof(v16));
    HIDWORD(v17) = a3;
    int v18 = a4;
    unint64_t v10 = a1[14];
    if (v10 >= a1[15])
    {
      uint64_t v12 = sub_1004E3DBC(a1 + 13, (uint64_t)&v14);
      uint64_t v13 = (void *)*((void *)&v16[1] + 1);
      a1[14] = v12;
      if (v13)
      {
        *(void *)&v16[2] = v13;
        operator delete(v13);
      }
    }
    else
    {
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(void *)unint64_t v10 = 0;
      *(void *)(v10 + _Block_object_dispose(&STACK[0x250], 8) = 0;
      *(_OWORD *)unint64_t v10 = v14;
      *(void *)(v10 + 16) = v15;
      long long v14 = 0uLL;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
      *(_OWORD *)(v10 + 24) = v16[0];
      v16[0] = 0uLL;
      *(void *)(v10 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)&v16[1];
      *(void *)(v10 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(void *)&v16[1] = 0;
      *(void *)(v10 + 56) = 0;
      *(void *)(v10 + 64) = 0;
      *(_OWORD *)(v10 + 4_Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)((char *)&v16[1] + 8);
      *(void *)(v10 + 64) = *((void *)&v16[2] + 1);
      uint64_t v15 = 0;
      memset((char *)&v16[1] + 8, 0, 24);
      uint64_t v11 = v17;
      *(_DWORD *)(v10 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v18;
      *(void *)(v10 + 72) = v11;
      a1[14] = v10 + 88;
    }
    int64_t v19 = (void **)v16;
    sub_100134888(&v19);
    int64_t v19 = (void **)&v14;
    sub_100134888(&v19);
  }
}

void sub_1004E0444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E0458(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 24);
  sub_100134888(&v4);
  uint64_t v4 = (void **)a1;
  sub_100134888(&v4);
  return a1;
}

void sub_1004E04B0(void *a1, void *a2)
{
  uint64_t v4 = (char **)(a1 + 7);
  a1[8] = a1[7];
  sub_1003E44C8((void **)a1 + 7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
  uint64_t v6 = (void *)*a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    uint64_t v7 = (void *)(v5 - 48);
    uint64_t v8 = (_OWORD *)a1[8];
    if (v6 != (void *)(v5 - 48))
    {
      uint64_t v9 = a1 + 9;
      do
      {
        unint64_t v10 = v6;
        v6 += 6;
        sub_1004E01EC(v10, v6, (uint64_t)&v40);
        if ((unint64_t)v8 >= *v9)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - *v4) >> 4);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x555555555555555) {
            goto LABEL_40;
          }
          if (0x5555555555555556 * ((uint64_t)(*v9 - (void)*v4) >> 4) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v9 - (void)*v4) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v9 - (void)*v4) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x555555555555555;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            uint64_t v16 = (char *)sub_100134B88((uint64_t)(a1 + 9), v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[48 * v13];
          long long v18 = v41;
          *(_OWORD *)uint64_t v17 = v40;
          *((_OWORD *)v17 + 1) = v18;
          *((_OWORD *)v17 + 2) = v42;
          uint64_t v20 = (char *)a1[7];
          int64_t v19 = (char *)a1[8];
          int64_t v21 = v17;
          if (v19 != v20)
          {
            do
            {
              long long v22 = *((_OWORD *)v19 - 3);
              long long v23 = *((_OWORD *)v19 - 1);
              *((_OWORD *)v21 - 2) = *((_OWORD *)v19 - 2);
              *((_OWORD *)v21 - 1) = v23;
              *((_OWORD *)v21 - 3) = v22;
              v21 -= 48;
              v19 -= 48;
            }
            while (v19 != v20);
            int64_t v19 = *v4;
          }
          uint64_t v8 = v17 + 48;
          a1[7] = v21;
          a1[8] = v17 + 48;
          a1[9] = &v16[48 * v15];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          long long v11 = v40;
          long long v12 = v42;
          v8[1] = v41;
          void v8[2] = v12;
          *uint64_t v8 = v11;
          v8 += 3;
        }
        a1[8] = v8;
      }
      while (v6 != v7);
      uint64_t v6 = (void *)*a2;
    }
    sub_1004E01EC(v7, v6, (uint64_t)&v40);
    unint64_t v24 = a1[9];
    if ((unint64_t)v8 >= v24)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - *v4) >> 4);
      if (v28 + 1 > 0x555555555555555) {
LABEL_40:
      }
        sub_100004E40();
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)*v4) >> 4);
      uint64_t v30 = 2 * v29;
      if (2 * v29 <= v28 + 1) {
        uint64_t v30 = v28 + 1;
      }
      if (v29 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v31 = 0x555555555555555;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        double v32 = (char *)sub_100134B88((uint64_t)(a1 + 9), v31);
      }
      else {
        double v32 = 0;
      }
      uint64_t v33 = &v32[48 * v28];
      id v34 = &v32[48 * v31];
      long long v35 = v41;
      *(_OWORD *)uint64_t v33 = v40;
      *((_OWORD *)v33 + 1) = v35;
      *((_OWORD *)v33 + 2) = v42;
      id v27 = v33 + 48;
      uint64_t v37 = (char *)a1[7];
      uint64_t v36 = (char *)a1[8];
      if (v36 != v37)
      {
        do
        {
          long long v38 = *((_OWORD *)v36 - 3);
          long long v39 = *((_OWORD *)v36 - 1);
          *((_OWORD *)v33 - 2) = *((_OWORD *)v36 - 2);
          *((_OWORD *)v33 - 1) = v39;
          *((_OWORD *)v33 - 3) = v38;
          v33 -= 48;
          v36 -= 48;
        }
        while (v36 != v37);
        uint64_t v36 = *v4;
      }
      a1[7] = v33;
      a1[8] = v27;
      a1[9] = v34;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      long long v25 = v40;
      long long v26 = v42;
      v8[1] = v41;
      void v8[2] = v26;
      *uint64_t v8 = v25;
      id v27 = v8 + 3;
    }
    a1[8] = v27;
  }
}

double sub_1004E0764@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  double v5 = *a1;
  double v6 = *a3;
  double v7 = *a4;
  if (*a1 == *a2)
  {
    if (v6 != v7)
    {
      double v11 = a3[1];
      double v12 = (a4[1] - v11) / (v7 - v6);
      *(double *)a5 = v5;
      *(double *)(a5 + _Block_object_dispose(&STACK[0x250], 8) = v11 - v12 * v6 + v12 * v5;
      goto LABEL_8;
    }
    goto LABEL_3;
  }
  double v8 = a1[1];
  double v9 = (a2[1] - v8) / (*a2 - v5);
  if (v6 == v7)
  {
    double v10 = v8 - v9 * v5;
LABEL_6:
    *(double *)a5 = v6;
    *(double *)(a5 + _Block_object_dispose(&STACK[0x250], 8) = v10 + v9 * v6;
    goto LABEL_8;
  }
  double v14 = a3[1];
  double v15 = (a4[1] - v14) / (v7 - v6);
  if (v9 != v15)
  {
    double v10 = v8 - v9 * v5;
    double v6 = (v14 - v15 * v6 - v10) / (v9 - v15);
    goto LABEL_6;
  }
LABEL_3:
  *(void *)a5 = 0;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x250], 8) = 0;
LABEL_8:
  *(void *)&double result = 0xFFFFFFFFLL;
  *(_OWORD *)(a5 + 16) = xmmword_101178D58;
  *(_OWORD *)(a5 + 32) = unk_101178D68;
  return result;
}

void sub_1004E0820(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a4 == a5)
  {
    double v6 = fabs(*(double *)(a1 + 16));
    float64x2_t v7 = vcvtq_f64_s64(*(int64x2_t *)(*a3 + 48 * a4));
    float64x2_t v8 = *(float64x2_t *)(*(void *)(a1 + 56) + 48 * a4);
    float64x2_t v9 = vmlsq_lane_f64(v7, v8, v6, 0);
    long long v45 = xmmword_101178D58;
    int64x2_t v46 = (int64x2_t)unk_101178D68;
  }
  else
  {
    double v6 = *(double *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 56);
    long long v45 = xmmword_101178D58;
    int64x2_t v46 = (int64x2_t)unk_101178D68;
    float64x2_t v7 = vcvtq_f64_s64(*(int64x2_t *)(*a3 + 48 * a4));
    float64x2_t v9 = vmlaq_n_f64(v7, *(float64x2_t *)(v10 + 48 * a5), v6);
    float64x2_t v8 = *(float64x2_t *)(v10 + 48 * a4);
  }
  float64x2_t v11 = vmlaq_n_f64(v7, v8, v6);
  unint64_t v12 = a2[8];
  unint64_t v13 = (int64x2_t **)(a2 + 6);
  int64x2_t v14 = vcvtq_s64_f64(vrndaq_f64(v9));
  double v15 = (int64x2_t *)a2[7];
  if ((unint64_t)v15 >= v12)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v15 - *v13);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x555555555555555) {
      goto LABEL_38;
    }
    float64x2_t v43 = v11;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)*v13) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      int64x2_t v42 = v14;
      int64_t v21 = (char *)sub_100134B88((uint64_t)(a2 + 8), v20);
      int64x2_t v14 = v42;
    }
    else
    {
      int64_t v21 = 0;
    }
    long long v22 = (int64x2_t *)&v21[48 * v17];
    long long v23 = &v21[48 * v20];
    *long long v22 = v14;
    v22[1] = (int64x2_t)v45;
    v22[2] = v46;
    uint64_t v16 = v22 + 3;
    long long v25 = (int64x2_t *)a2[6];
    unint64_t v24 = (int64x2_t *)a2[7];
    if (v24 != v25)
    {
      do
      {
        int64x2_t v26 = v24[-3];
        int64x2_t v27 = v24[-1];
        v22[-2] = v24[-2];
        v22[-1] = v27;
        v22[-3] = v26;
        v22 -= 3;
        v24 -= 3;
      }
      while (v24 != v25);
      unint64_t v24 = *v13;
    }
    a2[6] = v22;
    a2[7] = v16;
    a2[8] = v23;
    if (v24) {
      operator delete(v24);
    }
    float64x2_t v11 = v43;
  }
  else
  {
    *double v15 = v14;
    v15[1] = (int64x2_t)v45;
    void v15[2] = v46;
    uint64_t v16 = v15 + 3;
  }
  a2[7] = v16;
  int64x2_t v28 = vcvtq_s64_f64(vrndaq_f64(v11));
  unint64_t v29 = a2[8];
  if ((unint64_t)v16 < v29)
  {
    *uint64_t v16 = v28;
    v16[1] = (int64x2_t)xmmword_101178D58;
    v16[2] = (int64x2_t)unk_101178D68;
    uint64_t v30 = v16 + 3;
    goto LABEL_37;
  }
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v16 - *v13);
  if (v31 + 1 > 0x555555555555555) {
LABEL_38:
  }
    sub_100004E40();
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*v13) >> 4);
  uint64_t v33 = 2 * v32;
  if (2 * v32 <= v31 + 1) {
    uint64_t v33 = v31 + 1;
  }
  if (v32 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v34 = 0x555555555555555;
  }
  else {
    unint64_t v34 = v33;
  }
  if (v34)
  {
    int64x2_t v44 = v28;
    long long v35 = (char *)sub_100134B88((uint64_t)(a2 + 8), v34);
    int64x2_t v28 = v44;
  }
  else
  {
    long long v35 = 0;
  }
  uint64_t v36 = (int64x2_t *)&v35[48 * v31];
  uint64_t v37 = &v35[48 * v34];
  int64x2_t *v36 = v28;
  v36[1] = (int64x2_t)xmmword_101178D58;
  void v36[2] = (int64x2_t)unk_101178D68;
  uint64_t v30 = v36 + 3;
  long long v39 = (int64x2_t *)a2[6];
  long long v38 = (int64x2_t *)a2[7];
  if (v38 != v39)
  {
    do
    {
      int64x2_t v40 = v38[-3];
      int64x2_t v41 = v38[-1];
      v36[-2] = v38[-2];
      v36[-1] = v41;
      v36[-3] = v40;
      v36 -= 3;
      v38 -= 3;
    }
    while (v38 != v39);
    long long v38 = *v13;
  }
  a2[6] = v36;
  a2[7] = v30;
  a2[8] = v37;
  if (v38) {
    operator delete(v38);
  }
LABEL_37:
  a2[7] = v30;
}

void sub_1004E0B28(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 56);
  if (a4 == a5)
  {
    float64x2_t v7 = (double *)(v6 + 48 * a4);
    double v9 = *v7;
    double v8 = v7[1];
    double v10 = -*v7;
    double v11 = v8;
  }
  else
  {
    unint64_t v12 = (double *)(v6 + 48 * a5);
    double v9 = *v12;
    double v8 = v12[1];
    unint64_t v13 = (double *)(v6 + 48 * a4);
    double v14 = v13[1] - v8;
    double v15 = *v12 - *v13;
    double v16 = sqrt(v15 * v15 + v14 * v14);
    double v10 = 0.0;
    if (fabs(v16) >= 0.001)
    {
      double v11 = v14 * (1.0 / v16);
      double v10 = v15 * (1.0 / v16);
    }
    else
    {
      double v11 = 0.0;
    }
  }
  double v17 = *(double *)(a1 + 16);
  double v18 = fabs(v17);
  uint64_t v19 = *a3;
  uint64_t v20 = *a3 + 48 * a4;
  int64_t v21 = (long long *)(v20 + 16);
  double v22 = (double)*(uint64_t *)v20;
  double v23 = (double)*(uint64_t *)(v20 + 8);
  double v24 = v11 * v18 + v22;
  double v25 = v10 * v18 + v23;
  v118[0] = v10 * v17 + v24;
  v118[1] = v25 - v11 * v17;
  long long v26 = *(_OWORD *)(v20 + 32);
  long long v119 = *(_OWORD *)(v20 + 16);
  long long v120 = v26;
  v115[0] = v24 - v10 * v17;
  v115[1] = v11 * v17 + v25;
  long long v27 = *(_OWORD *)(v20 + 32);
  long long v116 = *(_OWORD *)(v20 + 16);
  long long v117 = v27;
  uint64_t v28 = v19 + 48 * a5;
  double v29 = (double)*(uint64_t *)v28 + v9 * v17;
  double v30 = (double)*(uint64_t *)(v28 + 8) + v8 * v17;
  v112[0] = v29;
  v112[1] = v30;
  long long v31 = *(_OWORD *)(v28 + 32);
  long long v113 = *(_OWORD *)(v28 + 16);
  long long v114 = v31;
  unint64_t v32 = a2 + 6;
  if (a4 != a5)
  {
    double v108 = v22 + v9 * v17;
    double v109 = v23 + v8 * v17;
    long long v43 = *(_OWORD *)(v20 + 32);
    long long v110 = *v21;
    long long v111 = v43;
    sub_1004E0764(v118, v115, v112, &v108, (uint64_t)&v104);
    long long v44 = v21[1];
    long long v106 = *v21;
    long long v107 = v44;
    double v46 = v104;
    double v45 = v105;
    long long v47 = v21[1];
    unint64_t v48 = llround(v104);
    unint64_t v49 = llround(v105);
    long long v121 = *v21;
    long long v122 = v47;
    unint64_t v50 = a2[8];
    unint64_t v51 = a2[7];
    if (v51 >= v50)
    {
      unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *v32) >> 4);
      unint64_t v59 = v58 + 1;
      if (v58 + 1 > 0x555555555555555) {
        goto LABEL_69;
      }
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v32) >> 4);
      if (2 * v60 > v59) {
        unint64_t v59 = 2 * v60;
      }
      if (v60 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v61 = 0x555555555555555;
      }
      else {
        unint64_t v61 = v59;
      }
      if (v61) {
        uint64_t v62 = (char *)sub_100134B88((uint64_t)(a2 + 8), v61);
      }
      else {
        uint64_t v62 = 0;
      }
      unint64_t v78 = &v62[48 * v58];
      unint64_t v79 = &v62[48 * v61];
      *(void *)unint64_t v78 = v48;
      *((void *)v78 + 1) = v49;
      long long v80 = v122;
      *((_OWORD *)v78 + 1) = v121;
      *((_OWORD *)v78 + 2) = v80;
      int64x2_t v42 = v78 + 48;
      long long v82 = (char *)a2[6];
      unint64_t v81 = (char *)a2[7];
      if (v81 != v82)
      {
        do
        {
          long long v83 = *((_OWORD *)v81 - 3);
          long long v84 = *((_OWORD *)v81 - 1);
          *((_OWORD *)v78 - 2) = *((_OWORD *)v81 - 2);
          *((_OWORD *)v78 - 1) = v84;
          *((_OWORD *)v78 - 3) = v83;
          v78 -= 48;
          v81 -= 48;
        }
        while (v81 != v82);
        unint64_t v81 = (char *)*v32;
      }
      a2[6] = v78;
      a2[7] = v42;
      a2[8] = v79;
      if (v81) {
        operator delete(v81);
      }
    }
    else
    {
      *(void *)unint64_t v51 = v48;
      *(void *)(v51 + _Block_object_dispose(&STACK[0x250], 8) = v49;
      long long v52 = v122;
      *(_OWORD *)(v51 + 16) = v121;
      *(_OWORD *)(v51 + 32) = v52;
      int64x2_t v42 = (char *)(v51 + 48);
    }
    a2[7] = v42;
    long long v121 = v106;
    long long v122 = v107;
    unint64_t v70 = llround(v24 + v24 - v46);
    unint64_t v71 = llround(v25 + v25 - v45);
    unint64_t v85 = a2[8];
    if ((unint64_t)v42 >= v85)
    {
      unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v42[-*v32] >> 4);
      if (v88 + 1 <= 0x555555555555555)
      {
        unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - *v32) >> 4);
        uint64_t v90 = 2 * v89;
        if (2 * v89 <= v88 + 1) {
          uint64_t v90 = v88 + 1;
        }
        if (v89 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v91 = 0x555555555555555;
        }
        else {
          unint64_t v91 = v90;
        }
        if (v91) {
          uint64_t v92 = (char *)sub_100134B88((uint64_t)(a2 + 8), v91);
        }
        else {
          uint64_t v92 = 0;
        }
        uint64_t v93 = &v92[48 * v88];
        uint64_t v94 = &v92[48 * v91];
        *(void *)uint64_t v93 = v70;
        *((void *)v93 + 1) = v71;
        long long v100 = v107;
        *((_OWORD *)v93 + 1) = v106;
        *((_OWORD *)v93 + 2) = v100;
        uint64_t v87 = v93 + 48;
        id v101 = (char *)a2[6];
        BOOL v96 = (char *)a2[7];
        if (v96 == v101) {
          goto LABEL_66;
        }
        do
        {
          long long v102 = *((_OWORD *)v96 - 3);
          long long v103 = *((_OWORD *)v96 - 1);
          *((_OWORD *)v93 - 2) = *((_OWORD *)v96 - 2);
          *((_OWORD *)v93 - 1) = v103;
          *((_OWORD *)v93 - 3) = v102;
          v93 -= 48;
          v96 -= 48;
        }
        while (v96 != v101);
        goto LABEL_65;
      }
LABEL_69:
      sub_100004E40();
    }
LABEL_49:
    *(void *)int64x2_t v42 = v70;
    *((void *)v42 + 1) = v71;
    long long v86 = v122;
    *((_OWORD *)v42 + 1) = v121;
    *((_OWORD *)v42 + 2) = v86;
    uint64_t v87 = v42 + 48;
    goto LABEL_68;
  }
  double v108 = v29 + v11 * v17;
  double v109 = v30 + v10 * v17;
  long long v110 = xmmword_101178D58;
  long long v111 = unk_101178D68;
  sub_1004E0764(v118, v115, v112, &v108, (uint64_t)&v104);
  long long v33 = v21[1];
  long long v106 = *v21;
  long long v107 = v33;
  double v35 = v104;
  double v34 = v105;
  unint64_t v36 = llround(v24 + v24 - v104);
  long long v37 = v21[1];
  unint64_t v38 = llround(v25 + v25 - v105);
  long long v121 = *v21;
  long long v122 = v37;
  unint64_t v39 = a2[8];
  unint64_t v40 = a2[7];
  if (v40 >= v39)
  {
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v32) >> 4);
    unint64_t v54 = v53 + 1;
    if (v53 + 1 > 0x555555555555555) {
      goto LABEL_69;
    }
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v32) >> 4);
    if (2 * v55 > v54) {
      unint64_t v54 = 2 * v55;
    }
    if (v55 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v56 = 0x555555555555555;
    }
    else {
      unint64_t v56 = v54;
    }
    if (v56) {
      id v57 = (char *)sub_100134B88((uint64_t)(a2 + 8), v56);
    }
    else {
      id v57 = 0;
    }
    id v63 = &v57[48 * v53];
    unsigned int v64 = &v57[48 * v56];
    *(void *)id v63 = v36;
    *((void *)v63 + 1) = v38;
    long long v65 = v122;
    *((_OWORD *)v63 + 1) = v121;
    *((_OWORD *)v63 + 2) = v65;
    int64x2_t v42 = v63 + 48;
    uint64_t v67 = (char *)a2[6];
    uint64_t v66 = (char *)a2[7];
    if (v66 != v67)
    {
      do
      {
        long long v68 = *((_OWORD *)v66 - 3);
        long long v69 = *((_OWORD *)v66 - 1);
        *((_OWORD *)v63 - 2) = *((_OWORD *)v66 - 2);
        *((_OWORD *)v63 - 1) = v69;
        *((_OWORD *)v63 - 3) = v68;
        v63 -= 48;
        v66 -= 48;
      }
      while (v66 != v67);
      uint64_t v66 = (char *)*v32;
    }
    a2[6] = v63;
    a2[7] = v42;
    a2[8] = v64;
    if (v66) {
      operator delete(v66);
    }
  }
  else
  {
    *(void *)unint64_t v40 = v36;
    *(void *)(v40 + _Block_object_dispose(&STACK[0x250], 8) = v38;
    long long v41 = v122;
    *(_OWORD *)(v40 + 16) = v121;
    *(_OWORD *)(v40 + 32) = v41;
    int64x2_t v42 = (char *)(v40 + 48);
  }
  a2[7] = v42;
  long long v121 = v106;
  long long v122 = v107;
  unint64_t v70 = llround(v35);
  unint64_t v71 = llround(v34);
  unint64_t v72 = a2[8];
  if ((unint64_t)v42 < v72) {
    goto LABEL_49;
  }
  unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v42[-*v32] >> 4);
  if (v73 + 1 > 0x555555555555555) {
    goto LABEL_69;
  }
  unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *v32) >> 4);
  uint64_t v75 = 2 * v74;
  if (2 * v74 <= v73 + 1) {
    uint64_t v75 = v73 + 1;
  }
  if (v74 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v76 = 0x555555555555555;
  }
  else {
    unint64_t v76 = v75;
  }
  if (v76) {
    unint64_t v77 = (char *)sub_100134B88((uint64_t)(a2 + 8), v76);
  }
  else {
    unint64_t v77 = 0;
  }
  uint64_t v93 = &v77[48 * v73];
  uint64_t v94 = &v77[48 * v76];
  *(void *)uint64_t v93 = v70;
  *((void *)v93 + 1) = v71;
  long long v95 = v107;
  *((_OWORD *)v93 + 1) = v106;
  *((_OWORD *)v93 + 2) = v95;
  uint64_t v87 = v93 + 48;
  uint64_t v97 = (char *)a2[6];
  BOOL v96 = (char *)a2[7];
  if (v96 == v97) {
    goto LABEL_66;
  }
  do
  {
    long long v98 = *((_OWORD *)v96 - 3);
    long long v99 = *((_OWORD *)v96 - 1);
    *((_OWORD *)v93 - 2) = *((_OWORD *)v96 - 2);
    *((_OWORD *)v93 - 1) = v99;
    *((_OWORD *)v93 - 3) = v98;
    v93 -= 48;
    v96 -= 48;
  }
  while (v96 != v97);
LABEL_65:
  BOOL v96 = (char *)*v32;
LABEL_66:
  a2[6] = v93;
  a2[7] = v87;
  a2[8] = v94;
  if (v96) {
    operator delete(v96);
  }
LABEL_68:
  a2[7] = v87;
}

void sub_1004E1130(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, double a6)
{
  double v8 = *(double *)(a1 + 16) / (a6 + 1.0);
  uint64_t v9 = (uint64_t)(a2 + 8);
  unint64_t v10 = a2[8];
  uint64_t v11 = *a3 + 48 * a4;
  int64x2_t v12 = vcvtq_s64_f64(vrndaq_f64(vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)v11), vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 56) + 48 * a5), *(float64x2_t *)(*(void *)(a1 + 56) + 48 * a4)), v8)));
  int64x2_t v29 = *(int64x2_t *)(v11 + 16);
  int64x2_t v30 = *(int64x2_t *)(v11 + 32);
  unint64_t v13 = (int64x2_t *)a2[7];
  if ((unint64_t)v13 >= v10)
  {
    double v15 = (void **)(a2 + 6);
    uint64_t v16 = a2[6];
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13->i64 - v16) >> 4);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v16) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      int64x2_t v28 = v12;
      int64_t v21 = (char *)sub_100134B88(v9, v20);
      int64x2_t v12 = v28;
    }
    else
    {
      int64_t v21 = 0;
    }
    double v22 = (int64x2_t *)&v21[48 * v17];
    double v23 = &v21[48 * v20];
    *double v22 = v12;
    v22[1] = v29;
    v22[2] = v30;
    double v14 = v22 + 3;
    double v25 = (int64x2_t *)a2[6];
    double v24 = (int64x2_t *)a2[7];
    if (v24 != v25)
    {
      do
      {
        int64x2_t v26 = v24[-3];
        int64x2_t v27 = v24[-1];
        v22[-2] = v24[-2];
        v22[-1] = v27;
        v22[-3] = v26;
        v22 -= 3;
        v24 -= 3;
      }
      while (v24 != v25);
      double v24 = (int64x2_t *)*v15;
    }
    a2[6] = v22;
    a2[7] = v14;
    a2[8] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    int64x2_t *v13 = v12;
    v13[1] = v29;
    v13[2] = v30;
    double v14 = v13 + 3;
  }
  a2[7] = v14;
}

void sub_1004E12E4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, double a6)
{
  double v12 = *(double *)(a1 + 16);
  if (*(void *)(a1 + 216))
  {
    double v78 = *(double *)(a1 + 16);
    double v13 = fabs(v12);
    double v14 = *(double *)(a1 + 144);
    if (v14 <= 1.0e-12)
    {
      double v14 = log10(v13 + 2.0) * 0.25;
    }
    else if (v14 >= v13)
    {
      double v14 = v13;
    }
    double v15 = 3.14159265 / acos(1.0 - v14 / v13);
    if (v13 * 3.14159265 >= v15) {
      double v16 = v15;
    }
    else {
      double v16 = v13 * 3.14159265;
    }
    __double2 v17 = __sincos_stret(6.28318531 / v16);
    *(__double2 *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v17;
    double v12 = v78;
    if (v78 < 0.0) {
      *(double *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = -v17.__sinval;
    }
    *(double *)(a1 + 32) = v16 / 6.28318531;
  }
  uint64_t v18 = *a3 + 48 * a4;
  int64x2_t v84 = *(int64x2_t *)(v18 + 16);
  int64x2_t v85 = *(int64x2_t *)(v18 + 32);
  unint64_t v20 = a2 + 8;
  unint64_t v19 = a2[8];
  int64_t v21 = (int64x2_t **)(a2 + 6);
  float64x2_t v22 = vmulq_n_f64(*(float64x2_t *)(*(void *)(a1 + 56) + 48 * a5), v12);
  int32x2_t v23 = vdup_n_s32(a4 == a5);
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), (int8x16_t)vnegq_f64(v22), (int8x16_t)v22);
  float64x2_t v26 = vcvtq_f64_s64(*(int64x2_t *)v18);
  int64x2_t v27 = vcvtq_s64_f64(vrndaq_f64(vaddq_f64(v25, v26)));
  int64x2_t v28 = (int64x2_t *)a2[7];
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  float64x2_t v77 = v26;
  if ((unint64_t)v28 >= v19)
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 - *v21);
    unint64_t v31 = v30 + 1;
    if (v30 + 1 > 0x555555555555555) {
      goto LABEL_67;
    }
    float64x2_t v79 = v25;
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)*v21) >> 4);
    if (2 * v32 > v31) {
      unint64_t v31 = 2 * v32;
    }
    if (v32 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v33 = 0x555555555555555;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      int64x2_t v74 = v27;
      double v34 = (char *)sub_100134B88((uint64_t)(a2 + 8), v33);
      int64x2_t v27 = v74;
      int64_t v21 = (int64x2_t **)(a2 + 6);
    }
    else
    {
      double v34 = 0;
    }
    double v35 = (int64x2_t *)&v34[48 * v30];
    unint64_t v36 = &v34[48 * v33];
    int64x2_t *v35 = v27;
    v35[1] = v84;
    v35[2] = v85;
    int64x2_t v29 = v35 + 3;
    unint64_t v38 = (int64x2_t *)a2[6];
    long long v37 = (int64x2_t *)a2[7];
    if (v37 != v38)
    {
      do
      {
        int64x2_t v39 = v37[-3];
        int64x2_t v40 = v37[-1];
        v35[-2] = v37[-2];
        v35[-1] = v40;
        v35[-3] = v39;
        v35 -= 3;
        v37 -= 3;
      }
      while (v37 != v38);
      long long v37 = *v21;
    }
    a2[6] = v35;
    a2[7] = v29;
    a2[8] = v36;
    if (v37)
    {
      operator delete(v37);
      int64_t v21 = (int64x2_t **)(a2 + 6);
    }
    float64x2_t v26 = v77;
    float64x2_t v25 = v79;
  }
  else
  {
    *int64x2_t v28 = v27;
    v28[1] = v84;
    v28[2] = v85;
    int64x2_t v29 = v28 + 3;
  }
  a2[7] = v29;
  int v41 = vcvtpd_s64_f64(fabs(a6) * *(double *)(a1 + 32));
  if (v41 >= 2)
  {
    double v42 = v25.f64[1];
    double v43 = v26.f64[1];
    for (int i = 1; i != v41; ++i)
    {
      double v45 = v25.f64[0];
      double v47 = *(double *)(a1 + 40);
      double v46 = *(double *)(a1 + 48);
      double v48 = -(v47 * v42);
      double v42 = v42 * v46 + v45 * v47;
      v25.f64[0] = v48 + v45 * v46;
      unint64_t v49 = llround(v25.f64[0] + v26.f64[0]);
      unint64_t v50 = llround(v42 + v43);
      if ((unint64_t)v29 >= *v20)
      {
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v29 - *v21);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x555555555555555) {
          goto LABEL_67;
        }
        float64x2_t v80 = v25;
        if (0x5555555555555556 * ((uint64_t)(*v20 - (void)*v21) >> 4) > v52) {
          unint64_t v52 = 0x5555555555555556 * ((uint64_t)(*v20 - (void)*v21) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v20 - (void)*v21) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v53 = 0x555555555555555;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v54 = (char *)sub_100134B88((uint64_t)(a2 + 8), v53);
          int64_t v21 = (int64x2_t **)(a2 + 6);
        }
        else
        {
          unint64_t v54 = 0;
        }
        unint64_t v55 = &v54[48 * v51];
        *(void *)unint64_t v55 = v49;
        *((void *)v55 + 1) = v50;
        *((int64x2_t *)v55 + 1) = v84;
        *((int64x2_t *)v55 + 2) = v85;
        id v57 = (char *)a2[6];
        unint64_t v56 = (int64x2_t *)a2[7];
        unint64_t v58 = v55;
        if (v56 != (int64x2_t *)v57)
        {
          do
          {
            int64x2_t v59 = v56[-3];
            int64x2_t v60 = v56[-1];
            *((int64x2_t *)v58 - 2) = v56[-2];
            *((int64x2_t *)v58 - 1) = v60;
            *((int64x2_t *)v58 - 3) = v59;
            v58 -= 48;
            v56 -= 3;
          }
          while (v56 != (int64x2_t *)v57);
          unint64_t v56 = *v21;
        }
        int64x2_t v29 = (int64x2_t *)(v55 + 48);
        a2[6] = v58;
        a2[7] = v55 + 48;
        a2[8] = &v54[48 * v53];
        if (v56)
        {
          operator delete(v56);
          int64_t v21 = (int64x2_t **)(a2 + 6);
        }
        v26.f64[0] = v77.f64[0];
        float64x2_t v25 = v80;
      }
      else
      {
        v29->i64[0] = v49;
        v29->i64[1] = v50;
        v29[1] = v84;
        v29[2] = v85;
        v29 += 3;
      }
      a2[7] = v29;
    }
  }
  uint64_t v61 = *v75 + 48 * v76;
  int64x2_t v62 = vcvtq_s64_f64(vrndaq_f64(vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)v61), *(float64x2_t *)(*(void *)(a1 + 56) + 48 * v76), *(double *)(a1 + 16))));
  int64x2_t v82 = *(int64x2_t *)(v61 + 16);
  int64x2_t v83 = *(int64x2_t *)(v61 + 32);
  if ((unint64_t)v29 < *v20)
  {
    *int64x2_t v29 = v62;
    v29[1] = v82;
    v29[2] = v83;
    id v63 = v29 + 3;
    goto LABEL_66;
  }
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (v29 - *v21);
  if (v64 + 1 > 0x555555555555555) {
LABEL_67:
  }
    sub_100004E40();
  unint64_t v65 = 0x5555555555555556 * ((uint64_t)(*v20 - (void)*v21) >> 4);
  if (v65 <= v64 + 1) {
    unint64_t v65 = v64 + 1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v20 - (void)*v21) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v66 = 0x555555555555555;
  }
  else {
    unint64_t v66 = v65;
  }
  if (v66)
  {
    int64x2_t v81 = v62;
    uint64_t v67 = (char *)sub_100134B88((uint64_t)(a2 + 8), v66);
    int64x2_t v62 = v81;
    int64_t v21 = (int64x2_t **)(a2 + 6);
  }
  else
  {
    uint64_t v67 = 0;
  }
  long long v68 = (int64x2_t *)&v67[48 * v64];
  long long v69 = &v67[48 * v66];
  *long long v68 = v62;
  v68[1] = v82;
  v68[2] = v83;
  id v63 = v68 + 3;
  unint64_t v71 = (int64x2_t *)a2[6];
  unint64_t v70 = (int64x2_t *)a2[7];
  if (v70 != v71)
  {
    do
    {
      int64x2_t v72 = v70[-3];
      int64x2_t v73 = v70[-1];
      v68[-2] = v70[-2];
      v68[-1] = v73;
      v68[-3] = v72;
      v68 -= 3;
      v70 -= 3;
    }
    while (v70 != v71);
    unint64_t v70 = *v21;
  }
  a2[6] = v68;
  a2[7] = v63;
  a2[8] = v69;
  if (v70) {
    operator delete(v70);
  }
LABEL_66:
  a2[7] = v63;
}

void sub_1004E183C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int32x2_t v5 = vmovn_s64(vceqq_s64(*(int64x2_t *)(*a3 + 48 * a4), *(int64x2_t *)(*a3 + 48 * a5)));
  if (v5.i32[0] & v5.i32[1]) {
    return;
  }
  double v12 = (void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  double v13 = (double *)(v11 + 48 * a4);
  double v14 = (double *)(v11 + 48 * a5);
  double v15 = *v14;
  double v16 = v14[1];
  double v17 = *v13;
  double v18 = v13[1];
  double v19 = v18 * *v14 - v16 * *v13;
  double v20 = 1.0;
  if (v19 <= 1.0)
  {
    double v20 = v18 * *v14 - v16 * *v13;
    if (v19 < -1.0) {
      double v20 = -1.0;
    }
  }
  if (*(void *)(a1 + 216))
  {
    sub_1004E213C(a1 + 192, (uint64_t)a3, (uint64_t)v12, a4, a5);
    *(double *)(a1 + 16) = v21;
    if (*(unsigned char *)(a2 + 72))
    {
      double v21 = -v21;
      *(double *)(a1 + 16) = v21;
    }
  }
  else
  {
    double v21 = *(double *)(a1 + 16);
  }
  if (fabs(v21) <= 1.0e-12)
  {
    unint64_t v27 = *(void *)(a2 + 64);
    int64x2_t v28 = (int64x2_t *)(*a3 + 48 * a4);
    float64x2_t v26 = *(int64x2_t **)(a2 + 56);
    if ((unint64_t)v26 < v27)
    {
      int64x2_t v29 = *v28;
      int64x2_t v30 = v28[2];
      v26[1] = v28[1];
      v26[2] = v30;
      *float64x2_t v26 = v29;
      goto LABEL_16;
    }
    int64x2_t v39 = (void **)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 48);
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26->i64 - v40) >> 4);
    unint64_t v42 = v41 + 1;
    if (v41 + 1 <= 0x555555555555555)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v40) >> 4);
      if (2 * v43 > v42) {
        unint64_t v42 = 2 * v43;
      }
      if (v43 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v44 = 0x555555555555555;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44) {
        double v45 = (char *)sub_100134B88(a2 + 64, v44);
      }
      else {
        double v45 = 0;
      }
      unint64_t v53 = (int64x2_t *)&v45[48 * v41];
      unint64_t v54 = &v45[48 * v44];
      int64x2_t v55 = *v28;
      int64x2_t v56 = v28[2];
      v53[1] = v28[1];
      v53[2] = v56;
      *unint64_t v53 = v55;
      unint64_t v31 = v53 + 3;
      unint64_t v58 = *(int64x2_t **)(a2 + 48);
      id v57 = *(int64x2_t **)(a2 + 56);
      if (v57 == v58) {
        goto LABEL_59;
      }
      do
      {
        int64x2_t v59 = v57[-3];
        int64x2_t v60 = v57[-1];
        v53[-2] = v57[-2];
        v53[-1] = v60;
        v53[-3] = v59;
        v53 -= 3;
        v57 -= 3;
      }
      while (v57 != v58);
      goto LABEL_58;
    }
LABEL_117:
    sub_100004E40();
  }
  double v22 = v18 * v16 + v17 * v15;
  if (fabs(v20 * v21) < 1.0 && v22 > 0.0)
  {
    uint64_t v23 = *a3 + 48 * a4;
    unint64_t v24 = *(void *)(a2 + 64);
    int64x2_t v25 = vcvtq_s64_f64(vrndaq_f64(vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)v23), *(float64x2_t *)(*v12 + 48 * a5), v21)));
    int64x2_t v113 = *(int64x2_t *)(v23 + 16);
    int64x2_t v116 = *(int64x2_t *)(v23 + 32);
    float64x2_t v26 = *(int64x2_t **)(a2 + 56);
    if ((unint64_t)v26 < v24)
    {
      *float64x2_t v26 = v25;
      v26[1] = v113;
      v26[2] = v116;
LABEL_16:
      unint64_t v31 = v26 + 3;
LABEL_61:
      *(void *)(a2 + 56) = v31;
      return;
    }
    int64x2_t v39 = (void **)(a2 + 48);
    uint64_t v47 = *(void *)(a2 + 48);
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26->i64 - v47) >> 4);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 <= 0x555555555555555)
    {
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v47) >> 4);
      if (2 * v50 > v49) {
        unint64_t v49 = 2 * v50;
      }
      if (v50 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v51 = 0x555555555555555;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        int64x2_t v110 = v25;
        unint64_t v52 = (char *)sub_100134B88(a2 + 64, v51);
        int64x2_t v25 = v110;
      }
      else
      {
        unint64_t v52 = 0;
      }
      unint64_t v53 = (int64x2_t *)&v52[48 * v48];
      unint64_t v54 = &v52[48 * v51];
      *unint64_t v53 = v25;
      v53[1] = v113;
      v53[2] = v116;
      unint64_t v31 = v53 + 3;
      unint64_t v66 = *(int64x2_t **)(a2 + 48);
      id v57 = *(int64x2_t **)(a2 + 56);
      if (v57 == v66) {
        goto LABEL_59;
      }
      do
      {
        int64x2_t v67 = v57[-3];
        int64x2_t v68 = v57[-1];
        v53[-2] = v57[-2];
        v53[-1] = v68;
        v53[-3] = v67;
        v53 -= 3;
        v57 -= 3;
      }
      while (v57 != v66);
LABEL_58:
      id v57 = (int64x2_t *)*v39;
LABEL_59:
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v53;
      *(void *)(a2 + 56) = v31;
      *(void *)(a2 + 64) = v54;
      if (v57) {
        operator delete(v57);
      }
      goto LABEL_61;
    }
    goto LABEL_117;
  }
  if (v22 > -0.99 && v20 * v21 < 0.0)
  {
    uint64_t v32 = *a3 + 48 * a4;
    float64x2_t v33 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)v32), *(float64x2_t *)(*v12 + 48 * a5), v21);
    unint64_t v34 = *(void *)(a2 + 64);
    double v35 = (int64x2_t **)(a2 + 48);
    int64x2_t v36 = vcvtq_s64_f64(vrndaq_f64(v33));
    int64x2_t v114 = *(int64x2_t *)(v32 + 16);
    int64x2_t v117 = *(int64x2_t *)(v32 + 32);
    long long v37 = *(int64x2_t **)(a2 + 56);
    if ((unint64_t)v37 >= v34)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * (v37 - *v35);
      unint64_t v62 = v61 + 1;
      if (v61 + 1 > 0x555555555555555) {
        goto LABEL_118;
      }
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)*v35) >> 4);
      if (2 * v63 > v62) {
        unint64_t v62 = 2 * v63;
      }
      if (v63 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v64 = 0x555555555555555;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        int64x2_t v111 = v36;
        unint64_t v65 = (char *)sub_100134B88(a2 + 64, v64);
        int64x2_t v36 = v111;
      }
      else
      {
        unint64_t v65 = 0;
      }
      unint64_t v70 = (int64x2_t *)&v65[48 * v61];
      unint64_t v71 = &v65[48 * v64];
      *unint64_t v70 = v36;
      v70[1] = v114;
      v70[2] = v117;
      unint64_t v38 = v70 + 3;
      int64x2_t v73 = *(int64x2_t **)(a2 + 48);
      int64x2_t v72 = *(int64x2_t **)(a2 + 56);
      if (v72 != v73)
      {
        do
        {
          int64x2_t v74 = v72[-3];
          int64x2_t v75 = v72[-1];
          v70[-2] = v72[-2];
          v70[-1] = v75;
          v70[-3] = v74;
          v70 -= 3;
          v72 -= 3;
        }
        while (v72 != v73);
        int64x2_t v72 = *v35;
      }
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v70;
      *(void *)(a2 + 56) = v38;
      *(void *)(a2 + 64) = v71;
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *long long v37 = v36;
      v37[1] = v114;
      void v37[2] = v117;
      unint64_t v38 = v37 + 3;
    }
    *(void *)(a2 + 56) = v38;
    uint64_t v76 = (int64x2_t *)(*a3 + 48 * a4);
    unint64_t v77 = *(void *)(a2 + 64);
    if ((unint64_t)v38 >= v77)
    {
      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (v38 - *v35);
      if (v81 + 1 > 0x555555555555555) {
        goto LABEL_118;
      }
      unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)*v35) >> 4);
      uint64_t v83 = 2 * v82;
      if (2 * v82 <= v81 + 1) {
        uint64_t v83 = v81 + 1;
      }
      if (v82 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v84 = 0x555555555555555;
      }
      else {
        unint64_t v84 = v83;
      }
      if (v84) {
        int64x2_t v85 = (char *)sub_100134B88(a2 + 64, v84);
      }
      else {
        int64x2_t v85 = 0;
      }
      long long v86 = (int64x2_t *)&v85[48 * v81];
      uint64_t v87 = &v85[48 * v84];
      int64x2_t v88 = *v76;
      int64x2_t v89 = v76[2];
      v86[1] = v76[1];
      v86[2] = v89;
      *long long v86 = v88;
      float64x2_t v80 = v86 + 3;
      unint64_t v91 = *(char **)(a2 + 48);
      uint64_t v90 = *(int64x2_t **)(a2 + 56);
      if (v90 != (int64x2_t *)v91)
      {
        do
        {
          int64x2_t v92 = v90[-3];
          int64x2_t v93 = v90[-1];
          v86[-2] = v90[-2];
          v86[-1] = v93;
          v86[-3] = v92;
          v86 -= 3;
          v90 -= 3;
        }
        while (v90 != (int64x2_t *)v91);
        uint64_t v90 = *v35;
      }
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v86;
      *(void *)(a2 + 56) = v80;
      *(void *)(a2 + 64) = v87;
      if (v90) {
        operator delete(v90);
      }
    }
    else
    {
      int64x2_t v78 = *v76;
      int64x2_t v79 = v76[2];
      v38[1] = v76[1];
      v38[2] = v79;
      *unint64_t v38 = v78;
      float64x2_t v80 = v38 + 3;
    }
    *(void *)(a2 + 56) = v80;
    uint64_t v94 = *a3 + 48 * a4;
    int64x2_t v95 = vcvtq_s64_f64(vrndaq_f64(vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)v94), *(float64x2_t *)(*(void *)(a1 + 56) + 48 * a4), *(double *)(a1 + 16))));
    int64x2_t v115 = *(int64x2_t *)(v94 + 16);
    int64x2_t v118 = *(int64x2_t *)(v94 + 32);
    unint64_t v96 = *(void *)(a2 + 64);
    if ((unint64_t)v80 < v96)
    {
      *float64x2_t v80 = v95;
      v80[1] = v115;
      v80[2] = v118;
      uint64_t v97 = v80 + 3;
LABEL_109:
      *(void *)(a2 + 56) = v97;
      return;
    }
    unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (v80 - *v35);
    if (v98 + 1 <= 0x555555555555555)
    {
      unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)*v35) >> 4);
      uint64_t v100 = 2 * v99;
      if (2 * v99 <= v98 + 1) {
        uint64_t v100 = v98 + 1;
      }
      if (v99 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v101 = 0x555555555555555;
      }
      else {
        unint64_t v101 = v100;
      }
      if (v101)
      {
        int64x2_t v112 = v95;
        long long v102 = (char *)sub_100134B88(a2 + 64, v101);
        int64x2_t v95 = v112;
      }
      else
      {
        long long v102 = 0;
      }
      long long v103 = (int64x2_t *)&v102[48 * v98];
      double v104 = &v102[48 * v101];
      *long long v103 = v95;
      v103[1] = v115;
      v103[2] = v118;
      uint64_t v97 = v103 + 3;
      long long v106 = *(int64x2_t **)(a2 + 48);
      double v105 = *(int64x2_t **)(a2 + 56);
      if (v105 != v106)
      {
        do
        {
          int64x2_t v107 = v105[-3];
          int64x2_t v108 = v105[-1];
          v103[-2] = v105[-2];
          v103[-1] = v108;
          v103[-3] = v107;
          v103 -= 3;
          v105 -= 3;
        }
        while (v105 != v106);
        double v105 = *v35;
      }
      *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v103;
      *(void *)(a2 + 56) = v97;
      *(void *)(a2 + 64) = v104;
      if (v105) {
        operator delete(v105);
      }
      goto LABEL_109;
    }
LABEL_118:
    sub_100004E40();
  }
  if (v22 > 0.999) {
    goto LABEL_32;
  }
  int v46 = *(_DWORD *)(a1 + 128);
  if (v46 == 3)
  {
    if (v22 > *(double *)(a1 + 24) + -1.0)
    {
LABEL_32:
      sub_1004E1130(a1, (void *)a2, a3, a4, a5, v18 * v16 + v17 * v15);
      return;
    }
    goto LABEL_114;
  }
  if (v22 > 0.99 || v46 == 1)
  {
    sub_1004E0820(a1, (void *)a2, a3, a4, a5);
  }
  else
  {
    if (v46 != 2)
    {
LABEL_114:
      sub_1004E0B28(a1, (void *)a2, a3, a4, a5);
      return;
    }
    double v109 = atan2(v20, v22);
    sub_1004E12E4(a1, (void *)a2, a3, a4, a5, v109);
  }
}

uint64_t sub_1004E213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_1004E418C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, a2, a3, &v8, &v7);
}

uint64_t sub_1004E2194(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v7 = *a3;
  uint64_t v6 = (uint64_t *)a3[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a3) >> 4);
  if (v8 <= 2)
  {
    double v9 = *(double *)(result + 16);
    if (v9 >= 0.0) {
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  unint64_t v10 = v6 - 6;
  if (v8) {
    uint64_t v11 = v6 - 6;
  }
  else {
    uint64_t v11 = (uint64_t *)a3[1];
  }
  if ((uint64_t *)v7 == v11)
  {
    double v13 = 0.0;
    uint64_t v11 = (uint64_t *)*a3;
    if (v8) {
LABEL_11:
    }
      double v13 = v13 + (double)(v11[1] + v10[1]) * (double)(*v10 - *v11);
  }
  else
  {
    uint64_t v12 = *v10;
    double v13 = 0.0;
    double v14 = (uint64_t *)*a3;
    do
    {
      uint64_t v15 = v14[1];
      double v16 = v13 + (double)(v15 + v10[1]) * (double)(v12 - *v14);
      unint64_t v10 = v14 + 6;
      uint64_t v12 = v14[6];
      double v13 = v16 + (double)(v14[7] + v15) * (double)(*v14 - v12);
      v14 += 12;
    }
    while (v14 != v11);
    unint64_t v10 = v14 - 6;
    if (v8) {
      goto LABEL_11;
    }
  }
  BOOL v17 = v13 * 0.5 >= 0.0;
  double v9 = *(double *)(result + 16);
  if ((v17 ^ (v9 < 0.0)))
  {
LABEL_30:
    if (v6 != (uint64_t *)v7)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v8 - 1;
      do
      {
        sub_1004E183C(v5, a2, a3, v28, v29);
        uint64_t v29 = v28++;
      }
      while (v28 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
    }
    int64x2_t v30 = (uint64_t *)(a2 + 24);
    uint64_t v31 = a2 + 48;
    unint64_t v32 = *(void *)(a2 + 32);
    if (v32 >= *(void *)(a2 + 40))
    {
      double result = sub_100134994(v30, v31);
    }
    else
    {
      sub_100134934((uint64_t)v30, v31);
      double result = v32 + 24;
    }
    *(void *)(a2 + 32) = result;
    return result;
  }
LABEL_13:
  if ((uint64_t *)v7 == v6)
  {
    double v25 = 1.0;
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    int64_t v18 = 0x8000000000000000;
  }
  else
  {
    int64_t v18 = 0x8000000000000000;
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    int64_t v21 = 0x8000000000000000;
    double v22 = (uint64_t *)*a3;
    do
    {
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      v22 += 6;
      if (v23 < v19) {
        uint64_t v19 = v23;
      }
      if (v23 > v21) {
        int64_t v21 = v23;
      }
      if (v24 < v20) {
        uint64_t v20 = v24;
      }
      if (v24 > v18) {
        int64_t v18 = v24;
      }
    }
    while (v22 != v6);
    double v25 = (double)(v21 - v19);
  }
  double v26 = fabs(v9);
  double v27 = v26 + v26;
  if (v27 <= v25 && v27 <= (double)(v18 - v20)) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1004E23B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1004E2194(a1, a2, a3);
  unint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unint64_t v8 = (_OWORD *)(v7 - 48);
  if (*a3 != v7 && (unint64_t)v8 > v6)
  {
    unint64_t v10 = v6 + 48;
    do
    {
      long long v11 = *(_OWORD *)(v10 - 48);
      long long v12 = *(_OWORD *)(v10 - 32);
      long long v13 = *(_OWORD *)(v10 - 16);
      long long v15 = v8[1];
      long long v14 = v8[2];
      *(_OWORD *)(v10 - 4_Block_object_dispose(&STACK[0x250], 8) = *v8;
      *(_OWORD *)(v10 - 32) = v15;
      *(_OWORD *)(v10 - 16) = v14;
      v8[1] = v12;
      void v8[2] = v13;
      *unint64_t v8 = v11;
      v8 -= 3;
      BOOL v16 = v10 >= (unint64_t)v8;
      v10 += 48;
    }
    while (!v16);
  }
  uint64_t v19 = *(long long **)(a1 + 56);
  BOOL v17 = *(long long **)(a1 + 64);
  int64_t v18 = (void **)(a1 + 56);
  uint64_t v20 = v17 - 3;
  if (v19 != v17 && v20 > v19)
  {
    double v22 = v19 + 3;
    do
    {
      long long v23 = *(v22 - 3);
      long long v24 = *(v22 - 2);
      long long v25 = *(v22 - 1);
      long long v27 = v20[1];
      long long v26 = v20[2];
      *(v22 - 3) = *v20;
      *(v22 - 2) = v27;
      *(v22 - 1) = v26;
      v20[1] = v24;
      v20[2] = v25;
      *uint64_t v20 = v23;
      v20 -= 3;
      BOOL v16 = v22 >= v20;
      v22 += 3;
    }
    while (!v16);
    uint64_t v19 = *(long long **)(a1 + 56);
    BOOL v17 = *(long long **)(a1 + 64);
  }
  unint64_t v28 = *(void *)(a1 + 72);
  if ((unint64_t)v17 >= v28)
  {
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v17 - v19);
    unint64_t v33 = v32 + 1;
    if (v32 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v19) >> 4);
    if (2 * v34 > v33) {
      unint64_t v33 = 2 * v34;
    }
    if (v34 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v35 = 0x555555555555555;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35) {
      int64x2_t v36 = (char *)sub_100134B88(a1 + 72, v35);
    }
    else {
      int64x2_t v36 = 0;
    }
    long long v37 = &v36[48 * v32];
    unint64_t v38 = &v36[48 * v35];
    long long v39 = *v19;
    long long v40 = v19[2];
    *((_OWORD *)v37 + 1) = v19[1];
    *((_OWORD *)v37 + 2) = v40;
    *(_OWORD *)long long v37 = v39;
    uint64_t v31 = v37 + 48;
    unint64_t v42 = *(char **)(a1 + 56);
    unint64_t v41 = *(char **)(a1 + 64);
    if (v41 != v42)
    {
      do
      {
        long long v43 = *((_OWORD *)v41 - 3);
        long long v44 = *((_OWORD *)v41 - 1);
        *((_OWORD *)v37 - 2) = *((_OWORD *)v41 - 2);
        *((_OWORD *)v37 - 1) = v44;
        *((_OWORD *)v37 - 3) = v43;
        v37 -= 48;
        v41 -= 48;
      }
      while (v41 != v42);
      unint64_t v41 = (char *)*v18;
    }
    *(void *)(a1 + 56) = v37;
    *(void *)(a1 + 64) = v31;
    *(void *)(a1 + 72) = v38;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    long long v29 = *v19;
    long long v30 = v19[2];
    v17[1] = v19[1];
    v17[2] = v30;
    long long *v17 = v29;
    uint64_t v31 = v17 + 3;
  }
  *(void *)(a1 + 64) = v31;
  uint64_t v45 = *(void *)(a1 + 56);
  size_t v46 = (size_t)v31 - v45 - 48;
  if (v46)
  {
    memmove(*(void **)(a1 + 56), (const void *)(v45 + 48), v46);
    uint64_t v47 = (float64x2_t *)*v18;
  }
  else
  {
    uint64_t v47 = *(float64x2_t **)(a1 + 56);
  }
  *(void *)(a1 + 64) = v45 + v46;
  while (v47 != (float64x2_t *)(v45 + v46))
  {
    *uint64_t v47 = vnegq_f64(*v47);
    v47 += 3;
  }
  *(void *)(a2 + 56) = *(void *)(a2 + 48);

  return sub_1004E2194(a1, a2, a3);
}

uint64_t sub_1004E25F4(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 192;
  if (*(void *)(a1 + 216))
  {
    sub_1004E213C(a1 + 192, (uint64_t)a3, a1 + 56, 0, 0);
    *(double *)(a1 + 16) = v7;
  }
  else
  {
    double v7 = *(double *)(a1 + 16);
  }
  if (fabs(v7) <= 1.0e-12)
  {
    unint64_t v9 = a2[8];
    unint64_t v10 = (long long *)*a3;
    long long v11 = (_OWORD *)a2[7];
    if ((unint64_t)v11 >= v9)
    {
      uint64_t v15 = a2[6];
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v15) >> 4);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x555555555555555) {
        sub_100004E40();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v15) >> 4);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v19 = 0x555555555555555;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)sub_100134B88((uint64_t)(a2 + 8), v19);
      }
      else {
        uint64_t v20 = 0;
      }
      int64_t v21 = &v20[48 * v16];
      double v22 = &v20[48 * v19];
      long long v23 = *v10;
      long long v24 = v10[2];
      *((_OWORD *)v21 + 1) = v10[1];
      *((_OWORD *)v21 + 2) = v24;
      *(_OWORD *)int64_t v21 = v23;
      long long v14 = v21 + 48;
      long long v26 = (char *)a2[6];
      long long v25 = (char *)a2[7];
      if (v25 != v26)
      {
        do
        {
          long long v27 = *((_OWORD *)v25 - 3);
          long long v28 = *((_OWORD *)v25 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v25 - 2);
          *((_OWORD *)v21 - 1) = v28;
          *((_OWORD *)v21 - 3) = v27;
          v21 -= 48;
          v25 -= 48;
        }
        while (v25 != v26);
        long long v25 = (char *)a2[6];
      }
      a2[6] = v21;
      a2[7] = v14;
      a2[8] = v22;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      long long v12 = *v10;
      long long v13 = v10[2];
      v11[1] = v10[1];
      v11[2] = v13;
      _OWORD *v11 = v12;
      long long v14 = v11 + 3;
    }
    a2[7] = v14;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 132);
    if (v8 == 4)
    {
      sub_1004E12E4(a1, a2, a3, 0, 0, 3.14159265);
    }
    else if (v8 == 2)
    {
      sub_1004E0820(a1, a2, a3, 0, 0);
    }
    else
    {
      sub_1004E0B28(a1, a2, a3, 0, 0);
    }
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4);
  uint64_t v30 = v29 - 1;
  if (v29 - 1 >= 2)
  {
    uint64_t v31 = 0;
    do
    {
      uint64_t v32 = v31 + 1;
      sub_1004E183C(a1, (uint64_t)a2, a3, v31 + 1, v31);
      uint64_t v31 = v32;
    }
    while (v29 - 2 != v32);
  }
  if (v29 != 1)
  {
    uint64_t v33 = 48 * v29;
    unint64_t v34 = v29 - 1;
    do
    {
      uint64_t v35 = *(void *)(a1 + 56) + v33;
      *(float64x2_t *)(v35 - 4_Block_object_dispose(&STACK[0x250], 8) = vnegq_f64(*(float64x2_t *)(v35 - 96));
      *(_OWORD *)(v35 - 32) = xmmword_101178D58;
      *(_OWORD *)(v35 - 16) = unk_101178D68;
      v33 -= 48;
      --v34;
    }
    while (v34);
  }
  int64x2_t v36 = *(_OWORD **)(a1 + 56);
  long long v37 = &v36[3 * v30];
  long long v38 = *v37;
  long long v39 = v37[2];
  v36[1] = v37[1];
  void v36[2] = v39;
  _OWORD *v36 = v38;
  if (*(void *)(a1 + 216))
  {
    sub_1004E213C(v6, (uint64_t)a3, a1 + 56, v30, v30);
    *(double *)(a1 + 16) = v40;
  }
  else
  {
    double v40 = *(double *)(a1 + 16);
  }
  if (fabs(v40) <= 1.0e-12)
  {
    unint64_t v42 = a2[8];
    long long v43 = (long long *)(*a3 + 48 * v30);
    long long v44 = (_OWORD *)a2[7];
    if ((unint64_t)v44 >= v42)
    {
      uint64_t v48 = a2[6];
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v44 - v48) >> 4);
      unint64_t v50 = v49 + 1;
      if (v49 + 1 > 0x555555555555555) {
        sub_100004E40();
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v48) >> 4);
      if (2 * v51 > v50) {
        unint64_t v50 = 2 * v51;
      }
      if (v51 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v52 = 0x555555555555555;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52) {
        unint64_t v53 = (char *)sub_100134B88((uint64_t)(a2 + 8), v52);
      }
      else {
        unint64_t v53 = 0;
      }
      unint64_t v54 = &v53[48 * v49];
      int64x2_t v55 = &v53[48 * v52];
      long long v56 = *v43;
      long long v57 = v43[2];
      *((_OWORD *)v54 + 1) = v43[1];
      *((_OWORD *)v54 + 2) = v57;
      *(_OWORD *)unint64_t v54 = v56;
      uint64_t v47 = v54 + 48;
      int64x2_t v59 = (char *)a2[6];
      unint64_t v58 = (char *)a2[7];
      if (v58 != v59)
      {
        do
        {
          long long v60 = *((_OWORD *)v58 - 3);
          long long v61 = *((_OWORD *)v58 - 1);
          *((_OWORD *)v54 - 2) = *((_OWORD *)v58 - 2);
          *((_OWORD *)v54 - 1) = v61;
          *((_OWORD *)v54 - 3) = v60;
          v54 -= 48;
          v58 -= 48;
        }
        while (v58 != v59);
        unint64_t v58 = (char *)a2[6];
      }
      a2[6] = v54;
      a2[7] = v47;
      a2[8] = v55;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      long long v45 = *v43;
      long long v46 = v43[2];
      v44[1] = v43[1];
      v44[2] = v46;
      *long long v44 = v45;
      uint64_t v47 = v44 + 3;
    }
    a2[7] = v47;
  }
  else
  {
    int v41 = *(_DWORD *)(a1 + 132);
    if (v41 == 4)
    {
      sub_1004E12E4(a1, a2, a3, v30, v30, 3.14159265);
    }
    else if (v41 == 2)
    {
      sub_1004E0820(a1, a2, a3, v30, v30);
    }
    else
    {
      sub_1004E0B28(a1, a2, a3, v30, v30);
    }
  }
  if (v30)
  {
    uint64_t v62 = 0;
    do
    {
      sub_1004E183C(a1, (uint64_t)a2, a3, v30, v62);
      uint64_t v62 = v30--;
    }
    while (v30);
  }
  unint64_t v63 = a2 + 3;
  uint64_t v64 = (uint64_t)(a2 + 6);
  unint64_t v65 = a2[4];
  if (v65 >= a2[5])
  {
    uint64_t result = sub_100134994(v63, v64);
  }
  else
  {
    sub_100134934((uint64_t)v63, v64);
    uint64_t result = v65 + 24;
  }
  a2[4] = result;
  return result;
}

void sub_1004E2A8C(uint64_t a1, uint64_t a2)
{
  long long v60 = 0u;
  long long v61 = 0u;
  unsigned int v59 = -1;
  sub_1004E00A8((uint64_t *)a2, (int64_t *)&v60, &v59);
  if ((v59 & 0x80000000) != 0) {
    return;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 80);
  if (v4)
  {
    *(unsigned char *)(a2 + 72) = 0;
    double v5 = fabs(*(double *)(a1 + 8)) * 0.5;
    goto LABEL_16;
  }
  uint64_t v6 = *(char **)(*(void *)a2 + 24 * v59);
  double v7 = *(char **)(*(void *)a2 + 24 * v59 + 8);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 4);
  if (v8 <= 2)
  {
    *(unsigned char *)(a2 + 72) = 0;
    goto LABEL_15;
  }
  unint64_t v9 = v7 - 48;
  if (v8) {
    v7 -= 48;
  }
  if (v6 == v7)
  {
    double v11 = 0.0;
    if (v8) {
LABEL_12:
    }
      double v11 = v11
          + (double)(uint64_t)(*((void *)v6 + 1) + *((void *)v9 + 1))
          * (double)(uint64_t)(*(void *)v9 - *(void *)v6);
  }
  else
  {
    uint64_t v10 = *(void *)v9;
    double v11 = 0.0;
    do
    {
      uint64_t v12 = *((void *)v6 + 1);
      double v13 = v11 + (double)(v12 + *((void *)v9 + 1)) * (double)(v10 - *(void *)v6);
      unint64_t v9 = v6 + 48;
      uint64_t v10 = *((void *)v6 + 6);
      double v11 = v13 + (double)(*((void *)v6 + 7) + v12) * (double)(*(void *)v6 - v10);
      v6 += 96;
    }
    while (v6 != v7);
    unint64_t v9 = v6 - 48;
    uint64_t v6 = v7;
    if (v8) {
      goto LABEL_12;
    }
  }
  double v14 = v11 * 0.5;
  *(unsigned char *)(a2 + 72) = v14 < 0.0;
  if (v14 < 0.0)
  {
    double v5 = -*(double *)(a1 + 8);
    goto LABEL_16;
  }
LABEL_15:
  double v5 = *(double *)(a1 + 8);
LABEL_16:
  *(double *)(a1 + 16) = v5;
  double v15 = fabs(v5);
  if (v15 + -2.30584301e18 >= (double)(uint64_t)v60
    || 2.30584301e18 - v15 <= (double)(uint64_t)v61
    || v15 + -2.30584301e18 >= (double)*((uint64_t *)&v60 + 1)
    || 2.30584301e18 - v15 <= (double)*((uint64_t *)&v61 + 1))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1004E3BA4(exception, "Values exceed permitted range");
  }
  int v16 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = v16;
  *(_DWORD *)(a1 + 132) = v4;
  if (!*(void *)(a1 + 216) && (v16 == 2 || *(_DWORD *)(a2 + 80) == 4))
  {
    double v17 = *(double *)(a1 + 144);
    if (v17 <= 1.0e-12)
    {
      double v17 = log10(v15 + 2.0) * 0.25;
    }
    else if (v17 >= v15)
    {
      double v17 = v15;
    }
    double v18 = 3.14159265 / acos(1.0 - v17 / v15);
    if (v15 * 3.14159265 >= v18) {
      double v19 = v18;
    }
    else {
      double v19 = v15 * 3.14159265;
    }
    __double2 v20 = __sincos_stret(6.28318531 / v19);
    *(__double2 *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v20;
    if (v5 < 0.0) {
      *(double *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = -v20.__sinval;
    }
    *(double *)(a1 + 32) = v19 / 6.28318531;
  }
  int64_t v21 = *(long long ***)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    double v22 = (void **)(a2 + 48);
    uint64_t v23 = (int)vcvtpd_s64_f64(v15);
    do
    {
      long long v24 = sub_1004E4214(*v21, v21[1]);
      long long v25 = (uint64_t *)*v21;
      if (v21[1] != v24) {
        v21[1] = v24;
      }
      if (v4 <= 1 && 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v25) >> 4) >= 2)
      {
        uint64_t v26 = *v25;
        long long v27 = v24 - 3;
        uint64_t v28 = (char *)(v24 - 3) - (char *)v25;
        do
        {
          if (*(void *)v27 != v26 || *((void *)v27 + 1) != v25[1]) {
            break;
          }
          v21[1] = v27;
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 4);
          v27 -= 3;
          v28 -= 48;
        }
        while (v30 > 1);
        long long v24 = v27 + 3;
      }
      if (v24 == (long long *)v25) {
        goto LABEL_81;
      }
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v25) >> 4);
      int v32 = *(_DWORD *)(a2 + 80);
      if (v31 <= 2 && v32 == 0) {
        goto LABEL_81;
      }
      *(void *)(a2 + 56) = *(void *)(a2 + 48);
      if (v31 == 2)
      {
        if (v32 == 1)
        {
          if (*(_DWORD *)(a2 + 76) == 2) {
            int v38 = 4;
          }
          else {
            int v38 = 3;
          }
          *(_DWORD *)(a1 + 132) = v38;
        }
      }
      else if (v31 == 1)
      {
        if (*(double *)(a1 + 16) >= 1.0)
        {
          if (*(_DWORD *)(a2 + 76) == 2)
          {
            sub_1004E3048(v25, vcvtpd_s64_f64((*(double *)(a1 + 32) + *(double *)(a1 + 32)) * 3.14159265), (uint64_t)&v57, v15, v15);
            unint64_t v34 = *v22;
            if (*v22)
            {
              *(void *)(a2 + 56) = v34;
              operator delete(v34);
              *double v22 = 0;
              *(void *)(a2 + 56) = 0;
              *(void *)(a2 + 64) = 0;
            }
            uint64_t v35 = v57;
            *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v57;
            uint64_t v36 = v58;
            *(_OWORD *)(a2 + 56) = v58;
            while (v35 != v36)
            {
              long long v37 = (*v21)[2];
              *(_OWORD *)(v35 + 16) = (*v21)[1];
              *(_OWORD *)(v35 + 32) = v37;
              v35 += 48;
            }
          }
          else
          {
            uint64_t v40 = v25[1];
            uint64_t v41 = *v25 + v23;
            *(void *)&long long v60 = *v25 - v23;
            *((void *)&v60 + 1) = v40 - v23;
            *(void *)&long long v61 = v41;
            *((void *)&v61 + 1) = v40 + v23;
            sub_1004E33F4((uint64_t *)&v60, (uint64_t)&v57);
            unint64_t v42 = *v22;
            if (*v22)
            {
              *(void *)(a2 + 56) = v42;
              operator delete(v42);
              *double v22 = 0;
              *(void *)(a2 + 56) = 0;
              *(void *)(a2 + 64) = 0;
            }
            uint64_t v43 = v57;
            *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v57;
            uint64_t v44 = v58;
            *(_OWORD *)(a2 + 56) = v58;
            while (v43 != v44)
            {
              long long v45 = (*v21)[2];
              *(_OWORD *)(v43 + 16) = (*v21)[1];
              *(_OWORD *)(v43 + 32) = v45;
              v43 += 48;
            }
          }
          unint64_t v46 = *(void *)(a2 + 32);
          uint64_t v47 = (uint64_t *)(a2 + 24);
          uint64_t v48 = a2 + 48;
          if (v46 >= *(void *)(a2 + 40))
          {
            uint64_t v49 = sub_100134994(v47, v48);
          }
          else
          {
            sub_100134934((uint64_t)v47, v48);
            uint64_t v49 = v46 + 24;
          }
          *(void *)(a2 + 32) = v49;
        }
        goto LABEL_81;
      }
      sub_1004E04B0((void *)a1, v21);
      int v39 = *(_DWORD *)(a1 + 132);
      if (v39 == 1)
      {
        sub_1004E23B4(a1, a2, (uint64_t *)v21);
      }
      else if (v39)
      {
        sub_1004E25F4(a1, (void *)a2, (uint64_t *)v21);
      }
      else
      {
        sub_1004E2194(a1, a2, (uint64_t *)v21);
      }
LABEL_81:
      v21 += 3;
    }
    while (v21 != *(long long ***)(a2 + 8));
  }
  uint64_t v50 = *(void *)(a1 + 80);
  uint64_t v51 = *(void *)(a1 + 88);
  unint64_t v52 = (uint64_t *)(a1 + 80);
  uint64_t v53 = *(void *)(a2 + 24);
  uint64_t v54 = *(void *)(a2 + 32);
  int64x2_t v55 = (uint64_t *)(a2 + 24);
  sub_100417F08(v52, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3) - 0x5555555555555555 * ((v54 - v53) >> 3));
  sub_1004E4290(*v55, v55[1], v52);
  sub_1001348DC(v55);
}

void sub_1004E3034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1004E3048(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  if (a4 <= 0.0)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    int v6 = a2;
    if (a5 <= 0.0) {
      double v9 = a4;
    }
    else {
      double v9 = a5;
    }
    if (a2 <= 2) {
      int v6 = (int)(sqrt((v9 + a4) * 0.5) * 3.14159265);
    }
    __double2 v10 = __sincos_stret(6.28318531 / (double)v6);
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_1003E44C8((void **)a3, v6);
    unint64_t v11 = llround((double)*a1 + a4);
    uint64_t v12 = (uint64_t)(double)a1[1];
    double v14 = (void *)(a3 + 16);
    unint64_t v13 = *(void *)(a3 + 16);
    double v15 = *(unint64_t **)(a3 + 8);
    if ((unint64_t)v15 >= v13)
    {
      double v17 = *(unint64_t **)a3;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *(void *)a3) >> 4);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0x555555555555555) {
        sub_100004E40();
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v17) >> 4);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v21 = 0x555555555555555;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        double v22 = (char *)sub_100134B88(a3 + 16, v21);
        double v17 = *(unint64_t **)a3;
        double v15 = *(unint64_t **)(a3 + 8);
      }
      else
      {
        double v22 = 0;
      }
      uint64_t v23 = &v22[48 * v18];
      *(void *)uint64_t v23 = v11;
      *((void *)v23 + 1) = v12;
      long long v24 = &v22[48 * v21];
      *((_OWORD *)v23 + 1) = xmmword_101178D58;
      *((_OWORD *)v23 + 2) = unk_101178D68;
      int v16 = (unint64_t *)(v23 + 48);
      if (v15 == v17)
      {
        long long v27 = v23;
      }
      else
      {
        do
        {
          long long v25 = *((_OWORD *)v15 - 3);
          long long v26 = *((_OWORD *)v15 - 1);
          long long v27 = v23 - 48;
          *((_OWORD *)v23 - 2) = *((_OWORD *)v15 - 2);
          *((_OWORD *)v23 - 1) = v26;
          *((_OWORD *)v23 - 3) = v25;
          v15 -= 6;
          v23 -= 48;
        }
        while (v15 != v17);
      }
      *(void *)a3 = v27;
      *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v16;
      *(void *)(a3 + 16) = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *double v15 = v11;
      v15[1] = v12;
      *((_OWORD *)v15 + 1) = xmmword_101178D58;
      *((_OWORD *)v15 + 2) = unk_101178D68;
      int v16 = v15 + 6;
    }
    *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v16;
    if (v6 >= 2)
    {
      int v28 = 1;
      double sinval = v10.__sinval;
      double cosval = v10.__cosval;
      do
      {
        unint64_t v31 = llround((double)*a1 + a4 * cosval);
        unint64_t v32 = llround((double)a1[1] + v9 * sinval);
        if ((unint64_t)v16 >= *v14)
        {
          uint64_t v33 = *(unint64_t **)a3;
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(void *)a3) >> 4);
          unint64_t v35 = v34 + 1;
          if (v34 + 1 > 0x555555555555555) {
            sub_100004E40();
          }
          if (0x5555555555555556 * ((uint64_t)(*v14 - (void)v33) >> 4) > v35) {
            unint64_t v35 = 0x5555555555555556 * ((uint64_t)(*v14 - (void)v33) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - (void)v33) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v36 = 0x555555555555555;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            long long v37 = (char *)sub_100134B88(a3 + 16, v36);
            uint64_t v33 = *(unint64_t **)a3;
            int v16 = *(unint64_t **)(a3 + 8);
          }
          else
          {
            long long v37 = 0;
          }
          int v38 = &v37[48 * v34];
          *(void *)int v38 = v31;
          *((void *)v38 + 1) = v32;
          *((_OWORD *)v38 + 1) = xmmword_101178D58;
          *((_OWORD *)v38 + 2) = unk_101178D68;
          if (v16 == v33)
          {
            unint64_t v42 = &v37[48 * v34];
          }
          else
          {
            int v39 = &v37[48 * v34];
            do
            {
              long long v40 = *((_OWORD *)v16 - 3);
              long long v41 = *((_OWORD *)v16 - 1);
              unint64_t v42 = v39 - 48;
              *((_OWORD *)v39 - 2) = *((_OWORD *)v16 - 2);
              *((_OWORD *)v39 - 1) = v41;
              *((_OWORD *)v39 - 3) = v40;
              v16 -= 6;
              v39 -= 48;
            }
            while (v16 != v33);
          }
          int v16 = (unint64_t *)(v38 + 48);
          *(void *)a3 = v42;
          *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v38 + 48;
          *(void *)(a3 + 16) = &v37[48 * v36];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *int v16 = v31;
          v16[1] = v32;
          *((_OWORD *)v16 + 1) = xmmword_101178D58;
          *((_OWORD *)v16 + 2) = unk_101178D68;
          v16 += 6;
        }
        *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v16;
        double v43 = v10.__sinval * cosval;
        double cosval = cosval * v10.__cosval - sinval * v10.__sinval;
        double sinval = v43 + sinval * v10.__cosval;
        ++v28;
      }
      while (v28 != v6);
    }
  }
}

void sub_1004E33CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x250], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E33F4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1003E44C8((void **)a2, 4uLL);
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  double v7 = (char **)(a2 + 16);
  int v6 = *(char **)(a2 + 16);
  unint64_t v8 = *(char **)(a2 + 8);
  if (v8 >= v6)
  {
    __double2 v10 = *(unsigned char **)a2;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(void *)a2] >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      double v15 = (char *)sub_100134B88(a2 + 16, v14);
      __double2 v10 = *(unsigned char **)a2;
      unint64_t v8 = *(char **)(a2 + 8);
    }
    else
    {
      double v15 = 0;
    }
    int v16 = &v15[48 * v11];
    *(void *)int v16 = v5;
    *((void *)v16 + 1) = v4;
    int v6 = &v15[48 * v14];
    *((_OWORD *)v16 + 1) = xmmword_101178D58;
    *((_OWORD *)v16 + 2) = unk_101178D68;
    double v9 = v16 + 48;
    if (v8 == v10)
    {
      unint64_t v19 = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v8 - 3);
        long long v18 = *((_OWORD *)v8 - 1);
        unint64_t v19 = v16 - 48;
        *((_OWORD *)v16 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v16 - 1) = v18;
        *((_OWORD *)v16 - 3) = v17;
        v8 -= 48;
        v16 -= 48;
      }
      while (v8 != v10);
    }
    *(void *)a2 = v19;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v9;
    *(void *)(a2 + 16) = v6;
    if (v10)
    {
      operator delete(v10);
      int v6 = *v7;
    }
  }
  else
  {
    *(void *)unint64_t v8 = v5;
    *((void *)v8 + 1) = v4;
    *((_OWORD *)v8 + 1) = xmmword_101178D58;
    *((_OWORD *)v8 + 2) = unk_101178D68;
    double v9 = v8 + 48;
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v9;
  uint64_t v20 = a1[1];
  uint64_t v21 = a1[2];
  if (v9 >= v6)
  {
    uint64_t v23 = *(unsigned char **)a2;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v9[-*(void *)a2] >> 4);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v23) >> 4);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v27 = 0x555555555555555;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      int v28 = (char *)sub_100134B88(a2 + 16, v27);
      uint64_t v23 = *(unsigned char **)a2;
      double v9 = *(char **)(a2 + 8);
    }
    else
    {
      int v28 = 0;
    }
    unint64_t v29 = &v28[48 * v24];
    *(void *)unint64_t v29 = v21;
    *((void *)v29 + 1) = v20;
    int v6 = &v28[48 * v27];
    *((_OWORD *)v29 + 1) = xmmword_101178D58;
    *((_OWORD *)v29 + 2) = unk_101178D68;
    double v22 = v29 + 48;
    if (v9 == v23)
    {
      unint64_t v32 = v29;
    }
    else
    {
      do
      {
        long long v30 = *((_OWORD *)v9 - 3);
        long long v31 = *((_OWORD *)v9 - 1);
        unint64_t v32 = v29 - 48;
        *((_OWORD *)v29 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v29 - 1) = v31;
        *((_OWORD *)v29 - 3) = v30;
        v9 -= 48;
        v29 -= 48;
      }
      while (v9 != v23);
    }
    *(void *)a2 = v32;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v22;
    *(void *)(a2 + 16) = v6;
    if (v23)
    {
      operator delete(v23);
      int v6 = *v7;
    }
  }
  else
  {
    *(void *)double v9 = v21;
    *((void *)v9 + 1) = v20;
    *((_OWORD *)v9 + 1) = xmmword_101178D58;
    *((_OWORD *)v9 + 2) = unk_101178D68;
    double v22 = v9 + 48;
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v22;
  uint64_t v34 = a1[2];
  uint64_t v33 = a1[3];
  if (v22 >= v6)
  {
    unint64_t v36 = *(unsigned char **)a2;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v22[-*(void *)a2] >> 4);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v36) >> 4);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v40 = 0x555555555555555;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      long long v41 = (char *)sub_100134B88(a2 + 16, v40);
      unint64_t v36 = *(unsigned char **)a2;
      double v22 = *(char **)(a2 + 8);
    }
    else
    {
      long long v41 = 0;
    }
    unint64_t v42 = &v41[48 * v37];
    *(void *)unint64_t v42 = v34;
    *((void *)v42 + 1) = v33;
    int v6 = &v41[48 * v40];
    *((_OWORD *)v42 + 1) = xmmword_101178D58;
    *((_OWORD *)v42 + 2) = unk_101178D68;
    unint64_t v35 = v42 + 48;
    if (v22 == v36)
    {
      long long v45 = v42;
    }
    else
    {
      do
      {
        long long v43 = *((_OWORD *)v22 - 3);
        long long v44 = *((_OWORD *)v22 - 1);
        long long v45 = v42 - 48;
        *((_OWORD *)v42 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v42 - 1) = v44;
        *((_OWORD *)v42 - 3) = v43;
        v22 -= 48;
        v42 -= 48;
      }
      while (v22 != v36);
    }
    *(void *)a2 = v45;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v35;
    *(void *)(a2 + 16) = v6;
    if (v36)
    {
      operator delete(v36);
      int v6 = *v7;
    }
  }
  else
  {
    *(void *)double v22 = v34;
    *((void *)v22 + 1) = v33;
    *((_OWORD *)v22 + 1) = xmmword_101178D58;
    *((_OWORD *)v22 + 2) = unk_101178D68;
    unint64_t v35 = v22 + 48;
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v35;
  uint64_t v46 = *a1;
  uint64_t v47 = a1[3];
  if (v35 >= v6)
  {
    uint64_t v49 = *(unsigned char **)a2;
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v35[-*(void *)a2] >> 4);
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0x555555555555555) {
      sub_100004E40();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v49) >> 4);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v53 = 0x555555555555555;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      uint64_t v54 = (char *)sub_100134B88(a2 + 16, v53);
      uint64_t v49 = *(unsigned char **)a2;
      unint64_t v35 = *(char **)(a2 + 8);
    }
    else
    {
      uint64_t v54 = 0;
    }
    int64x2_t v55 = &v54[48 * v50];
    *(void *)int64x2_t v55 = v46;
    *((void *)v55 + 1) = v47;
    long long v56 = &v54[48 * v53];
    *((_OWORD *)v55 + 1) = xmmword_101178D58;
    *((_OWORD *)v55 + 2) = unk_101178D68;
    uint64_t v48 = v55 + 48;
    if (v35 == v49)
    {
      unsigned int v59 = v55;
    }
    else
    {
      do
      {
        long long v57 = *((_OWORD *)v35 - 3);
        long long v58 = *((_OWORD *)v35 - 1);
        unsigned int v59 = v55 - 48;
        *((_OWORD *)v55 - 2) = *((_OWORD *)v35 - 2);
        *((_OWORD *)v55 - 1) = v58;
        *((_OWORD *)v55 - 3) = v57;
        v35 -= 48;
        v55 -= 48;
      }
      while (v35 != v49);
    }
    *(void *)a2 = v59;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v48;
    *(void *)(a2 + 16) = v56;
    if (v49) {
      operator delete(v49);
    }
  }
  else
  {
    *(void *)unint64_t v35 = v46;
    *((void *)v35 + 1) = v47;
    *((_OWORD *)v35 + 1) = xmmword_101178D58;
    *((_OWORD *)v35 + 2) = unk_101178D68;
    uint64_t v48 = v35 + 48;
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v48;
}

void sub_1004E3888(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x250], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E38B4(uint64_t a1, double a2)
{
  *(_DWORD *)a1 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 80);
  sub_1001348DC((uint64_t *)(a1 + 80));
  uint64_t v5 = *(uint64_t **)(a1 + 104);
  int v6 = *(uint64_t **)(a1 + 112);
  if (v6 != v5)
  {
    if (fabs(a2) >= 0.5)
    {
      double v9 = *(double *)(a1 + 136);
      double v10 = 2.0;
      if (v9 > 1.0) {
        double v10 = 2.0 / (v9 * v9);
      }
      *(double *)(a1 + 24) = v10;
      *(double *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = a2;
      do
      {
        sub_1004E2A8C(a1, (uint64_t)v5);
        if (*(_DWORD *)a1) {
          sub_1001348DC(v4);
        }
        v5 += 11;
      }
      while (v5 != *(uint64_t **)(a1 + 112));
    }
    else
    {
      do
      {
        sub_100417F08(v4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3)- 0x5555555555555555 * ((v5[1] - *v5) >> 3));
        uint64_t v7 = *v5;
        uint64_t v8 = v5[1];
        v5 += 11;
        sub_1004E4290(v7, v8, v4);
      }
      while (v5 != v6);
    }
  }
}

void sub_1004E39B8(uint64_t a1, uint64_t *a2, char a3, double a4)
{
  sub_1001348DC(a2);
  sub_1004E38B4(a1, a4);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  if (v9 != v8)
  {
    if ((uint64_t *)(a1 + 80) != a2) {
      sub_100360B90((uint64_t)a2, v8, v9, 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3));
    }
    if (a4 < 0.0 || (a3 & 1) == 0)
    {
      v12[1] = 0;
      int v13 = 2;
      uint64_t v14 = 0;
      __int16 v15 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v24 = 0u;
      memset(v25, 0, 29);
      long long v22 = 0u;
      long long v23 = 0u;
      v25[29] = 1;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      v29[3] = 0;
      uint64_t v32 = 0;
      v12[0] = &off_1014F0DA8;
      char v30 = 0;
      BOOL v31 = *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(*(void *)(a1 + 104) + 72);
      if (*(void *)(a1 + 184))
      {
        sub_10035C884((uint64_t)v11, a1 + 160);
        sub_10035C810(v29, (uint64_t)v11);
        sub_10036371C(v11);
      }
      sub_1004122C4((uint64_t)v12, (uint64_t **)(a1 + 80), 0, 0);
      if (*(unsigned char *)(*(void *)(a1 + 104) + 72)) {
        int v10 = 3;
      }
      else {
        int v10 = 2;
      }
      sub_10035654C((uint64_t)v12, 2, v10, a2);
      sub_100411F00((uint64_t)v12);
    }
  }
}

void sub_1004E3B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1004E3BA8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_101500A20;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

void *sub_1004E3C08(void *a1, char *a2)
{
  *a1 = off_101500A20;
  sub_1004E3CF0(a1 + 1, a2);
  return a1;
}

void sub_1004E3C4C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1004E3C60(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_101500A20;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  operator delete();
}

uint64_t sub_1004E3CD4(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *sub_1004E3CF0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1004E3DA4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_1004E3DA4()
{
}

uint64_t sub_1004E3DBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_100004E40();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_100004EE8((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v10 = v7;
  unint64_t v11 = &v7[88 * v3];
  int v13 = &v7[88 * v6];
  sub_1004E3EE0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 88;
  sub_1004E3F54(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1004E4110(&v10);
  return v8;
}

void sub_1004E3ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1004E4110((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1004E3EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = *(__n128 *)(a3 + 48);
  *(__n128 *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = result;
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  uint64_t v4 = *(void *)(a3 + 72);
  *(_DWORD *)(a2 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(_DWORD *)(a3 + 80);
  *(void *)(a2 + 72) = v4;
  return result;
}

uint64_t sub_1004E3F54(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1004E3FCC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004E3FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 88;
      sub_1004E3EE0(a1, v7 - 88, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1004E4084((uint64_t)v13);
  return v11;
}

uint64_t sub_1004E4084(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1004E40BC((uint64_t *)a1);
  }
  return a1;
}

void sub_1004E40BC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100360E24(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_1004E4110(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1004E4144(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    sub_100360E24(v4, i - 88);
  }
}

void sub_1004E418C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_101500A60;
}

void sub_1004E41DC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

long long *sub_1004E4214(long long *a1, long long *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 - 3;
    do
    {
      if (v4 + 6 == a2) {
        return a2;
      }
      uint64_t v5 = *((void *)v4 + 6);
      uint64_t v6 = *((void *)v4 + 7);
      v4 += 3;
    }
    while (v5 != *((void *)v4 + 6) || v6 != *((void *)v4 + 7));
    for (uint64_t i = v4 + 6; i != a2; i += 3)
    {
      if (*(void *)v4 != *(void *)i || *((void *)v4 + 1) != *((void *)i + 1))
      {
        long long v10 = *i;
        long long v11 = i[2];
        void v4[4] = i[1];
        void v4[5] = v11;
        v4[3] = v10;
        v4 += 3;
      }
    }
    return v4 + 3;
  }
  return result;
}

uint64_t sub_1004E4290(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_1004E42F4(&v6, v3);
    v3 += 24;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **sub_1004E42F4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_100134994(v6, a2);
  }
  else
  {
    sub_100134934((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void sub_1004E507C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E50C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E5840(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E5884(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E6118(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004E61F4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

unsigned char *sub_1004E67BC(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[296]) {
    return [result p_showHUDAndGuides];
  }
  return result;
}

unint64_t sub_1004E6DAC(CKRecordID a1, Swift::String a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  unint64_t v10 = ((unint64_t)a1.super.isa - 1) / 3;
  unint64_t v11 = ((unint64_t)a1.super.isa - 1) % 3;
  switch(v11)
  {
    case 2uLL:
      CGRectGetMinX(*(CGRect *)&a3);
      break;
    case 1uLL:
      CGRectGetMidX(*(CGRect *)&a3);
      break;
    case 0uLL:
      CGRectGetMaxX(*(CGRect *)&a3);
      break;
  }
  switch(v10)
  {
    case 2uLL:
      v15.origin.CGFloat x = a3;
      v15.origin.CGFloat y = a4;
      v15.size.CGFloat width = a5;
      v15.size.CGFloat height = a6;
      CGRectGetMinY(v15);
      break;
    case 1uLL:
      v16.origin.CGFloat x = a3;
      v16.origin.CGFloat y = a4;
      v16.size.CGFloat width = a5;
      v16.size.CGFloat height = a6;
      CGRectGetMidY(v16);
      break;
    case 0uLL:
      v14.origin.CGFloat x = a3;
      v14.origin.CGFloat y = a4;
      v14.size.CGFloat width = a5;
      v14.size.CGFloat height = a6;
      CGRectGetMaxY(v14);
      break;
  }

  return (unint64_t)SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(a1, a2);
}

void sub_1004E75B4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E75F8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E763C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E7680(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E76C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004E7708(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

void sub_1004EAF8C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

uint64_t sub_1004EAFD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  return result;
}

void sub_1004EAFE0(uint64_t a1)
{
}

void sub_1004EAFE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  if (*(unsigned char *)(v8 + 24))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_101500C40);
    }
    uint64_t v9 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010BE5CC(v9);
    }
    goto LABEL_40;
  }
  *(unsigned char *)(v8 + 24) = 1;
  if (objc_msgSend(v6, "crl_isCancelError"))
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_101500C60);
    }
    unint64_t v10 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Cancelled loading file representation", buf, 2u);
    }
    goto LABEL_34;
  }
  if (!v5)
  {
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_101500CE0);
    }
    unint64_t v29 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010BE45C(v29, v7);
    }
    goto LABEL_34;
  }
  unint64_t v11 = [*(id *)(a1 + 32) URL];
  unint64_t v12 = +[NSUUID UUID];
  int v13 = [v12 UUIDString];
  CGRect v14 = [v11 URLByAppendingPathComponent:v13 isDirectory:1];

  CGRect v15 = [*(id *)(a1 + 96) crl_safeLastPathComponentForItemURL:v5 registeredTypeIdentifier:*(void *)(a1 + 40)];
  CGRect v16 = [v14 URLByAppendingPathComponent:v15];
  long long v17 = *(void **)(a1 + 48);
  id v39 = 0;
  LODWORD(v13) = [v17 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:&v39];
  id v18 = v39;
  long long v19 = v18;
  if (!v13)
  {
    id v22 = v18;
    goto LABEL_29;
  }
  long long v20 = *(void **)(a1 + 48);
  id v38 = v19;
  unsigned int v21 = [v20 copyItemAtURL:v5 toURL:v16 error:&v38];
  id v22 = v38;

  if (!v21)
  {
LABEL_29:
    if (qword_101719A68 != -1) {
      dispatch_once(&qword_101719A68, &stru_101500CC0);
    }
    char v30 = off_10166B498;
    if (os_log_type_enabled((os_log_t)off_10166B498, OS_LOG_TYPE_ERROR)) {
      sub_1010BE514(v30, v22);
    }
    goto LABEL_33;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 80) + 8) + 32));
  [*(id *)(a1 + 56) addObject:v16];
  long long v23 = *(void **)(a1 + 48);
  long long v24 = [v16 path];
  id v37 = 0;
  unint64_t v36 = [v23 attributesOfItemAtPath:v24 error:&v37];
  id v25 = v37;

  unint64_t v35 = v25;
  if (!v25)
  {
    signed int v26 = [v36 fileSize];
    if (qword_101719BE0 != -1) {
      dispatch_once(&qword_101719BE0, &stru_101500C80);
    }
    log = off_10166B610;
    if (os_log_type_enabled((os_log_t)off_10166B610, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v41) = v26 / 1024;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Photo Picker filesize %d kb", buf, 8u);
    }
  }
  uint64_t v27 = [v16 pathExtension];
  if (qword_101719BE0 != -1) {
    dispatch_once(&qword_101719BE0, &stru_101500CA0);
  }
  uint64_t v28 = off_10166B610;
  if (os_log_type_enabled((os_log_t)off_10166B610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    long long v41 = v27;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Photo Picker file format %@", buf, 0xCu);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 80) + 8) + 32));

LABEL_33:
LABEL_34:
  if (v7 && (objc_msgSend(v7, "crl_isCancelError") & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 80) + 8) + 32));
    uint64_t v31 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v33 = *(void *)(v31 + 40);
    uint64_t v32 = (id *)(v31 + 40);
    if (!v33) {
      objc_storeStrong(v32, a3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 80) + 8) + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
LABEL_40:
}

void sub_1004EB504(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004EB548(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004EB58C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLInsertMediaCat");
  uint64_t v2 = off_10166B610;
  off_10166B610 = v1;
}

void sub_1004EB5D0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLInsertMediaCat");
  uint64_t v2 = off_10166B610;
  off_10166B610 = v1;
}

void sub_1004EB614(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004EB658(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLDefaultCat");
  uint64_t v2 = off_10166B498;
  off_10166B498 = v1;
}

void sub_1004EB69C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = [*(id *)(a1 + 40) copy];
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) copy];
    (*(void (**)(uint64_t, uint64_t, id, id))(v1 + 16))(v1, v3, v5, v4);
  }
}

void sub_1004EBC10(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EBC54(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EBC98(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EBCDC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EBD20(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EBD64(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EC2C4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EC308(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EC954(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EC998(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED69C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED6E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED724(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = v5;
LABEL_5:
    [v8 addObject:v9];
    goto LABEL_6;
  }
  if (v6)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    id v9 = v7;
    goto LABEL_5;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_101500ED0);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010BE9BC();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_101500EF0);
  }
  unint64_t v10 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_10106590C(v10);
  }
  unint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLPasteboardItemSource loadImportedImagesForAssetOwner:compatibilityAlertPresenter:withHandler:]_block_invoke");
  unint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPasteboardItemSource.m"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 245, 0, "invalid nil value for '%{public}s'", "imageFillError");

LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1004ED8C8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED90C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED950(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004ED994(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004ED9D8(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1004EDB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EDB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EDC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004EDEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  sub_100189C94(&a9);
  _Unwind_Resume(a1);
}

void sub_1004EDF80(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EDFC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EE298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EE2E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EE32C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EE530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)CRLWPStorageSpellChecker;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_1004EE598(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EE5DC(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EEF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1004EF0C0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EF104(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004EF148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 32) p_extendRangeToBeChecked:a2 delta:a3];
  id v6 = *(void **)(a1 + 40);

  return [v6 addRange:v5, v4];
}

id sub_1004EF198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [*(id *)(a1 + 32) i_addSpellingAndGrammarMarksInRange:a2 spellingResults:a3 grammarResults:*(void *)(a1 + 40) sync:*(void *)(a1 + 48)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_1004EF1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 32) p_extendRangeToBeChecked:a2 delta:a3];
  id v6 = *(void **)(a1 + 40);

  return [v6 addRange:v5, v4];
}

id sub_1004EF22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) i_addSpellingAndGrammarMarksInRange:a2 spellingResults:a3 grammarResults:*(void *)(a1 + 40) sync:*(void *)(a1 + 48)];
}

void sub_1004EF248(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EF28C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EF3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004EF3D8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) isEqual:*(void *)(a1 + 40)] ^ 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 48));
  [*(id *)(*(void *)(a1 + 32) + 40) clear];
  return v2;
}

void sub_1004EF60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF634(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EF678(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EF758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EFC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EFCC4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004EFD08(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F0044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F00A4(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F00E8(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F0780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F0858(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F089C(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F08E0(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F0924(id a1)
{
  uint64_t v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F0968(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CF80];
  uint64_t v2 = (void *)qword_1016A9DB0;
  qword_1016A9DB0 = (uint64_t)v1;

  id v3 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CF98];
  uint64_t v4 = (void *)qword_1016A9DB8;
  qword_1016A9DB8 = (uint64_t)v3;

  id v5 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CFB0];
  id v6 = (void *)qword_1016A9DC0;
  qword_1016A9DC0 = (uint64_t)v5;

  id v7 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CFC8];
  uint64_t v8 = (void *)qword_1016A9DC8;
  qword_1016A9DC8 = (uint64_t)v7;

  id v9 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CFE0];
  unint64_t v10 = (void *)qword_1016A9DD0;
  qword_1016A9DD0 = (uint64_t)v9;

  id v11 = [objc_alloc((Class)NSSet) initWithArray:&off_10155CFF8];
  unint64_t v12 = (void *)qword_1016A9DD8;
  qword_1016A9DD8 = (uint64_t)v11;

  id v13 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D010];
  CGRect v14 = (void *)qword_1016A9DE0;
  qword_1016A9DE0 = (uint64_t)v13;

  id v15 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D028];
  CGRect v16 = (void *)qword_1016A9DE8;
  qword_1016A9DE8 = (uint64_t)v15;

  id v17 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D040];
  id v18 = (void *)qword_1016A9DF0;
  qword_1016A9DF0 = (uint64_t)v17;

  id v19 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D058];
  long long v20 = (void *)qword_1016A9DF8;
  qword_1016A9DF8 = (uint64_t)v19;
}

void sub_1004F0AFC(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D070];
  uint64_t v2 = (void *)qword_1016A9E08;
  qword_1016A9E08 = (uint64_t)v1;
}

void sub_1004F0B44(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_10155D088];
  uint64_t v2 = (void *)qword_1016A9E18;
  qword_1016A9E18 = (uint64_t)v1;
}

void sub_1004F11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1004F12E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F132C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F1434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004F1D8C(uint64_t a1)
{
  [*(id *)(a1 + 32) naturalBounds];
  double v3 = v2;
  double v5 = v4;
  id v6 = [*(id *)(a1 + 32) canvas];
  [v6 convertUnscaledToBoundsSize:v3, v5];
  double v8 = v7;
  double v10 = v9;

  [*(id *)(a1 + 32) p_playButtonAndMinPaddingHeight:*(unsigned __int8 *)(a1 + 80)];
  double v12 = v11;
  double v13 = *(double *)(a1 + 40);
  double v14 = *(double *)(a1 + 48);
  double v15 = v10 - v11;
  CGRect v16 = [*(id *)(a1 + 32) canvas];
  [v16 convertBoundsToUnscaledRect:v13, v14, v8, v15];
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  double v24 = v23;

  [*(id *)(a1 + 32) ifFitsDrawTitleWithContext:*(void *)(a1 + 72) rect:v18, v20, v22, v24];
  double v26 = v25;
  uint64_t v27 = [*(id *)(a1 + 32) canvas];
  [v27 convertUnscaledToBoundsLength:v26];
  double v29 = v28;

  if (v26 > 0.0)
  {
    double v30 = v10 - (v12 + v29);
    double v31 = *(double *)(a1 + 40);
    double v32 = *(double *)(a1 + 48);
    uint64_t v33 = [*(id *)(a1 + 32) canvas];
    [v33 convertBoundsToUnscaledRect:v31, v32, v8, v30];
    double v35 = v34;
    double v37 = v36;
    double v39 = v38;
    double v41 = v40;

    [*(id *)(a1 + 32) ifFitsDrawCreatorWithContext:*(void *)(a1 + 72) rect:v35 topPadding:v37];
    double v43 = v42;
    long long v44 = [*(id *)(a1 + 32) canvas];
    [v44 convertUnscaledToBoundsLength:v43];
    double v29 = v45;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    uint64_t v46 = +[CRLImage imageWithSystemImageNamed:@"waveform.path" pointSize:48.0];
    uint64_t v47 = [*(id *)(a1 + 32) canvas];
    [v47 convertBoundsToUnscaledLength:v29];
    double v49 = v48;

    CGFloat v50 = *(double *)(a1 + 40);
    CGFloat v51 = *(double *)(a1 + 48);
    double v52 = *(double *)(a1 + 56);
    double v53 = *(double *)(a1 + 64) - v49;
    [v46 size];
    double v55 = v54;
    double v57 = v56;
    [*(id *)(a1 + 32) p_playButtonSize];
    if (v53 >= v58) {
      double v59 = v58;
    }
    else {
      double v59 = v53;
    }
    double v60 = sub_10006729C(0, v55, v57, v52, v59 + -2.0);
    double v62 = v61;
    double v63 = sub_100065738(v50, v51, v52, v53);
    double v65 = sub_10006402C(v63, v64, v60);
    CGFloat v67 = v66;
    CGFloat v69 = v68;
    CGFloat v71 = v70;
    int64x2_t v72 = +[CRLMovieRep CRLMovieButtonFillColor];
    id v75 = [v46 compositedImageWithColor:v72 alpha:23 blendMode:1.0];

    CGContextTranslateCTM(*(CGContextRef *)(a1 + 72), 0.0, *(CGFloat *)(a1 + 64));
    CGContextScaleCTM(*(CGContextRef *)(a1 + 72), 1.0, -1.0);
    int64x2_t v73 = *(CGContext **)(a1 + 72);
    int64x2_t v74 = (CGImage *)objc_msgSend(v75, "CGImageForSize:inContext:orContentsScaleProvider:", v73, 0, v60, v62);
    v77.origin.CGFloat x = v65;
    v77.origin.CGFloat y = v67;
    v77.size.CGFloat width = v69;
    v77.size.CGFloat height = v71;
    CGContextDrawImage(v73, v77, v74);
    CGContextScaleCTM(*(CGContextRef *)(a1 + 72), 1.0, -1.0);
    CGContextTranslateCTM(*(CGContextRef *)(a1 + 72), 0.0, -*(double *)(a1 + 64));
  }
}

id sub_1004F2374(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_teardownPlayerController];
}

void sub_1004F237C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F23C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  double v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_1004F2A88(uint64_t a1)
{
  return [*(id *)(a1 + 32) p_teardownPlayerController];
}

void sub_1004F3754(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1004F37CC;
  block[3] = &unk_1014CBBB0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1004F37CC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasBeenRemoved] & 1) == 0)
  {
    if ([*(id *)(a1 + 32) isSelected]
      && objc_msgSend(*(id *)(a1 + 32), "p_shouldPlayerControllerExistThroughoutSelection"))
    {
      [*(id *)(a1 + 32) p_setUpPlayerControllerIfNecessary];
    }
    id v2 = [*(id *)(a1 + 32) interactiveCanvasController];
    [v2 invalidateContentLayersForRep:*(void *)(a1 + 32)];
  }
}

void sub_1004F385C(uint64_t a1)
{
  Main = CFRunLoopGetMain();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  void block[2] = sub_1004F3924;
  block[3] = &unk_1014D3990;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = *(void **)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = v5;
  CFRunLoopPerformBlock(Main, kCFRunLoopCommonModes, block);
  CFRunLoopWakeUp(Main);
}

uint64_t sub_1004F3924(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) statusOfValueForKey:@"playable" error:0];
  if (v2 != (id)4)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 1;
    if (v2 == (id)2) {
      unsigned __int8 v3 = [*(id *)(a1 + 32) isPlayable];
    }
    else {
      unsigned __int8 v3 = 0;
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 241) = v3;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = *(void **)(v4 + 248);
  if (v5 == *(void **)(a1 + 32))
  {
    *(void *)(v4 + 24_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v6();
}

void sub_1004F4D0C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4D50(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4D94(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4DD8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4E1C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4E60(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4EA4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4EE8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F4F2C(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1004F4F70(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1004F52F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F5338(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F537C(id a1)
{
  id v1 = sub_100401ECC("CRLMoviePlaybackCat");
  id v2 = off_10166D878;
  off_10166D878 = v1;
}

void sub_1004F5504(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) interactiveCanvasController];
  [v2 presentError:*(void *)(a1 + 40) completionHandler:0];
}

void sub_1004F587C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F58C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F5904(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 needsDownload])
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, v4);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    uint64_t v8 = sub_1004F5A4C;
    id v9 = &unk_1014D3C20;
    objc_copyWeak(&v10, &location);
    objc_copyWeak(&v11, &from);
    [v4 addDownloadObserverWithIdentifier:v5 options:2 handler:&v6];
    [v4 downloadIfNeeded:v6, v7, v8, v9];
    [*(id *)(a1 + 32) p_updateDownloadSpinnerState];
    objc_destroyWeak(&v11);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }
}

void sub_1004F5A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1004F5A4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained p_handleAssetPreparationCompletionForAsset:v2];
}

BOOL sub_1004F6C64(id a1, CRLCanvasElementInfo *a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = sub_1002469D0(v4, v3);

  return v5 != 0;
}

void sub_1004F75CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F7610(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004F8170(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F81B4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F81F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F823C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8280(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F82C4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8308(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F834C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8390(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F83D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained p_timebaseTimeDidChangeToStartOrEndTime];
}

void sub_1004F8458(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F849C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F87CC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8810(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8854(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8898(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8B58(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8B9C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8EC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F8F08(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F9614(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F9658(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

uint64_t sub_1004F969C(uint64_t a1)
{
  [*(id *)(a1 + 32) p_setAbsoluteCurrentTime:*(double *)(a1 + 48)];
  [*(id *)(a1 + 32) p_updateLayers];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1004F98F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004F9938(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FA218(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FA25C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FA9F8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAA3C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAA80(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAAC4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FADDC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAE20(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAE64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FAEA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB3F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB438(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB47C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB4C0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB504(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB548(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004FB840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB884(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FB8C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained p_displayLinkDidTrigger];
}

void sub_1004FBA7C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FBAC0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FBC5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FBCA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FBEFC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FBF40(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FC06C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x28u);
}

void sub_1004FC348(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FC38C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FC6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC6CC(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a2 == 4)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1004FC860(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FC8A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FCA5C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FCAA0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FCC6C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FCCB0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FD7FC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FD840(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FD884(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FD8C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

BOOL sub_1004FD90C(id a1, CRLCanvasElementInfo *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1004FE714(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FE758(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FEECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v33 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v22;
    *(void *)&long long v6 = 67109378;
    long long v20 = v6;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8 * (void)v9);
        id v11 = [v3 layoutForInfo:v10, v20];
        double v12 = v11;
        if (v11)
        {
          double v13 = [v11 geometry];
          [v13 frame];
          double v14 = +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:");
          [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:v10];
        }
        else
        {
          unsigned int v15 = +[CRLAssertionHandler _atomicIncrementAssertCount];
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_101501E50);
          }
          CGRect v16 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            unsigned int v26 = v15;
            __int16 v27 = 2082;
            double v28 = "-[CRLDrawableZOrderArranger p_zOrderSiblingsForRelativeOrder]_block_invoke";
            __int16 v29 = 2082;
            double v30 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLDrawableZOrderArranger.m";
            __int16 v31 = 1024;
            int v32 = 477;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should always be able to get a layout with temporaryLayoutControllerForInfos.", buf, 0x22u);
          }
          if (qword_101719A70 != -1) {
            dispatch_once(&qword_101719A70, &stru_101501E70);
          }
          double v17 = off_10166B4A0;
          if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
          {
            double v18 = v17;
            double v19 = +[CRLAssertionHandler packedBacktraceString];
            *(_DWORD *)buf = v20;
            unsigned int v26 = v15;
            __int16 v27 = 2114;
            double v28 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
          }
          double v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLDrawableZOrderArranger p_zOrderSiblingsForRelativeOrder]_block_invoke");
          double v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLDrawableZOrderArranger.m"];
          +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:477 isFatal:0 description:"Should always be able to get a layout with temporaryLayoutControllerForInfos."];
        }

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v21 objects:v33 count:16];
    }
    while (v7);
  }
}

void sub_1004FF210(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF254(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF298(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF2DC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF52C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF570(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF7EC(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FF830(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FFC64(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1004FFCA8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10050039C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005003E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005005F4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100500638(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  id v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

id sub_100501DD0(uint64_t a1)
{
  char v9 = 0;
  id v2 = *(id *)(a1 + 32);
  id v3 = objc_opt_class();
  uint64_t v4 = __CRLAccessibilityCastAsSafeCategory(v3, (uint64_t)v2, 1, &v9);
  if (v9) {
    abort();
  }
  id v5 = (void *)v4;

  if (v5)
  {
    long long v6 = [*(id *)(a1 + 40) crlaxInteractiveCanvasController];
    id v7 = [v6 crlaxScrollLayoutToVisibleAndFocusTheAssociatedRep:v5];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_100501F38(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id v8 = a2;
  *(_OWORD *)(a1 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0u;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  objc_storeStrong((id *)a1, a2);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = a3;
  id v9 = [v8 length];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v9;
  sub_100502030(a1);
  uint64_t v10 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 74) = a4;

  return a1;
}

void sub_100501FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100503DBC((void ***)va);
  sub_100503D38((void ***)va);

  id v5 = *(void **)(v3 + 32);
  if (v5)
  {
    *(void *)(v3 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_100502030(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(a1 + 32);
  sub_1005038C0(a1 + 32, v2);
  if (v2)
  {
    [*(id *)a1 getCharacters:*(void *)(a1 + 32) range:0 v2];
    unint64_t v4 = v2 - 1;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v4 >= (*(void *)(a1 + 40) - v5) >> 1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *(unsigned __int16 *)(v5 + 2 * v4);
    }
    if (sub_1001CA284(v6)) {
      __int16 v7 = v6;
    }
    else {
      __int16 v7 = 0;
    }
    *(_WORD *)(a1 + 72) = v7;
    if ([*(id *)a1 hasColumnBreakAtCharIndex:v4]) {
      *(_WORD *)(*v3 + 2 * v4) = 8233;
    }
  }
  else
  {
    *(_WORD *)(a1 + 72) = 0;
  }
}

uint64_t sub_1005020E0(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v5 = (void **)(a1 + 104);
  sub_100503DBC(&v5);
  uint64_t v5 = (void **)(a1 + 80);
  sub_100503D38(&v5);

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100502164(void *a1)
{
  if (!a1[7]) {
    goto LABEL_11;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount];
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_101502038);
  }
  if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
    sub_1010C0A00();
  }
  if (qword_101719A70 != -1) {
    dispatch_once(&qword_101719A70, &stru_101502058);
  }
  unint64_t v2 = off_10166B4A0;
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
  {
    +[CRLAssertionHandler packedBacktraceString];
    objc_claimAutoreleasedReturnValue();
    sub_1010663B0();
  }

  uint64_t v3 = +[NSString stringWithUTF8String:"void CRLWPParagraphTypesetter::createAttributedString()"];
  unint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm"];
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 78, 0, "expected nil value for '%{public}s'", "_attributedString");

  if (!a1[7])
  {
LABEL_11:
    uint64_t v5 = (const UniChar *)a1[4];
    uint64_t v6 = a1[5] - (void)v5;
    if (v6 < 1)
    {
      id v10 = objc_alloc_init((Class)NSMutableAttributedString);
      id v11 = (void *)a1[7];
      a1[7] = v10;
    }
    else
    {
      CFStringRef v7 = CFStringCreateWithCharactersNoCopy(kCFAllocatorDefault, v5, (unint64_t)v6 >> 1, kCFAllocatorNull);
      id v8 = [objc_alloc((Class)NSMutableAttributedString) initWithString:v7];
      id v9 = (void *)a1[7];
      a1[7] = v8;

      CFRelease(v7);
    }
  }
}

void sub_10050237C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005023A4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005023E8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  unint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10050242C(uint64_t a1)
{
  sub_1005024EC(a1);
  CFStringRef v3 = kCTTypesetterOptionAllowUnboundedLayout;
  unint64_t v4 = &__kCFBooleanTrue;
  CFDictionaryRef v2 = +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  *(void *)(a1 + 64) = CTTypesetterCreateWithAttributedStringAndOptions(*(CFAttributedStringRef *)(a1 + 56), v2);
}

void sub_1005024D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005024EC(uint64_t result)
{
  if (*(void *)(result + 88) != *(void *)(result + 80)) {
    sub_1005038F0();
  }
  return result;
}

uint64_t sub_10050258C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = v3 / 72;
  id v8 = *(id *)a1;
  if (*(uint64_t *)(a2 + 24) < 0) {
    id v9 = &xmmword_101176F48;
  }
  else {
    id v9 = (long long *)a2;
  }
  id v30 = [v8 charRangeMappedFromStorage:*(void *)v9, *((void *)v9 + 1)];
  unint64_t v11 = v10;
  uint64_t v12 = 0;
  char v13 = 0;
  if (v7 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  do
  {
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = v15 + v12;
    if (!*(unsigned char *)(v15 + v12 + 64))
    {
      unint64_t v18 = *(void *)(v16 + 8);
      uint64_t v17 = *(void *)(v16 + 16);
      double v19 = sub_100502748(a2, v18);
      double v21 = sub_100502748(a2, v17 + v18) - v19;
      if (v21 <= 0.0) {
        goto LABEL_22;
      }
      double v22 = *(double *)(v15 + v12 + 32);
      if (v21 >= v22) {
        double v22 = v21;
      }
      if (v22 <= a3)
      {
LABEL_22:
        if (!*(unsigned char *)(v16 + 64) && v18 >= (unint64_t)v30 && v18 - (unint64_t)v30 < v11)
        {
          double v24 = *(double *)(v15 + v12 + 32);
          double v25 = v24 + 1.0;
          if (v21 + 1.0 < v24 && v25 >= v21)
          {
            double v31 = 0.0;
            double v32 = 0.0;
            sub_1005027D0((id *)a1, v20, v15 + v12, &v32, &v31);
            double v27 = v21 + v32 + v31;
            if (v25 >= v27 && v27 + 1.0 < v24)
            {
              *(double *)(v15 + v12 + 56) = v24 - v27;
              char v13 = 1;
            }
          }
        }
      }
      else
      {
        char v13 = 1;
        *(unsigned char *)(v16 + 64) = 1;
      }
    }
    v12 += 72;
    --v14;
  }
  while (v14);
  return v13 & 1;
}

double sub_100502748(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)sub_100152BF4(a1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  double v6 = 0.0;
  while (v4 != v5)
  {
    unint64_t v7 = (const __CTLine *)sub_1001BAB78(v4);
    CFRange StringRange = CTLineGetStringRange(v7);
    if (StringRange.location <= a2 && StringRange.location + StringRange.length >= a2)
    {
      double v10 = *(double *)(v4 + 8);
      unint64_t v11 = (const __CTLine *)sub_1001BAB78(v4);
      return v10 + CTLineGetOffsetForStringIndex(v11, a2, 0);
    }
    v4 += 104;
  }
  return v6;
}

void sub_1005027D0(id *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *a5 = 0;
  *a4 = 0;
  id v9 = *(id *)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = *(void *)(a3 + 16);
  id v13 = v9;
  if ([v9 baseTextScript] == 6)
  {
    uint64_t v12 = *(const __CTLine **)(a3 + 24);
    if (v12) {
      CTLineGetStringRange(v12);
    }
    [*a1 charRangeMappedToStorage:v10, v11];
    *a4 = 0;
    *a5 = 0;
  }
}

void sub_100502870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_10050288C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v5 = sub_100152CF8(a2);
    id v6 = [v5 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v44;
      double v8 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          if ([v10 adornmentLocation] == 1)
          {
            [v10 underlineAdjustment];
            if (v8 < v11) {
              double v8 = v11;
            }
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v43 objects:v47 count:16];
      }
      while (v6);
    }

    if (*(uint64_t *)(a2 + 24) < 0) {
      id v13 = &xmmword_101176F48;
    }
    else {
      id v13 = (long long *)a2;
    }
    id v14 = [*(id *)a1 charRangeMappedFromStorage:*(void *)v13, *((void *)v13 + 1)];
    unint64_t v37 = v15;
    unint64_t v38 = (unint64_t)v14;
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    unint64_t v18 = 0x8E38E38E38E38E39 * (v4 >> 3);
    do
    {
      uint64_t v19 = *(void *)(a1 + 80);
      uint64_t v20 = v19 + 72 * v16;
      unint64_t v21 = *(void *)(v20 + 8);
      if (v21 >= v38 && v21 - v38 < v37)
      {
        uint64_t v23 = *(void *)(v20 + 16);
        double v24 = [*(id *)v20 rubyText];
        if ([v24 length])
        {
          BOOL v25 = *(unsigned char *)(v19 + 72 * v16 + 64) == 0;

          if (v25)
          {
            uint64_t v26 = v19 + 72 * v16;
            line = *(const __CTLine **)(v26 + 24);
            if (line)
            {
              double v27 = *(double *)(v26 + 32);
              if (v27 > 0.0)
              {
                double v28 = sub_100502748(a2, v21);
                double v30 = sub_100502748(a2, v23 + v21) - v28;
                if (v27 + 1.0 < v30)
                {
                  unint64_t GlyphCount = CTLineGetGlyphCount(line);
                  if (GlyphCount < 2
                    || !CTLineCreateJustifiedLine(line, 1.0, v30 + (v30 - v27) / (double)GlyphCount * 0.5 * -2.0))
                  {
                    CFRetain(line);
                  }
                  operator new();
                }
                if (v30 + 1.0 < v27)
                {
                  v40.a = 0.0;
                  double v42 = 0.0;
                  sub_1005027D0((id *)a1, v29, v19 + 72 * v16, &v40, &v42);
                  double v32 = v30 + v40.a + v42;
                  if (v27 + 1.0 >= v32 && v32 + 1.0 < v27)
                  {
                    if (qword_101719A80 != -1) {
                      dispatch_once(&qword_101719A80, &stru_101502078);
                    }
                    double v34 = off_10166B4B0;
                    if (os_log_type_enabled((os_log_t)off_10166B4B0, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "could not properly position ruby text. fall back to centering over base text.", buf, 2u);
                    }
                  }
                }
                operator new();
              }
            }
            *(void *)(a2 + 24) |= 0x400uLL;
          }
        }
        else
        {
        }
      }
      uint64_t v16 = ++v17;
    }
    while (v18 > v17);
  }
  return 0.0;
}

void sub_100502E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100502EF0(id a1)
{
  id v1 = sub_100401ECC("CRLWarningCat");
  uint64_t v2 = off_10166B4B0;
  off_10166B4B0 = v1;
}

void *sub_100502F34(void *result, uint64_t *a2)
{
  if (result[13] != result[14])
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)*result;
    if (a2[3] < 0) {
      uint64_t v5 = &xmmword_101176F48;
    }
    else {
      uint64_t v5 = (long long *)a2;
    }
    uint64_t result = [v4 charRangeMappedFromStorage:*(void *)v5, *((void *)v5 + 1)];
    double v8 = (char *)v3[13];
    uint64_t v7 = (char *)v3[14];
    if (v7 != v8)
    {
      unint64_t v9 = (v7 - v8) >> 6;
      do
      {
        unint64_t v10 = v9 >> 1;
        double v11 = (unint64_t *)&v8[64 * (v9 >> 1)];
        unint64_t v13 = *v11;
        uint64_t v12 = (char *)(v11 + 8);
        v9 += ~(v9 >> 1);
        if (v13 < result) {
          double v8 = v12;
        }
        else {
          unint64_t v9 = v10;
        }
      }
      while (v9);
    }
    if (v8 != v7)
    {
      id v14 = (char *)result + v6;
      do
      {
        if (*(void *)v8 >= (unint64_t)v14) {
          break;
        }
        double v15 = sub_100502748((uint64_t)a2, *(void *)v8);
        sub_1001BAA00((uint64_t)v17, *((CFTypeRef *)v8 + 2), 0x7FFFFFFFFFFFFFFFLL, 0, 0, v15 + *((double *)v8 + 4), *((double *)v8 + 3) * 0.5);
        CGAffineTransformMakeScale(&v16, *((CGFloat *)v8 + 7), 1.0);
        CGAffineTransform v20 = v16;
        long long v18 = *(_OWORD *)v8;
        CFIndex location = CTLineGetStringRange((CTLineRef)*((void *)v8 + 2)).location;
        sub_100152C84(a2, (uint64_t)v17);
        uint64_t result = (void *)sub_1001BAAFC(v17);
        v8 += 64;
      }
      while (v8 != v7);
    }
  }
  return result;
}

void sub_100503084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1001BAAFC(va);
  _Unwind_Resume(a1);
}

char *sub_10050309C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 104);
  uint64_t v2 = *(char **)(a1 + 112);
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = (v2 - v3) >> 6;
  do
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)&v3[64 * (v4 >> 1)];
    unint64_t v8 = *v6;
    uint64_t v7 = (char *)(v6 + 8);
    v4 += ~(v4 >> 1);
    if (v8 < a2) {
      uint64_t v3 = v7;
    }
    else {
      unint64_t v4 = v5;
    }
  }
  while (v4);
  if (v3 == v2 || *(void *)v3 != a2) {
    return 0;
  }
  unint64_t v9 = v3 + 64;
  do
  {
    unint64_t v10 = v9;
    if (v9 == v2) {
      break;
    }
    v9 += 64;
  }
  while (*(void *)v10 == a2);
  return v10 - 64;
}

BOOL sub_100503120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88) - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3 / 72;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  for (uint64_t i = (unsigned char *)(v2 + 64); *((void *)i - 8) != a2; i += 72)
  {
    if (!--v4) {
      return 0;
    }
  }
  return *i != 0;
}

uint64_t sub_100503184(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    unint64_t v6 = v4 / 72;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    uint64_t v7 = (unsigned char *)(v3 + 64);
    do
    {
      if (*((void *)v7 - 8) == a2)
      {
        char v5 = 1;
        unsigned char *v7 = 1;
      }
      v7 += 72;
      --v6;
    }
    while (v6);
  }
  return v5 & 1;
}

uint64_t sub_1005031EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  uint64_t v3 = *(void *)(result + 88) - v2;
  if (v3)
  {
    unint64_t v4 = v3 / 72;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    char v5 = (unsigned char *)(v2 + 64);
    do
    {
      if (*((void *)v5 - 8) == a2) {
        unsigned char *v5 = 0;
      }
      v5 += 72;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100503240(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88) - v2;
  if (v3)
  {
    unint64_t v4 = v3 / 72;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    char v5 = (double *)(v2 + 56);
    do
    {
      unint64_t v6 = *((void *)v5 - 5) + *((void *)v5 - 6);
      if (v6 <= a2) {
        break;
      }
      if (v6 - 1 == a2 && *v5 == 0.0) {
        return 1;
      }
      v5 += 9;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_1005032B8(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

id sub_1005032C0(uint64_t a1)
{
  return *(id *)(a1 + 56);
}

id sub_1005032C8(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount];
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_101502098);
    }
    if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR)) {
      sub_1010C0AB0();
    }
    if (qword_101719A70 != -1) {
      dispatch_once(&qword_101719A70, &stru_1015020B8);
    }
    uint64_t v2 = off_10166B4A0;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      +[CRLAssertionHandler packedBacktraceString];
      objc_claimAutoreleasedReturnValue();
      sub_1010663B0();
    }

    uint64_t v3 = +[NSString stringWithUTF8String:"NSMutableAttributedString *CRLWPParagraphTypesetter::mutableAttributedString() const"];
    unint64_t v4 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm"];
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 382, 0, "expected nil value for '%{public}s'", "_ctTypesetter");
  }
  char v5 = *(void **)(a1 + 56);

  return v5;
}

void sub_100503474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10050349C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005034E0(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100503524(uint64_t a1, void *a2)
{
  id v19 = a2;
  objc_storeStrong((id *)a1, a2);
  sub_100502030(a1);
  unint64_t v4 = *(unint64_t **)(a1 + 104);
  for (uint64_t i = *(unint64_t **)(a1 + 112); v4 != i; v4 += 8)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = (*(void *)(a1 + 40) - v6) >> 1;
    unint64_t v8 = v4[1] + *v4;
    if (*v4 >= v7 || v8 > v7)
    {
      unsigned int v10 = +[CRLAssertionHandler _atomicIncrementAssertCount];
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1015020D8);
      }
      double v11 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)off_10166B4A0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        unsigned int v21 = v10;
        __int16 v22 = 2082;
        uint64_t v23 = "void CRLWPParagraphTypesetter::updateSource(__strong id<CRLWPTextSource>)";
        __int16 v24 = 2082;
        BOOL v25 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm";
        __int16 v26 = 1024;
        int v27 = 394;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tate-chu-yoko run's range is not within the text buffer.", buf, 0x22u);
      }
      if (qword_101719A70 != -1) {
        dispatch_once(&qword_101719A70, &stru_1015020F8);
      }
      uint64_t v12 = off_10166B4A0;
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        long long v18 = +[CRLAssertionHandler packedBacktraceString];
        *(_DWORD *)buf = 67109378;
        unsigned int v21 = v10;
        __int16 v22 = 2114;
        uint64_t v23 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v12, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);
      }
      unint64_t v13 = +[NSString stringWithUTF8String:"void CRLWPParagraphTypesetter::updateSource(__strong id<CRLWPTextSource>)"];
      id v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphTypesetter.mm"];
      +[CRLAssertionHandler handleFailureInFunction:v13 file:v14 lineNumber:394 isFatal:0 description:"Tate-chu-yoko run's range is not within the text buffer."];
    }
    else
    {
      double v15 = (_WORD *)(v6 + 2 * *v4);
      *double v15 = -4;
      CGAffineTransform v16 = v15 + 1;
      unsigned int v17 = (unsigned char *)(v6 + 2 * v8);
      if (v16 != v17) {
        memset_pattern16(v16, "\v \v \v \v \v \v \v \v ", (v17 - v16) & 0xFFFFFFFFFFFFFFFELL);
      }
    }
  }
}

void sub_1005037F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100503838(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10050387C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005038C0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_100503E40((char **)a1, a2 - v2);
  }
}

void sub_1005038F0()
{
}

uint64_t sub_1005039A8(uint64_t result)
{
  if (result) {
    operator delete();
  }
  return result;
}

double sub_1005039C4(uint64_t a1)
{
  double result = 0.0;
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 64)) {
        return *(double *)(v2 + 56) * 0.5;
      }
    }
  }
  return result;
}

void sub_1005039F0(const __CFAttributedString *a1, NSUInteger a2, NSUInteger a3)
{
  unsigned int v21 = +[CRLWPFontMetricsCache sharedCache];
  if (a2 < a2 + a3)
  {
    CFStringRef v19 = kCTFontFeatureTypeIdentifierKey;
    CFStringRef v20 = kCTFontFeatureSettingsAttribute;
    CFStringRef v18 = kCTFontFeatureSelectorIdentifierKey;
    unint64_t v3 = a2;
    do
    {
      Attribute = (const __CTFont *)CFAttributedStringGetAttribute(a1, v3, kCTFontAttributeName, &effectiveRange);
      CFIndex location = effectiveRange.location;
      CFIndex length = effectiveRange.length;
      v31.CFIndex length = a3;
      v31.CFIndex location = a2;
      NSRange v7 = NSIntersectionRange((NSRange)effectiveRange, v31);
      unsigned __int8 v8 = [v21 supportedFractionalWidthsForFont:Attribute];
      NSUInteger v9 = 4;
      if (v7.length < 4) {
        NSUInteger v9 = v7.length;
      }
      if (v9 != 2)
      {
        if (v9 != 3)
        {
          if (v9 != 4) {
            goto LABEL_19;
          }
          if ((v8 & 0x10) != 0)
          {
            uint64_t v10 = 4;
            goto LABEL_14;
          }
        }
        if ((v8 & 8) != 0)
        {
          uint64_t v10 = 3;
          goto LABEL_14;
        }
      }
      if ((v8 & 4) != 0)
      {
        uint64_t v10 = 2;
LABEL_14:
        CFStringRef v29 = v20;
        v26[0] = v19;
        v26[1] = v18;
        v27[0] = &off_10155DF10;
        double v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v10, v18, v19, v20);
        v27[1] = v11;
        uint64_t v12 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:2];
        double v28 = v12;
        unint64_t v13 = +[NSArray arrayWithObjects:&v28 count:1];
        double v30 = v13;
        CFDictionaryRef v14 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];

        double v15 = CTFontDescriptorCreateWithAttributes(v14);
        if (v15)
        {
          CGFloat Size = CTFontGetSize(Attribute);
          CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(Attribute, Size, 0, v15);
          if (CopyWithAttributes)
          {
            CFAttributedStringSetAttribute(a1, (CFRange)v7, kCTFontAttributeName, CopyWithAttributes);
            CFRelease(CopyWithAttributes);
          }
          CFRelease(v15);
        }
      }
LABEL_19:
      if (v3 + 1 > length + location) {
        ++v3;
      }
      else {
        unint64_t v3 = length + location;
      }
    }
    while (v3 < a2 + a3);
  }
}

void sub_100503C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100503CD0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100503D04(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_100503D38(void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100503CD0(v4 - 72);
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100503DBC(void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100503D04(v4 - 64);
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100503E40(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  char v5 = v6;
  NSRange v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned __int8 v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_100004E40();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      CFDictionaryRef v14 = (char *)sub_100147B4C(v4, v13);
      unsigned __int8 v8 = *a1;
      NSRange v7 = a1[1];
    }
    else
    {
      CFDictionaryRef v14 = 0;
    }
    double v15 = &v14[2 * v11];
    CGAffineTransform v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    unsigned int v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1005040C8(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10050410C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100504290(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005042D4(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100504458(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_10050449C(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100504620(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_100504664(id a1)
{
  id v1 = sub_100401ECC("CRLAssertCat");
  uint64_t v2 = off_10166B4A0;
  off_10166B4A0 = v1;
}

void sub_1005046A8(void *a1, void *a2)
{
  CFStringRef v7 = @"CRLBoardItemInsertionEditorBoardItemsKey";
  unsigned __int8 v8 = a2;
  id v3 = a2;
  id v4 = a1;
  char v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  uint64_t v6 = +[NSNotificationCenter defaultCenter];

  [v6 postNotificationName:@"CRLBoardItemInsertionEditorDidInsertBoardItemsNotification" object:v4 userInfo:v5];
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = static CommandLine.argc.getter();
  id v4 = (char **)static CommandLine.unsafeArgv.getter();
  type metadata accessor for CRLiOSApplication();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v6 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CRLiOSAppDelegate();
  CFStringRef v7 = (objc_class *)swift_getObjCClassFromMetadata();
  unsigned __int8 v8 = NSStringFromClass(v7);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned __int8 v8 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, v6, v8);

  return 0;
}

uint64_t CRLWPShapeLayout.descendersCannotClip.getter()
{
  return 0;
}

void *variable initialization expression of CRLDocumentSessionAnalyticsManager.commandControllerNotificationSubscriber()
{
  return &_swiftEmptySetSingleton;
}

id variable initialization expression of iCloudStatusFooter.iCloudStatusLabel()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 init];
}

uint64_t CRLWPShapeLayout.instructionalTextCharacterFill.getter()
{
  return 0;
}

id variable initialization expression of CRLAnalyticsDataStore.userDefaults()
{
  id v0 = [self standardUserDefaults];

  return v0;
}

uint64_t variable initialization expression of CRLAnalyticsDataStore.lastSeenUserID()
{
  return 0;
}

uint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.sessionBeganDate@<X0>(uint64_t a1@<X8>)
{
  return sub_100505428((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of BoardInitialAppStateEvent.eventData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_101670398, a1);
}

uint64_t variable initialization expression of AppSessionEndEvent.sessionEndData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_1016703A0, a1);
}

uint64_t variable initialization expression of AppSessionEndEvent.timedData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_1016703A8, a1);
}

uint64_t variable initialization expression of UserData.userHashMod()
{
  return 0x100000000;
}

uint64_t variable initialization expression of AASApplicationManager.userInfo@<X0>(uint64_t a1@<X8>)
{
  return sub_100505428((uint64_t (*)(void))type metadata accessor for AASUserInfo, a1);
}

double variable initialization expression of AASApplicationManager.sessionPropertiesController@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AASApplicationManager.userSamplingManager()
{
  type metadata accessor for AASUserSamplingManager();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 2UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform22AASUserSamplingManager_userId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

void variable initialization expression of CRLMiniFormatterStateManager.observedObjects()
{
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100508DCC((unint64_t)&_swiftEmptyArrayStorage);
  }
}

unint64_t variable initialization expression of CRLAnalyticsActiveUseManager.appForegroundedAnalyticsDomain()
{
  return 0xD000000000000010;
}

uint64_t variable initialization expression of CRLAnalyticsActiveUseManager.deviceIDAnalyticsKey()
{
  return 0x4449656369766564;
}

uint64_t variable initialization expression of CRLAnalyticsActiveUseManager.userIDAnalyticsKey()
{
  return 0x444972657375;
}

unint64_t variable initialization expression of CRLAnalyticsActiveUseManager.supportsEndToEndEncryptionKey()
{
  return 0xD00000000000001ALL;
}

unint64_t variable initialization expression of CRLAnalyticsActiveUseManager.overriddenUserIDAnalyticsKey()
{
  return 0xD000000000000010;
}

unint64_t variable initialization expression of CRLAnalyticsActiveUseManager.hadiCloudAccountAnalyticsKey()
{
  return 0xD000000000000010;
}

unint64_t variable initialization expression of CRLAnalyticsActiveUseManager.hadQuotaViolationKey()
{
  return 0xD000000000000011;
}

uint64_t sub_100504E68()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness, v1);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
  return dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
}

void *sub_100504F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness, v11);
  type metadata accessor for CRLLowPassFilter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  sub_100504E68();
  unint64_t v12 = sub_1006DFFC4((uint64_t)v9, (uint64_t)v6);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, a1);
  v13(v9, a1);
  return v12;
}

uint64_t _s8Freeform16CRLOneEuroFilterC9prevValuexvpfi_0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness, v1);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

double variable initialization expression of CRLWPLayout.defaultEdgeInset()
{
  return 4.0;
}

id variable initialization expression of CRLWPLayout._columns()
{
  id v0 = objc_allocWithZone((Class)NSMutableArray);

  return [v0 init];
}

uint64_t variable initialization expression of CRLWPLayout.layoutDetailsFactory()
{
  return type metadata accessor for CRLWPLaidOutColumnProxy();
}

unint64_t variable initialization expression of CRLiOSPencilMediator.prefersPencilOnlyDrawingKeyPath()
{
  return 0xD000000000000018;
}

void *variable initialization expression of CRLAnalyticsOSSignpostManager._unsafe_contextList()
{
  return &_swiftEmptyArrayStorage;
}

id variable initialization expression of CRLAnalyticsOSSignpostManager.signpostsEnabled()
{
  id v0 = [self standardUserDefaults];
  id v1 = [v0 BOOLForKey:@"enableOSSignpost"];

  return v1;
}

uint64_t variable initialization expression of CRLAnalyticsOSSignpostManager.contextAccessLock()
{
  type metadata accessor for CRLUnfairLock();
  uint64_t v0 = swift_allocObject();
  id v1 = (_DWORD *)swift_slowAlloc();
  _DWORD *v1 = 0;
  *(void *)(v0 + 16) = v1;
  atomic_thread_fence(memory_order_acq_rel);
  return v0;
}

unint64_t variable initialization expression of CRLMathCalculationController.expressions()
{
  return sub_100A3BFAC((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of CRLMathCalculationController.pkExpressions()
{
  return sub_100A3C1CC((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of CRLMathCalculationController.expressionStrokeGroups()
{
  return sub_100A3C1E0((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.documentSessionEndedAnalyticsDomain()
{
  return 0xD000000000000016;
}

uint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.durationKey()
{
  return 0x6E6F697461727564;
}

uint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.hadEditKey()
{
  return 0x74696445646168;
}

unint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.percentageTimeSpentInEditModeKey()
{
  return 0xD00000000000001DLL;
}

unint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.editModeBeganCountKey()
{
  return 0xD000000000000012;
}

uint64_t sub_100505428@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

unint64_t variable initialization expression of CRLUIPropertyNotifier.subscribers()
{
  return sub_100A45DB0(&_swiftEmptyArrayStorage);
}

void *variable initialization expression of CRLiOSPencilHoverGestureHandler.previewImageProvider()
{
  type metadata accessor for CRLiOSPencilHoverPreviewImageProvider();
  double result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

id variable initialization expression of CRLiOSPencilHoverGestureHandler.pencilHoverStates()
{
  uint64_t v0 = (objc_class *)type metadata accessor for CRLiOSPencilHoverStates();
  id v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR____TtC8Freeform23CRLiOSPencilHoverStates_currentHoverToolType] = 8;
  v3.receiver = v1;
  v3.super_class = v0;
  return [super init];
}

uint64_t variable initialization expression of BoardCreateEvent.boardData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_101670410, a1);
}

uint64_t variable initialization expression of BoardCreateEvent.drawableAddSummaryData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_101670418, a1);
}

uint64_t variable initialization expression of BoardCreateEvent.inputDeviceData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_101670420, a1);
}

uint64_t variable initialization expression of BoardEditEvent.boardContentData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.optional<A>(_:), &qword_101670428, a1);
}

uint64_t variable initialization expression of BoardCreateEvent.boardContentData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), &qword_101670428, a1);
}

id variable initialization expression of CRLiOSPageTitleButton.titleFont()
{
  id v0 = [self systemFontOfSize:14.0 weight:UIFontWeightRegular];

  return v0;
}

id variable initialization expression of CRLiOSPageTitleButton.selectedTitleColor()
{
  id v0 = objc_allocWithZone((Class)UIColor);
  void v4[4] = sub_100DBFC00;
  void v4[5] = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = *(void *)"";
  void v4[2] = sub_1005058D4;
  v4[3] = &unk_101505378;
  id v1 = _Block_copy(v4);
  id v2 = [v0 initWithDynamicProvider:v1];
  _Block_release(v1);
  swift_release();
  return v2;
}

CGFloat variable initialization expression of CRLiOSPageTitleButton.hitTestingInsets()
{
  return UIEdgeInsetsZero.top;
}

uint64_t variable initialization expression of BoardInitialAppStateEvent.boardCollectionData@<X0>(uint64_t a1@<X8>)
{
  return sub_1005056D4((unsigned int *)&enum case for EventProperty.required<A>(_:), (uint64_t *)&unk_101670430, a1);
}

uint64_t sub_1005056D4@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_1005057FC(a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

double variable initialization expression of CRLiOSAutoSizingHostingController.lastLayoutSize()
{
  return 0.0;
}

unint64_t variable initialization expression of CRLiOSAutoSizingHostingController.scrollTargets()
{
  return sub_100A3BE78((uint64_t)&_swiftEmptyArrayStorage);
}

double variable initialization expression of CRLLinkViewHostingRep.reloadViewSize()
{
  return 53.0;
}

BOOL sub_10050576C@<W0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100E1A704(*a1);
  *a2 = result;
  return result;
}

BOOL sub_10050579C@<W0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100E1AD0C(*a1);
  *a2 = result;
  return result;
}

BOOL sub_1005057CC@<W0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100E1B718(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005057FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of CRLStatusHUDManager.maxInfos()
{
  return 5;
}

id variable initialization expression of CRLStatusHUDManager.delayedControllers()
{
  id v0 = [self weakObjectsHashTable];

  return v0;
}

uint64_t variable initialization expression of CRLRateLimiter.queue()
{
  return static OS_dispatch_queue.main.getter();
}

unint64_t variable initialization expression of CRLWPTopicNumbers.topicNumberData()
{
  return sub_100A3CDB8((uint64_t)&_swiftEmptyArrayStorage);
}

id sub_1005058D4(uint64_t a1, void *a2)
{
  objc_super v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

NSNumber sub_10050593C()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_100505944(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1;
  return result;
}

uint64_t sub_100505998(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1;
  return v3 & 1;
}

uint64_t sub_1005059F0@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

BOOL sub_100505A18(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100505A2C(uint64_t a1, uint64_t a2)
{
  return sub_1005080C8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_100505A58@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100505A6C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100505A9C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100505AB0(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100505AC4(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100505AD8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

void sub_100505AEC(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100505AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

NSNumber sub_100505B0C()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_100505B14(uint64_t a1, uint64_t a2)
{
  uint64_t result = static Float._forceBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

uint64_t sub_100505B68(uint64_t a1, uint64_t a2)
{
  char v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return v3 & 1;
}

uint64_t sub_100505BC0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static Float._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

void *sub_100505BE8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100505BFC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100505C10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v3 == 0;
  return result;
}

uint64_t *sub_100505C3C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v5 == 0;
  return result;
}

void *sub_100505C60(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100505C74@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100505C88(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100505C9C()
{
  return *v0 == 0;
}

void *sub_100505CAC(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100505CC4(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101670DC0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100505D30(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101670DC0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100505DA0(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100505E0C()
{
  return *v0;
}

uint64_t sub_100505E14@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100505E1C()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100505E68()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100505EC0()
{
  return sub_100507B90();
}

void *sub_100505EE0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  return result;
}

void sub_100505EF0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100505F00(uint64_t a1, uint64_t a2)
{
  return sub_1005080C8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_100505F18()
{
  Hasher._combine(_:)(*v0);
}

_DWORD *sub_100505F44@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100505F50()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100505FBC()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

BOOL sub_100506028(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10050603C()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100506084()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1005060B0()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1005060F4(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10050616C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1005061EC@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100506230()
{
  return Double.hashValue.getter(*v0);
}

void sub_100506238()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_10050626C()
{
  return static Hasher._hash(seed:_:)();
}

Swift::Int sub_10050627C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1005062C4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100506308()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100506354()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1005063AC()
{
  return sub_100507B90();
}

double sub_1005063C4@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_1005063D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100FBE99C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100506410()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100506420()
{
  sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10050648C(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1005064F8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100506588()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1005065C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100506640()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

BOOL sub_1005066AC(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1005066C0(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_1005066D4(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1005066DC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1005066F0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100506704@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100506718(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_100506748@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100506774@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_100506798(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1005067AC(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1005067C0(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1005067D4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1005067E8(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1005067FC(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100506810()
{
  return *v0 == 0;
}

_DWORD *sub_100506820(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_100506834@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_100506844(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100506850@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10050685C()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100506924()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100506990()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1005069A0()
{
  sub_10050A89C(&qword_101671648, type metadata accessor for AVError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100506A0C(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101671648, type metadata accessor for AVError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100506A78(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10050A89C(&qword_101671648, type metadata accessor for AVError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100506B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10050A89C(&qword_101671648, type metadata accessor for AVError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100506B84()
{
  return Hasher._finalize()();
}

uint64_t sub_100506BE4()
{
  sub_10050A89C((unint64_t *)&qword_1016837E0, type metadata accessor for Key);
  sub_10050A89C(&qword_101670F60, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100506CA0()
{
  sub_10050A89C(&qword_101670F48, type metadata accessor for Name);
  sub_10050A89C((unint64_t *)&unk_101670F50, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

float sub_100506D5C@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_100506D68()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100506E24()
{
  sub_10050A89C(&qword_1016717F0, type metadata accessor for CAMediaTimingFillMode);
  sub_10050A89C(&qword_1016717F8, type metadata accessor for CAMediaTimingFillMode);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100506EE0()
{
  sub_10050A89C(&qword_101670F78, type metadata accessor for Identifier);
  sub_10050A89C(&qword_101670F80, type metadata accessor for Identifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100506F9C()
{
  sub_10050A89C(&qword_101671720, type metadata accessor for InfoKey);
  sub_10050A89C(&qword_101671728, type metadata accessor for InfoKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507058()
{
  sub_10050A89C((unint64_t *)&qword_1016716C0, type metadata accessor for DocumentReadingOptionKey);
  sub_10050A89C(&qword_1016716C8, type metadata accessor for DocumentReadingOptionKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507114()
{
  sub_10050A89C(&qword_1016716D0, type metadata accessor for DocumentType);
  sub_10050A89C(&qword_1016716D8, type metadata accessor for DocumentType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1005071D0()
{
  sub_10050A89C(&qword_101671740, type metadata accessor for UIActivityItemsConfigurationMetadataKey);
  sub_10050A89C(&qword_101671748, type metadata accessor for UIActivityItemsConfigurationMetadataKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10050728C()
{
  sub_10050A89C(&qword_101671798, type metadata accessor for ActivityType);
  sub_10050A89C(&qword_1016717A0, type metadata accessor for ActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1005073CC()
{
  sub_10050A89C((unint64_t *)&qword_1016716E0, type metadata accessor for DocumentAttributeKey);
  sub_10050A89C(&qword_1016716E8, type metadata accessor for DocumentAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507488()
{
  sub_10050A89C(&qword_1016716F0, type metadata accessor for LaunchOptionsKey);
  sub_10050A89C(&qword_1016716F8, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507544()
{
  sub_10050A89C(&qword_101671778, type metadata accessor for URLResourceKey);
  sub_10050A89C(&qword_101671780, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507600()
{
  sub_10050A89C(&qword_101670F68, type metadata accessor for Mode);
  sub_10050A89C(&qword_101670F70, type metadata accessor for Mode);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1005076BC()
{
  sub_10050A89C((unint64_t *)&qword_101670F88, type metadata accessor for NSKeyValueChangeKey);
  sub_10050A89C(&qword_101670F90, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507778()
{
  sub_10050A89C((unint64_t *)&qword_101671788, type metadata accessor for OpenExternalURLOptionsKey);
  sub_10050A89C(&qword_101671790, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507834@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100507860()
{
  sub_10050A89C(&qword_101671710, type metadata accessor for CalculateKey);
  sub_10050A89C(&qword_101671718, type metadata accessor for CalculateKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10050791C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10050DA5C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10050795C()
{
  sub_10050A89C(&qword_101671700, type metadata accessor for CIContextOption);
  sub_10050A89C(&qword_101671708, type metadata accessor for CIContextOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507A18()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100507A64()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100507ABC()
{
  return sub_100507B90();
}

uint64_t sub_100507AD4()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100507B20()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100507B78()
{
  return sub_100507B90();
}

Swift::Int sub_100507B90()
{
  return Hasher._finalize()();
}

uint64_t sub_100507BF4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_100FBE9A0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100507C34()
{
  sub_10050A89C(&qword_101671730, type metadata accessor for UIActivityItemsConfigurationInteraction);
  sub_10050A89C(&qword_101671738, type metadata accessor for UIActivityItemsConfigurationInteraction);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507CF0()
{
  sub_10050A89C((unint64_t *)&qword_1016716B0, type metadata accessor for AttributeName);
  sub_10050A89C(&qword_1016716B8, type metadata accessor for AttributeName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507DAC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100507DF4()
{
  sub_10050A89C(&qword_1016716A0, type metadata accessor for TraitKey);
  sub_10050A89C(&qword_1016716A8, type metadata accessor for TraitKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100507EB0(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101671650, type metadata accessor for AVError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100507F1C(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101671650, type metadata accessor for AVError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100507F88(uint64_t a1)
{
  uint64_t v2 = sub_10050A89C(&qword_101671648, type metadata accessor for AVError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100507FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10050A89C(&qword_101671648, type metadata accessor for AVError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100508078()
{
  return Float.hashValue.getter(*v0);
}

void sub_100508080()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_1005080B4()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t sub_1005080C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10050810C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100508160()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1005081D4(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1005081E8()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void *sub_100508274(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  double v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_1005057FC(&qword_101671070);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0;
    CFDictionaryRef v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    unint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    unsigned int v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_10050A89C(&qword_101671078, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_10050A89C((unint64_t *)&unk_101671080, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          __int16 v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        int v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (void *)(*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return (void *)v11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_10050858C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101670F98);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1005087BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2 - 8, v4);
  id v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  unint64_t v11 = (char *)&v43 - v10;
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v15 = (char *)&v43 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    sub_1005057FC((uint64_t *)&unk_101670EB0);
    uint64_t v20 = static _SetStorage.allocate(capacity:)();
    uint64_t v21 = 0;
    uint64_t v22 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v43 = v19;
    uint64_t v44 = a1 + ((v22 + 32) & ~v22);
    uint64_t v23 = *(void *)(v3 + 72);
    uint64_t v46 = v20 + 56;
    uint64_t v47 = v23;
    while (1)
    {
      uint64_t v45 = v21;
      sub_10050B9DC(v44 + v47 * v21, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_10050A89C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v24 = type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v25 = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v27 = v25 & ~v26;
      unint64_t v28 = v27 >> 6;
      uint64_t v29 = *(void *)(v46 + 8 * (v27 >> 6));
      uint64_t v30 = 1 << v27;
      if (((1 << v27) & v29) != 0)
      {
        uint64_t v31 = ~v26;
        do
        {
          sub_10050B9DC(*(void *)(v20 + 48) + v27 * v47, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
          char v32 = static UUID.== infix(_:_:)();
          sub_10050B9DC((uint64_t)v15, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
          sub_10050B9DC((uint64_t)v18, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
          if (v32)
          {
            uint64_t v33 = *(int *)(v24 + 20);
            uint64_t v34 = *(void *)&v11[v33];
            uint64_t v35 = *(void *)&v11[v33 + 8];
            uint64_t v36 = &v7[v33];
            if (v34 == *(void *)v36 && v35 == *((void *)v36 + 1))
            {
              sub_10050BA44((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
              sub_10050BA44((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
              sub_10050BA44((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
LABEL_4:
              sub_10050BA44((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
              uint64_t v19 = v43;
              goto LABEL_5;
            }
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_10050BA44((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
            sub_10050BA44((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
            sub_10050BA44((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
            if (v38) {
              goto LABEL_4;
            }
          }
          else
          {
            sub_10050BA44((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
            sub_10050BA44((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
            sub_10050BA44((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
          }
          unint64_t v27 = (v27 + 1) & v31;
          unint64_t v28 = v27 >> 6;
          uint64_t v29 = *(void *)(v46 + 8 * (v27 >> 6));
          uint64_t v30 = 1 << v27;
        }
        while ((v29 & (1 << v27)) != 0);
        uint64_t v19 = v43;
      }
      *(void *)(v46 + 8 * v2_Block_object_dispose(&STACK[0x250], 8) = v30 | v29;
      uint64_t result = (void *)sub_10050BAA4((uint64_t)v18, *(void *)(v20 + 48) + v27 * v47, type metadata accessor for CRLBoardIdentifier);
      uint64_t v40 = *(void *)(v20 + 16);
      BOOL v41 = __OFADD__(v40, 1);
      uint64_t v42 = v40 + 1;
      if (v41) {
        break;
      }
      *(void *)(v20 + 16) = v42;
LABEL_5:
      uint64_t v21 = v45 + 1;
      if (v45 + 1 == v19) {
        return (void *)v20;
      }
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void sub_100508C0C(unint64_t a1)
{
}

Swift::Int sub_100508C28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101670F40);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100508DCC(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_1005057FC(&qword_101671328);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v42 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for CRLBoardItem(0);
        id v18 = *(id *)(v3[6] + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v7[8 * v15] = v17 | v16;
      *(void *)(v3[6] + 8 * v14) = v11;
      uint64_t v23 = v3[2];
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_37;
      }
      v3[2] = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(a1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for CRLBoardItem(0);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_23;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(v3[6] + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v5 = v42;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v5 = v42;
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v3UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_24:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *sub_100509124(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v66 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v6);
  CGFloat v67 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v62 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v65 = (uint64_t)&v59 - v13;
  uint64_t v72 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v14 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  id v21 = (char *)&v59 - v20;
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v59 - v24;
  uint64_t v26 = *(void *)(a1 + 16);
  if (!v26) {
    return &_swiftEmptySetSingleton;
  }
  sub_1005057FC((uint64_t *)&unk_101670F20);
  uint64_t v27 = static _SetStorage.allocate(capacity:)();
  uint64_t v28 = 0;
  uint64_t v29 = v5;
  uint64_t v30 = v27 + 56;
  uint64_t v71 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v31 = *(void *)(v14 + 72);
  double v61 = (void (**)(char *))(v29 + 32);
  double v60 = (void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v69 = v26;
  double v70 = v21;
  do
  {
    sub_10050B9DC(v71 + v31 * v28, (uint64_t)v25, type metadata accessor for CRLBoardPreviewImageCache.Item);
    Hasher.init(_seed:)();
    sub_10050B9DC((uint64_t)v25, (uint64_t)v21, type metadata accessor for CRLBoardPreviewImageCache.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v33 = v66;
        sub_10050BAA4((uint64_t)v21, v66, type metadata accessor for CRLBoardIdentifier);
        sub_10050A89C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = v33;
        char v35 = type metadata accessor for CRLBoardIdentifier;
      }
      else
      {
        uint64_t v43 = &v21[*(int *)(sub_1005057FC(&qword_10169FA80) + 48)];
        double v64 = type metadata accessor for CRLBoardIdentifier;
        uint64_t v44 = v66;
        sub_10050BAA4((uint64_t)v21, v66, type metadata accessor for CRLBoardIdentifier);
        uint64_t v45 = v68;
        ((void (*)(char *, char *, uint64_t))*v61)(v67, v43, v68);
        uint64_t v63 = sub_10050A89C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = v67;
        dispatch thunk of Hashable.hash(into:)();
        (*v60)(v46, v45);
        uint64_t v34 = v44;
        char v35 = v64;
      }
    }
    else
    {
      uint64_t v36 = (uint64_t)v21;
      uint64_t v37 = v65;
      sub_10050BAA4(v36, v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v38 = v37;
      uint64_t v39 = v62;
      sub_10050B9DC(v38, v62, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v40 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 5, v40))
      {
        case 1u:
          Swift::UInt v47 = 0;
          goto LABEL_16;
        case 2u:
          Swift::UInt v47 = 1;
          goto LABEL_16;
        case 3u:
          Swift::UInt v47 = 2;
          goto LABEL_16;
        case 4u:
          Swift::UInt v47 = 3;
          goto LABEL_16;
        case 5u:
          Swift::UInt v47 = 4;
LABEL_16:
          Hasher._combine(_:)(v47);
          break;
        default:
          double v64 = *(uint64_t (**)(uint64_t))(v62 + *(int *)(v40 + 48));
          uint64_t v42 = v67;
          uint64_t v41 = v68;
          (*v61)(v67);
          Hasher._combine(_:)(5uLL);
          sub_10050A89C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          String.hash(into:)();
          (*v60)(v42, v41);
          swift_bridgeObjectRelease();
          break;
      }
      char v35 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      uint64_t v34 = v65;
    }
    sub_10050BA44(v34, v35);
    Swift::Int v48 = Hasher._finalize()();
    uint64_t v49 = ~(-1 << *(unsigned char *)(v27 + 32));
    unint64_t v50 = v48 & v49;
    unint64_t v51 = (v48 & (unint64_t)v49) >> 6;
    uint64_t v52 = *(void *)(v30 + 8 * v51);
    uint64_t v53 = 1 << (v48 & v49);
    if ((v53 & v52) != 0)
    {
      while (1)
      {
        sub_10050B9DC(*(void *)(v27 + 48) + v50 * v31, (uint64_t)v17, type metadata accessor for CRLBoardPreviewImageCache.Item);
        char v54 = sub_100627FFC((uint64_t)v17, (uint64_t)v25);
        sub_10050BA44((uint64_t)v17, type metadata accessor for CRLBoardPreviewImageCache.Item);
        if (v54) {
          break;
        }
        unint64_t v50 = (v50 + 1) & v49;
        unint64_t v51 = v50 >> 6;
        uint64_t v52 = *(void *)(v30 + 8 * (v50 >> 6));
        uint64_t v53 = 1 << v50;
        if ((v52 & (1 << v50)) == 0) {
          goto LABEL_21;
        }
      }
      sub_10050BA44((uint64_t)v25, type metadata accessor for CRLBoardPreviewImageCache.Item);
    }
    else
    {
LABEL_21:
      *(void *)(v30 + 8 * v51) = v53 | v52;
      sub_10050BAA4((uint64_t)v25, *(void *)(v27 + 48) + v50 * v31, type metadata accessor for CRLBoardPreviewImageCache.Item);
      uint64_t v55 = *(void *)(v27 + 16);
      BOOL v56 = __OFADD__(v55, 1);
      uint64_t v57 = v55 + 1;
      if (v56)
      {
        __break(1u);
        JUMPOUT(0x1005098B8);
      }
      *(void *)(v27 + 16) = v57;
    }
    ++v28;
    id v21 = v70;
  }
  while (v28 != v69);
  return (void *)v27;
}

Swift::Int sub_1005098D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101670F38);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v1UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100509A14(unint64_t a1)
{
}

void sub_100509A34(unint64_t a1, uint64_t *a2, void (*a3)(void))
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_1005057FC(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  unint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        a3(0);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      a3(0);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void sub_100509DA0(unint64_t a1)
{
}

void sub_100509DBC(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_1005057FC(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  unint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10050BF48(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10050BF48(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10050A120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
  return swift_retain();
}

uint64_t sub_10050A130()
{
  return swift_release();
}

void type metadata accessor for CRLWPParagraphBorderType(uint64_t a1)
{
}

void type metadata accessor for CRLWPOutlineStyleType(uint64_t a1)
{
}

void type metadata accessor for CRLWPParagraphAlignment(uint64_t a1)
{
}

void type metadata accessor for CRLWPUnderline(uint64_t a1)
{
}

void type metadata accessor for CRLWPSuperscript(uint64_t a1)
{
}

void type metadata accessor for CRLWPStrikethru(uint64_t a1)
{
}

void type metadata accessor for CRLWPLigatures(uint64_t a1)
{
}

void type metadata accessor for CRLWPCapitalization(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for CKDeviceToDeviceEncryptionStatus(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

void type metadata accessor for SCNetworkReachabilityFlags(uint64_t a1)
{
}

__n128 initializeWithTake for CRLSyncSaveResult(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10050A240(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_10050A29C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

void type metadata accessor for SCNetworkReachabilityContext(uint64_t a1)
{
}

void type metadata accessor for SCNetworkReachability(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CHMathExpressionType(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for CRLPointData(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLSizeData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRLSizeData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x250], 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

__n128 initializeWithTake for CRLColorModelMonochromeData(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for CRLCanvasKnobTag(uint64_t a1)
{
}

void type metadata accessor for CRLWPListLabelType(uint64_t a1)
{
}

void type metadata accessor for CRLWPListNumberType(uint64_t a1)
{
}

void type metadata accessor for UITextInlinePredictionType(uint64_t a1)
{
}

void type metadata accessor for UITextAutocorrectionType(uint64_t a1)
{
}

void type metadata accessor for Mode(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CRLRepAnimator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for CRLColorModelRGBData(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLBoardPreviewImageCache.ImageSizeClassAndContentsScale(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRLBoardPreviewImageCache.ImageSizeClassAndContentsScale(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for CRLWPWritingDirection(uint64_t a1)
{
}

void type metadata accessor for CRLWPInsertionEdge(uint64_t a1)
{
}

void type metadata accessor for CRLWPCaretAffinity(uint64_t a1)
{
}

void type metadata accessor for Identifier(uint64_t a1)
{
}

void type metadata accessor for CRLAssetDownloadObserverOptions(uint64_t a1)
{
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

void type metadata accessor for CGPath(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

__n128 initializeWithTake for CRLEditableBezierPathSourceData.Node(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10050A5EC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10050A60C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x250], 8) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

__n128 initializeWithTake for CRLShadowData(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v6;
  return result;
}

uint64_t sub_10050A67C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10050A69C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 12UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12_Block_object_dispose(&STACK[0x250], 8) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CRLRectData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRLRectData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CRLChangeProperty(uint64_t a1)
{
}

void type metadata accessor for CRLChangeKind(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for CRLiOSPencilBehavior(uint64_t a1)
{
}

void type metadata accessor for CRLiOSPencilModeType(uint64_t a1)
{
}

void type metadata accessor for CRLAssetDownloadObserverStatus(uint64_t a1)
{
}

uint64_t sub_10050A80C()
{
  return sub_10050A89C(&qword_101670D48, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_10050A854()
{
  return sub_10050A89C(&qword_101670D50, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_10050A89C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10050A8E4()
{
  return sub_10050A89C(&qword_101670D58, type metadata accessor for CGColor);
}

uint64_t sub_10050A92C()
{
  return sub_10050A89C(&qword_101670D60, type metadata accessor for CGColor);
}

uint64_t sub_10050A974()
{
  return sub_10050A89C(&qword_101670D68, type metadata accessor for CGPath);
}

uint64_t sub_10050A9BC()
{
  return sub_10050A89C(&qword_101670D70, type metadata accessor for CGPath);
}

uint64_t sub_10050AA04()
{
  return sub_10050A89C(&qword_101670D78, type metadata accessor for CRLAssetDownloadObserverOptions);
}

uint64_t sub_10050AA4C()
{
  return sub_10050A89C(&qword_101670D80, type metadata accessor for CRLAssetDownloadObserverOptions);
}

uint64_t sub_10050AA94()
{
  return sub_10050A89C(&qword_101670D88, type metadata accessor for CRLAssetDownloadObserverOptions);
}

uint64_t sub_10050AADC()
{
  return sub_10050A89C(&qword_101670D90, type metadata accessor for CRLAssetDownloadObserverOptions);
}

uint64_t sub_10050AB24()
{
  return sub_10050A89C(&qword_101670D98, type metadata accessor for Identifier);
}

uint64_t sub_10050AB6C()
{
  return sub_10050A89C(&qword_101670DA0, type metadata accessor for Identifier);
}

uint64_t sub_10050ABB4()
{
  return sub_10050A89C(&qword_101670DA8, type metadata accessor for Identifier);
}

uint64_t sub_10050ABFC()
{
  return sub_10050A89C(&qword_101670DB0, type metadata accessor for CKError);
}

uint64_t sub_10050AC44()
{
  return sub_10050A89C(&qword_101670DB8, type metadata accessor for CKError);
}

uint64_t sub_10050AC8C()
{
  return sub_10050A89C(&qword_101670DC0, type metadata accessor for CKError);
}

uint64_t sub_10050ACD4()
{
  return sub_10050A89C(&qword_101670DC8, type metadata accessor for CKError);
}

uint64_t sub_10050AD1C()
{
  return sub_10050A89C(&qword_101670DD0, type metadata accessor for CKError);
}

uint64_t sub_10050AD64()
{
  return sub_10050A89C(&qword_101670DD8, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10050ADC0()
{
  return sub_10050A89C(&qword_101670DE0, _s3__C4CodeOMa_0);
}

unint64_t sub_10050AE0C()
{
  unint64_t result = qword_101670DE8;
  if (!qword_101670DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101670DE8);
  }
  return result;
}

uint64_t sub_10050AE60()
{
  return sub_10050A89C(&qword_101670DF0, _s3__C4CodeOMa_0);
}

uint64_t sub_10050AEA8()
{
  return sub_10050A89C((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);
}

uint64_t sub_10050AEF0()
{
  return sub_10050A89C(&qword_101670E00, type metadata accessor for Mode);
}

uint64_t sub_10050AF38()
{
  return sub_10050A89C(&qword_101670E08, type metadata accessor for Mode);
}

uint64_t sub_10050AF80()
{
  return sub_10050A89C(&qword_101670E10, type metadata accessor for Mode);
}

uint64_t sub_10050AFC8()
{
  return sub_10050A89C(&qword_101670E18, type metadata accessor for Key);
}

uint64_t sub_10050B010()
{
  return sub_10050A89C(&qword_101670E20, type metadata accessor for Key);
}

uint64_t sub_10050B058()
{
  return sub_10050A89C(&qword_101670E28, type metadata accessor for Key);
}

uint64_t sub_10050B0A0()
{
  return sub_10050A89C(&qword_101670E30, type metadata accessor for CGImage);
}

uint64_t sub_10050B0E8()
{
  return sub_10050A89C(&qword_101670E38, type metadata accessor for CGImage);
}

uint64_t sub_10050B130()
{
  return sub_10050A89C(&qword_101670E40, type metadata accessor for SCNetworkReachabilityFlags);
}

uint64_t sub_10050B178()
{
  return sub_10050A89C(&qword_101670E48, type metadata accessor for SCNetworkReachabilityFlags);
}

uint64_t sub_10050B1C0()
{
  return sub_10050A89C(&qword_101670E50, type metadata accessor for SCNetworkReachabilityFlags);
}

uint64_t sub_10050B208()
{
  return sub_10050A89C(&qword_101670E58, type metadata accessor for SCNetworkReachabilityFlags);
}

uint64_t sub_10050B250()
{
  return sub_10050A89C(&qword_101670E60, type metadata accessor for CKDeviceToDeviceEncryptionStatus);
}

uint64_t sub_10050B298()
{
  return sub_10050A89C(&qword_101670E68, type metadata accessor for CKDeviceToDeviceEncryptionStatus);
}

uint64_t sub_10050B2E0()
{
  return sub_10050A89C(&qword_101670E70, type metadata accessor for CKDeviceToDeviceEncryptionStatus);
}

uint64_t sub_10050B328()
{
  return sub_10050A89C(&qword_101670E78, type metadata accessor for CKDeviceToDeviceEncryptionStatus);
}

uint64_t sub_10050B370()
{
  return sub_10050A89C(&qword_101670E80, type metadata accessor for Name);
}

uint64_t sub_10050B3B8()
{
  return sub_10050A89C(&qword_101670E88, type metadata accessor for Name);
}

uint64_t sub_10050B400()
{
  return sub_10050A89C(&qword_101670E90, type metadata accessor for Name);
}

uint64_t sub_10050B448()
{
  return sub_10050A89C(&qword_101670E98, type metadata accessor for CRLChangeProperty);
}

uint64_t sub_10050B490()
{
  return sub_10050A89C(&qword_101670EA0, type metadata accessor for CRLChangeKind);
}

uint64_t sub_10050B4D8()
{
  return sub_10050A89C(&qword_101670EA8, type metadata accessor for NSKeyValueChangeKey);
}

void *sub_10050B520(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  unint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v45 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v10 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v11);
  BOOL v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  unint64_t v17 = (char *)&v41 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return &_swiftEmptySetSingleton;
  }
  sub_1005057FC(&qword_101671060);
  uint64_t v19 = static _SetStorage.allocate(capacity:)();
  uint64_t v20 = 0;
  uint64_t v47 = v19 + 56;
  uint64_t v21 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v41 = v18;
  uint64_t v42 = a1 + ((v21 + 32) & ~v21);
  uint64_t v22 = *(void *)(v10 + 72);
  while (2)
  {
    uint64_t v43 = v20;
    sub_10050B9DC(v42 + v22 * v20, (uint64_t)v17, type metadata accessor for CRLBoardIdentifierAndValue);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10050A89C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v46 = type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = *(int *)(v45 + 20);
    Hasher._combine(_:)(v17[v44]);
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v19 + 32);
    unint64_t v25 = v23 & ~v24;
    unint64_t v26 = v25 >> 6;
    uint64_t v27 = *(void *)(v47 + 8 * (v25 >> 6));
    uint64_t v28 = 1 << v25;
    if (((1 << v25) & v27) == 0) {
      goto LABEL_19;
    }
    uint64_t v29 = ~v24;
    do
    {
      sub_10050B9DC(*(void *)(v19 + 48) + v25 * v22, (uint64_t)v13, type metadata accessor for CRLBoardIdentifierAndValue);
      char v30 = static UUID.== infix(_:_:)();
      sub_10050B9DC((uint64_t)v13, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      sub_10050B9DC((uint64_t)v17, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
      if ((v30 & 1) == 0)
      {
        sub_10050BA44((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
        sub_10050BA44((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        goto LABEL_7;
      }
      uint64_t v31 = *(int *)(v46 + 20);
      uint64_t v32 = *(void *)&v9[v31];
      uint64_t v33 = *(void *)&v9[v31 + 8];
      unint64_t v34 = &v5[v31];
      if (v32 == *(void *)v34 && v33 == *((void *)v34 + 1))
      {
        sub_10050BA44((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
        sub_10050BA44((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_10050BA44((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
        sub_10050BA44((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        if ((v36 & 1) == 0) {
          goto LABEL_7;
        }
      }
      if (v13[*(int *)(v45 + 20)] == v17[v44])
      {
        sub_10050BA44((uint64_t)v13, type metadata accessor for CRLBoardIdentifierAndValue);
        sub_10050BA44((uint64_t)v17, type metadata accessor for CRLBoardIdentifierAndValue);
        uint64_t v18 = v41;
        goto LABEL_3;
      }
LABEL_7:
      sub_10050BA44((uint64_t)v13, type metadata accessor for CRLBoardIdentifierAndValue);
      unint64_t v25 = (v25 + 1) & v29;
      unint64_t v26 = v25 >> 6;
      uint64_t v27 = *(void *)(v47 + 8 * (v25 >> 6));
      uint64_t v28 = 1 << v25;
    }
    while ((v27 & (1 << v25)) != 0);
    uint64_t v18 = v41;
LABEL_19:
    *(void *)(v47 + 8 * v26) = v28 | v27;
    unint64_t result = (void *)sub_10050BAA4((uint64_t)v17, *(void *)(v19 + 48) + v25 * v22, type metadata accessor for CRLBoardIdentifierAndValue);
    uint64_t v38 = *(void *)(v19 + 16);
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (!v39)
    {
      *(void *)(v19 + 16) = v40;
LABEL_3:
      uint64_t v20 = v43 + 1;
      if (v43 + 1 == v18) {
        return (void *)v19;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

uint64_t sub_10050B9DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10050BA44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10050BAA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

Swift::Int sub_10050BB0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101671308);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      sub_10050BF84(v6 + 40 * v4, (uint64_t)v21);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v9 = result & v8;
      unint64_t v10 = (result & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_10050BF84(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          char v13 = static AnyHashable.== infix(_:_:)();
          Swift::Int result = sub_10050BFE0((uint64_t)v20);
          if (v13) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v8;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_8;
          }
        }
        sub_10050BFE0((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v1UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v12 | v11;
        uint64_t v14 = *(void *)(v3 + 48) + 40 * v9;
        long long v15 = v21[0];
        long long v16 = v21[1];
        *(void *)(v14 + 32) = v22;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v19;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_10050BC74(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Int result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_1005057FC((uint64_t *)&unk_1016712F0);
      Swift::Int result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      Swift::Int result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  uint64_t v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    Swift::Int result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for CalculateExpression();
    sub_10050A89C((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_10050A89C(&qword_101671300, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
      while (1)
      {
        Swift::Int result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      Swift::Int result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  Swift::Int result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10050BF28(unint64_t a1)
{
}

uint64_t sub_10050BF48(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10050BF84(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10050BFE0(uint64_t a1)
{
  return a1;
}

Swift::Int sub_10050C034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101671320);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt32 v7 = *(_DWORD *)(v6 + 4 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_DWORD *)(v14 + 4 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(_DWORD *)(v14 + 4 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(_DWORD *)(v14 + 4 * v1UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_10050C178(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1005057FC(&qword_101671318);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v1UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
}

void type metadata accessor for DocumentType(uint64_t a1)
{
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
}

void type metadata accessor for CRLLineEndType(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for UITextLayoutDirection(uint64_t a1)
{
}

void type metadata accessor for CRLWPSelectRange(uint64_t a1)
{
}

void type metadata accessor for CRLSelectionFlags(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

void type metadata accessor for CIContextOption(uint64_t a1)
{
}

void type metadata accessor for CalculateKey(uint64_t a1)
{
}

void type metadata accessor for CRLConnectionLinePathSourceType(uint64_t a1)
{
}

void type metadata accessor for CRLMediaReplacingSupportedMediaTypes(uint64_t a1)
{
}

void type metadata accessor for InfoKey(uint64_t a1)
{
}

void type metadata accessor for CRLBoardItemImporterErrorMediaType(uint64_t a1)
{
}

void type metadata accessor for CRLFirstLaunchAction(uint64_t a1)
{
}

void type metadata accessor for UIActivityItemsConfigurationInteraction(uint64_t a1)
{
}

void type metadata accessor for UIActivityItemsConfigurationMetadataKey(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for CRLTextInputArrowKeyDirection(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CTFont(uint64_t a1)
{
}

void type metadata accessor for CRLRectEdge(uint64_t a1)
{
}

void type metadata accessor for CRLShapeEditorBooleanType(uint64_t a1)
{
}

void type metadata accessor for MatchingFlags(uint64_t a1)
{
}

void type metadata accessor for CRLFreehandDrawingToolType(uint64_t a1)
{
}

void type metadata accessor for CRLWPVerticalAlignment(uint64_t a1)
{
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_10050C5B4()
{
  return sub_10050A89C(&qword_101670DF0, _s3__C4CodeOMa_0);
}

uint64_t sub_10050C5FC()
{
  return sub_10050A89C(&qword_101671468, type metadata accessor for ActivityType);
}

uint64_t sub_10050C644()
{
  return sub_10050A89C(&qword_101671470, type metadata accessor for ActivityType);
}

uint64_t sub_10050C68C()
{
  return sub_10050A89C(&qword_101671478, type metadata accessor for ActivityType);
}

uint64_t sub_10050C6D4()
{
  return sub_10050A89C(&qword_101671480, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10050C71C()
{
  return sub_10050A89C(&qword_101671488, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10050C764()
{
  return sub_10050A89C(&qword_101671490, type metadata accessor for REEngineServiceMask);
}

uint64_t sub_10050C7AC()
{
  return sub_10050A89C(&qword_101671498, type metadata accessor for REEngineServiceMask);
}

uint64_t sub_10050C7F4()
{
  return sub_10050A89C(&qword_1016714A0, type metadata accessor for REEngineServiceMask);
}

uint64_t sub_10050C83C()
{
  return sub_10050A89C(&qword_1016714A8, type metadata accessor for REEngineServiceMask);
}

uint64_t sub_10050C884()
{
  return sub_10050A89C(&qword_1016714B0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10050C8CC()
{
  return sub_10050A89C(&qword_1016714B8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10050C914()
{
  return sub_10050A89C(&qword_1016714C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10050C95C()
{
  return sub_10050A89C(&qword_1016714C8, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_10050C9A4()
{
  return sub_10050A89C(&qword_1016714D0, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_10050C9EC()
{
  return sub_10050A89C(&qword_1016714D8, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_10050CA34()
{
  return sub_10050A89C(&qword_1016714E0, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_10050CA7C()
{
  return sub_10050A89C(&qword_1016714E8, type metadata accessor for UILayoutPriority);
}

uint64_t sub_10050CAC4()
{
  return sub_10050A89C(&qword_1016714F0, type metadata accessor for UILayoutPriority);
}

uint64_t sub_10050CB0C()
{
  return sub_10050A89C(&qword_1016714F8, type metadata accessor for UILayoutPriority);
}

uint64_t sub_10050CB54()
{
  return sub_10050A89C(&qword_101671500, type metadata accessor for Weight);
}

uint64_t sub_10050CB9C()
{
  return sub_10050A89C(&qword_101671508, type metadata accessor for Weight);
}

uint64_t sub_10050CBE4()
{
  return sub_10050A89C(&qword_101671510, type metadata accessor for Weight);
}

uint64_t sub_10050CC2C()
{
  return sub_10050A89C(&qword_101671518, type metadata accessor for UIActivityItemsConfigurationMetadataKey);
}

uint64_t sub_10050CC74()
{
  return sub_10050A89C(&qword_101671520, type metadata accessor for UIActivityItemsConfigurationMetadataKey);
}

uint64_t sub_10050CCBC()
{
  return sub_10050A89C(&qword_101671528, type metadata accessor for UIActivityItemsConfigurationMetadataKey);
}

uint64_t sub_10050CD04()
{
  return sub_10050A89C(&qword_101671530, type metadata accessor for UIActivityItemsConfigurationInteraction);
}

uint64_t sub_10050CD4C()
{
  return sub_10050A89C(&qword_101671538, type metadata accessor for UIActivityItemsConfigurationInteraction);
}

uint64_t sub_10050CD94()
{
  return sub_10050A89C(&qword_101671540, type metadata accessor for UIActivityItemsConfigurationInteraction);
}

uint64_t sub_10050CDDC()
{
  return sub_10050A89C(&qword_101671548, type metadata accessor for InfoKey);
}

uint64_t sub_10050CE24()
{
  return sub_10050A89C(&qword_101671550, type metadata accessor for InfoKey);
}

uint64_t sub_10050CE6C()
{
  return sub_10050A89C(&qword_101671558, type metadata accessor for CalculateKey);
}

uint64_t sub_10050CEB4()
{
  return sub_10050A89C(&qword_101671560, type metadata accessor for CalculateKey);
}

uint64_t sub_10050CEFC()
{
  return sub_10050A89C(&qword_101671568, type metadata accessor for CalculateKey);
}

uint64_t sub_10050CF44()
{
  return sub_10050A89C(&qword_101671570, type metadata accessor for CIContextOption);
}

uint64_t sub_10050CF8C()
{
  return sub_10050A89C(&qword_101671578, type metadata accessor for CIContextOption);
}

uint64_t sub_10050CFD4()
{
  return sub_10050A89C(&qword_101671580, type metadata accessor for CRLSelectionFlags);
}

uint64_t sub_10050D01C()
{
  return sub_10050A89C(&qword_101671588, type metadata accessor for CRLSelectionFlags);
}

uint64_t sub_10050D064()
{
  return sub_10050A89C(&qword_101671590, type metadata accessor for CRLSelectionFlags);
}

uint64_t sub_10050D0AC()
{
  return sub_10050A89C(&qword_101671598, type metadata accessor for CRLSelectionFlags);
}

uint64_t sub_10050D0F4()
{
  return sub_10050A89C(&qword_1016715A0, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10050D13C()
{
  return sub_10050A89C(&qword_1016715A8, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10050D184()
{
  return sub_10050A89C(&qword_1016715B0, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_10050D1CC()
{
  return sub_10050A89C(&qword_1016715B8, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_10050D214()
{
  return sub_10050A89C(&qword_1016715C0, type metadata accessor for DocumentType);
}

uint64_t sub_10050D25C()
{
  return sub_10050A89C(&qword_1016715C8, type metadata accessor for DocumentType);
}

uint64_t sub_10050D2A4()
{
  return sub_10050A89C(&qword_1016715D0, type metadata accessor for DocumentType);
}

uint64_t sub_10050D2EC()
{
  return sub_10050A89C(&qword_1016715D8, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_10050D334()
{
  return sub_10050A89C(&qword_1016715E0, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_10050D37C()
{
  return sub_10050A89C(&qword_1016715E8, type metadata accessor for AttributeName);
}

uint64_t sub_10050D3C4()
{
  return sub_10050A89C(&qword_1016715F0, type metadata accessor for AttributeName);
}

uint64_t sub_10050D40C()
{
  return sub_10050A89C(&qword_1016715F8, type metadata accessor for TraitKey);
}

uint64_t sub_10050D454()
{
  return sub_10050A89C(&qword_101671600, type metadata accessor for TraitKey);
}

uint64_t sub_10050D49C()
{
  return sub_10050A89C(&qword_101671608, type metadata accessor for TraitKey);
}

uint64_t sub_10050D4E4()
{
  return sub_10050A89C(&qword_101671610, type metadata accessor for AttributeName);
}

uint64_t sub_10050D52C()
{
  return sub_10050A89C(&qword_101671618, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_10050D574()
{
  return sub_10050A89C(&qword_101671620, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_10050D5BC()
{
  return sub_10050A89C(&qword_101671628, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10050D604()
{
  return sub_10050A89C(&qword_101671630, type metadata accessor for CIContextOption);
}

uint64_t sub_10050D64C()
{
  return sub_10050A89C(&qword_101671638, type metadata accessor for InfoKey);
}

uint64_t sub_10050D694()
{
  return sub_10050A89C(&qword_101671640, type metadata accessor for Code);
}

uint64_t sub_10050D6DC()
{
  return sub_10050A89C(&qword_101671648, type metadata accessor for AVError);
}

void type metadata accessor for AVError(uint64_t a1)
{
}

uint64_t sub_10050D738()
{
  return sub_10050A89C(&qword_101671650, type metadata accessor for AVError);
}

uint64_t sub_10050D780()
{
  return sub_10050A89C(&qword_101671658, type metadata accessor for AVError);
}

uint64_t sub_10050D7C8()
{
  return sub_10050A89C(&qword_101671660, type metadata accessor for AVError);
}

uint64_t sub_10050D810()
{
  return sub_10050A89C(&qword_101671668, type metadata accessor for Code);
}

uint64_t sub_10050D858()
{
  return sub_10050A89C(&qword_101671670, type metadata accessor for Code);
}

uint64_t sub_10050D8A0()
{
  return sub_10050A89C(&qword_101671678, type metadata accessor for AVError);
}

uint64_t sub_10050D8E8()
{
  return sub_10050A89C(&qword_101671680, type metadata accessor for AVError);
}

uint64_t sub_10050D930()
{
  return sub_10050A89C((unint64_t *)&qword_101671688, type metadata accessor for CFString);
}

uint64_t sub_10050D978()
{
  return sub_10050A89C(&qword_101671690, type metadata accessor for CFString);
}

uint64_t sub_10050D9C0()
{
  return sub_10050A89C(&qword_101671698, type metadata accessor for OpenExternalURLOptionsKey);
}

unint64_t sub_10050DA08()
{
  unint64_t result = qword_101671760;
  if (!qword_101671760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671760);
  }
  return result;
}

uint64_t sub_10050DA5C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

__n128 initializeWithCopy for CRL3DTransform(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLiOSPencilKitCanvasViewController.CRLiOSPencilKitRulerEdgePoints(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRLiOSPencilKitCanvasViewController.CRLiOSPencilKitRulerEdgePoints(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

void type metadata accessor for CAMediaTimingFillMode(uint64_t a1)
{
}

void type metadata accessor for PadPosition(uint64_t a1)
{
}

void type metadata accessor for CNContactSortOrder(uint64_t a1)
{
}

void sub_10050DB54(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10050DB9C()
{
  return sub_10050A89C(&qword_1016717D0, type metadata accessor for CNContactSortOrder);
}

uint64_t sub_10050DBE4()
{
  return sub_10050A89C(&qword_1016717D8, type metadata accessor for CAMediaTimingFillMode);
}

uint64_t sub_10050DC2C()
{
  return sub_10050A89C(&qword_1016717E0, type metadata accessor for CAMediaTimingFillMode);
}

uint64_t sub_10050DC74()
{
  return sub_10050A89C(&qword_1016717E8, type metadata accessor for CAMediaTimingFillMode);
}

double *sub_10050DD7C()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = (void *)Strong;
  uint64_t v3 = swift_unknownObjectWeakLoadStrong();
  if (!v3) {
    goto LABEL_82;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v37 = v5;
  uint64_t v38 = (void *)v3;
  if (v5)
  {
    id v6 = [v2 containerRenderablesForRep:v3];
    if (v6)
    {
      Swift::UInt v7 = v6;
      sub_10050E85C();
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (v9) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_9:
        if (v9 < 1)
        {
          __break(1u);
          goto LABEL_85;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(v8 + 8 * i + 32);
          }
          uint64_t v12 = v11;
          id v13 = [v11 layer:v37, v38];

          if (v13)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v4 = v38;
        LOBYTE(v5) = v37;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_1006E0C88((unint64_t)_swiftEmptyArrayStorage);
  }
  if ((v5 & 2) == 0) {
    goto LABEL_40;
  }
  id v14 = [v4 overlayRenderables];
  sub_10050E85C();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15)
    {
LABEL_26:
      if (v15 >= 1)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(v8 + 8 * j + 32);
          }
          uint64_t v18 = v17;
          id v19 = [v17 layer:v37, v38];

          if (v19)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v4 = v38;
        LOBYTE(v5) = v37;
        goto LABEL_39;
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
LABEL_39:
  swift_bridgeObjectRelease();
  sub_1006E0C88((unint64_t)_swiftEmptyArrayStorage);
LABEL_40:
  if ((v5 & 4) == 0) {
    goto LABEL_45;
  }
  id v20 = [v4 contentPlatformView];
  if (!v20) {
    goto LABEL_45;
  }
  unint64_t v21 = v20;
  id v22 = [v20 layer];

  if (!v22) {
    goto LABEL_45;
  }
  unint64_t v8 = (unint64_t)v22;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_88;
  }
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

LABEL_45:
    if ((v5 & 8) != 0)
    {
      id v23 = [v4 additionalRenderablesOverRenderable];
      sub_10050E85C();
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        if (v24) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v24 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v24)
        {
LABEL_48:
          if (v24 < 1)
          {
LABEL_86:
            __break(1u);
            goto LABEL_87;
          }
          for (uint64_t k = 0; k != v24; ++k)
          {
            if ((v8 & 0xC000000000000001) != 0) {
              id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v26 = *(id *)(v8 + 8 * k + 32);
            }
            uint64_t v27 = v26;
            id v28 = [v26 layer:v37, v38];

            if (v28)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v4 = v38;
          LOBYTE(v5) = v37;
          goto LABEL_61;
        }
      }
      swift_bridgeObjectRelease();
LABEL_61:
      swift_bridgeObjectRelease();
      sub_1006E0C88((unint64_t)_swiftEmptyArrayStorage);
    }
    if ((v5 & 0x10) == 0) {
      goto LABEL_79;
    }
    id v29 = [v4 additionalRenderablesUnderRenderable];
    sub_10050E85C();
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      if (!v30)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v30) {
        goto LABEL_77;
      }
    }
    if (v30 >= 1) {
      break;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  for (uint64_t m = 0; m != v30; ++m)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v32 = *(id *)(v8 + 8 * m + 32);
    }
    uint64_t v33 = v32;
    id v34 = [v32 layer:v37, v38];

    if (v34)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = v38;
  LOBYTE(v5) = v37;
LABEL_78:
  swift_bridgeObjectRelease();
  sub_1006E0C88((unint64_t)_swiftEmptyArrayStorage);
LABEL_79:
  if ((v5 & 0x20) != 0)
  {
    uint64_t v35 = sub_10050E4A8();
    sub_1006E0C88((unint64_t)v35);
  }

LABEL_82:
  return _swiftEmptyArrayStorage;
}

double *sub_10050E4A8()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v1 = (void *)Strong;
  uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v2 || (uint64_t v3 = v2, v4 = [v2 info], v3, !v4))
  {
LABEL_22:

    return _swiftEmptyArrayStorage;
  }
  type metadata accessor for CRLGroupItem();
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  uint64_t v5 = sub_1005434BC();
  id v6 = v1;
  Swift::UInt v7 = sub_10050E89C((unint64_t)v5, v6);
  swift_bridgeObjectRelease();

  if ((unint64_t)v7 >> 62) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(((unint64_t)v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v9 = v6;
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v11 = 4;
    uint64_t v12 = &OBJC_PROTOCOL___CRLSearchTarget;
    while (1)
    {
      id v13 = ((unint64_t)v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)&v7[v11];
      id v14 = v13;
      uint64_t v15 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      swift_unknownObjectWeakAssign();
      void v27[2] = (unint64_t)v12[47].name & 0xFFFFFFFFFFFFFFE7;
      sub_10050EA84((uint64_t)v27, (uint64_t)v25, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
      char v26 = 0;

      if (v26)
      {
        sub_10050EA24((uint64_t)v25);
      }
      else
      {
        sub_10050EA84((uint64_t)v25, (uint64_t)v27, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
        sub_10050EA84((uint64_t)v27, (uint64_t)v25, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v10 = sub_100F6180C(0, *((void *)v10 + 2) + 1, 1, (unint64_t)v10);
        }
        unint64_t v17 = *((void *)v10 + 2);
        unint64_t v16 = *((void *)v10 + 3);
        if (v17 >= v16 >> 1) {
          unint64_t v10 = sub_100F6180C((double *)(v16 > 1), v17 + 1, 1, (unint64_t)v10);
        }
        *((void *)v10 + 2) = v17 + 1;
        sub_10050EA84((uint64_t)v25, (uint64_t)&v10[3 * v17 + 4], (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
        uint64_t v12 = &OBJC_PROTOCOL___CRLSearchTarget;
      }
      ++v11;
      if (v15 == v8)
      {

        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_26:
    id v20 = v6;
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  unint64_t v10 = _swiftEmptyArrayStorage;
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)v10 + 2);
  if (v21)
  {
    uint64_t v22 = (uint64_t)(v10 + 4);
    swift_bridgeObjectRetain();
    uint64_t v18 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v23 = sub_10050EA84(v22, (uint64_t)v25, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
      unint64_t v24 = sub_10050DD7C(v23);
      v27[0] = v18;
      swift_bridgeObjectRetain();
      sub_1006E0C88(v24);
      uint64_t v18 = (double *)v27[0];
      sub_10050EAE0((uint64_t)v25);
      swift_bridgeObjectRelease();
      v22 += 24;
      --v21;
    }
    while (v21);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();

    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v18;
}

unint64_t sub_10050E85C()
{
  unint64_t result = qword_101682130;
  if (!qword_101682130)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101682130);
  }
  return result;
}

double *sub_10050E89C(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      Swift::UInt v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [a2 repForInfo:v6];

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      if (v8 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10050EA24(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101671D48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10050EA84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return a2;
}

uint64_t sub_10050EAE0(uint64_t a1)
{
  return a1;
}

uint64_t destroy for CRLRepAnimator()
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for CRLRepAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10050EBD0(a1, a2, a3, (uint64_t (*)(void))&_swift_unknownObjectWeakCopyInit);
}

uint64_t assignWithCopy for CRLRepAnimator(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t initializeWithTake for CRLRepAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10050EBD0(a1, a2, a3, (uint64_t (*)(void))&_swift_unknownObjectWeakTakeInit);
}

uint64_t assignWithTake for CRLRepAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10050EBD0(a1, a2, a3, (uint64_t (*)(void))&_swift_unknownObjectWeakTakeAssign);
}

uint64_t sub_10050EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4();
  ((void (*)(uint64_t, uint64_t))a4)(v7 + 8, a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLRepAnimator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRLRepAnimator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRLRepAnimator()
{
  return &type metadata for CRLRepAnimator;
}

ValueMetadata *type metadata accessor for CRLRepAnimator.RepLayerType()
{
  return &type metadata for CRLRepAnimator.RepLayerType;
}

unint64_t sub_10050EC94()
{
  unint64_t result = qword_101671D50;
  if (!qword_101671D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671D50);
  }
  return result;
}

unint64_t sub_10050ECEC()
{
  unint64_t result = qword_101671D58;
  if (!qword_101671D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671D58);
  }
  return result;
}

unint64_t sub_10050ED44()
{
  unint64_t result = qword_101671D60;
  if (!qword_101671D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671D60);
  }
  return result;
}

unint64_t sub_10050ED9C()
{
  unint64_t result = qword_101671D68;
  if (!qword_101671D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671D68);
  }
  return result;
}

BOOL sub_10050EDF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10050EE08()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10050EE50()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10050EE7C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10050EEC0()
{
  if (*v0) {
    return 0x6574496472616F62;
  }
  else {
    return 0x6564496472616F62;
  }
}

uint64_t sub_10050EF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10050FCF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050EF3C()
{
  return 0;
}

void sub_10050EF48(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10050EF54(uint64_t a1)
{
  unint64_t v2 = sub_10050F88C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050EF90(uint64_t a1)
{
  unint64_t v2 = sub_10050F88C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050EFCC()
{
  sub_10050F994(v0 + OBJC_IVAR____TtC8Freeform41CRLTombstoneBoardItemRealTimeChangeRecord_boardIdentifier);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform41CRLTombstoneBoardItemRealTimeChangeRecord_boardItemUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10050F07C()
{
  return type metadata accessor for CRLTombstoneBoardItemRealTimeChangeRecord();
}

uint64_t type metadata accessor for CRLTombstoneBoardItemRealTimeChangeRecord()
{
  uint64_t result = qword_101671D98;
  if (!qword_101671D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10050F0D0()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10050F19C(void *a1)
{
  uint64_t v3 = sub_1005057FC(&qword_101671E60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10050F848(a1, a1[3]);
  sub_10050F88C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  sub_10050F9F0(&qword_101671E68, (void (*)(uint64_t))type metadata accessor for CRLGloballyScopedBoardIdentifier);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    type metadata accessor for UUID();
    sub_10050F9F0(&qword_101671E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t *sub_10050F3A4(void *a1)
{
  uint64_t v4 = *v1;
  unint64_t v24 = v2;
  uint64_t v25 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v9, v10);
  uint64_t v22 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1005057FC(&qword_101671E40);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v12);
  id v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_10050F88C();
  uint64_t v15 = v24;
  uint64_t v16 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v17 = v21;
    char v27 = 0;
    sub_10050F9F0(&qword_101671E50, (void (*)(uint64_t))type metadata accessor for CRLGloballyScopedBoardIdentifier);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v24 = (char *)v1 + OBJC_IVAR____TtC8Freeform41CRLTombstoneBoardItemRealTimeChangeRecord_boardIdentifier;
    sub_10050F930(v22, (uint64_t)v1 + OBJC_IVAR____TtC8Freeform41CRLTombstoneBoardItemRealTimeChangeRecord_boardIdentifier);
    char v26 = 1;
    sub_10050F9F0(&qword_101671E58, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))((uint64_t)v1 + OBJC_IVAR____TtC8Freeform41CRLTombstoneBoardItemRealTimeChangeRecord_boardItemUUID, v8, v5);
  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v16);
  return v1;
}

uint64_t CRLiOSDocumentModeHandwriting.pencilModeType.getter()
{
  return 2;
}

uint64_t *sub_10050F748@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_10050F3A4(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10050F7A0(void *a1)
{
  return sub_10050F19C(a1);
}

uint64_t sub_10050F7C4(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = sub_10050F9F0(&qword_101671E30, (void (*)(uint64_t))type metadata accessor for CRLTombstoneBoardItemRealTimeChangeRecord);
  uint64_t result = sub_10050F9F0(&qword_101671E38, (void (*)(uint64_t))type metadata accessor for CRLTombstoneBoardItemRealTimeChangeRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

void *sub_10050F848(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10050F88C()
{
  unint64_t result = qword_101671E48;
  if (!qword_101671E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671E48);
  }
  return result;
}

uint64_t _s8Freeform26AnyCRLCommandChangeContextVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10050F930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10050F994(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10050F9F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for CRLTombstoneBoardItemRealTimeChangeRecord.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLTombstoneBoardItemRealTimeChangeRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CRLTombstoneBoardItemRealTimeChangeRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10050FBA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10050FBC8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10050FBD0(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CRLTombstoneBoardItemRealTimeChangeRecord.CodingKeys()
{
  return &type metadata for CRLTombstoneBoardItemRealTimeChangeRecord.CodingKeys;
}

unint64_t sub_10050FBF0()
{
  unint64_t result = qword_101671E78;
  if (!qword_101671E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671E78);
  }
  return result;
}

unint64_t sub_10050FC48()
{
  unint64_t result = qword_101671E80;
  if (!qword_101671E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671E80);
  }
  return result;
}

unint64_t sub_10050FCA0()
{
  unint64_t result = qword_101671E88;
  if (!qword_101671E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101671E88);
  }
  return result;
}

uint64_t sub_10050FCF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6564496472616F62 && a2 == 0xEF7265696669746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574496472616F62 && a2 == 0xED0000444955556DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10050FE30()
{
  sub_100510028(v0 + OBJC_IVAR____TtC8Freeform32CRLCommandHistoryItemDatabaseRow_boardIdentifier);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform32CRLCommandHistoryItemDatabaseRow_uuid;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100510084(*(void *)(v0 + OBJC_IVAR____TtC8Freeform32CRLCommandHistoryItemDatabaseRow_commandHistoryItemData), *(void *)(v0 + OBJC_IVAR____TtC8Freeform32CRLCommandHistoryItemDatabaseRow_commandHistoryItemData + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_10050FEF4()
{
  return type metadata accessor for CRLCommandHistoryItemDatabaseRow();
}

uint64_t type metadata accessor for CRLCommandHistoryItemDatabaseRow()
{
  uint64_t result = qword_101671EB8;
  if (!qword_101671EB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10050FF48()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100510028(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100510084(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_1005100DC()
{
  uint64_t v1 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v1 - 8, v2);
  unsigned int v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0 + OBJC_IVAR____TtC8Freeform22AASUserSamplingManager_userId;
  swift_beginAccess();
  sub_1005107BC(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100510824((uint64_t)v4);
    *(unsigned char *)(v0 + 16) = 0;
    return;
  }
  uint64_t v41 = v0;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v38 = v5;
  v11(v9, v4, v5);
  uint64_t v40 = v9;
  unint64_t v12 = sub_100510884();
  if (qword_10166FA40 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = (void *)static OS_os_log.crlAppAnalytics;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  uint64_t v39 = v12;
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &protocol witness table for Int;
  uint64_t v15 = self;
  id v16 = v13;
  id v17 = [v15 standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  unsigned int v19 = [v17 BOOLForKey:v18];

  if (v19)
  {
    id v20 = (id)static OS_os_log.crlAppAnalytics;
    uint64_t v21 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v20, (uint64_t)&_mh_execute_header, v21, (uint64_t)"Disable appAnalytics sampling", 29, 2, (uint64_t)_swiftEmptyArrayStorage);

    uint64_t v22 = 100;
  }
  else
  {
    uint64_t v22 = 50;
  }
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 104) = &protocol witness table for Int;
  *(void *)(inited + 72) = v22;
  uint64_t v23 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v23, (uint64_t)"Hash Value: %d, Sampling Rate: %d", 33, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  id v24 = [v15 standardUserDefaults];
  NSString v25 = String._bridgeToObjectiveC()();
  unsigned int v26 = [v24 BOOLForKey:v25];

  if (!v26) {
    goto LABEL_12;
  }
  id v27 = (id)static OS_os_log.crlAppAnalytics;
  uint64_t v28 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v27, (uint64_t)&_mh_execute_header, v28, (uint64_t)"Disable appAnalytics sampling", 29, 2, (uint64_t)_swiftEmptyArrayStorage);

  int64_t v29 = v39;
  uint64_t v30 = v41;
  uint64_t v31 = v40;
  if (v39 >= 100)
  {
    do
    {
      id v32 = (id)static OS_os_log.crlAppAnalytics;
      uint64_t v33 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v32, (uint64_t)&_mh_execute_header, v33, (uint64_t)"Stop AppAnalytics", 17, 2, (uint64_t)_swiftEmptyArrayStorage);

      *(unsigned char *)(v30 + 16) = 0;
      if (!((unint64_t)v29 >> 31)) {
        goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      int64_t v29 = v39;
      uint64_t v30 = v41;
      uint64_t v31 = v40;
    }
    while (v39 > 49);
  }
  id v34 = (id)static OS_os_log.crlAppAnalytics;
  uint64_t v35 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v34, (uint64_t)&_mh_execute_header, v35, (uint64_t)"Starting AppAnalytics", 21, 2, (uint64_t)_swiftEmptyArrayStorage);

  *(unsigned char *)(v30 + 16) = 1;
  type metadata accessor for TrackingConsent();
  char v36 = (void *)static TrackingConsent.shared.getter();
  TrackingConsent.allow()();

  if (v29 >= (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v38);
    *(_DWORD *)(v30 + 2UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v29;
    *(unsigned char *)(v30 + 24) = 0;
    return;
  }
  __break(1u);
}

uint64_t sub_100510608()
{
  sub_100510824(v0 + OBJC_IVAR____TtC8Freeform22AASUserSamplingManager_userId);

  return swift_deallocClassInstance();
}

uint64_t sub_10051066C()
{
  return type metadata accessor for AASUserSamplingManager();
}

uint64_t type metadata accessor for AASUserSamplingManager()
{
  uint64_t result = qword_101671F80;
  if (!qword_101671F80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1005106C0()
{
  sub_100510764();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100510764()
{
  if (!qword_101671F90)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101671F90);
    }
  }
}

uint64_t sub_1005107BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100510824(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC((uint64_t *)&unk_101674520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100510884()
{
  uint64_t v0 = type metadata accessor for SHA256();
  uint64_t v31 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  unint64_t v12 = (char *)&v28 - v11;
  unint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = sub_1009B6BA8(v13, v14);
  unint64_t v17 = v16;
  sub_100510DA4((unint64_t *)&qword_101672020, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(v17 >> 62)
  {
    case 1uLL:
      uint64_t v29 = v4;
      if (v15 >> 32 < (int)v15) {
        goto LABEL_20;
      }
      uint64_t v30 = v5;
      sub_100510D4C(v15, v17);
      uint64_t v5 = v30;
      sub_10099EAEC((int)v15, v15 >> 32);
      sub_100510084(v15, v17);
      uint64_t v4 = v29;
      break;
    case 2uLL:
      uint64_t v30 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = *(void *)(v15 + 16);
      uint64_t v29 = *(void *)(v15 + 24);
      sub_100510D4C(v15, v17);
      swift_retain();
      swift_retain();
      sub_10099EAEC(v19, v29);
      uint64_t v4 = v18;
      uint64_t v5 = v30;
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      *(void *)((char *)&v32 + 6) = 0;
      *(void *)&long long v32 = 0;
      goto LABEL_7;
    default:
      *(void *)&long long v32 = v15;
      WORD4(v32) = v17;
      BYTE10(v32) = BYTE2(v17);
      BYTE11(v32) = BYTE3(v17);
      BYTE12(v32) = BYTE4(v17);
      BYTE13(v32) = BYTE5(v17);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      sub_100510084(v15, v17);
      break;
  }
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v3, v0);
  sub_100510084(v15, v17);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v12, v4);
  sub_100510DA4(&qword_101672028, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v20 = *((void *)&v32 + 1);
  uint64_t v21 = *(void *)(v32 + 16);
  if (*((void *)&v32 + 1) != v21)
  {
    if (*((uint64_t *)&v32 + 1) < v21)
    {
      uint64_t v23 = v5;
      unint64_t v24 = 0;
      unint64_t v25 = v21 - *((void *)&v32 + 1);
      if ((unint64_t)v21 < *((void *)&v32 + 1)) {
        unint64_t v25 = 0;
      }
      while (v25 > v21 + ~*((void *)&v32 + 1))
      {
        uint64_t v26 = *(unsigned __int8 *)(v32 + v20++ + 32);
        unint64_t v24 = v26 | (v24 << 8);
        if (v21 == v20)
        {
          swift_bridgeObjectRelease();
          unint64_t v22 = v24 % 0x64;
          uint64_t v5 = v23;
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  unint64_t v22 = 0;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  return v22;
}

uint64_t sub_100510D4C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100510DA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100510DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRLBoardIdentifierStorage(0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v55 - v24;
  uint64_t v27 = __chkstk_darwin(v23, v26);
  uint64_t v29 = (char *)&v55 - v28;
  __chkstk_darwin(v27, v30);
  long long v32 = (char *)&v55 - v31;
  uint64_t v60 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v33);
  uint64_t v35 = (char *)&v55 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = sub_10079BD64(a2, a1);
  if (v37 >> 60 != 15)
  {
    unint64_t v58 = v37;
    uint64_t v59 = a1;
    if (!__OFADD__(a2, 4))
    {
      uint64_t v57 = v36;
      uint64_t v38 = sub_10079BE94(a2 + 4, v59);
      if ((v39 & 1) == 0)
      {
        if (v38 != 1)
        {
          if (!v38)
          {
            uint64_t v41 = (uint64_t)v57;
            unint64_t v40 = v58;
            sub_100510D4C((uint64_t)v57, v58);
            sub_100753724(v41, v40, (uint64_t)v16);
            a1 = v62;
            sub_1005138CC((uint64_t)v16, (uint64_t)v29, type metadata accessor for CRLBoardIdentifierStorage);
            sub_1005138CC((uint64_t)v29, (uint64_t)v32, type metadata accessor for CRLBoardIdentifier);
            swift_release();
            sub_100514260(v41, v40);
            sub_1005138CC((uint64_t)v32, (uint64_t)v35, type metadata accessor for CRLBoardIdentifier);
            uint64_t v53 = v60;
            uint64_t v52 = v61;
LABEL_16:
            swift_storeEnumTagMultiPayload();
            sub_1005138CC((uint64_t)v35, v52, type metadata accessor for CRLAssetReferrerIdentifier);
            uint64_t v42 = 0;
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56))(v52, v42, 1, v53);
          }
          a1 = v62;
          if (qword_10166F9C8 == -1)
          {
LABEL_14:
            swift_beginAccess();
            id v46 = (id)static OS_os_log.crlDefault;
            uint64_t v47 = static os_log_type_t.error.getter();
            sub_100BAC898((uint64_t)v46, (uint64_t)&_mh_execute_header, v47, (uint64_t)"Invalid CRLAssetReferrerIdentifier type.", 40, 2, (uint64_t)_swiftEmptyArrayStorage);

            swift_release();
            sub_100514260((uint64_t)v57, v58);
            uint64_t v42 = 1;
            uint64_t v53 = v60;
            uint64_t v52 = v61;
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56))(v52, v42, 1, v53);
          }
LABEL_18:
          swift_once();
          goto LABEL_14;
        }
        uint64_t v44 = sub_10079BD64(a2 + 1, v59);
        if (v45 >> 60 != 15)
        {
          uint64_t v48 = (uint64_t)v44;
          unint64_t v49 = v45;
          uint64_t v51 = (uint64_t)v57;
          unint64_t v50 = v58;
          sub_100510D4C((uint64_t)v57, v58);
          UUID.init(crl_data:)(v51, v50);
          sub_100753724(v48, v49, (uint64_t)v13);
          sub_1005138CC((uint64_t)v13, (uint64_t)v21, type metadata accessor for CRLBoardIdentifierStorage);
          sub_1005138CC((uint64_t)v21, (uint64_t)v25, type metadata accessor for CRLBoardIdentifier);
          swift_release();
          sub_100514260((uint64_t)v57, v58);
          uint64_t v54 = (uint64_t)&v35[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v35, v8, v56);
          sub_1005138CC((uint64_t)v25, v54, type metadata accessor for CRLBoardIdentifier);
          uint64_t v53 = v60;
          uint64_t v52 = v61;
          a1 = v62;
          goto LABEL_16;
        }
      }
      swift_release();
      sub_100514260((uint64_t)v57, v58);
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_18;
  }
  swift_release();
LABEL_9:
  uint64_t v42 = 1;
  uint64_t v53 = v60;
  uint64_t v52 = v61;
  a1 = v62;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56))(v52, v42, 1, v53);
}

uint64_t sub_100511430()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005141F8(v1, (uint64_t)v14, type metadata accessor for CRLAssetReferrerIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = &v14[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v14, v2);
    uint64_t v15 = UUID.crl_data()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    sub_1005138CC((uint64_t)v14, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    uint64_t v15 = sub_100753FC0();
  }
  sub_100513934((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  return v15;
}

uint64_t sub_100511688()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005141F8(v0, (uint64_t)v13, type metadata accessor for CRLAssetReferrerIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = (uint64_t)&v13[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v13, v1);
    sub_1005138CC(v14, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(1uLL);
    sub_100513830((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100513934((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    sub_1005138CC((uint64_t)v13, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(0);
    sub_100513830((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return sub_100513934((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  }
}

uint64_t sub_1005119F0(void *a1)
{
  uint64_t v48 = sub_1005057FC(&qword_1016721F8);
  uint64_t v41 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v2);
  uint64_t v47 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC(&qword_101672200);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v12 = __chkstk_darwin(v42, v11);
  uint64_t v46 = (uint64_t)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_1005057FC(&qword_101672208);
  uint64_t v21 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v22);
  uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050F848(a1, a1[3]);
  sub_100513788();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1005141F8(v45, (uint64_t)v20, type metadata accessor for CRLAssetReferrerIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = v21;
    uint64_t v26 = (uint64_t)&v20[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
    uint64_t v28 = v38;
    uint64_t v27 = v39;
    uint64_t v29 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v20, v40);
    sub_1005138CC(v26, v46, type metadata accessor for CRLBoardIdentifier);
    char v52 = 1;
    sub_1005137DC();
    uint64_t v30 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v51 = 0;
    sub_100513830(&qword_101671E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = v44;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v31)
    {
      char v50 = 1;
      sub_100513830((unint64_t *)&unk_1016772E0, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v48);
    sub_100513934(v46, type metadata accessor for CRLBoardIdentifier);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v24, v30);
  }
  else
  {
    sub_1005138CC((uint64_t)v20, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
    char v49 = 0;
    sub_100513878();
    uint64_t v33 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_100513830((unint64_t *)&unk_1016772E0, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
    uint64_t v34 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v34);
    sub_100513934((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v33);
  }
}

uint64_t sub_100512004@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v48 = sub_1005057FC(&qword_1016721C8);
  uint64_t v45 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v3);
  char v51 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_1016721D0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v47 = v6;
  __chkstk_darwin(v5, v7);
  char v50 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_1016721D8);
  uint64_t v49 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v42 - v20;
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v42 - v23;
  uint64_t v25 = a1[3];
  char v52 = a1;
  sub_10050F848(a1, v25);
  sub_100513788();
  uint64_t v26 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26) {
    return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v52);
  }
  uint64_t v42 = v24;
  uint64_t v43 = v21;
  uint64_t v28 = v50;
  uint64_t v27 = v51;
  uint64_t v53 = v13;
  uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v29 + 16) != 1)
  {
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v33;
    sub_1005057FC(&qword_1016771E0);
    uint64_t *v34 = v53;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v9);
    return _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v52);
  }
  if (*(unsigned char *)(v29 + 32))
  {
    char v57 = 1;
    sub_1005137DC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for UUID();
    char v56 = 0;
    sub_100513830(&qword_101671E58, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = v17;
    uint64_t v31 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1005057FC(&qword_101674240);
    type metadata accessor for CRLBoardIdentifier(0);
    uint64_t v47 = (uint64_t)v30;
    uint64_t v37 = v27;
    char v55 = 1;
    sub_100513830((unint64_t *)&unk_101677290, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v38 = v49;
    char v50 = 0;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v9);
    uint64_t v39 = v47;
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = (uint64_t)v52;
  }
  else
  {
    char v54 = 0;
    sub_100513878();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for CRLBoardIdentifier(0);
    sub_100513830((unint64_t *)&unk_101677290, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
    uint64_t v39 = (uint64_t)v43;
    uint64_t v36 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v9);
    uint64_t v40 = (uint64_t)v52;
    char v50 = 0;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = (uint64_t)v42;
  sub_1005138CC(v39, (uint64_t)v42, type metadata accessor for CRLAssetReferrerIdentifier);
  sub_1005138CC(v41, v44, type metadata accessor for CRLAssetReferrerIdentifier);
  return _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v40);
}

Swift::Int UUID.UUIDCodingError.hashValue.getter()
{
  return Hasher._finalize()();
}

void UUID.UUIDCodingError.hash(into:)()
{
}

Swift::Int sub_1005127B8()
{
  return Hasher._finalize()();
}

uint64_t sub_1005127F8()
{
  return 12383;
}

uint64_t sub_100512804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_100512884(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100512890(uint64_t a1)
{
  unint64_t v2 = sub_100513878();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005128CC(uint64_t a1)
{
  unint64_t v2 = sub_100513878();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100512910()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10051292C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005147D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100512954(uint64_t a1)
{
  unint64_t v2 = sub_1005137DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100512990(uint64_t a1)
{
  unint64_t v2 = sub_1005137DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005129CC()
{
  if (*v0) {
    return 0x6574496472616F62;
  }
  else {
    return 0x6472616F62;
  }
}

uint64_t sub_100512A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100514894(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100512A30(uint64_t a1)
{
  unint64_t v2 = sub_100513788();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100512A6C(uint64_t a1)
{
  unint64_t v2 = sub_100513788();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100512AA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100512004(a1, a2);
}

uint64_t sub_100512AC0(void *a1)
{
  return sub_1005119F0(a1);
}

Swift::Int sub_100512AD8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100512B1C()
{
  return Hasher._finalize()();
}

uint64_t sub_100512B5C()
{
  sub_100513934(v0 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerIdentifier, type metadata accessor for CRLAssetReferrerIdentifier);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100512C34()
{
  return type metadata accessor for CRLAssetReferenceDatabaseRow(0);
}

uint64_t type metadata accessor for CRLAssetReferenceDatabaseRow(uint64_t a1)
{
  return sub_100512D5C(a1, qword_101672058);
}

uint64_t sub_100512C5C()
{
  uint64_t result = type metadata accessor for CRLAssetReferrerIdentifier(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CRLAssetReferrerIdentifier(uint64_t a1)
{
  return sub_100512D5C(a1, qword_101672168);
}

uint64_t sub_100512D5C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLAssetUnsyncedChanges()
{
  return &type metadata for CRLAssetUnsyncedChanges;
}

void *sub_100512DA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, v3, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v3 = (void *)((char *)v3 + v9);
      v8((void *)((char *)a1 + v9), v3, v7);
      uint64_t v11 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v12 = &v10[v11];
    }
    else
    {
      uint64_t v11 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v12 = (char *)a1 + v11;
    }
    uint64_t v13 = (void *)((char *)v3 + v11);
    uint64_t v14 = v13[1];
    *(void *)uint64_t v12 = *v13;
    *((void *)v12 + 1) = v14;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100512F20(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_1005057FC(&qword_101674240);
    v4(a1 + *(int *)(v5 + 48), v3);
  }
  type metadata accessor for CRLBoardIdentifierStorage(0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100512FE8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
    uint64_t v8 = a1 + v7;
    a2 += v7;
    v6(a1 + v7, a2, v5);
    uint64_t v9 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
    uint64_t v10 = (void *)(v8 + v9);
  }
  else
  {
    uint64_t v9 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
    uint64_t v10 = (void *)(a1 + v9);
  }
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10051310C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a2;
    sub_100513934(a1, type metadata accessor for CRLAssetReferrerIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, v3, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
      uint64_t v8 = a1 + v7;
      v3 += v7;
      v6(a1 + v7, v3, v5);
      uint64_t v9 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v10 = (void *)(v8 + v9);
    }
    else
    {
      uint64_t v9 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v10 = (void *)(a1 + v9);
    }
    uint64_t v11 = (void *)(v3 + v9);
    void *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100513264(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    v6(a1 + v7, v9, v5);
    uint64_t v10 = type metadata accessor for CRLBoardIdentifierStorage(0);
    *(_OWORD *)(v8 + *(int *)(v10 + 20)) = *(_OWORD *)(v9 + *(int *)(v10 + 20));
  }
  else
  {
    uint64_t v11 = type metadata accessor for CRLBoardIdentifierStorage(0);
    *(_OWORD *)(a1 + *(int *)(v11 + 20)) = *(_OWORD *)(a2 + *(int *)(v11 + 20));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100513370(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100513934(a1, type metadata accessor for CRLAssetReferrerIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      v6(a1 + v7, v9, v5);
      uint64_t v10 = type metadata accessor for CRLBoardIdentifierStorage(0);
      *(_OWORD *)(v8 + *(int *)(v10 + 20)) = *(_OWORD *)(v9 + *(int *)(v10 + 20));
    }
    else
    {
      uint64_t v11 = type metadata accessor for CRLBoardIdentifierStorage(0);
      *(_OWORD *)(a1 + *(int *)(v11 + 20)) = *(_OWORD *)(a2 + *(int *)(v11 + 20));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for SyncEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1005134F4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100513504()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      void v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005135E0()
{
  return sub_100513830(&qword_1016721A0, (void (*)(uint64_t))type metadata accessor for CRLAssetReferrerIdentifier);
}

unint64_t sub_10051362C()
{
  unint64_t result = qword_1016721A8;
  if (!qword_1016721A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721A8);
  }
  return result;
}

unint64_t sub_100513684()
{
  unint64_t result = qword_1016721B0;
  if (!qword_1016721B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721B0);
  }
  return result;
}

unint64_t sub_1005136DC()
{
  unint64_t result = qword_1016721B8;
  if (!qword_1016721B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721B8);
  }
  return result;
}

unint64_t sub_100513734()
{
  unint64_t result = qword_1016721C0;
  if (!qword_1016721C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721C0);
  }
  return result;
}

unint64_t sub_100513788()
{
  unint64_t result = qword_1016721E0;
  if (!qword_1016721E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721E0);
  }
  return result;
}

unint64_t sub_1005137DC()
{
  unint64_t result = qword_1016721E8;
  if (!qword_1016721E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721E8);
  }
  return result;
}

uint64_t sub_100513830(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100513878()
{
  unint64_t result = qword_1016721F0;
  if (!qword_1016721F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016721F0);
  }
  return result;
}

uint64_t sub_1005138CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100513934(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100513994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void (***)(char *, uint64_t, uint64_t))(v4 - 8);
  uint64_t v78 = v4;
  int64x2_t v79 = v5;
  __chkstk_darwin(v4, v6);
  CGRect v77 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v72 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v73 = (uint64_t)&v72 - v13;
  __chkstk_darwin(v14, v15);
  uint64_t v75 = (uint64_t)&v72 - v16;
  __chkstk_darwin(v17, v18);
  uint64_t v76 = (uint64_t)&v72 - v19;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v72 - v22;
  __chkstk_darwin(v24, v25);
  uint64_t v74 = (uint64_t)&v72 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v72 - v29;
  uint64_t v31 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v72 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v36);
  uint64_t v38 = (char *)&v72 - v37;
  uint64_t v39 = sub_1005057FC(&qword_101672210);
  __chkstk_darwin(v39 - 8, v40);
  uint64_t v42 = (char *)&v72 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (uint64_t)&v42[*(int *)(v43 + 56)];
  sub_1005141F8(a1, (uint64_t)v42, type metadata accessor for CRLAssetReferrerIdentifier);
  sub_1005141F8(a2, v44, type metadata accessor for CRLAssetReferrerIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1005141F8((uint64_t)v42, (uint64_t)v34, type metadata accessor for CRLAssetReferrerIdentifier);
    uint64_t v45 = *(int *)(sub_1005057FC(&qword_101674240) + 48);
    uint64_t v46 = (uint64_t)&v34[v45];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v47 = v44 + v45;
      uint64_t v48 = v79;
      uint64_t v49 = v77;
      uint64_t v50 = v44;
      uint64_t v51 = v78;
      v79[4](v77, v50, v78);
      uint64_t v52 = v76;
      sub_1005138CC(v46, v76, type metadata accessor for CRLBoardIdentifier);
      uint64_t v53 = v75;
      sub_1005138CC(v47, v75, type metadata accessor for CRLBoardIdentifier);
      char v54 = static UUID.== infix(_:_:)();
      char v55 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      ((void (*)(char *, uint64_t))v55)(v34, v51);
      if (v54)
      {
        int64x2_t v79 = v55;
        char v56 = static UUID.== infix(_:_:)();
        uint64_t v57 = v73;
        sub_1005141F8(v52, v73, type metadata accessor for CRLBoardIdentifier);
        uint64_t v58 = v72;
        sub_1005141F8(v53, v72, type metadata accessor for CRLBoardIdentifier);
        if (v56)
        {
          uint64_t v59 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          uint64_t v60 = *(void *)(v57 + v59);
          uint64_t v61 = *(void *)(v57 + v59 + 8);
          uint64_t v62 = (void *)(v58 + v59);
          if (v60 == *v62 && v61 == v62[1])
          {
            sub_100513934(v58, type metadata accessor for CRLBoardIdentifier);
            sub_100513934(v57, type metadata accessor for CRLBoardIdentifier);
            sub_100513934(v53, type metadata accessor for CRLBoardIdentifier);
            sub_100513934(v52, type metadata accessor for CRLBoardIdentifier);
            ((void (*)(char *, uint64_t))v79)(v49, v51);
LABEL_20:
            sub_100513934((uint64_t)v42, type metadata accessor for CRLAssetReferrerIdentifier);
            return 1;
          }
          char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100513934(v58, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v57, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v53, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v52, type metadata accessor for CRLBoardIdentifier);
          ((void (*)(char *, uint64_t))v79)(v49, v51);
          if (v71) {
            goto LABEL_20;
          }
        }
        else
        {
          sub_100513934(v58, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v57, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v53, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v52, type metadata accessor for CRLBoardIdentifier);
          ((void (*)(char *, uint64_t))v79)(v49, v51);
        }
      }
      else
      {
        sub_100513934(v53, type metadata accessor for CRLBoardIdentifier);
        sub_100513934(v52, type metadata accessor for CRLBoardIdentifier);
        ((void (*)(char *, uint64_t))v55)(v49, v51);
      }
LABEL_22:
      sub_100513934((uint64_t)v42, type metadata accessor for CRLAssetReferrerIdentifier);
      return 0;
    }
    sub_100513934((uint64_t)&v34[v45], type metadata accessor for CRLBoardIdentifier);
    ((void (*)(char *, uint64_t))v79[1])(v34, v78);
  }
  else
  {
    sub_1005141F8((uint64_t)v42, (uint64_t)v38, type metadata accessor for CRLAssetReferrerIdentifier);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1005138CC(v44, (uint64_t)v30, type metadata accessor for CRLBoardIdentifier);
      char v63 = static UUID.== infix(_:_:)();
      uint64_t v64 = v74;
      sub_1005141F8((uint64_t)v38, v74, type metadata accessor for CRLBoardIdentifier);
      sub_1005141F8((uint64_t)v30, (uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
      if (v63)
      {
        uint64_t v65 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        uint64_t v66 = *(void *)(v64 + v65);
        uint64_t v67 = *(void *)(v64 + v65 + 8);
        uint64_t v68 = &v23[v65];
        if (v66 == *(void *)v68 && v67 == *((void *)v68 + 1))
        {
          sub_100513934((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
          sub_100513934(v64, type metadata accessor for CRLBoardIdentifier);
          sub_100513934((uint64_t)v30, type metadata accessor for CRLBoardIdentifier);
          sub_100513934((uint64_t)v38, type metadata accessor for CRLBoardIdentifier);
          goto LABEL_20;
        }
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_100513934((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
        sub_100513934(v64, type metadata accessor for CRLBoardIdentifier);
        sub_100513934((uint64_t)v30, type metadata accessor for CRLBoardIdentifier);
        sub_100513934((uint64_t)v38, type metadata accessor for CRLBoardIdentifier);
        if (v69) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_100513934((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
        sub_100513934(v64, type metadata accessor for CRLBoardIdentifier);
        sub_100513934((uint64_t)v30, type metadata accessor for CRLBoardIdentifier);
        sub_100513934((uint64_t)v38, type metadata accessor for CRLBoardIdentifier);
      }
      goto LABEL_22;
    }
    sub_100513934((uint64_t)v38, type metadata accessor for CRLBoardIdentifier);
  }
  sub_100514198((uint64_t)v42);
  return 0;
}

uint64_t sub_100514198(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101672210);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005141F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100514260(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100510084(a1, a2);
  }
  return a1;
}

ValueMetadata *type metadata accessor for CRLAssetReferrerIdentifier.CodingKeys()
{
  return &type metadata for CRLAssetReferrerIdentifier.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CRLAssetReferrerIdentifier.BoardCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CRLAssetReferrerIdentifier.BoardCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10051437CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLAssetReferrerIdentifier.BoardCodingKeys()
{
  return &type metadata for CRLAssetReferrerIdentifier.BoardCodingKeys;
}

unsigned char *_s8Freeform26CRLAssetReferrerIdentifierO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100514480);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLAssetReferrerIdentifier.BoardItemCodingKeys()
{
  return &type metadata for CRLAssetReferrerIdentifier.BoardItemCodingKeys;
}

unint64_t sub_1005144BC()
{
  unint64_t result = qword_101672218;
  if (!qword_101672218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672218);
  }
  return result;
}

unint64_t sub_100514514()
{
  unint64_t result = qword_101672220;
  if (!qword_101672220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672220);
  }
  return result;
}

unint64_t sub_10051456C()
{
  unint64_t result = qword_101672228;
  if (!qword_101672228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672228);
  }
  return result;
}

unint64_t sub_1005145C4()
{
  unint64_t result = qword_101672230;
  if (!qword_101672230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672230);
  }
  return result;
}

unint64_t sub_10051461C()
{
  unint64_t result = qword_101672238;
  if (!qword_101672238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672238);
  }
  return result;
}

unint64_t sub_100514674()
{
  unint64_t result = qword_101672240;
  if (!qword_101672240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672240);
  }
  return result;
}

unint64_t sub_1005146CC()
{
  unint64_t result = qword_101672248;
  if (!qword_101672248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672248);
  }
  return result;
}

unint64_t sub_100514724()
{
  unint64_t result = qword_101672250;
  if (!qword_101672250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672250);
  }
  return result;
}

unint64_t sub_10051477C()
{
  unint64_t result = qword_101672258;
  if (!qword_101672258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672258);
  }
  return result;
}

uint64_t sub_1005147D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100514894(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6472616F62 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574496472616F62 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_10051499C()
{
  qword_101672260 = 0x4028000000000000;
}

void sub_1005149AC()
{
  qword_101672268 = 0x4028000000000000;
}

UIFontWeight sub_1005149BC()
{
  UIFontWeight result = UIFontWeightBold;
  qword_101672270 = *(void *)&UIFontWeightBold;
  return result;
}

UIFontTextStyle sub_1005149D4()
{
  qword_101672278 = (uint64_t)UIFontTextStyleSubheadline;
  return UIFontTextStyleSubheadline;
}

id sub_1005149EC(uint64_t a1)
{
  return sub_100514A60(a1, (SEL *)&selRef_labelColor, &qword_101672280);
}

void sub_100514A00()
{
  qword_101672288 = 0;
}

void sub_100514A0C()
{
  qword_101672290 = 0x4028000000000000;
}

UIFontWeight sub_100514A1C()
{
  UIFontWeight result = UIFontWeightRegular;
  qword_101672298 = *(void *)&UIFontWeightRegular;
  return result;
}

UIFontTextStyle sub_100514A34()
{
  qword_1016722A0 = (uint64_t)UIFontTextStyleFootnote;
  return UIFontTextStyleFootnote;
}

id sub_100514A4C(uint64_t a1)
{
  return sub_100514A60(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1016722A8);
}

id sub_100514A60(uint64_t a1, SEL *a2, void *a3)
{
  id result = [self *a2];
  *a3 = result;
  return result;
}

void sub_100514AA4(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v11 = type metadata accessor for CRLMovieItemAssetData(0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [v5 movieItem];
  if (v15)
  {
    uint64_t v16 = v15;
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_1016A4070);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v17 = (uint64_t *)&v14[*(int *)(v11 + 40)];
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    swift_bridgeObjectRetain();
    sub_100515888((uint64_t)v14);

    if (v18)
    {
      if (qword_10166EAE0 != -1) {
        swift_once();
      }
      CGFloat v20 = *(double *)&qword_101672260;
      if (qword_10166EAE8 != -1) {
        swift_once();
      }
      CGFloat v21 = *(double *)&qword_101672268;
      if (qword_10166EAF0 != -1) {
        swift_once();
      }
      double v22 = *(double *)&qword_101672270;
      if (qword_10166EAF8 != -1) {
        swift_once();
      }
      uint64_t v23 = qword_101672278;
      if (qword_10166EB00 != -1) {
        swift_once();
      }
      sub_100515CF8(v19, v18, v23, (void *)qword_101672280, a1, 1, v21, v20, v22, a2, a3, a4, a5);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100514E18(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  uint64_t v13 = type metadata accessor for CRLMovieItemAssetData(0);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [v6 movieItem];
  if (v17)
  {
    uint64_t v18 = v17;
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_1016A4070);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v19 = (uint64_t *)&v16[*(int *)(v13 + 44)];
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    swift_bridgeObjectRetain();
    sub_100515888((uint64_t)v16);

    if (v20)
    {
      if (qword_10166EB08 != -1) {
        swift_once();
      }
      double v22 = *(double *)&qword_101672288;
      if (qword_10166EB10 != -1) {
        swift_once();
      }
      CGFloat v23 = *(double *)&qword_101672290;
      if (qword_10166EB18 != -1) {
        swift_once();
      }
      double v24 = *(double *)&qword_101672298;
      if (qword_10166EB20 != -1) {
        swift_once();
      }
      double v25 = v22 + a6;
      uint64_t v26 = qword_1016722A0;
      if (qword_10166EB28 != -1) {
        swift_once();
      }
      sub_100515CF8(v21, v20, v26, (void *)qword_1016722A8, a1, 0, v23, v25, v24, a2, a3, a4, a5);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1005151A0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = type metadata accessor for CRLMovieItemAssetData(0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [v4 movieItem];
  if (v13)
  {
    uint64_t v14 = v13;
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_1016A4070);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v15 = (uint64_t *)&v12[*(int *)(v9 + 44)];
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    swift_bridgeObjectRetain();
    sub_100515888((uint64_t)v12);

    if (v16)
    {
      if (qword_10166EB18 != -1) {
        swift_once();
      }
      double v18 = *(double *)&qword_101672298;
      if (qword_10166EB20 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_1016722A0;
      if (qword_10166EB28 != -1) {
        swift_once();
      }
      id v20 = sub_1005158E4(v18, v17, v16, v19, (void *)qword_1016722A8, 0);
      swift_bridgeObjectRelease();
      v26.origin.CGFloat x = a1;
      v26.origin.CGFloat y = a2;
      v26.size.CGFloat width = a3;
      v26.size.CGFloat height = a4;
      double Width = CGRectGetWidth(v26);
      if (qword_10166EB10 != -1) {
        swift_once();
      }
      double v22 = Width - (*(double *)&qword_101672290 + *(double *)&qword_101672290);
      v27.origin.CGFloat x = a1;
      v27.origin.CGFloat y = a2;
      v27.size.CGFloat width = a3;
      v27.size.CGFloat height = a4;
      double Height = CGRectGetHeight(v27);
      if (v22 <= 0.0 || Height <= 0.0)
      {
      }
      else
      {
        double v24 = CTLineCreateWithAttributedString((CFAttributedStringRef)v20);
        CTLineGetBoundsWithOptions(v24, 0);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100515510(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for CRLMovieItemAssetData(0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [v2 movieItem];
  if (v9)
  {
    uint64_t v10 = v9;
    swift_beginAccess();
    swift_retain();
    sub_1005057FC(&qword_1016A4070);
    CRRegister.wrappedValue.getter();
    swift_endAccess();
    swift_release();
    uint64_t v11 = (uint64_t *)&v8[*(int *)(v5 + 40)];
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100515888((uint64_t)v8);

    if (v13)
    {
      if (qword_10166EAF0 != -1) {
        swift_once();
      }
      double v14 = *(double *)&qword_101672270;
      if (qword_10166EAF8 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_101672278;
      if (qword_10166EB00 != -1) {
        swift_once();
      }
      CFAttributedStringRef v16 = (const __CFAttributedString *)sub_1005158E4(v14, v12, v13, v15, (void *)qword_101672280, 0);
      swift_bridgeObjectRelease();
      if (qword_10166EAE8 != -1) {
        swift_once();
      }
      double v17 = a1 - (*(double *)&qword_101672268 + *(double *)&qword_101672268);
      if (qword_10166EAE0 != -1) {
        swift_once();
      }
      if (v17 > 0.0 && a2 - *(double *)&qword_101672260 > 0.0)
      {
        double v18 = CTLineCreateWithAttributedString(v16);
        CTLineGetBoundsWithOptions(v18, 0);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100515888(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLMovieItemAssetData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1005158E4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v9 = [self preferredFontForTextStyle:a4];
  id v10 = v9;
  if (UIFontWeightRegular != a1)
  {
    id v11 = v9;
    id v10 = sub_100B047B4(a1);
  }
  sub_1005057FC((uint64_t *)&unk_101687FB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117DF40;
  *(void *)(inited + 32) = NSFontAttributeName;
  unint64_t v13 = sub_100515BB8();
  *(void *)(inited + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v10;
  *(void *)(inited + 64) = v13;
  *(void *)(inited + 72) = NSForegroundColorAttributeName;
  double v14 = NSFontAttributeName;
  id v15 = v10;
  CFAttributedStringRef v16 = NSForegroundColorAttributeName;
  id v17 = [a5 CGColor];
  type metadata accessor for CGColor(0);
  uint64_t v19 = v18;
  *(void *)(inited + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v17;
  *(void *)(inited + 104) = v18;
  *(void *)(inited + 112) = NSBackgroundColorAttributeName;
  id v20 = self;
  uint64_t v21 = NSBackgroundColorAttributeName;
  id v22 = [v20 clearColor];
  id v23 = [v22 CGColor];

  *(void *)(inited + 144) = v19;
  *(void *)(inited + 12UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v23;
  sub_100A38A68(inited);
  id v24 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_100515BF8();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v24 initWithString:v25 attributes:isa];

  if (a6)
  {
    [a6 setFont:v15];
    [v15 pointSize];
    [a6 setFontSize:];
    id v28 = [a5 CGColor];
    [a6 setForegroundColor:v28];

    id v29 = v27;
    [a6 setString:v29];
  }
  return v27;
}

unint64_t sub_100515BB8()
{
  unint64_t result = qword_101695490;
  if (!qword_101695490)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101695490);
  }
  return result;
}

unint64_t sub_100515BF8()
{
  unint64_t result = qword_1016837E0;
  if (!qword_1016837E0)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016837E0);
  }
  return result;
}

double sub_100515C50(CFAttributedStringRef attrString, char a2, double a3, double a4)
{
  double height = 0.0;
  if (a3 > 0.0 && a4 > 0.0)
  {
    uint64_t v8 = CTLineCreateWithAttributedString(attrString);
    CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v8, 0);
    double width = BoundsWithOptions.size.width;
    double height = BoundsWithOptions.size.height;

    if (height >= a4)
    {
      return 0.0;
    }
    else if (width > a3 && (a2 & 1) != 0 && height + height < a4)
    {
      return height + height;
    }
  }
  return height;
}

double sub_100515CF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, CGContextRef c, char a6, CGFloat a7, CGFloat a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  CGContextSaveGState(c);
  id v26 = [objc_allocWithZone((Class)CATextLayer) init];
  CFAttributedStringRef v27 = (const __CFAttributedString *)sub_1005158E4(a9, a1, a2, a3, a4, v26);
  v34.origin.CGFloat x = a10;
  v34.origin.CGFloat y = a11;
  v34.size.double width = a12;
  v34.size.double height = a13;
  double v28 = CGRectGetWidth(v34) - (a7 + a7);
  v35.origin.CGFloat x = a10;
  v35.origin.CGFloat y = a11;
  v35.size.double width = a12;
  v35.size.double height = a13;
  double Height = CGRectGetHeight(v35);
  double v30 = sub_100515C50(v27, a6, v28, Height);
  char v32 = v31;
  CGContextTranslateCTM(c, a7, a8);
  [v26 setWrapped:v32 & 1];
  [v26 setTruncationMode:kCATruncationEnd];
  [v26 setAlignmentMode:kCAAlignmentCenter];
  [v26 setBounds:a10, a11, v28, v30];
  [v26 drawInContext:c];
  CGContextRestoreGState(c);

  return v30;
}

uint64_t sub_100515EB4(unint64_t a1)
{
  id v2 = [self sharedApplication];
  [v2 userInterfaceLayoutDirection];

  NSString v3 = String._bridgeToObjectiveC()();
  unsigned int v4 = self;
  id v5 = [v4 animationWithKeyPath:v3];

  if (a1 > 1)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v5 setFromValue:isa];

    Class v7 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v5 setToValue:v7];

    [v5 setDuration:0.35];
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v4 animationWithKeyPath:v8];

    Class v10 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v9 setFromValue:v10];

    Class v11 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v9 setToValue:v11];

    [v9 setDuration:0.35];
    LODWORD(v11) = [self shouldRemoveMovementAnimations];
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t v12 = swift_allocObject();
    if (v11)
    {
      *(_OWORD *)(v12 + 16) = xmmword_101177E70;
      *(void *)(v12 + 32) = v9;
      uint64_t v23 = v12;
      specialized Array._endMutation()();
      unint64_t v13 = v23;
    }
    else
    {
      *(_OWORD *)(v12 + 16) = xmmword_10117DF50;
      *(void *)(v12 + 32) = v5;
      *(void *)(v12 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v9;
      uint64_t v24 = v12;
      specialized Array._endMutation()();
      unint64_t v13 = v24;
      id v14 = v5;
    }
    id v15 = objc_allocWithZone((Class)CAAnimationGroup);
    id v16 = v9;
    id v17 = [v15 init];
    if (v13 >> 62)
    {
      sub_100517570();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_100517570();
    }
    swift_bridgeObjectRelease();
    sub_100517570();
    Class v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 setAnimations:v18];

    [v17 setDuration:0.35];
    uint64_t v19 = self;
    id v20 = v17;
    id v21 = [v19 functionWithName:kCAMediaTimingFunctionEaseOut];
    [v20 setTimingFunction:v21];

    return (uint64_t)v20;
  }
  return result;
}

void *sub_1005162D8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v2;
  return result;
}

unint64_t StatusHUDType.init(rawValue:)(unint64_t a1)
{
  return sub_10051730C(a1);
}

unint64_t sub_100516324@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10051730C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v4 & 1;
  return result;
}

void sub_100516358(char a1, uint64_t a2)
{
  NSString v3 = v2;
  uint64_t v6 = sub_1005057FC(&qword_101672EB0);
  __chkstk_darwin(v6 - 8, v7);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v17 = __chkstk_darwin(v15, v16).n128_u64[0];
  uint64_t v19 = (char *)aBlock - v18;
  id v20 = [v3 manager];
  if (v20)
  {
    id v21 = v20;
    id v22 = [v3 hideTimer];
    [v22 invalidate];

    [v3 setHideTimer:0];
    if ([v3 hiding])
    {
      swift_unknownObjectRelease();
      return;
    }
    if ((a1 & 1) == 0)
    {
      id v25 = [v3 timeStartedShowing];
      if (v25)
      {
        id v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        CFAttributedStringRef v27 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v27(v9, v14, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
        {
          v27(v19, v9, v10);
          Date.timeIntervalSinceNow.getter();
          double v29 = fabs(v28);
          [v3 minimumShowDuration];
          if (v29 >= v30 || ([v3 minimumShowDuration], v31 - v29 <= 0.0))
          {
            [v21 hideWithHudController:v3];
            [v3 setHiding:1];
            swift_unknownObjectRelease();
          }
          else
          {
            char v32 = self;
            [v3 timeLeftToShow];
            double v34 = v33;
            CGRect v35 = (void *)swift_allocObject();
            v35[2] = a2;
            v35[3] = v21;
            v35[4] = v3;
            aBlock[4] = sub_1005176A4;
            aBlock[5] = v35;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = *(void *)"";
            aBlock[2] = sub_10051CE64;
            aBlock[3] = &unk_101506A60;
            uint64_t v36 = _Block_copy(aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_release();
            id v37 = [v32 scheduledTimerWithTimeInterval:0 repeats:v36 block:v34];
            _Block_release(v36);
            [v3 setHideTimer:v37];
            swift_unknownObjectRelease();
          }
          (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      }
      sub_100517604((uint64_t)v9);
    }
    [v21 hideWithHudController:v3];
    [v3 setHiding:1];
    swift_unknownObjectRelease();
    return;
  }
  if ([v3 showing])
  {
    if (qword_10166F9F8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v23 = (id)static OS_os_log.crlStatusHUD;
    uint64_t v24 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v24, (uint64_t)"Trying to hide while showing without a manager", 46, 2, (uint64_t)_swiftEmptyArrayStorage);
  }
}

id sub_100516884(int a1, id a2, void *a3)
{
  [a2 hideWithHudController:];
  [a3 setHiding:1];
  id v4 = [a3 hideTimer];
  [v4 invalidate];

  return [a3 setHideTimer:0];
}

uint64_t sub_100516914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a1 != 1)
    {
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }
    sub_100516AA8(1.0);
    [v4 setAnimating:1];
    id v9 = (void *)swift_allocObject();
    v9[2] = a4;
    void v9[3] = v4;
    void v9[4] = 1;
    void v9[5] = a2;
    v9[6] = a3;
    swift_unknownObjectRetain();
    sub_1005173A0(a2);
    sub_100516C60(1uLL, (uint64_t)sub_100517388, (uint64_t)v9, a4);
  }
  else
  {
    sub_100516AA8(0.0);
    [v4 setAnimating:1];
    [v4 updateForAppearance];
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = a4;
    v8[3] = v4;
    void v8[4] = 0;
    v8[5] = a2;
    v8[6] = a3;
    swift_unknownObjectRetain();
    sub_1005173A0(a2);
    sub_100516E48(0, (uint64_t)sub_1005173B4, (uint64_t)v8, a4);
  }

  return swift_release();
}

void sub_100516AA8(double a1)
{
  id v3 = [v1 hudView];
  id v5 = [v3 layer];

  *(float *)&double v4 = a1;
  [v5 setOpacity:v4];
}

uint64_t sub_100516B38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a6;
  _OWORD v11[3] = a4;
  void v11[4] = a5;
  v11[5] = a2;
  sub_1005173A0(a4);
  swift_unknownObjectRetain();
  sub_100516C60(a3, (uint64_t)sub_100517508, (uint64_t)v11, a6);

  return swift_release();
}

id sub_100516BE8(uint64_t a1, void (*a2)(uint64_t), int a3, id a4)
{
  if (a2)
  {
    swift_retain();
    a2(a1);
    sub_1005174AC((uint64_t)a2);
  }

  return [a4 setAnimating:0];
}

void sub_100516C60(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  id v10 = [v4 hudView];
  id v11 = [v10 layer];

  uint64_t v12 = self;
  [v12 begin];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a4;
  void v13[3] = v5;
  void v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  v17[4] = sub_100517560;
  void v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = *(void *)"";
  v17[2] = sub_100679958;
  v17[3] = &unk_1015069E8;
  id v14 = _Block_copy(v17);
  swift_unknownObjectRetain();
  sub_1005173A0(a2);
  swift_release();
  [v12 setCompletionBlock:v14];
  _Block_release(v14);
  uint64_t v15 = (void *)sub_100515EB4(a1);
  [v11 addAnimation:v15 forKey:0];

  [v12 commit];
  LODWORD(v16) = 1.0;
  if (!a1) {
    goto LABEL_4;
  }
  if (a1 == 1)
  {
    double v16 = 0.0;
LABEL_4:
    [v11 setOpacity:v16];

    return;
  }
  v17[0] = a1;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
}

void sub_100516E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  id v10 = [v5 containerView];
  id v11 = [v10 superview];

  [v11 layoutIfNeeded];
  id v12 = [v5 heightConstraint];
  if (!v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v12;
  if (!a1)
  {
    double v14 = 56.0;
LABEL_6:
    [v12 setConstant:v14];

LABEL_7:
    uint64_t v15 = self;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a4;
    *(void *)(v16 + 24) = v5;
    uint64_t v24 = sub_10051741C;
    id v25 = (void *)v16;
    id v20 = _NSConcreteStackBlock;
    uint64_t v21 = *(void *)"";
    id v22 = sub_100679958;
    id v23 = &unk_101506920;
    double v17 = _Block_copy(&v20);
    swift_unknownObjectRetain();
    swift_release();
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a4;
    v18[3] = a2;
    v18[4] = a3;
    void v18[5] = v5;
    uint64_t v24 = sub_100517440;
    id v25 = v18;
    id v20 = _NSConcreteStackBlock;
    uint64_t v21 = *(void *)"";
    id v22 = sub_100F8FD18;
    id v23 = &unk_101506970;
    uint64_t v19 = _Block_copy(&v20);
    swift_unknownObjectRetain();
    sub_1005173A0(a2);
    swift_release();
    [v15 animateWithDuration:0x20000 delay:v17 options:v19 animations:0.15 completion:0.0];
    _Block_release(v19);
    _Block_release(v17);
    return;
  }
  if (a1 == 1)
  {
    double v14 = 0.0;
    goto LABEL_6;
  }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
}

uint64_t sub_1005170D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = (void *)swift_allocObject();
  v11[2] = a6;
  _OWORD v11[3] = a2;
  void v11[4] = a4;
  v11[5] = a5;
  swift_unknownObjectRetain();
  sub_1005173A0(a4);
  sub_100516E48(a3, (uint64_t)sub_1005175F8, (uint64_t)v11, a6);

  return swift_release();
}

id sub_100517184(int a1, id a2, void (*a3)(id))
{
  [a2 setHiding:0];
  if (a3)
  {
    swift_retain();
    a3(a2);
    sub_1005174AC((uint64_t)a3);
  }

  return [a2 setAnimating:0];
}

id sub_10051720C(void *a1, uint64_t a2, void (*a3)(void *))
{
  id result = [a1 setShowing:a2 == 0];
  if (a3)
  {
    swift_retain();
    a3(a1);
    return (id)sub_1005174AC((uint64_t)a3);
  }
  return result;
}

void sub_100517290(void *a1)
{
  id v1 = [a1 containerView];
  id v2 = [v1 superview];

  [v2 layoutIfNeeded];
}

unint64_t sub_10051730C(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

unint64_t sub_100517320()
{
  unint64_t result = qword_1016722B0;
  if (!qword_1016722B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016722B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for StatusHUDType()
{
  return &type metadata for StatusHUDType;
}

uint64_t sub_100517388(uint64_t a1)
{
  return sub_1005173CC(a1, sub_1005170D4);
}

uint64_t sub_1005173A0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1005173B4(uint64_t a1)
{
  return sub_1005173CC(a1, sub_100516B38);
}

uint64_t sub_1005173CC(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[3], v2[4], v2[5], v2[6], v2[2]);
}

uint64_t sub_1005173E4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10051741C()
{
  sub_100517290(*(void **)(v0 + 24));
}

uint64_t sub_100517424(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
  return swift_retain();
}

uint64_t sub_100517434()
{
  return swift_release();
}

void sub_100517440()
{
  id v1 = *(void (**)(uint64_t))(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    swift_retain();
    v1(v2);
    sub_1005174AC((uint64_t)v1);
  }
}

uint64_t sub_1005174AC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1005174C0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_100517508(uint64_t a1)
{
  return sub_100516BE8(a1, *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(id *)(v1 + 40));
}

uint64_t sub_100517518()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

id sub_100517560()
{
  return sub_10051720C(*(void **)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void *))(v0 + 40));
}

unint64_t sub_100517570()
{
  unint64_t result = qword_1016722B8;
  if (!qword_1016722B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016722B8);
  }
  return result;
}

uint64_t sub_1005175B0()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

id sub_1005175F8(int a1)
{
  return sub_100517184(a1, *(id *)(v1 + 24), *(void (**)(id))(v1 + 32));
}

uint64_t sub_100517604(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101672EB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100517664()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1005176A4(int a1)
{
  return sub_100516884(a1, *(id *)(v1 + 24), *(void **)(v1 + 32));
}

ValueMetadata *type metadata accessor for AnimationDirection()
{
  return &type metadata for AnimationDirection;
}

unint64_t sub_1005176C4()
{
  unint64_t result = qword_1016722C0;
  if (!qword_1016722C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016722C0);
  }
  return result;
}

id sub_100517730(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData;
  *(void *)&v7[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData] = 0;
  uint64_t v9 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath;
  *(void *)&v7[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath] = 0;
  id v10 = &v7[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_id];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  uint64_t v13 = *(void **)&v7[v8];
  *(void *)&v7[v8] = a2;
  double v14 = v7;
  id v15 = a2;

  uint64_t v16 = *(void **)&v7[v9];
  *(void *)&v7[v9] = a3;
  id v17 = a3;

  v21.receiver = v14;
  v21.super_class = v3;
  [super init];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v18;
}

void sub_100517ADC(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = v3;
  int v63 = a3;
  uint64_t v58 = type metadata accessor for CRLFreehandDrawingCRDTData(0);
  __chkstk_darwin(v58, v7);
  uint64_t v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (uint64_t)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v14 - 8);
  uint64_t v61 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v59 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v18 = [a1 getBoardItemForUUID:isa];

  if (!v18) {
    goto LABEL_20;
  }
  type metadata accessor for CRLFreehandDrawingShapeItem();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {

LABEL_20:
    uint64_t v13 = 47;
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetFreehandDrawingShapeItemPKData.swift", 115, 2, 31, (uint64_t)"Unable to retrieve freehand drawing shape item.", 47, 2u, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"Unable to retrieve freehand drawing shape item.");
    uint64_t i = 31;
    goto LABEL_21;
  }
  uint64_t v20 = v19;
  id v21 = v18;
  sub_10103405C(v20, (uint64_t)&off_101518040);

  if (v4)
  {

    return;
  }
  id v56 = a1;
  uint64_t v57 = v9;
  uint64_t v22 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData;
  id v23 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData);
  id v24 = v23;
  sub_100CF369C(v23);
  uint64_t v25 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath;
  id v26 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath);
  id v27 = v26;
  sub_100CF4044(v26);
  id v28 = v21;
  sub_101023724(v20, (uint64_t)&off_101518040, v63);

  uint64_t v55 = v25;
  double v29 = *(void **)(v5 + v22);
  if (v29)
  {
    id v30 = v29;
    if ([v30 shouldSolveMath])
    {
      uint64_t v54 = v22;
      double v31 = *(void (**)(uint64_t))(**(void **)(v20 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                           + 264);
      id v53 = v28;
      id v32 = v28;
      uint64_t v33 = swift_retain();
      v31(v33);
      void v52[2] = v32;

      swift_release();
      uint64_t v35 = v60;
      uint64_t v34 = v61;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v13, 1, v61) == 1) {
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v59, v13, v34);
      Class v36 = UUID._bridgeToObjectiveC()().super.isa;
      id v37 = [v56 getBoardItemForUUID:v36];

      if (v37)
      {
        id v56 = v30;
        type metadata accessor for CRLFreehandDrawingItem();
        uint64_t v38 = swift_dynamicCastClass();
        uint64_t v39 = (uint64_t)v57;
        if (v38)
        {
          uint64_t v40 = v38;
          v52[1] = type metadata accessor for CRLFreehandItemData(0);
          uint64_t v41 = swift_dynamicCastClassUnconditional() + qword_10171CE48;
          swift_beginAccess();
          sub_100518694(v41, v39);
          sub_1005057FC((uint64_t *)&unk_101689310);
          CRRegister.wrappedValue.getter();
          LOBYTE(v41) = v62;
          sub_1005186F8(v39);
          if (v41)
          {
            uint64_t v42 = v5;
            (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
          }
          else
          {
            id v47 = v37;
            sub_10103405C(v40, (uint64_t)&off_101518040);

            swift_dynamicCastClassUnconditional();
            swift_beginAccess();
            char v64 = 1;
            swift_retain();
            CRRegister.wrappedValue.setter();
            swift_endAccess();
            swift_release();
            id v48 = v47;
            sub_101023724(v40, (uint64_t)&off_101518040, v63);
            uint64_t v42 = v5;
            (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
          }
          uint64_t v22 = v54;
          uint64_t v43 = v55;
          id v28 = v53;
          goto LABEL_17;
        }
      }
      uint64_t v13 = 41;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetFreehandDrawingShapeItemPKData.swift", 115, 2, 44, (uint64_t)"Unable to retrieve freehand drawing item.", 41, 2u, (uint64_t)&_swiftEmptyArrayStorage);
      sub_100586FD4((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"Unable to retrieve freehand drawing item.");
      for (uint64_t i = 44; ; uint64_t i = 40)
      {
LABEL_21:
        sub_1005871AC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetFreehandDrawingShapeItemPKData.swift", 115, 2, i);
        SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v50, v51);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_22:
        sub_100510824(v13);
        uint64_t v13 = 62;
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetFreehandDrawingShapeItemPKData.swift", 115, 2, 40, (uint64_t)"Unable to retrieve parent UUID of freehand drawing shape item.", 62, 2u, (uint64_t)&_swiftEmptyArrayStorage);
        sub_100586FD4((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"Unable to retrieve parent UUID of freehand drawing shape item.");
      }
    }
    uint64_t v42 = v5;
  }
  else
  {
    uint64_t v42 = v5;
  }
  uint64_t v43 = v55;
LABEL_17:
  uint64_t v44 = v42;
  uint64_t v45 = *(void **)(v42 + v22);
  *(void *)(v42 + v22) = 0;

  uint64_t v46 = *(void **)(v42 + v43);
  *(void *)(v44 + v43) = 0;
}

void sub_10051831C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath);
}

id sub_1005183A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandSetFreehandDrawingShapeItemPKData();
  return [super dealloc];
}

uint64_t sub_100518470()
{
  return type metadata accessor for CRLCommandSetFreehandDrawingShapeItemPKData();
}

uint64_t type metadata accessor for CRLCommandSetFreehandDrawingShapeItemPKData()
{
  uint64_t result = qword_101672308;
  if (!qword_101672308) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005184C4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_100518560(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData;
  *(void *)&v3[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_strokePathCompactData] = 0;
  uint64_t v8 = OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath;
  *(void *)&v3[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_maskPath] = 0;
  uint64_t v9 = &v3[OBJC_IVAR____TtC8Freeform43CRLCommandSetFreehandDrawingShapeItemPKData_id];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  uint64_t v12 = *(void **)&v3[v7];
  *(void *)&v3[v7] = a2;
  uint64_t v13 = v3;
  id v14 = a2;

  uint64_t v15 = *(void **)&v3[v8];
  *(void *)&v3[v8] = a3;
  id v16 = a3;

  v19.receiver = v13;
  v19.super_class = (Class)type metadata accessor for CRLCommandSetFreehandDrawingShapeItemPKData();
  id v17 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v17;
}

uint64_t sub_100518694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLFreehandDrawingCRDTData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005186F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLFreehandDrawingCRDTData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLChunkedRealTimeMessageBufferError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CRLChunkedRealTimeMessageBufferError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005188B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *sub_1005188D8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLChunkedRealTimeMessageBufferError()
{
  return &type metadata for CRLChunkedRealTimeMessageBufferError;
}

unint64_t sub_1005188F4()
{
  unint64_t result = qword_101672318;
  if (!qword_101672318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672318);
  }
  return result;
}

BOOL sub_100518948(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t *sub_100518968@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v3;
  return result;
}

id sub_100518984(void *a1, uint64_t a2)
{
  id v3 = a1;
  sub_100EC3284(v3, 0, (uint64_t)v15);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v15, v4);
  uint64_t v5 = (objc_class *)type metadata accessor for CRLCommandSetDefaultShapeInsertionPreset();
  id v6 = objc_allocWithZone(v5);
  uint64_t v7 = OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_actionString;
  uint64_t v8 = qword_10166EB30;
  uint64_t v9 = (char *)v6;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = &v9[v7];
  uint64_t v11 = *(void *)algn_101672328;
  *(void *)uint64_t v10 = qword_101672320;
  *((void *)v10 + 1) = v11;
  sub_10051B3EC((uint64_t)v15, (uint64_t)&v9[OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeStyle], &qword_101685120);
  *(void *)&v9[OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeType] = a2;
  swift_bridgeObjectRetain();

  v14.receiver = v9;
  v14.super_class = v5;
  id v12 = [super init];

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v12;
}

uint64_t sub_100518AE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10103405C(a1, (uint64_t)&off_10152A280);
  if (!v4)
  {
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeType);
    if (v8 == 2 || v8 == 1)
    {
      sub_10051B3EC(v3 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeStyle, (uint64_t)v10, &qword_101685120);
      swift_beginAccess();
      type metadata accessor for CRLBoardCRDTData(0);
      sub_10051B3EC((uint64_t)v10, (uint64_t)v9, &qword_101685120);
      type metadata accessor for CRLBoardInsertStyleData(0);
    }
    else
    {
      if (v8)
      {
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
      sub_10051B3EC(v3 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeStyle, (uint64_t)v10, &qword_101685120);
      swift_beginAccess();
      type metadata accessor for CRLBoardCRDTData(0);
      sub_10051B3EC((uint64_t)v10, (uint64_t)v9, &qword_101685120);
    }
    swift_retain();
    sub_10051B860(v10, sub_10051BA5C);
    sub_1005057FC(&qword_101672458);
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    swift_release();
    return sub_101023724(a1, (uint64_t)&off_10152A280, a3);
  }
  return result;
}

uint64_t sub_100518DAC()
{
  sub_10051B3EC(v0 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_shapeStyle, (uint64_t)v2, &qword_101685120);
  sub_10051B860(v2, sub_10051B450);
  return swift_bridgeObjectRelease();
}

id sub_100518E1C()
{
  return sub_100519CA0(type metadata accessor for CRLCommandSetDefaultShapeInsertionPreset);
}

uint64_t type metadata accessor for CRLCommandSetDefaultShapeInsertionPreset()
{
  return self;
}

uint64_t sub_100518ECC(uint64_t a1, uint64_t a2)
{
  return sub_100519E00(a1, a2, &OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultShapeInsertionPreset_actionString);
}

uint64_t sub_100519008(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10103405C(a1, (uint64_t)&off_10152A280);
  if (!v4)
  {
    sub_10051B3EC(v3 + OBJC_IVAR____TtC8Freeform45CRLCommandSetDefaultStickyNoteInsertionPreset_stickyStyle, (uint64_t)v9, &qword_101672448);
    swift_beginAccess();
    type metadata accessor for CRLBoardCRDTData(0);
    sub_10051B3EC((uint64_t)v9, (uint64_t)v8, &qword_101672448);
    type metadata accessor for CRLBoardInsertStyleData(0);
    swift_retain();
    sub_10051ACC4(v9, sub_10051AEC4);
    sub_1005057FC(&qword_101672450);
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    swift_release();
    return sub_101023724(a1, (uint64_t)&off_10152A280, a3);
  }
  return result;
}

uint64_t sub_100519198()
{
  sub_10051B3EC(v0 + OBJC_IVAR____TtC8Freeform45CRLCommandSetDefaultStickyNoteInsertionPreset_stickyStyle, (uint64_t)v2, &qword_101672448);
  sub_10051ACC4(v2, sub_10051A794);
  return swift_bridgeObjectRelease();
}

id sub_100519208()
{
  return sub_100519CA0(type metadata accessor for CRLCommandSetDefaultStickyNoteInsertionPreset);
}

uint64_t type metadata accessor for CRLCommandSetDefaultStickyNoteInsertionPreset()
{
  return self;
}

uint64_t sub_1005192B8(uint64_t a1, uint64_t a2)
{
  return sub_100519E00(a1, a2, &OBJC_IVAR____TtC8Freeform45CRLCommandSetDefaultStickyNoteInsertionPreset_actionString);
}

id sub_1005192C4(void *a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = (void *)sub_100BC934C();

  if (v2)
  {
    sub_100A1F088(v2, (uint64_t)__dst);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v3);
  }
  else
  {
    sub_10051A3F4((uint64_t)__dst);
  }
  sub_10051B3EC((uint64_t)__dst, (uint64_t)v25, (uint64_t *)&unk_101685110);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)&v1[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] + 384);
  uint64_t v5 = v1;
  uint64_t v6 = swift_retain();
  uint64_t v7 = (void *)v4(v6);

  swift_release();
  if (v7)
  {
    sub_10093D2D8(v7, (uint64_t)__dst);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v8);
  }
  else
  {
    sub_10051A41C(__dst);
  }
  sub_10051B3EC((uint64_t)__dst, (uint64_t)v24, (uint64_t *)&unk_101683E20);
  float v9 = sub_100A32280();
  sub_10051B3EC((uint64_t)v25, (uint64_t)__src, (uint64_t *)&unk_101685110);
  sub_10051B3EC((uint64_t)v24, (uint64_t)&__src[29], (uint64_t *)&unk_101683E20);
  *(float *)&__src[45] = v9;
  __src[46] = &_swiftEmptyDictionarySingleton;
  memcpy(__dst, __src, sizeof(__dst));
  id v23 = &_swiftEmptyDictionarySingleton;
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v10);
  uint64_t v11 = (objc_class *)type metadata accessor for CRLCommandSetDefaultImageInsertionPreset();
  id v12 = objc_allocWithZone(v11);
  uint64_t v13 = OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultImageInsertionPreset_actionString;
  uint64_t v14 = qword_10166EB30;
  uint64_t v15 = (char *)v12;
  if (v14 != -1) {
    swift_once();
  }
  id v16 = &v15[v13];
  uint64_t v17 = *(void *)algn_101672328;
  *(void *)id v16 = qword_101672320;
  *((void *)v16 + 1) = v17;
  sub_10051B3EC((uint64_t)__dst, (uint64_t)&v15[OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultImageInsertionPreset_imageStyle], &qword_101672438);
  swift_bridgeObjectRetain();

  v20.receiver = v15;
  v20.super_class = v11;
  id v18 = [super init];

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v18;
}

uint64_t sub_100519540(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10103405C(a1, (uint64_t)&off_10152A280);
  if (!v4)
  {
    sub_10051B3EC(v3 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultImageInsertionPreset_imageStyle, (uint64_t)v9, &qword_101672438);
    swift_beginAccess();
    type metadata accessor for CRLBoardCRDTData(0);
    sub_10051B3EC((uint64_t)v9, (uint64_t)v8, &qword_101672438);
    type metadata accessor for CRLBoardInsertStyleData(0);
    swift_retain();
    sub_10051A148((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A5E4);
    sub_1005057FC(&qword_101672440);
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    swift_release();
    return sub_101023724(a1, (uint64_t)&off_10152A280, a3);
  }
  return result;
}

uint64_t sub_1005196D0()
{
  return sub_100519C20(&OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultImageInsertionPreset_imageStyle, &qword_101672438);
}

id sub_1005196EC()
{
  return sub_100519CA0(type metadata accessor for CRLCommandSetDefaultImageInsertionPreset);
}

uint64_t type metadata accessor for CRLCommandSetDefaultImageInsertionPreset()
{
  return self;
}

uint64_t sub_100519744(uint64_t a1, uint64_t a2)
{
  return sub_100519E00(a1, a2, &OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultImageInsertionPreset_actionString);
}

id sub_100519750(void *a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = (void *)sub_100BC934C();

  if (v2)
  {
    sub_100A1F088(v2, (uint64_t)__dst);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v3);
  }
  else
  {
    sub_10051A3F4((uint64_t)__dst);
  }
  sub_10051B3EC((uint64_t)__dst, (uint64_t)v25, (uint64_t *)&unk_101685110);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)&v1[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] + 384);
  uint64_t v5 = v1;
  uint64_t v6 = swift_retain();
  uint64_t v7 = (void *)v4(v6);

  swift_release();
  if (v7)
  {
    sub_10093D2D8(v7, (uint64_t)__dst);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v8);
  }
  else
  {
    sub_10051A41C(__dst);
  }
  sub_10051B3EC((uint64_t)__dst, (uint64_t)v24, (uint64_t *)&unk_101683E20);
  swift_beginAccess();
  type metadata accessor for CRLMovieItemCRDTData(0);
  swift_retain();
  sub_1005057FC(&qword_101672430);
  CRRegister.wrappedValue.getter();
  int v9 = __src[0];
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10051B3EC((uint64_t)v25, (uint64_t)__src, (uint64_t *)&unk_101685110);
  sub_10051B3EC((uint64_t)v24, (uint64_t)&__src[29], (uint64_t *)&unk_101683E20);
  LODWORD(__src[45]) = v9;
  __src[46] = &_swiftEmptyDictionarySingleton;
  memcpy(__dst, __src, sizeof(__dst));
  id v23 = &_swiftEmptyDictionarySingleton;
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)__dst, v10);
  uint64_t v11 = (objc_class *)type metadata accessor for CRLCommandSetDefaultMovieInsertionPreset();
  id v12 = objc_allocWithZone(v11);
  uint64_t v13 = OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultMovieInsertionPreset_actionString;
  uint64_t v14 = qword_10166EB30;
  uint64_t v15 = (char *)v12;
  if (v14 != -1) {
    swift_once();
  }
  id v16 = &v15[v13];
  uint64_t v17 = *(void *)algn_101672328;
  *(void *)id v16 = qword_101672320;
  *((void *)v16 + 1) = v17;
  sub_10051B3EC((uint64_t)__dst, (uint64_t)&v15[OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultMovieInsertionPreset_movieStyle], &qword_101672420);
  swift_bridgeObjectRetain();

  v20.receiver = v15;
  v20.super_class = v11;
  id v18 = [super init];

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v18;
}

uint64_t sub_100519A74(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10103405C(a1, (uint64_t)&off_10152A280);
  if (!v4)
  {
    sub_10051B3EC(v3 + OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultMovieInsertionPreset_movieStyle, (uint64_t)v9, &qword_101672420);
    swift_beginAccess();
    type metadata accessor for CRLBoardCRDTData(0);
    sub_10051B3EC((uint64_t)v9, (uint64_t)v8, &qword_101672420);
    type metadata accessor for CRLBoardInsertStyleData(0);
    swift_retain();
    sub_10051A148((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A5E4);
    sub_1005057FC(&qword_101672428);
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    swift_release();
    return sub_101023724(a1, (uint64_t)&off_10152A280, a3);
  }
  return result;
}

uint64_t sub_100519C04()
{
  return sub_100519C20(&OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultMovieInsertionPreset_movieStyle, &qword_101672420);
}

uint64_t sub_100519C20(void *a1, uint64_t *a2)
{
  sub_10051B3EC(v2 + *a1, (uint64_t)v4, a2);
  sub_10051A148((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A434);
  return swift_bridgeObjectRelease();
}

id sub_100519C88()
{
  return sub_100519CA0(type metadata accessor for CRLCommandSetDefaultMovieInsertionPreset);
}

id sub_100519CA0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t sub_100519CF4(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  sub_10051B3EC(a1 + *a3, (uint64_t)v5, a4);
  sub_10051A148((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A434);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CRLCommandSetDefaultMovieInsertionPreset()
{
  return self;
}

ValueMetadata *type metadata accessor for CRLCommandSetDefaultShapeInsertionPreset.ShapeType()
{
  return &type metadata for CRLCommandSetDefaultShapeInsertionPreset.ShapeType;
}

unint64_t sub_100519DA0()
{
  unint64_t result = qword_101672418;
  if (!qword_101672418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672418);
  }
  return result;
}

uint64_t sub_100519DF4(uint64_t a1, uint64_t a2)
{
  return sub_100519E00(a1, a2, &OBJC_IVAR____TtC8Freeform40CRLCommandSetDefaultMovieInsertionPreset_actionString);
}

uint64_t sub_100519E00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

void sub_100519E3C()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 localizedStringForKey:v1 value:v2 table:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  qword_101672320 = v5;
  *(void *)algn_101672328 = v7;
}

uint64_t sub_100519F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t result = a13;
  if (a13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10051A034(a19);
    swift_bridgeObjectRelease();
    sub_10051A074(a25, a26);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051A034(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051A074(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051A0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051A148(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v11 = *(_OWORD *)(a1 + 336);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v9 = *(_OWORD *)(a1 + 304);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    *(void *)(a1 + 368),
    *(void *)(a1 + 376));
  return a1;
}

uint64_t sub_10051A1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10051A2E0(a19);
    swift_bridgeObjectRetain();
    sub_10051A320(a25, a26);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051A2E0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051A320(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051A364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

double sub_10051A3F4(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a1 + 16UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_10051A41C(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10051A434(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
  {
    sub_100519F40(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051A0B8(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051A5E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
  {
    sub_10051A1EC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051A364(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051A794(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x530])
  {
    uint64_t v84 = STACK[0x5D8];
    uint64_t v82 = STACK[0x5C8];
    uint64_t v83 = STACK[0x5D0];
    uint64_t v80 = STACK[0x5B8];
    uint64_t v81 = STACK[0x5C0];
    uint64_t v86 = STACK[0x5A8];
    uint64_t v87 = STACK[0x5B0];
    uint64_t v85 = STACK[0x5A0];
    uint64_t v78 = STACK[0x590];
    uint64_t v79 = STACK[0x598];
    uint64_t v76 = STACK[0x580];
    uint64_t v77 = STACK[0x588];
    unint64_t v74 = STACK[0x548];
    uint64_t v75 = STACK[0x578];
    uint64_t v72 = STACK[0x538];
    unint64_t v73 = STACK[0x540];
    uint64_t v71 = STACK[0x520];
    sub_100519F40(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051ABBC(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    sub_10051A0B8(a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54);
    sub_10051AC38(a61, a62, a63, a64, a65, a66);
    sub_10051AC38(a67, a68, a69, a70, a71, v71);
    swift_bridgeObjectRelease();
    sub_10051AC88(v72, v73, v74);
    sub_10051ABBC(v75, v76, v77, v78, v79, v85, v86, v87, v80, v81, v82, v83, v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051ABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = a13;
  if (a13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051AC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051AC88(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10051ACA0(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10051ACA0(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return sub_10051ACB0(a1, a2);
  }
}

uint64_t sub_10051ACB0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

#error "10051AE9C: call analysis failed (funcsize=128)"

uint64_t sub_10051AEC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x530])
  {
    uint64_t v84 = STACK[0x5D8];
    uint64_t v82 = STACK[0x5C8];
    uint64_t v83 = STACK[0x5D0];
    uint64_t v80 = STACK[0x5B8];
    uint64_t v81 = STACK[0x5C0];
    uint64_t v87 = STACK[0x5B0];
    uint64_t v85 = STACK[0x5A0];
    uint64_t v86 = STACK[0x5A8];
    uint64_t v78 = STACK[0x590];
    uint64_t v79 = STACK[0x598];
    uint64_t v76 = STACK[0x580];
    uint64_t v77 = STACK[0x588];
    unint64_t v74 = STACK[0x548];
    uint64_t v75 = STACK[0x578];
    uint64_t v72 = STACK[0x538];
    unint64_t v73 = STACK[0x540];
    uint64_t v71 = STACK[0x520];
    sub_10051A1EC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051B2E8(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    sub_10051A364(a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54);
    sub_10051B364(a61, a62, a63, a64, a65, a66);
    sub_10051B364(a67, a68, a69, a70, a71, v71);
    swift_bridgeObjectRetain();
    sub_10051B3B0(v72, v73, v74);
    sub_10051B2E8(v75, v76, v77, v78, v79, v85, v86, v87, v80, v81, v82, v83, v84);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051B2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051B364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051B3B0(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10051B3C8(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10051B3C8(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  else {
    return sub_10051B3D8(a1, a2);
  }
}

uint64_t sub_10051B3D8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10051B3EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1005057FC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10051B450(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x520])
  {
    uint64_t v84 = STACK[0x5C8];
    uint64_t v82 = STACK[0x5B8];
    uint64_t v83 = STACK[0x5C0];
    uint64_t v80 = STACK[0x5A8];
    uint64_t v81 = STACK[0x5B0];
    uint64_t v86 = STACK[0x598];
    uint64_t v87 = STACK[0x5A0];
    uint64_t v85 = STACK[0x590];
    uint64_t v78 = STACK[0x580];
    uint64_t v79 = STACK[0x588];
    uint64_t v76 = STACK[0x570];
    uint64_t v77 = STACK[0x578];
    unint64_t v74 = STACK[0x538];
    uint64_t v75 = STACK[0x568];
    uint64_t v72 = STACK[0x528];
    unint64_t v73 = STACK[0x530];
    uint64_t v71 = STACK[0x510];
    sub_100519F40(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051ABBC(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    sub_10051A0B8(a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54);
    sub_10051AC38(a61, a62, a63, a64, a65, a66);
    sub_10051AC38(a67, a68, a69, a70, a71, v71);
    swift_bridgeObjectRelease();
    sub_10051AC88(v72, v73, v74);
    sub_10051ABBC(v75, v76, v77, v78, v79, v85, v86, v87, v80, v81, v82, v83, v84);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

#error "10051BA34: call analysis failed (funcsize=127)"

uint64_t sub_10051BA5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x520])
  {
    uint64_t v84 = STACK[0x5C8];
    uint64_t v82 = STACK[0x5B8];
    uint64_t v83 = STACK[0x5C0];
    uint64_t v80 = STACK[0x5A8];
    uint64_t v81 = STACK[0x5B0];
    uint64_t v86 = STACK[0x598];
    uint64_t v87 = STACK[0x5A0];
    uint64_t v85 = STACK[0x590];
    uint64_t v78 = STACK[0x580];
    uint64_t v79 = STACK[0x588];
    uint64_t v76 = STACK[0x570];
    uint64_t v77 = STACK[0x578];
    unint64_t v74 = STACK[0x538];
    uint64_t v75 = STACK[0x568];
    uint64_t v72 = STACK[0x528];
    unint64_t v73 = STACK[0x530];
    uint64_t v71 = STACK[0x510];
    sub_10051A1EC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26);
    sub_10051B2E8(a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    sub_10051A364(a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54);
    sub_10051B364(a61, a62, a63, a64, a65, a66);
    sub_10051B364(a67, a68, a69, a70, a71, v71);
    swift_bridgeObjectRetain();
    sub_10051B3B0(v72, v73, v74);
    sub_10051B2E8(v75, v76, v77, v78, v79, v85, v86, v87, v80, v81, v82, v83, v84);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10051BE6C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self colorNamed:v0];

  qword_101719DB0 = (uint64_t)v1;
}

id sub_10051BEE0()
{
  id result = [self tertiaryLabelColor];
  qword_101719DB8 = (uint64_t)result;
  return result;
}

int64x2_t sub_10051BF1C()
{
  int64x2_t result = vdupq_n_s64(0x4041000000000000uLL);
  xmmword_101719DC0 = (__int128)result;
  return result;
}

void sub_10051BF30()
{
  qword_101719DD0 = 0x4028000000000000;
}

void sub_10051BF40()
{
  qword_101719DD8 = 0x4028000000000000;
}

void sub_10051BF50()
{
  qword_101719DE0 = 0x4041000000000000;
}

void *sub_10051BFAC()
{
  id v1 = v0;
  if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x100))())
  {
    sub_10050BF48(0, (unint64_t *)&qword_101672600);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    NSString v2 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    NSString v3 = sub_10051C358(v2, 0, 0, 0);

    return v3;
  }
  else
  {
    uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_element);
    id v6 = [v5 tintColor];
    if (v6)
    {
      long long v7 = v6;
      id v8 = [v6 UIColor];
    }
    else
    {
      id v8 = 0;
    }
    long long v9 = sub_10051C358(0, v8, 0, 0);

    id v10 = [v5 action];
    if (v10) {
      [v9 addTarget:*(void *)((char *)v1 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController) action:v10 forControlEvents:64];
    }
    return v9;
  }
}

void sub_10051C170(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v3 = (void *)Strong;
    uint64_t v4 = Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_presenter;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v5 = *(void *)(v4 + 16);
      if ([a1 sender])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      sub_10051B3EC((uint64_t)v10, (uint64_t)v11, &qword_101672BF0);
      if (v12)
      {
        type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
        if (swift_dynamicCast())
        {
          uint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xF8))();
          if (v6)
          {
            long long v7 = (void *)v6;
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void *, void *, void *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v3, ObjectType, v5);
            sub_100521490(1, 0);

            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease();
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();

        sub_100522F00((uint64_t)v11, &qword_101672BF0);
      }
    }
    else
    {
    }
  }
}

void *sub_10051C358(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v75 = a4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_101687FA0);
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v73 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1005057FC(&qword_10168A8B0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v74 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v76 = (char *)&v71 - v17;
  uint64_t v78 = type metadata accessor for UIButton.Configuration();
  uint64_t v18 = *(void *)(v78 - 8);
  uint64_t v20 = __chkstk_darwin(v78, v19);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v71 - v24;
  static UIButton.Configuration.plain()();
  if (!a2) {
    id v26 = [self labelColor];
  }
  id v71 = a2;
  UIButton.Configuration.baseForegroundColor.setter();
  id v27 = [self mainScreen];
  id v28 = [v27 traitCollection];

  LODWORD(v27) = [v28 crl_isUserInterfaceStyleDark];
  double v29 = self;
  id v30 = &selRef_tertiarySystemBackgroundColor;
  if (!v27) {
    id v30 = &selRef_secondarySystemBackgroundColor;
  }
  id v31 = [v29 *v30];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v32 = a3;
  if (!a3)
  {
    id v33 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v5
                                                                + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_element), "image"));
    if (v33)
    {
      uint64_t v34 = v33;
      id v32 = [v33 UIImage];
    }
    else
    {
      id v32 = 0;
    }
  }
  id v35 = a3;
  id v36 = v32;
  uint64_t v37 = UIButton.Configuration.image.setter();
  (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xF0))(v37);
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v25, v78);
  id v38 = a1;
  uint64_t v39 = (void *)UIButton.init(configuration:primaryAction:)();
  swift_unknownObjectWeakAssign();
  uint64_t v40 = (char *)v5 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_crlaxAccessibilityFormatterLabel;
  if (*(void *)((char *)v5
                 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_crlaxAccessibilityFormatterLabel
                 + 8))
  {
    id v41 = v39;
    swift_bridgeObjectRetain();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v43 = v39;
    NSString v42 = 0;
  }
  [v39 setAccessibilityLabel:v42];

  [v39 setShowsLargeContentViewer:1];
  if (*((void *)v40 + 1))
  {
    id v44 = v39;
    swift_bridgeObjectRetain();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v46 = v39;
    NSString v45 = 0;
  }
  uint64_t v47 = (uint64_t)v76;
  [v39 setLargeContentTitle:v45];

  [v39 setLargeContentImage:v36];
  id v48 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v5];
  [v39 addInteraction:v48];

  uint64_t v49 = v75;
  uint64_t v77 = v18;
  if (v75)
  {
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = v49;
    *(void *)(v50 + 24) = v32;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = sub_100523318;
    *(void *)(v51 + 24) = v50;
    aBlock[4] = sub_100523358;
    aBlock[5] = v51;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    aBlock[2] = sub_10051CE64;
    aBlock[3] = &unk_101506F48;
    uint64_t v52 = _Block_copy(aBlock);
    id v53 = v49;
    id v54 = v36;
    id v55 = v39;
    swift_release();
    [v55 setConfigurationUpdateHandler:v52];
    _Block_release(v52);
  }
  else
  {
    id v56 = v39;
    UIButton.configuration.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v47, 1, v78))
    {
      sub_100522E9C(v47, v74, &qword_10168A8B0);
      UIButton.configuration.setter();

      sub_100522F00(v47, &qword_10168A8B0);
    }
    else
    {
      uint64_t v57 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v58 = (void *)swift_allocObject();
      v58[2] = v57;
      v58[3] = a2;
      v58[4] = ObjectType;
      id v59 = v71;
      uint64_t v60 = v73;
      UIConfigurationColorTransformer.init(_:)();
      uint64_t v61 = type metadata accessor for UIConfigurationColorTransformer();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 0, 1, v61);
      UIButton.Configuration.imageColorTransformer.setter();
      UIButton.configuration.setter();
    }
  }
  char v62 = self;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_10117DF50;
  id v64 = [v39 widthAnchor];
  if (qword_10166EB48 != -1) {
    swift_once();
  }
  id v65 = [v64 constraintEqualToConstant:*(double *)&xmmword_101719DC0];

  *(void *)(v63 + 32) = v65;
  id v66 = [v39 heightAnchor];
  id v67 = objc_retainAutoreleasedReturnValue(objc_msgSend(v66, "constraintEqualToConstant:", *((double *)&xmmword_101719DC0
                                                                                           + 1)));

  *(void *)(v63 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v67;
  aBlock[0] = v63;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v62 activateConstraints:isa];

  id v69 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v5];
  [v39 addInteraction:v69];

  (*(void (**)(char *, uint64_t))(v77 + 8))(v25, v78);
  return v39;
}

void sub_10051CBE4(void **a1, void *a2, void *a3)
{
  uint64_t v6 = sub_1005057FC(&qword_10168A8B0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v14 = (char *)&v29 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = *a1;
  type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
  uint64_t v19 = swift_dynamicCastClass();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    id v21 = v18;
    if ([v20 state] == (id)1
      || *((unsigned char *)v20 + OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterBaseLayerButton_isPresentingPopover) == 1)
    {
      id v22 = v21;
      UIButton.configuration.getter();
      uint64_t v23 = type metadata accessor for UIButton.Configuration();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23))
      {
        id v25 = a2;
        UIButton.Configuration.image.setter();
        UIButton.configuration.setter();

        return;
      }
      sub_100522E9C((uint64_t)v17, (uint64_t)v14, &qword_10168A8B0);
      UIButton.configuration.setter();

      uint64_t v24 = (uint64_t)v17;
    }
    else
    {
      id v26 = v21;
      UIButton.configuration.getter();
      uint64_t v27 = type metadata accessor for UIButton.Configuration();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v10, 1, v27))
      {
        id v28 = a3;
        UIButton.Configuration.image.setter();
        UIButton.configuration.setter();

        return;
      }
      sub_100522E9C((uint64_t)v10, (uint64_t)v14, &qword_10168A8B0);
      UIButton.configuration.setter();

      uint64_t v24 = (uint64_t)v10;
    }
    sub_100522F00(v24, &qword_10168A8B0);
  }
}

void sub_10051CE64(uint64_t a1, void *a2)
{
  NSString v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id sub_10051CECC(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = Strong;
    if ([Strong state] == (id)1
      || v4[OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterBaseLayerButton_isPresentingPopover] == 1)
    {
      if (qword_10166EB40 != -1) {
        swift_once();
      }
      id v5 = (id)qword_101719DB8;
    }
    else if (a3)
    {
      id v5 = a3;
    }
    else
    {
      id v5 = [self labelColor];
    }
    id v6 = v5;

    return v6;
  }
  else if (a3)
  {
    return a3;
  }
  else
  {
    id v8 = [self labelColor];
    return v8;
  }
}

id sub_10051D024()
{
  id v0 = [self configurationWithPointSize:4 weight:2 scale:17.0];

  return v0;
}

Class sub_10051D070(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  sub_10050BF48(0, (unint64_t *)&qword_101672600);
  uint64_t v10 = swift_allocObject();
  uint64_t v67 = v5;
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  _OWORD v11[3] = a3;
  void v11[4] = a4;
  swift_bridgeObjectRetain();
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v62 = sub_10052327C;
  uint64_t v63 = v11;
  uint64_t v61 = 0;
  uint64_t v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  sub_10050BF48(0, (unint64_t *)&unk_101672590);
  id v13 = v12;
  v69.value.super.super.Class isa = (Class)v12;
  v14.super.super.super.super.Class isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v69).super.super.super.super.isa;
  id v66 = v13;
  if (a1)
  {
    id v15 = a1;
    v70.double width = 1.0;
    v70.double height = 1.0;
    UIGraphicsBeginImageContext(v70);
    [v15 setFill:0, 0, 0, sub_10052327C, v63];
    v72.origin.CGFloat x = 0.0;
    v72.origin.CGFloat y = 0.0;
    v72.size.double width = 1.0;
    v72.size.double height = 1.0;
    UIRectFill(v72);
    uint64_t v16 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    [(objc_class *)v14.super.super.super.super.isa setBackgroundImage:v16 forState:0];

    id v17 = [v15 colorWithAlphaComponent:0.6];
    v71.double width = 1.0;
    v71.double height = 1.0;
    UIGraphicsBeginImageContext(v71);
    [v17 setFill];
    v73.origin.CGFloat x = 0.0;
    v73.origin.CGFloat y = 0.0;
    v73.size.double width = 1.0;
    v73.size.double height = 1.0;
    UIRectFill(v73);
    uint64_t v18 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    [(objc_class *)v14.super.super.super.super.isa setBackgroundImage:v18 forState:1];

    uint64_t v19 = v14.super.super.super.super.isa;
    NSString v20 = String._bridgeToObjectiveC()();
    [(objc_class *)v19 setAccessibilityLabel:v20];

    id v21 = v19;
    NSString v22 = [v15 accessibilityName];
    uint64_t v23 = a3;
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v22 = String._bridgeToObjectiveC()();
      uint64_t v23 = a3;
      swift_bridgeObjectRelease();
    }
    [(objc_class *)v21 setAccessibilityValue:v22];

    id v24 = [v15 accessibilityName];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    if (a2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v23 = a3;
    uint64_t v26 = 0;
    if (a2)
    {
LABEL_5:
      id v27 = a2;
      [(objc_class *)v14.super.super.super.super.isa setImage:v27 forState:0];
      id v64 = [v27 crl_imageWithAlpha:0 renderingMode:0.6];
      [(objc_class *)v14.super.super.super.super.isa setImage:v64 forState:1];
      id v28 = v14.super.super.super.super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      [(objc_class *)v28 setAccessibilityLabel:v29];

      id v30 = self;
      id v31 = v28;
      id v32 = [v30 mainBundle];
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = String._bridgeToObjectiveC()();
      uint64_t v35 = a4;
      uint64_t v36 = v26;
      id v37 = [v32 localizedStringForKey:v33 value:v34 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v36;
      a4 = v35;
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [(objc_class *)v31 setAccessibilityValue:v38];
    }
  }
  id v39 = [(objc_class *)v14.super.super.super.super.isa layer];
  [v39 setCornerRadius:5.0];

  id v40 = [(objc_class *)v14.super.super.super.super.isa layer];
  [v40 setMasksToBounds:1];

  id v41 = [(objc_class *)v14.super.super.super.super.isa layer];
  [v41 setCornerCurve:kCACornerCurveContinuous];

  id v42 = [(objc_class *)v14.super.super.super.super.isa layer];
  id v43 = [self separatorColor];
  id v44 = [v43 CGColor];

  [v42 setBorderColor:v44];
  id v45 = [(objc_class *)v14.super.super.super.super.isa layer];
  [v45 setBorderWidth:1.0];

  [(objc_class *)v14.super.super.super.super.isa setShowsLargeContentViewer:1];
  if (v26)
  {
    sub_1005057FC((uint64_t *)&unk_101672610);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_10117D8C0;
    *(void *)(v46 + 32) = v23;
    *(void *)(v46 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = a4;
    *(void *)(v46 + 4_Block_object_dispose(&STACK[0x250], 8) = v65;
    *(void *)(v46 + 56) = v26;
    swift_bridgeObjectRetain();
    uint64_t v47 = v14.super.super.super.super.isa;
    sub_1005057FC((uint64_t *)&unk_1016773F0);
    sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [(objc_class *)v47 setLargeContentTitle:v48];
  }
  else
  {
    uint64_t v49 = v14.super.super.super.super.isa;
    NSString v50 = String._bridgeToObjectiveC()();
    [(objc_class *)v49 setLargeContentTitle:v50];
  }
  [(objc_class *)v14.super.super.super.super.isa setLargeContentImage:a2];
  id v51 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v67];
  [(objc_class *)v14.super.super.super.super.isa addInteraction:v51];

  uint64_t v52 = self;
  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_101177E70;
  id v54 = [(objc_class *)v14.super.super.super.super.isa widthAnchor];
  id v55 = [v54 constraintEqualToConstant:a5];

  *(void *)(v53 + 32) = v55;
  specialized Array._endMutation()();
  sub_10050BF48(0, (unint64_t *)&qword_101674200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v52 activateConstraints:isa];

  id v57 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v67];
  [(objc_class *)v14.super.super.super.super.isa addInteraction:v57];

  return v14.super.super.super.super.isa;
}

void sub_10051D8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (char *)Strong;
    uint64_t v8 = Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_presenter;
    uint64_t v9 = swift_unknownObjectWeakLoadStrong();
    uint64_t v29 = *(void *)(v8 + 16);
    uint64_t v30 = *(void *)(v8 + 8);
    uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_element];
    uint64_t v11 = *(void **)&v7[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController];
    uint64_t v12 = *(void **)&v7[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController];
    objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterColorPaletteBuilder());
    id v13 = v12;
    id v14 = v10;
    id v15 = v11;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100ACED98(v9, v30, v29, v14, v15, v12, 0, 1, a3, a4, 0, 1, 0);
    swift_unknownObjectRelease();

    id v17 = sub_100ACAAB8();
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = swift_unknownObjectWeakLoadStrong();
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v8 + 16);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 64);
        id v24 = v18;
        char v25 = v23(ObjectType, v21);
        double v26 = (*(double (**)(uint64_t, uint64_t))(v21 + 72))(ObjectType, v21);
        id v27 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterPopoverContainerViewController());
        swift_unknownObjectRetain();
        id v28 = v16;
        uint64_t v16 = sub_100656ADC(v24, v16, v25 & 1, 0, v20, v21, v26);
        (*(void (**)(void *, uint64_t, uint64_t))(v21 + 24))(v16, ObjectType, v21);

        swift_unknownObjectRelease();
      }
      else
      {

        uint64_t v16 = v18;
      }
    }
    else
    {
    }
  }
}

id sub_10051DB44()
{
  swift_getObjectType();
  *(void *)(swift_allocObject() + 16) = 1;
  unint64_t v0 = swift_bridgeObjectRetain();
  id v1 = sub_100521E50(v0, (void (*)(unint64_t, id))sub_100522E58);
  swift_bridgeObjectRelease();
  if ((unint64_t)v1 >> 62)
  {
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  }
  swift_bridgeObjectRelease();
  id v2 = objc_allocWithZone((Class)UIStackView);
  sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithArrangedSubviews:isa];

  [v4 setAxis:0];
  [v4 setAlignment:0];
  [v4 setDistribution:1];
  [v4 setSpacing:1.0];
  if (qword_10166EB60 != -1) {
    swift_once();
  }
  double v5 = *(double *)&qword_101719DE0;
  id v6 = [v4 heightAnchor];
  id v7 = [v6 constraintGreaterThanOrEqualToConstant:v5];

  [v7 setActive:1];
  swift_bridgeObjectRelease();

  id v8 = [v4 heightAnchor];
  id v9 = [v8 constraintGreaterThanOrEqualToConstant:*(double *)&qword_101719DE0];

  [v9 setActive:1];
  swift_release();

  return v4;
}

uint64_t sub_10051DE4C(uint64_t a1)
{
  return UIMutableTraits.userInterfaceStyle.setter();
}

id sub_10051DE8C(void *a1, void *a2, uint64_t a3)
{
  if ([a1 accessibilityContrast] == (id)1)
  {
    id v4 = [a2 resolvedColorWithTraitCollection:a3];
    return v4;
  }
  else
  {
    return a2;
  }
}

void sub_10051DF18(Swift::Int a1, void *a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v89 = a8;
  int v88 = a7;
  id v79 = a5;
  uint64_t v17 = sub_1005057FC(&qword_101673A90);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17 - 8, v20);
  uint64_t v21 = &v77[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22, v23);
  char v25 = &v77[-v24];
  if (!a1)
  {
    BOOL v81 = 0;
    uint64_t v80 = 5;
    goto LABEL_8;
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v27 = v75 - 1;
    if (!__OFSUB__(v75, 1)) {
      goto LABEL_4;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v26 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v27 = v26 - 1;
  if (__OFSUB__(v26, 1)) {
    goto LABEL_31;
  }
LABEL_4:
  BOOL v28 = v27 == a1;
  BOOL v81 = v27 != a1;
  uint64_t v29 = 10;
  if (!v28) {
    uint64_t v29 = 0;
  }
  uint64_t v80 = v29;
LABEL_8:
  id v87 = a2;
  uint64_t v90 = a6;
  uint64_t v82 = a12;
  int v83 = a10;
  uint64_t v84 = a9;
  uint64_t v85 = a11;
  sub_100522E9C(a4, (uint64_t)v25, &qword_101673A90);
  uint64_t v30 = type metadata accessor for IndexSet();
  uint64_t v31 = *(void *)(v30 - 8);
  int v32 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48))(v25, 1, v30);
  Swift::Int v86 = a1;
  if (v32 == 1)
  {
    sub_100522F00((uint64_t)v25, &qword_101673A90);
    uint64_t v33 = v18;
  }
  else
  {
    Swift::Bool v34 = IndexSet.contains(_:)(a1);
    (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v25, v30);
    uint64_t v33 = v18;
    if (v34)
    {
      id v79 = sub_100521FAC((uint64_t)v79, v90);
      int v35 = 1;
      uint64_t v36 = &selRef_whiteColor;
      goto LABEL_15;
    }
  }
  id v37 = [self mainScreen];
  id v38 = [v37 traitCollection];

  LODWORD(v37) = [v38 crl_isUserInterfaceStyleDark];
  id v39 = self;
  id v40 = &selRef_tertiarySystemBackgroundColor;
  if (!v37) {
    id v40 = &selRef_secondarySystemBackgroundColor;
  }
  id v79 = [v39 *v40];
  int v35 = 0;
  uint64_t v36 = &selRef_labelColor;
LABEL_15:
  id v41 = [self *v36];
  sub_10050BF48(0, (unint64_t *)&qword_101672600);
  sub_100522E9C(a4, (uint64_t)v21, &qword_101673A90);
  unint64_t v42 = (*(unsigned __int8 *)(v33 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v43 = v42 + v19;
  uint64_t v44 = swift_allocObject();
  unint64_t v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + v44;
  int v78 = v35;
  *(unsigned char *)(v44 + 16) = v35;
  sub_10051B3EC((uint64_t)v21, v44 + v42, &qword_101673A90);
  *(unsigned char *)(v44 + v43) = v88 & 1;
  uint64_t v46 = v84;
  *(void *)(v45 + _Block_object_dispose(&STACK[0x250], 8) = v89;
  *(void *)(v45 + 16) = v46;
  unint64_t v47 = v44 + (((v43 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v48 = v86;
  *(void *)unint64_t v47 = v86;
  *(unsigned char *)(v47 + _Block_object_dispose(&STACK[0x250], 8) = v83 & 1;
  swift_retain();
  uint64_t v49 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v50 = v85;
  if (!v85)
  {
    id v60 = [v87 imageWithTintColor:v41];
    uint64_t v63 = self;
    id v53 = v49;
    id v59 = [v63 labelColor];
    uint64_t v52 = v90;
    uint64_t v61 = v79;
    char v62 = sub_10051E93C(v60, 0, 0, v49, v79, 0, v41, v59, 0, v80, v81, 0, 0, v90);
    id v54 = v41;
    goto LABEL_20;
  }
  id v51 = [v87 imageWithTintColor:v41];
  uint64_t v52 = v90;
  if ((v48 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  if (*(void *)(v50 + 16) <= v48)
  {
LABEL_33:
    __break(1u);
    return;
  }
  id v53 = v51;
  id v54 = v41;
  uint64_t v55 = v50 + 16 * v48;
  uint64_t v56 = *(void *)(v55 + 32);
  uint64_t v57 = *(void *)(v55 + 40);
  uint64_t v58 = self;
  id v59 = v49;
  swift_bridgeObjectRetain();
  id v60 = [v58 labelColor];
  uint64_t v76 = v56;
  uint64_t v61 = v79;
  char v62 = sub_10051E93C(v53, 0, 0, v49, v79, 0, v54, v60, 0, v80, v81, v76, v57, v52);
  swift_bridgeObjectRelease();
LABEL_20:

  UIAccessibilityTraits v64 = UIAccessibilityTraitSelected;
  id v65 = v62;
  unint64_t v66 = (unint64_t)[v65 accessibilityTraits];
  uint64_t v67 = -1;
  if ((v66 & v64) != 0) {
    uint64_t v67 = ~v64;
  }
  unint64_t v68 = v67 & v66;
  if ((v66 & v64) == v64) {
    UIAccessibilityTraits v69 = 0;
  }
  else {
    UIAccessibilityTraits v69 = v64;
  }
  unint64_t v70 = v69 | v66;
  if (v78) {
    unint64_t v71 = v70;
  }
  else {
    unint64_t v71 = v68;
  }
  [v65 setAccessibilityTraits:v71];

  id v72 = objc_allocWithZone((Class)UILargeContentViewerInteraction);
  id v73 = v65;
  id v74 = [v72 initWithDelegate:v52];
  [v73 addInteraction:v74];
}

uint64_t sub_10051E5C4(uint64_t a1, char a2, uint64_t a3, char a4, void (*a5)(unsigned char *, Swift::Int), uint64_t a6, Swift::Int a7, int a8)
{
  int v38 = a8;
  Swift::Int v39 = a7;
  uint64_t v40 = a6;
  id v41 = a5;
  uint64_t v11 = sub_1005057FC(&qword_101673A90);
  __chkstk_darwin(v11 - 8, v12);
  id v14 = &v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15, v16);
  uint64_t v18 = &v37[-v17];
  uint64_t v19 = type metadata accessor for IndexSet();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = &v37[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24, v25);
  uint64_t v27 = &v37[-v26];
  __chkstk_darwin(v28, v29);
  uint64_t v31 = &v37[-v30];
  if (a2)
  {
    sub_100522E9C(a3, (uint64_t)v18, &qword_101673A90);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
      return sub_100522F00((uint64_t)v18, &qword_101673A90);
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v31, v18, v19);
    if (IndexSet.count.getter() == 1 && (a4 & 1) != 0)
    {
      IndexSet.init()();
LABEL_15:
      v41(v27, *((void *)&v33 + 1));
      uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v20 + 8);
      v36(v27, v19);
      return ((uint64_t (*)(unsigned char *, uint64_t))v36)(v31, v19);
    }
    if (IndexSet.count.getter() >= 2)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 16))(v27, v31, v19);
      *(Swift::Int_optional *)&long long v33 = IndexSet.remove(_:)(v39);
      goto LABEL_15;
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v20 + 8))(v31, v19);
  }
  else if (v38)
  {
    sub_100522E9C(a3, (uint64_t)v14, &qword_101673A90);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v19) == 1)
    {
      IndexSet.init()();
      sub_100522F00((uint64_t)v14, &qword_101673A90);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v23, v14, v19);
    }
    Swift::Bool v34 = v41;
    Swift::Int memberAfterInsert = IndexSet.insert(_:)(v39).memberAfterInsert;
    v34(v23, memberAfterInsert);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v20 + 8))(v23, v19);
  }
  else
  {
    IndexSet.init(integer:)();
    ((void (*)(unsigned char *))v41)(v27);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v20 + 8))(v27, v19);
  }
}

void *sub_10051E93C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v46 = a8;
  unint64_t v45 = a6;
  uint64_t v50 = a14;
  uint64_t v47 = a13;
  uint64_t v48 = a12;
  uint64_t v20 = type metadata accessor for UIButton.Configuration();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v49 = a1;
  uint64_t v27 = v26;
  uint64_t v29 = (char *)&v45 - v28;
  uint64_t v31 = v30;
  sub_10051FA58(a1, a2, a3, a5, a7, a9, a10, a11 & 1, 0);
  sub_10050BF48(0, (unint64_t *)&unk_101672590);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v29, v31);
  id v32 = a4;
  long long v33 = (void *)UIButton.init(configuration:primaryAction:)();
  aBlock[4] = sub_10051F9CC(a5, v45, a7, v46);
  aBlock[5] = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_10051CE64;
  aBlock[3] = &unk_101506C58;
  int v35 = _Block_copy(aBlock);
  swift_release();
  [v33 setConfigurationUpdateHandler:v35];
  uint64_t v36 = v35;
  uint64_t v37 = v47;
  _Block_release(v36);
  id v38 = v33;
  if (v37) {
    NSString v39 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v39 = 0;
  }
  [v33 setAccessibilityLabel:v39, v45, v46];

  [v33 setPointerInteractionEnabled:1];
  [v33 setShowsLargeContentViewer:1];
  id v40 = v33;
  if (v37) {
    NSString v41 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v41 = 0;
  }
  [v33 setLargeContentTitle:v41];

  [v33 setLargeContentImage:v49];
  id v42 = objc_allocWithZone((Class)UILargeContentViewerInteraction);
  id v43 = [v42 initWithDelegate:v50];
  [v33 addInteraction:v43];

  [v33 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityExtraLarge];
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v31);
  return v33;
}

id sub_10051ECC0()
{
  id v1 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  String.uppercased()();
  id v2 = self;
  id v3 = [v2 preferredFontForTextStyle:UIFontTextStyleCaption1];
  id v4 = [v3 fontDescriptor];
  id v5 = [v4 fontDescriptorWithSymbolicTraits:2];

  if (v5)
  {
    [v3 pointSize];
    id v6 = [v2 fontWithDescriptor:v5];

    id v3 = v5;
  }
  else
  {
    id v6 = 0;
  }

  [v1 setFont:v6];
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setText:v7];

  id v8 = [self secondaryLabelColor];
  [v1 setTextColor:v8];

  [v1 setTextAlignment:4];
  [v1 setNumberOfLines:0];
  [v1 setAdjustsFontForContentSizeCategory:1];
  [v1 setShowsLargeContentViewer:1];
  id v9 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v0];
  [v1 addInteraction:v9];

  sub_1005057FC((uint64_t *)&unk_101676C10);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101177E70;
  *(void *)(v10 + 32) = v1;
  specialized Array._endMutation()();
  id v11 = objc_allocWithZone((Class)UIStackView);
  sub_10050BF48(0, (unint64_t *)&qword_1016725F0);
  id v12 = v1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithArrangedSubviews:isa];

  [v14 setLayoutMarginsRelativeArrangement:1];
  [v14 setDirectionalLayoutMargins:0.0, 4.0, 0.0, 0.0];

  return v14;
}

void sub_10051EFE0(uint64_t a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  id v39 = a7;
  int v37 = a6;
  uint64_t v36 = a5;
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_1016725A0);
  __chkstk_darwin(v9 - 8, v10);
  int v35 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  id v38 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()();
  swift_bridgeObjectRetain();
  UIButton.Configuration.title.setter();
  if (a4)
  {
    if (a3) {
      a3 = [a3 imageWithTintColor:a4];
    }
  }
  else
  {
    id v21 = a3;
  }
  uint64_t v22 = v35;
  id v23 = v39;
  id v39 = a3;
  UIButton.Configuration.image.setter();
  UIButton.Configuration.imagePadding.setter();
  id v24 = [self configurationWithTextStyle:UIFontTextStyleSubheadline scale:-1];
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for UIButton.Configuration.Size.medium(_:), v16);
  UIButton.Configuration.buttonSize.setter();
  id v25 = [self mainScreen];
  id v26 = [v25 traitCollection];

  LODWORD(v25) = [v26 crl_isUserInterfaceStyleDark];
  uint64_t v27 = self;
  uint64_t v28 = &selRef_tertiarySystemBackgroundColor;
  if (!v25) {
    uint64_t v28 = &selRef_secondarySystemBackgroundColor;
  }
  id v29 = [v27 *v28];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v30 = [self labelColor];
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v38, enum case for UIButton.Configuration.CornerStyle.fixed(_:), v12);
  UIButton.Configuration.cornerStyle.setter();
  uint64_t v31 = (void (*)(char *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.cornerRadius.setter();
  v31(v40, 0);
  UIButton.Configuration.contentInsets.setter();
  *(void *)(swift_allocObject() + 16) = v23;
  id v32 = v23;
  UIConfigurationTextAttributesTransformer.init(_:)();
  uint64_t v33 = type metadata accessor for UIConfigurationTextAttributesTransformer();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v22, 0, 1, v33);
  UIButton.Configuration.titleTextAttributesTransformer.setter();
}

uint64_t sub_10051F440@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AttributeContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a1, v6);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  if (!a2) {
    id v7 = [self preferredFontForTextStyle:UIFontTextStyleSubheadline KeyPath];
  }
  sub_100522B9C();
  id v8 = a2;
  return AttributeContainer.subscript.setter();
}

uint64_t sub_10051F52C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_10051F588()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_10051F5D0()
{
}

void sub_10051F5F8()
{
}

void *sub_10051F614(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, void *a7, void *a8)
{
  uint64_t v9 = v8;
  uint64_t v53 = v9;
  v51[1] = swift_getObjectType();
  int v18 = a6 & 1;
  uint64_t v19 = type metadata accessor for UIButton.Configuration();
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  id v26 = (char *)v51 - v25;
  uint64_t v52 = a3;
  uint64_t v27 = a3;
  uint64_t v29 = v28;
  uint64_t v30 = a5;
  uint64_t v32 = v31;
  sub_10051EFE0(a1, a2, v27, a4, v30, v18, a8);
  sub_10050BF48(0, (unint64_t *)&unk_101672590);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v22, v26, v32);
  id v33 = a7;
  uint64_t v34 = (void *)UIButton.init(configuration:primaryAction:)();
  int v35 = self;
  id v36 = [v35 labelColor];
  id v37 = [v35 labelColor];
  id v38 = sub_10051F9CC(0, 0, v36, v37);
  uint64_t v40 = v39;

  aBlock[4] = v38;
  aBlock[5] = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_10051CE64;
  aBlock[3] = &unk_101506D68;
  NSString v41 = _Block_copy(aBlock);
  swift_release();
  [v34 setConfigurationUpdateHandler:v41];
  _Block_release(v41);
  id v42 = v34;
  if (a2) {
    NSString v43 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v43 = 0;
  }
  [v34 setAccessibilityLabel:v43];

  [v34 setShowsLargeContentViewer:1];
  id v44 = v34;
  if (a2) {
    NSString v45 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v45 = 0;
  }
  [v34 setLargeContentTitle:v45];

  [v34 setLargeContentImage:v52];
  id v46 = objc_allocWithZone((Class)UILargeContentViewerInteraction);
  id v47 = [v46 initWithDelegate:v53];
  [v34 addInteraction:v47];

  id v48 = [v34 titleLabel];
  if (v48)
  {
    uint64_t v49 = v48;
    [v48 setTextAlignment:1];
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v32);
  return v34;
}

uint64_t (*sub_10051F9CC(void *a1, void *a2, void *a3, void *a4))(void *a1)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a4;
  void v9[3] = a2;
  void v9[4] = a3;
  void v9[5] = a1;
  v9[6] = v4;
  id v10 = a4;
  id v11 = a2;
  id v12 = a3;
  id v13 = a1;
  return sub_100522B50;
}

uint64_t sub_10051FA58(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, uint64_t a7, int a8, char a9)
{
  int v47 = a8;
  int v48 = a6;
  uint64_t v43 = a7;
  id v46 = a5;
  uint64_t v49 = a4;
  uint64_t v10 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10, v11);
  id v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  int v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1005057FC((uint64_t *)&unk_1016725A0);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()();
  id v23 = a1;
  UIButton.Configuration.image.setter();
  if (a9) {
    id v24 = [self configurationWithPointSize:4 weight:-1 scale:17.0];
  }
  else {
    id v24 = [self configurationWithTextStyle:UIFontTextStyleBody scale:-1];
  }
  id v25 = v24;
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  swift_bridgeObjectRetain();
  UIButton.Configuration.title.setter();
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = a9 & 1;
  *(unsigned char *)(v26 + 17) = v48 & 1;
  UIConfigurationTextAttributesTransformer.init(_:)();
  uint64_t v27 = type metadata accessor for UIConfigurationTextAttributesTransformer();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v22, 0, 1, v27);
  UIButton.Configuration.titleTextAttributesTransformer.setter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for UIButton.Configuration.Size.small(_:), v14);
  UIButton.Configuration.buttonSize.setter();
  uint64_t v28 = v49;
  if (!v49)
  {
    id v29 = [self mainScreen];
    id v30 = [v29 traitCollection];

    LODWORD(v29) = [v30 crl_isUserInterfaceStyleDark];
    uint64_t v31 = self;
    if (v29) {
      id v32 = [v31 tertiarySystemBackgroundColor];
    }
    else {
      id v32 = [v31 secondarySystemBackgroundColor];
    }
    id v33 = v32;
  }
  char v34 = v47;
  uint64_t v36 = v45;
  int v35 = v46;
  uint64_t v37 = v44;
  id v38 = v28;
  UIButton.Configuration.baseBackgroundColor.setter();
  id v39 = v35;
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v13, enum case for UIButton.Configuration.CornerStyle.fixed(_:), v36);
  UIButton.Configuration.cornerStyle.setter();
  UIButton.Configuration.contentInsets.setter();
  uint64_t v40 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.cornerRadius.setter();
  uint64_t result = v40(v50, 0);
  if ((v34 & 1) == 0)
  {
    sub_1003E86EC();
    id v42 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.background.modify();
    UIBackgroundConfiguration._maskedCorners.setter();
    return v42(v50, 0);
  }
  return result;
}

uint64_t sub_10051FF20@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AttributeContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a4, a1, v8);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v9 = self;
  uint64_t v10 = v9;
  if (a2)
  {
    uint64_t v11 = &selRef_italicSystemFontOfSize_;
    if ((a3 & 1) == 0) {
      uint64_t v11 = &selRef_systemFontOfSize_;
    }
    [v9 *v11:17.0 KeyPath];
  }
  else
  {
    id v12 = [v9 preferredFontForTextStyle:UIFontTextStyleBody KeyPath];
    id v13 = v12;
    if (a3)
    {
      id v14 = [v12 fontDescriptor];
      id v15 = [v14 fontDescriptorWithSymbolicTraits:1];

      if (v15)
      {
        [v13 pointSize];
        [v10 fontWithDescriptor:v15];
      }
      else
      {
      }
    }
  }
  sub_100522B9C();
  return AttributeContainer.subscript.setter();
}

void *sub_1005200E8(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  return sub_10051E93C(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, 1, 0, 0, 0);
}

id sub_100520268(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  uint64_t v10 = v9;
  id v46 = a6;
  int v47 = a8;
  uint64_t v43 = a5;
  uint64_t v44 = a7;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = type metadata accessor for UIButton.Configuration();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  id v23 = (char *)&v42 - v22;
  uint64_t v48 = a2;
  uint64_t v49 = a1;
  id v24 = a1;
  uint64_t v25 = a2;
  uint64_t v27 = v43;
  uint64_t v26 = v44;
  sub_10051FA58(v24, v25, a3, v43, v44, a9, 0, 1, 1);
  type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
  uint64_t v50 = v16;
  uint64_t v51 = v15;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v23, v15);
  id v28 = a4;
  id v29 = (void *)UIButton.init(configuration:primaryAction:)();
  swift_unknownObjectWeakAssign();
  aBlock[4] = sub_10051F9CC(v27, v46, v26, v47);
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_10051CE64;
  aBlock[3] = &unk_101506D40;
  uint64_t v31 = _Block_copy(aBlock);
  id v32 = v29;
  swift_release();
  [v32 setConfigurationUpdateHandler:v31];
  _Block_release(v31);

  id v33 = v32;
  if (a3) {
    NSString v34 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v34 = 0;
  }
  [v32 setAccessibilityLabel:v34];

  [v32 setShowsLargeContentViewer:1];
  id v35 = v32;
  if (a3) {
    NSString v36 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v36 = 0;
  }
  [v32 setLargeContentTitle:v36];

  uint64_t v37 = v49;
  [v32 setLargeContentImage:v49];
  id v38 = [objc_allocWithZone((Class)UILargeContentViewerInteraction) initWithDelegate:v10];
  [v32 addInteraction:v38];

  if (!v37)
  {
    id v39 = self;
    id v40 = [v32 titleLabel];
    [v39 crlaxTurnOnButtonShapeUnderlines:v40];
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v51);
  return v32;
}

uint64_t sub_1005205FC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = sub_1005057FC(&qword_10168A8B0);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  id v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v45 - v25;
  __chkstk_darwin(v24, v27);
  id v29 = (char *)&v45 - v28;
  if ([a1 state] == (id)1)
  {
    id v46 = a3;
    UIButton.configuration.getter();
    uint64_t v30 = type metadata accessor for UIButton.Configuration();
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48);
    if (v31(v29, 1, v30))
    {
      sub_100522E9C((uint64_t)v29, (uint64_t)v26, &qword_10168A8B0);
      UIButton.configuration.setter();
      sub_100522F00((uint64_t)v29, &qword_10168A8B0);
    }
    else
    {
      id v34 = a2;
      UIButton.Configuration.baseForegroundColor.setter();
      UIButton.configuration.setter();
    }
    UIButton.configuration.getter();
    if (v31(v22, 1, v30))
    {
      sub_100522E9C((uint64_t)v22, (uint64_t)v26, &qword_10168A8B0);
      UIButton.configuration.setter();
      return sub_100522F00((uint64_t)v22, &qword_10168A8B0);
    }
    uint64_t v37 = v46;
    if (!v46) {
      sub_100521B60();
    }
    id v38 = v37;
    UIButton.Configuration.baseBackgroundColor.setter();
  }
  else
  {
    UIButton.configuration.getter();
    uint64_t v32 = type metadata accessor for UIButton.Configuration();
    id v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48);
    if (v33(v18, 1, v32))
    {
      sub_100522E9C((uint64_t)v18, (uint64_t)v26, &qword_10168A8B0);
      UIButton.configuration.setter();
      sub_100522F00((uint64_t)v18, &qword_10168A8B0);
    }
    else
    {
      id v36 = a4;
      UIButton.Configuration.baseForegroundColor.setter();
      UIButton.configuration.setter();
    }
    UIButton.configuration.getter();
    if (v33(v14, 1, v32))
    {
      sub_100522E9C((uint64_t)v14, (uint64_t)v26, &qword_10168A8B0);
      UIButton.configuration.setter();
      return sub_100522F00((uint64_t)v14, &qword_10168A8B0);
    }
    if (!a5)
    {
      id v39 = [self mainScreen];
      id v40 = [v39 traitCollection];

      LODWORD(v39) = [v40 crl_isUserInterfaceStyleDark];
      NSString v41 = self;
      if (v39) {
        id v42 = [v41 tertiarySystemBackgroundColor];
      }
      else {
        id v42 = [v41 secondarySystemBackgroundColor];
      }
      id v43 = v42;
    }
    id v44 = a5;
    UIButton.Configuration.baseBackgroundColor.setter();
  }
  return UIButton.configuration.setter();
}

uint64_t sub_100520A20(void *a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static UIButton.Configuration.plain()();
  id v12 = a1;
  UIButton.Configuration.image.setter();
  (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.Size.small(_:), v7);
  UIButton.Configuration.buttonSize.setter();
  id v13 = [self configurationWithPointSize:4 weight:15.0];
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  id v14 = self;
  id v15 = [v14 clearColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v16 = [v14 labelColor];
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v6, enum case for UIButton.Configuration.CornerStyle.fixed(_:), v2);
  UIButton.Configuration.cornerStyle.setter();
  uint64_t v17 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.cornerRadius.setter();
  return v17(v19, 0);
}

void *sub_100520C60()
{
  unint64_t v0 = sub_1007FE0AC();
  if (v0) {
    sub_10057C1E4(v0);
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100520CB8(uint64_t a1, uint64_t a2)
{
  sub_100522D7C(a2, (uint64_t)v11);
  type metadata accessor for CRLBoardItem(0);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = sub_1007FE0AC();
  if (!v3)
  {

    return v3;
  }
  char v4 = sub_1006E5050(v10, v3);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {

    return 0;
  }
  uint64_t v5 = (uint64_t *)(*(void *)(a1 + OBJC_IVAR____TtC8Freeform15CRLChangeRecord_details)
                 + OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16) && (uint64_t v7 = sub_1009563E8(11), (v8 & 1) != 0))
  {
    sub_100522E9C(*(void *)(v6 + 56) + 32 * v7, (uint64_t)v11, &qword_101672BF0);
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    memset(v11, 0, 24);
    _OWORD v11[3] = 1;
  }
  sub_100522F00((uint64_t)v11, (uint64_t *)&unk_1016725E0);

  return v3;
}

uint64_t sub_100520E60()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
  if (!v1) {
    return 0;
  }
  id v2 = [v1 canvasView];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  type metadata accessor for CRLiOSBoardView();
  while (1)
  {
    uint64_t v4 = swift_dynamicCastClass();
    if (v4) {
      break;
    }
    id v5 = [v3 superview];

    uint64_t v3 = v5;
    if (!v5)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 619, (uint64_t)"invalid nil value found", 23, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 619);
      uint64_t v6 = 0;
      uint64_t v3 = 0;
      goto LABEL_9;
    }
  }
  uint64_t v6 = (void *)v4;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  id v8 = v3;
  if (Strong)
  {
    swift_unknownObjectRelease();
LABEL_10:
    if (swift_unknownObjectWeakLoadStrong())
    {
      self;
      uint64_t v9 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v9) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
LABEL_9:
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 620, (uint64_t)"invalid nil value found", 23, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 620);
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_10;
  }
LABEL_12:
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 621, (uint64_t)"invalid nil value found", 23, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crlaxPreferredViewControllerForLargeContentViewer", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 621);
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_18:

    return 0;
  }
LABEL_13:
  if (!swift_unknownObjectWeakLoadStrong())
  {

    goto LABEL_18;
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();

  if (!v10) {
    swift_unknownObjectRelease();
  }

  return v10;
}

id sub_1005211CC()
{
  return sub_100521988(type metadata accessor for CRLiOSMiniFormatterBuilder);
}

uint64_t type metadata accessor for CRLiOSMiniFormatterBuilder()
{
  return self;
}

uint64_t sub_1005212A8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x180))() & 1;
}

uint64_t sub_100521308()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x188))() & 1;
}

uint64_t sub_100521368()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x190))() & 1;
}

uint64_t sub_1005213C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1C0))() & 1;
}

uint64_t sub_100521428()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1C8))() & 1;
}

id sub_100521490(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  id v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterBaseLayerButton_isPresentingPopover] = a1;
  if (a2)
  {
    return [v3 setHighlighted:a1 & 1];
  }
  else
  {
    sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
    uint64_t v22 = static OS_dispatch_queue.main.getter();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v3;
    *(unsigned char *)(v17 + 24) = a1 & 1;
    aBlock[4] = sub_100522CC8;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    aBlock[2] = sub_100679958;
    aBlock[3] = &unk_101506D18;
    uint64_t v18 = _Block_copy(aBlock);
    uint64_t v19 = v3;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100522CDC();
    sub_1005057FC((uint64_t *)&unk_1016725D0);
    sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v20 = (void *)v22;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

id sub_100521898()
{
  return sub_100521988(type metadata accessor for CRLiOSMiniFormatterBaseLayerButton);
}

uint64_t type metadata accessor for CRLiOSMiniFormatterBaseLayerButton()
{
  return self;
}

id sub_100521970()
{
  return sub_100521988(type metadata accessor for CRLiOSMiniFormatterColorPickerViewController);
}

id sub_100521988(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for CRLiOSMiniFormatterColorPickerViewController()
{
  return self;
}

uint64_t sub_100521A30(uint64_t a1, uint64_t a2)
{
  return sub_100ACD1B8(a1, a2) & 1;
}

unint64_t sub_100521A64()
{
  id v1 = *(void **)(*(void *)(*v0 + OBJC_IVAR____TtC8Freeform44CRLiOSMiniFormatterColorPickerViewController_builder)
                + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_element);
  if (([v1 options] & 0x10) != 0) {
    return 1;
  }
  else {
    return ((unint64_t)[v1 options] >> 19) & 1;
  }
}

void sub_100521AC8()
{
}

id sub_100521AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (objc_class *)type metadata accessor for CRLiOSMiniFormatterColorPickerViewController();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtC8Freeform44CRLiOSMiniFormatterColorPickerViewController_builder] = a2;
  uint64_t v10 = &v9[OBJC_IVAR____TtC8Freeform44CRLiOSMiniFormatterColorPickerViewController_popoverDelegate];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a5;
  v12.receiver = v9;
  v12.super_class = v8;
  return [super init];
}

id sub_100521B60()
{
  uint64_t v0 = self;
  id v1 = [v0 mainScreen];
  id v2 = [v1 traitCollection];

  LODWORD(v1) = [v2 crl_isUserInterfaceStyleDark];
  objc_super v3 = self;
  uint64_t v4 = &selRef_tertiarySystemBackgroundColor;
  if (!v1) {
    uint64_t v4 = &selRef_secondarySystemBackgroundColor;
  }
  id v5 = [v3 *v4];
  id v6 = [v0 mainScreen];
  id v7 = [v6 traitCollection];

  LODWORD(v6) = [v7 crl_isUserInterfaceStyleDark];
  uint64_t v8 = self;
  uint64_t v9 = &selRef_tertiarySystemFillColor;
  if (!v6) {
    uint64_t v9 = &selRef_secondarySystemFillColor;
  }
  id v10 = [v8 *v9];
  id v11 = sub_100B049B0(v10);

  return v11;
}

id sub_100521CB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  objc_super v12 = &v6[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_presenter];
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (uint64_t *)&v6[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_crlaxAccessibilityFormatterLabel];
  uint64_t *v13 = 0;
  v13[1] = 0;
  *((void *)v12 + 1) = a2;
  *((void *)v12 + 2) = a3;
  swift_unknownObjectWeakAssign();
  *(void *)&v6[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_element] = a4;
  *(void *)&v6[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController] = a5;
  *(void *)&v6[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController] = a6;
  uint64_t v14 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterBoardItemDataProvider());
  *(void *)&v14[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a5;
  v26.receiver = v14;
  v26.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
  id v15 = a5;
  id v16 = v6;
  id v17 = a4;
  id v18 = a6;
  *(void *)&v16[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_boardItemDataProvider] = [v26 init];
  id v19 = [v17 crlaxLabel];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
  }
  uint64_t *v13 = v21;
  v13[1] = v23;

  swift_bridgeObjectRelease();
  v25.receiver = v16;
  v25.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterBuilder();
  return [super init];
}

double *sub_100521E50(unint64_t a1, void (*a2)(unint64_t, id))
{
  specialized ContiguousArray.reserveCapacity(_:)();
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        id v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_12;
        }
        a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v4;
        if (v7 == v3) {
          goto LABEL_14;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_14;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

id sub_100521FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a1 + 16);
  id v2 = *(void **)(a1 + 16);
  id v4 = v2;
  if (v2 == (void *)1)
  {
    if (qword_10166EB38 != -1) {
      swift_once();
    }
    id v4 = (id)qword_101719DB0;
    if (qword_101719DB0)
    {
      id v6 = *(void **)(a2 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
      if (v6)
      {
        id v7 = (id)qword_101719DB0;
        id v8 = [v6 canvasView];
        if (v8)
        {
          uint64_t v9 = v8;
          id v10 = [v8 traitCollection];

          if (v10)
          {
            id v11 = v10;
            objc_super v12 = (void *)UITraitCollection.modifyingTraits(_:)();

            uint64_t v13 = swift_allocObject();
            *(void *)(v13 + 16) = v7;
            *(void *)(v13 + 24) = v12;
            id v14 = objc_allocWithZone((Class)UIColor);
            v22[4] = sub_1005231AC;
            void v22[5] = v13;
            v22[0] = _NSConcreteStackBlock;
            v22[1] = *(void *)"";
            v22[2] = sub_1005058D4;
            v22[3] = &unk_101506E30;
            id v15 = _Block_copy(v22);
            id v16 = v7;
            id v17 = v12;
            id v4 = [v14 initWithDynamicProvider:v15];
            _Block_release(v15);

            swift_release();
          }
        }
      }
      else
      {
        id v18 = (id)qword_101719DB0;
      }
    }
    swift_beginAccess();
    id v19 = *v3;
    *uint64_t v3 = v4;
    id v20 = v4;
    sub_100522AD8(v19);
  }
  sub_10052315C(v2);
  return v4;
}

char *sub_1005221D8(void *a1, void *a2, void *a3, void *a4)
{
  if (([a1 options] & 4) != 0
    || ([a1 options] & 0x1000) != 0
    || ([a1 options] & 0x80000) != 0)
  {
    id v13 = a4;
    id v14 = a1;
    id v15 = a3;
    unint64_t v16 = ((unint64_t)[v14 options] >> 19) & 1;
    objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterColorPaletteBuilder());
    id v17 = a2;
    id v18 = sub_100ACED98((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v14, v15, a4, v16, 0, 0, 0, 0, 1, 0);
  }
  else
  {
    if (([a1 options] & 8) != 0)
    {
      objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterStrokeBuilder());
      id v20 = a4;
      id v21 = a2;
      return sub_1009D823C((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, a1, a3, a4);
    }
    if (([a1 options] & 0x10) == 0
      && ([a1 options] & 0x2000) == 0
      && ([a1 options] & 0x20000) == 0
      && ([a1 options] & 0x100000) == 0)
    {
      if (([a1 options] & 0x20) != 0)
      {
        id v23 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterLineEndsBuilder());
        uint64_t v24 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterLineDataProvider());
        *(void *)&v24[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a3;
        v44.receiver = v24;
        v44.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
        id v25 = a1;
        id v26 = a3;
        id v27 = a4;
        id v28 = a2;
        id v29 = (char *)v23;
        id v30 = [super init];
        uint64_t v31 = OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterLineEndsBuilder_lineDataProvider;
      }
      else if (([a1 options] & 0x40) != 0)
      {
        id v32 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterConnectionLineBuilder());
        id v33 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterLineDataProvider());
        *(void *)&v33[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a3;
        v43.receiver = v33;
        v43.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
        id v25 = a1;
        id v26 = a3;
        id v27 = a4;
        id v28 = a2;
        id v29 = (char *)v32;
        [super init];
        uint64_t v31 = OBJC_IVAR____TtC8Freeform40CRLiOSMiniFormatterConnectionLineBuilder_lineDataProvider;
      }
      else
      {
        if (([a1 options] & 0x80) != 0
          || ([a1 options] & 0x200) != 0)
        {
          id v34 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterImageAndMovieBuilder());
          id v35 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterMediaDataProvider());
          *(void *)&v35[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a3;
          v42.receiver = v35;
          v42.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
          id v25 = a1;
          id v26 = a3;
          id v27 = a4;
          id v28 = a2;
          id v29 = (char *)v34;
          id v30 = [super init];
        }
        else
        {
          if (([a1 options] & 0x100) == 0)
          {
            if (([a1 options] & 0x800) != 0)
            {
              objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterURLBuilder());
              id v8 = a4;
              id v9 = a2;
              id v10 = a1;
              id v11 = a3;
              id v12 = sub_100BC1DF0((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v10, v11, a4);
              goto LABEL_34;
            }
            if (([a1 options] & 0x400) != 0)
            {
              objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterFileBuilder());
              id v8 = a4;
              id v9 = a2;
              id v10 = a1;
              id v11 = a3;
              id v12 = sub_1009DDBE0((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v10, v11, a4);
              goto LABEL_34;
            }
            if (([a1 options] & 0x800000) != 0)
            {
              objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterUSDZBuilder());
              id v8 = a4;
              id v9 = a2;
              id v10 = a1;
              id v11 = a3;
              id v12 = sub_1008E33D8((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v10, v11, a4);
              goto LABEL_34;
            }
            if (([a1 options] & 0x4000) == 0)
            {
              objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterBuilder());
              id v8 = a4;
              id v9 = a2;
              id v10 = a1;
              id v11 = a3;
              id v12 = sub_100521CB4((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v10, v11, a4);
LABEL_34:
              id v18 = v12;

              return (char *)v18;
            }
            id v38 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterArrangeBuilder());
            id v39 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterArrangeDataProvider());
            *(void *)&v39[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a3;
            v40.receiver = v39;
            v40.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
            id v25 = a1;
            id v26 = a3;
            id v27 = a4;
            id v28 = a2;
            id v29 = (char *)v38;
            [super init];
            uint64_t v31 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterArrangeBuilder_arrangeDataProvider;
            goto LABEL_29;
          }
          id v36 = objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterMediaBuilder());
          uint64_t v37 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterMediaDataProvider());
          *(void *)&v37[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a3;
          v41.receiver = v37;
          v41.super_class = (Class)type metadata accessor for CRLMiniFormatterDataProvider();
          id v25 = a1;
          id v26 = a3;
          id v27 = a4;
          id v28 = a2;
          id v29 = (char *)v36;
          id v30 = [super init];
        }
        uint64_t v31 = OBJC_IVAR____TtC8Freeform31CRLiOSMiniFormatterMediaBuilder_mediaDataProvider;
      }
LABEL_29:
      *(void *)&v29[v31] = v30;

      id v18 = sub_100521CB4((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v25, v26, a4);
      return (char *)v18;
    }
    objc_allocWithZone((Class)type metadata accessor for CRLiOSMiniFormatterTextBuilder());
    id v13 = a4;
    id v22 = a2;
    id v14 = a1;
    id v15 = a3;
    id v18 = sub_100564EFC((uint64_t)a2, (uint64_t)&off_10150E1B8, (uint64_t)&off_10150D6C8, v14, v15, a4, 0, 0, 0.0, 0, 0, 0, 0);
  }
  return (char *)v18;
}

id sub_1005228E4()
{
  id result = (id)sub_100520E60();
  if (!result)
  {
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (!result)
    {
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"viewController(for:)", 20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 599, (uint64_t)"No view controller for UILargeContentViewerInteraction. Returning a placeholder.", 80, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"viewController(for:)", 20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterBuilder.swift", 101, 2, 599);
      id v1 = objc_allocWithZone((Class)UIViewController);
      return [v1 init];
    }
  }
  return result;
}

void sub_1005229F8()
{
  id v1 = (void *)sub_100ACCC24();
  if (v1 != (void *)1)
  {
    uint64_t v3 = v1;
    if ((v2 & 1) == 0)
    {
      if (!v1) {
        return;
      }
      id v4 = [v1 referenceColor];
      if (v4)
      {
        id v5 = v4;
        id v6 = [v4 UIColor];

        if (v6)
        {
          [v0 crl_ifVisuallyDifferentSetSelectedColor:v6 preservingColorSpaceIfPossible:1];
        }
      }
    }
    sub_100522AD8(v3);
  }
}

void sub_100522AD8(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_100522AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
  return swift_retain();
}

uint64_t sub_100522AF8()
{
  return swift_release();
}

uint64_t sub_100522B00()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100522B50(void *a1)
{
  return sub_1005205FC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100522B60()
{
  return _swift_deallocObject(v0, 18, 7);
}

uint64_t sub_100522B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10051FF20(a1, *(unsigned char *)(v2 + 16), *(unsigned char *)(v2 + 17), a2);
}

void sub_100522B7C()
{
}

unint64_t sub_100522B9C()
{
  unint64_t result = qword_101673AA0;
  if (!qword_101673AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101673AA0);
  }
  return result;
}

void sub_100522BF0()
{
}

uint64_t sub_100522C18()
{
  return 8;
}

uint64_t sub_100522C24()
{
  return swift_release();
}

uint64_t sub_100522C2C(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_100522C3C()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_100522C84(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100522C90()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_100522CC8()
{
  return [*(id *)(v0 + 16) setHighlighted:*(unsigned __int8 *)(v0 + 24)];
}

unint64_t sub_100522CDC()
{
  unint64_t result = qword_1016747E0;
  if (!qword_1016747E0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016747E0);
  }
  return result;
}

uint64_t sub_100522D34(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100522D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100522DD8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100522E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10051F440(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100522E18()
{
  id v1 = *(void **)(v0 + 16);
  if (v1 != (void *)1) {

  }
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100522E58(Swift::Int a1, void *a2)
{
  sub_10051DF18(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t sub_100522E9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1005057FC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100522F00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1005057FC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100522F5C()
{
  uint64_t v1 = *(void *)(sub_1005057FC(&qword_101673A90) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for IndexSet();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((v3 + v4) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1005230A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1005057FC(&qword_101673A90) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + v1;
  char v7 = *(unsigned char *)(v1 + 16);
  uint64_t v8 = v1 + v4;
  char v9 = *(unsigned char *)(v1 + v5);
  id v10 = *(void (**)(unsigned char *, Swift::Int))(v6 + 8);
  uint64_t v11 = *(void *)(v6 + 16);
  uint64_t v12 = v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  Swift::Int v13 = *(void *)v12;
  int v14 = *(unsigned __int8 *)(v12 + 8);

  return sub_10051E5C4(a1, v7, v8, v9, v10, v11, v13, v14);
}

id sub_10052315C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10052316C()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1005231AC(void *a1)
{
  return sub_10051DE8C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005231B4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100523204()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10052323C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10052327C(uint64_t a1)
{
  sub_10051D8F8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100523288(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100522D34(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005232CC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_10052330C(uint64_t a1)
{
  return sub_10051CECC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_100523318(void **a1)
{
  sub_10051CBE4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100523320()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100523358(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

void sub_100523390(void *a1)
{
}

uint64_t sub_100523398(uint64_t a1)
{
  return a1;
}

uint64_t sub_1005233F4()
{
  v1[40] = v0;
  uint64_t v2 = type metadata accessor for CocoaError.Code();
  v1[41] = v2;
  v1[42] = *(void *)(v2 - 8);
  v1[43] = swift_task_alloc();
  uint64_t v3 = sub_1005057FC((uint64_t *)&unk_101684F90);
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  sub_1005057FC((uint64_t *)&unk_101674170);
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  v1[52] = sub_1005057FC(&qword_101684FA0);
  v1[53] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[54] = v4;
  v1[55] = *(void *)(v4 - 8);
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  sub_1005057FC(&qword_101672E90);
  v1[58] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[59] = v5;
  v1[60] = *(void *)(v5 - 8);
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  sub_1005057FC((uint64_t *)&unk_101674520);
  v1[65] = swift_task_alloc();
  return _swift_task_switch(sub_100523700, v0, 0);
}

uint64_t sub_100523700()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper__assetUUIDsNeedingDownload;
  *(void *)(v0 + 52_Block_object_dispose(&STACK[0x250], 8) = OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper__assetUUIDsNeedingDownload;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    swift_bridgeObjectRetain();
LABEL_35:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v37(v3);
  }
  uint64_t v4 = *(void *)(v1 + 120);
  *(void *)(v0 + 536) = v4;
  sub_100528B9C((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(v0 + 296) = Set.init(minimumCapacity:)();
  char v5 = *(unsigned char *)(v4 + 32);
  *(unsigned char *)(v0 + 664) = v5;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << v5;
  if (-(-1 << v5) < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & *(void *)(v4 + 56);
  *(void *)(v0 + 544) = 0;
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = __clz(__rbit64(v8));
    uint64_t v11 = (v8 - 1) & v8;
    uint64_t v12 = *(void **)(v0 + 536);
    goto LABEL_7;
  }
  unint64_t v26 = 63 - v7;
  uint64_t v12 = *(void **)(v0 + 536);
  if (v26 <= 0x7F) {
    goto LABEL_33;
  }
  unint64_t v27 = v12[8];
  if (!v27)
  {
    if (v26 >= 0xC0)
    {
      unint64_t v27 = v12[9];
      if (v27)
      {
        uint64_t v9 = 2;
        goto LABEL_13;
      }
      if (v26 >= 0x100)
      {
        unint64_t v27 = v12[10];
        if (v27)
        {
          uint64_t v9 = 3;
          goto LABEL_13;
        }
        if (v26 >= 0x140)
        {
          unint64_t v27 = v12[11];
          if (v27)
          {
            uint64_t v9 = 4;
            goto LABEL_13;
          }
          uint64_t v34 = 0;
          uint64_t v35 = v26 >> 6;
          if (v35 <= 5) {
            uint64_t v35 = 5;
          }
          uint64_t v36 = v35 - 5;
          while (v36 != v34)
          {
            unint64_t v27 = v12[v34++ + 12];
            if (v27)
            {
              uint64_t v9 = v34 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_33:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 520), 1, 1, *(void *)(v0 + 472));
    goto LABEL_34;
  }
  uint64_t v9 = 1;
LABEL_13:
  uint64_t v11 = (v27 - 1) & v27;
  unint64_t v10 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_7:
  *(void *)(v0 + 56UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v11;
  *(void *)(v0 + 552) = v9;
  uint64_t v13 = *(void *)(v0 + 520);
  uint64_t v14 = *(void *)(v0 + 472);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v16 = v12[6];
  uint64_t v17 = *(void *)(v15 + 72);
  *(void *)(v0 + 56_Block_object_dispose(&STACK[0x250], 8) = v17;
  uint64_t v18 = v16 + v17 * v10;
  id v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(void *)(v0 + 576) = v19;
  *(void *)(v0 + 584) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v13, v18, v14);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_34:
    swift_release();
    uint64_t v3 = *(void *)(v0 + 296);
    *(void *)(*(void *)(v0 + 320) + *(void *)(v0 + 528)) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v20 = *(void *)(v0 + 320);
  (*(void (**)(void, void, void))(*(void *)(v0 + 480) + 32))(*(void *)(v0 + 512), *(void *)(v0 + 520), *(void *)(v0 + 472));
  id v21 = *(char **)(v20 + 112);
  uint64_t v22 = *(void *)&v21[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 16));
  uint64_t v23 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  uint64_t v24 = *(void **)&v21[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  if (v24)
  {
    id v25 = *(id *)&v21[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  }
  else
  {
    id v28 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
    id v29 = v21;
    id v30 = sub_100EAFDE4((uint64_t)v29);

    uint64_t v31 = *(void **)&v21[v23];
    *(void *)&v21[v23] = v30;
    id v25 = v30;

    uint64_t v24 = 0;
  }
  *(void *)(v0 + 592) = v25;
  id v32 = *(os_unfair_lock_s **)(v22 + 16);
  id v33 = v24;
  os_unfair_lock_unlock(v32);
  return _swift_task_switch(sub_100523B90, 0, 0);
}

uint64_t sub_100523B90()
{
  uint64_t v1 = v0[74];
  uint64_t v2 = OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock;
  v0[75] = OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock;
  uint64_t v3 = *(void *)(v1 + v2);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  uint64_t v4 = OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache;
  v0[76] = OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  int64x2_t v117 = (uint64_t *)v5;
  uint64_t v6 = *(void *)v5;
  if (*(void *)(*(void *)v5 + 16))
  {
    uint64_t v7 = v0[64];
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_100955FC8(v7);
    uint64_t v9 = v0[51];
    uint64_t v10 = v0[44];
    uint64_t v11 = v0[45];
    if (v12)
    {
      sub_100528CA0(*(void *)(v6 + 56) + *(void *)(v11 + 72) * v8, v0[51]);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v13(v9, 0, 1, v10);
    }
    else
    {
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v13(v0[51], 1, 1, v10);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[45] + 56);
    v13(v0[51], 1, 1, v0[44]);
  }
  v0[77] = (uint64_t)v13;
  uint64_t v14 = v0[51];
  uint64_t v15 = v0[44];
  uint64_t v16 = v0[45];
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v0[78] = (uint64_t)v17;
  v0[79] = (v16 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v17(v14, 1, v15) == 1)
  {
    sub_100522F00(v0[51], (uint64_t *)&unk_101674170);
    goto LABEL_11;
  }
  int64x2_t v110 = v17;
  uint64_t v112 = v2;
  uint64_t v114 = v1;
  int64x2_t v116 = v13;
  uint64_t v18 = v0[57];
  uint64_t v19 = v0[54];
  uint64_t v21 = v0[52];
  uint64_t v20 = v0[53];
  uint64_t v22 = *(void (**)(uint64_t))(v0[55] + 32);
  int v23 = *(_DWORD *)(v0[51] + *(int *)(v0[44] + 48));
  uint64_t v24 = *(int *)(v21 + 48);
  v22(v20);
  *(_DWORD *)(v20 + v24) = v23;
  int v25 = *(_DWORD *)(v20 + *(int *)(v21 + 48));
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v18, v20, v19);
  if ((v25 & 2) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v0[55] + 8))(v0[57], v0[54]);
    uint64_t v1 = v114;
    uint64_t v13 = v116;
    uint64_t v17 = v110;
    uint64_t v2 = v112;
LABEL_11:
    uint64_t v26 = *(void *)(v1 + v2);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 16));
    uint64_t v27 = *v117;
    if (*(void *)(*v117 + 16))
    {
      uint64_t v28 = v0[64];
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_100955FC8(v28);
      uint64_t v30 = v0[50];
      uint64_t v31 = v0[44];
      if (v32)
      {
        sub_100528CA0(*(void *)(v27 + 56) + *(void *)(v0[45] + 72) * v29, v0[50]);
        v13(v30, 0, 1, v31);
      }
      else
      {
        v13(v0[50], 1, 1, v0[44]);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v13(v0[50], 1, 1, v0[44]);
    }
    uint64_t v34 = v0[50];
    uint64_t v35 = v0[44];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 16));
    if (v17(v34, 1, v35) == 1)
    {
      sub_100522F00(v0[50], (uint64_t *)&unk_101674170);
      uint64_t v36 = (void *)swift_task_alloc();
      v0[81] = (uint64_t)v36;
      void *v36 = v0;
      v36[1] = sub_100524AA0;
      uint64_t v37 = v0[64];
      return sub_100EA75F0(v37);
    }
    uint64_t v39 = v0[56];
    uint64_t v40 = v0[54];
    uint64_t v41 = v0[50];
    uint64_t v43 = v0[46];
    uint64_t v42 = v0[47];
    uint64_t v44 = *(int *)(v0[44] + 48);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[55] + 32);
    v45(v42, v41, v40);
    int v46 = *(_DWORD *)(v41 + v44);
    v45(v43, v42, v40);
    v45(v39, v43, v40);
    Swift::Bool v47 = URL.checkResourceIsReachable()();
    if (v48)
    {
      uint64_t v50 = v0[42];
      uint64_t v49 = v0[43];
      uint64_t v51 = v0[41];
      swift_errorRetain();
      static CocoaError.fileNoSuchFile.getter();
      sub_100528B9C((unint64_t *)&unk_101674190, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
      char v52 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v53(v49, v51);
      if ((v52 & 1) == 0)
      {
        uint64_t v54 = v0[43];
        uint64_t v55 = v0[41];
        swift_errorRetain();
        static CocoaError.fileReadNoSuchFile.getter();
        char v56 = static _ErrorCodeProtocol.~= infix(_:_:)();
        swift_errorRelease();
        v53(v54, v55);
        if ((v56 & 1) == 0)
        {
          swift_willThrow();
          if (qword_10166FB70 != -1) {
            swift_once();
          }
          swift_beginAccess();
          int64x2_t v92 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10117DF40;
          id v94 = v92;
          uint64_t v95 = URL.path.getter();
          uint64_t v97 = v96;
          *(void *)(inited + 56) = &type metadata for String;
          unint64_t v98 = sub_100528BE4();
          *(void *)(inited + 64) = v98;
          *(void *)(inited + 32) = v95;
          *(void *)(inited + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v97;
          swift_getErrorValue();
          uint64_t v99 = Error.publicDescription.getter(v0[22], v0[23]);
          *(void *)(inited + 96) = &type metadata for String;
          *(void *)(inited + 104) = v98;
          *(void *)(inited + 72) = v99;
          *(void *)(inited + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v100;
          swift_getErrorValue();
          uint64_t v101 = Error.fullDescription.getter(v0[34]);
          *(void *)(inited + 136) = &type metadata for String;
          *(void *)(inited + 144) = v98;
          *(void *)(inited + 112) = v101;
          *(void *)(inited + 12UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v102;
          uint64_t v103 = static os_log_type_t.error.getter();
          sub_100BAC898((uint64_t)v94, (uint64_t)&_mh_execute_header, v103, (uint64_t)"Failed to check if file exists. filePath=\"%@\", error=%{public}@ <%@>", 68, 2, inited);
          swift_errorRelease();
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

LABEL_47:
          (*(void (**)(uint64_t, uint64_t))(v0[55] + 8))(v0[56], v0[54]);
          uint64_t v33 = 0;
          goto LABEL_48;
        }
      }
      swift_errorRelease();
      Swift::Bool v107 = 0;
      int v57 = 2;
      if (v46) {
        goto LABEL_27;
      }
    }
    else
    {
      Swift::Bool v107 = v47;
      if (v47) {
        int v57 = 6;
      }
      else {
        int v57 = 2;
      }
      if (v46) {
LABEL_27:
      }
        v57 |= 1u;
    }
    int v111 = v57;
    int64x2_t v113 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[77];
    int64x2_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[78];
    uint64_t v58 = (void (*)(uint64_t, uint64_t, uint64_t))v0[72];
    uint64_t v60 = v0[63];
    uint64_t v59 = v0[64];
    uint64_t v61 = v0[59];
    uint64_t v62 = v0[55];
    uint64_t v109 = v0[56];
    uint64_t v108 = v0[54];
    uint64_t v63 = v0[49];
    uint64_t v64 = v0[44];
    long long v106 = *(os_unfair_lock_s **)(*(void *)(v0[74] + v0[75]) + 16);
    os_unfair_lock_lock(v106);
    v58(v60, v59, v61);
    uint64_t v65 = *(int *)(v64 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v109, v108);
    *(_DWORD *)(v63 + v65) = v111;
    v113(v63, 0, 1, v64);
    swift_beginAccess();
    int v66 = v115(v63, 1, v64);
    uint64_t v67 = v0[76];
    uint64_t v68 = v0[74];
    uint64_t v69 = v0[63];
    if (v66 == 1)
    {
      sub_100522F00(v0[49], (uint64_t *)&unk_101674170);
      swift_bridgeObjectRetain();
      unint64_t v70 = sub_100955FC8(v69);
      char v72 = v71;
      swift_bridgeObjectRelease();
      if (v72)
      {
        uint64_t v73 = v0[76];
        uint64_t v74 = v0[74];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v76 = *(void *)(v74 + v73);
        v0[39] = v76;
        *(void *)(v74 + v73) = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10097C6D8();
          uint64_t v76 = v0[39];
        }
        uint64_t v77 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[77];
        uint64_t v78 = v0[76];
        uint64_t v79 = v0[74];
        uint64_t v80 = v0[48];
        uint64_t v81 = v0[44];
        uint64_t v82 = v0[45];
        int v83 = *(void (**)(unint64_t, uint64_t))(v0[60] + 8);
        v83(*(void *)(v76 + 48) + v0[71] * v70, v0[59]);
        uint64_t v84 = v0[39];
        sub_100528C38(*(void *)(v84 + 56) + *(void *)(v82 + 72) * v70, v80);
        sub_100588230(v70, v84);
        *(void *)(v79 + v7_Block_object_dispose(&STACK[0x250], 8) = v84;
        swift_bridgeObjectRelease();
        v77(v80, 0, 1, v81);
      }
      else
      {
        uint64_t v90 = v0[60];
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[77])(v0[48], 1, 1, v0[44]);
        int v83 = *(void (**)(unint64_t, uint64_t))(v90 + 8);
      }
      uint64_t v91 = v0[48];
      v83(v0[63], v0[59]);
      sub_100522F00(v91, (uint64_t *)&unk_101674170);
    }
    else
    {
      uint64_t v85 = v0[59];
      uint64_t v86 = v0[60];
      uint64_t v87 = v0[46];
      sub_100528C38(v0[49], v87);
      char v88 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v118 = *(void *)(v68 + v67);
      *(void *)(v68 + v67) = 0x8000000000000000;
      sub_10097258C(v87, v69, v88);
      *(void *)(v68 + v67) = v118;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v69, v85);
    }
    swift_endAccess();
    os_unfair_lock_unlock(v106);
    if (v107)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[55] + 32))(v0[58], v0[56], v0[54]);
      uint64_t v33 = 0;
      uint64_t v89 = 0;
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if ((v25 & 4) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v0[55] + 8))(v0[57], v0[54]);
    uint64_t v33 = v0[68];
LABEL_48:
    uint64_t v89 = 1;
    goto LABEL_49;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v0[58], v0[57], v0[54]);
  uint64_t v89 = 0;
  uint64_t v33 = v0[68];
LABEL_49:
  v0[80] = v33;
  double v104 = (void *)v0[74];
  uint64_t v105 = v0[40];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[55] + 56))(v0[58], v89, 1, v0[54]);

  return _swift_task_switch(sub_1005245F8, v105, 0);
}

uint64_t sub_1005245F8()
{
  uint64_t v1 = *(void *)(v0 + 464);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 48))(v1, 1, *(void *)(v0 + 432));
  sub_100522F00(v1, &qword_101672E90);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(v0 + 512);
    uint64_t v5 = *(char **)(v0 + 488);
    uint64_t v4 = *(void *)(v0 + 496);
    uint64_t v6 = *(void *)(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 480);
    (*(void (**)(char *, uint64_t, uint64_t))(v0 + 576))(v5, v3, v6);
    sub_100CB4BC8(v4, v5);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v8(v4, v6);
    uint64_t v9 = (uint64_t (*)())((uint64_t (*)(uint64_t, uint64_t))v8)(v3, v6);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)())(*(uint64_t (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 472));
  }
  unint64_t v12 = *(void *)(v0 + 560);
  int64_t v13 = *(void *)(v0 + 552);
  *(void *)(v0 + 544) = *(void *)(v0 + 640);
  if (v12)
  {
    uint64_t v14 = (v12 - 1) & v12;
    unint64_t v15 = __clz(__rbit64(v12)) | (v13 << 6);
    uint64_t v16 = *(void *)(v0 + 536);
    goto LABEL_6;
  }
  int64_t v30 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  int64_t v31 = (unint64_t)((1 << *(unsigned char *)(v0 + 664)) + 63) >> 6;
  uint64_t v16 = *(void *)(v0 + 536);
  if (v30 >= v31)
  {
LABEL_27:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 520), 1, 1, *(void *)(v0 + 472));
    goto LABEL_28;
  }
  uint64_t v32 = v16 + 56;
  unint64_t v33 = *(void *)(v16 + 56 + 8 * v30);
  ++v13;
  if (!v33)
  {
    int64_t v13 = v30 + 1;
    if (v30 + 1 < v31)
    {
      unint64_t v33 = *(void *)(v32 + 8 * v13);
      if (v33) {
        goto LABEL_12;
      }
      int64_t v13 = v30 + 2;
      if (v30 + 2 < v31)
      {
        unint64_t v33 = *(void *)(v32 + 8 * v13);
        if (v33) {
          goto LABEL_12;
        }
        int64_t v40 = v30 + 3;
        if (v40 < v31)
        {
          unint64_t v33 = *(void *)(v32 + 8 * v40);
          if (v33)
          {
            int64_t v13 = v40;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v13 = v40 + 1;
            if (__OFADD__(v40, 1)) {
              break;
            }
            if (v13 >= v31) {
              goto LABEL_27;
            }
            unint64_t v33 = *(void *)(v32 + 8 * v13);
            ++v40;
            if (v33) {
              goto LABEL_12;
            }
          }
LABEL_32:
          __break(1u);
          return _swift_task_switch(v9, v10, v11);
        }
      }
    }
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v14 = (v33 - 1) & v33;
  unint64_t v15 = __clz(__rbit64(v33)) + (v13 << 6);
LABEL_6:
  *(void *)(v0 + 56UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v14;
  *(void *)(v0 + 552) = v13;
  uint64_t v17 = *(void *)(v0 + 520);
  uint64_t v18 = *(void *)(v0 + 472);
  uint64_t v19 = *(void *)(v0 + 480);
  uint64_t v20 = *(void *)(v16 + 48);
  uint64_t v21 = *(void *)(v19 + 72);
  *(void *)(v0 + 56_Block_object_dispose(&STACK[0x250], 8) = v21;
  uint64_t v22 = v20 + v21 * v15;
  int v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(void *)(v0 + 576) = v23;
  *(void *)(v0 + 584) = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v23(v17, v22, v18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    uint64_t v24 = *(void *)(v0 + 320);
    (*(void (**)(void, void, void))(*(void *)(v0 + 480) + 32))(*(void *)(v0 + 512), *(void *)(v0 + 520), *(void *)(v0 + 472));
    int v25 = *(char **)(v24 + 112);
    uint64_t v26 = *(void *)&v25[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 16));
    uint64_t v27 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    uint64_t v28 = *(void **)&v25[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
    if (v28)
    {
      id v29 = *(id *)&v25[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
    }
    else
    {
      id v34 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
      uint64_t v35 = v25;
      id v36 = sub_100EAFDE4((uint64_t)v35);

      uint64_t v37 = *(void **)&v25[v27];
      *(void *)&v25[v27] = v36;
      id v29 = v36;

      uint64_t v28 = 0;
    }
    *(void *)(v0 + 592) = v29;
    id v38 = *(os_unfair_lock_s **)(v26 + 16);
    id v39 = v28;
    os_unfair_lock_unlock(v38);
    uint64_t v9 = sub_100523B90;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    return _swift_task_switch(v9, v10, v11);
  }
LABEL_28:
  swift_release();
  uint64_t v41 = *(void *)(v0 + 296);
  *(void *)(*(void *)(v0 + 320) + *(void *)(v0 + 528)) = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v42(v41);
}

uint64_t sub_100524AA0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 656) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100524BA0, 0, 0);
}

uint64_t sub_100524BA0()
{
  uint64_t v1 = v0[82];
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
    unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
    swift_bridgeObjectRetain();
    int v4 = 1;
  }
  else
  {
    int v4 = 0;
    uint64_t v3 = 0;
    unint64_t v2 = 0;
  }
  uint64_t v5 = v0[64];
  uint64_t v6 = (char *)v0[56];
  sub_100EB02FC(v5, v3, v2);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  sub_100EA5F9C(v5, v6, v4);
  swift_release();
  swift_bridgeObjectRelease();
  Swift::Bool v7 = URL.checkResourceIsReachable()();
  if (v8)
  {
    uint64_t v10 = v0[42];
    uint64_t v9 = v0[43];
    uint64_t v11 = v0[41];
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_100528B9C((unint64_t *)&unk_101674190, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    char v12 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    int64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v13(v9, v11);
    if ((v12 & 1) == 0)
    {
      uint64_t v14 = v0[43];
      uint64_t v15 = v0[41];
      swift_errorRetain();
      static CocoaError.fileReadNoSuchFile.getter();
      char v16 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      v13(v14, v15);
      if ((v16 & 1) == 0)
      {
        swift_willThrow();
        if (qword_10166FB70 != -1) {
          swift_once();
        }
        swift_beginAccess();
        char v52 = (void *)static OS_os_log.boardStore;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117DF40;
        id v54 = v52;
        uint64_t v55 = URL.path.getter();
        uint64_t v57 = v56;
        *(void *)(inited + 56) = &type metadata for String;
        unint64_t v58 = sub_100528BE4();
        *(void *)(inited + 64) = v58;
        *(void *)(inited + 32) = v55;
        *(void *)(inited + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v57;
        swift_getErrorValue();
        uint64_t v59 = Error.publicDescription.getter(v0[22], v0[23]);
        *(void *)(inited + 96) = &type metadata for String;
        *(void *)(inited + 104) = v58;
        *(void *)(inited + 72) = v59;
        *(void *)(inited + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v60;
        swift_getErrorValue();
        uint64_t v61 = Error.fullDescription.getter(v0[34]);
        *(void *)(inited + 136) = &type metadata for String;
        *(void *)(inited + 144) = v58;
        *(void *)(inited + 112) = v61;
        *(void *)(inited + 12UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v62;
        uint64_t v63 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v54, (uint64_t)&_mh_execute_header, v63, (uint64_t)"Failed to check if file exists. filePath=\"%@\", error=%{public}@ <%@>", 68, 2, inited);
        swift_errorRelease();
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        goto LABEL_27;
      }
    }
    swift_errorRelease();
    Swift::Bool v68 = 0;
    int v17 = 2;
    if (v1) {
      goto LABEL_8;
    }
  }
  else
  {
    Swift::Bool v68 = v7;
    if (v7) {
      int v17 = 6;
    }
    else {
      int v17 = 2;
    }
    if (v1) {
LABEL_8:
    }
      v17 |= 1u;
  }
  int v71 = v17;
  char v72 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[77];
  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[78];
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v0[72];
  uint64_t v20 = v0[63];
  uint64_t v19 = v0[64];
  uint64_t v21 = v0[59];
  uint64_t v22 = v0[55];
  uint64_t v70 = v0[56];
  uint64_t v69 = v0[54];
  uint64_t v23 = v0[49];
  uint64_t v24 = v0[44];
  uint64_t v67 = *(os_unfair_lock_s **)(*(void *)(v0[74] + v0[75]) + 16);
  os_unfair_lock_lock(v67);
  v18(v20, v19, v21);
  uint64_t v25 = *(int *)(v24 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v70, v69);
  *(_DWORD *)(v23 + v25) = v71;
  v72(v23, 0, 1, v24);
  swift_beginAccess();
  int v26 = v73(v23, 1, v24);
  uint64_t v27 = v0[76];
  uint64_t v28 = v0[74];
  uint64_t v29 = v0[63];
  if (v26 == 1)
  {
    sub_100522F00(v0[49], (uint64_t *)&unk_101674170);
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_100955FC8(v29);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if (v32)
    {
      uint64_t v33 = v0[76];
      uint64_t v34 = v0[74];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *(void *)(v34 + v33);
      v0[39] = v36;
      *(void *)(v34 + v33) = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10097C6D8();
        uint64_t v36 = v0[39];
      }
      uint64_t v37 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[77];
      uint64_t v38 = v0[76];
      uint64_t v39 = v0[74];
      uint64_t v40 = v0[48];
      uint64_t v41 = v0[44];
      uint64_t v42 = v0[45];
      uint64_t v43 = *(void (**)(unint64_t, uint64_t))(v0[60] + 8);
      v43(*(void *)(v36 + 48) + v0[71] * v30, v0[59]);
      uint64_t v44 = v0[39];
      sub_100528C38(*(void *)(v44 + 56) + *(void *)(v42 + 72) * v30, v40);
      sub_100588230(v30, v44);
      *(void *)(v39 + v3_Block_object_dispose(&STACK[0x250], 8) = v44;
      swift_bridgeObjectRelease();
      v37(v40, 0, 1, v41);
    }
    else
    {
      uint64_t v49 = v0[60];
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[77])(v0[48], 1, 1, v0[44]);
      uint64_t v43 = *(void (**)(unint64_t, uint64_t))(v49 + 8);
    }
    uint64_t v50 = v0[48];
    v43(v0[63], v0[59]);
    sub_100522F00(v50, (uint64_t *)&unk_101674170);
  }
  else
  {
    uint64_t v45 = v0[59];
    uint64_t v46 = v0[60];
    uint64_t v47 = v0[46];
    sub_100528C38(v0[49], v47);
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = *(void *)(v28 + v27);
    *(void *)(v28 + v27) = 0x8000000000000000;
    sub_10097258C(v47, v29, v48);
    *(void *)(v28 + v27) = v74;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v29, v45);
  }
  swift_endAccess();
  os_unfair_lock_unlock(v67);
  if (v68)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[55] + 32))(v0[58], v0[56], v0[54]);
    uint64_t v51 = 0;
    goto LABEL_28;
  }
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(v0[55] + 8))(v0[56], v0[54]);
  uint64_t v51 = 1;
LABEL_28:
  v0[80] = 0;
  uint64_t v64 = (void *)v0[74];
  uint64_t v65 = v0[40];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[55] + 56))(v0[58], v51, 1, v0[54]);

  return _swift_task_switch(sub_1005245F8, v65, 0);
}

uint64_t sub_1005252A4()
{
  *(void *)(v1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v0;
  return _swift_task_switch(sub_1005252C4, v0, 0);
}

uint64_t sub_1005252C4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_isDownloading;
  v0[6] = OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_isDownloading;
  if (*(unsigned char *)(v1 + v2))
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[7] = v5;
    void *v5 = v0;
    v5[1] = sub_1005253A0;
    return sub_1005233F4();
  }
}

uint64_t sub_1005253A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005254B8, v2, 0);
}

uint64_t sub_1005254B8()
{
  uint64_t v1 = v0[8];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = v0[5];
    *(unsigned char *)(v2 + v0[6]) = 1;
    *(unsigned char *)(v2 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadWasCancelled) = 0;
    uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_assetUUIDsBeingDownloaded);
    swift_beginAccess();
    *uint64_t v3 = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_task_alloc();
    v0[9] = v4;
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = v2;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    void *v5 = v0;
    v5[1] = sub_100525644;
    uint64_t v6 = v0[5];
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_101672810, v4, sub_100528750, v6, 0, 0, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Bool v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100525644()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 8_Block_object_dispose(&STACK[0x250], 8) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_10052578C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = sub_100525774;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100525774()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10052578C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005257F8(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  void v8[4] = a1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  swift_retain();
  if (v9 == 1)
  {
    sub_100522F00((uint64_t)v5, &qword_101672BB0);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_101672838;
  *(void *)(v13 + 24) = v8;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    void v15[2] = v10;
    v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100525A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100525A5C, a4, 0);
}

uint64_t sub_100525A5C()
{
  sub_100526738();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100525ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100525AE0, a3, 0);
}

uint64_t sub_100525AE0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = sub_100528B9C(&qword_101672818, (void (*)(uint64_t))type metadata accessor for CRLAssetDownloadHelper);
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  void *v5 = v0;
  v5[1] = sub_100525C14;
  uint64_t v6 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v1, v3, 0x64616F6C6E776F64, 0xEA00000000002928, sub_100528810, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100525C14()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_100525D50, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100525D50()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100525DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  uint64_t v10 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v16 = sub_100528B9C(&qword_101672818, (void (*)(uint64_t))type metadata accessor for CRLAssetDownloadHelper);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a3;
  *((void *)v18 + 3) = v16;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v17], v10, v6);
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_1005912D0((uint64_t)v14, (uint64_t)&unk_101672828, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100525FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  v6[2] = a4;
  uint64_t v8 = type metadata accessor for UUID();
  void v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  sub_1005057FC((uint64_t *)&unk_101674520);
  v6[8] = swift_task_alloc();
  return _swift_task_switch(sub_1005260D4, a5, 0);
}

uint64_t sub_1005260D4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v0 + 96) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  if (-(-1 << v3) < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    uint64_t v9 = (v6 - 1) & v6;
    goto LABEL_5;
  }
  unint64_t v16 = 63 - v5;
  if ((unint64_t)(63 - v5) <= 0x7F) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v2 + 64);
  if (!v17)
  {
    if (v16 >= 0xC0)
    {
      unint64_t v17 = *(void *)(v2 + 72);
      if (v17)
      {
        uint64_t v7 = 2;
        goto LABEL_12;
      }
      if (v16 >= 0x100)
      {
        unint64_t v17 = *(void *)(v2 + 80);
        if (v17)
        {
          uint64_t v7 = 3;
          goto LABEL_12;
        }
        if (v16 >= 0x140)
        {
          unint64_t v17 = *(void *)(v2 + 88);
          if (v17)
          {
            uint64_t v7 = 4;
            goto LABEL_12;
          }
          uint64_t v18 = 0;
          uint64_t v19 = v16 >> 6;
          if (v19 <= 5) {
            uint64_t v19 = 5;
          }
          uint64_t v20 = v19 - 5;
          while (v20 != v18)
          {
            unint64_t v17 = *(void *)(v2 + 96 + 8 * v18++);
            if (v17)
            {
              uint64_t v7 = v18 + 4;
              goto LABEL_12;
            }
          }
        }
      }
    }
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 56))(*(void *)(v0 + 64), 1, 1, *(void *)(v0 + 40));
    goto LABEL_29;
  }
  uint64_t v7 = 1;
LABEL_12:
  uint64_t v9 = (v17 - 1) & v17;
  unint64_t v8 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_5:
  *(void *)(v0 + 72) = v7;
  *(void *)(v0 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v9;
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16))(v10, *(void *)(v2 + 48) + *(void *)(v1 + 72) * v8, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v10, 1, v11) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 32))(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 40));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 8_Block_object_dispose(&STACK[0x250], 8) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100526390;
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 32);
    return sub_100526DE4(v13, v14);
  }
LABEL_29:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100526390()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005264A0, v1, 0);
}

uint64_t sub_1005264A0()
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  int64_t v2 = *(void *)(v0 + 72);
  unint64_t v3 = *(void *)(v0 + 80);
  if (v3)
  {
    uint64_t v4 = (v3 - 1) & v3;
    unint64_t v5 = __clz(__rbit64(v3)) | (v2 << 6);
    uint64_t v6 = *(void *)(v0 + 16);
    goto LABEL_3;
  }
  int64_t v13 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 96)) + 63) >> 6;
  uint64_t v6 = *(void *)(v0 + 16);
  if (v13 >= v14)
  {
LABEL_21:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 48) + 56))(*(void *)(v0 + 64), 1, 1, *(void *)(v0 + 40));
    goto LABEL_22;
  }
  uint64_t v15 = v6 + 56;
  unint64_t v16 = *(void *)(v6 + 56 + 8 * v13);
  ++v2;
  if (!v16)
  {
    int64_t v2 = v13 + 1;
    if (v13 + 1 < v14)
    {
      unint64_t v16 = *(void *)(v15 + 8 * v2);
      if (v16) {
        goto LABEL_10;
      }
      int64_t v2 = v13 + 2;
      if (v13 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v2);
        if (v16) {
          goto LABEL_10;
        }
        int64_t v17 = v13 + 3;
        if (v17 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * v17);
          if (v16)
          {
            int64_t v2 = v17;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v2 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              break;
            }
            if (v2 >= v14) {
              goto LABEL_21;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v2);
            ++v17;
            if (v16) {
              goto LABEL_10;
            }
          }
LABEL_26:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v4 = (v16 - 1) & v16;
  unint64_t v5 = __clz(__rbit64(v16)) + (v2 << 6);
LABEL_3:
  *(void *)(v0 + 72) = v2;
  *(void *)(v0 + 8UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v4;
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v7, *(void *)(v6 + 48) + *(void *)(v9 + 72) * v5, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 32))(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 40));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 8_Block_object_dispose(&STACK[0x250], 8) = v10;
    void *v10 = v0;
    v10[1] = sub_100526390;
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 32);
    return sub_100526DE4(v11, v12);
  }
LABEL_22:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100526738()
{
  uint64_t v1 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v70 - 8);
  uint64_t v7 = __chkstk_darwin(v70, v6);
  uint64_t v61 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v8;
  __chkstk_darwin(v7, v9);
  uint64_t v69 = (char *)&v53 - v10;
  uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v11 - 8, v12);
  int64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(char **)(v0 + 112);
  uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 16));
  uint64_t v17 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  if (*(void *)&v15[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager])
  {
    uint64_t v64 = *(void *)&v15[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  }
  else
  {
    uint64_t v18 = v15;
    uint64_t v19 = sub_100678E6C(v18);

    *(void *)&v15[v17] = v19;
    uint64_t v64 = v19;
    swift_retain();
    swift_release();
  }
  uint64_t v20 = *(os_unfair_lock_s **)(v16 + 16);
  swift_retain();
  os_unfair_lock_unlock(v20);
  uint64_t v21 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_assetUUIDsBeingDownloaded);
  swift_beginAccess();
  uint64_t v22 = *v21;
  uint64_t v23 = *(void *)(*v21 + 56);
  uint64_t v53 = *v21 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v54 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v27 = v5;
  uint64_t v28 = v5 + 16;
  uint64_t v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v66 = v22;
  uint64_t v63 = v5 + 48;
  uint64_t v60 = v5 + 32;
  unint64_t v58 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v30 = 0;
  uint64_t v57 = (char *)&type metadata for () + 8;
  uint64_t v31 = v70;
  uint64_t v56 = v27;
  uint64_t v55 = v14;
  uint64_t v59 = v28;
  while (1)
  {
    if (v26)
    {
      unint64_t v32 = __clz(__rbit64(v26));
      uint64_t v33 = (v26 - 1) & v26;
      unint64_t v34 = v32 | (v30 << 6);
      goto LABEL_25;
    }
    int64_t v35 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v35 >= v54) {
      goto LABEL_34;
    }
    unint64_t v36 = *(void *)(v53 + 8 * v35);
    ++v30;
    if (!v36)
    {
      int64_t v30 = v35 + 1;
      if (v35 + 1 >= v54) {
        goto LABEL_34;
      }
      unint64_t v36 = *(void *)(v53 + 8 * v30);
      if (!v36)
      {
        int64_t v30 = v35 + 2;
        if (v35 + 2 >= v54) {
          goto LABEL_34;
        }
        unint64_t v36 = *(void *)(v53 + 8 * v30);
        if (!v36) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v33 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v30 << 6);
LABEL_25:
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    v38(v14, *(void *)(v66 + 48) + *(void *)(v27 + 72) * v34, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v14, 0, 1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1, v31) == 1) {
      goto LABEL_35;
    }
    unint64_t v67 = v33;
    int64_t v68 = v30;
    uint64_t v39 = (uint64_t)v4;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v41 = v69;
    v40(v69, v14, v31);
    uint64_t v42 = type metadata accessor for TaskPriority();
    uint64_t v43 = *(void *)(v42 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v39, 1, 1, v42);
    uint64_t v44 = v61;
    v38(v61, (unint64_t)v41, v70);
    unint64_t v45 = (*(unsigned __int8 *)(v27 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v46 = (char *)swift_allocObject();
    *((void *)v46 + 2) = 0;
    uint64_t v47 = v64;
    *((void *)v46 + 3) = 0;
    *((void *)v46 + 4) = v47;
    char v48 = v44;
    uint64_t v31 = v70;
    v40(&v46[v45], v48, v70);
    uint64_t v4 = (char *)v39;
    LODWORD(v45) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v39, 1, v42);
    swift_retain();
    if (v45 == 1)
    {
      sub_100522F00(v39, &qword_101672BB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
    }
    if (*((void *)v46 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v49 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v51 = v50;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v51 = 0;
    }
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = &unk_101672800;
    *(void *)(v52 + 24) = v46;
    if (v51 | v49)
    {
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = v49;
      uint64_t v74 = v51;
    }
    uint64_t v27 = v56;
    int64_t v14 = v55;
    unint64_t v26 = v67;
    int64_t v30 = v68;
    swift_task_create();
    swift_release();
    uint64_t result = (*v58)(v69, v31);
  }
  int64_t v37 = v35 + 3;
  if (v37 >= v54)
  {
LABEL_34:
    (*v65)(v14, 1, 1, v31);
LABEL_35:
    swift_release();
    return swift_release();
  }
  unint64_t v36 = *(void *)(v53 + 8 * v37);
  if (v36)
  {
    int64_t v30 = v37;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v30 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v30 >= v54) {
      goto LABEL_34;
    }
    unint64_t v36 = *(void *)(v53 + 8 * v30);
    ++v37;
    if (v36) {
      goto LABEL_24;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100526DE4(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_1005057FC(&qword_101672BB0);
  v3[11] = swift_task_alloc();
  sub_1005057FC(&qword_101672E90);
  v3[12] = swift_task_alloc();
  uint64_t v4 = sub_1005057FC(&qword_10167F0F0);
  v3[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[14] = v5;
  v3[15] = *(void *)(v5 + 64);
  v3[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[17] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[18] = v7;
  v3[19] = *(void *)(v7 + 64);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_100526F88, v2, 0);
}

uint64_t sub_100526F88()
{
  uint64_t v1 = *(char **)(*(void *)(v0 + 80) + 112);
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 16));
  uint64_t v3 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  if (!v4)
  {
    uint64_t v5 = v1;
    uint64_t v4 = sub_100678E6C(v5);

    *(void *)&v1[v3] = v4;
    swift_retain();
    swift_release();
  }
  *(void *)(v0 + 176) = v4;
  *(void *)(v0 + 184) = v4;
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v22 = v6;
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v24 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v21 = *(void *)(v0 + 72);
  uint64_t v13 = *(os_unfair_lock_s **)(v2 + 16);
  swift_retain();
  os_unfair_lock_unlock(v13);
  *(void *)(v0 + 192) = OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadObserverIdentifier;
  int64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  *(void *)(v0 + 20UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v14;
  *(void *)(v0 + 20_Block_object_dispose(&STACK[0x250], 8) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v14(v6, v12, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v21, v11);
  int v15 = *(_DWORD *)(v7 + 80);
  *(_DWORD *)(v0 + 24_Block_object_dispose(&STACK[0x250], 8) = v15;
  unint64_t v16 = (v15 + 24) & ~(unint64_t)v15;
  unint64_t v17 = (v23 + *(unsigned __int8 *)(v10 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 216) = v18;
  *(void *)(v18 + 16) = v24;
  uint64_t v19 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32);
  *(void *)(v0 + 224) = v19;
  *(void *)(v0 + 232) = (v7 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v19(v18 + v16, v22, v8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v18 + v17, v9, v11);
  swift_retain();
  return _swift_task_switch(sub_1005271A4, v4, 0);
}

uint64_t sub_1005271A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[30] = v1;
  void *v1 = v0;
  v1[1] = sub_100527250;
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[8];
  return sub_100EA869C(v2, v3, 0, 0, 3);
}

uint64_t sub_100527250()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 176);
  return _swift_task_switch(sub_100527360, v2, 0);
}

uint64_t sub_100527360()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = type metadata accessor for URL();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = v0[27];
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[10] + v0[24];
    sub_100522F00(v1, &qword_101672E90);
    sub_100675DE4(v4);
    sub_100676024(v5, 10, (uint64_t)sub_100527F80, v3);
    swift_release();
  }
  else
  {
    uint64_t v6 = v0[27];
    sub_100522F00(v1, &qword_101672E90);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100527F80;
    *(void *)(v7 + 24) = v6;
    v0[6] = sub_100528194;
    v0[7] = v7;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = *(void *)"";
    v0[4] = sub_100679958;
    v0[5] = &unk_101506FE8;
    uint64_t v8 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    uint64_t v9 = v8;
    if (+[NSThread isMainThread])
    {
      v9[2](v9);
    }
    else
    {
      id v10 = &_dispatch_main_q;
      id v11 = &_dispatch_main_q;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);
    }
    _Block_release(v9);
  }
  swift_release();
  uint64_t v12 = v0[10];
  return _swift_task_switch(sub_100527598, v12, 0);
}

uint64_t sub_100527598()
{
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 224);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 248);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v2(v4, v7, v5);
  uint64_t v9 = (char *)swift_allocObject();
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = v3;
  v12(&v9[(v1 + 40) & ~v1], v4, v5);
  swift_retain();
  sub_1005912D0(v6, (uint64_t)&unk_1016727E8, (uint64_t)v9);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100527738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v25 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  unint64_t v26 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  uint64_t v13 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v14 - 8, v15);
  unint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + v20 + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = 0;
  *((void *)v22 + 4) = v28;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v22[v19], v13, v9);
  *(void *)&v22[v20] = v29;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v22[v21], v26, v25);
  swift_retain();
  sub_1005912D0((uint64_t)v17, (uint64_t)&unk_1016727F8, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_100527A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_100527A28, a4, 0);
}

uint64_t sub_100527A28()
{
  sub_100527A94(v0[3], v0[4] == 3);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100527A94(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v2 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_assetUUIDsBeingDownloaded;
  swift_beginAccess();
  sub_100D16510(a1, (uint64_t)v9);
  sub_100522F00((uint64_t)v9, (uint64_t *)&unk_101674520);
  uint64_t result = swift_endAccess();
  if (a2) {
    *(unsigned char *)(v3 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadWasCancelled) = 1;
  }
  if (!*(void *)(*(void *)v10 + 16))
  {
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadWasCancelled) == 1)
    {
      type metadata accessor for CancellationError();
      sub_100528B9C(&qword_1016727E0, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      uint64_t v12 = swift_allocError();
      CancellationError.init()();
      v13[1] = v12;
      sub_1005057FC(&qword_10167F0F0);
      uint64_t result = CheckedContinuation.resume(throwing:)();
    }
    else
    {
      sub_1005057FC(&qword_10167F0F0);
      uint64_t result = CheckedContinuation.resume(returning:)();
    }
    *(unsigned char *)(v3 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_isDownloading) = 0;
  }
  return result;
}

uint64_t sub_100527C48()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadObserverIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t sub_100527CF4()
{
  return type metadata accessor for CRLAssetDownloadHelper();
}

uint64_t type metadata accessor for CRLAssetDownloadHelper()
{
  uint64_t result = qword_101672678;
  if (!qword_101672678) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100527D48()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100527E18()
{
  return v0;
}

uint64_t sub_100527E24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100527F80(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_1005057FC(&qword_10167F0F0) - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100527738(a1, v7, v1 + v4, v8);
}

uint64_t sub_100528060(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100528D08;
  return sub_100671C2C(a1, v5, v6, v7, v8);
}

uint64_t sub_10052815C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100528194()
{
  return sub_100671A9C(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_10052819C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v2;
  return swift_retain();
}

uint64_t sub_1005281AC()
{
  return swift_release();
}

uint64_t sub_1005281B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100528324()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_1005057FC(&qword_10167F0F0) - 8) + 80);
  uint64_t v6 = v4 + v5 + 8;
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void *)(v0 + v4);
  uint64_t v10 = v0 + (v6 & ~v5);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  void *v11 = v1;
  void v11[4] = v9;
  v11[5] = v10;
  v11[2] = v7;
  _OWORD v11[3] = v8;
  v11[1] = sub_100528488;
  return _swift_task_switch(sub_100527A28, v7, 0);
}

uint64_t sub_100528488()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100528580()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100528654(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100528D08;
  return sub_10067484C(a1, v5, v6, v7, v8);
}

uint64_t sub_100528750()
{
  return sub_1005257F8(v0);
}

uint64_t sub_100528758(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v5;
  void v6[4] = v4;
  v6[1] = sub_100528488;
  v6[2] = a1;
  return _swift_task_switch(sub_100525AE0, v4, 0);
}

uint64_t sub_100528810(uint64_t a1)
{
  return sub_100525DB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100528818()
{
  uint64_t v1 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005288F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1005057FC(&qword_10167F0F0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100528D08;
  return sub_100525FDC(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1005289FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100528A3C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100528D08;
  v3[2] = v2;
  return _swift_task_switch(sub_100525A5C, v2, 0);
}

uint64_t sub_100528AE4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1016743D0 + dword_1016743D0);
  return v6(a1, v4);
}

uint64_t sub_100528B9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100528BE4()
{
  unint64_t result = qword_101672EC0;
  if (!qword_101672EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101672EC0);
  }
  return result;
}

uint64_t sub_100528C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101684F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100528CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101684F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100528D14(uint64_t a1, unsigned __int8 a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  Swift::Int v12 = sub_10052905C(a1, a3, a4, a5, a6);
  uint64_t v13 = sub_1005292C8(v12, v6);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_100529384(v13);
  swift_bridgeObjectRelease();
  sub_10052DDF0(v14, a2, a3, a4, a5, a6);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18) {
    return v16;
  }
  unint64_t v19 = self;
  id v20 = [v19 mainBundle];
  NSString v21 = String._bridgeToObjectiveC()();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v20 localizedStringForKey:v21 value:v22 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v24 = [v19 mainBundle];
  NSString v25 = String._bridgeToObjectiveC()();
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v24 localizedStringForKey:v25 value:v26 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();
  double v28 = sub_100065738(a3, a4, a5, a6);
  double v30 = sub_1000674F0(v28, v29);
  double v32 = v31;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_10117D8C0;
  double v34 = round(v30);
  if ((~*(void *)&v34 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v34 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(void *)(result + 56) = &type metadata for Int;
  *(void *)(result + 64) = &protocol witness table for Int;
  *(void *)(result + 32) = (uint64_t)v34;
  double v35 = round(v32);
  if ((~*(void *)&v35 & 0x7FF0000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v35 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v35 < 9.22337204e18)
  {
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = (uint64_t)v35;
    uint64_t v16 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v16;
  }
LABEL_15:
  __break(1u);
  return result;
}

Swift::Int sub_10052905C(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10050BF48(0, (unint64_t *)&qword_101678790);
      do
      {
        swift_dynamicCast();
        if (([v23 hasBeenRemoved] & 1) != 0
          || ([v23 frameInUnscaledCanvas],
              v25.origin.CGFloat x = a2,
              v25.origin.CGFloat y = a3,
              v25.size.double width = a4,
              v25.size.double height = a5,
              !CGRectIntersectsRect(v24, v25)))
        {
        }
        else
        {
          unint64_t v10 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v10) {
            sub_100CBF198(v10 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          Swift::Int v12 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v13 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v14 = result & ~v13;
          unint64_t v15 = v14 >> 6;
          if (((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7)) != 0)
          {
            unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7))) | v14 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v17 = 0;
            unint64_t v18 = (unint64_t)(63 - v13) >> 6;
            do
            {
              if (++v15 == v18 && (v17 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v19 = v15 == v18;
              if (v15 == v18) {
                unint64_t v15 = 0;
              }
              v17 |= v19;
              uint64_t v20 = *(void *)&v12[8 * v15];
            }
            while (v20 == -1);
            unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
          }
          *(void *)&v12[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v16;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v16) = v23;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v9 = &_swiftEmptySetSingleton;
    }
    swift_release();
  }
  else
  {
    uint64_t v21 = swift_bridgeObjectRetain();
    return sub_10052A0C0(v21, v22, a2, a3, a4, a5);
  }
  return (Swift::Int)v9;
}

uint64_t sub_1005292C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    Swift::Int v7 = sub_100529B5C(v5, a2);
    if (!v3)
    {
      Swift::Int v8 = v7;
      if ((v7 & 0xC000000000000001) != 0)
      {
        if (__CocoaSet.count.getter()) {
          return v8;
        }
      }
      else if (*(void *)(v7 + 16))
      {
        return v8;
      }
      swift_release();
      swift_bridgeObjectRetain();
    }
  }
  return v5;
}

uint64_t sub_100529384(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v4 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  swift_bridgeObjectRetain();
  if (v4)
  {
    Swift::Int v6 = sub_100529870(v3, v5);
    if (!v2)
    {
      Swift::Int v7 = v6;
      if ((v6 & 0xC000000000000001) != 0)
      {
        if (__CocoaSet.count.getter()) {
          return v7;
        }
      }
      else if (*(void *)(v6 + 16))
      {
        return v7;
      }
      swift_release();
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t sub_100529438()
{
  [v0 frameInUnscaledCanvas];
  double v5 = sub_100065738(v1, v2, v3, v4);
  double v7 = sub_1000674F0(v5, v6);
  double v9 = v8;
  id v10 = [self mainBundle];
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v10 localizedStringForKey:v11 value:v12 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_10117D8C0;
  double v15 = round(v7);
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(void *)(result + 56) = &type metadata for Int;
  *(void *)(result + 64) = &protocol witness table for Int;
  *(void *)(result + 32) = (uint64_t)v15;
  double v16 = round(v9);
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v16 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v16 < 9.22337204e18)
  {
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = (uint64_t)v16;
    uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100529630(void *a1, uint64_t a2, uint64_t a3)
{
  if (![a1 respondsToSelector:Selector.init(_:)()]) {
    goto LABEL_13;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 valueForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_10052E248((uint64_t)v14, (uint64_t)&v15);
  if (!v17)
  {
    sub_10052E2B0((uint64_t)&v15);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    return a2;
  }
  uint64_t v8 = HIBYTE(*((void *)&v13 + 1)) & 0xFLL;
  if ((*((void *)&v13 + 1) & 0x2000000000000000) == 0) {
    uint64_t v8 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  v14[0] = v13;
  sub_10052E310();
  uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  *(void *)&v14[0] = 539762732;
  *((void *)&v14[0] + 1) = 0xE400000000000000;
  a2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t CRLAccessibilityUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRLAccessibilitySceneDescriptionHelper()
{
  return self;
}

Swift::Int sub_100529870(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_10052A264(a1, a2);
  }
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    sub_10050BF48(0, (unint64_t *)&qword_101678790);
    while (1)
    {
      swift_dynamicCast();
      sub_10050BF48(0, (unint64_t *)&unk_10168A0F0);
      if (![v19 isKindOfClass:swift_getObjCClassFromMetadata()]) {
        break;
      }
      id v8 = [v19 info];
      type metadata accessor for CRLBoardItem(0);
      uint64_t v9 = (void *)swift_dynamicCastClass();
      if (v9)
      {
        uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v9) + 0x130))();
        unint64_t v12 = v11;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = HIBYTE(v12) & 0xF;
        if ((v12 & 0x2000000000000000) == 0) {
          uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
        }
        if (v13) {
          break;
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }

LABEL_7:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_26;
      }
    }
    unint64_t v14 = *((void *)&_swiftEmptySetSingleton + 2);
    if (*((void *)&_swiftEmptySetSingleton + 3) <= v14) {
      sub_100CBF198(v14 + 1);
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
    CGFloat v3 = (char *)&_swiftEmptySetSingleton + 56;
    uint64_t v4 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
    unint64_t v5 = result & ~v4;
    unint64_t v6 = v5 >> 6;
    if (((-1 << v5) & ~*((void *)&_swiftEmptySetSingleton + (v5 >> 6) + 7)) != 0)
    {
      unint64_t v7 = __clz(__rbit64((-1 << v5) & ~*((void *)&_swiftEmptySetSingleton + (v5 >> 6) + 7))) | v5 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v15 = 0;
      unint64_t v16 = (unint64_t)(63 - v4) >> 6;
      do
      {
        if (++v6 == v16 && (v15 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v17 = v6 == v16;
        if (v6 == v16) {
          unint64_t v6 = 0;
        }
        v15 |= v17;
        uint64_t v18 = *(void *)&v3[8 * v6];
      }
      while (v18 == -1);
      unint64_t v7 = __clz(__rbit64(~v18)) + (v6 << 6);
    }
    *(void *)&v3[(v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v7) = v19;
    ++*((void *)&_swiftEmptySetSingleton + 2);
    goto LABEL_7;
  }
LABEL_26:
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_100529B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    CGFloat v3 = &_swiftEmptySetSingleton;
    int64_t v37 = &_swiftEmptySetSingleton;
    __CocoaSet.makeIterator()();
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v33 = v2;
      sub_10050BF48(0, (unint64_t *)&qword_101678790);
      do
      {
        uint64_t v34 = v12;
        swift_dynamicCast();
        uint64_t v13 = sub_10052D998(v36);
        if (!v14) {
          goto LABEL_4;
        }
        uint64_t v34 = v13;
        uint64_t v35 = v14;
        static CharacterSet.whitespaces.getter();
        sub_10052E310();
        uint64_t v15 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v17 = v16;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000) == 0) {
          uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          BOOL v19 = v36;
          uint64_t v20 = v37;
          unint64_t v21 = v37[2];
          if (v37[3] <= v21)
          {
            sub_100CBF198(v21 + 1);
            uint64_t v20 = v37;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(v20[5]);
          id v23 = v20 + 7;
          uint64_t v24 = -1 << *((unsigned char *)v20 + 32);
          unint64_t v25 = result & ~v24;
          unint64_t v26 = v25 >> 6;
          if (((-1 << v25) & ~v20[(v25 >> 6) + 7]) != 0)
          {
            unint64_t v27 = __clz(__rbit64((-1 << v25) & ~v20[(v25 >> 6) + 7])) | v25 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v28 = 0;
            unint64_t v29 = (unint64_t)(63 - v24) >> 6;
            do
            {
              if (++v26 == v29 && (v28 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v30 = v26 == v29;
              if (v26 == v29) {
                unint64_t v26 = 0;
              }
              v28 |= v30;
              uint64_t v31 = v23[v26];
            }
            while (v31 == -1);
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          }
          *(void *)((char *)v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
          *(void *)(v20[6] + 8 * v27) = v19;
          ++v20[2];
        }
        else
        {
LABEL_4:
        }
        uint64_t v12 = __CocoaSet.Iterator.next()();
      }
      while (v12);
      CGFloat v3 = v37;
    }
    swift_release();
  }
  else
  {
    uint64_t v32 = sub_10052A3C8(a1, a2);
    if (!v2) {
      return v32;
    }
  }
  return (Swift::Int)v3;
}

Swift::Int sub_100529E74(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    uint64_t v22 = &_swiftEmptySetSingleton;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      uint64_t v4 = (void *)sub_10050BF48(0, (unint64_t *)&qword_101678790);
      do
      {
        swift_dynamicCast();
        char v6 = a1(&v21);
        if (v3)
        {
          swift_release();

          swift_release();
          return (Swift::Int)v4;
        }
        id v7 = v21;
        if (v6)
        {
          uint64_t v8 = v22;
          unint64_t v9 = v22[2];
          if (v22[3] <= v9)
          {
            sub_100CBF198(v9 + 1);
            uint64_t v8 = v22;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(v8[5]);
          uint64_t v11 = v8 + 7;
          uint64_t v12 = -1 << *((unsigned char *)v8 + 32);
          unint64_t v13 = result & ~v12;
          unint64_t v14 = v13 >> 6;
          if (((-1 << v13) & ~v8[(v13 >> 6) + 7]) != 0)
          {
            unint64_t v15 = __clz(__rbit64((-1 << v13) & ~v8[(v13 >> 6) + 7])) | v13 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v16 = 0;
            unint64_t v17 = (unint64_t)(63 - v12) >> 6;
            do
            {
              if (++v14 == v17 && (v16 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v18 = v14 == v17;
              if (v14 == v17) {
                unint64_t v14 = 0;
              }
              v16 |= v18;
              uint64_t v19 = v11[v14];
            }
            while (v19 == -1);
            unint64_t v15 = __clz(__rbit64(~v19)) + (v14 << 6);
          }
          *(void *)((char *)v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
          *(void *)(v8[6] + 8 * v15) = v7;
          ++v8[2];
        }
        else
        {
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v4 = v22;
    }
    swift_release();
  }
  else
  {
    uint64_t v20 = sub_10052A540((uint64_t)a1, a2, a3);
    if (!v3) {
      return v20;
    }
  }
  return (Swift::Int)v4;
}

uint64_t sub_10052A0C0(uint64_t isStackAllocationSafe, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v11 = isStackAllocationSafe;
  char v12 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v13 = (unint64_t)((1 << v12) + 63) >> 6;
  size_t v14 = 8 * v13;
  if ((v12 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v20 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0), v14);
    sub_10052A6C4((unint64_t *)((char *)&v20 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0)), v13, v11, a3, a4, a5, a6);
    uint64_t v16 = v15;
    swift_release();
    if (v6) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v17 = (void *)swift_slowAlloc();
    bzero(v17, v14);
    sub_10052A6C4((unint64_t *)v17, v13, v11, a3, a4, a5, a6);
    uint64_t v16 = v18;
    swift_release();
    swift_slowDealloc();
  }
  return v16;
}

uint64_t sub_10052A264(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_10052A8D0((unint64_t *)((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    uint64_t v8 = v7;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_10052A8D0((unint64_t *)v9, v5, v3);
    uint64_t v8 = v10;
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_10052A3C8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_10052AB78((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_10052AB78((unint64_t *)v8, v5, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_10052A540(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t (*)(id *))isStackAllocationSafe;
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_10052B280((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    uint64_t v10 = v9;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    sub_10052B280((unint64_t *)v11, v7, a3, v5);
    uint64_t v10 = v12;
    swift_release();
    swift_slowDealloc();
  }
  return v10;
}

void sub_10052A6C4(unint64_t *a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  int64_t v12 = 0;
  uint64_t v13 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a3 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_18:
    id v23 = *(id *)(*(void *)(a3 + 48) + 8 * v19);
    if ([v23 hasBeenRemoved])
    {
    }
    else
    {
      [v23 frameInUnscaledCanvas];
      v29.origin.CGFloat x = a4;
      v29.origin.CGFloat y = a5;
      v29.size.double width = a6;
      v29.size.double height = a7;
      BOOL v24 = CGRectIntersectsRect(v28, v29);

      if (v24)
      {
        *(unint64_t *)((char *)a1 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        BOOL v20 = __OFADD__(v27++, 1);
        if (v20) {
          goto LABEL_30;
        }
      }
    }
  }
  BOOL v20 = __OFADD__(v12++, 1);
  if (v20)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= v17) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v12);
  if (v21)
  {
LABEL_17:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_18;
  }
  int64_t v22 = v12 + 1;
  if (v12 + 1 >= v17) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v12 + 2;
  if (v12 + 2 >= v17) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v12 + 3;
  if (v12 + 3 >= v17)
  {
LABEL_27:
    swift_retain();
    sub_10052D204(a1, a2, v27, a3, (uint64_t *)&unk_1016710F0);
    return;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v12 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v17) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v13 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_10052A8D0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_21:
    uint64_t v14 = *(void **)(*(void *)(a3 + 48) + 8 * v10);
    sub_10050BF48(0, (unint64_t *)&unk_10168A0F0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v16 = v14;
    if (objc_msgSend(v16, "isKindOfClass:", ObjCClassFromMetadata, v24))
    {
      id v17 = [v16 info];
      type metadata accessor for CRLBoardItem(0);
      unint64_t v18 = (void *)swift_dynamicCastClass();
      if (v18)
      {
        uint64_t v19 = (*(uint64_t (**)(void))((swift_isaMask & *v18) + 0x130))();
        unint64_t v21 = v20;

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = HIBYTE(v21) & 0xF;
        if ((v21 & 0x2000000000000000) == 0) {
          uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
        }
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {

        swift_unknownObjectRelease();
      }
    }
    else
    {

LABEL_28:
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_31:
        swift_retain();
        sub_10052D204(a1, v24, v26, a3, (uint64_t *)&unk_1016710F0);
        return;
      }
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v11 >= v27) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v27) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v27) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v27) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10052AB78(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a2;
  uint64_t v59 = a1;
  uint64_t v71 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v5);
  uint64_t v70 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v7 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v8);
  unint64_t v67 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v66, v10);
  uint64_t v65 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  uint64_t result = __chkstk_darwin(v12 - 8, v13);
  id v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = 0;
  uint64_t v74 = a3;
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v60 = 0;
  uint64_t v61 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  int64_t v62 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v63 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v69 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v22 = &selRef_i_join;
  while (1)
  {
    if (v21)
    {
      unint64_t v37 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v38 = v37 | (v17 << 6);
      goto LABEL_22;
    }
    BOOL v39 = __OFADD__(v17++, 1);
    if (v39)
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v62) {
      goto LABEL_37;
    }
    unint64_t v40 = *(void *)(v61 + 8 * v17);
    if (!v40) {
      break;
    }
LABEL_21:
    unint64_t v21 = (v40 - 1) & v40;
    unint64_t v38 = __clz(__rbit64(v40)) + (v17 << 6);
LABEL_22:
    id v42 = *(id *)(*(void *)(v74 + 48) + 8 * v38);
    id v43 = [v42 v22[246]];
    type metadata accessor for CRLWPShapeItem();
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      unint64_t v45 = *(void **)(v44 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
      uint64_t v46 = v45;
      uint64_t result = swift_unknownObjectRelease();
      if (v45)
      {
        uint64_t v23 = *(void *)&v46[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
        if (!v23) {
          goto LABEL_40;
        }
        uint64_t v24 = (uint64_t)v65;
        (*(void (**)(void))(*(void *)v23 + 760))();
        sub_10052E408(v24 + *(int *)(v66 + 20), (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
        sub_10052E470(v24, type metadata accessor for CRLWPShapeItemCRDTData);
        unint64_t v25 = v67;
        uint64_t v26 = v68;
        (*v64)(v67, v16, v68);
        sub_10052E470((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
        int64_t v27 = (void *)CRAttributedString.attributedString.getter();
        (*v63)(v25, v26);
        id v28 = [v27 string];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;

        goto LABEL_6;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    id v47 = [v42 v22[246]];
    type metadata accessor for CRLWPStorage();
    uint64_t result = swift_dynamicCastClass();
    if (result)
    {
      uint64_t v48 = *(void *)(result + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
      if (!v48) {
        goto LABEL_41;
      }
      uint64_t v49 = (uint64_t)v65;
      (*(void (**)(void))(*(void *)v48 + 760))();
      sub_10052E408(v49 + *(int *)(v66 + 20), (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
      sub_10052E470(v49, type metadata accessor for CRLWPShapeItemCRDTData);
      uint64_t v50 = v67;
      uint64_t v51 = v68;
      (*v64)(v67, v16, v68);
      sub_10052E470((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
      uint64_t v52 = (void *)CRAttributedString.attributedString.getter();
      (*v63)(v50, v51);
      id v28 = [v52 string];

      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v53;
      swift_unknownObjectRelease();
LABEL_6:

      uint64_t v72 = v29;
      uint64_t v73 = v31;
      uint64_t v32 = v70;
      static CharacterSet.whitespaces.getter();
      sub_10052E310();
      uint64_t v33 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v35 = v34;
      (*v69)(v32, v71);
      swift_bridgeObjectRelease();

      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v36 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0) {
        uint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v22 = &selRef_i_join;
      if (v36)
      {
        *(unint64_t *)((char *)v59 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
        BOOL v39 = __OFADD__(v60++, 1);
        if (v39)
        {
          __break(1u);
LABEL_37:
          uint64_t v54 = v58;
          uint64_t v55 = v60;
          uint64_t v56 = v74;
          swift_retain();
          return sub_10052D204(v59, v54, v55, v56, (uint64_t *)&unk_1016710F0);
        }
      }
    }
    else
    {

      uint64_t result = swift_unknownObjectRelease();
    }
  }
  int64_t v41 = v17 + 1;
  if (v17 + 1 >= v62) {
    goto LABEL_37;
  }
  unint64_t v40 = *(void *)(v61 + 8 * v41);
  if (v40) {
    goto LABEL_20;
  }
  int64_t v41 = v17 + 2;
  if (v17 + 2 >= v62) {
    goto LABEL_37;
  }
  unint64_t v40 = *(void *)(v61 + 8 * v41);
  if (v40) {
    goto LABEL_20;
  }
  int64_t v41 = v17 + 3;
  if (v17 + 3 >= v62) {
    goto LABEL_37;
  }
  unint64_t v40 = *(void *)(v61 + 8 * v41);
  if (v40)
  {
LABEL_20:
    int64_t v17 = v41;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v17 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v17 >= v62) {
      goto LABEL_37;
    }
    unint64_t v40 = *(void *)(v61 + 8 * v17);
    ++v41;
    if (v40) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_10052B280(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *))
{
  int64_t v7 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    id v23 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    id v16 = v23;
    char v17 = a4(&v23);

    if (v4) {
      return;
    }
    if (v17)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v20++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v22) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v22) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v22) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v22)
  {
LABEL_27:
    swift_retain();
    sub_10052D204(a1, a2, v20, a3, (uint64_t *)&unk_1016710F0);
    return;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v22) {
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_10052B490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v9);
  int64_t v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_101672900);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  unint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  unint64_t v40 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v15 = result + 56;
  id v16 = v41;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          goto LABEL_37;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            goto LABEL_37;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              goto LABEL_37;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  goto LABEL_37;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    uint64_t v22 = *(void *)(*(void *)(a4 + 48) + 8 * v17);
    Hasher.init(_seed:)();
    uint64_t v23 = *(void *)(v22 + 24);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v23 + 32);
    swift_retain();
    v25(ObjectType, v23);
    sub_10052E3C0((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = v42;
    dispatch thunk of Hashable.hash(into:)();
    (*v40)(v16, v26);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(void *)(*(void *)(v11 + 48) + 8 * v3UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = v22;
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052B840(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_1016728F8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v35;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  uint64_t v36 = (uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v37 = v38 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v34)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v35[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v34) {
          goto LABEL_37;
        }
        unint64_t v19 = v35[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v34) {
            goto LABEL_37;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v34) {
              goto LABEL_37;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_37;
                }
                unint64_t v19 = v35[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = a4;
    uint64_t v22 = *(void *)(a4 + 48);
    uint64_t v23 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v10, v22 + v23 * v17, v7);
    sub_10052E3C0((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v24 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t result = (*v36)(*(void *)(v11 + 48) + v27 * v23, v10, v7);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v21;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052BBCC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1005057FC(&qword_101670F40);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    char v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *char v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10052BE64(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D204(a1, a2, a3, a4, &qword_101671328);
}

uint64_t sub_10052BE70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC((uint64_t *)&unk_101670EB0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v12 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0;
  uint64_t v16 = result + 56;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      uint64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v33)
      {
LABEL_37:
        swift_release();
        return v12;
      }
      unint64_t v20 = v32[v19];
      ++v15;
      if (!v20)
      {
        uint64_t v15 = v19 + 1;
        if (v19 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v20 = v32[v15];
        if (!v20)
        {
          uint64_t v15 = v19 + 2;
          if (v19 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v20 = v32[v15];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= v33) {
              goto LABEL_37;
            }
            unint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v15 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v20 = v32[v15];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v15 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v14 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    uint64_t v22 = *(void *)(v34 + 72);
    sub_10052E408(*(void *)(a4 + 48) + v22 * v18, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10052E3C0((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v16 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v16 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v16 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v16 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = sub_10052E4D0((uint64_t)v11, *(void *)(v12 + 48) + v26 * v22, type metadata accessor for CRLBoardIdentifier);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052C218(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D204(a1, a2, a3, a4, (uint64_t *)&unk_101671280);
}

uint64_t sub_10052C224(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1005057FC(&qword_101671318);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  unint64_t v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10052C490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_101672930);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      unint64_t v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          goto LABEL_37;
        }
        unint64_t v16 = v30[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            goto LABEL_37;
          }
          unint64_t v16 = v30[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              goto LABEL_37;
            }
            unint64_t v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  goto LABEL_37;
                }
                unint64_t v16 = v30[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_10052E538(*(void *)(a4 + 48) + 48 * v14, (uint64_t)v31);
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(*((Swift::UInt64 *)&v32 + 1));
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = (_OWORD *)(*(void *)(v6 + 48) + 48 * v21);
    long long v27 = v31[0];
    long long v28 = v32;
    v26[1] = v31[1];
    void v26[2] = v28;
    *uint64_t v26 = v27;
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052C730(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D204(a1, a2, a3, a4, &qword_101672928);
}

uint64_t sub_10052C73C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v45 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v41 - v17;
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_101672920);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v19 = result;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  if (a2 < 1) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = *a1;
  }
  uint64_t v22 = 0;
  uint64_t v23 = result + 56;
  uint64_t v44 = a4;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v22 << 6);
    }
    else
    {
      uint64_t v26 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_40;
      }
      if (v26 >= v43)
      {
LABEL_37:
        swift_release();
        return v19;
      }
      unint64_t v27 = v42[v26];
      ++v22;
      if (!v27)
      {
        uint64_t v22 = v26 + 1;
        if (v26 + 1 >= v43) {
          goto LABEL_37;
        }
        unint64_t v27 = v42[v22];
        if (!v27)
        {
          uint64_t v22 = v26 + 2;
          if (v26 + 2 >= v43) {
            goto LABEL_37;
          }
          unint64_t v27 = v42[v22];
          if (!v27)
          {
            uint64_t v28 = v26 + 3;
            if (v28 >= v43) {
              goto LABEL_37;
            }
            unint64_t v27 = v42[v28];
            if (!v27)
            {
              while (1)
              {
                uint64_t v22 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  goto LABEL_41;
                }
                if (v22 >= v43) {
                  goto LABEL_37;
                }
                unint64_t v27 = v42[v22];
                ++v28;
                if (v27) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v22 = v28;
          }
        }
      }
LABEL_24:
      unint64_t v21 = (v27 - 1) & v27;
      unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
    }
    uint64_t v29 = *(void *)(v46 + 72);
    sub_10052E408(*(void *)(a4 + 48) + v29 * v25, (uint64_t)v18, type metadata accessor for CRLSpotlightManager.ChangeType);
    Hasher.init(_seed:)();
    uint64_t v30 = v45;
    sub_10052E408((uint64_t)v18, v45, type metadata accessor for CRLSpotlightManager.ChangeType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_10052E4D0(v30, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(EnumCaseMultiPayload == 1);
    type metadata accessor for UUID();
    sub_10052E3C0((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_10052E470((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v19 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v23 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v35 = __clz(__rbit64((-1 << v33) & ~*(void *)(v23 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v38 = v34 == v37;
        if (v34 == v37) {
          unint64_t v34 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v23 + 8 * v34);
      }
      while (v39 == -1);
      unint64_t v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(void *)(v23 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    uint64_t result = sub_10052E4D0((uint64_t)v18, *(void *)(v19 + 48) + v35 * v29, type metadata accessor for CRLSpotlightManager.ChangeType);
    ++*(void *)(v19 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v44;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052CBDC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_101672910);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v35;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  char v36 = (uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v37 = v38 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v34)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v35[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v34) {
          goto LABEL_37;
        }
        unint64_t v19 = v35[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v34) {
            goto LABEL_37;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v34) {
              goto LABEL_37;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_37;
                }
                unint64_t v19 = v35[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = a4;
    uint64_t v22 = *(void *)(a4 + 48);
    uint64_t v23 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v10, v22 + v23 * v17, v7);
    sub_10052E3C0(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v24 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t result = (*v36)(*(void *)(v11 + 48) + v27 * v23, v10, v7);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v21;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052CF68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D204(a1, a2, a3, a4, &qword_101671068);
}

uint64_t sub_10052CF74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1005057FC(&qword_101671308);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = result;
  BOOL v30 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      unint64_t v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          goto LABEL_37;
        }
        unint64_t v16 = v30[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            goto LABEL_37;
          }
          unint64_t v16 = v30[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              goto LABEL_37;
            }
            unint64_t v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  goto LABEL_37;
                }
                unint64_t v16 = v30[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_10050BF84(*(void *)(a4 + 48) + 40 * v14, (uint64_t)v31);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v6 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = *(void *)(v6 + 48) + 40 * v21;
    long long v27 = v31[0];
    long long v28 = v31[1];
    *(void *)(v26 + 32) = v32;
    *(_OWORD *)uint64_t v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10052D1F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D204(a1, a2, a3, a4, &qword_101672908);
}

uint64_t sub_10052D204(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_1005057FC(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v10 = (void *)result;
  BOOL v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = v10[5];
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10052D460(void *a1, unsigned __int8 a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self sharedInstance];
  unsigned int v10 = [v9 accessibilitySupportLoaded];

  uint64_t v11 = 0;
  if (!v10) {
    return v11;
  }
  if (![a1 respondsToSelector:Selector.init(_:)()])
  {
    if (qword_10166FAE0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v14 = (void *)static OS_os_log.crlFollow;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = 0xD00000000000001ELL;
    *(void *)(inited + 4UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0) = 0x8000000101238F20;
    *(void *)(inited + 96) = sub_10050BF48(0, (unint64_t *)&qword_101678790);
    *(void *)(inited + 104) = sub_10052E1F4(&qword_1016728E0);
    *(void *)(inited + 72) = a1;
    id v16 = v14;
    id v17 = a1;
    uint64_t v18 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v18, (uint64_t)"The AX experience coordinator was unable to call %@ on %@", 57, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return 0;
  }
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [a1 valueForKey:v12];

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_10052E248((uint64_t)v45, (uint64_t)&v46);
  if (!v49)
  {
    sub_10052E2B0((uint64_t)&v46);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v19 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0) {
    uint64_t v19 = v43 & 0xFFFFFFFFFFFFLL;
  }
  if (!v19) {
    goto LABEL_30;
  }
  int v20 = a2;
  uint64_t v46 = v43;
  uint64_t v47 = v44;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_10052E310();
  uint64_t v21 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  unint64_t v22 = *(void *)(v21 + 16);
  if (v22 >= 6) {
    unint64_t v22 = 6;
  }
  uint64_t v46 = v21;
  uint64_t v47 = v21 + 32;
  uint64_t v48 = 0;
  uint64_t v49 = (2 * v22) | 1;
  sub_1005057FC(&qword_1016728E8);
  sub_10052E364();
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v26 = sub_100F61B70(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v28 = *((void *)v26 + 2);
  unint64_t v27 = *((void *)v26 + 3);
  if (v28 >= v27 >> 1) {
    unint64_t v26 = sub_100F61B70((double *)(v27 > 1), v28 + 1, 1, v26);
  }
  *((void *)v26 + 2) = v28 + 1;
  unint64_t v29 = &v26[2 * v28];
  *((void *)v29 + 4) = v23;
  *((void *)v29 + 5) = v25;
  if (v20 != 2)
  {
    uint64_t v30 = sub_100529438();
    uint64_t v32 = v31;
    unint64_t v34 = *((void *)v26 + 2);
    unint64_t v33 = *((void *)v26 + 3);
    if (v34 >= v33 >> 1) {
      unint64_t v26 = sub_100F61B70((double *)(v33 > 1), v34 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v34 + 1;
    unint64_t v35 = &v26[2 * v34];
    *((void *)v35 + 4) = v30;
    *((void *)v35 + 5) = v32;
  }
  char v36 = sub_10058FEB0((uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1009D7100((uint64_t)v36);
  unint64_t v38 = v37;
  swift_bridgeObjectRelease();
  if (v20 == 2 || (v20 & 1) != 0)
  {
    uint64_t v11 = sub_100529630(a1, v11, v38);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    unint64_t v38 = v40;
  }
  uint64_t v41 = HIBYTE(v38) & 0xF;
  if ((v38 & 0x2000000000000000) == 0) {
    uint64_t v41 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (!v41)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

uint64_t sub_10052D998(void *a1)
{
  uint64_t v2 = sub_1005057FC((uint64_t *)&unk_10167BC20);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v10 - 8, v11);
  id v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [a1 info];
  type metadata accessor for CRLWPShapeItem();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    id v16 = *(void **)(v15 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
    id v17 = v16;
    uint64_t result = swift_unknownObjectRelease();
    if (v16)
    {
      uint64_t v19 = *(void *)&v17[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 760))(result);
        sub_10052E408((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
        sub_10052E470((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
        uint64_t v20 = v30;
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v5, v13, v2);
        sub_10052E470((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
        uint64_t v21 = (void *)CRAttributedString.attributedString.getter();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v2);
        id v22 = [v21 string];

        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        return v23;
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  id v24 = [a1 info];
  type metadata accessor for CRLWPStorage();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v25 = *(void *)(result + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v25)
  {
    (*(void (**)(void))(*(void *)v25 + 760))();
    sub_10052E408((uint64_t)&v9[*(int *)(v6 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_10052E470((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    uint64_t v26 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v5, v13, v2);
    sub_10052E470((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    unint64_t v27 = (void *)CRAttributedString.attributedString.getter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
    id v28 = [v27 string];

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_unknownObjectRelease();

    return v23;
  }
LABEL_12:
  __break(1u);
  return result;
}

void sub_10052DDF0(uint64_t a1, unsigned __int8 a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v8 = sub_100065738(a3, a4, a5, a6);
  CGFloat v10 = v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10050BF48(0, (unint64_t *)&qword_101678790);
    sub_10052E1F4((unint64_t *)&qword_10167BE30);
    Set.Iterator.init(_cocoa:)();
    a1 = v48;
    uint64_t v46 = v49;
    uint64_t v11 = v50;
    uint64_t v12 = v51;
    unint64_t v13 = v52;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v46 = a1 + 56;
    uint64_t v11 = ~v14;
    uint64_t v15 = -v14;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v13 = v16 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
  }
  id v17 = 0;
  int64_t v45 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    uint64_t v18 = v12;
    if ((a1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    sub_10050BF48(0, (unint64_t *)&qword_101678790);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v21 = v47;
    swift_unknownObjectRelease();
    if (!v47) {
      goto LABEL_38;
    }
LABEL_30:
    uint64_t v25 = sub_10052D460(v21, a2);
    if (!v26) {
      goto LABEL_8;
    }
    uint64_t v27 = v25;
    unint64_t v28 = v26;
    swift_bridgeObjectRelease();
    uint64_t v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
    }
    if (!v29) {
      goto LABEL_8;
    }
    if (!v17) {
      goto LABEL_37;
    }
    id v30 = v17;
    [v21 frameInUnscaledCanvas];
    double v35 = sub_1000653CC(v8, v10, v31, v32, v33, v34);
    [v30 frameInUnscaledCanvas];
    CGFloat v37 = v36;
    CGFloat v39 = v38;
    CGFloat v41 = v40;
    CGFloat v43 = v42;

    if (v35 < sub_1000653CC(v8, v10, v37, v39, v41, v43))
    {

LABEL_37:
      id v17 = v21;
    }
    else
    {
LABEL_8:
    }
  }
  if (v13)
  {
    unint64_t v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v20 = v19 | (v12 << 6);
    goto LABEL_29;
  }
  int64_t v22 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    return;
  }
  if (v22 >= v45) {
    goto LABEL_38;
  }
  unint64_t v23 = *(void *)(v46 + 8 * v22);
  ++v12;
  if (v23) {
    goto LABEL_28;
  }
  uint64_t v12 = v18 + 2;
  if (v18 + 2 >= v45) {
    goto LABEL_38;
  }
  unint64_t v23 = *(void *)(v46 + 8 * v12);
  if (v23) {
    goto LABEL_28;
  }
  uint64_t v12 = v18 + 3;
  if (v18 + 3 >= v45) {
    goto LABEL_38;
  }
  unint64_t v23 = *(void *)(v46 + 8 * v12);
  if (v23) {
    goto LABEL_28;
  }
  uint64_t v12 = v18 + 4;
  if (v18 + 4 >= v45) {
    goto LABEL_38;
  }
  unint64_t v23 = *(void *)(v46 + 8 * v12);
  if (v23)
  {
LABEL_28:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_29:
    id v21 = *(id *)(*(void *)(a1 + 48) + 8 * v20);
    if (!v21) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
  uint64_t v24 = v18 + 5;
  while (v45 != v24)
  {
    unint64_t v23 = *(void *)(v46 + 8 * v24++);
    if (v23)
    {
      uint64_t v12 = v24 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  sub_10052E1EC();
  if (v17)
  {
    id v44 = v17;
    sub_10052D460(v44, a2);
  }
}

uint64_t sub_10052E1EC()
{
  return swift_release();
}

uint64_t sub_10052E1F4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10050BF48(255, (unint64_t *)&qword_101678790);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10052E248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101672BF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10052E2B0(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101672BF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10052E310()
{
  unint64_t result = qword_1016741C0;
  if (!qword_1016741C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016741C0);
  }
  return result;
}

unint64_t sub_10052E364()
{
  unint64_t result = qword_1016728F0;
  if (!qword_1016728F0)
  {
    sub_100522D34(&qword_1016728E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016728F0);
  }
  return result;
}

uint64_t sub_10052E3C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10052E408(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10052E470(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10052E4D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10052E538(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CRLFreehandDrawingLassoTypeData(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10052E660);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}